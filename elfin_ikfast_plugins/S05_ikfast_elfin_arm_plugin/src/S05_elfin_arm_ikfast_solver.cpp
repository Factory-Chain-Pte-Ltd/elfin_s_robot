/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2023-07-10 15:48:59.297127
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.353)*x3);
x13=((0.11)*x6);
x14=((1.0)*x10);
x15=((1.0)*x6);
x16=((1.0)*x9);
x17=((0.117)*x2);
x18=((1.0)*x5);
x19=((0.11)*x5);
x20=((0.117)*x3);
x21=(x0*x1);
x22=(x11*x9);
x23=(x2*x4);
x24=(x1*x11);
x25=(x1*x2);
x26=(x3*x4);
x27=(x11*x14);
x28=((1.0)*x1*x3);
x29=(x20*x4);
x30=((1.0)*x21*x3);
x31=((1.0)*x24*x3);
x32=((((-1.0)*x28))+x23);
x33=((((1.0)*x25))+(((1.0)*x26)));
x34=((-1.0)*x33);
x35=(x32*x6);
x36=(((x0*x26))+((x2*x21)));
x37=((((-1.0)*x30))+((x0*x23)));
x38=(((x2*x24))+((x11*x26)));
x39=((((-1.0)*x31))+((x11*x23)));
x40=(x37*x5);
x41=(x39*x5);
x42=(((x34*x5))+x35);
x43=(x40+((x36*x6)));
x44=(x41+((x38*x6)));
x45=(x44*x9);
x46=((((-1.0)*x18*x36))+((x15*(((((-1.0)*x30))+(((1.0)*x0*x23)))))));
x47=((((-1.0)*x18*x38))+((x15*(((((-1.0)*x31))+(((1.0)*x11*x23)))))));
eerot[0]=(((x7*(((((-1.0)*x16*x43))+x27))))+((x46*x8)));
eerot[1]=(((x8*(((((-1.0)*x27))+((x43*x9))))))+((x46*x7)));
eerot[2]=(((x10*x43))+x22);
eetrans[0]=((((0.353)*x0*x23))+(((0.11)*x22))+(((-1.0)*x12*x21))+((x5*((((x0*x29))+((x17*x21))))))+(((-0.43)*x21))+((x10*((((x19*x37))+((x13*x36))))))+(((0.139)*x11))+((x6*(((((-1.0)*x0*x17*x4))+((x20*x21)))))));
eerot[3]=(((x47*x8))+((x7*(((((-1.0)*x0*x14))+(((-1.0)*x16*x44)))))));
eerot[4]=(((x47*x7))+((x8*((((x0*x10))+x45)))));
eerot[5]=(((x10*x44))+(((-1.0)*x0*x16)));
eetrans[1]=((((-0.139)*x0))+((x6*(((((-1.0)*x11*x17*x4))+((x20*x24))))))+(((0.353)*x11*x23))+((x5*((((x11*x29))+((x17*x24))))))+(((-1.0)*x12*x24))+((x10*((((x19*x39))+((x13*x38))))))+(((-0.43)*x24))+(((-0.11)*x0*x9)));
IkReal x48=((1.0)*x32);
eerot[6]=(((x7*x9*(((((-1.0)*x18*x34))+(((-1.0)*x15*x48))))))+((x8*(((((-1.0)*x48*x5))+(((-1.0)*x33*x6)))))));
eerot[7]=(((x42*x8*x9))+((x7*(((((-1.0)*x18*x32))+(((-1.0)*x15*x33)))))));
eerot[8]=(x10*x42);
eetrans[2]=((0.121)+(((-1.0)*x12*x4))+(((-0.353)*x25))+((x6*((((x1*x17))+x29))))+(((-0.43)*x4))+((x5*(((((-1.0)*x1*x20))+((x17*x4))))))+((x10*((((x19*x34))+((x13*x32)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=r02;
new_px=((((-0.11)*r02))+px);
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=r12;
new_py=((((-0.11)*r12))+py);
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r21);
new_r22=r22;
new_pz=((-0.121)+(((-0.11)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x49=((1.0)*px);
IkReal x50=((1.0)*pz);
IkReal x51=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x51))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x50)));
rxp0_2=((((-1.0)*r10*x49))+((py*r00)));
rxp1_0=((((-1.0)*r21*x51))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x50)));
rxp1_2=((((-1.0)*r11*x49))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x51)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x50)));
rxp2_2=((((-1.0)*r12*x49))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x52=((0.117)*r20);
IkReal x53=((0.117)*r21);
IkReal x54=((0.117)*r22);
IkReal x55=((-0.234)*npx);
IkReal x56=((-0.234)*npy);
IkReal x57=((-1.0)*npz);
IkReal x58=((-1.0)*r21);
IkReal x59=((-1.0)*npy);
IkReal x60=((-0.117)*r21);
IkReal x61=((-1.0)*rxp0_2);
IkReal x62=((-1.0)*r22);
IkReal x63=((-0.117)*r22);
IkReal x64=((-1.0)*rxp1_2);
IkReal x65=((-1.0)*npx);
matrixinvcoeffs[0]=x52;
matrixinvcoeffs[1]=x55;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=r20;
matrixinvcoeffs[9]=0;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=x65;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=rxp0_2;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x52;
matrixinvcoeffs[19]=x55;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=0;
matrixinvcoeffs[25]=npx;
matrixinvcoeffs[26]=((-1.0)*r20);
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x61;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x53;
matrixinvcoeffs[33]=x56;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=r21;
matrixinvcoeffs[41]=0;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=x59;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=rxp1_2;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x53;
matrixinvcoeffs[51]=x56;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=0;
matrixinvcoeffs[57]=npy;
matrixinvcoeffs[58]=x58;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x64;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=x57;
matrixinvcoeffs[74]=r22;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x54;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=rxp2_2;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=r22;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=x57;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x54;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=x58;
matrixinvcoeffs[101]=x59;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=rxp1_2;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x60;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=x58;
matrixinvcoeffs[119]=x59;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=rxp1_2;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x60;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=r20;
matrixinvcoeffs[133]=npx;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x61;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x52;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=r20;
matrixinvcoeffs[151]=npx;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x61;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x52;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x62;
matrixinvcoeffs[165]=x57;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x63;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x62;
matrixinvcoeffs[183]=x57;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x63;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=npy;
matrixinvcoeffs[202]=x58;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x60;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x64;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=x58;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=npy;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x60;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x64;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=x65;
matrixinvcoeffs[234]=r20;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x52;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=r20;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=x65;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x52;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=rxp0_2;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_9=matrixinvcoeffs[148], gclwh4_10=matrixinvcoeffs[164], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_8=matrixinvcoeffs[133], gclwh5_11=matrixinvcoeffs[181], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_10=matrixinvcoeffs[166], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_8=matrixinvcoeffs[135], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_10=matrixinvcoeffs[168], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_8=matrixinvcoeffs[137], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_10=matrixinvcoeffs[170], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_8=matrixinvcoeffs[139], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_9=matrixinvcoeffs[156], gclwh12_10=matrixinvcoeffs[172], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_8=matrixinvcoeffs[141], gclwh13_11=matrixinvcoeffs[189], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_9=matrixinvcoeffs[158], gclwh14_10=matrixinvcoeffs[174], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_8=matrixinvcoeffs[143], gclwh15_11=matrixinvcoeffs[191], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x66=pz*pz;
IkReal x67=pp*pp;
IkReal x68=((0.234)*pz);
IkReal x69=(gclwh1_2*r20);
IkReal x70=((0.165204)*rxp0_2);
IkReal x71=(pp*r21);
IkReal x72=(gclwh11_8*r22);
IkReal x73=((0.234)*rxp0_2);
IkReal x74=((0.008469671769)*r22);
IkReal x75=((0.154)*pp);
IkReal x76=(gclwh10_2*r22);
IkReal x77=(npy*pz);
IkReal x78=((2.0)*gclwh6_10);
IkReal x79=(gclwh9_0*r20);
IkReal x80=((0.009664434)*r22);
IkReal x81=(gclwh13_11*rxp1_2);
IkReal x82=(gclwh6_2*r21);
IkReal x83=(npx*pz);
IkReal x84=(gclwh8_2*r20);
IkReal x85=((0.013689)*pz);
IkReal x86=(npz*pz);
IkReal x87=((0.018018)*rxp0_2);
IkReal x88=((0.468)*rxp2_2);
IkReal x89=((0.183222)*rxp2_2);
IkReal x90=(gclwh14_3*pp);
IkReal x91=((0.001054053)*r21);
IkReal x92=((0.130104)*rxp2_2);
IkReal x93=(pp*r20);
IkReal x94=((4.0)*gclwh8_10);
IkReal x95=((0.000158258529)*r20);
IkReal x96=((0.054756)*r20);
IkReal x97=(gclwh15_11*r20);
IkReal x98=(gclwh5_1*pp);
IkReal x99=((0.234)*rxp2_2);
IkReal x100=((0.001902771)*r22);
IkReal x101=(gclwh4_3*rxp2_2);
IkReal x102=(gclwh12_10*r21);
IkReal x103=(gclwh12_14*rxp1_2);
IkReal x104=((0.001902771)*r21);
IkReal x105=((2.0)*gclwh8_10);
IkReal x106=((0.165204)*rxp1_2);
IkReal x107=(pp*r22);
IkReal x108=((2.0)*gclwh4_10);
IkReal x109=((0.01177254)*r21);
IkReal x110=((0.032526)*rxp1_2);
IkReal x111=(gclwh13_1*rxp1_2);
IkReal x112=((0.001902771)*r20);
IkReal x113=((0.008469671769)*r20);
IkReal x114=((0.032526)*rxp2_2);
IkReal x115=((0.001054053)*r20);
IkReal x116=(gclwh14_2*r20);
IkReal x117=(gclwh13_8*rxp1_2);
IkReal x118=((4.0)*gclwh9_8);
IkReal x119=((0.278)*gclwh14_14);
IkReal x120=(gclwh3_2*r21);
IkReal x121=(gclwh4_3*pp);
IkReal x122=((0.018018)*rxp2_2);
IkReal x123=(gclwh13_1*r21);
IkReal x124=((0.366444)*rxp1_2);
IkReal x125=((0.009664434)*r21);
IkReal x126=((0.013689)*r22);
IkReal x127=(gclwh15_8*rxp0_2);
IkReal x128=((0.366444)*rxp0_2);
IkReal x129=((4.0)*gclwh6_10);
IkReal x130=((0.183222)*rxp0_2);
IkReal x131=((1.566)*pp);
IkReal x132=((0.706)*pp);
IkReal x133=((2.0)*gclwh7_8);
IkReal x134=((2.0)*gclwh5_8);
IkReal x135=((0.003805542)*r20);
IkReal x136=((0.027378)*r20);
IkReal x137=((1.0)*pz);
IkReal x138=(gclwh14_14*rxp0_2);
IkReal x139=((0.013689)*r20);
IkReal x140=(gclwh5_0*rxp2_2);
IkReal x141=((2.0)*gclwh13_8);
IkReal x142=(gclwh7_8*rxp1_2);
IkReal x143=(gclwh11_0*pz);
IkReal x144=((2.0)*pp);
IkReal x145=((2.0)*gclwh10_10);
IkReal x146=((0.013689)*r21);
IkReal x147=((0.065052)*rxp2_2);
IkReal x148=((0.019328868)*r21);
IkReal x149=(gclwh4_2*pz);
IkReal x150=((0.018018)*rxp1_2);
IkReal x151=((2.0)*gclwh9_8);
IkReal x152=((0.278)*gclwh5_15);
IkReal x153=((0.001601613)*r21);
IkReal x154=((2.0)*gclwh14_10);
IkReal x155=((0.936)*rxp2_2);
IkReal x156=(gclwh12_3*rxp1_2);
IkReal x157=((0.278)*gclwh13_15);
IkReal x158=((0.278)*gclwh12_14);
IkReal x159=((0.144780714)*rxp0_2);
IkReal x160=(gclwh10_10*r22);
IkReal x161=(gclwh11_0*r22);
IkReal x162=(gclwh3_3*r21);
IkReal x163=((0.003805542)*r22);
IkReal x164=((4.0)*gclwh10_10);
IkReal x165=(gclwh5_11*r22);
IkReal x166=((2.0)*gclwh15_8);
IkReal x167=(gclwh4_9*r22);
IkReal x168=((0.165204)*rxp2_2);
IkReal x169=(gclwh11_13*r22);
IkReal x170=((0.468)*rxp1_2);
IkReal x171=(gclwh10_12*r22);
IkReal x172=(gclwh4_3*r22);
IkReal x173=((0.019328868)*r20);
IkReal x174=(gclwh2_1*r21);
IkReal x175=((0.032526)*rxp0_2);
IkReal x176=(gclwh0_0*r20);
IkReal x177=(gclwh5_0*pz);
IkReal x178=((0.183222)*rxp1_2);
IkReal x179=(gclwh15_15*rxp0_2);
IkReal x180=(gclwh6_10*r21);
IkReal x181=(gclwh15_0*r20);
IkReal x182=((0.010718487)*r20);
IkReal x183=((0.278)*gclwh15_15);
IkReal x184=((4.0)*gclwh7_8);
IkReal x185=((0.278)*gclwh4_14);
IkReal x186=((0.20124)*rxp2_2);
IkReal x187=((0.468)*rxp0_2);
IkReal x188=((0.010718487)*r21);
IkReal x189=(gclwh14_9*rxp0_2);
IkReal x190=((0.036036)*rxp0_2);
IkReal x191=((0.036036)*rxp1_2);
IkReal x192=(gclwh7_0*r21);
IkReal x193=((0.366444)*rxp2_2);
IkReal x194=(gclwh13_15*rxp1_2);
IkReal x195=((0.003805542)*r21);
IkReal x196=((2.0)*gclwh12_10);
IkReal x197=(gclwh5_1*rxp2_2);
IkReal x198=((0.027378)*r22);
IkReal x199=(gclwh5_1*r22);
IkReal x200=(gclwh15_11*rxp0_2);
IkReal x201=(gclwh12_3*r21);
IkReal x202=((0.234)*rxp1_2);
IkReal x203=(gclwh14_9*r20);
IkReal x204=(gclwh12_9*rxp1_2);
IkReal x205=(gclwh4_2*r22);
IkReal x206=((0.002705274)*rxp0_2);
IkReal x207=((0.027378)*r21);
IkReal x208=((0.027378)*rxp2_2);
IkReal x209=((0.234)*pp);
IkReal x210=(gclwh12_2*r21);
IkReal x211=(gclwh4_14*x114);
IkReal x212=(gclwh8_5*x112);
IkReal x213=((0.032526)*x138);
IkReal x214=(gclwh10_5*x100);
IkReal x215=((0.032526)*x103);
IkReal x216=(gclwh6_5*x104);
IkReal x217=(gclwh10_10*x126);
IkReal x218=(gclwh12_10*x202);
IkReal x219=((0.027378)*x204);
IkReal x220=(gclwh6_10*x146);
IkReal x221=((0.027378)*x189);
IkReal x222=(gclwh14_10*x73);
IkReal x223=(gclwh8_10*x139);
IkReal x224=(gclwh4_9*x208);
IkReal x225=(gclwh4_10*x99);
IkReal x226=((0.234)*x117);
IkReal x227=((0.027378)*x200);
IkReal x228=(gclwh7_8*x146);
IkReal x229=((0.013689)*x72);
IkReal x230=(gclwh5_11*x208);
IkReal x231=(gclwh15_8*x73);
IkReal x232=(gclwh5_8*x99);
IkReal x233=(gclwh9_8*x139);
IkReal x234=((0.027378)*x81);
IkReal x235=(gclwh9_7*x112);
IkReal x236=(gclwh13_15*x110);
IkReal x237=(gclwh5_15*x114);
IkReal x238=(gclwh7_7*x104);
IkReal x239=(gclwh11_7*x100);
IkReal x240=(gclwh15_15*x175);
IkReal x241=(gclwh8_5*x175);
IkReal x242=(gclwh12_14*x104);
IkReal x243=(gclwh4_14*x100);
IkReal x244=(gclwh6_5*x110);
IkReal x245=(gclwh14_14*x112);
IkReal x246=(gclwh10_5*x114);
IkReal x247=((0.001601613)*x167);
IkReal x248=((0.001601613)*x203);
IkReal x249=(gclwh4_10*x126);
IkReal x250=(gclwh10_10*x99);
IkReal x251=(gclwh6_10*x202);
IkReal x252=(gclwh14_10*x139);
IkReal x253=(gclwh8_10*x73);
IkReal x254=((0.013689)*x102);
IkReal x255=(gclwh12_9*x153);
IkReal x256=(gclwh5_8*x126);
IkReal x257=(gclwh11_8*x99);
IkReal x258=(gclwh13_11*x153);
IkReal x259=(gclwh15_8*x139);
IkReal x260=((0.234)*x142);
IkReal x261=((0.001601613)*x97);
IkReal x262=(gclwh13_8*x146);
IkReal x263=((0.001601613)*x165);
IkReal x264=(gclwh9_8*x73);
IkReal x265=(gclwh9_7*x175);
IkReal x266=(gclwh5_15*x100);
IkReal x267=(gclwh15_15*x112);
IkReal x268=(gclwh7_7*x110);
IkReal x269=(gclwh11_7*x114);
IkReal x270=(gclwh13_15*x104);
IkReal x271=(gclwh8_10*x136);
IkReal x272=(gclwh4_10*x88);
IkReal x273=(gclwh14_10*x187);
IkReal x274=((0.065052)*x138);
IkReal x275=(gclwh4_14*x147);
IkReal x276=((0.065052)*x103);
IkReal x277=((0.027378)*x180);
IkReal x278=((0.027378)*x160);
IkReal x279=(gclwh12_10*x170);
IkReal x280=((0.065052)*x179);
IkReal x281=(gclwh5_15*x147);
IkReal x282=((0.065052)*x194);
IkReal x283=((0.027378)*x72);
IkReal x284=((0.468)*x117);
IkReal x285=(gclwh7_8*x207);
IkReal x286=((0.468)*x127);
IkReal x287=(gclwh5_8*x88);
IkReal x288=(gclwh9_8*x136);
IkReal x289=(gclwh8_10*x187);
IkReal x290=((0.027378)*x102);
IkReal x291=(gclwh12_14*x195);
IkReal x292=(gclwh14_14*x135);
IkReal x293=(gclwh4_14*x163);
IkReal x294=((0.023122)*x86);
IkReal x295=(pz*x93);
IkReal x296=(gclwh4_9*x107);
IkReal x297=((2.0)*x66);
IkReal x298=(rxp1_2*x68);
IkReal x299=((1.0)*x67);
IkReal x300=((0.139)*gclwh8_5*x93);
IkReal x301=((0.278)*gclwh6_5*x77);
IkReal x302=((0.278)*gclwh10_5*x86);
IkReal x303=((0.278)*gclwh8_5*x83);
IkReal x304=((0.139)*gclwh6_5*x71);
IkReal x305=((0.139)*gclwh10_5*x107);
IkReal x306=(x121*x99);
IkReal x307=(gclwh12_2*x298);
IkReal x308=(x82*x85);
IkReal x309=(gclwh6_2*pz*x71);
IkReal x310=(x105*x83);
IkReal x311=(x73*x90);
IkReal x312=(x76*x85);
IkReal x313=(pp*pz*x76);
IkReal x314=(x84*x85);
IkReal x315=(x77*x78);
IkReal x316=(x145*x86);
IkReal x317=(gclwh14_2*rxp0_2*x68);
IkReal x318=(gclwh4_2*rxp2_2*x68);
IkReal x319=(x156*x209);
IkReal x320=(gclwh7_0*pz*x71);
IkReal x321=(gclwh15_1*pp*x73);
IkReal x322=(x161*x85);
IkReal x323=(x107*x143);
IkReal x324=(x192*x85);
IkReal x325=(gclwh13_0*x298);
IkReal x326=(x98*x99);
IkReal x327=(x151*x83);
IkReal x328=((2.0)*gclwh11_8*x86);
IkReal x329=(x111*x209);
IkReal x330=(x133*x77);
IkReal x331=(gclwh15_0*rxp0_2*x68);
IkReal x332=(x140*x68);
IkReal x333=(x79*x85);
IkReal x334=((0.278)*gclwh11_7*x86);
IkReal x335=((0.139)*gclwh9_7*x93);
IkReal x336=((0.278)*gclwh7_7*x77);
IkReal x337=((0.139)*gclwh7_7*x71);
IkReal x338=((0.139)*gclwh11_7*x107);
IkReal x339=((0.278)*gclwh9_7*x83);
IkReal x340=(x119*x83);
IkReal x341=(x185*x86);
IkReal x342=((0.139)*gclwh12_14*x71);
IkReal x343=((0.139)*gclwh14_14*x93);
IkReal x344=((0.139)*gclwh4_14*x107);
IkReal x345=(x158*x77);
IkReal x346=(x196*x77);
IkReal x347=((0.117)*x296);
IkReal x348=(gclwh14_2*x295);
IkReal x349=(gclwh10_2*rxp2_2*x68);
IkReal x350=(x201*x67);
IkReal x351=(x120*x85);
IkReal x352=(gclwh6_2*x298);
IkReal x353=(x162*x67);
IkReal x354=(gclwh1_3*r20*x67);
IkReal x355=(gclwh12_9*npy*x68);
IkReal x356=(x205*x85);
IkReal x357=(x69*x85);
IkReal x358=((0.117)*gclwh14_9*x93);
IkReal x359=(x116*x85);
IkReal x360=(x107*x149);
IkReal x361=(gclwh8_2*rxp0_2*x68);
IkReal x362=(x154*x83);
IkReal x363=(x210*x85);
IkReal x364=(gclwh14_9*npx*x68);
IkReal x365=(gclwh4_9*npz*x68);
IkReal x366=((0.117)*gclwh12_9*x71);
IkReal x367=(x108*x86);
IkReal x368=(gclwh15_0*x295);
IkReal x369=(x123*x67);
IkReal x370=((0.117)*gclwh13_11*x71);
IkReal x371=(gclwh5_0*r22*x85);
IkReal x372=(x141*x77);
IkReal x373=(x107*x177);
IkReal x374=(gclwh2_0*pz*x71);
IkReal x375=(gclwh7_0*x298);
IkReal x376=(gclwh0_0*x295);
IkReal x377=(gclwh11_0*rxp2_2*x68);
IkReal x378=(x181*x85);
IkReal x379=(gclwh15_11*npx*x68);
IkReal x380=(gclwh5_11*npz*x68);
IkReal x381=(x176*x85);
IkReal x382=(gclwh9_0*rxp0_2*x68);
IkReal x383=((0.117)*gclwh5_11*x107);
IkReal x384=(gclwh13_11*npy*x68);
IkReal x385=((0.117)*gclwh15_11*x93);
IkReal x386=(x134*x86);
IkReal x387=(gclwh2_0*r21*x85);
IkReal x388=(gclwh13_0*r21*x85);
IkReal x389=(x166*x83);
IkReal x390=((0.139)*gclwh5_15*x107);
IkReal x391=(x157*x77);
IkReal x392=((0.139)*gclwh15_15*x93);
IkReal x393=(x152*x86);
IkReal x394=((0.139)*gclwh13_15*x71);
IkReal x395=(x183*x83);
IkReal x396=(x129*x77);
IkReal x397=(x164*x86);
IkReal x398=(x105*x93);
IkReal x399=(x71*x78);
IkReal x400=(x83*x94);
IkReal x401=(x107*x145);
IkReal x402=(x118*x83);
IkReal x403=(x133*x71);
IkReal x404=(x144*x72);
IkReal x405=(x184*x77);
IkReal x406=((4.0)*gclwh11_8*x86);
IkReal x407=(x151*x93);
IkReal x408=(x196*x71);
IkReal x409=((4.0)*gclwh14_10*x83);
IkReal x410=((4.0)*gclwh4_10*x86);
IkReal x411=((0.556)*gclwh14_14*x83);
IkReal x412=((0.556)*gclwh4_14*x86);
IkReal x413=(x158*x71);
IkReal x414=((0.556)*gclwh12_14*x77);
IkReal x415=(x119*x93);
IkReal x416=(x107*x185);
IkReal x417=(r20*x299);
IkReal x418=(gclwh8_2*npx*x297);
IkReal x419=(gclwh6_2*npy*x297);
IkReal x420=(pp*x137*x84);
IkReal x421=(gclwh10_2*npz*x297);
IkReal x422=(gclwh9_0*npx*x297);
IkReal x423=(pp*x137*x79);
IkReal x424=(gclwh11_0*npz*x297);
IkReal x425=(gclwh7_0*npy*x297);
IkReal x426=(gclwh12_2*npy*x297);
IkReal x427=(gclwh3_2*npy*x297);
IkReal x428=((2.0)*x121*x86);
IkReal x429=(gclwh1_2*npx*x297);
IkReal x430=((2.0)*x83*x90);
IkReal x431=(gclwh12_2*x137*x71);
IkReal x432=(pp*x137*x69);
IkReal x433=(gclwh3_3*x144*x77);
IkReal x434=(gclwh1_3*x144*x83);
IkReal x435=(gclwh4_2*npz*x297);
IkReal x436=(gclwh3_2*x137*x71);
IkReal x437=(x172*x299);
IkReal x438=(gclwh12_3*x144*x77);
IkReal x439=(gclwh14_2*npx*x297);
IkReal x440=(gclwh14_3*x417);
IkReal x441=(gclwh2_1*x144*x77);
IkReal x442=(gclwh0_1*x144*x83);
IkReal x443=(gclwh13_0*npy*x297);
IkReal x444=((2.0)*x86*x98);
IkReal x445=(gclwh15_1*x144*x83);
IkReal x446=(gclwh5_0*npz*x297);
IkReal x447=(gclwh0_0*npx*x297);
IkReal x448=(gclwh2_0*npy*x297);
IkReal x449=(gclwh0_1*x417);
IkReal x450=(gclwh13_1*x144*x77);
IkReal x451=(x174*x299);
IkReal x452=(gclwh15_1*x417);
IkReal x453=(gclwh15_0*npx*x297);
IkReal x454=(x199*x299);
IkReal x455=(gclwh13_0*x137*x71);
IkReal x456=(x274+x275);
IkReal x457=(x237+x240);
IkReal x458=(x281+x280);
IkReal x459=(x269+x268);
IkReal x460=(x246+x244);
IkReal x461=(x211+x213);
IkReal x462=(x327+x229+x228+x226);
IkReal x463=(x310+x217+x218+x220);
IkReal x464=(x386+x389+x264+x262);
IkReal x465=(x362+x367+x254+x253);
IkReal x466=(x342+x340+x341+x242);
IkReal x467=(x336+x335+x334+x235);
IkReal x468=(x395+x394+x393+x270);
IkReal x469=(x302+x300+x301+x212);
IkReal x470=(x291+x412+x413+x411);
IkReal x471=(x346+x250+x251+x252+x249);
IkReal x472=(x372+x259+x256+x257+x260);
IkReal x473=(x330+x328+x232+x233+x231);
IkReal x474=(x315+x316+x223+x222+x225);
IkReal x475=(x343+x344+x345+x243+x245);
IkReal x476=(x292+x293+x416+x414+x415);
IkReal x477=(x304+x305+x303+x214+x216);
IkReal x478=(x391+x390+x392+x267+x266);
IkReal x479=(x339+x338+x337+x238+x239);
IkReal x480=(x290+x289+x409+x408+x410);
IkReal x481=(x399+x277+x278+x279+x401+x400);
IkReal x482=(x288+x287+x286+x405+x407+x406);
IkReal x483=(x397+x396+x398+x272+x273+x271);
IkReal x484=(x285+x284+x283+x403+x402+x404);
IkReal x485=(((x107*x108))+((gclwh6_10*x170))+(((4.0)*gclwh12_10*x77))+((gclwh14_10*x136))+((gclwh10_10*x88))+((gclwh4_10*x198))+((x154*x93)));
IkReal x486=(x333+x332+x331+x329+x234+x425+x424+x423);
IkReal x487=(x308+x309+x306+x307+x311+x313+x312+x219+x418);
IkReal x488=(x319+x318+x314+x317+x221+x224+x419+x421+x420);
IkReal x489=(x324+x325+x326+x320+x321+x322+x323+x227+x230+x422);
IkReal x490=(x361+x363+x364+x365+x366+x255+x438+x439+x431+x432+x433+x434+x435+x436+x437+x440+x68);
IkReal x491=(x380+x379+x378+x377+x376+x375+x374+x373+x371+x370+x368+x369+x258+x445+x444+x441+x443+x442+x68);
IkReal x492=(x387+x384+x385+x382+x383+x381+x388+x261+x263+x449+x448+x447+x446+x454+x455+x452+x453+x450+x451);
IkReal x493=(x351+x350+x353+x352+x355+x354+x357+x356+x359+x358+x347+x348+x349+x360+x247+x248+x429+x428+x427+x426+x430);
op[0]=((((-1.566)*gclwh8_12*x83))+(((-1.0)*gclwh6_12*x188))+(((-0.010718487)*x171))+(((-0.783)*gclwh10_12*x107))+(((1.566)*gclwh10_12*x86))+(((1.566)*gclwh6_12*x77))+(((0.783)*gclwh8_12*x93))+(((-1.0)*x477))+(((-1.0)*x461))+x215+(((-1.0)*gclwh12_9*x178))+((gclwh8_12*x182))+x469+((gclwh4_9*x89))+((gclwh14_9*x130))+(((-0.783)*gclwh6_12*x71)));
op[1]=((((-1.0)*gclwh6_10*x71))+(((-0.144780714)*x101))+((gclwh8_10*x93))+(((-1.0)*x488))+(((-1.0)*gclwh10_10*x107))+(((-1.0)*gclwh14_3*x159))+(((-1.0)*x463))+x487+x474+(((0.144780714)*x156)));
op[2]=((-0.196268)+(((-1.0)*x481))+x483);
op[3]=((((-1.0)*gclwh4_9*x186))+(((-0.009664434)*x84))+((gclwh12_2*x106))+(((1.412)*gclwh8_2*x83))+(((-1.412)*gclwh10_2*x86))+(((-1.0)*gclwh4_2*x168))+(((-0.20124)*x189))+(((0.20124)*x204))+x456+((x132*x76))+(((0.009664434)*x76))+(((-1.0)*x132*x84))+(((0.009664434)*x82))+(((-1.0)*x276))+(((0.706)*gclwh6_2*x71))+(((-1.412)*gclwh6_2*x77))+(((-1.0)*gclwh14_2*x70)));
op[4]=(((gclwh8_12*x115))+(((0.154)*gclwh6_12*x77))+(((-0.077)*gclwh10_12*x107))+(((-1.0)*x477))+((gclwh12_9*x150))+(((-0.077)*gclwh6_12*x71))+(((-0.001054053)*x171))+(((-1.0)*gclwh4_9*x122))+(((-0.154)*gclwh8_12*x83))+x469+x461+(((0.077)*gclwh8_12*x93))+(((-1.0)*gclwh14_9*x87))+(((-1.0)*x215))+(((0.154)*gclwh10_12*x86))+(((-1.0)*gclwh6_12*x91)));
op[5]=((((0.002705274)*x156))+(((-1.0)*x488))+(((-1.0)*gclwh8_10*x93))+(((-1.0)*x474))+((gclwh10_10*x107))+((gclwh6_10*x71))+x487+x463+(((-1.0)*gclwh14_3*x206))+(((-0.002705274)*x101)));
op[6]=((((-1.0)*x486))+(((-1.0)*x462))+(((-0.144780714)*x197))+(((-1.0)*gclwh7_8*x71))+x489+x473+(((-1.0)*gclwh15_1*x159))+((gclwh9_8*x93))+(((-1.0)*pp*x72))+(((0.144780714)*x111)));
op[7]=((((-0.783)*gclwh11_13*x107))+(((-0.783)*gclwh7_13*x71))+(((-0.010718487)*x169))+(((-1.0)*x479))+(((-1.0)*x236))+x457+x467+(((1.566)*gclwh11_13*x86))+(((-1.0)*gclwh7_13*x188))+(((0.183222)*x81))+((gclwh9_13*x182))+(((-1.0)*gclwh5_11*x89))+(((-1.0)*gclwh15_11*x130))+(((-1.566)*gclwh9_13*x83))+(((0.783)*gclwh9_13*x93))+(((1.566)*gclwh7_13*x77)));
op[8]=((((-1.0)*x132*x79))+(((-1.412)*gclwh11_0*x86))+(((0.706)*gclwh7_0*x71))+(((-0.165204)*x140))+(((0.706)*gclwh11_0*x107))+(((-0.009664434)*x79))+((gclwh7_0*x125))+((gclwh13_0*x106))+(((1.412)*gclwh9_0*x83))+(((-0.20124)*x200))+(((0.20124)*x81))+(((-1.0)*gclwh5_11*x186))+x458+(((-1.0)*gclwh15_0*x70))+((gclwh11_0*x80))+(((-1.0)*x282))+(((-1.412)*gclwh7_0*x77)));
op[9]=((-0.196268)+(((-1.0)*x482))+x484);
op[10]=((((-1.0)*x486))+(((-1.0)*x473))+(((0.002705274)*x111))+x489+x462+(((-1.0)*gclwh15_1*x206))+(((-0.002705274)*x197))+((pp*x72))+((gclwh7_8*x71))+(((-1.0)*gclwh9_8*x93)));
op[11]=((((0.154)*gclwh11_13*x86))+(((-0.018018)*x81))+(((-0.077)*gclwh7_13*x71))+(((-0.077)*gclwh11_13*x107))+(((-1.0)*x479))+((gclwh9_13*x115))+((gclwh5_11*x122))+(((-0.001054053)*x169))+(((-1.0)*gclwh7_13*x91))+(((-1.0)*x457))+x236+x467+(((0.077)*gclwh9_13*x93))+((gclwh15_11*x87))+(((0.154)*gclwh7_13*x77))+(((-0.154)*gclwh9_13*x83)));
op[12]=(((gclwh8_12*x130))+(((-0.783)*gclwh14_9*x93))+(((-1.0)*gclwh6_12*x178))+(((-1.566)*gclwh12_9*x77))+(((-0.010718487)*x167))+(((-1.0)*gclwh14_9*x182))+(((-1.0)*x466))+(((-1.0)*x460))+(((1.566)*gclwh14_9*x83))+x241+(((0.783)*gclwh12_9*x71))+x475+(((-0.783)*x296))+((gclwh12_9*x188))+(((1.566)*gclwh4_9*x86))+(((-1.0)*gclwh10_12*x89)));
op[13]=((0.63241)+(((-0.008469671769)*x201))+((gclwh1_3*x113))+(((-1.237442)*gclwh4_3*x86))+(((-1.0)*x490))+(((-1.237442)*gclwh14_3*x83))+((gclwh14_3*x113))+(((0.605032)*gclwh4_3*x107))+(((-0.605032)*gclwh12_3*x71))+((gclwh12_10*x71))+(((-1.0)*x471))+((gclwh4_3*x74))+(((-1.0)*gclwh14_10*x93))+(((1.237442)*gclwh3_3*x77))+x493+x465+(((0.605032)*r20*x90))+(((0.008469671769)*x162))+(((-0.63241)*gclwh3_3*x71))+(((-0.63241)*gclwh1_3*x93))+(((1.237442)*gclwh12_3*x77))+(((-1.0)*gclwh4_10*x107))+(((1.237442)*gclwh1_3*x83)));
op[14]=((0.159224)+(((-1.0)*x485))+x480);
op[15]=((((-1.0)*x132*x69))+(((-0.706)*gclwh3_2*x71))+(((-1.412)*gclwh14_2*x83))+(((0.01177254)*x167))+(((0.01177254)*x203))+((gclwh6_2*x106))+(((-1.412)*gclwh4_2*x86))+((gclwh10_2*x168))+(((-0.86)*gclwh12_9*x71))+((gclwh4_2*x80))+(((-1.0)*x476))+(((-1.0)*gclwh12_2*x125))+(((-1.0)*gclwh12_9*x109))+(((-0.706)*gclwh12_2*x71))+(((-1.72)*gclwh14_9*x83))+(((1.412)*gclwh12_2*x77))+(((0.706)*gclwh14_2*x93))+x470+(((1.412)*gclwh3_2*x77))+(((0.706)*gclwh4_2*x107))+(((0.86)*gclwh14_9*x93))+(((0.009664434)*x116))+(((1.412)*gclwh1_2*x83))+(((0.86)*x296))+(((0.009664434)*x120))+(((0.009664434)*x69))+(((-1.0)*gclwh8_2*x70))+(((-1.72)*gclwh4_9*x86))+(((1.72)*gclwh12_9*x77)));
op[16]=((((-1.0)*gclwh10_12*x122))+(((-1.0)*gclwh6_12*x150))+(((0.154)*gclwh12_9*x77))+(((-1.0)*x475))+(((-0.154)*gclwh14_9*x83))+(((-1.0)*x460))+x241+(((-0.077)*gclwh12_9*x71))+x466+(((-0.154)*gclwh4_9*x86))+((gclwh14_9*x115))+(((0.001054053)*x167))+((gclwh8_12*x87))+(((0.077)*x296))+(((-1.0)*gclwh12_9*x91))+(((0.077)*gclwh14_9*x93)));
op[17]=((-0.02525)+(((-1.0)*x490))+(((-0.02525)*gclwh3_3*x71))+(((-0.002128)*gclwh4_3*x107))+(((-1.0)*x465))+((gclwh4_10*x107))+(((-0.02525)*gclwh1_3*x93))+(((0.023122)*gclwh3_3*x77))+((gclwh14_10*x93))+(((0.000158258529)*x172))+(((-1.0)*gclwh4_3*x294))+x493+x471+(((0.000158258529)*x162))+(((0.023122)*gclwh1_3*x83))+(((-0.023122)*gclwh14_3*x83))+((gclwh1_3*x95))+((gclwh14_3*x95))+(((-0.002128)*r20*x90))+(((-0.000158258529)*x201))+(((0.002128)*gclwh12_3*x71))+(((0.023122)*gclwh12_3*x77))+(((-1.0)*gclwh12_10*x71)));
op[18]=((0.63241)+(((-1.237442)*gclwh2_1*x77))+((gclwh5_1*x74))+(((-1.0)*x492))+(((-1.237442)*gclwh5_1*x86))+(((0.605032)*r22*x98))+(((-0.008469671769)*x123))+(((-1.0)*gclwh0_1*x113))+(((-1.237442)*gclwh0_1*x83))+(((-1.0)*x472))+(((-1.0)*gclwh5_8*x107))+((gclwh15_1*x113))+(((1.237442)*gclwh13_1*x77))+x491+x464+(((-0.008469671769)*x174))+(((0.63241)*gclwh0_1*x93))+(((-0.605032)*gclwh13_1*x71))+(((-1.237442)*gclwh15_1*x83))+(((0.63241)*gclwh2_1*x71))+(((-1.0)*gclwh15_8*x93))+(((0.605032)*gclwh15_1*x93))+((gclwh13_8*x71)));
op[19]=((((0.783)*gclwh5_11*x107))+(((-0.783)*gclwh13_11*x71))+(((-1.0)*x478))+(((-1.566)*gclwh5_11*x86))+(((-1.0)*gclwh11_13*x89))+(((0.010718487)*x165))+(((-1.0)*x459))+((gclwh9_13*x130))+x265+(((-1.0)*gclwh7_13*x178))+x468+(((1.566)*gclwh13_11*x77))+(((0.010718487)*x97))+(((-1.566)*gclwh15_11*x83))+(((-1.0)*gclwh13_11*x188))+(((0.783)*gclwh15_11*x93)));
op[20]=((((-1.412)*gclwh0_0*x83))+(((0.86)*gclwh15_11*x93))+(((-1.0)*gclwh2_0*x125))+(((-1.412)*gclwh5_0*x86))+(((0.01177254)*x165))+(((-1.0)*gclwh5_15*x163))+(((0.556)*gclwh15_15*x83))+(((-1.72)*gclwh5_11*x86))+(((-1.0)*gclwh13_0*x125))+(((1.412)*gclwh13_0*x77))+(((-0.706)*gclwh13_0*x71))+(((0.706)*gclwh5_0*x107))+((x157*x71))+((gclwh7_0*x106))+(((-1.0)*gclwh13_11*x109))+(((-1.412)*gclwh15_0*x83))+((gclwh5_0*x80))+(((0.706)*gclwh0_0*x93))+(((-1.0)*x107*x152))+(((-0.86)*gclwh13_11*x71))+((gclwh13_15*x195))+(((1.72)*gclwh13_11*x77))+(((-1.0)*gclwh15_15*x135))+(((0.86)*gclwh5_11*x107))+(((0.009664434)*x181))+(((-1.0)*gclwh9_0*x70))+(((0.556)*gclwh5_15*x86))+(((-1.412)*gclwh2_0*x77))+(((0.706)*gclwh15_0*x93))+((gclwh11_0*x168))+(((-0.556)*gclwh13_15*x77))+(((-0.009664434)*x176))+(((0.01177254)*x97))+(((-1.72)*gclwh15_11*x83))+(((-1.0)*x183*x93))+(((0.706)*gclwh2_0*x71)));
op[21]=((-0.159224)+(((0.468)*x142))+(((-1.0)*gclwh13_8*x207))+(((-4.0)*gclwh15_8*x83))+(((-1.0)*gclwh9_8*x187))+((x166*x93))+((gclwh11_8*x88))+((x107*x134))+((gclwh5_8*x198))+(((-1.0)*x141*x71))+(((-4.0)*gclwh5_8*x86))+((gclwh15_8*x136))+(((4.0)*gclwh13_8*x77)));
op[22]=((-0.02525)+(((0.002128)*gclwh13_1*x71))+(((-1.0)*gclwh13_8*x71))+(((-1.0)*x492))+(((-0.000158258529)*x174))+((gclwh15_1*x95))+(((0.023122)*gclwh13_1*x77))+(((-0.023122)*gclwh2_1*x77))+((gclwh5_8*x107))+(((0.02525)*gclwh0_1*x93))+(((-1.0)*x464))+(((0.000158258529)*x199))+x491+x472+((gclwh15_8*x93))+(((-0.023122)*gclwh0_1*x83))+(((-1.0)*gclwh5_1*x294))+(((-1.0)*gclwh0_1*x95))+(((-0.002128)*r22*x98))+(((-0.002128)*gclwh15_1*x93))+(((-0.023122)*gclwh15_1*x83))+(((0.02525)*gclwh2_1*x71))+(((-0.000158258529)*x123)));
op[23]=((((0.154)*gclwh5_11*x86))+((gclwh9_13*x87))+(((-1.0)*gclwh11_13*x122))+(((-1.0)*gclwh7_13*x150))+(((-0.001054053)*x165))+(((-1.0)*x468))+(((-0.077)*gclwh15_11*x93))+(((-0.001054053)*x97))+((gclwh13_11*x91))+(((-1.0)*x459))+x265+x478+(((-0.154)*gclwh13_11*x77))+(((-0.077)*gclwh5_11*x107))+(((0.154)*gclwh15_11*x83))+(((0.077)*gclwh13_11*x71)));
op[24]=((-0.435348)+(((-1.0)*x481))+x483);
op[25]=((((1.566)*gclwh6_2*x71))+(((-1.0)*gclwh14_2*x128))+(((-1.0)*gclwh4_2*x193))+(((-0.021436974)*x84))+(((-3.132)*gclwh6_2*x77))+((gclwh12_2*x124))+(((-3.132)*gclwh10_2*x86))+(((0.021436974)*x76))+((x131*x76))+x456+(((-1.0)*x276))+(((0.021436974)*x82))+(((-1.0)*x131*x84))+(((3.132)*gclwh8_2*x83)));
op[26]=(((gclwh6_12*x148))+(((2.824)*gclwh8_12*x83))+(((-2.824)*gclwh6_12*x77))+(((-1.412)*gclwh8_12*x93))+((gclwh4_14*x92))+(((-2.824)*gclwh10_12*x86))+(((1.412)*gclwh6_12*x71))+(((-1.0)*gclwh8_12*x173))+(((0.130104)*x138))+(((-0.130104)*x103))+(((1.412)*gclwh10_12*x107))+(((0.019328868)*x171)));
op[27]=((((-8.0)*gclwh6_10*x77))+(((-1.0)*gclwh8_10*x96))+((x107*x164))+(((0.936)*gclwh12_10*rxp1_2))+(((-8.0)*gclwh10_10*x86))+((x129*x71))+(((0.054756)*x180))+(((8.0)*gclwh8_10*x83))+(((0.054756)*x160))+(((-1.0)*gclwh4_10*x155))+(((-1.0)*x93*x94))+(((-0.936)*gclwh14_10*rxp0_2)));
op[28]=((-0.042812)+(((-1.0)*x483))+x481);
op[29]=((((0.154)*gclwh6_2*x71))+(((-0.036036)*gclwh4_2*rxp2_2))+(((0.002108106)*x76))+(((-0.308)*gclwh10_2*x86))+(((-1.0)*x456))+x276+((x75*x76))+(((-0.002108106)*x84))+(((-0.308)*gclwh6_2*x77))+(((0.308)*gclwh8_2*x83))+(((-1.0)*gclwh14_2*x190))+(((-1.0)*x75*x84))+(((0.002108106)*x82))+((gclwh12_2*x191)));
op[30]=((((1.566)*gclwh11_0*x107))+(((0.021436974)*x161))+(((-0.366444)*x140))+((gclwh13_0*x124))+(((-3.132)*gclwh7_0*x77))+(((0.021436974)*x192))+(((-1.0)*gclwh15_0*x128))+x458+(((1.566)*gclwh7_0*x71))+(((-0.021436974)*x79))+(((-1.0)*x282))+(((-1.0)*x131*x79))+(((-3.132)*gclwh11_0*x86))+(((3.132)*gclwh9_0*x83)));
op[31]=((-0.435348)+(((-1.0)*x482))+x484);
op[32]=((((-1.0)*gclwh9_8*x96))+(((0.054756)*gclwh7_8*r21))+(((0.054756)*x72))+(((-1.0)*x118*x93))+(((-8.0)*gclwh11_8*x86))+((x184*x71))+(((-8.0)*gclwh7_8*x77))+(((0.936)*x117))+(((4.0)*pp*x72))+(((-1.0)*gclwh5_8*x155))+(((8.0)*gclwh9_8*x83))+(((-0.936)*x127)));
op[33]=((((0.130104)*x194))+(((-2.824)*gclwh11_13*x86))+(((-1.0)*gclwh5_15*x92))+(((2.824)*gclwh9_13*x83))+(((-2.824)*gclwh7_13*x77))+((gclwh7_13*x148))+(((-0.130104)*x179))+(((-1.0)*gclwh9_13*x173))+(((-1.412)*gclwh9_13*x93))+(((1.412)*gclwh11_13*x107))+(((1.412)*gclwh7_13*x71))+(((0.019328868)*x169)));
op[34]=((((0.002108106)*x161))+(((-0.002108106)*x79))+(((0.308)*gclwh9_0*x83))+((x161*x75))+(((-1.0)*x458))+(((-1.0)*gclwh15_0*x190))+x282+(((-0.036036)*x140))+(((-0.308)*gclwh7_0*x77))+(((-0.308)*gclwh11_0*x86))+(((0.154)*gclwh7_0*x71))+(((0.002108106)*x192))+((gclwh13_0*x191))+(((-1.0)*x75*x79)));
op[35]=((-0.042812)+(((-1.0)*x484))+x482);
op[36]=((-1.187536)+(((-1.0)*x485))+x480);
op[37]=((((-0.021436974)*x210))+(((0.021436974)*x205))+(((-1.566)*gclwh3_2*x71))+((gclwh10_2*x193))+(((-3.132)*gclwh14_2*x83))+(((1.566)*gclwh4_2*x107))+(((-1.0)*gclwh8_2*x128))+(((-3.132)*gclwh4_2*x86))+((gclwh6_2*x124))+(((-1.0)*x476))+(((3.132)*gclwh1_2*x83))+(((3.132)*gclwh3_2*x77))+(((0.021436974)*x120))+x470+(((-1.566)*gclwh12_2*x71))+(((-1.0)*x131*x69))+(((0.021436974)*x116))+(((0.021436974)*x69))+(((1.566)*gclwh14_2*x93))+(((3.132)*gclwh12_2*x77)));
IkReal x494=pz*pz;
IkReal x495=pp*pp;
IkReal x496=((0.234)*pz);
IkReal x497=(gclwh13_8*r21);
IkReal x498=((0.165204)*rxp0_2);
IkReal x499=((0.706)*pp);
IkReal x500=(gclwh3_2*r21);
IkReal x501=(gclwh10_2*r22);
IkReal x502=((0.234)*rxp0_2);
IkReal x503=((0.008469671769)*r22);
IkReal x504=(npy*pz);
IkReal x505=((2.0)*gclwh6_10);
IkReal x506=(gclwh11_0*r22);
IkReal x507=(pp*r21);
IkReal x508=(gclwh1_2*r20);
IkReal x509=(gclwh13_11*rxp1_2);
IkReal x510=((4.0)*pp);
IkReal x511=((0.002108106)*r21);
IkReal x512=(npx*pz);
IkReal x513=(npz*pz);
IkReal x514=((0.556)*gclwh5_15);
IkReal x515=((0.018018)*rxp0_2);
IkReal x516=((0.468)*rxp2_2);
IkReal x517=(gclwh11_8*r22);
IkReal x518=((0.183222)*rxp2_2);
IkReal x519=(gclwh14_3*pp);
IkReal x520=(gclwh13_0*r21);
IkReal x521=((0.001054053)*r21);
IkReal x522=(gclwh15_11*r20);
IkReal x523=((0.783)*pp);
IkReal x524=(gclwh9_0*rxp0_2);
IkReal x525=((0.000158258529)*r20);
IkReal x526=(gclwh5_1*pp);
IkReal x527=((0.234)*rxp2_2);
IkReal x528=((0.001902771)*r22);
IkReal x529=(gclwh4_3*rxp2_2);
IkReal x530=(gclwh12_10*r21);
IkReal x531=((0.001902771)*r21);
IkReal x532=(pp*r20);
IkReal x533=((2.0)*gclwh8_10);
IkReal x534=(gclwh6_2*r21);
IkReal x535=(gclwh7_0*rxp1_2);
IkReal x536=((0.165204)*rxp1_2);
IkReal x537=(pp*r22);
IkReal x538=((2.0)*gclwh4_10);
IkReal x539=((0.01177254)*r21);
IkReal x540=(gclwh9_8*rxp0_2);
IkReal x541=(gclwh7_0*r21);
IkReal x542=((0.032526)*rxp1_2);
IkReal x543=(gclwh13_1*rxp1_2);
IkReal x544=((0.001902771)*r20);
IkReal x545=((0.008469671769)*r20);
IkReal x546=((0.001054053)*r20);
IkReal x547=(gclwh8_12*r20);
IkReal x548=(gclwh5_0*r22);
IkReal x549=((0.013689)*pz);
IkReal x550=((0.278)*gclwh14_14);
IkReal x551=(gclwh13_1*r21);
IkReal x552=((0.154)*pp);
IkReal x553=((0.009664434)*r21);
IkReal x554=((0.032526)*rxp2_2);
IkReal x555=((0.002108106)*r20);
IkReal x556=(gclwh11_0*rxp2_2);
IkReal x557=((0.183222)*rxp0_2);
IkReal x558=((0.556)*gclwh12_14);
IkReal x559=(gclwh13_15*r21);
IkReal x560=((0.021436974)*r20);
IkReal x561=(gclwh9_0*r20);
IkReal x562=((2.0)*gclwh7_8);
IkReal x563=((2.0)*gclwh5_8);
IkReal x564=((0.003805542)*r20);
IkReal x565=(gclwh4_2*r22);
IkReal x566=((0.027378)*r20);
IkReal x567=((0.013689)*r20);
IkReal x568=((0.234)*rxp1_2);
IkReal x569=(gclwh5_8*r22);
IkReal x570=((2.0)*pp);
IkReal x571=((0.065052)*rxp1_2);
IkReal x572=((0.065052)*rxp2_2);
IkReal x573=(gclwh4_2*pz);
IkReal x574=(gclwh7_8*rxp1_2);
IkReal x575=(gclwh2_0*r21);
IkReal x576=((0.018018)*rxp1_2);
IkReal x577=((2.0)*gclwh9_8);
IkReal x578=((0.278)*gclwh5_15);
IkReal x579=((0.556)*gclwh13_15);
IkReal x580=((0.001601613)*r21);
IkReal x581=(gclwh9_13*r20);
IkReal x582=(gclwh14_10*r20);
IkReal x583=((2.0)*gclwh14_10);
IkReal x584=((0.009664434)*r20);
IkReal x585=(gclwh12_3*rxp1_2);
IkReal x586=((0.278)*gclwh13_15);
IkReal x587=((0.278)*gclwh12_14);
IkReal x588=((0.144780714)*rxp0_2);
IkReal x589=(gclwh3_3*r21);
IkReal x590=(gclwh8_10*rxp0_2);
IkReal x591=((0.003805542)*r22);
IkReal x592=(gclwh5_11*r22);
IkReal x593=((2.0)*gclwh15_8);
IkReal x594=(gclwh4_9*r22);
IkReal x595=((0.010718487)*r22);
IkReal x596=((0.468)*rxp1_2);
IkReal x597=(gclwh12_14*r21);
IkReal x598=(gclwh2_1*r21);
IkReal x599=((4.0)*gclwh12_10);
IkReal x600=(gclwh12_2*pz);
IkReal x601=(gclwh6_10*r21);
IkReal x602=((1.0)*pp);
IkReal x603=((0.032526)*rxp0_2);
IkReal x604=(gclwh10_2*rxp2_2);
IkReal x605=(gclwh5_0*pz);
IkReal x606=(gclwh6_12*rxp1_2);
IkReal x607=(gclwh10_12*r22);
IkReal x608=((0.065052)*rxp0_2);
IkReal x609=(gclwh4_3*r22);
IkReal x610=((0.330408)*rxp0_2);
IkReal x611=(gclwh14_9*r20);
IkReal x612=((0.278)*gclwh15_15);
IkReal x613=((0.556)*gclwh15_15);
IkReal x614=((0.278)*gclwh4_14);
IkReal x615=(pp*pz);
IkReal x616=(gclwh4_9*rxp2_2);
IkReal x617=((0.010718487)*r21);
IkReal x618=(gclwh15_8*r20);
IkReal x619=(gclwh14_9*rxp0_2);
IkReal x620=(gclwh7_13*rxp1_2);
IkReal x621=(gclwh11_13*r22);
IkReal x622=((0.007611084)*r22);
IkReal x623=((0.468)*rxp0_2);
IkReal x624=(gclwh4_10*r22);
IkReal x625=((0.936)*rxp2_2);
IkReal x626=((2.0)*gclwh12_10);
IkReal x627=((2.0)*gclwh10_10);
IkReal x628=(gclwh5_11*rxp2_2);
IkReal x629=(gclwh13_0*pz);
IkReal x630=(gclwh5_1*rxp2_2);
IkReal x631=(gclwh5_1*r22);
IkReal x632=((0.165204)*rxp2_2);
IkReal x633=((0.007611084)*r20);
IkReal x634=(gclwh15_11*rxp0_2);
IkReal x635=(gclwh12_3*r21);
IkReal x636=((0.556)*gclwh14_14);
IkReal x637=((0.556)*gclwh4_14);
IkReal x638=((0.330408)*rxp2_2);
IkReal x639=(gclwh12_9*rxp1_2);
IkReal x640=((0.002705274)*rxp0_2);
IkReal x641=(gclwh10_10*r22);
IkReal x642=(gclwh7_8*r21);
IkReal x643=(gclwh6_2*pz);
IkReal x644=(gclwh12_2*r21);
IkReal x645=((0.018018)*rxp2_2);
IkReal x646=(gclwh15_15*x564);
IkReal x647=(gclwh5_15*x591);
IkReal x648=((0.003805542)*x559);
IkReal x649=((0.027378)*x497);
IkReal x650=((0.468)*x540);
IkReal x651=(gclwh11_8*x516);
IkReal x652=(gclwh15_8*x566);
IkReal x653=((0.027378)*x569);
IkReal x654=((0.468)*x574);
IkReal x655=(gclwh8_5*x544);
IkReal x656=(gclwh12_14*x542);
IkReal x657=(gclwh10_5*x528);
IkReal x658=(gclwh4_14*x554);
IkReal x659=(gclwh14_14*x603);
IkReal x660=(gclwh6_5*x531);
IkReal x661=(gclwh14_10*x502);
IkReal x662=(gclwh8_10*x567);
IkReal x663=((0.027378)*x639);
IkReal x664=(gclwh4_10*x527);
IkReal x665=((0.027378)*x619);
IkReal x666=((0.013689)*x641);
IkReal x667=(gclwh12_10*x568);
IkReal x668=((0.027378)*x616);
IkReal x669=((0.013689)*x601);
IkReal x670=(gclwh15_8*x502);
IkReal x671=(gclwh5_8*x527);
IkReal x672=((0.027378)*x634);
IkReal x673=(gclwh9_8*x567);
IkReal x674=((0.027378)*x628);
IkReal x675=(gclwh13_8*x568);
IkReal x676=((0.013689)*x642);
IkReal x677=((0.013689)*x517);
IkReal x678=((0.027378)*x509);
IkReal x679=(gclwh9_7*x544);
IkReal x680=(gclwh5_15*x554);
IkReal x681=(gclwh15_15*x603);
IkReal x682=(gclwh7_7*x531);
IkReal x683=(gclwh13_15*x542);
IkReal x684=(gclwh11_7*x528);
IkReal x685=(gclwh10_10*x516);
IkReal x686=(gclwh6_10*x596);
IkReal x687=((0.027378)*x624);
IkReal x688=(gclwh14_10*x566);
IkReal x689=(gclwh14_14*x564);
IkReal x690=(gclwh4_14*x591);
IkReal x691=((0.003805542)*x597);
IkReal x692=(gclwh8_5*x603);
IkReal x693=(gclwh4_14*x528);
IkReal x694=(gclwh14_14*x544);
IkReal x695=(gclwh6_5*x542);
IkReal x696=(gclwh12_14*x531);
IkReal x697=(gclwh10_5*x554);
IkReal x698=(gclwh8_10*x502);
IkReal x699=((0.001601613)*x594);
IkReal x700=((0.001601613)*x611);
IkReal x701=((0.013689)*x530);
IkReal x702=((0.013689)*x624);
IkReal x703=(gclwh10_10*x527);
IkReal x704=(gclwh12_9*x580);
IkReal x705=(gclwh6_10*x568);
IkReal x706=(gclwh14_10*x567);
IkReal x707=(gclwh13_11*x580);
IkReal x708=((0.013689)*x497);
IkReal x709=(gclwh9_8*x502);
IkReal x710=((0.001601613)*x522);
IkReal x711=((0.013689)*x569);
IkReal x712=(gclwh11_8*x527);
IkReal x713=(gclwh15_8*x567);
IkReal x714=((0.001601613)*x592);
IkReal x715=(gclwh7_8*x568);
IkReal x716=(gclwh9_7*x603);
IkReal x717=(gclwh13_15*x531);
IkReal x718=(gclwh7_7*x542);
IkReal x719=(gclwh11_7*x554);
IkReal x720=(gclwh5_15*x528);
IkReal x721=(gclwh15_15*x544);
IkReal x722=((0.023122)*x513);
IkReal x723=(pz*x532);
IkReal x724=(gclwh4_9*x537);
IkReal x725=(r20*x549);
IkReal x726=((2.0)*x494);
IkReal x727=(pz*x602);
IkReal x728=((1.0)*x495);
IkReal x729=(x537*x578);
IkReal x730=(x504*x579);
IkReal x731=(x532*x612);
IkReal x732=(x513*x514);
IkReal x733=(x512*x613);
IkReal x734=(x507*x586);
IkReal x735=(x497*x570);
IkReal x736=((4.0)*gclwh15_8*x512);
IkReal x737=((4.0)*gclwh5_8*x513);
IkReal x738=((4.0)*gclwh13_8*x504);
IkReal x739=(x532*x593);
IkReal x740=(x537*x563);
IkReal x741=((0.139)*gclwh8_5*x532);
IkReal x742=((0.278)*gclwh6_5*x504);
IkReal x743=((0.278)*gclwh10_5*x513);
IkReal x744=((0.278)*gclwh8_5*x512);
IkReal x745=((0.139)*gclwh6_5*x507);
IkReal x746=((0.139)*gclwh10_5*x537);
IkReal x747=(gclwh4_3*pp*x527);
IkReal x748=(gclwh12_2*rxp1_2*x496);
IkReal x749=(x504*x505);
IkReal x750=(x534*x549);
IkReal x751=(x507*x643);
IkReal x752=(x513*x627);
IkReal x753=(x502*x519);
IkReal x754=(x501*x549);
IkReal x755=(x501*x615);
IkReal x756=(gclwh8_2*x725);
IkReal x757=(x512*x533);
IkReal x758=(gclwh14_2*rxp0_2*x496);
IkReal x759=(gclwh4_2*rxp2_2*x496);
IkReal x760=(gclwh12_3*pp*x568);
IkReal x761=((2.0)*gclwh11_8*x513);
IkReal x762=(x504*x562);
IkReal x763=(gclwh7_0*pz*x507);
IkReal x764=(gclwh15_1*pp*x502);
IkReal x765=(x506*x549);
IkReal x766=(x506*x615);
IkReal x767=(x541*x549);
IkReal x768=(gclwh13_0*rxp1_2*x496);
IkReal x769=(x526*x527);
IkReal x770=((0.234)*pp*x543);
IkReal x771=(gclwh15_0*rxp0_2*x496);
IkReal x772=(gclwh5_0*rxp2_2*x496);
IkReal x773=(x549*x561);
IkReal x774=(x512*x577);
IkReal x775=((0.278)*gclwh11_7*x513);
IkReal x776=((0.139)*gclwh9_7*x532);
IkReal x777=((0.278)*gclwh7_7*x504);
IkReal x778=((0.139)*gclwh7_7*x507);
IkReal x779=((0.139)*gclwh11_7*x537);
IkReal x780=((0.278)*gclwh9_7*x512);
IkReal x781=(x532*x583);
IkReal x782=(x537*x538);
IkReal x783=(x504*x599);
IkReal x784=(x504*x558);
IkReal x785=(x532*x550);
IkReal x786=(x537*x614);
IkReal x787=(x512*x636);
IkReal x788=(x513*x637);
IkReal x789=(x507*x587);
IkReal x790=((0.139)*gclwh14_14*x532);
IkReal x791=((0.139)*gclwh4_14*x537);
IkReal x792=(x504*x587);
IkReal x793=(x512*x550);
IkReal x794=(x513*x614);
IkReal x795=((0.139)*gclwh12_14*x507);
IkReal x796=((0.117)*x724);
IkReal x797=(gclwh14_2*x723);
IkReal x798=(x496*x604);
IkReal x799=(x495*x635);
IkReal x800=(x512*x583);
IkReal x801=(x500*x549);
IkReal x802=(gclwh6_2*rxp1_2*x496);
IkReal x803=(x495*x589);
IkReal x804=(gclwh1_3*r20*x495);
IkReal x805=(gclwh12_9*npy*x496);
IkReal x806=(x549*x565);
IkReal x807=(x508*x549);
IkReal x808=((0.117)*gclwh14_9*x532);
IkReal x809=(gclwh14_2*x725);
IkReal x810=(x537*x573);
IkReal x811=(x513*x538);
IkReal x812=(x504*x626);
IkReal x813=(gclwh8_2*rxp0_2*x496);
IkReal x814=(x549*x644);
IkReal x815=(gclwh14_9*npx*x496);
IkReal x816=(gclwh4_9*npz*x496);
IkReal x817=((0.117)*gclwh12_9*x507);
IkReal x818=(gclwh15_0*x723);
IkReal x819=(x495*x551);
IkReal x820=((0.117)*gclwh13_11*x507);
IkReal x821=(x548*x549);
IkReal x822=(x537*x605);
IkReal x823=(gclwh2_0*pz*x507);
IkReal x824=(x496*x535);
IkReal x825=(gclwh0_0*x723);
IkReal x826=(x513*x563);
IkReal x827=(x496*x556);
IkReal x828=(gclwh15_0*x725);
IkReal x829=(gclwh15_11*npx*x496);
IkReal x830=(gclwh5_11*npz*x496);
IkReal x831=(x512*x593);
IkReal x832=(gclwh0_0*x725);
IkReal x833=(x496*x524);
IkReal x834=((2.0)*gclwh13_8*x504);
IkReal x835=((0.117)*gclwh5_11*x537);
IkReal x836=(gclwh13_11*npy*x496);
IkReal x837=((0.117)*pp*x522);
IkReal x838=(x549*x575);
IkReal x839=(x520*x549);
IkReal x840=(x513*x578);
IkReal x841=((0.139)*gclwh13_15*x507);
IkReal x842=(x512*x612);
IkReal x843=((0.139)*gclwh5_15*x537);
IkReal x844=(x504*x586);
IkReal x845=((0.139)*gclwh15_15*x532);
IkReal x846=(r20*x728);
IkReal x847=(gclwh8_2*npx*x726);
IkReal x848=(gclwh6_2*npy*x726);
IkReal x849=((1.0)*gclwh8_2*x723);
IkReal x850=(gclwh10_2*npz*x726);
IkReal x851=(gclwh9_0*npx*x726);
IkReal x852=((1.0)*gclwh9_0*x723);
IkReal x853=(gclwh11_0*npz*x726);
IkReal x854=(gclwh7_0*npy*x726);
IkReal x855=(gclwh12_2*npy*x726);
IkReal x856=(gclwh3_2*npy*x726);
IkReal x857=(gclwh4_3*x513*x570);
IkReal x858=(gclwh1_2*npx*x726);
IkReal x859=((2.0)*x512*x519);
IkReal x860=((1.0)*x507*x600);
IkReal x861=(x508*x727);
IkReal x862=(gclwh3_3*x504*x570);
IkReal x863=(gclwh1_3*x512*x570);
IkReal x864=(gclwh4_2*npz*x726);
IkReal x865=(x500*x727);
IkReal x866=(x609*x728);
IkReal x867=(gclwh12_3*x504*x570);
IkReal x868=(gclwh14_2*npx*x726);
IkReal x869=(gclwh14_3*x846);
IkReal x870=(gclwh2_1*x504*x570);
IkReal x871=(gclwh0_1*x512*x570);
IkReal x872=(gclwh13_0*npy*x726);
IkReal x873=((2.0)*x513*x526);
IkReal x874=(gclwh15_1*x512*x570);
IkReal x875=(gclwh5_0*npz*x726);
IkReal x876=(gclwh0_0*npx*x726);
IkReal x877=(gclwh2_0*npy*x726);
IkReal x878=(gclwh0_1*x846);
IkReal x879=(gclwh13_1*x504*x570);
IkReal x880=(x598*x728);
IkReal x881=(gclwh15_1*x846);
IkReal x882=(gclwh15_0*npx*x726);
IkReal x883=(x631*x728);
IkReal x884=((1.0)*x507*x629);
IkReal x885=(x658+x659);
IkReal x886=(x695+x697);
IkReal x887=(x719+x718);
IkReal x888=(x681+x680);
IkReal x889=(x676+x677+x675+x774);
IkReal x890=(x669+x667+x666+x757);
IkReal x891=(x708+x709+x826+x831);
IkReal x892=(x698+x701+x811+x800);
IkReal x893=(x655+x742+x743+x741);
IkReal x894=(x679+x777+x776+x775);
IkReal x895=(x648+x734+x733+x732);
IkReal x896=(x696+x793+x795+x794);
IkReal x897=(x691+x787+x788+x789);
IkReal x898=(x717+x841+x840+x842);
IkReal x899=(x711+x713+x712+x715+x834);
IkReal x900=(x702+x703+x706+x705+x812);
IkReal x901=(x661+x662+x664+x752+x749);
IkReal x902=(x673+x670+x671+x761+x762);
IkReal x903=((((0.468)*x590))+(((4.0)*gclwh14_10*x512))+((x507*x626))+(((4.0)*gclwh4_10*x513))+(((0.027378)*x530)));
IkReal x904=(x649+x650+x737+x736+x735);
IkReal x905=(x694+x693+x791+x790+x792);
IkReal x906=(x720+x721+x843+x845+x844);
IkReal x907=(x657+x660+x746+x744+x745);
IkReal x908=(x647+x646+x731+x730+x729);
IkReal x909=(x682+x684+x779+x778+x780);
IkReal x910=(x689+x690+x786+x784+x785);
IkReal x911=(x651+x652+x653+x654+x739+x738+x740);
IkReal x912=(x688+x687+x686+x685+x782+x783+x781);
IkReal x913=(x678+x773+x772+x771+x770+x852+x853+x854);
IkReal x914=(x663+x755+x754+x751+x750+x753+x747+x748+x847);
IkReal x915=(x668+x665+x756+x759+x758+x760+x850+x849+x848);
IkReal x916=(x672+x674+x768+x769+x764+x765+x766+x767+x763+x851);
IkReal x917=(x496+x704+x869+x868+x867+x866+x865+x864+x863+x862+x861+x860+x816+x817+x814+x815+x813);
IkReal x918=(x496+x707+x870+x871+x872+x873+x874+x818+x819+x829+x828+x823+x822+x821+x820+x827+x825+x824+x830);
IkReal x919=(x710+x714+x878+x879+x875+x876+x877+x884+x881+x880+x883+x882+x835+x836+x837+x832+x833+x838+x839);
IkReal x920=(x699+x700+x797+x796+x799+x798+x856+x857+x855+x858+x859+x810+x809+x808+x805+x804+x807+x806+x801+x803+x802);
op[38]=((((0.007611084)*x597))+(((1.112)*gclwh14_14*x512))+(((1.112)*gclwh4_14*x513))+(((-1.0)*x532*x636))+(((0.330408)*x606))+(((-1.0)*gclwh14_14*x633))+((gclwh10_12*x638))+(((-1.0)*gclwh4_14*x622))+((x507*x558))+(((-1.112)*gclwh12_14*x504))+(((-1.0)*x537*x637))+(((-1.0)*gclwh8_12*x610)));
op[39]=((0.16388)+(((8.0)*gclwh12_10*x504))+((gclwh10_10*x625))+((x510*x582))+(((-8.0)*gclwh4_10*x513))+((x510*x624))+(((-8.0)*gclwh14_10*x512))+(((-1.0)*x507*x599))+(((0.936)*gclwh6_10*rxp1_2))+(((0.054756)*x582))+(((-0.936)*x590))+(((-0.054756)*x530))+(((0.054756)*x624)));
op[40]=((-0.026784)+(((-1.0)*x903))+x912);
op[41]=((((0.036036)*gclwh6_2*rxp1_2))+(((0.036036)*x604))+(((0.154)*gclwh14_2*x532))+(((0.002108106)*x500))+(((0.002108106)*x508))+(((0.308)*gclwh3_2*x504))+(((-1.0)*x500*x552))+(((-0.154)*gclwh12_2*x507))+(((-0.308)*gclwh14_2*x512))+(((-1.0)*x897))+(((-0.308)*gclwh4_2*x513))+(((0.002108106)*x565))+(((0.308)*gclwh12_2*x504))+(((-1.0)*x508*x552))+(((-0.036036)*gclwh8_2*rxp0_2))+(((0.308)*gclwh1_2*x512))+((gclwh14_2*x555))+(((0.154)*gclwh4_2*x537))+(((-1.0)*gclwh12_2*x511))+x910);
op[42]=((((-3.132)*gclwh5_0*x513))+(((-1.566)*gclwh13_0*x507))+(((1.566)*gclwh0_0*x532))+(((1.566)*gclwh15_0*x532))+(((-0.366444)*x524))+(((-3.132)*gclwh2_0*x504))+(((0.021436974)*x548))+(((-1.0)*x908))+(((-0.021436974)*x520))+((gclwh15_0*x560))+(((1.566)*gclwh5_0*x537))+(((-3.132)*gclwh0_0*x512))+(((-0.021436974)*x575))+(((3.132)*gclwh13_0*x504))+(((-3.132)*gclwh15_0*x512))+(((0.366444)*x535))+x895+(((-1.0)*gclwh0_0*x560))+(((0.366444)*x556))+(((1.566)*gclwh2_0*x507)));
op[43]=((1.187536)+(((-1.0)*x904))+x911);
op[44]=((0.16388)+(((-8.0)*gclwh5_8*x513))+(((-0.936)*x540))+(((-0.054756)*x497))+((x510*x569))+(((-8.0)*gclwh15_8*x512))+(((0.054756)*x569))+(((0.936)*x574))+(((0.054756)*x618))+(((8.0)*gclwh13_8*x504))+((x510*x618))+((gclwh11_8*x625))+(((-1.0)*x497*x510)));
op[45]=(((gclwh5_15*x622))+(((-1.0)*x507*x579))+(((1.112)*gclwh13_15*x504))+((x532*x613))+((gclwh15_15*x633))+((gclwh11_13*x638))+(((-1.112)*gclwh15_15*x512))+(((-1.112)*gclwh5_15*x513))+((x514*x537))+(((0.330408)*x620))+(((-0.007611084)*x559))+(((-1.0)*gclwh9_13*x610)));
op[46]=((((0.154)*gclwh15_0*x532))+(((0.154)*gclwh2_0*x507))+(((-0.308)*gclwh0_0*x512))+(((-0.154)*gclwh13_0*x507))+(((-0.308)*gclwh15_0*x512))+(((-1.0)*x895))+(((-1.0)*gclwh2_0*x511))+(((-0.308)*gclwh5_0*x513))+(((-1.0)*gclwh0_0*x555))+(((-0.308)*gclwh2_0*x504))+(((0.154)*gclwh0_0*x532))+(((0.308)*gclwh13_0*x504))+(((-1.0)*gclwh13_0*x511))+(((0.002108106)*x548))+(((0.036036)*x535))+(((-0.036036)*x524))+(((0.154)*gclwh5_0*x537))+x908+((gclwh15_0*x555))+(((0.036036)*x556)));
op[47]=((0.026784)+(((-1.0)*x911))+x904);
op[48]=((((-1.566)*gclwh10_12*x513))+(((0.783)*gclwh6_12*x507))+(((-1.0)*x523*x547))+(((-1.0)*x907))+((gclwh4_9*x518))+(((1.566)*gclwh8_12*x512))+(((-1.566)*gclwh6_12*x504))+(((-1.0)*x656))+((gclwh6_12*x617))+((x523*x607))+((gclwh10_12*x595))+(((-0.010718487)*x547))+(((-0.183222)*x639))+x885+x893+((gclwh14_9*x557)));
op[49]=((((-1.0)*x901))+((gclwh10_10*x537))+(((-1.0)*x915))+(((0.144780714)*x585))+(((-1.0)*gclwh14_3*x588))+((gclwh6_10*x507))+(((-0.144780714)*x529))+x890+(((-1.0)*gclwh8_10*x532))+x914);
op[50]=((0.196268)+(((-1.0)*x532*x533))+(((-1.0)*gclwh4_10*x516))+(((-4.0)*gclwh6_10*x504))+((x537*x627))+((x505*x507))+(((4.0)*gclwh8_10*x512))+(((0.027378)*x641))+((gclwh12_10*x596))+(((-4.0)*gclwh10_10*x513))+(((0.027378)*x601))+(((-1.0)*gclwh8_10*x566))+(((-1.0)*gclwh14_10*x623)));
op[51]=((((-1.0)*x499*x501))+(((1.412)*gclwh6_2*x504))+(((-0.009664434)*x501))+((gclwh8_2*r20*x499))+(((-1.0)*gclwh4_14*x572))+((gclwh14_2*x498))+(((1.412)*gclwh10_2*x513))+((gclwh12_14*x571))+(((-0.20124)*x616))+(((-0.20124)*x619))+(((-1.0)*x499*x534))+(((-0.009664434)*x534))+((gclwh8_2*x584))+(((0.20124)*x639))+(((-1.412)*gclwh8_2*x512))+((gclwh4_2*x632))+(((-1.0)*gclwh14_14*x608))+(((-1.0)*gclwh12_2*x536)));
op[52]=((((-0.077)*gclwh8_12*x532))+(((-1.0)*gclwh14_9*x515))+(((-1.0)*x907))+(((-1.0)*x885))+(((-1.0)*gclwh8_12*x546))+(((0.154)*gclwh8_12*x512))+x656+(((-0.154)*gclwh6_12*x504))+(((0.077)*gclwh10_12*x537))+x893+(((-0.154)*gclwh10_12*x513))+(((-0.018018)*x616))+((gclwh6_12*x521))+((gclwh12_9*x576))+(((0.001054053)*x607))+(((0.077)*gclwh6_12*x507)));
op[53]=((((0.002705274)*x585))+(((-1.0)*gclwh6_10*x507))+(((-1.0)*x890))+(((-1.0)*x915))+(((-0.002705274)*x529))+((gclwh8_10*x532))+(((-1.0)*gclwh14_3*x640))+(((-1.0)*gclwh10_10*x537))+x914+x901);
op[54]=((((-1.0)*x902))+(((-1.0)*x913))+(((-0.144780714)*x630))+((gclwh7_8*x507))+(((-1.0)*gclwh9_8*x532))+(((0.144780714)*x543))+(((-1.0)*gclwh15_1*x588))+((pp*x517))+x889+x916);
op[55]=((((-0.010718487)*x581))+(((-1.0)*gclwh5_11*x518))+(((-1.566)*gclwh11_13*x513))+(((0.183222)*x509))+(((-1.566)*gclwh7_13*x504))+((gclwh7_13*x617))+(((-1.0)*x909))+(((-1.0)*x523*x581))+(((-1.0)*x888))+x683+(((0.783)*gclwh7_13*x507))+x894+(((-1.0)*gclwh15_11*x557))+((gclwh11_13*x595))+(((1.566)*gclwh9_13*x512))+((x523*x621)));
op[56]=((((-1.0)*gclwh5_15*x572))+(((-1.0)*x499*x506))+(((0.20124)*x509))+((x499*x561))+(((-0.009664434)*x506))+(((-1.412)*gclwh9_0*x512))+(((-0.20124)*x628))+(((0.009664434)*x561))+(((-0.20124)*x634))+(((-1.0)*x499*x541))+(((1.412)*gclwh11_0*x513))+(((-1.0)*gclwh15_15*x608))+(((1.412)*gclwh7_0*x504))+((gclwh13_15*x571))+(((-0.009664434)*x541))+((gclwh5_0*x632))+(((-1.0)*gclwh13_0*x536))+((gclwh15_0*x498)));
op[57]=((0.196268)+(((-1.0)*x517*x570))+((gclwh15_8*x623))+(((-1.0)*gclwh13_8*x596))+(((4.0)*gclwh11_8*x513))+(((-0.027378)*x517))+(((-0.027378)*x642))+(((-1.0)*x507*x562))+(((4.0)*gclwh7_8*x504))+((gclwh9_8*x566))+((gclwh5_8*x516))+(((-4.0)*gclwh9_8*x512))+((x532*x577)));
op[58]=((((0.002705274)*x543))+(((-1.0)*gclwh15_1*x640))+((gclwh9_8*x532))+(((-1.0)*x913))+(((-1.0)*gclwh7_8*x507))+(((-1.0)*x889))+(((-0.002705274)*x630))+x916+x902+(((-1.0)*x517*x602)));
op[59]=((((-0.154)*gclwh11_13*x513))+(((-0.154)*gclwh7_13*x504))+(((-1.0)*x683))+(((0.077)*gclwh11_13*x537))+(((-1.0)*x909))+(((0.001054053)*x621))+(((-0.077)*gclwh9_13*x532))+((gclwh15_11*x515))+(((-0.018018)*x509))+(((0.077)*gclwh7_13*x507))+x888+x894+(((0.018018)*x628))+((gclwh7_13*x521))+(((-1.0)*gclwh9_13*x546))+(((0.154)*gclwh9_13*x512)));
op[60]=(((gclwh12_9*x617))+(((-0.010718487)*x611))+(((-1.566)*gclwh12_9*x504))+(((-1.0)*x523*x611))+(((0.183222)*x606))+(((0.783)*gclwh12_9*x507))+(((-1.0)*x905))+(((1.566)*gclwh14_9*x512))+(((-1.0)*x886))+(((-1.0)*gclwh8_12*x557))+(((-1.0)*x523*x594))+(((-0.010718487)*x594))+x692+(((1.566)*gclwh4_9*x513))+x896+((gclwh10_12*x518)));
op[61]=((-0.63241)+(((-1.0)*gclwh12_10*x507))+((gclwh14_10*x532))+(((1.237442)*gclwh1_3*x512))+(((-1.237442)*gclwh14_3*x512))+(((-1.0)*x892))+(((-1.0)*x917))+(((0.605032)*gclwh4_3*x537))+(((0.008469671769)*x589))+((gclwh14_3*x545))+(((1.237442)*gclwh3_3*x504))+((gclwh4_3*x503))+(((-0.605032)*gclwh12_3*x507))+(((-0.008469671769)*x635))+(((-0.63241)*gclwh1_3*x532))+((gclwh4_10*x537))+(((-0.63241)*gclwh3_3*x507))+x920+x900+(((0.605032)*r20*x519))+(((1.237442)*gclwh12_3*x504))+((gclwh1_3*x545))+(((-1.237442)*gclwh4_3*x513)));
op[62]=((-0.159224)+(((-1.0)*x903))+x912);
op[63]=((((-1.0)*gclwh6_2*x536))+(((0.01177254)*x611))+(((-0.009664434)*x500))+(((-0.009664434)*x508))+(((0.01177254)*x594))+(((0.86)*gclwh14_9*x532))+(((1.72)*gclwh12_9*x504))+(((-0.165204)*x604))+(((-1.0)*x897))+(((1.412)*gclwh4_2*x513))+(((-1.0)*x499*x565))+(((-0.009664434)*x565))+(((-1.72)*gclwh14_9*x512))+(((-1.0)*gclwh12_9*x539))+(((0.86)*x724))+(((-1.0)*gclwh14_2*x584))+(((-1.412)*gclwh12_2*x504))+((gclwh12_2*x553))+((gclwh8_2*x498))+(((-1.72)*gclwh4_9*x513))+((x499*x644))+(((-0.86)*gclwh12_9*x507))+(((-1.412)*gclwh1_2*x512))+(((1.412)*gclwh14_2*x512))+((x499*x500))+((x499*x508))+(((-1.0)*gclwh14_2*r20*x499))+x910+(((-1.412)*gclwh3_2*x504)));
op[64]=((((0.077)*x724))+((gclwh6_12*x576))+(((-1.0)*gclwh8_12*x515))+(((-1.0)*x896))+(((0.001054053)*x594))+((gclwh10_12*x645))+(((-0.077)*gclwh12_9*x507))+(((-1.0)*gclwh12_9*x521))+(((-1.0)*x886))+(((-0.154)*gclwh4_9*x513))+(((-0.154)*gclwh14_9*x512))+x692+((gclwh14_9*x546))+x905+(((0.154)*gclwh12_9*x504))+(((0.077)*gclwh14_9*x532)));
op[65]=((0.02525)+(((0.000158258529)*x609))+((gclwh1_3*x525))+(((0.023122)*gclwh3_3*x504))+(((-0.02525)*gclwh3_3*x507))+(((0.023122)*gclwh12_3*x504))+(((-0.002128)*r20*x519))+(((-1.0)*gclwh4_3*x722))+(((-1.0)*x900))+((gclwh12_10*x507))+(((-0.023122)*gclwh14_3*x512))+(((-1.0)*x917))+(((0.000158258529)*x589))+((gclwh14_3*x525))+(((-1.0)*gclwh14_10*x532))+(((-1.0)*gclwh4_10*x537))+(((-0.02525)*gclwh1_3*x532))+x892+(((0.023122)*gclwh1_3*x512))+x920+(((-0.000158258529)*x635))+(((-0.002128)*gclwh4_3*x537))+(((0.002128)*gclwh12_3*x507)));
op[66]=((-0.63241)+((gclwh15_1*x545))+(((-1.237442)*gclwh2_1*x504))+((gclwh5_1*x503))+(((-1.0)*x497*x602))+(((-0.605032)*gclwh13_1*x507))+((gclwh15_8*x532))+(((0.605032)*gclwh15_1*x532))+(((-1.237442)*gclwh5_1*x513))+(((1.237442)*gclwh13_1*x504))+(((-0.008469671769)*x551))+(((-1.0)*x891))+(((-1.0)*x919))+(((-1.0)*gclwh0_1*x545))+(((0.63241)*gclwh0_1*x532))+(((-1.237442)*gclwh15_1*x512))+(((-1.237442)*gclwh0_1*x512))+(((-0.008469671769)*x598))+((gclwh5_8*x537))+(((0.63241)*gclwh2_1*x507))+x899+x918+(((0.605032)*r22*x526)));
op[67]=(((x522*x523))+(((0.010718487)*x592))+(((-0.783)*gclwh13_11*x507))+(((0.010718487)*x522))+(((-1.566)*gclwh5_11*x513))+(((-1.566)*gclwh15_11*x512))+(((-1.0)*x898))+((gclwh11_13*x518))+(((-1.0)*x887))+(((0.183222)*x620))+x716+(((1.566)*gclwh13_11*x504))+(((-1.0)*gclwh13_11*x617))+x906+((x523*x592))+(((-1.0)*gclwh9_13*x557)));
op[68]=((((0.01177254)*x522))+(((1.412)*gclwh5_0*x513))+(((-1.0)*gclwh0_0*r20*x499))+((gclwh2_0*x553))+(((1.72)*gclwh13_11*x504))+(((1.412)*gclwh2_0*x504))+(((0.01177254)*x592))+(((0.86)*gclwh5_11*x537))+((gclwh0_0*x584))+(((-0.86)*gclwh13_11*x507))+(((1.412)*gclwh15_0*x512))+(((-1.72)*gclwh5_11*x513))+(((-1.0)*x895))+(((-1.412)*gclwh13_0*x504))+(((-1.0)*x499*x575))+(((-1.0)*x499*x548))+(((1.412)*gclwh0_0*x512))+(((-1.0)*gclwh15_0*r20*x499))+(((-1.0)*gclwh13_11*x539))+(((0.009664434)*x520))+((gclwh9_0*x498))+(((-1.0)*gclwh15_0*x584))+((x499*x520))+(((-0.165204)*x556))+(((-0.009664434)*x548))+x908+(((0.86)*pp*x522))+(((-1.72)*gclwh15_11*x512))+(((-0.165204)*x535)));
op[69]=((0.159224)+(((-1.0)*x911))+x904);
op[70]=((0.02525)+((gclwh15_1*x525))+(((0.02525)*gclwh0_1*x532))+(((0.02525)*gclwh2_1*x507))+(((-0.023122)*gclwh2_1*x504))+(((-0.000158258529)*x551))+(((-1.0)*gclwh0_1*x525))+(((-1.0)*x899))+(((-1.0)*x919))+(((-0.000158258529)*x598))+((pp*x497))+(((-0.023122)*gclwh0_1*x512))+(((0.002128)*gclwh13_1*x507))+(((0.000158258529)*x631))+(((-0.023122)*gclwh15_1*x512))+(((-1.0)*gclwh5_1*x722))+(((-0.002128)*r22*x526))+x891+(((-0.002128)*gclwh15_1*x532))+(((0.023122)*gclwh13_1*x504))+x918+(((-1.0)*gclwh15_8*x532))+(((-1.0)*gclwh5_8*x537)));
op[71]=((((-1.0)*gclwh9_13*x515))+((gclwh11_13*x645))+(((-0.154)*gclwh13_11*x504))+(((0.077)*gclwh13_11*x507))+(((-1.0)*x906))+(((-1.0)*x887))+(((-0.001054053)*x592))+((gclwh7_13*x576))+(((-0.001054053)*x522))+(((-0.077)*gclwh5_11*x537))+(((0.154)*gclwh15_11*x512))+(((0.154)*gclwh5_11*x513))+(((-0.077)*pp*x522))+x716+x898+((gclwh13_11*x521)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x921=htj1*htj1;
CheckValue<IkReal> x922=IKPowWithIntegerCheck(((1.0)+x921),-1);
if(!x922.valid){
continue;
}
cj1array[numsolutions]=((x922.value)*(((1.0)+(((-1.0)*x921)))));
CheckValue<IkReal> x923=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x923.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x923.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x924=htj2*htj2;
CheckValue<IkReal> x925=IKPowWithIntegerCheck(((1.0)+x924),-1);
if(!x925.valid){
continue;
}
cj2array[numsolutions]=((x925.value)*(((1.0)+(((-1.0)*x924)))));
CheckValue<IkReal> x926=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x926.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x926.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x927=htj3*htj3;
CheckValue<IkReal> x928=IKPowWithIntegerCheck(((1.0)+x927),-1);
if(!x928.valid){
continue;
}
cj3array[numsolutions]=((x928.value)*(((1.0)+(((-1.0)*x927)))));
CheckValue<IkReal> x929=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x929.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x929.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x930=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x930);
rxp1_0=(pz*r11);
rxp1_1=(r01*x930);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x931=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x931);
rxp1_0=(pz*r11);
rxp1_1=(r01*x931);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x932=IKPowWithIntegerCheck(cj3,-1);
if(!x932.valid){
continue;
}
CheckValue<IkReal> x933=IKPowWithIntegerCheck(r22,-1);
if(!x933.valid){
continue;
}
sj4array[0]=((x932.value)*(x933.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x934=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x934);
rxp1_0=(pz*r11);
rxp1_1=(r01*x934);
IkReal x935=(r10*sj3);
IkReal x936=((4.0)*cj4);
IkReal x937=(r11*sj3);
IkReal x938=((16.0)*cj4);
IkReal x939=(sj1*sj2);
IkReal x940=(r01*sj4);
IkReal x941=(cj3*r11);
IkReal x942=(cj1*sj2);
IkReal x943=((8.0)*cj2);
IkReal x944=((8.0)*cj4);
IkReal x945=((4.0)*sj4);
IkReal x946=(r12*sj3);
IkReal x947=(cj2*sj1);
IkReal x948=(cj1*cj2);
IkReal x949=(cj3*r12);
IkReal x950=((12.0)*sj4);
IkReal x951=(cj3*r10);
IkReal x952=((4.0)*x937);
IkReal x953=((4.0)*x941);
IkReal x954=((12.0)*cj4*r02);
IkReal x955=(x936*x951);
IkReal x956=(x949*x950);
IkReal x957=(x935*x936);
IkReal x958=(x946*x950);
IkReal x959=(r00*x939*x945);
IkReal x960=(x948*x954);
IkReal x961=(r00*x945*x948);
IkReal x962=(x939*x954);
IkReal x963=(r00*x942*x945);
IkReal x964=(r00*x945*x947);
IkReal x965=(x947*x954);
IkReal x966=(x942*x954);
IkReal x967=(x961+x952);
IkReal x968=(x960+x956);
IkReal x969=(x959+x955);
IkReal x970=(x966+x965);
IkReal x971=(x963+x964+x957+x953);
j5eval[0]=((((0.5)*(IKabs((((x945*x949))+((r02*x936*x948))+(((-1.0)*r02*x936*x939))+x967+(((-1.0)*x969)))))))+(IKabs(((((8.0)*x951))+(((-1.0)*sj1*x940*x943))+(((-1.0)*x937*x944))+(((-8.0)*x940*x942)))))+(IKabs(((((-8.0)*x939*x940))+(((-8.0)*x935))+(((-1.0)*x941*x944))+((cj1*x940*x943)))))+(((0.5)*(IKabs((x958+(((-1.0)*x970))+(((-1.0)*x971)))))))+(((0.5)*(IKabs((x967+x968+(((-1.0)*x962))+(((-1.0)*x969)))))))+(((0.5)*(IKabs(((((-16.0)*x940*x947))+(((-16.0)*x940*x942))+(((16.0)*x951))+(((-1.0)*x937*x938)))))))+(((0.5)*(IKabs((x971+x958+(((-1.0)*x970)))))))+(((0.5)*(IKabs(((((-1.0)*x938*x941))+(((16.0)*x940*x948))+(((-16.0)*x939*x940))+(((-16.0)*x935)))))))+(((0.5)*(IKabs((x968+x969+(((-1.0)*x962))+(((-1.0)*x967)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x936*x947))+(((-1.0)*r02*x936*x942))+((x945*x946))+(((-1.0)*x971))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x972=(r10*sj3);
IkReal x973=(r01*sj4);
IkReal x974=(cj1*cj2);
IkReal x975=(cj3*cj4);
IkReal x976=(sj1*sj2);
IkReal x977=(cj4*r02);
IkReal x978=((4.0)*r11*sj3);
IkReal x979=(cj3*r12*sj4);
IkReal x980=((4.0)*r00*sj4);
IkReal x981=((4.0)*r10*x975);
IkReal x982=((12.0)*x979);
IkReal x983=((4.0)*x979);
IkReal x984=(x974*x980);
IkReal x985=(x976*x980);
IkReal x986=((12.0)*x974*x977);
IkReal x987=((12.0)*x976*x977);
IkReal x988=((4.0)*x974*x977);
IkReal x989=((4.0)*x976*x977);
IkReal x990=(x984+x978);
IkReal x991=(x988+x983);
IkReal x992=(x985+x981);
IkReal x993=(x986+x982);
IkReal x994=((((8.0)*x973*x974))+(((-8.0)*x972))+(((-8.0)*r11*x975))+(((-8.0)*x973*x976)));
op[0]=((((-1.0)*x989))+(((-1.0)*x992))+x991+x990);
op[1]=x994;
op[2]=((((-1.0)*x987))+(((-1.0)*x992))+x993+x990);
op[3]=((((-16.0)*r11*x975))+(((16.0)*x973*x974))+(((-16.0)*x972))+(((-16.0)*x973*x976)));
op[4]=((((-1.0)*x987))+(((-1.0)*x990))+x993+x992);
op[5]=x994;
op[6]=((((-1.0)*x989))+(((-1.0)*x990))+x992+x991);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x995=(cj4*sj3);
IkReal x996=(cj1*sj2);
IkReal x997=(r01*sj4);
IkReal x998=((4.0)*sj4);
IkReal x999=(r12*sj3);
IkReal x1000=(cj4*r02);
IkReal x1001=(cj2*sj1);
IkReal x1002=(cj3*r10);
IkReal x1003=((4.0)*cj3*r11);
IkReal x1004=((4.0)*r10*x995);
IkReal x1005=(x998*x999);
IkReal x1006=((12.0)*sj4*x999);
IkReal x1007=(r00*x996*x998);
IkReal x1008=(r00*x1001*x998);
IkReal x1009=((12.0)*x1000*x1001);
IkReal x1010=((12.0)*x1000*x996);
IkReal x1011=((4.0)*x1000*x1001);
IkReal x1012=((4.0)*x1000*x996);
IkReal x1013=(x1011+x1012);
IkReal x1014=(x1010+x1009);
IkReal x1015=((((8.0)*x1002))+(((-8.0)*r11*x995))+(((-8.0)*x1001*x997))+(((-8.0)*x996*x997)));
IkReal x1016=(x1008+x1007+x1004+x1003);
j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*((x1006+(((-1.0)*x1016))+(((-1.0)*x1014))))))+x1016+x1005+((x1015*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1013))+(((htj5*htj5)*((x1016+x1006+(((-1.0)*x1014))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1005+(((-1.0)*x1016))+(((-1.0)*x1013))))))+(((htj5*htj5*htj5)*(((((-16.0)*x1001*x997))+(((-16.0)*r11*x995))+(((16.0)*x1002))+(((-16.0)*x996*x997))))))+((htj5*x1015)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1017=(cj5*sj4);
IkReal x1018=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1017))+((r01*x1018))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1017))+(((-1.0)*r11*x1018))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1017))+((r01*x1018))+((cj4*r02))))+IKsqr((((r10*x1017))+(((-1.0)*r11*x1018))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1017))+((r01*x1018))+((cj4*r02))), (((r10*x1017))+(((-1.0)*r11*x1018))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1019=IKsin(j0);
IkReal x1020=IKcos(j0);
IkReal x1021=((1.0)*cj3);
IkReal x1022=(r02*sj4);
IkReal x1023=(cj5*r11);
IkReal x1024=((0.353)*cj2);
IkReal x1025=(cj5*r00);
IkReal x1026=(r12*sj4);
IkReal x1027=(r01*sj5);
IkReal x1028=((1.0)*sj4);
IkReal x1029=(cj5*r10);
IkReal x1030=(cj5*r01);
IkReal x1031=((1.0)*sj3);
IkReal x1032=(r10*sj5);
IkReal x1033=(cj4*sj3);
IkReal x1034=(cj3*cj4);
IkReal x1035=(r00*sj5);
IkReal x1036=(r11*sj5);
IkReal x1037=((1.0)*cj4);
IkReal x1038=((1.0)*cj2);
IkReal x1039=((0.353)*sj2);
IkReal x1040=(cj1*x1020);
IkReal x1041=(cj1*x1019);
IkReal x1042=(sj1*x1020);
IkReal x1043=(sj1*x1019);
evalcond[0]=(x1019+((sj4*x1025))+(((-1.0)*r02*x1037))+(((-1.0)*x1027*x1028)));
evalcond[1]=((((-1.0)*x1028*x1036))+(((-1.0)*x1020))+((sj4*x1029))+(((-1.0)*r12*x1037)));
evalcond[2]=((((-0.43)*x1040))+(((0.117)*x1035))+(((0.117)*x1030))+((x1039*x1042))+(((-1.0)*x1024*x1040))+(((-1.0)*px))+(((0.139)*x1019)));
evalcond[3]=((((-0.43)*x1041))+(((0.117)*x1032))+(((0.117)*x1023))+((x1039*x1043))+(((-1.0)*x1024*x1041))+(((-1.0)*py))+(((-0.139)*x1020)));
evalcond[4]=((((-1.0)*x1038*x1040))+((sj2*x1042))+(((-1.0)*x1021*x1022))+(((-1.0)*cj4*x1021*x1025))+((sj3*x1030))+((sj3*x1035))+((x1027*x1034)));
evalcond[5]=((((-1.0)*x1038*x1041))+((sj2*x1043))+(((-1.0)*x1021*x1026))+(((-1.0)*cj4*x1021*x1029))+((sj3*x1032))+((x1034*x1036))+((sj3*x1023)));
evalcond[6]=((((-1.0)*x1021*x1035))+(((-1.0)*x1021*x1030))+(((-1.0)*x1022*x1031))+((sj2*x1040))+((cj2*x1042))+((x1027*x1033))+(((-1.0)*cj4*x1025*x1031)));
evalcond[7]=((((-1.0)*x1021*x1032))+(((-1.0)*x1026*x1031))+((sj2*x1041))+(((-1.0)*x1021*x1023))+((cj2*x1043))+((x1033*x1036))+(((-1.0)*cj4*x1029*x1031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1044=IKPowWithIntegerCheck(r22,-1);
if(!x1044.valid){
continue;
}
CheckValue<IkReal> x1045=IKPowWithIntegerCheck(sj3,-1);
if(!x1045.valid){
continue;
}
sj4array[0]=((x1044.value)*(x1045.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1046=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1046);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1046);
IkReal x1047=(r10*sj3);
IkReal x1048=((4.0)*cj4);
IkReal x1049=(r11*sj3);
IkReal x1050=((16.0)*cj4);
IkReal x1051=(sj1*sj2);
IkReal x1052=(r01*sj4);
IkReal x1053=(cj3*r11);
IkReal x1054=(cj1*sj2);
IkReal x1055=((8.0)*cj2);
IkReal x1056=((8.0)*cj4);
IkReal x1057=((4.0)*sj4);
IkReal x1058=(r12*sj3);
IkReal x1059=(cj2*sj1);
IkReal x1060=(cj1*cj2);
IkReal x1061=(cj3*r12);
IkReal x1062=((12.0)*sj4);
IkReal x1063=(cj3*r10);
IkReal x1064=((4.0)*x1049);
IkReal x1065=((4.0)*x1053);
IkReal x1066=((12.0)*cj4*r02);
IkReal x1067=(x1048*x1063);
IkReal x1068=(x1061*x1062);
IkReal x1069=(x1047*x1048);
IkReal x1070=(x1058*x1062);
IkReal x1071=(r00*x1051*x1057);
IkReal x1072=(x1060*x1066);
IkReal x1073=(r00*x1057*x1060);
IkReal x1074=(x1051*x1066);
IkReal x1075=(r00*x1054*x1057);
IkReal x1076=(r00*x1057*x1059);
IkReal x1077=(x1059*x1066);
IkReal x1078=(x1054*x1066);
IkReal x1079=(x1073+x1064);
IkReal x1080=(x1072+x1068);
IkReal x1081=(x1071+x1067);
IkReal x1082=(x1078+x1077);
IkReal x1083=(x1076+x1075+x1069+x1065);
j5eval[0]=((((0.5)*(IKabs(((((16.0)*x1063))+(((-16.0)*x1052*x1054))+(((-16.0)*x1052*x1059))+(((-1.0)*x1049*x1050)))))))+(IKabs(((((-1.0)*sj1*x1052*x1055))+(((8.0)*x1063))+(((-1.0)*x1049*x1056))+(((-8.0)*x1052*x1054)))))+(((0.5)*(IKabs((x1081+x1080+(((-1.0)*x1074))+(((-1.0)*x1079)))))))+(((0.5)*(IKabs(((((16.0)*x1052*x1060))+(((-16.0)*x1051*x1052))+(((-16.0)*x1047))+(((-1.0)*x1050*x1053)))))))+(((0.5)*(IKabs((x1070+x1083+(((-1.0)*x1082)))))))+(((0.5)*(IKabs((x1079+x1080+(((-1.0)*x1081))+(((-1.0)*x1074)))))))+(IKabs(((((-8.0)*x1047))+((cj1*x1052*x1055))+(((-1.0)*x1053*x1056))+(((-8.0)*x1051*x1052)))))+(((0.5)*(IKabs((x1070+(((-1.0)*x1083))+(((-1.0)*x1082)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x1048*x1051))+((r02*x1048*x1060))+x1079+((x1057*x1061))+(((-1.0)*x1081)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x1048*x1059))+(((-1.0)*r02*x1048*x1054))+((x1057*x1058))+(((-1.0)*x1083))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1084=(r10*sj3);
IkReal x1085=(r01*sj4);
IkReal x1086=(cj1*cj2);
IkReal x1087=(cj3*cj4);
IkReal x1088=(sj1*sj2);
IkReal x1089=(cj4*r02);
IkReal x1090=((4.0)*r11*sj3);
IkReal x1091=(cj3*r12*sj4);
IkReal x1092=((4.0)*r00*sj4);
IkReal x1093=((4.0)*r10*x1087);
IkReal x1094=((12.0)*x1091);
IkReal x1095=((4.0)*x1091);
IkReal x1096=(x1086*x1092);
IkReal x1097=(x1088*x1092);
IkReal x1098=((12.0)*x1086*x1089);
IkReal x1099=((12.0)*x1088*x1089);
IkReal x1100=((4.0)*x1086*x1089);
IkReal x1101=((4.0)*x1088*x1089);
IkReal x1102=(x1096+x1090);
IkReal x1103=(x1100+x1095);
IkReal x1104=(x1097+x1093);
IkReal x1105=(x1094+x1098);
IkReal x1106=((((-8.0)*x1085*x1088))+(((-8.0)*r11*x1087))+(((8.0)*x1085*x1086))+(((-8.0)*x1084)));
op[0]=(x1102+x1103+(((-1.0)*x1104))+(((-1.0)*x1101)));
op[1]=x1106;
op[2]=(x1105+x1102+(((-1.0)*x1099))+(((-1.0)*x1104)));
op[3]=((((-16.0)*x1084))+(((16.0)*x1085*x1086))+(((-16.0)*x1085*x1088))+(((-16.0)*r11*x1087)));
op[4]=(x1104+x1105+(((-1.0)*x1099))+(((-1.0)*x1102)));
op[5]=x1106;
op[6]=(x1104+x1103+(((-1.0)*x1102))+(((-1.0)*x1101)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1107=(cj4*sj3);
IkReal x1108=(cj1*sj2);
IkReal x1109=(r01*sj4);
IkReal x1110=((4.0)*sj4);
IkReal x1111=(r12*sj3);
IkReal x1112=(cj4*r02);
IkReal x1113=(cj2*sj1);
IkReal x1114=(cj3*r10);
IkReal x1115=((4.0)*cj3*r11);
IkReal x1116=((4.0)*r10*x1107);
IkReal x1117=(x1110*x1111);
IkReal x1118=((12.0)*sj4*x1111);
IkReal x1119=(r00*x1108*x1110);
IkReal x1120=(r00*x1110*x1113);
IkReal x1121=((12.0)*x1112*x1113);
IkReal x1122=((12.0)*x1108*x1112);
IkReal x1123=((4.0)*x1112*x1113);
IkReal x1124=((4.0)*x1108*x1112);
IkReal x1125=(x1123+x1124);
IkReal x1126=(x1121+x1122);
IkReal x1127=((((-8.0)*x1109*x1113))+(((-8.0)*r11*x1107))+(((-8.0)*x1108*x1109))+(((8.0)*x1114)));
IkReal x1128=(x1115+x1116+x1119+x1120);
j5evalpoly[0]=(((htj5*x1127))+x1117+x1128+(((htj5*htj5*htj5*htj5)*((x1118+(((-1.0)*x1126))+(((-1.0)*x1128))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1117+(((-1.0)*x1125))+(((-1.0)*x1128))))))+(((-1.0)*x1125))+(((htj5*htj5)*((x1118+x1128+(((-1.0)*x1126))))))+((x1127*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((-16.0)*x1108*x1109))+(((-16.0)*x1109*x1113))+(((16.0)*x1114))+(((-16.0)*r11*x1107)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1129=(cj5*sj4);
IkReal x1130=(sj4*sj5);
if( IKabs((((r01*x1130))+(((-1.0)*r00*x1129))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1129))+(((-1.0)*r11*x1130))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1130))+(((-1.0)*r00*x1129))+((cj4*r02))))+IKsqr((((r10*x1129))+(((-1.0)*r11*x1130))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1130))+(((-1.0)*r00*x1129))+((cj4*r02))), (((r10*x1129))+(((-1.0)*r11*x1130))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1131=IKsin(j0);
IkReal x1132=IKcos(j0);
IkReal x1133=((1.0)*cj3);
IkReal x1134=(r02*sj4);
IkReal x1135=(cj5*r11);
IkReal x1136=((0.353)*cj2);
IkReal x1137=(cj5*r00);
IkReal x1138=(r12*sj4);
IkReal x1139=(r01*sj5);
IkReal x1140=((1.0)*sj4);
IkReal x1141=(cj5*r10);
IkReal x1142=(cj5*r01);
IkReal x1143=((1.0)*sj3);
IkReal x1144=(r10*sj5);
IkReal x1145=(cj4*sj3);
IkReal x1146=(cj3*cj4);
IkReal x1147=(r00*sj5);
IkReal x1148=(r11*sj5);
IkReal x1149=((1.0)*cj4);
IkReal x1150=((1.0)*cj2);
IkReal x1151=((0.353)*sj2);
IkReal x1152=(cj1*x1132);
IkReal x1153=(cj1*x1131);
IkReal x1154=(sj1*x1132);
IkReal x1155=(sj1*x1131);
evalcond[0]=(x1131+((sj4*x1137))+(((-1.0)*r02*x1149))+(((-1.0)*x1139*x1140)));
evalcond[1]=(((sj4*x1141))+(((-1.0)*x1140*x1148))+(((-1.0)*x1132))+(((-1.0)*r12*x1149)));
evalcond[2]=((((0.117)*x1147))+(((0.117)*x1142))+(((-1.0)*px))+(((-0.43)*x1152))+((x1151*x1154))+(((-1.0)*x1136*x1152))+(((0.139)*x1131)));
evalcond[3]=((((-0.139)*x1132))+(((0.117)*x1144))+(((0.117)*x1135))+(((-1.0)*py))+(((-0.43)*x1153))+((x1151*x1155))+(((-1.0)*x1136*x1153)));
evalcond[4]=(((sj2*x1154))+((sj3*x1142))+((sj3*x1147))+((x1139*x1146))+(((-1.0)*cj4*x1133*x1137))+(((-1.0)*x1150*x1152))+(((-1.0)*x1133*x1134)));
evalcond[5]=(((x1146*x1148))+((sj2*x1155))+((sj3*x1144))+(((-1.0)*cj4*x1133*x1141))+((sj3*x1135))+(((-1.0)*x1150*x1153))+(((-1.0)*x1133*x1138)));
evalcond[6]=(((cj2*x1154))+(((-1.0)*x1134*x1143))+((sj2*x1152))+(((-1.0)*x1133*x1142))+(((-1.0)*x1133*x1147))+((x1139*x1145))+(((-1.0)*cj4*x1137*x1143)));
evalcond[7]=(((x1145*x1148))+((cj2*x1155))+((sj2*x1153))+(((-1.0)*cj4*x1141*x1143))+(((-1.0)*x1133*x1144))+(((-1.0)*x1133*x1135))+(((-1.0)*x1138*x1143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1156=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1156);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1156);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1157=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1157);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1157);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1158=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1158);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1158);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1159=IKPowWithIntegerCheck(r22,-1);
if(!x1159.valid){
continue;
}
sj4array[0]=((x1159.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1160=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1160);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1160);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1162 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1162.valid){
continue;
}
IkReal x1161=x1162.value;
j5array[0]=((-1.0)*x1161);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1161)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1163=(cj5*sj4);
IkReal x1164=(sj4*sj5);
if( IKabs((((r01*x1164))+(((-1.0)*r00*x1163)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1163))+(((-1.0)*r11*x1164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1164))+(((-1.0)*r00*x1163))))+IKsqr((((r10*x1163))+(((-1.0)*r11*x1164))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1164))+(((-1.0)*r00*x1163))), (((r10*x1163))+(((-1.0)*r11*x1164))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1165=IKcos(j0);
IkReal x1166=IKsin(j0);
IkReal x1167=((0.353)*cj2);
IkReal x1168=(cj5*sj4);
IkReal x1169=(cj5*r01);
IkReal x1170=((0.117)*sj5);
IkReal x1171=(cj5*r11);
IkReal x1172=(sj1*sj2);
IkReal x1173=((1.0)*cj2);
IkReal x1174=(cj1*x1165);
IkReal x1175=((1.0)*sj4*sj5);
IkReal x1176=(cj1*x1166);
evalcond[0]=(x1166+((r00*x1168))+(((-1.0)*r01*x1175)));
evalcond[1]=(((r10*x1168))+(((-1.0)*r11*x1175))+(((-1.0)*x1165)));
evalcond[2]=(((r00*sj5))+x1169+(((-1.0)*x1173*x1174))+((x1165*x1172)));
evalcond[3]=(x1171+(((-1.0)*x1173*x1176))+((x1166*x1172))+((r10*sj5)));
evalcond[4]=(((r00*x1170))+(((-1.0)*px))+(((0.353)*x1165*x1172))+(((-1.0)*x1167*x1174))+(((0.117)*x1169))+(((-0.43)*x1174))+(((0.139)*x1166)));
evalcond[5]=(((r10*x1170))+(((-1.0)*py))+(((-1.0)*x1167*x1176))+(((0.117)*x1171))+(((0.353)*x1166*x1172))+(((-0.43)*x1176))+(((-0.139)*x1165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1177=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1177);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1177);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1178=IKPowWithIntegerCheck(r22,-1);
if(!x1178.valid){
continue;
}
sj4array[0]=((-1.0)*(x1178.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1179=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1179);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1179);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1181 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1181.valid){
continue;
}
IkReal x1180=x1181.value;
j5array[0]=((-1.0)*x1180);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1180)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1182=(cj5*sj4);
IkReal x1183=(sj4*sj5);
if( IKabs((((r01*x1183))+(((-1.0)*r00*x1182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1182))+(((-1.0)*r11*x1183)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1183))+(((-1.0)*r00*x1182))))+IKsqr((((r10*x1182))+(((-1.0)*r11*x1183))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1183))+(((-1.0)*r00*x1182))), (((r10*x1182))+(((-1.0)*r11*x1183))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1184=IKcos(j0);
IkReal x1185=IKsin(j0);
IkReal x1186=((0.353)*cj2);
IkReal x1187=(cj5*sj4);
IkReal x1188=((1.0)*sj5);
IkReal x1189=((0.117)*sj5);
IkReal x1190=(cj5*r11);
IkReal x1191=(sj1*sj2);
IkReal x1192=(cj5*r01);
IkReal x1193=((1.0)*cj2);
IkReal x1194=(cj1*x1184);
IkReal x1195=(cj1*x1185);
evalcond[0]=(x1185+((r00*x1187))+(((-1.0)*r01*sj4*x1188)));
evalcond[1]=(((r10*x1187))+(((-1.0)*r11*sj4*x1188))+(((-1.0)*x1184)));
evalcond[2]=(((x1184*x1191))+(((-1.0)*x1193*x1194))+(((-1.0)*x1192))+(((-1.0)*r00*x1188)));
evalcond[3]=((((-1.0)*x1193*x1195))+((x1185*x1191))+(((-1.0)*r10*x1188))+(((-1.0)*x1190)));
evalcond[4]=((((0.353)*x1184*x1191))+((r00*x1189))+(((-0.43)*x1194))+(((-1.0)*x1186*x1194))+(((-1.0)*px))+(((0.117)*x1192))+(((0.139)*x1185)));
evalcond[5]=(((r10*x1189))+(((-0.43)*x1195))+(((-0.139)*x1184))+(((-1.0)*x1186*x1195))+(((-1.0)*py))+(((0.117)*x1190))+(((0.353)*x1185*x1191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1196=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1196);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1196);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1197=IKPowWithIntegerCheck(r22,-1);
if(!x1197.valid){
continue;
}
sj4array[0]=((x1197.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1198=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1198);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1198);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1200 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1200.valid){
continue;
}
IkReal x1199=x1200.value;
j5array[0]=((-1.0)*x1199);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1199)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1201=(cj5*sj4);
IkReal x1202=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1201))+((r01*x1202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1201))+(((-1.0)*r11*x1202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1201))+((r01*x1202))))+IKsqr((((r10*x1201))+(((-1.0)*r11*x1202))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1201))+((r01*x1202))), (((r10*x1201))+(((-1.0)*r11*x1202))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1203=IKcos(j0);
IkReal x1204=IKsin(j0);
IkReal x1205=(cj5*sj4);
IkReal x1206=((1.0)*sj5);
IkReal x1207=((0.117)*sj5);
IkReal x1208=(cj5*r11);
IkReal x1209=(cj5*r01);
IkReal x1210=(cj2*sj1);
IkReal x1211=(cj1*x1203);
IkReal x1212=(cj1*x1204);
evalcond[0]=((((-1.0)*r01*sj4*x1206))+x1204+((r00*x1205)));
evalcond[1]=(((r10*x1205))+(((-1.0)*r11*sj4*x1206))+(((-1.0)*x1203)));
evalcond[2]=((((-1.0)*r00*x1206))+(((-1.0)*x1209))+((sj2*x1211))+((x1203*x1210)));
evalcond[3]=((((-1.0)*r10*x1206))+((x1204*x1210))+(((-1.0)*x1208))+((sj2*x1212)));
evalcond[4]=((((0.139)*x1204))+(((0.117)*x1209))+(((-1.0)*px))+(((-0.43)*x1211))+((r00*x1207)));
evalcond[5]=(((r10*x1207))+(((0.117)*x1208))+(((-1.0)*py))+(((-0.43)*x1212))+(((-0.139)*x1203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1213=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1213);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1213);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1214=IKPowWithIntegerCheck(r22,-1);
if(!x1214.valid){
continue;
}
sj4array[0]=((-1.0)*(x1214.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1215=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1215);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1215);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1217 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1217.valid){
continue;
}
IkReal x1216=x1217.value;
j5array[0]=((-1.0)*x1216);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1216)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1218=(cj5*sj4);
IkReal x1219=(sj4*sj5);
if( IKabs((((r01*x1219))+(((-1.0)*r00*x1218)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1218))+(((-1.0)*r11*x1219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1219))+(((-1.0)*r00*x1218))))+IKsqr((((r10*x1218))+(((-1.0)*r11*x1219))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1219))+(((-1.0)*r00*x1218))), (((r10*x1218))+(((-1.0)*r11*x1219))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1220=IKcos(j0);
IkReal x1221=IKsin(j0);
IkReal x1222=(cj5*sj4);
IkReal x1223=(cj5*r01);
IkReal x1224=((0.117)*sj5);
IkReal x1225=(cj5*r11);
IkReal x1226=(cj2*sj1);
IkReal x1227=(cj1*x1220);
IkReal x1228=((1.0)*sj4*sj5);
IkReal x1229=(cj1*x1221);
evalcond[0]=((((-1.0)*r01*x1228))+x1221+((r00*x1222)));
evalcond[1]=((((-1.0)*x1220))+(((-1.0)*r11*x1228))+((r10*x1222)));
evalcond[2]=(((r00*sj5))+x1223+((sj2*x1227))+((x1220*x1226)));
evalcond[3]=(x1225+((sj2*x1229))+((r10*sj5))+((x1221*x1226)));
evalcond[4]=(((r00*x1224))+(((-0.43)*x1227))+(((-1.0)*px))+(((0.139)*x1221))+(((0.117)*x1223)));
evalcond[5]=((((-0.139)*x1220))+(((-0.43)*x1229))+(((-1.0)*py))+((r10*x1224))+(((0.117)*x1225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1230=IKPowWithIntegerCheck(cj3,-1);
if(!x1230.valid){
continue;
}
CheckValue<IkReal> x1231=IKPowWithIntegerCheck(r22,-1);
if(!x1231.valid){
continue;
}
sj4array[0]=((x1230.value)*(x1231.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1232=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1232);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1232);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1233=((4.0)*r01);
IkReal x1234=((16.0)*r00);
IkReal x1235=(cj3*sj2);
IkReal x1236=((8.0)*r00);
IkReal x1237=(cj2*cj3);
IkReal x1238=(cj4*r01);
IkReal x1239=((16.0)*cj1);
IkReal x1240=((8.0)*sj1);
IkReal x1241=((16.0)*sj1);
IkReal x1242=((8.0)*cj1);
IkReal x1243=(sj2*sj3);
IkReal x1244=(cj2*sj3);
IkReal x1245=(sj1*x1244);
IkReal x1246=((4.0)*cj4*r00);
IkReal x1247=(((sj1*x1233*x1235))+((sj1*x1243*x1246))+((x1233*x1245))+((cj1*x1233*x1243)));
IkReal x1248=(((cj1*x1244*x1246))+((cj1*x1235*x1246))+((sj1*x1237*x1246))+((cj1*x1233*x1237)));
IkReal x1249=(x1248+(((-1.0)*x1247)));
IkReal x1250=(((x1237*x1238*x1240))+((x1236*x1245))+(((-1.0)*x1238*x1240*x1243))+(((-1.0)*cj1*x1236*x1237))+((x1238*x1242*x1244))+((cj1*x1236*x1243))+((sj1*x1235*x1236))+((x1235*x1238*x1242)));
IkReal x1251=(x1247+(((-1.0)*x1248)));
op[0]=x1249;
op[1]=x1250;
op[2]=x1249;
op[3]=(((x1237*x1238*x1241))+(((-1.0)*cj1*x1234*x1237))+((sj1*x1234*x1235))+((cj1*x1234*x1243))+(((-1.0)*x1238*x1241*x1243))+((x1238*x1239*x1244))+((x1234*x1245))+((x1235*x1238*x1239)));
op[4]=x1251;
op[5]=x1250;
op[6]=x1251;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1252=(cj5*sj4);
IkReal x1253=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1252))+((r01*x1253)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1252))+(((-1.0)*r11*x1253)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1252))+((r01*x1253))))+IKsqr((((r10*x1252))+(((-1.0)*r11*x1253))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1252))+((r01*x1253))), (((r10*x1252))+(((-1.0)*r11*x1253))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1254=IKcos(j0);
IkReal x1255=IKsin(j0);
IkReal x1256=((1.0)*cj5);
IkReal x1257=(cj3*r11);
IkReal x1258=(cj4*r10);
IkReal x1259=(cj4*r00);
IkReal x1260=(cj5*sj4);
IkReal x1261=((1.0)*sj5);
IkReal x1262=(r01*sj3);
IkReal x1263=(r10*sj5);
IkReal x1264=(cj5*r11);
IkReal x1265=(cj3*r01);
IkReal x1266=(cj4*sj5);
IkReal x1267=(r00*sj5);
IkReal x1268=(sj1*sj2);
IkReal x1269=((0.353)*cj2);
IkReal x1270=((1.0)*cj2);
IkReal x1271=(cj2*sj1);
IkReal x1272=(cj1*x1254);
IkReal x1273=(cj1*x1255);
evalcond[0]=(x1255+(((-1.0)*r01*sj4*x1261))+((r00*x1260)));
evalcond[1]=(((r10*x1260))+(((-1.0)*r11*sj4*x1261))+(((-1.0)*x1254)));
evalcond[2]=((((-1.0)*x1270*x1272))+((x1254*x1268))+((cj5*x1262))+(((-1.0)*cj3*x1256*x1259))+((x1265*x1266))+((sj3*x1267)));
evalcond[3]=((((-1.0)*x1270*x1273))+((x1255*x1268))+((x1257*x1266))+(((-1.0)*cj3*x1256*x1258))+((sj3*x1264))+((sj3*x1263)));
evalcond[4]=((((-1.0)*sj3*x1256*x1259))+((sj2*x1272))+(((-1.0)*cj3*r00*x1261))+(((-1.0)*x1256*x1265))+((x1262*x1266))+((x1254*x1271)));
evalcond[5]=((((-1.0)*sj3*x1256*x1258))+((r11*sj3*x1266))+((sj2*x1273))+(((-1.0)*x1256*x1257))+(((-1.0)*cj3*r10*x1261))+((x1255*x1271)));
evalcond[6]=((((0.117)*cj5*r01))+(((0.139)*x1255))+(((-1.0)*x1269*x1272))+(((-1.0)*px))+(((0.353)*x1254*x1268))+(((0.117)*x1267))+(((-0.43)*x1272)));
evalcond[7]=((((0.353)*x1255*x1268))+(((-0.139)*x1254))+(((-1.0)*x1269*x1273))+(((-1.0)*py))+(((0.117)*x1263))+(((0.117)*x1264))+(((-0.43)*x1273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1274=IKPowWithIntegerCheck(r22,-1);
if(!x1274.valid){
continue;
}
CheckValue<IkReal> x1275=IKPowWithIntegerCheck(sj3,-1);
if(!x1275.valid){
continue;
}
sj4array[0]=((x1274.value)*(x1275.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1276=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1276);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1276);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1277=((4.0)*r01);
IkReal x1278=((16.0)*r00);
IkReal x1279=(cj3*sj2);
IkReal x1280=((8.0)*r00);
IkReal x1281=(cj2*cj3);
IkReal x1282=(cj4*r01);
IkReal x1283=((16.0)*cj1);
IkReal x1284=((8.0)*sj1);
IkReal x1285=((16.0)*sj1);
IkReal x1286=((8.0)*cj1);
IkReal x1287=(sj2*sj3);
IkReal x1288=(cj2*sj3);
IkReal x1289=(sj1*x1288);
IkReal x1290=((4.0)*cj4*r00);
IkReal x1291=(((sj1*x1277*x1279))+((cj1*x1277*x1287))+((sj1*x1287*x1290))+((x1277*x1289)));
IkReal x1292=(((cj1*x1279*x1290))+((cj1*x1277*x1281))+((sj1*x1281*x1290))+((cj1*x1288*x1290)));
IkReal x1293=(x1292+(((-1.0)*x1291)));
IkReal x1294=(((x1281*x1282*x1284))+((x1279*x1282*x1286))+((cj1*x1280*x1287))+(((-1.0)*x1282*x1284*x1287))+(((-1.0)*cj1*x1280*x1281))+((x1282*x1286*x1288))+((sj1*x1279*x1280))+((x1280*x1289)));
IkReal x1295=(x1291+(((-1.0)*x1292)));
op[0]=x1293;
op[1]=x1294;
op[2]=x1293;
op[3]=(((x1278*x1289))+((x1281*x1282*x1285))+((sj1*x1278*x1279))+((x1279*x1282*x1283))+(((-1.0)*x1282*x1285*x1287))+((x1282*x1283*x1288))+((cj1*x1278*x1287))+(((-1.0)*cj1*x1278*x1281)));
op[4]=x1295;
op[5]=x1294;
op[6]=x1295;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1296=(cj5*sj4);
IkReal x1297=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1296))+((r01*x1297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1296))+(((-1.0)*r11*x1297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1296))+((r01*x1297))))+IKsqr((((r10*x1296))+(((-1.0)*r11*x1297))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1296))+((r01*x1297))), (((r10*x1296))+(((-1.0)*r11*x1297))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1298=IKcos(j0);
IkReal x1299=IKsin(j0);
IkReal x1300=((1.0)*cj5);
IkReal x1301=(cj3*r11);
IkReal x1302=(cj4*r10);
IkReal x1303=(cj4*r00);
IkReal x1304=(cj5*sj4);
IkReal x1305=((1.0)*sj5);
IkReal x1306=(r01*sj3);
IkReal x1307=(r10*sj5);
IkReal x1308=(cj5*r11);
IkReal x1309=(cj3*r01);
IkReal x1310=(cj4*sj5);
IkReal x1311=(r00*sj5);
IkReal x1312=(sj1*sj2);
IkReal x1313=((0.353)*cj2);
IkReal x1314=((1.0)*cj2);
IkReal x1315=(cj2*sj1);
IkReal x1316=(cj1*x1298);
IkReal x1317=(cj1*x1299);
evalcond[0]=(x1299+(((-1.0)*r01*sj4*x1305))+((r00*x1304)));
evalcond[1]=(((r10*x1304))+(((-1.0)*x1298))+(((-1.0)*r11*sj4*x1305)));
evalcond[2]=(((x1298*x1312))+((sj3*x1311))+((cj5*x1306))+((x1309*x1310))+(((-1.0)*x1314*x1316))+(((-1.0)*cj3*x1300*x1303)));
evalcond[3]=(((sj3*x1308))+((sj3*x1307))+(((-1.0)*x1314*x1317))+(((-1.0)*cj3*x1300*x1302))+((x1299*x1312))+((x1301*x1310)));
evalcond[4]=(((x1298*x1315))+((sj2*x1316))+((x1306*x1310))+(((-1.0)*x1300*x1309))+(((-1.0)*sj3*x1300*x1303))+(((-1.0)*cj3*r00*x1305)));
evalcond[5]=(((sj2*x1317))+((r11*sj3*x1310))+(((-1.0)*x1300*x1301))+(((-1.0)*sj3*x1300*x1302))+((x1299*x1315))+(((-1.0)*cj3*r10*x1305)));
evalcond[6]=((((0.117)*cj5*r01))+(((-1.0)*x1313*x1316))+(((0.353)*x1298*x1312))+(((-1.0)*px))+(((-0.43)*x1316))+(((0.139)*x1299))+(((0.117)*x1311)));
evalcond[7]=((((-1.0)*x1313*x1317))+(((0.353)*x1299*x1312))+(((-0.139)*x1298))+(((0.117)*x1307))+(((0.117)*x1308))+(((-1.0)*py))+(((-0.43)*x1317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1320 = IKatan2WithCheck(IkReal(((0.117)*r21)),IkReal(((0.117)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1320.valid){
continue;
}
IkReal x1318=((1.0)*(x1320.value));
if((((((0.013689)*(r20*r20)))+(((0.013689)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1321=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.013689)*(r20*r20)))+(((0.013689)*(r21*r21)))))),-1);
if(!x1321.valid){
continue;
}
if( (((-1.0)*(x1321.value)*(((((-0.43)*sj1))+(((-0.353)*cj2*sj1))+(((-0.353)*cj1*sj2))+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1321.value)*(((((-0.43)*sj1))+(((-0.353)*cj2*sj1))+(((-0.353)*cj1*sj2))+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1319=((-1.0)*(IKasin(((-1.0)*(x1321.value)*(((((-0.43)*sj1))+(((-0.353)*cj2*sj1))+(((-0.353)*cj1*sj2))+(((-1.0)*pz))))))));
j5array[0]=((((-1.0)*x1318))+(((-1.0)*x1319)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1318))+(((1.0)*x1319)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1322=cj5*cj5;
IkReal x1323=r21*r21;
IkReal x1324=(cj3*x1322);
IkReal x1325=((((-1.0)*x1323*x1324))+(((-2.0)*cj3*cj5*r20*r21*sj5))+((cj3*(r22*r22)))+((cj3*x1323))+((x1324*(r20*r20))));
j4eval[0]=x1325;
j4eval[1]=IKsign(x1325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1326=cj5*cj5;
IkReal x1327=r21*r21;
IkReal x1328=(sj3*x1326);
IkReal x1329=(((sj3*(r22*r22)))+((sj3*x1327))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1328*(r20*r20)))+(((-1.0)*x1327*x1328)));
j4eval[0]=x1329;
j4eval[1]=IKsign(x1329);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1330=cj1*cj1;
IkReal x1331=cj2*cj2;
IkReal x1332=(cj1*sj1*sj2);
IkReal x1333=(cj2*x1330);
IkReal x1334=(x1330*x1331);
j0eval[0]=((-2.38725514587584)+(((-4.13358544393027)*x1334))+(((-5.0352457249009)*x1333))+(((5.0352457249009)*x1332))+(((-1.0)*x1330))+(((2.06679272196514)*x1331))+(((4.13358544393027)*cj2*x1332)));
j0eval[1]=IKsign(((-143930.0)+(((303580.0)*x1332))+(((249218.0)*cj2*x1332))+(((124609.0)*x1331))+(((-303580.0)*x1333))+(((-249218.0)*x1334))+(((-60291.0)*x1330))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1335=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1335;
j0eval[1]=IKsign(x1335);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1336=cj5*cj5;
IkReal x1337=r21*r21;
IkReal x1338=(cj2*sj1);
IkReal x1339=(cj1*sj2);
IkReal x1340=((1.0)*r22);
IkReal x1341=(r21*sj5);
IkReal x1342=((1.0)*cj5*r20);
IkReal x1343=(x1337+((x1336*(r20*r20)))+(r22*r22)+(((-1.0)*x1336*x1337))+(((-2.0)*cj5*r20*x1341)));
j4eval[0]=x1343;
j4eval[1]=((IKabs(((((-1.0)*x1338*x1342))+((x1339*x1341))+((x1338*x1341))+(((-1.0)*x1339*x1342)))))+(IKabs(((((-1.0)*x1338*x1340))+(((-1.0)*x1339*x1340))))));
j4eval[2]=IKsign(x1343);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1344=cj1*cj1;
IkReal x1345=(cj2*sj2);
IkReal x1346=(cj1*sj1);
j0eval[0]=(x1345+x1346+(((-2.0)*x1344*x1345))+(((-2.0)*x1346*(cj2*cj2)))+(((-1.21813031161473)*sj2*x1344))+(((-1.21813031161473)*cj2*x1346)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.219794120902579)*px))+(((-1.23812083932892)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.219794120902579)*py))+(((-1.23812083932892)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.219794120902579)*px))+(((-1.23812083932892)*py))))+IKsqr(((((-0.219794120902579)*py))+(((-1.23812083932892)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.219794120902579)*px))+(((-1.23812083932892)*py))), ((((-0.219794120902579)*py))+(((-1.23812083932892)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1347=IKsin(j0);
IkReal x1348=IKcos(j0);
evalcond[0]=((((-0.783)*x1348))+(((-1.0)*px))+(((0.139)*x1347)));
evalcond[1]=((((-0.783)*x1347))+(((-0.139)*x1348))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1349=((1.0)*sj5);
IkReal x1350=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1349)));
j4eval[0]=x1350;
j4eval[1]=IKsign(x1350);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1349))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1351=((1.0)*sj5);
IkReal x1352=((((-1.0)*r00*x1351))+(((-1.0)*cj5*r01)));
j4eval[0]=x1352;
j4eval[1]=IKsign(x1352);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1351))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1353=cj5*cj5;
IkReal x1354=((1.0)*r21);
IkReal x1355=(cj5*sj5);
IkReal x1356=((1.0)*r20);
IkReal x1357=((((-1.0)*r01*x1353*x1354))+((r01*r21))+((r00*r20*x1353))+((r02*r22))+(((-1.0)*r00*x1354*x1355))+(((-1.0)*r01*x1355*x1356)));
j4eval[0]=x1357;
j4eval[1]=IKsign(x1357);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*sj0*x1356))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1358=cj5*cj5;
IkReal x1359=((1.0)*r21);
IkReal x1360=(cj5*sj5);
IkReal x1361=((1.0)*r20);
CheckValue<IkReal> x1362=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1360*x1361))+(((-1.0)*r00*x1359*x1360))+((r00*r20*x1358))+((r02*r22))+(((-1.0)*r01*x1358*x1359)))),-1);
if(!x1362.valid){
continue;
}
CheckValue<IkReal> x1363 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x1361))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1362.value)))+(x1363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1364=IKsin(j4);
IkReal x1365=IKcos(j4);
IkReal x1366=((1.0)*cj0);
IkReal x1367=(cj5*r00);
IkReal x1368=(r11*sj5);
IkReal x1369=(r01*sj5);
IkReal x1370=(cj5*r20);
IkReal x1371=(r21*sj5);
IkReal x1372=(cj5*r10);
IkReal x1373=((1.0)*x1365);
IkReal x1374=((1.0)*x1364);
evalcond[0]=((((-1.0)*x1371*x1374))+(((-1.0)*r22*x1373))+((x1364*x1370)));
evalcond[1]=(((x1365*x1371))+(((-1.0)*x1370*x1373))+(((-1.0)*r22*x1374)));
evalcond[2]=(sj0+(((-1.0)*r02*x1373))+((x1364*x1367))+(((-1.0)*x1369*x1374)));
evalcond[3]=((((-1.0)*r12*x1373))+(((-1.0)*x1368*x1374))+((x1364*x1372))+(((-1.0)*x1366)));
evalcond[4]=((((-1.0)*r02*x1374))+((x1365*x1369))+(((-1.0)*x1367*x1373))+(((-1.0)*x1366)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1372*x1373))+((x1365*x1368))+(((-1.0)*r12*x1374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1375=((1.0)*sj5);
CheckValue<IkReal> x1376 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1375))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1376.valid){
continue;
}
CheckValue<IkReal> x1377=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1375))+(((-1.0)*cj5*r01)))),-1);
if(!x1377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1376.value)+(((1.5707963267949)*(x1377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1378=IKsin(j4);
IkReal x1379=IKcos(j4);
IkReal x1380=((1.0)*cj0);
IkReal x1381=(cj5*r00);
IkReal x1382=(r11*sj5);
IkReal x1383=(r01*sj5);
IkReal x1384=(cj5*r20);
IkReal x1385=(r21*sj5);
IkReal x1386=(cj5*r10);
IkReal x1387=((1.0)*x1379);
IkReal x1388=((1.0)*x1378);
evalcond[0]=((((-1.0)*r22*x1387))+((x1378*x1384))+(((-1.0)*x1385*x1388)));
evalcond[1]=((((-1.0)*x1384*x1387))+((x1379*x1385))+(((-1.0)*r22*x1388)));
evalcond[2]=(sj0+(((-1.0)*x1383*x1388))+(((-1.0)*r02*x1387))+((x1378*x1381)));
evalcond[3]=((((-1.0)*r12*x1387))+(((-1.0)*x1380))+(((-1.0)*x1382*x1388))+((x1378*x1386)));
evalcond[4]=((((-1.0)*x1380))+(((-1.0)*r02*x1388))+(((-1.0)*x1381*x1387))+((x1379*x1383)));
evalcond[5]=((((-1.0)*r12*x1388))+(((-1.0)*sj0))+((x1379*x1382))+(((-1.0)*x1386*x1387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1389=((1.0)*sj5);
CheckValue<IkReal> x1390=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1389)))),-1);
if(!x1390.valid){
continue;
}
CheckValue<IkReal> x1391 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1389))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1390.value)))+(x1391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1392=IKsin(j4);
IkReal x1393=IKcos(j4);
IkReal x1394=((1.0)*cj0);
IkReal x1395=(cj5*r00);
IkReal x1396=(r11*sj5);
IkReal x1397=(r01*sj5);
IkReal x1398=(cj5*r20);
IkReal x1399=(r21*sj5);
IkReal x1400=(cj5*r10);
IkReal x1401=((1.0)*x1393);
IkReal x1402=((1.0)*x1392);
evalcond[0]=((((-1.0)*x1399*x1402))+(((-1.0)*r22*x1401))+((x1392*x1398)));
evalcond[1]=(((x1393*x1399))+(((-1.0)*x1398*x1401))+(((-1.0)*r22*x1402)));
evalcond[2]=(sj0+(((-1.0)*r02*x1401))+((x1392*x1395))+(((-1.0)*x1397*x1402)));
evalcond[3]=((((-1.0)*r12*x1401))+((x1392*x1400))+(((-1.0)*x1396*x1402))+(((-1.0)*x1394)));
evalcond[4]=(((x1393*x1397))+(((-1.0)*r02*x1402))+(((-1.0)*x1395*x1401))+(((-1.0)*x1394)));
evalcond[5]=((((-1.0)*r12*x1402))+(((-1.0)*sj0))+((x1393*x1396))+(((-1.0)*x1400*x1401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.5049504950495)*px))+(((-3.04950495049505)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-5.5049504950495)*py))+(((-3.04950495049505)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.5049504950495)*px))+(((-3.04950495049505)*py))))+IKsqr(((((-5.5049504950495)*py))+(((-3.04950495049505)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.5049504950495)*px))+(((-3.04950495049505)*py))), ((((-5.5049504950495)*py))+(((-3.04950495049505)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1403=IKsin(j0);
IkReal x1404=IKcos(j0);
evalcond[0]=((((-0.077)*x1404))+(((-1.0)*px))+(((0.139)*x1403)));
evalcond[1]=((((-0.077)*x1403))+(((-1.0)*py))+(((-0.139)*x1404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1405=((1.0)*sj5);
IkReal x1406=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1405)));
j4eval[0]=x1406;
j4eval[1]=IKsign(x1406);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1405))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1407=cj5*cj5;
IkReal x1408=((1.0)*r21);
IkReal x1409=(cj5*sj5);
IkReal x1410=(((r01*r21))+(((-1.0)*r01*x1407*x1408))+(((-1.0)*r00*x1408*x1409))+(((-1.0)*r01*r20*x1409))+((r00*r20*x1407))+((r02*r22)));
j4eval[0]=x1410;
j4eval[1]=IKsign(x1410);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x1408))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1411=cj5*cj5;
IkReal x1412=(cj5*r20);
IkReal x1413=((1.0)*sj5);
IkReal x1414=(r11*r21);
IkReal x1415=((((-1.0)*r11*x1412*x1413))+(((-1.0)*x1411*x1414))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1413))+((r10*r20*x1411))+x1414);
j4eval[0]=x1415;
j4eval[1]=IKsign(x1415);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1413))+((sj0*x1412))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1416=cj5*cj5;
IkReal x1417=(cj5*r20);
IkReal x1418=((1.0)*sj5);
IkReal x1419=(r11*r21);
CheckValue<IkReal> x1420 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1418))+((sj0*x1417)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1420.valid){
continue;
}
CheckValue<IkReal> x1421=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1416*x1419))+(((-1.0)*r11*x1417*x1418))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1418))+((r10*r20*x1416))+x1419)),-1);
if(!x1421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1420.value)+(((1.5707963267949)*(x1421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1422=IKsin(j4);
IkReal x1423=IKcos(j4);
IkReal x1424=(cj5*r00);
IkReal x1425=(r11*sj5);
IkReal x1426=(r01*sj5);
IkReal x1427=(cj5*r20);
IkReal x1428=(r21*sj5);
IkReal x1429=(cj5*r10);
IkReal x1430=((1.0)*x1423);
IkReal x1431=((1.0)*x1422);
evalcond[0]=(((x1422*x1427))+(((-1.0)*r22*x1430))+(((-1.0)*x1428*x1431)));
evalcond[1]=(((x1423*x1428))+(((-1.0)*r22*x1431))+(((-1.0)*x1427*x1430)));
evalcond[2]=(sj0+((x1422*x1424))+(((-1.0)*r02*x1430))+(((-1.0)*x1426*x1431)));
evalcond[3]=(cj0+((x1423*x1426))+(((-1.0)*r02*x1431))+(((-1.0)*x1424*x1430)));
evalcond[4]=((((-1.0)*r12*x1431))+sj0+((x1423*x1425))+(((-1.0)*x1429*x1430)));
evalcond[5]=((((-1.0)*r12*x1430))+((x1422*x1429))+(((-1.0)*x1425*x1431))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1432=cj5*cj5;
IkReal x1433=((1.0)*r21);
IkReal x1434=(cj5*sj5);
CheckValue<IkReal> x1435 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1433))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1435.valid){
continue;
}
CheckValue<IkReal> x1436=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1432*x1433))+((r01*r21))+(((-1.0)*r00*x1433*x1434))+(((-1.0)*r01*r20*x1434))+((r00*r20*x1432))+((r02*r22)))),-1);
if(!x1436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1435.value)+(((1.5707963267949)*(x1436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1437=IKsin(j4);
IkReal x1438=IKcos(j4);
IkReal x1439=(cj5*r00);
IkReal x1440=(r11*sj5);
IkReal x1441=(r01*sj5);
IkReal x1442=(cj5*r20);
IkReal x1443=(r21*sj5);
IkReal x1444=(cj5*r10);
IkReal x1445=((1.0)*x1438);
IkReal x1446=((1.0)*x1437);
evalcond[0]=(((x1437*x1442))+(((-1.0)*r22*x1445))+(((-1.0)*x1443*x1446)));
evalcond[1]=(((x1438*x1443))+(((-1.0)*r22*x1446))+(((-1.0)*x1442*x1445)));
evalcond[2]=(sj0+((x1437*x1439))+(((-1.0)*x1441*x1446))+(((-1.0)*r02*x1445)));
evalcond[3]=(((x1438*x1441))+cj0+(((-1.0)*x1439*x1445))+(((-1.0)*r02*x1446)));
evalcond[4]=(((x1438*x1440))+sj0+(((-1.0)*r12*x1446))+(((-1.0)*x1444*x1445)));
evalcond[5]=(((x1437*x1444))+(((-1.0)*r12*x1445))+(((-1.0)*x1440*x1446))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1447=((1.0)*sj5);
CheckValue<IkReal> x1448=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1447)))),-1);
if(!x1448.valid){
continue;
}
CheckValue<IkReal> x1449 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1448.value)))+(x1449.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1450=IKsin(j4);
IkReal x1451=IKcos(j4);
IkReal x1452=(cj5*r00);
IkReal x1453=(r11*sj5);
IkReal x1454=(r01*sj5);
IkReal x1455=(cj5*r20);
IkReal x1456=(r21*sj5);
IkReal x1457=(cj5*r10);
IkReal x1458=((1.0)*x1451);
IkReal x1459=((1.0)*x1450);
evalcond[0]=((((-1.0)*r22*x1458))+((x1450*x1455))+(((-1.0)*x1456*x1459)));
evalcond[1]=((((-1.0)*r22*x1459))+(((-1.0)*x1455*x1458))+((x1451*x1456)));
evalcond[2]=(sj0+((x1450*x1452))+(((-1.0)*x1454*x1459))+(((-1.0)*r02*x1458)));
evalcond[3]=(cj0+(((-1.0)*r02*x1459))+(((-1.0)*x1452*x1458))+((x1451*x1454)));
evalcond[4]=((((-1.0)*x1457*x1458))+sj0+((x1451*x1453))+(((-1.0)*r12*x1459)));
evalcond[5]=(((x1450*x1457))+(((-1.0)*x1453*x1459))+(((-1.0)*cj0))+(((-1.0)*r12*x1458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1460=IKsin(j0);
IkReal x1461=IKcos(j0);
IkReal x1462=((1.0)*cj5);
IkReal x1463=((0.117)*cj5);
IkReal x1464=((1.0)*sj5);
IkReal x1465=((0.117)*sj5);
evalcond[0]=((((-1.0)*r01*x1462))+(((-1.0)*r00*x1464))+x1461);
evalcond[1]=(x1460+(((-1.0)*r11*x1462))+(((-1.0)*r10*x1464)));
evalcond[2]=(((r01*x1463))+((r00*x1465))+(((0.139)*x1460))+(((-1.0)*px)));
evalcond[3]=((((-0.139)*x1461))+(((-1.0)*py))+((r11*x1463))+((r10*x1465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1466=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1466;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x1466);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1467=((1.0)*sj5);
IkReal x1468=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1467)));
j4eval[0]=x1468;
j4eval[1]=IKsign(x1468);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x1467))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1469=r21*r21;
IkReal x1470=cj5*cj5;
IkReal x1471=(cj5*r20);
IkReal x1472=(r21*sj5);
IkReal x1473=((((-1.0)*x1470*(r20*r20)))+(((2.0)*x1471*x1472))+(((-1.0)*(r22*r22)))+(((-1.0)*x1469))+((x1469*x1470)));
j4eval[0]=x1473;
j4eval[1]=((IKabs(((((-1.0)*x1472))+x1471)))+(IKabs(r22)));
j4eval[2]=IKsign(x1473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1474=r21*r21;
IkReal x1475=cj5*cj5;
IkReal x1476=(cj5*r20);
IkReal x1477=(r21*sj5);
CheckValue<IkReal> x1478 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x1477))+x1476)),IKFAST_ATAN2_MAGTHRESH);
if(!x1478.valid){
continue;
}
CheckValue<IkReal> x1479=IKPowWithIntegerCheck(IKsign((((x1474*x1475))+(((2.0)*x1476*x1477))+(((-1.0)*x1474))+(((-1.0)*(r22*r22)))+(((-1.0)*x1475*(r20*r20))))),-1);
if(!x1479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1478.value)+(((1.5707963267949)*(x1479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1480=IKsin(j4);
IkReal x1481=IKcos(j4);
IkReal x1482=(cj5*r00);
IkReal x1483=(r11*sj5);
IkReal x1484=(r01*sj5);
IkReal x1485=(cj5*r20);
IkReal x1486=(cj5*r10);
IkReal x1487=(r21*sj5);
IkReal x1488=((1.0)*x1481);
IkReal x1489=((1.0)*x1480);
evalcond[0]=((((-1.0)*x1487*x1489))+((x1480*x1485))+(((-1.0)*r22*x1488)));
evalcond[1]=((((-1.0)*x1482*x1488))+((x1481*x1484))+(((-1.0)*r02*x1489)));
evalcond[2]=((((-1.0)*r12*x1489))+((x1481*x1483))+(((-1.0)*x1486*x1488)));
evalcond[3]=(sj0+((x1480*x1482))+(((-1.0)*x1484*x1489))+(((-1.0)*r02*x1488)));
evalcond[4]=((-1.0)+(((-1.0)*x1485*x1488))+((x1481*x1487))+(((-1.0)*r22*x1489)));
evalcond[5]=((((-1.0)*r12*x1488))+((x1480*x1486))+(((-1.0)*x1483*x1489))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1490=((1.0)*sj5);
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1490)))),-1);
if(!x1491.valid){
continue;
}
CheckValue<IkReal> x1492 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1491.value)))+(x1492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1493=IKsin(j4);
IkReal x1494=IKcos(j4);
IkReal x1495=(cj5*r00);
IkReal x1496=(r11*sj5);
IkReal x1497=(r01*sj5);
IkReal x1498=(cj5*r20);
IkReal x1499=(cj5*r10);
IkReal x1500=(r21*sj5);
IkReal x1501=((1.0)*x1494);
IkReal x1502=((1.0)*x1493);
evalcond[0]=((((-1.0)*r22*x1501))+((x1493*x1498))+(((-1.0)*x1500*x1502)));
evalcond[1]=(((x1494*x1497))+(((-1.0)*r02*x1502))+(((-1.0)*x1495*x1501)));
evalcond[2]=((((-1.0)*x1499*x1501))+((x1494*x1496))+(((-1.0)*r12*x1502)));
evalcond[3]=(sj0+(((-1.0)*r02*x1501))+((x1493*x1495))+(((-1.0)*x1497*x1502)));
evalcond[4]=((-1.0)+((x1494*x1500))+(((-1.0)*x1498*x1501))+(((-1.0)*r22*x1502)));
evalcond[5]=(((x1493*x1499))+(((-1.0)*x1496*x1502))+(((-1.0)*cj0))+(((-1.0)*r12*x1501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1503.valid){
continue;
}
CheckValue<IkReal> x1504 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1503.value)))+(x1504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1505=IKsin(j4);
IkReal x1506=IKcos(j4);
IkReal x1507=(cj5*r00);
IkReal x1508=(r11*sj5);
IkReal x1509=(r01*sj5);
IkReal x1510=(cj5*r20);
IkReal x1511=(cj5*r10);
IkReal x1512=(r21*sj5);
IkReal x1513=((1.0)*x1506);
IkReal x1514=((1.0)*x1505);
evalcond[0]=((((-1.0)*r22*x1513))+(((-1.0)*x1512*x1514))+((x1505*x1510)));
evalcond[1]=((((-1.0)*x1507*x1513))+((x1506*x1509))+(((-1.0)*r02*x1514)));
evalcond[2]=(((x1506*x1508))+(((-1.0)*x1511*x1513))+(((-1.0)*r12*x1514)));
evalcond[3]=(sj0+(((-1.0)*r02*x1513))+(((-1.0)*x1509*x1514))+((x1505*x1507)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x1514))+((x1506*x1512))+(((-1.0)*x1510*x1513)));
evalcond[5]=(((x1505*x1511))+(((-1.0)*x1508*x1514))+(((-1.0)*cj0))+(((-1.0)*r12*x1513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.965747238240812)*px))+(((2.45258111582019)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.965747238240812)*py))+(((2.45258111582019)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.965747238240812)*px))+(((2.45258111582019)*py))))+IKsqr(((((-0.965747238240812)*py))+(((2.45258111582019)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.965747238240812)*px))+(((2.45258111582019)*py))), ((((-0.965747238240812)*py))+(((2.45258111582019)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1515=IKsin(j0);
IkReal x1516=IKcos(j0);
evalcond[0]=((((0.139)*x1515))+(((-1.0)*px))+(((0.353)*x1516)));
evalcond[1]=((((-0.139)*x1516))+(((-1.0)*py))+(((0.353)*x1515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1517=((1.0)*sj5);
IkReal x1518=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1517)));
j4eval[0]=x1518;
j4eval[1]=IKsign(x1518);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1517))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1519=cj5*cj5;
IkReal x1520=((1.0)*r21);
IkReal x1521=(cj5*sj5);
IkReal x1522=(((r01*r21))+(((-1.0)*r01*x1519*x1520))+(((-1.0)*r00*x1520*x1521))+((r02*r22))+((r00*r20*x1519))+(((-1.0)*r01*r20*x1521)));
j4eval[0]=x1522;
j4eval[1]=IKsign(x1522);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x1520))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1523=cj5*cj5;
IkReal x1524=(cj5*r20);
IkReal x1525=((1.0)*sj5);
IkReal x1526=(r11*r21);
IkReal x1527=((((-1.0)*r11*x1524*x1525))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1525))+x1526+((r10*r20*x1523))+(((-1.0)*x1523*x1526)));
j4eval[0]=x1527;
j4eval[1]=IKsign(x1527);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1524))+(((-1.0)*r21*sj0*x1525))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1528=cj5*cj5;
IkReal x1529=(cj5*r20);
IkReal x1530=((1.0)*sj5);
IkReal x1531=(r11*r21);
CheckValue<IkReal> x1532=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*cj5*r10*r21*x1530))+(((-1.0)*x1528*x1531))+x1531+(((-1.0)*r11*x1529*x1530))+((r10*r20*x1528)))),-1);
if(!x1532.valid){
continue;
}
CheckValue<IkReal> x1533 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1529))+(((-1.0)*r21*sj0*x1530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1532.value)))+(x1533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1534=IKsin(j4);
IkReal x1535=IKcos(j4);
IkReal x1536=(cj5*r00);
IkReal x1537=(r11*sj5);
IkReal x1538=(r01*sj5);
IkReal x1539=(cj5*r20);
IkReal x1540=(r21*sj5);
IkReal x1541=(cj5*r10);
IkReal x1542=((1.0)*x1535);
IkReal x1543=((1.0)*x1534);
evalcond[0]=((((-1.0)*x1540*x1543))+(((-1.0)*r22*x1542))+((x1534*x1539)));
evalcond[1]=((((-1.0)*r22*x1543))+(((-1.0)*x1539*x1542))+((x1535*x1540)));
evalcond[2]=((((-1.0)*r02*x1542))+sj0+((x1534*x1536))+(((-1.0)*x1538*x1543)));
evalcond[3]=((((-1.0)*r02*x1543))+cj0+(((-1.0)*x1536*x1542))+((x1535*x1538)));
evalcond[4]=(sj0+((x1535*x1537))+(((-1.0)*r12*x1543))+(((-1.0)*x1541*x1542)));
evalcond[5]=(((x1534*x1541))+(((-1.0)*x1537*x1543))+(((-1.0)*r12*x1542))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1544=cj5*cj5;
IkReal x1545=((1.0)*r21);
IkReal x1546=(cj5*sj5);
CheckValue<IkReal> x1547=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1544*x1545))+((r00*r20*x1544))+(((-1.0)*r00*x1545*x1546))+(((-1.0)*r01*r20*x1546))+((r02*r22)))),-1);
if(!x1547.valid){
continue;
}
CheckValue<IkReal> x1548 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1547.value)))+(x1548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1549=IKsin(j4);
IkReal x1550=IKcos(j4);
IkReal x1551=(cj5*r00);
IkReal x1552=(r11*sj5);
IkReal x1553=(r01*sj5);
IkReal x1554=(cj5*r20);
IkReal x1555=(r21*sj5);
IkReal x1556=(cj5*r10);
IkReal x1557=((1.0)*x1550);
IkReal x1558=((1.0)*x1549);
evalcond[0]=((((-1.0)*r22*x1557))+(((-1.0)*x1555*x1558))+((x1549*x1554)));
evalcond[1]=((((-1.0)*r22*x1558))+((x1550*x1555))+(((-1.0)*x1554*x1557)));
evalcond[2]=(sj0+(((-1.0)*r02*x1557))+(((-1.0)*x1553*x1558))+((x1549*x1551)));
evalcond[3]=(cj0+((x1550*x1553))+(((-1.0)*r02*x1558))+(((-1.0)*x1551*x1557)));
evalcond[4]=(sj0+((x1550*x1552))+(((-1.0)*r12*x1558))+(((-1.0)*x1556*x1557)));
evalcond[5]=((((-1.0)*x1552*x1558))+((x1549*x1556))+(((-1.0)*r12*x1557))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1559=((1.0)*sj5);
CheckValue<IkReal> x1560 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1559)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1560.valid){
continue;
}
CheckValue<IkReal> x1561=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1559)))),-1);
if(!x1561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1560.value)+(((1.5707963267949)*(x1561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1562=IKsin(j4);
IkReal x1563=IKcos(j4);
IkReal x1564=(cj5*r00);
IkReal x1565=(r11*sj5);
IkReal x1566=(r01*sj5);
IkReal x1567=(cj5*r20);
IkReal x1568=(r21*sj5);
IkReal x1569=(cj5*r10);
IkReal x1570=((1.0)*x1563);
IkReal x1571=((1.0)*x1562);
evalcond[0]=((((-1.0)*r22*x1570))+(((-1.0)*x1568*x1571))+((x1562*x1567)));
evalcond[1]=((((-1.0)*x1567*x1570))+(((-1.0)*r22*x1571))+((x1563*x1568)));
evalcond[2]=((((-1.0)*r02*x1570))+sj0+(((-1.0)*x1566*x1571))+((x1562*x1564)));
evalcond[3]=((((-1.0)*r02*x1571))+cj0+(((-1.0)*x1564*x1570))+((x1563*x1566)));
evalcond[4]=(sj0+(((-1.0)*x1569*x1570))+(((-1.0)*r12*x1571))+((x1563*x1565)));
evalcond[5]=((((-1.0)*x1565*x1571))+((x1562*x1569))+(((-1.0)*r12*x1570))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1572=((1.0)*sj5);
IkReal x1573=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x1572))+(((-1.0)*r11*x1573)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1573))+(((-1.0)*r00*x1572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1572))+(((-1.0)*r11*x1573))))+IKsqr(((((-1.0)*r01*x1573))+(((-1.0)*r00*x1572))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x1572))+(((-1.0)*r11*x1573))), ((((-1.0)*r01*x1573))+(((-1.0)*r00*x1572))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1574=IKsin(j0);
IkReal x1575=IKcos(j0);
IkReal x1576=((1.0)*cj5);
IkReal x1577=((0.117)*cj5);
IkReal x1578=((1.0)*sj5);
IkReal x1579=((0.117)*sj5);
evalcond[0]=((((-1.0)*r01*x1576))+(((-1.0)*r00*x1578))+(((-1.0)*x1575)));
evalcond[1]=((((-1.0)*r10*x1578))+(((-1.0)*r11*x1576))+(((-1.0)*x1574)));
evalcond[2]=((((0.139)*x1574))+(((-1.0)*px))+((r01*x1577))+((r00*x1579)));
evalcond[3]=((((-1.0)*py))+((r11*x1577))+(((-0.139)*x1575))+((r10*x1579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1580=((1.0)*cj5);
IkReal x1581=((((-1.0)*r11*x1580))+(((-1.0)*r10*sj5)));
j4eval[0]=x1581;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x1580))))));
j4eval[2]=IKsign(x1581);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1582=((1.0)*sj5);
IkReal x1583=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1582)));
j4eval[0]=x1583;
j4eval[1]=IKsign(x1583);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1582))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1584=cj5*cj5;
IkReal x1585=r21*r21;
IkReal x1586=(cj5*r20);
IkReal x1587=(r21*sj5);
IkReal x1588=((((-1.0)*x1584*x1585))+(r22*r22)+((x1584*(r20*r20)))+x1585+(((-2.0)*x1586*x1587)));
j4eval[0]=x1588;
j4eval[1]=IKsign(x1588);
j4eval[2]=((IKabs((x1586+(((-1.0)*x1587)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1589=cj5*cj5;
IkReal x1590=r21*r21;
IkReal x1591=(cj5*r20);
IkReal x1592=(r21*sj5);
CheckValue<IkReal> x1593 = IKatan2WithCheck(IkReal(r22),IkReal((x1591+(((-1.0)*x1592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1593.valid){
continue;
}
CheckValue<IkReal> x1594=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1589*x1590))+((x1589*(r20*r20)))+(((-2.0)*x1591*x1592))+(r22*r22)+x1590)),-1);
if(!x1594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1593.value)+(((1.5707963267949)*(x1594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1595=IKsin(j4);
IkReal x1596=IKcos(j4);
IkReal x1597=(cj5*r00);
IkReal x1598=(r11*sj5);
IkReal x1599=(r01*sj5);
IkReal x1600=(cj5*r20);
IkReal x1601=(cj5*r10);
IkReal x1602=(r21*sj5);
IkReal x1603=((1.0)*x1596);
IkReal x1604=((1.0)*x1595);
evalcond[0]=(((x1595*x1600))+(((-1.0)*r22*x1603))+(((-1.0)*x1602*x1604)));
evalcond[1]=(((x1596*x1599))+(((-1.0)*x1597*x1603))+(((-1.0)*r02*x1604)));
evalcond[2]=(((x1596*x1598))+(((-1.0)*x1601*x1603))+(((-1.0)*r12*x1604)));
evalcond[3]=(sj0+(((-1.0)*x1599*x1604))+(((-1.0)*r02*x1603))+((x1595*x1597)));
evalcond[4]=((1.0)+(((-1.0)*r22*x1604))+(((-1.0)*x1600*x1603))+((x1596*x1602)));
evalcond[5]=(((x1595*x1601))+(((-1.0)*r12*x1603))+(((-1.0)*cj0))+(((-1.0)*x1598*x1604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1605=((1.0)*sj5);
CheckValue<IkReal> x1606=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1605)))),-1);
if(!x1606.valid){
continue;
}
CheckValue<IkReal> x1607 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1606.value)))+(x1607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1608=IKsin(j4);
IkReal x1609=IKcos(j4);
IkReal x1610=(cj5*r00);
IkReal x1611=(r11*sj5);
IkReal x1612=(r01*sj5);
IkReal x1613=(cj5*r20);
IkReal x1614=(cj5*r10);
IkReal x1615=(r21*sj5);
IkReal x1616=((1.0)*x1609);
IkReal x1617=((1.0)*x1608);
evalcond[0]=(((x1608*x1613))+(((-1.0)*r22*x1616))+(((-1.0)*x1615*x1617)));
evalcond[1]=((((-1.0)*x1610*x1616))+(((-1.0)*r02*x1617))+((x1609*x1612)));
evalcond[2]=((((-1.0)*r12*x1617))+((x1609*x1611))+(((-1.0)*x1614*x1616)));
evalcond[3]=(sj0+(((-1.0)*r02*x1616))+((x1608*x1610))+(((-1.0)*x1612*x1617)));
evalcond[4]=((1.0)+((x1609*x1615))+(((-1.0)*r22*x1617))+(((-1.0)*x1613*x1616)));
evalcond[5]=((((-1.0)*r12*x1616))+(((-1.0)*x1611*x1617))+((x1608*x1614))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1618=((1.0)*cj5);
CheckValue<IkReal> x1619 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x1618)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1619.valid){
continue;
}
CheckValue<IkReal> x1620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1618))+(((-1.0)*r10*sj5)))),-1);
if(!x1620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1619.value)+(((1.5707963267949)*(x1620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1621=IKsin(j4);
IkReal x1622=IKcos(j4);
IkReal x1623=(cj5*r00);
IkReal x1624=(r11*sj5);
IkReal x1625=(r01*sj5);
IkReal x1626=(cj5*r20);
IkReal x1627=(cj5*r10);
IkReal x1628=(r21*sj5);
IkReal x1629=((1.0)*x1622);
IkReal x1630=((1.0)*x1621);
evalcond[0]=((((-1.0)*r22*x1629))+(((-1.0)*x1628*x1630))+((x1621*x1626)));
evalcond[1]=(((x1622*x1625))+(((-1.0)*x1623*x1629))+(((-1.0)*r02*x1630)));
evalcond[2]=((((-1.0)*r12*x1630))+((x1622*x1624))+(((-1.0)*x1627*x1629)));
evalcond[3]=(sj0+(((-1.0)*x1625*x1630))+(((-1.0)*r02*x1629))+((x1621*x1623)));
evalcond[4]=((1.0)+(((-1.0)*r22*x1630))+((x1622*x1628))+(((-1.0)*x1626*x1629)));
evalcond[5]=((((-1.0)*r12*x1629))+(((-1.0)*x1624*x1630))+(((-1.0)*cj0))+((x1621*x1627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.45258111582019)*py))+(((0.965747238240812)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.965747238240812)*py))+(((-2.45258111582019)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.45258111582019)*py))+(((0.965747238240812)*px))))+IKsqr(((((-0.965747238240812)*py))+(((-2.45258111582019)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.45258111582019)*py))+(((0.965747238240812)*px))), ((((-0.965747238240812)*py))+(((-2.45258111582019)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1631=IKcos(j0);
IkReal x1632=IKsin(j0);
evalcond[0]=((((0.139)*x1632))+(((-0.353)*x1631))+(((-1.0)*px)));
evalcond[1]=((((-0.353)*x1632))+(((-1.0)*py))+(((-0.139)*x1631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1633=((1.0)*sj5);
IkReal x1634=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1633)));
j4eval[0]=x1634;
j4eval[1]=IKsign(x1634);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1633))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1635=((1.0)*sj5);
IkReal x1636=((((-1.0)*r00*x1635))+(((-1.0)*cj5*r01)));
j4eval[0]=x1636;
j4eval[1]=IKsign(x1636);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1635))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1637=cj5*cj5;
IkReal x1638=((1.0)*r21);
IkReal x1639=(cj5*sj5);
IkReal x1640=((1.0)*r20);
IkReal x1641=((((-1.0)*r00*x1638*x1639))+((r00*r20*x1637))+((r01*r21))+(((-1.0)*r01*x1639*x1640))+(((-1.0)*r01*x1637*x1638))+((r02*r22)));
j4eval[0]=x1641;
j4eval[1]=IKsign(x1641);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1640)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1642=cj5*cj5;
IkReal x1643=((1.0)*r21);
IkReal x1644=(cj5*sj5);
IkReal x1645=((1.0)*r20);
CheckValue<IkReal> x1646 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1645)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1646.valid){
continue;
}
CheckValue<IkReal> x1647=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1643*x1644))+((r01*r21))+((r00*r20*x1642))+(((-1.0)*r01*x1644*x1645))+(((-1.0)*r01*x1642*x1643))+((r02*r22)))),-1);
if(!x1647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1646.value)+(((1.5707963267949)*(x1647.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1648=IKsin(j4);
IkReal x1649=IKcos(j4);
IkReal x1650=((1.0)*cj0);
IkReal x1651=(cj5*r00);
IkReal x1652=(r11*sj5);
IkReal x1653=(r01*sj5);
IkReal x1654=(cj5*r20);
IkReal x1655=(r21*sj5);
IkReal x1656=(cj5*r10);
IkReal x1657=((1.0)*x1649);
IkReal x1658=((1.0)*x1648);
evalcond[0]=(((x1648*x1654))+(((-1.0)*r22*x1657))+(((-1.0)*x1655*x1658)));
evalcond[1]=((((-1.0)*x1654*x1657))+(((-1.0)*r22*x1658))+((x1649*x1655)));
evalcond[2]=(sj0+((x1648*x1651))+(((-1.0)*x1653*x1658))+(((-1.0)*r02*x1657)));
evalcond[3]=((((-1.0)*x1652*x1658))+((x1648*x1656))+(((-1.0)*r12*x1657))+(((-1.0)*x1650)));
evalcond[4]=(((x1649*x1653))+(((-1.0)*x1650))+(((-1.0)*r02*x1658))+(((-1.0)*x1651*x1657)));
evalcond[5]=((((-1.0)*x1656*x1657))+(((-1.0)*sj0))+(((-1.0)*r12*x1658))+((x1649*x1652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1659=((1.0)*sj5);
CheckValue<IkReal> x1660=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1659))+(((-1.0)*cj5*r01)))),-1);
if(!x1660.valid){
continue;
}
CheckValue<IkReal> x1661 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1659))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1660.value)))+(x1661.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1662=IKsin(j4);
IkReal x1663=IKcos(j4);
IkReal x1664=((1.0)*cj0);
IkReal x1665=(cj5*r00);
IkReal x1666=(r11*sj5);
IkReal x1667=(r01*sj5);
IkReal x1668=(cj5*r20);
IkReal x1669=(r21*sj5);
IkReal x1670=(cj5*r10);
IkReal x1671=((1.0)*x1663);
IkReal x1672=((1.0)*x1662);
evalcond[0]=((((-1.0)*x1669*x1672))+((x1662*x1668))+(((-1.0)*r22*x1671)));
evalcond[1]=((((-1.0)*x1668*x1671))+((x1663*x1669))+(((-1.0)*r22*x1672)));
evalcond[2]=((((-1.0)*x1667*x1672))+sj0+(((-1.0)*r02*x1671))+((x1662*x1665)));
evalcond[3]=(((x1662*x1670))+(((-1.0)*r12*x1671))+(((-1.0)*x1664))+(((-1.0)*x1666*x1672)));
evalcond[4]=((((-1.0)*r02*x1672))+(((-1.0)*x1664))+(((-1.0)*x1665*x1671))+((x1663*x1667)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1672))+(((-1.0)*x1670*x1671))+((x1663*x1666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1673=((1.0)*sj5);
CheckValue<IkReal> x1674 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1674.valid){
continue;
}
CheckValue<IkReal> x1675=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1673)))),-1);
if(!x1675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1674.value)+(((1.5707963267949)*(x1675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1676=IKsin(j4);
IkReal x1677=IKcos(j4);
IkReal x1678=((1.0)*cj0);
IkReal x1679=(cj5*r00);
IkReal x1680=(r11*sj5);
IkReal x1681=(r01*sj5);
IkReal x1682=(cj5*r20);
IkReal x1683=(r21*sj5);
IkReal x1684=(cj5*r10);
IkReal x1685=((1.0)*x1677);
IkReal x1686=((1.0)*x1676);
evalcond[0]=((((-1.0)*x1683*x1686))+((x1676*x1682))+(((-1.0)*r22*x1685)));
evalcond[1]=(((x1677*x1683))+(((-1.0)*x1682*x1685))+(((-1.0)*r22*x1686)));
evalcond[2]=(((x1676*x1679))+sj0+(((-1.0)*x1681*x1686))+(((-1.0)*r02*x1685)));
evalcond[3]=((((-1.0)*r12*x1685))+((x1676*x1684))+(((-1.0)*x1680*x1686))+(((-1.0)*x1678)));
evalcond[4]=(((x1677*x1681))+(((-1.0)*x1679*x1685))+(((-1.0)*r02*x1686))+(((-1.0)*x1678)));
evalcond[5]=((((-1.0)*r12*x1686))+(((-1.0)*sj0))+((x1677*x1680))+(((-1.0)*x1684*x1685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.23812083932892)*py))+(((0.219794120902579)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.23812083932892)*px))+(((-0.219794120902579)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.23812083932892)*py))+(((0.219794120902579)*px))))+IKsqr(((((1.23812083932892)*px))+(((-0.219794120902579)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.23812083932892)*py))+(((0.219794120902579)*px))), ((((1.23812083932892)*px))+(((-0.219794120902579)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1687=IKsin(j0);
IkReal x1688=IKcos(j0);
evalcond[0]=((((0.783)*x1688))+(((-1.0)*px))+(((0.139)*x1687)));
evalcond[1]=((((-0.139)*x1688))+(((0.783)*x1687))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1689=((1.0)*sj5);
IkReal x1690=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1689)));
j4eval[0]=x1690;
j4eval[1]=IKsign(x1690);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1689))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1691=cj5*cj5;
IkReal x1692=((1.0)*r21);
IkReal x1693=(cj5*sj5);
IkReal x1694=(((r01*r21))+(((-1.0)*r01*x1691*x1692))+(((-1.0)*r00*x1692*x1693))+((r00*r20*x1691))+((r02*r22))+(((-1.0)*r01*r20*x1693)));
j4eval[0]=x1694;
j4eval[1]=IKsign(x1694);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1692))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1695=cj5*cj5;
IkReal x1696=(cj5*r20);
IkReal x1697=((1.0)*sj5);
IkReal x1698=(r11*r21);
IkReal x1699=((((-1.0)*r11*x1696*x1697))+x1698+(((-1.0)*x1695*x1698))+((r12*r22))+((r10*r20*x1695))+(((-1.0)*cj5*r10*r21*x1697)));
j4eval[0]=x1699;
j4eval[1]=IKsign(x1699);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1697))+((sj0*x1696))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1700=cj5*cj5;
IkReal x1701=(cj5*r20);
IkReal x1702=((1.0)*sj5);
IkReal x1703=(r11*r21);
CheckValue<IkReal> x1704 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1702))+((sj0*x1701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1704.valid){
continue;
}
CheckValue<IkReal> x1705=IKPowWithIntegerCheck(IKsign((x1703+((r12*r22))+((r10*r20*x1700))+(((-1.0)*r11*x1701*x1702))+(((-1.0)*cj5*r10*r21*x1702))+(((-1.0)*x1700*x1703)))),-1);
if(!x1705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1704.value)+(((1.5707963267949)*(x1705.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1706=IKsin(j4);
IkReal x1707=IKcos(j4);
IkReal x1708=(cj5*r00);
IkReal x1709=(r11*sj5);
IkReal x1710=(r01*sj5);
IkReal x1711=(cj5*r20);
IkReal x1712=(r21*sj5);
IkReal x1713=(cj5*r10);
IkReal x1714=((1.0)*x1707);
IkReal x1715=((1.0)*x1706);
evalcond[0]=((((-1.0)*x1712*x1715))+(((-1.0)*r22*x1714))+((x1706*x1711)));
evalcond[1]=((((-1.0)*x1711*x1714))+(((-1.0)*r22*x1715))+((x1707*x1712)));
evalcond[2]=((((-1.0)*x1710*x1715))+sj0+((x1706*x1708))+(((-1.0)*r02*x1714)));
evalcond[3]=(cj0+(((-1.0)*x1708*x1714))+(((-1.0)*r02*x1715))+((x1707*x1710)));
evalcond[4]=(sj0+(((-1.0)*x1713*x1714))+(((-1.0)*r12*x1715))+((x1707*x1709)));
evalcond[5]=((((-1.0)*x1709*x1715))+((x1706*x1713))+(((-1.0)*r12*x1714))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1716=cj5*cj5;
IkReal x1717=((1.0)*r21);
IkReal x1718=(cj5*sj5);
CheckValue<IkReal> x1719=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1717*x1718))+((r00*r20*x1716))+((r01*r21))+(((-1.0)*r01*x1716*x1717))+(((-1.0)*r01*r20*x1718))+((r02*r22)))),-1);
if(!x1719.valid){
continue;
}
CheckValue<IkReal> x1720 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1717))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1719.value)))+(x1720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1721=IKsin(j4);
IkReal x1722=IKcos(j4);
IkReal x1723=(cj5*r00);
IkReal x1724=(r11*sj5);
IkReal x1725=(r01*sj5);
IkReal x1726=(cj5*r20);
IkReal x1727=(r21*sj5);
IkReal x1728=(cj5*r10);
IkReal x1729=((1.0)*x1722);
IkReal x1730=((1.0)*x1721);
evalcond[0]=((((-1.0)*r22*x1729))+((x1721*x1726))+(((-1.0)*x1727*x1730)));
evalcond[1]=(((x1722*x1727))+(((-1.0)*x1726*x1729))+(((-1.0)*r22*x1730)));
evalcond[2]=(sj0+((x1721*x1723))+(((-1.0)*x1725*x1730))+(((-1.0)*r02*x1729)));
evalcond[3]=(((x1722*x1725))+cj0+(((-1.0)*x1723*x1729))+(((-1.0)*r02*x1730)));
evalcond[4]=(((x1722*x1724))+sj0+(((-1.0)*x1728*x1729))+(((-1.0)*r12*x1730)));
evalcond[5]=((((-1.0)*r12*x1729))+((x1721*x1728))+(((-1.0)*x1724*x1730))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1731=((1.0)*sj5);
CheckValue<IkReal> x1732=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1731)))),-1);
if(!x1732.valid){
continue;
}
CheckValue<IkReal> x1733 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1732.value)))+(x1733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1734=IKsin(j4);
IkReal x1735=IKcos(j4);
IkReal x1736=(cj5*r00);
IkReal x1737=(r11*sj5);
IkReal x1738=(r01*sj5);
IkReal x1739=(cj5*r20);
IkReal x1740=(r21*sj5);
IkReal x1741=(cj5*r10);
IkReal x1742=((1.0)*x1735);
IkReal x1743=((1.0)*x1734);
evalcond[0]=((((-1.0)*x1740*x1743))+(((-1.0)*r22*x1742))+((x1734*x1739)));
evalcond[1]=((((-1.0)*r22*x1743))+(((-1.0)*x1739*x1742))+((x1735*x1740)));
evalcond[2]=(sj0+(((-1.0)*x1738*x1743))+((x1734*x1736))+(((-1.0)*r02*x1742)));
evalcond[3]=(cj0+(((-1.0)*x1736*x1742))+((x1735*x1738))+(((-1.0)*r02*x1743)));
evalcond[4]=((((-1.0)*r12*x1743))+(((-1.0)*x1741*x1742))+sj0+((x1735*x1737)));
evalcond[5]=((((-1.0)*r12*x1742))+((x1734*x1741))+(((-1.0)*x1737*x1743))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.04950495049505)*py))+(((5.5049504950495)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.04950495049505)*px))+(((-5.5049504950495)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.04950495049505)*py))+(((5.5049504950495)*px))))+IKsqr(((((3.04950495049505)*px))+(((-5.5049504950495)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.04950495049505)*py))+(((5.5049504950495)*px))), ((((3.04950495049505)*px))+(((-5.5049504950495)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1744=IKsin(j0);
IkReal x1745=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.077)*x1745))+(((0.139)*x1744)));
evalcond[1]=((((-0.139)*x1745))+(((-1.0)*py))+(((0.077)*x1744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1746=((1.0)*sj5);
IkReal x1747=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1746)));
j4eval[0]=x1747;
j4eval[1]=IKsign(x1747);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1746)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1748=((1.0)*sj5);
IkReal x1749=((((-1.0)*r00*x1748))+(((-1.0)*cj5*r01)));
j4eval[0]=x1749;
j4eval[1]=IKsign(x1749);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1748))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1750=cj5*cj5;
IkReal x1751=((1.0)*r21);
IkReal x1752=(cj5*sj5);
IkReal x1753=((1.0)*r20);
IkReal x1754=((((-1.0)*r00*x1751*x1752))+((r01*r21))+((r00*r20*x1750))+((r02*r22))+(((-1.0)*r01*x1750*x1751))+(((-1.0)*r01*x1752*x1753)));
j4eval[0]=x1754;
j4eval[1]=IKsign(x1754);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1753))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1755=cj5*cj5;
IkReal x1756=((1.0)*r21);
IkReal x1757=(cj5*sj5);
IkReal x1758=((1.0)*r20);
CheckValue<IkReal> x1759=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1755*x1756))+(((-1.0)*r00*x1756*x1757))+(((-1.0)*r01*x1757*x1758))+((r01*r21))+((r00*r20*x1755))+((r02*r22)))),-1);
if(!x1759.valid){
continue;
}
CheckValue<IkReal> x1760 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1758)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1759.value)))+(x1760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1761=IKsin(j4);
IkReal x1762=IKcos(j4);
IkReal x1763=((1.0)*cj0);
IkReal x1764=(cj5*r00);
IkReal x1765=(r11*sj5);
IkReal x1766=(r01*sj5);
IkReal x1767=(cj5*r20);
IkReal x1768=(r21*sj5);
IkReal x1769=(cj5*r10);
IkReal x1770=((1.0)*x1762);
IkReal x1771=((1.0)*x1761);
evalcond[0]=((((-1.0)*r22*x1770))+(((-1.0)*x1768*x1771))+((x1761*x1767)));
evalcond[1]=((((-1.0)*x1767*x1770))+((x1762*x1768))+(((-1.0)*r22*x1771)));
evalcond[2]=(sj0+(((-1.0)*r02*x1770))+(((-1.0)*x1766*x1771))+((x1761*x1764)));
evalcond[3]=((((-1.0)*x1763))+(((-1.0)*x1765*x1771))+((x1761*x1769))+(((-1.0)*r12*x1770)));
evalcond[4]=((((-1.0)*x1763))+(((-1.0)*r02*x1771))+(((-1.0)*x1764*x1770))+((x1762*x1766)));
evalcond[5]=((((-1.0)*sj0))+((x1762*x1765))+(((-1.0)*r12*x1771))+(((-1.0)*x1769*x1770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1772=((1.0)*sj5);
CheckValue<IkReal> x1773=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1772))+(((-1.0)*cj5*r01)))),-1);
if(!x1773.valid){
continue;
}
CheckValue<IkReal> x1774 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1772))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1773.value)))+(x1774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1775=IKsin(j4);
IkReal x1776=IKcos(j4);
IkReal x1777=((1.0)*cj0);
IkReal x1778=(cj5*r00);
IkReal x1779=(r11*sj5);
IkReal x1780=(r01*sj5);
IkReal x1781=(cj5*r20);
IkReal x1782=(r21*sj5);
IkReal x1783=(cj5*r10);
IkReal x1784=((1.0)*x1776);
IkReal x1785=((1.0)*x1775);
evalcond[0]=(((x1775*x1781))+(((-1.0)*r22*x1784))+(((-1.0)*x1782*x1785)));
evalcond[1]=((((-1.0)*r22*x1785))+((x1776*x1782))+(((-1.0)*x1781*x1784)));
evalcond[2]=(sj0+((x1775*x1778))+(((-1.0)*x1780*x1785))+(((-1.0)*r02*x1784)));
evalcond[3]=(((x1775*x1783))+(((-1.0)*r12*x1784))+(((-1.0)*x1777))+(((-1.0)*x1779*x1785)));
evalcond[4]=((((-1.0)*x1777))+((x1776*x1780))+(((-1.0)*x1778*x1784))+(((-1.0)*r02*x1785)));
evalcond[5]=((((-1.0)*x1783*x1784))+(((-1.0)*sj0))+((x1776*x1779))+(((-1.0)*r12*x1785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1786=((1.0)*sj5);
CheckValue<IkReal> x1787=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1786)))),-1);
if(!x1787.valid){
continue;
}
CheckValue<IkReal> x1788 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1787.value)))+(x1788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1789=IKsin(j4);
IkReal x1790=IKcos(j4);
IkReal x1791=((1.0)*cj0);
IkReal x1792=(cj5*r00);
IkReal x1793=(r11*sj5);
IkReal x1794=(r01*sj5);
IkReal x1795=(cj5*r20);
IkReal x1796=(r21*sj5);
IkReal x1797=(cj5*r10);
IkReal x1798=((1.0)*x1790);
IkReal x1799=((1.0)*x1789);
evalcond[0]=((((-1.0)*x1796*x1799))+(((-1.0)*r22*x1798))+((x1789*x1795)));
evalcond[1]=((((-1.0)*x1795*x1798))+(((-1.0)*r22*x1799))+((x1790*x1796)));
evalcond[2]=(sj0+((x1789*x1792))+(((-1.0)*r02*x1798))+(((-1.0)*x1794*x1799)));
evalcond[3]=((((-1.0)*x1791))+(((-1.0)*r12*x1798))+(((-1.0)*x1793*x1799))+((x1789*x1797)));
evalcond[4]=((((-1.0)*x1792*x1798))+(((-1.0)*x1791))+((x1790*x1794))+(((-1.0)*r02*x1799)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1799))+((x1790*x1793))+(((-1.0)*x1797*x1798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1800=((1.0)*sj5);
IkReal x1801=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x1800))+(((-1.0)*r11*x1801)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1800))+(((-1.0)*r01*x1801)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1800))+(((-1.0)*r11*x1801))))+IKsqr(((((-1.0)*r00*x1800))+(((-1.0)*r01*x1801))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x1800))+(((-1.0)*r11*x1801))), ((((-1.0)*r00*x1800))+(((-1.0)*r01*x1801))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1802=IKsin(j0);
IkReal x1803=IKcos(j0);
IkReal x1804=((1.0)*cj5);
IkReal x1805=((0.117)*cj5);
IkReal x1806=((1.0)*sj5);
IkReal x1807=((0.117)*sj5);
evalcond[0]=((((-1.0)*r00*x1806))+(((-1.0)*r01*x1804))+(((-1.0)*x1803)));
evalcond[1]=((((-1.0)*r10*x1806))+(((-1.0)*r11*x1804))+(((-1.0)*x1802)));
evalcond[2]=((((0.139)*x1802))+(((-1.0)*px))+((r00*x1807))+((r01*x1805)));
evalcond[3]=((((-0.139)*x1803))+(((-1.0)*py))+((r11*x1805))+((r10*x1807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1808=((1.0)*cj5);
IkReal x1809=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1808)));
j4eval[0]=x1809;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x1808))+((r01*sj5))))));
j4eval[2]=IKsign(x1809);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1810=((1.0)*sj5);
IkReal x1811=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1810)));
j4eval[0]=x1811;
j4eval[1]=IKsign(x1811);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1810))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1812=cj5*cj5;
IkReal x1813=r21*r21;
IkReal x1814=(cj5*r20);
IkReal x1815=(r21*sj5);
IkReal x1816=(((x1812*(r20*r20)))+(r22*r22)+(((-2.0)*x1814*x1815))+(((-1.0)*x1812*x1813))+x1813);
j4eval[0]=x1816;
j4eval[1]=IKsign(x1816);
j4eval[2]=((IKabs(r22))+(IKabs((x1814+(((-1.0)*x1815))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1817=cj5*cj5;
IkReal x1818=r21*r21;
IkReal x1819=(cj5*r20);
IkReal x1820=(r21*sj5);
CheckValue<IkReal> x1821 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x1820))+x1819)),IKFAST_ATAN2_MAGTHRESH);
if(!x1821.valid){
continue;
}
CheckValue<IkReal> x1822=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x1817*(r20*r20)))+(((-2.0)*x1819*x1820))+x1818+(((-1.0)*x1817*x1818)))),-1);
if(!x1822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1821.value)+(((1.5707963267949)*(x1822.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1823=IKsin(j4);
IkReal x1824=IKcos(j4);
IkReal x1825=(cj5*r00);
IkReal x1826=(r11*sj5);
IkReal x1827=(r01*sj5);
IkReal x1828=(cj5*r20);
IkReal x1829=(cj5*r10);
IkReal x1830=(r21*sj5);
IkReal x1831=((1.0)*x1824);
IkReal x1832=((1.0)*x1823);
evalcond[0]=(((x1823*x1828))+(((-1.0)*r22*x1831))+(((-1.0)*x1830*x1832)));
evalcond[1]=((((-1.0)*x1825*x1831))+((x1824*x1827))+(((-1.0)*r02*x1832)));
evalcond[2]=(((x1824*x1826))+(((-1.0)*r12*x1832))+(((-1.0)*x1829*x1831)));
evalcond[3]=(sj0+((x1823*x1825))+(((-1.0)*x1827*x1832))+(((-1.0)*r02*x1831)));
evalcond[4]=((1.0)+((x1824*x1830))+(((-1.0)*x1828*x1831))+(((-1.0)*r22*x1832)));
evalcond[5]=(((x1823*x1829))+(((-1.0)*x1826*x1832))+(((-1.0)*r12*x1831))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1833=((1.0)*sj5);
CheckValue<IkReal> x1834=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1833)))),-1);
if(!x1834.valid){
continue;
}
CheckValue<IkReal> x1835 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1834.value)))+(x1835.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1836=IKsin(j4);
IkReal x1837=IKcos(j4);
IkReal x1838=(cj5*r00);
IkReal x1839=(r11*sj5);
IkReal x1840=(r01*sj5);
IkReal x1841=(cj5*r20);
IkReal x1842=(cj5*r10);
IkReal x1843=(r21*sj5);
IkReal x1844=((1.0)*x1837);
IkReal x1845=((1.0)*x1836);
evalcond[0]=((((-1.0)*x1843*x1845))+((x1836*x1841))+(((-1.0)*r22*x1844)));
evalcond[1]=(((x1837*x1840))+(((-1.0)*r02*x1845))+(((-1.0)*x1838*x1844)));
evalcond[2]=((((-1.0)*x1842*x1844))+(((-1.0)*r12*x1845))+((x1837*x1839)));
evalcond[3]=(sj0+(((-1.0)*r02*x1844))+(((-1.0)*x1840*x1845))+((x1836*x1838)));
evalcond[4]=((1.0)+((x1837*x1843))+(((-1.0)*x1841*x1844))+(((-1.0)*r22*x1845)));
evalcond[5]=(((x1836*x1842))+(((-1.0)*x1839*x1845))+(((-1.0)*r12*x1844))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1846=((1.0)*cj5);
CheckValue<IkReal> x1847 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x1846)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1847.valid){
continue;
}
CheckValue<IkReal> x1848=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1846)))),-1);
if(!x1848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1847.value)+(((1.5707963267949)*(x1848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1849=IKsin(j4);
IkReal x1850=IKcos(j4);
IkReal x1851=(cj5*r00);
IkReal x1852=(r11*sj5);
IkReal x1853=(r01*sj5);
IkReal x1854=(cj5*r20);
IkReal x1855=(cj5*r10);
IkReal x1856=(r21*sj5);
IkReal x1857=((1.0)*x1850);
IkReal x1858=((1.0)*x1849);
evalcond[0]=(((x1849*x1854))+(((-1.0)*r22*x1857))+(((-1.0)*x1856*x1858)));
evalcond[1]=(((x1850*x1853))+(((-1.0)*x1851*x1857))+(((-1.0)*r02*x1858)));
evalcond[2]=(((x1850*x1852))+(((-1.0)*r12*x1858))+(((-1.0)*x1855*x1857)));
evalcond[3]=(sj0+((x1849*x1851))+(((-1.0)*r02*x1857))+(((-1.0)*x1853*x1858)));
evalcond[4]=((1.0)+((x1850*x1856))+(((-1.0)*r22*x1858))+(((-1.0)*x1854*x1857)));
evalcond[5]=(((x1849*x1855))+(((-1.0)*x1852*x1858))+(((-1.0)*r12*x1857))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.45258111582019)*py))+(((0.965747238240812)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.965747238240812)*py))+(((-2.45258111582019)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.45258111582019)*py))+(((0.965747238240812)*px))))+IKsqr(((((-0.965747238240812)*py))+(((-2.45258111582019)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.45258111582019)*py))+(((0.965747238240812)*px))), ((((-0.965747238240812)*py))+(((-2.45258111582019)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1859=IKcos(j0);
IkReal x1860=IKsin(j0);
evalcond[0]=((((-0.353)*x1859))+(((0.139)*x1860))+(((-1.0)*px)));
evalcond[1]=((((-0.139)*x1859))+(((-1.0)*py))+(((-0.353)*x1860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1861=((1.0)*sj5);
IkReal x1862=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1861)));
j4eval[0]=x1862;
j4eval[1]=IKsign(x1862);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1861))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1863=((1.0)*sj5);
IkReal x1864=((((-1.0)*r00*x1863))+(((-1.0)*cj5*r01)));
j4eval[0]=x1864;
j4eval[1]=IKsign(x1864);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1863)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1865=cj5*cj5;
IkReal x1866=((1.0)*r21);
IkReal x1867=(cj5*sj5);
IkReal x1868=((1.0)*r20);
IkReal x1869=((((-1.0)*r01*x1865*x1866))+(((-1.0)*r00*x1866*x1867))+((r01*r21))+((r00*r20*x1865))+((r02*r22))+(((-1.0)*r01*x1867*x1868)));
j4eval[0]=x1869;
j4eval[1]=IKsign(x1869);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*sj0*x1868))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1870=cj5*cj5;
IkReal x1871=((1.0)*r21);
IkReal x1872=(cj5*sj5);
IkReal x1873=((1.0)*r20);
CheckValue<IkReal> x1874=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1871*x1872))+(((-1.0)*r01*x1870*x1871))+((r00*r20*x1870))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x1872*x1873)))),-1);
if(!x1874.valid){
continue;
}
CheckValue<IkReal> x1875 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1873)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1874.value)))+(x1875.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1876=IKsin(j4);
IkReal x1877=IKcos(j4);
IkReal x1878=((1.0)*cj0);
IkReal x1879=(cj5*r00);
IkReal x1880=(r11*sj5);
IkReal x1881=(r01*sj5);
IkReal x1882=(cj5*r20);
IkReal x1883=(r21*sj5);
IkReal x1884=(cj5*r10);
IkReal x1885=((1.0)*x1877);
IkReal x1886=((1.0)*x1876);
evalcond[0]=((((-1.0)*x1883*x1886))+((x1876*x1882))+(((-1.0)*r22*x1885)));
evalcond[1]=(((x1877*x1883))+(((-1.0)*x1882*x1885))+(((-1.0)*r22*x1886)));
evalcond[2]=(sj0+((x1876*x1879))+(((-1.0)*r02*x1885))+(((-1.0)*x1881*x1886)));
evalcond[3]=((((-1.0)*x1880*x1886))+(((-1.0)*x1878))+((x1876*x1884))+(((-1.0)*r12*x1885)));
evalcond[4]=(((x1877*x1881))+(((-1.0)*x1879*x1885))+(((-1.0)*x1878))+(((-1.0)*r02*x1886)));
evalcond[5]=(((x1877*x1880))+(((-1.0)*sj0))+(((-1.0)*r12*x1886))+(((-1.0)*x1884*x1885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1887=((1.0)*sj5);
CheckValue<IkReal> x1888=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1887))+(((-1.0)*cj5*r01)))),-1);
if(!x1888.valid){
continue;
}
CheckValue<IkReal> x1889 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1888.value)))+(x1889.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1890=IKsin(j4);
IkReal x1891=IKcos(j4);
IkReal x1892=((1.0)*cj0);
IkReal x1893=(cj5*r00);
IkReal x1894=(r11*sj5);
IkReal x1895=(r01*sj5);
IkReal x1896=(cj5*r20);
IkReal x1897=(r21*sj5);
IkReal x1898=(cj5*r10);
IkReal x1899=((1.0)*x1891);
IkReal x1900=((1.0)*x1890);
evalcond[0]=((((-1.0)*r22*x1899))+(((-1.0)*x1897*x1900))+((x1890*x1896)));
evalcond[1]=((((-1.0)*r22*x1900))+((x1891*x1897))+(((-1.0)*x1896*x1899)));
evalcond[2]=((((-1.0)*r02*x1899))+sj0+(((-1.0)*x1895*x1900))+((x1890*x1893)));
evalcond[3]=((((-1.0)*x1894*x1900))+(((-1.0)*r12*x1899))+(((-1.0)*x1892))+((x1890*x1898)));
evalcond[4]=((((-1.0)*x1893*x1899))+((x1891*x1895))+(((-1.0)*x1892))+(((-1.0)*r02*x1900)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1898*x1899))+((x1891*x1894))+(((-1.0)*r12*x1900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1901=((1.0)*sj5);
CheckValue<IkReal> x1902=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1901)))),-1);
if(!x1902.valid){
continue;
}
CheckValue<IkReal> x1903 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1902.value)))+(x1903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1904=IKsin(j4);
IkReal x1905=IKcos(j4);
IkReal x1906=((1.0)*cj0);
IkReal x1907=(cj5*r00);
IkReal x1908=(r11*sj5);
IkReal x1909=(r01*sj5);
IkReal x1910=(cj5*r20);
IkReal x1911=(r21*sj5);
IkReal x1912=(cj5*r10);
IkReal x1913=((1.0)*x1905);
IkReal x1914=((1.0)*x1904);
evalcond[0]=(((x1904*x1910))+(((-1.0)*x1911*x1914))+(((-1.0)*r22*x1913)));
evalcond[1]=(((x1905*x1911))+(((-1.0)*x1910*x1913))+(((-1.0)*r22*x1914)));
evalcond[2]=(sj0+(((-1.0)*r02*x1913))+((x1904*x1907))+(((-1.0)*x1909*x1914)));
evalcond[3]=(((x1904*x1912))+(((-1.0)*r12*x1913))+(((-1.0)*x1906))+(((-1.0)*x1908*x1914)));
evalcond[4]=(((x1905*x1909))+(((-1.0)*r02*x1914))+(((-1.0)*x1907*x1913))+(((-1.0)*x1906)));
evalcond[5]=((((-1.0)*sj0))+((x1905*x1908))+(((-1.0)*r12*x1914))+(((-1.0)*x1912*x1913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1915=IKsin(j0);
IkReal x1916=IKcos(j0);
IkReal x1917=((1.0)*cj5);
IkReal x1918=((0.117)*cj5);
IkReal x1919=((1.0)*sj5);
IkReal x1920=((0.117)*sj5);
evalcond[0]=((((-1.0)*r00*x1919))+(((-1.0)*r01*x1917))+x1916);
evalcond[1]=((((-1.0)*r11*x1917))+x1915+(((-1.0)*r10*x1919)));
evalcond[2]=(((r00*x1920))+(((0.139)*x1915))+((r01*x1918))+(((-1.0)*px)));
evalcond[3]=((((-0.139)*x1916))+((r11*x1918))+(((-1.0)*py))+((r10*x1920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1921=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1921;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x1921);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1922=((1.0)*sj5);
IkReal x1923=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1922)));
j4eval[0]=x1923;
j4eval[1]=IKsign(x1923);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1922))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1924=r21*r21;
IkReal x1925=cj5*cj5;
IkReal x1926=(cj5*r20);
IkReal x1927=(r21*sj5);
IkReal x1928=((((-1.0)*x1924))+(((2.0)*x1926*x1927))+(((-1.0)*x1925*(r20*r20)))+(((-1.0)*(r22*r22)))+((x1924*x1925)));
j4eval[0]=x1928;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*x1927))+x1926))));
j4eval[2]=IKsign(x1928);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1929=r21*r21;
IkReal x1930=cj5*cj5;
IkReal x1931=(cj5*r20);
IkReal x1932=(r21*sj5);
CheckValue<IkReal> x1933=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1930*(r20*r20)))+(((-1.0)*x1929))+(((-1.0)*(r22*r22)))+((x1929*x1930))+(((2.0)*x1931*x1932)))),-1);
if(!x1933.valid){
continue;
}
CheckValue<IkReal> x1934 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x1932))+x1931)),IKFAST_ATAN2_MAGTHRESH);
if(!x1934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1933.value)))+(x1934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1935=IKsin(j4);
IkReal x1936=IKcos(j4);
IkReal x1937=(cj5*r00);
IkReal x1938=(r11*sj5);
IkReal x1939=(r01*sj5);
IkReal x1940=(cj5*r20);
IkReal x1941=(cj5*r10);
IkReal x1942=(r21*sj5);
IkReal x1943=((1.0)*x1936);
IkReal x1944=((1.0)*x1935);
evalcond[0]=((((-1.0)*r22*x1943))+(((-1.0)*x1942*x1944))+((x1935*x1940)));
evalcond[1]=((((-1.0)*x1937*x1943))+(((-1.0)*r02*x1944))+((x1936*x1939)));
evalcond[2]=(((x1936*x1938))+(((-1.0)*r12*x1944))+(((-1.0)*x1941*x1943)));
evalcond[3]=(sj0+(((-1.0)*r02*x1943))+((x1935*x1937))+(((-1.0)*x1939*x1944)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x1944))+(((-1.0)*x1940*x1943))+((x1936*x1942)));
evalcond[5]=(((x1935*x1941))+(((-1.0)*x1938*x1944))+(((-1.0)*r12*x1943))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1945=((1.0)*sj5);
CheckValue<IkReal> x1946=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1945)))),-1);
if(!x1946.valid){
continue;
}
CheckValue<IkReal> x1947 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1946.value)))+(x1947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1948=IKsin(j4);
IkReal x1949=IKcos(j4);
IkReal x1950=(cj5*r00);
IkReal x1951=(r11*sj5);
IkReal x1952=(r01*sj5);
IkReal x1953=(cj5*r20);
IkReal x1954=(cj5*r10);
IkReal x1955=(r21*sj5);
IkReal x1956=((1.0)*x1949);
IkReal x1957=((1.0)*x1948);
evalcond[0]=((((-1.0)*r22*x1956))+((x1948*x1953))+(((-1.0)*x1955*x1957)));
evalcond[1]=((((-1.0)*x1950*x1956))+(((-1.0)*r02*x1957))+((x1949*x1952)));
evalcond[2]=((((-1.0)*x1954*x1956))+(((-1.0)*r12*x1957))+((x1949*x1951)));
evalcond[3]=(sj0+(((-1.0)*x1952*x1957))+(((-1.0)*r02*x1956))+((x1948*x1950)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x1957))+(((-1.0)*x1953*x1956))+((x1949*x1955)));
evalcond[5]=((((-1.0)*x1951*x1957))+((x1948*x1954))+(((-1.0)*r12*x1956))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1958=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1958.valid){
continue;
}
CheckValue<IkReal> x1959 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1958.value)))+(x1959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1960=IKsin(j4);
IkReal x1961=IKcos(j4);
IkReal x1962=(cj5*r00);
IkReal x1963=(r11*sj5);
IkReal x1964=(r01*sj5);
IkReal x1965=(cj5*r20);
IkReal x1966=(cj5*r10);
IkReal x1967=(r21*sj5);
IkReal x1968=((1.0)*x1961);
IkReal x1969=((1.0)*x1960);
evalcond[0]=((((-1.0)*r22*x1968))+((x1960*x1965))+(((-1.0)*x1967*x1969)));
evalcond[1]=((((-1.0)*r02*x1969))+((x1961*x1964))+(((-1.0)*x1962*x1968)));
evalcond[2]=((((-1.0)*x1966*x1968))+((x1961*x1963))+(((-1.0)*r12*x1969)));
evalcond[3]=(sj0+(((-1.0)*x1964*x1969))+(((-1.0)*r02*x1968))+((x1960*x1962)));
evalcond[4]=((-1.0)+(((-1.0)*x1965*x1968))+(((-1.0)*r22*x1969))+((x1961*x1967)));
evalcond[5]=(((x1960*x1966))+(((-1.0)*r12*x1968))+(((-1.0)*x1963*x1969))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.965747238240812)*px))+(((2.45258111582019)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.965747238240812)*py))+(((2.45258111582019)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.965747238240812)*px))+(((2.45258111582019)*py))))+IKsqr(((((-0.965747238240812)*py))+(((2.45258111582019)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.965747238240812)*px))+(((2.45258111582019)*py))), ((((-0.965747238240812)*py))+(((2.45258111582019)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1970=IKsin(j0);
IkReal x1971=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.139)*x1970))+(((0.353)*x1971)));
evalcond[1]=((((-1.0)*py))+(((-0.139)*x1971))+(((0.353)*x1970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1972=((1.0)*sj5);
IkReal x1973=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1972)));
j4eval[0]=x1973;
j4eval[1]=IKsign(x1973);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1972))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1974=cj5*cj5;
IkReal x1975=((1.0)*r21);
IkReal x1976=(cj5*sj5);
IkReal x1977=(((r01*r21))+(((-1.0)*r01*x1974*x1975))+(((-1.0)*r01*r20*x1976))+((r02*r22))+(((-1.0)*r00*x1975*x1976))+((r00*r20*x1974)));
j4eval[0]=x1977;
j4eval[1]=IKsign(x1977);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1975)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1978=cj5*cj5;
IkReal x1979=(cj5*r20);
IkReal x1980=((1.0)*sj5);
IkReal x1981=(r11*r21);
IkReal x1982=(((r10*r20*x1978))+(((-1.0)*r11*x1979*x1980))+(((-1.0)*x1978*x1981))+((r12*r22))+x1981+(((-1.0)*cj5*r10*r21*x1980)));
j4eval[0]=x1982;
j4eval[1]=IKsign(x1982);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1980))+((sj0*x1979))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1983=cj5*cj5;
IkReal x1984=(cj5*r20);
IkReal x1985=((1.0)*sj5);
IkReal x1986=(r11*r21);
CheckValue<IkReal> x1987=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*x1983*x1986))+x1986+((r10*r20*x1983))+(((-1.0)*r11*x1984*x1985))+(((-1.0)*cj5*r10*r21*x1985)))),-1);
if(!x1987.valid){
continue;
}
CheckValue<IkReal> x1988 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1985))+((sj0*x1984)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1987.value)))+(x1988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1989=IKsin(j4);
IkReal x1990=IKcos(j4);
IkReal x1991=(cj5*r00);
IkReal x1992=(r11*sj5);
IkReal x1993=(r01*sj5);
IkReal x1994=(cj5*r20);
IkReal x1995=(r21*sj5);
IkReal x1996=(cj5*r10);
IkReal x1997=((1.0)*x1990);
IkReal x1998=((1.0)*x1989);
evalcond[0]=((((-1.0)*x1995*x1998))+((x1989*x1994))+(((-1.0)*r22*x1997)));
evalcond[1]=((((-1.0)*x1994*x1997))+((x1990*x1995))+(((-1.0)*r22*x1998)));
evalcond[2]=((((-1.0)*x1993*x1998))+sj0+(((-1.0)*r02*x1997))+((x1989*x1991)));
evalcond[3]=(cj0+(((-1.0)*r02*x1998))+(((-1.0)*x1991*x1997))+((x1990*x1993)));
evalcond[4]=((((-1.0)*x1996*x1997))+sj0+((x1990*x1992))+(((-1.0)*r12*x1998)));
evalcond[5]=((((-1.0)*x1992*x1998))+((x1989*x1996))+(((-1.0)*r12*x1997))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1999=cj5*cj5;
IkReal x2000=((1.0)*r21);
IkReal x2001=(cj5*sj5);
CheckValue<IkReal> x2002 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x2000))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2002.valid){
continue;
}
CheckValue<IkReal> x2003=IKPowWithIntegerCheck(IKsign((((r00*r20*x1999))+(((-1.0)*r01*x1999*x2000))+(((-1.0)*r01*r20*x2001))+((r01*r21))+(((-1.0)*r00*x2000*x2001))+((r02*r22)))),-1);
if(!x2003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2002.value)+(((1.5707963267949)*(x2003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2004=IKsin(j4);
IkReal x2005=IKcos(j4);
IkReal x2006=(cj5*r00);
IkReal x2007=(r11*sj5);
IkReal x2008=(r01*sj5);
IkReal x2009=(cj5*r20);
IkReal x2010=(r21*sj5);
IkReal x2011=(cj5*r10);
IkReal x2012=((1.0)*x2005);
IkReal x2013=((1.0)*x2004);
evalcond[0]=((((-1.0)*x2010*x2013))+((x2004*x2009))+(((-1.0)*r22*x2012)));
evalcond[1]=((((-1.0)*x2009*x2012))+((x2005*x2010))+(((-1.0)*r22*x2013)));
evalcond[2]=((((-1.0)*x2008*x2013))+sj0+(((-1.0)*r02*x2012))+((x2004*x2006)));
evalcond[3]=(cj0+(((-1.0)*x2006*x2012))+((x2005*x2008))+(((-1.0)*r02*x2013)));
evalcond[4]=(sj0+(((-1.0)*x2011*x2012))+(((-1.0)*r12*x2013))+((x2005*x2007)));
evalcond[5]=((((-1.0)*x2007*x2013))+((x2004*x2011))+(((-1.0)*r12*x2012))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2014=((1.0)*sj5);
CheckValue<IkReal> x2015=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2014)))),-1);
if(!x2015.valid){
continue;
}
CheckValue<IkReal> x2016 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2014))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2015.value)))+(x2016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2017=IKsin(j4);
IkReal x2018=IKcos(j4);
IkReal x2019=(cj5*r00);
IkReal x2020=(r11*sj5);
IkReal x2021=(r01*sj5);
IkReal x2022=(cj5*r20);
IkReal x2023=(r21*sj5);
IkReal x2024=(cj5*r10);
IkReal x2025=((1.0)*x2018);
IkReal x2026=((1.0)*x2017);
evalcond[0]=((((-1.0)*x2023*x2026))+((x2017*x2022))+(((-1.0)*r22*x2025)));
evalcond[1]=((((-1.0)*x2022*x2025))+(((-1.0)*r22*x2026))+((x2018*x2023)));
evalcond[2]=((((-1.0)*x2021*x2026))+sj0+(((-1.0)*r02*x2025))+((x2017*x2019)));
evalcond[3]=(cj0+((x2018*x2021))+(((-1.0)*r02*x2026))+(((-1.0)*x2019*x2025)));
evalcond[4]=(sj0+((x2018*x2020))+(((-1.0)*r12*x2026))+(((-1.0)*x2024*x2025)));
evalcond[5]=(((x2017*x2024))+(((-1.0)*r12*x2025))+(((-1.0)*x2020*x2026))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2027=cj1*cj1;
IkReal x2028=(cj1*sj1);
IkReal x2029=(cj1*sj2);
IkReal x2030=(r00*sj5);
IkReal x2031=(cj5*r01);
IkReal x2032=((1000.0)*py);
IkReal x2033=(cj2*sj1);
IkReal x2034=((117.0)*cj5*r11);
IkReal x2035=(sj2*x2027);
IkReal x2036=((117.0)*r10*sj5);
CheckValue<IkReal> x2037=IKPowWithIntegerCheck(((((353.0)*x2028))+(((-706.0)*cj2*x2035))+(((-706.0)*x2028*(cj2*cj2)))+(((-430.0)*x2035))+(((-430.0)*cj2*x2028))+(((353.0)*cj2*sj2))),-1);
if(!x2037.valid){
continue;
}
CheckValue<IkReal> x2038=IKPowWithIntegerCheck((x2029+x2033),-1);
if(!x2038.valid){
continue;
}
if( IKabs(((x2037.value)*((((x2032*x2033))+(((139.0)*x2030))+(((139.0)*x2031))+(((-1.0)*x2029*x2036))+(((-1.0)*x2029*x2034))+((x2029*x2032))+(((-1.0)*x2033*x2036))+(((-1.0)*x2033*x2034)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2038.value)*((x2031+x2030)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2037.value)*((((x2032*x2033))+(((139.0)*x2030))+(((139.0)*x2031))+(((-1.0)*x2029*x2036))+(((-1.0)*x2029*x2034))+((x2029*x2032))+(((-1.0)*x2033*x2036))+(((-1.0)*x2033*x2034))))))+IKsqr(((x2038.value)*((x2031+x2030))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x2037.value)*((((x2032*x2033))+(((139.0)*x2030))+(((139.0)*x2031))+(((-1.0)*x2029*x2036))+(((-1.0)*x2029*x2034))+((x2029*x2032))+(((-1.0)*x2033*x2036))+(((-1.0)*x2033*x2034))))), ((x2038.value)*((x2031+x2030))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2039=IKcos(j0);
IkReal x2040=IKsin(j0);
IkReal x2041=((0.353)*cj2);
IkReal x2042=(r10*sj5);
IkReal x2043=(cj5*r11);
IkReal x2044=(cj2*sj1);
IkReal x2045=(r00*sj5);
IkReal x2046=(cj5*r01);
IkReal x2047=(cj1*x2039);
IkReal x2048=(cj1*x2040);
IkReal x2049=((0.353)*sj1*sj2);
evalcond[0]=(((x2039*x2044))+(((-1.0)*x2045))+(((-1.0)*x2046))+((sj2*x2047)));
evalcond[1]=(((x2040*x2044))+(((-1.0)*x2042))+(((-1.0)*x2043))+((sj2*x2048)));
evalcond[2]=((((0.117)*x2046))+(((0.117)*x2045))+((x2039*x2049))+(((-0.43)*x2047))+(((-1.0)*px))+(((-1.0)*x2041*x2047))+(((0.139)*x2040)));
evalcond[3]=(((x2040*x2049))+(((0.117)*x2043))+(((0.117)*x2042))+(((-0.43)*x2048))+(((-1.0)*py))+(((-1.0)*x2041*x2048))+(((-0.139)*x2039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2050=((1.0)*sj5);
IkReal x2051=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2050)));
j4eval[0]=x2051;
j4eval[1]=IKsign(x2051);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2050)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2052=((1.0)*sj5);
IkReal x2053=((((-1.0)*r00*x2052))+(((-1.0)*cj5*r01)));
j4eval[0]=x2053;
j4eval[1]=IKsign(x2053);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x2052))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2054=((1.0)*sj5);
IkReal x2055=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2055;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x2054))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x2054))))));
j4eval[2]=IKsign(x2055);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2057 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2057)==0){
continue;
}
IkReal x2056=pow(x2057,-0.5);
CheckValue<IkReal> x2058 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2058.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2058.value));
IkReal gconst79=((-1.0)*r21*x2056);
IkReal gconst80=(r20*x2056);
CheckValue<IkReal> x2059 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2059.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2059.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2062 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2062.valid){
continue;
}
IkReal x2060=((-1.0)*(x2062.value));
IkReal x2061=x2056;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2060;
IkReal gconst78=x2060;
IkReal gconst79=((-1.0)*r21*x2061);
IkReal gconst80=(r20*x2061);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2065 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2065.valid){
continue;
}
IkReal x2063=((-1.0)*(x2065.value));
IkReal x2064=x2056;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2063;
IkReal gconst78=x2063;
IkReal gconst79=((-1.0)*r21*x2064);
IkReal gconst80=(r20*x2064);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2068 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2068.valid){
continue;
}
IkReal x2066=((-1.0)*(x2068.value));
IkReal x2067=x2056;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2066;
IkReal gconst78=x2066;
IkReal gconst79=((-1.0)*r21*x2067);
IkReal gconst80=(r20*x2067);
IkReal x2069=r22*r22;
CheckValue<IkReal> x2072=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2069))),-1);
if(!x2072.valid){
continue;
}
IkReal x2070=x2072.value;
IkReal x2071=(x2069+(((2.0)*x2070*(r20*r20)*(r21*r21)))+((x2070*(r20*r20*r20*r20)))+((x2070*(r21*r21*r21*r21))));
j4eval[0]=x2071;
j4eval[1]=IKsign(x2071);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2073=(gconst80*r20);
IkReal x2074=(gconst79*r21);
IkReal x2075=(cj2*sj1);
IkReal x2076=((1.0)*cj1*sj2);
CheckValue<IkReal> x2077 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2075))+(((-1.0)*r22*x2076)))),IkReal((((cj1*sj2*x2074))+(((-1.0)*x2073*x2076))+((x2074*x2075))+(((-1.0)*x2073*x2075)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2077.valid){
continue;
}
CheckValue<IkReal> x2078=IKPowWithIntegerCheck(IKsign(((x2073*x2073)+(r22*r22)+(x2074*x2074)+(((-2.0)*x2073*x2074)))),-1);
if(!x2078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2077.value)+(((1.5707963267949)*(x2078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2079=IKsin(j4);
IkReal x2080=IKcos(j4);
IkReal x2081=((1.0)*cj2);
IkReal x2082=(gconst80*r20);
IkReal x2083=(sj1*sj2);
IkReal x2084=(gconst79*r21);
IkReal x2085=(gconst80*r10);
IkReal x2086=(gconst79*r01);
IkReal x2087=(gconst79*r11);
IkReal x2088=(gconst80*r00);
IkReal x2089=((1.0)*x2080);
IkReal x2090=((1.0)*x2079);
evalcond[0]=((((-1.0)*r22*x2089))+(((-1.0)*x2084*x2090))+((x2079*x2082)));
evalcond[1]=((((-1.0)*r02*x2089))+sj0+(((-1.0)*x2086*x2090))+((x2079*x2088)));
evalcond[2]=((((-1.0)*x2087*x2090))+(((-1.0)*r12*x2089))+((x2079*x2085))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2081))+(((-1.0)*cj1*sj2))+(((-1.0)*x2082*x2089))+(((-1.0)*r22*x2090))+((x2080*x2084)));
evalcond[4]=((((-1.0)*x2088*x2089))+(((-1.0)*cj0*cj1*x2081))+(((-1.0)*r02*x2090))+((cj0*x2083))+((x2080*x2086)));
evalcond[5]=(((sj0*x2083))+(((-1.0)*x2085*x2089))+(((-1.0)*cj1*sj0*x2081))+(((-1.0)*r12*x2090))+((x2080*x2087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2091=((1.0)*gconst79);
CheckValue<IkReal> x2092=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst80*r01))+(((-1.0)*r00*x2091)))),-1);
if(!x2092.valid){
continue;
}
CheckValue<IkReal> x2093 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst80*r20))+(((-1.0)*cj0*r21*x2091)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2092.value)))+(x2093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2094=IKsin(j4);
IkReal x2095=IKcos(j4);
IkReal x2096=((1.0)*cj2);
IkReal x2097=(gconst80*r20);
IkReal x2098=(sj1*sj2);
IkReal x2099=(gconst79*r21);
IkReal x2100=(gconst80*r10);
IkReal x2101=(gconst79*r01);
IkReal x2102=(gconst79*r11);
IkReal x2103=(gconst80*r00);
IkReal x2104=((1.0)*x2095);
IkReal x2105=((1.0)*x2094);
evalcond[0]=((((-1.0)*r22*x2104))+((x2094*x2097))+(((-1.0)*x2099*x2105)));
evalcond[1]=((((-1.0)*r02*x2104))+sj0+(((-1.0)*x2101*x2105))+((x2094*x2103)));
evalcond[2]=((((-1.0)*r12*x2104))+(((-1.0)*x2102*x2105))+(((-1.0)*cj0))+((x2094*x2100)));
evalcond[3]=((((-1.0)*r22*x2105))+(((-1.0)*x2097*x2104))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2096))+((x2095*x2099)));
evalcond[4]=((((-1.0)*r02*x2105))+(((-1.0)*x2103*x2104))+(((-1.0)*cj0*cj1*x2096))+((cj0*x2098))+((x2095*x2101)));
evalcond[5]=(((sj0*x2098))+(((-1.0)*x2100*x2104))+(((-1.0)*r12*x2105))+(((-1.0)*cj1*sj0*x2096))+((x2095*x2102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2106=((1.0)*gconst79);
CheckValue<IkReal> x2107=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2106))+(((-1.0)*gconst80*r11)))),-1);
if(!x2107.valid){
continue;
}
CheckValue<IkReal> x2108 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst80*r20*sj0))+(((-1.0)*r21*sj0*x2106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2107.value)))+(x2108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2109=IKsin(j4);
IkReal x2110=IKcos(j4);
IkReal x2111=((1.0)*cj2);
IkReal x2112=(gconst80*r20);
IkReal x2113=(sj1*sj2);
IkReal x2114=(gconst79*r21);
IkReal x2115=(gconst80*r10);
IkReal x2116=(gconst79*r01);
IkReal x2117=(gconst79*r11);
IkReal x2118=(gconst80*r00);
IkReal x2119=((1.0)*x2110);
IkReal x2120=((1.0)*x2109);
evalcond[0]=(((x2109*x2112))+(((-1.0)*x2114*x2120))+(((-1.0)*r22*x2119)));
evalcond[1]=(((x2109*x2118))+(((-1.0)*x2116*x2120))+sj0+(((-1.0)*r02*x2119)));
evalcond[2]=((((-1.0)*x2117*x2120))+((x2109*x2115))+(((-1.0)*r12*x2119))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2111))+(((-1.0)*x2112*x2119))+(((-1.0)*r22*x2120))+(((-1.0)*cj1*sj2))+((x2110*x2114)));
evalcond[4]=(((cj0*x2113))+(((-1.0)*x2118*x2119))+(((-1.0)*r02*x2120))+(((-1.0)*cj0*cj1*x2111))+((x2110*x2116)));
evalcond[5]=(((sj0*x2113))+((x2110*x2117))+(((-1.0)*cj1*sj0*x2111))+(((-1.0)*r12*x2120))+(((-1.0)*x2115*x2119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2122 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2122)==0){
continue;
}
IkReal x2121=pow(x2122,-0.5);
CheckValue<IkReal> x2123 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2123.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2123.value))));
IkReal gconst82=((1.0)*r21*x2121);
IkReal gconst83=((-1.0)*r20*x2121);
CheckValue<IkReal> x2124 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2124.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2124.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2127 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2127.valid){
continue;
}
IkReal x2125=((1.0)*(x2127.value));
IkReal x2126=x2121;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2125)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2125)));
IkReal gconst82=((1.0)*r21*x2126);
IkReal gconst83=((-1.0)*r20*x2126);
IkReal x2128=r22*r22;
IkReal x2129=((1.0)*x2128);
CheckValue<IkReal> x2133=IKPowWithIntegerCheck(((-1.0)+x2128),-1);
if(!x2133.valid){
continue;
}
IkReal x2130=x2133.value;
if((((1.0)+(((-1.0)*x2129)))) < -0.00001)
continue;
IkReal x2131=IKsqrt(((1.0)+(((-1.0)*x2129))));
IkReal x2132=(sj0*x2130*x2131);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2132+(((-1.0)*x2129*x2132))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2136 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2136.valid){
continue;
}
IkReal x2134=((1.0)*(x2136.value));
IkReal x2135=x2121;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2134)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2134)));
IkReal gconst82=((1.0)*r21*x2135);
IkReal gconst83=((-1.0)*r20*x2135);
IkReal x2137=r22*r22;
IkReal x2138=((1.0)*x2137);
CheckValue<IkReal> x2142=IKPowWithIntegerCheck(((-1.0)+x2137),-1);
if(!x2142.valid){
continue;
}
IkReal x2139=x2142.value;
if((((1.0)+(((-1.0)*x2138)))) < -0.00001)
continue;
IkReal x2140=IKsqrt(((1.0)+(((-1.0)*x2138))));
IkReal x2141=(cj0*x2139*x2140);
j4eval[0]=((IKabs(((((-1.0)*x2138*x2141))+x2141)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2145 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2145.valid){
continue;
}
IkReal x2143=((1.0)*(x2145.value));
IkReal x2144=x2121;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2143)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2143)));
IkReal gconst82=((1.0)*r21*x2144);
IkReal gconst83=((-1.0)*r20*x2144);
IkReal x2146=r22*r22;
IkReal x2147=(cj0*r02);
IkReal x2148=(r12*sj0);
CheckValue<IkReal> x2152=IKPowWithIntegerCheck(((-1.0)+x2146),-1);
if(!x2152.valid){
continue;
}
IkReal x2149=x2152.value;
if((((1.0)+(((-1.0)*x2146)))) < -0.00001)
continue;
IkReal x2150=IKsqrt(((1.0)+(((-1.0)*x2146))));
IkReal x2151=((1.0)*r22*x2149*x2150);
j4eval[0]=0;
j4eval[1]=((IKabs((x2147+x2148)))+(IKabs(((((-1.0)*x2148*x2151))+(((-1.0)*x2147*x2151))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2153=((1.0)*gconst82);
CheckValue<IkReal> x2154 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x2153))+(((-1.0)*cj0*r01*x2153))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2154.valid){
continue;
}
CheckValue<IkReal> x2155=IKPowWithIntegerCheck(IKsign((((gconst83*r21))+((gconst82*r20)))),-1);
if(!x2155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2154.value)+(((1.5707963267949)*(x2155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2156=IKsin(j4);
IkReal x2157=IKcos(j4);
IkReal x2158=(sj1*sj2);
IkReal x2159=((1.0)*cj2);
IkReal x2160=((1.0)*x2157);
IkReal x2161=(gconst83*x2156);
IkReal x2162=(gconst82*x2157);
IkReal x2163=((1.0)*x2156);
evalcond[0]=((((-1.0)*gconst82*r21*x2163))+((r20*x2161))+(((-1.0)*r22*x2160)));
evalcond[1]=((((-1.0)*gconst82*r01*x2163))+sj0+((r00*x2161))+(((-1.0)*r02*x2160)));
evalcond[2]=((((-1.0)*gconst82*r11*x2163))+((r10*x2161))+(((-1.0)*r12*x2160))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x2162))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2159))+(((-1.0)*gconst83*r20*x2160))+(((-1.0)*r22*x2163)));
evalcond[4]=(((r01*x2162))+(((-1.0)*cj0*cj1*x2159))+((cj0*x2158))+(((-1.0)*gconst83*r00*x2160))+(((-1.0)*r02*x2163)));
evalcond[5]=(((sj0*x2158))+(((-1.0)*gconst83*r10*x2160))+(((-1.0)*r12*x2163))+(((-1.0)*cj1*sj0*x2159))+((r11*x2162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2164=((1.0)*gconst82);
CheckValue<IkReal> x2165=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst83*r01))+(((-1.0)*r00*x2164)))),-1);
if(!x2165.valid){
continue;
}
CheckValue<IkReal> x2166 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst83*r20))+(((-1.0)*cj0*r21*x2164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2165.value)))+(x2166.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2167=IKsin(j4);
IkReal x2168=IKcos(j4);
IkReal x2169=(sj1*sj2);
IkReal x2170=((1.0)*cj2);
IkReal x2171=((1.0)*x2168);
IkReal x2172=(gconst83*x2167);
IkReal x2173=(gconst82*x2168);
IkReal x2174=((1.0)*x2167);
evalcond[0]=((((-1.0)*gconst82*r21*x2174))+((r20*x2172))+(((-1.0)*r22*x2171)));
evalcond[1]=(((r00*x2172))+sj0+(((-1.0)*gconst82*r01*x2174))+(((-1.0)*r02*x2171)));
evalcond[2]=((((-1.0)*gconst82*r11*x2174))+((r10*x2172))+(((-1.0)*r12*x2171))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x2173))+(((-1.0)*sj1*x2170))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst83*r20*x2171))+(((-1.0)*r22*x2174)));
evalcond[4]=(((r01*x2173))+(((-1.0)*cj0*cj1*x2170))+((cj0*x2169))+(((-1.0)*r02*x2174))+(((-1.0)*gconst83*r00*x2171)));
evalcond[5]=(((r11*x2173))+((sj0*x2169))+(((-1.0)*cj1*sj0*x2170))+(((-1.0)*gconst83*r10*x2171))+(((-1.0)*r12*x2174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2175=((1.0)*gconst82);
CheckValue<IkReal> x2176 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst83*r20*sj0))+(((-1.0)*r21*sj0*x2175)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2176.valid){
continue;
}
CheckValue<IkReal> x2177=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst83*r11))+(((-1.0)*r10*x2175)))),-1);
if(!x2177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2176.value)+(((1.5707963267949)*(x2177.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2178=IKsin(j4);
IkReal x2179=IKcos(j4);
IkReal x2180=(sj1*sj2);
IkReal x2181=((1.0)*cj2);
IkReal x2182=((1.0)*x2179);
IkReal x2183=(gconst83*x2178);
IkReal x2184=(gconst82*x2179);
IkReal x2185=((1.0)*x2178);
evalcond[0]=(((r20*x2183))+(((-1.0)*r22*x2182))+(((-1.0)*gconst82*r21*x2185)));
evalcond[1]=(sj0+(((-1.0)*r02*x2182))+(((-1.0)*gconst82*r01*x2185))+((r00*x2183)));
evalcond[2]=((((-1.0)*gconst82*r11*x2185))+(((-1.0)*r12*x2182))+(((-1.0)*cj0))+((r10*x2183)));
evalcond[3]=((((-1.0)*gconst83*r20*x2182))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2181))+((r21*x2184))+(((-1.0)*r22*x2185)));
evalcond[4]=((((-1.0)*cj0*cj1*x2181))+((cj0*x2180))+(((-1.0)*r02*x2185))+(((-1.0)*gconst83*r00*x2182))+((r01*x2184)));
evalcond[5]=((((-1.0)*gconst83*r10*x2182))+((sj0*x2180))+((r11*x2184))+(((-1.0)*cj1*sj0*x2181))+(((-1.0)*r12*x2185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2186=((-1.0)*r00);
IkReal x2188 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2188)==0){
continue;
}
IkReal x2187=pow(x2188,-0.5);
CheckValue<IkReal> x2189 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2186),IKFAST_ATAN2_MAGTHRESH);
if(!x2189.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2189.value));
IkReal gconst85=(r01*x2187);
IkReal gconst86=(x2186*x2187);
CheckValue<IkReal> x2190 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2190.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2190.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2191=((-1.0)*r00);
IkReal x2192=x2187;
CheckValue<IkReal> x2194 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2191),IKFAST_ATAN2_MAGTHRESH);
if(!x2194.valid){
continue;
}
IkReal x2193=((-1.0)*(x2194.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2193;
IkReal gconst84=x2193;
IkReal gconst85=(r01*x2192);
IkReal gconst86=(x2191*x2192);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2195=((1.0)*gconst85);
CheckValue<IkReal> x2196 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2195))+(((-1.0)*r11*sj0*x2195))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2196.valid){
continue;
}
CheckValue<IkReal> x2197=IKPowWithIntegerCheck(IKsign((((gconst86*r21))+((gconst85*r20)))),-1);
if(!x2197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2196.value)+(((1.5707963267949)*(x2197.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2198=IKsin(j4);
IkReal x2199=IKcos(j4);
IkReal x2200=((1.0)*cj2);
IkReal x2201=(sj1*sj2);
IkReal x2202=((1.0)*x2199);
IkReal x2203=(gconst86*x2198);
IkReal x2204=(gconst85*x2199);
IkReal x2205=((1.0)*x2198);
IkReal x2206=(gconst85*x2205);
evalcond[0]=(((r20*x2203))+(((-1.0)*r22*x2202))+(((-1.0)*r21*x2206)));
evalcond[1]=(sj0+((r00*x2203))+(((-1.0)*r02*x2202))+(((-1.0)*r01*x2206)));
evalcond[2]=((((-1.0)*r12*x2202))+(((-1.0)*r11*x2206))+((r10*x2203))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst86*r20*x2202))+(((-1.0)*sj1*x2200))+(((-1.0)*r22*x2205))+(((-1.0)*cj1*sj2))+((r21*x2204)));
evalcond[4]=((((-1.0)*cj0*cj1*x2200))+((r01*x2204))+(((-1.0)*gconst86*r00*x2202))+((cj0*x2201))+(((-1.0)*r02*x2205)));
evalcond[5]=((((-1.0)*r12*x2205))+((r11*x2204))+(((-1.0)*cj1*sj0*x2200))+((sj0*x2201))+(((-1.0)*gconst86*r10*x2202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2207=((1.0)*gconst85);
CheckValue<IkReal> x2208=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2207))+(((-1.0)*gconst86*r11)))),-1);
if(!x2208.valid){
continue;
}
CheckValue<IkReal> x2209 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2207))+((gconst86*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2208.value)))+(x2209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2210=IKsin(j4);
IkReal x2211=IKcos(j4);
IkReal x2212=((1.0)*cj2);
IkReal x2213=(sj1*sj2);
IkReal x2214=((1.0)*x2211);
IkReal x2215=(gconst86*x2210);
IkReal x2216=(gconst85*x2211);
IkReal x2217=((1.0)*x2210);
IkReal x2218=(gconst85*x2217);
evalcond[0]=(((r20*x2215))+(((-1.0)*r22*x2214))+(((-1.0)*r21*x2218)));
evalcond[1]=(sj0+((r00*x2215))+(((-1.0)*r02*x2214))+(((-1.0)*r01*x2218)));
evalcond[2]=((((-1.0)*r11*x2218))+(((-1.0)*r12*x2214))+((r10*x2215))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2212))+(((-1.0)*gconst86*r20*x2214))+(((-1.0)*r22*x2217))+(((-1.0)*cj1*sj2))+((r21*x2216)));
evalcond[4]=((((-1.0)*cj0*cj1*x2212))+((r01*x2216))+(((-1.0)*gconst86*r00*x2214))+((cj0*x2213))+(((-1.0)*r02*x2217)));
evalcond[5]=((((-1.0)*r12*x2217))+((r11*x2216))+(((-1.0)*cj1*sj0*x2212))+((sj0*x2213))+(((-1.0)*gconst86*r10*x2214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2219=((-1.0)*r01);
IkReal x2221 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2221)==0){
continue;
}
IkReal x2220=pow(x2221,-0.5);
CheckValue<IkReal> x2222 = IKatan2WithCheck(IkReal(x2219),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2222.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2222.value))));
IkReal gconst88=(x2219*x2220);
IkReal gconst89=((1.0)*r00*x2220);
CheckValue<IkReal> x2223 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2223.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2223.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2224=((-1.0)*r01);
CheckValue<IkReal> x2227 = IKatan2WithCheck(IkReal(x2224),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2227.valid){
continue;
}
IkReal x2225=((1.0)*(x2227.value));
IkReal x2226=x2220;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2225)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2225)));
IkReal gconst88=(x2224*x2226);
IkReal gconst89=((1.0)*r00*x2226);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x2228=((-1.0)*r01);
CheckValue<IkReal> x2231 = IKatan2WithCheck(IkReal(x2228),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2231.valid){
continue;
}
IkReal x2229=((1.0)*(x2231.value));
IkReal x2230=x2220;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2229)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2229)));
IkReal gconst88=(x2228*x2230);
IkReal gconst89=((1.0)*r00*x2230);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2232=((-1.0)*r01);
CheckValue<IkReal> x2235 = IKatan2WithCheck(IkReal(x2232),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2235.valid){
continue;
}
IkReal x2233=((1.0)*(x2235.value));
IkReal x2234=x2220;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2233)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2233)));
IkReal gconst88=(x2232*x2234);
IkReal gconst89=((1.0)*r00*x2234);
IkReal x2236=r02*r02;
IkReal x2237=(r12*sj0);
IkReal x2238=x2220;
IkReal x2239=(cj0*x2238);
j4eval[0]=((IKabs((((r02*x2237*x2238))+((x2236*x2239))+(((-1.0)*x2239)))))+(IKabs((x2237+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2240=((1.0)*gconst88);
CheckValue<IkReal> x2241=IKPowWithIntegerCheck(IKsign((((gconst89*r21))+((gconst88*r20)))),-1);
if(!x2241.valid){
continue;
}
CheckValue<IkReal> x2242 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*r11*sj0*x2240))+(((-1.0)*cj0*r01*x2240))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2241.value)))+(x2242.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2243=IKsin(j4);
IkReal x2244=IKcos(j4);
IkReal x2245=((1.0)*cj1);
IkReal x2246=(gconst89*r10);
IkReal x2247=(sj1*sj2);
IkReal x2248=((1.0)*x2244);
IkReal x2249=(gconst88*x2244);
IkReal x2250=(gconst89*x2243);
IkReal x2251=((1.0)*x2243);
evalcond[0]=((((-1.0)*r22*x2248))+((r20*x2250))+(((-1.0)*gconst88*r21*x2251)));
evalcond[1]=(sj0+(((-1.0)*r02*x2248))+(((-1.0)*gconst88*r01*x2251))+((r00*x2250)));
evalcond[2]=(((x2243*x2246))+(((-1.0)*gconst88*r11*x2251))+(((-1.0)*r12*x2248))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2251))+(((-1.0)*sj2*x2245))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst89*r20*x2248))+((r21*x2249)));
evalcond[4]=((((-1.0)*r02*x2251))+(((-1.0)*gconst89*r00*x2248))+((r01*x2249))+(((-1.0)*cj0*cj2*x2245))+((cj0*x2247)));
evalcond[5]=(((r11*x2249))+(((-1.0)*r12*x2251))+((sj0*x2247))+(((-1.0)*cj2*sj0*x2245))+(((-1.0)*x2246*x2248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2252=((1.0)*gconst88);
CheckValue<IkReal> x2253=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r01))+(((-1.0)*r00*x2252)))),-1);
if(!x2253.valid){
continue;
}
CheckValue<IkReal> x2254 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst89*r20))+(((-1.0)*cj0*r21*x2252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2253.value)))+(x2254.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2255=IKsin(j4);
IkReal x2256=IKcos(j4);
IkReal x2257=((1.0)*cj1);
IkReal x2258=(gconst89*r10);
IkReal x2259=(sj1*sj2);
IkReal x2260=((1.0)*x2256);
IkReal x2261=(gconst88*x2256);
IkReal x2262=(gconst89*x2255);
IkReal x2263=((1.0)*x2255);
evalcond[0]=((((-1.0)*r22*x2260))+((r20*x2262))+(((-1.0)*gconst88*r21*x2263)));
evalcond[1]=(((r00*x2262))+sj0+(((-1.0)*r02*x2260))+(((-1.0)*gconst88*r01*x2263)));
evalcond[2]=(((x2255*x2258))+(((-1.0)*gconst88*r11*x2263))+(((-1.0)*r12*x2260))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x2257))+(((-1.0)*gconst89*r20*x2260))+((r21*x2261))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2263)));
evalcond[4]=(((r01*x2261))+((cj0*x2259))+(((-1.0)*r02*x2263))+(((-1.0)*cj0*cj2*x2257))+(((-1.0)*gconst89*r00*x2260)));
evalcond[5]=((((-1.0)*x2258*x2260))+((r11*x2261))+((sj0*x2259))+(((-1.0)*r12*x2263))+(((-1.0)*cj2*sj0*x2257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2264=((1.0)*gconst88);
CheckValue<IkReal> x2265=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r11))+(((-1.0)*r10*x2264)))),-1);
if(!x2265.valid){
continue;
}
CheckValue<IkReal> x2266 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst89*r20*sj0))+(((-1.0)*r21*sj0*x2264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2265.value)))+(x2266.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2267=IKsin(j4);
IkReal x2268=IKcos(j4);
IkReal x2269=((1.0)*cj1);
IkReal x2270=(gconst89*r10);
IkReal x2271=(sj1*sj2);
IkReal x2272=((1.0)*x2268);
IkReal x2273=(gconst88*x2268);
IkReal x2274=(gconst89*x2267);
IkReal x2275=((1.0)*x2267);
evalcond[0]=((((-1.0)*r22*x2272))+((r20*x2274))+(((-1.0)*gconst88*r21*x2275)));
evalcond[1]=(((r00*x2274))+sj0+(((-1.0)*r02*x2272))+(((-1.0)*gconst88*r01*x2275)));
evalcond[2]=((((-1.0)*gconst88*r11*x2275))+((x2267*x2270))+(((-1.0)*r12*x2272))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst89*r20*x2272))+((r21*x2273))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2275))+(((-1.0)*sj2*x2269)));
evalcond[4]=((((-1.0)*cj0*cj2*x2269))+((r01*x2273))+(((-1.0)*gconst89*r00*x2272))+((cj0*x2271))+(((-1.0)*r02*x2275)));
evalcond[5]=(((sj0*x2271))+(((-1.0)*x2270*x2272))+((r11*x2273))+(((-1.0)*cj2*sj0*x2269))+(((-1.0)*r12*x2275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2276=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2276;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x2276);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2277=((1.0)*sj5);
IkReal x2278=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2277)));
j4eval[0]=x2278;
j4eval[1]=IKsign(x2278);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x2277)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2279=cj5*cj5;
IkReal x2280=r01*r01;
IkReal x2281=(cj5*r00);
IkReal x2282=(r01*sj5);
IkReal x2283=(x2280+((x2279*(r00*r00)))+(((-1.0)*x2279*x2280))+(((-2.0)*x2281*x2282))+(r02*r02));
j4eval[0]=x2283;
j4eval[1]=((IKabs(r02))+(IKabs((x2282+(((-1.0)*x2281))))));
j4eval[2]=IKsign(x2283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2284=cj5*cj5;
IkReal x2285=r01*r01;
IkReal x2286=(r01*sj5);
IkReal x2287=(cj5*r00);
CheckValue<IkReal> x2288 = IKatan2WithCheck(IkReal((x2286+(((-1.0)*x2287)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2288.valid){
continue;
}
CheckValue<IkReal> x2289=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2284*x2285))+x2285+(r02*r02)+(((-2.0)*x2286*x2287))+((x2284*(r00*r00))))),-1);
if(!x2289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2288.value)+(((1.5707963267949)*(x2289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2290=IKsin(j4);
IkReal x2291=IKcos(j4);
IkReal x2292=(cj5*r00);
IkReal x2293=((1.0)*cj1);
IkReal x2294=(cj5*r20);
IkReal x2295=(cj5*r10);
IkReal x2296=((1.0)*x2291);
IkReal x2297=(sj5*x2291);
IkReal x2298=((1.0)*x2290);
IkReal x2299=(sj5*x2298);
evalcond[0]=((((-1.0)*r22*x2296))+((x2290*x2294))+(((-1.0)*r21*x2299)));
evalcond[1]=((((-1.0)*r12*x2296))+(((-1.0)*r11*x2299))+((x2290*x2295)));
evalcond[2]=((((-1.0)*r02*x2298))+(((-1.0)*x2292*x2296))+((r01*x2297)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2296))+(((-1.0)*r01*x2299))+((x2290*x2292)));
evalcond[4]=((((-1.0)*cj2*x2293))+((sj1*sj2))+(((-1.0)*r12*x2298))+(((-1.0)*x2295*x2296))+((r11*x2297)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r21*x2297))+(((-1.0)*sj2*x2293))+(((-1.0)*r22*x2298))+(((-1.0)*x2294*x2296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2300=((1.0)*sj5);
CheckValue<IkReal> x2301=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2300)))),-1);
if(!x2301.valid){
continue;
}
CheckValue<IkReal> x2302 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2301.value)))+(x2302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2303=IKsin(j4);
IkReal x2304=IKcos(j4);
IkReal x2305=(cj5*r00);
IkReal x2306=((1.0)*cj1);
IkReal x2307=(cj5*r20);
IkReal x2308=(cj5*r10);
IkReal x2309=((1.0)*x2304);
IkReal x2310=(sj5*x2304);
IkReal x2311=((1.0)*x2303);
IkReal x2312=(sj5*x2311);
evalcond[0]=((((-1.0)*r22*x2309))+((x2303*x2307))+(((-1.0)*r21*x2312)));
evalcond[1]=(((x2303*x2308))+(((-1.0)*r11*x2312))+(((-1.0)*r12*x2309)));
evalcond[2]=(((r01*x2310))+(((-1.0)*r02*x2311))+(((-1.0)*x2305*x2309)));
evalcond[3]=((1.0)+((x2303*x2305))+(((-1.0)*r01*x2312))+(((-1.0)*r02*x2309)));
evalcond[4]=((((-1.0)*cj2*x2306))+((r11*x2310))+((sj1*sj2))+(((-1.0)*x2308*x2309))+(((-1.0)*r12*x2311)));
evalcond[5]=((((-1.0)*sj2*x2306))+(((-1.0)*r22*x2311))+((r21*x2310))+(((-1.0)*cj2*sj1))+(((-1.0)*x2307*x2309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2313 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2313.valid){
continue;
}
CheckValue<IkReal> x2314=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2313.value)+(((1.5707963267949)*(x2314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2315=IKsin(j4);
IkReal x2316=IKcos(j4);
IkReal x2317=(cj5*r00);
IkReal x2318=((1.0)*cj1);
IkReal x2319=(cj5*r20);
IkReal x2320=(cj5*r10);
IkReal x2321=((1.0)*x2316);
IkReal x2322=(sj5*x2316);
IkReal x2323=((1.0)*x2315);
IkReal x2324=(sj5*x2323);
evalcond[0]=(((x2315*x2319))+(((-1.0)*r22*x2321))+(((-1.0)*r21*x2324)));
evalcond[1]=(((x2315*x2320))+(((-1.0)*r12*x2321))+(((-1.0)*r11*x2324)));
evalcond[2]=((((-1.0)*x2317*x2321))+((r01*x2322))+(((-1.0)*r02*x2323)));
evalcond[3]=((1.0)+((x2315*x2317))+(((-1.0)*r01*x2324))+(((-1.0)*r02*x2321)));
evalcond[4]=((((-1.0)*cj2*x2318))+((r11*x2322))+(((-1.0)*x2320*x2321))+((sj1*sj2))+(((-1.0)*r12*x2323)));
evalcond[5]=((((-1.0)*r22*x2323))+((r21*x2322))+(((-1.0)*cj2*sj1))+(((-1.0)*x2319*x2321))+(((-1.0)*sj2*x2318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2325=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2325;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x2325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2326=((1.0)*sj5);
IkReal x2327=((((-1.0)*cj5*r21))+(((-1.0)*r20*x2326)));
j4eval[0]=x2327;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x2326))))));
j4eval[2]=IKsign(x2327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2328=cj5*cj5;
IkReal x2329=r01*r01;
IkReal x2330=(r01*sj5);
IkReal x2331=(cj5*r00);
IkReal x2332=((((-1.0)*x2328*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x2330*x2331))+((x2328*x2329))+(((-1.0)*x2329)));
j4eval[0]=x2332;
j4eval[1]=IKsign(x2332);
j4eval[2]=((IKabs(r02))+(IKabs((x2330+(((-1.0)*x2331))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2333=cj5*cj5;
IkReal x2334=r01*r01;
IkReal x2335=(r01*sj5);
IkReal x2336=(cj5*r00);
CheckValue<IkReal> x2337 = IKatan2WithCheck(IkReal((x2335+(((-1.0)*x2336)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2337.valid){
continue;
}
CheckValue<IkReal> x2338=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2333*(r00*r00)))+((x2333*x2334))+(((-1.0)*(r02*r02)))+(((2.0)*x2335*x2336))+(((-1.0)*x2334)))),-1);
if(!x2338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2337.value)+(((1.5707963267949)*(x2338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2339=IKsin(j4);
IkReal x2340=IKcos(j4);
IkReal x2341=(cj5*r00);
IkReal x2342=((1.0)*sj2);
IkReal x2343=(cj5*r20);
IkReal x2344=(cj5*r10);
IkReal x2345=((1.0)*x2340);
IkReal x2346=(sj5*x2340);
IkReal x2347=((1.0)*x2339);
IkReal x2348=(sj5*x2347);
evalcond[0]=((((-1.0)*r21*x2348))+(((-1.0)*r22*x2345))+((x2339*x2343)));
evalcond[1]=(((x2339*x2344))+(((-1.0)*r11*x2348))+(((-1.0)*r12*x2345)));
evalcond[2]=(((r01*x2346))+(((-1.0)*x2341*x2345))+(((-1.0)*r02*x2347)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x2348))+(((-1.0)*r02*x2345))+((x2339*x2341)));
evalcond[4]=((((-1.0)*x2344*x2345))+(((-1.0)*sj1*x2342))+((r11*x2346))+((cj1*cj2))+(((-1.0)*r12*x2347)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2342))+(((-1.0)*r22*x2347))+(((-1.0)*x2343*x2345))+((r21*x2346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2349=((1.0)*sj5);
CheckValue<IkReal> x2350 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x2349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2350.valid){
continue;
}
CheckValue<IkReal> x2351=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2349))+(((-1.0)*cj5*r21)))),-1);
if(!x2351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2350.value)+(((1.5707963267949)*(x2351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2352=IKsin(j4);
IkReal x2353=IKcos(j4);
IkReal x2354=(cj5*r00);
IkReal x2355=((1.0)*sj2);
IkReal x2356=(cj5*r20);
IkReal x2357=(cj5*r10);
IkReal x2358=((1.0)*x2353);
IkReal x2359=(sj5*x2353);
IkReal x2360=((1.0)*x2352);
IkReal x2361=(sj5*x2360);
evalcond[0]=((((-1.0)*r21*x2361))+((x2352*x2356))+(((-1.0)*r22*x2358)));
evalcond[1]=(((x2352*x2357))+(((-1.0)*r12*x2358))+(((-1.0)*r11*x2361)));
evalcond[2]=((((-1.0)*x2354*x2358))+((r01*x2359))+(((-1.0)*r02*x2360)));
evalcond[3]=((-1.0)+((x2352*x2354))+(((-1.0)*r01*x2361))+(((-1.0)*r02*x2358)));
evalcond[4]=((((-1.0)*x2357*x2358))+((r11*x2359))+(((-1.0)*sj1*x2355))+((cj1*cj2))+(((-1.0)*r12*x2360)));
evalcond[5]=((((-1.0)*x2356*x2358))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2355))+(((-1.0)*r22*x2360))+((r21*x2359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2362=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2362.valid){
continue;
}
CheckValue<IkReal> x2363 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2362.value)))+(x2363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2364=IKsin(j4);
IkReal x2365=IKcos(j4);
IkReal x2366=(cj5*r00);
IkReal x2367=((1.0)*sj2);
IkReal x2368=(cj5*r20);
IkReal x2369=(cj5*r10);
IkReal x2370=((1.0)*x2365);
IkReal x2371=(sj5*x2365);
IkReal x2372=((1.0)*x2364);
IkReal x2373=(sj5*x2372);
evalcond[0]=(((x2364*x2368))+(((-1.0)*r21*x2373))+(((-1.0)*r22*x2370)));
evalcond[1]=(((x2364*x2369))+(((-1.0)*r12*x2370))+(((-1.0)*r11*x2373)));
evalcond[2]=((((-1.0)*r02*x2372))+(((-1.0)*x2366*x2370))+((r01*x2371)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2370))+((x2364*x2366))+(((-1.0)*r01*x2373)));
evalcond[4]=((((-1.0)*x2369*x2370))+((cj1*cj2))+(((-1.0)*r12*x2372))+(((-1.0)*sj1*x2367))+((r11*x2371)));
evalcond[5]=((((-1.0)*x2368*x2370))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2372))+(((-1.0)*cj1*x2367))+((r21*x2371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2374=((-1.0)*r10);
IkReal x2376 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2376)==0){
continue;
}
IkReal x2375=pow(x2376,-0.5);
CheckValue<IkReal> x2377 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2374),IKFAST_ATAN2_MAGTHRESH);
if(!x2377.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2377.value));
IkReal gconst91=(r11*x2375);
IkReal gconst92=(x2374*x2375);
CheckValue<IkReal> x2378 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2378.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2378.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2379=((-1.0)*r10);
IkReal x2380=x2375;
CheckValue<IkReal> x2382 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2379),IKFAST_ATAN2_MAGTHRESH);
if(!x2382.valid){
continue;
}
IkReal x2381=((-1.0)*(x2382.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2381;
IkReal gconst90=x2381;
IkReal gconst91=(r11*x2380);
IkReal gconst92=(x2379*x2380);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2383=((1.0)*gconst91);
CheckValue<IkReal> x2384 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x2383))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*r11*sj0*x2383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2384.valid){
continue;
}
CheckValue<IkReal> x2385=IKPowWithIntegerCheck(IKsign((((gconst91*r20))+((gconst92*r21)))),-1);
if(!x2385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2384.value)+(((1.5707963267949)*(x2385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2386=IKsin(j4);
IkReal x2387=IKcos(j4);
IkReal x2388=((1.0)*cj2);
IkReal x2389=(gconst92*r00);
IkReal x2390=(sj1*sj2);
IkReal x2391=((1.0)*x2387);
IkReal x2392=(gconst91*x2387);
IkReal x2393=((1.0)*x2386);
IkReal x2394=(gconst92*x2386);
IkReal x2395=(gconst91*x2393);
evalcond[0]=(((r20*x2394))+(((-1.0)*r21*x2395))+(((-1.0)*r22*x2391)));
evalcond[1]=((((-1.0)*r01*x2395))+sj0+(((-1.0)*r02*x2391))+((x2386*x2389)));
evalcond[2]=(((r10*x2394))+(((-1.0)*cj0))+(((-1.0)*r12*x2391))+(((-1.0)*r11*x2395)));
evalcond[3]=((((-1.0)*gconst92*r20*x2391))+(((-1.0)*sj1*x2388))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2393))+((r21*x2392)));
evalcond[4]=((((-1.0)*cj0*cj1*x2388))+(((-1.0)*r02*x2393))+((r01*x2392))+(((-1.0)*x2389*x2391))+((cj0*x2390)));
evalcond[5]=((((-1.0)*cj1*sj0*x2388))+(((-1.0)*gconst92*r10*x2391))+((r11*x2392))+(((-1.0)*r12*x2393))+((sj0*x2390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2396=((1.0)*gconst91);
CheckValue<IkReal> x2397 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst92*r20))+(((-1.0)*cj0*r21*x2396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2397.valid){
continue;
}
CheckValue<IkReal> x2398=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2396))+(((-1.0)*gconst92*r01)))),-1);
if(!x2398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2397.value)+(((1.5707963267949)*(x2398.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2399=IKsin(j4);
IkReal x2400=IKcos(j4);
IkReal x2401=((1.0)*cj2);
IkReal x2402=(gconst92*r00);
IkReal x2403=(sj1*sj2);
IkReal x2404=((1.0)*x2400);
IkReal x2405=(gconst91*x2400);
IkReal x2406=((1.0)*x2399);
IkReal x2407=(gconst92*x2399);
IkReal x2408=(gconst91*x2406);
evalcond[0]=(((r20*x2407))+(((-1.0)*r21*x2408))+(((-1.0)*r22*x2404)));
evalcond[1]=(sj0+((x2399*x2402))+(((-1.0)*r01*x2408))+(((-1.0)*r02*x2404)));
evalcond[2]=(((r10*x2407))+(((-1.0)*r11*x2408))+(((-1.0)*r12*x2404))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2401))+(((-1.0)*cj1*sj2))+((r21*x2405))+(((-1.0)*gconst92*r20*x2404))+(((-1.0)*r22*x2406)));
evalcond[4]=((((-1.0)*cj0*cj1*x2401))+((r01*x2405))+((cj0*x2403))+(((-1.0)*r02*x2406))+(((-1.0)*x2402*x2404)));
evalcond[5]=(((r11*x2405))+(((-1.0)*cj1*sj0*x2401))+(((-1.0)*gconst92*r10*x2404))+((sj0*x2403))+(((-1.0)*r12*x2406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2409=((-1.0)*r11);
IkReal x2411 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2411)==0){
continue;
}
IkReal x2410=pow(x2411,-0.5);
CheckValue<IkReal> x2412 = IKatan2WithCheck(IkReal(x2409),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2412.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2412.value))));
IkReal gconst94=(x2409*x2410);
IkReal gconst95=((1.0)*r10*x2410);
CheckValue<IkReal> x2413 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2413.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2413.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2414=((-1.0)*r11);
CheckValue<IkReal> x2417 = IKatan2WithCheck(IkReal(x2414),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2417.valid){
continue;
}
IkReal x2415=((1.0)*(x2417.value));
IkReal x2416=x2410;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2415)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2415)));
IkReal gconst94=(x2414*x2416);
IkReal gconst95=((1.0)*r10*x2416);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2418=((-1.0)*r11);
CheckValue<IkReal> x2421 = IKatan2WithCheck(IkReal(x2418),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2421.valid){
continue;
}
IkReal x2419=((1.0)*(x2421.value));
IkReal x2420=x2410;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2419)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2419)));
IkReal gconst94=(x2418*x2420);
IkReal gconst95=((1.0)*r10*x2420);
IkReal x2422=r12*r12;
IkReal x2423=(cj0*r02);
IkReal x2424=x2410;
IkReal x2425=(sj0*x2424);
j4eval[0]=((IKabs((((r12*x2423*x2424))+((x2422*x2425))+(((-1.0)*x2425)))))+(IKabs((x2423+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2426=((-1.0)*r11);
CheckValue<IkReal> x2429 = IKatan2WithCheck(IkReal(x2426),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2429.valid){
continue;
}
IkReal x2427=((1.0)*(x2429.value));
IkReal x2428=x2410;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2427)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2427)));
IkReal gconst94=(x2426*x2428);
IkReal gconst95=((1.0)*r10*x2428);
IkReal x2430=r12*r12;
IkReal x2431=((1.0)*r22);
IkReal x2432=(cj1*sj2);
IkReal x2433=(cj2*sj1);
CheckValue<IkReal> x2437=IKPowWithIntegerCheck(((-1.0)+x2430),-1);
if(!x2437.valid){
continue;
}
IkReal x2434=x2437.value;
if((((1.0)+(((-1.0)*x2430)))) < -0.00001)
continue;
IkReal x2435=IKsqrt(((1.0)+(((-1.0)*x2430))));
IkReal x2436=(r12*x2434*x2435);
j4eval[0]=((IKabs(((((-1.0)*x2431*x2433*x2436))+(((-1.0)*x2431*x2432*x2436)))))+(IKabs(((((-1.0)*x2431*x2433))+(((-1.0)*x2431*x2432))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2438=(cj2*sj1);
IkReal x2439=(gconst95*r20);
IkReal x2440=(cj1*sj2);
IkReal x2441=((1.0)*r22);
IkReal x2442=(gconst94*r21);
CheckValue<IkReal> x2443 = IKatan2WithCheck(IkReal(((((-1.0)*x2438*x2441))+(((-1.0)*x2440*x2441)))),IkReal(((((-1.0)*x2439*x2440))+((x2440*x2442))+(((-1.0)*x2438*x2439))+((x2438*x2442)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2443.valid){
continue;
}
CheckValue<IkReal> x2444=IKPowWithIntegerCheck(IKsign(((x2439*x2439)+(r22*r22)+(x2442*x2442)+(((-2.0)*x2439*x2442)))),-1);
if(!x2444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2443.value)+(((1.5707963267949)*(x2444.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2445=IKsin(j4);
IkReal x2446=IKcos(j4);
IkReal x2447=((1.0)*cj2);
IkReal x2448=(gconst95*r10);
IkReal x2449=(sj1*sj2);
IkReal x2450=((1.0)*x2446);
IkReal x2451=(gconst95*x2445);
IkReal x2452=(gconst94*x2446);
IkReal x2453=((1.0)*x2445);
IkReal x2454=(gconst94*x2453);
evalcond[0]=((((-1.0)*r21*x2454))+(((-1.0)*r22*x2450))+((r20*x2451)));
evalcond[1]=(sj0+((r00*x2451))+(((-1.0)*r01*x2454))+(((-1.0)*r02*x2450)));
evalcond[2]=((((-1.0)*r11*x2454))+(((-1.0)*r12*x2450))+((x2445*x2448))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2447))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2453))+(((-1.0)*gconst95*r20*x2450))+((r21*x2452)));
evalcond[4]=((((-1.0)*cj0*cj1*x2447))+((r01*x2452))+(((-1.0)*gconst95*r00*x2450))+((cj0*x2449))+(((-1.0)*r02*x2453)));
evalcond[5]=((((-1.0)*cj1*sj0*x2447))+((sj0*x2449))+(((-1.0)*x2448*x2450))+(((-1.0)*r12*x2453))+((r11*x2452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2455=((1.0)*gconst94);
CheckValue<IkReal> x2456=IKPowWithIntegerCheck(IKsign((((gconst95*r21))+((gconst94*r20)))),-1);
if(!x2456.valid){
continue;
}
CheckValue<IkReal> x2457 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x2455))+((gconst95*r10*sj0))+(((-1.0)*r11*sj0*x2455))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2456.value)))+(x2457.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2458=IKsin(j4);
IkReal x2459=IKcos(j4);
IkReal x2460=((1.0)*cj2);
IkReal x2461=(gconst95*r10);
IkReal x2462=(sj1*sj2);
IkReal x2463=((1.0)*x2459);
IkReal x2464=(gconst95*x2458);
IkReal x2465=(gconst94*x2459);
IkReal x2466=((1.0)*x2458);
IkReal x2467=(gconst94*x2466);
evalcond[0]=((((-1.0)*r22*x2463))+((r20*x2464))+(((-1.0)*r21*x2467)));
evalcond[1]=(sj0+(((-1.0)*r01*x2467))+(((-1.0)*r02*x2463))+((r00*x2464)));
evalcond[2]=(((x2458*x2461))+(((-1.0)*r12*x2463))+(((-1.0)*r11*x2467))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2466))+(((-1.0)*cj1*sj2))+((r21*x2465))+(((-1.0)*gconst95*r20*x2463))+(((-1.0)*sj1*x2460)));
evalcond[4]=(((r01*x2465))+(((-1.0)*gconst95*r00*x2463))+(((-1.0)*cj0*cj1*x2460))+(((-1.0)*r02*x2466))+((cj0*x2462)));
evalcond[5]=((((-1.0)*r12*x2466))+((r11*x2465))+(((-1.0)*cj1*sj0*x2460))+((sj0*x2462))+(((-1.0)*x2461*x2463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2468=((1.0)*gconst94);
CheckValue<IkReal> x2469=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r01))+(((-1.0)*r00*x2468)))),-1);
if(!x2469.valid){
continue;
}
CheckValue<IkReal> x2470 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2468))+((cj0*gconst95*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2469.value)))+(x2470.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2471=IKsin(j4);
IkReal x2472=IKcos(j4);
IkReal x2473=((1.0)*cj2);
IkReal x2474=(gconst95*r10);
IkReal x2475=(sj1*sj2);
IkReal x2476=((1.0)*x2472);
IkReal x2477=(gconst95*x2471);
IkReal x2478=(gconst94*x2472);
IkReal x2479=((1.0)*x2471);
IkReal x2480=(gconst94*x2479);
evalcond[0]=(((r20*x2477))+(((-1.0)*r21*x2480))+(((-1.0)*r22*x2476)));
evalcond[1]=(sj0+((r00*x2477))+(((-1.0)*r01*x2480))+(((-1.0)*r02*x2476)));
evalcond[2]=(((x2471*x2474))+(((-1.0)*r12*x2476))+(((-1.0)*r11*x2480))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x2478))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst95*r20*x2476))+(((-1.0)*r22*x2479))+(((-1.0)*sj1*x2473)));
evalcond[4]=((((-1.0)*cj0*cj1*x2473))+((r01*x2478))+(((-1.0)*gconst95*r00*x2476))+((cj0*x2475))+(((-1.0)*r02*x2479)));
evalcond[5]=((((-1.0)*cj1*sj0*x2473))+(((-1.0)*r12*x2479))+((sj0*x2475))+(((-1.0)*x2474*x2476))+((r11*x2478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2481=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2481;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x2481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2482=((1.0)*sj5);
IkReal x2483=((((-1.0)*r00*x2482))+(((-1.0)*cj5*r01)));
j4eval[0]=x2483;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x2482))))));
j4eval[2]=IKsign(x2483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2484=cj5*cj5;
IkReal x2485=r11*r11;
IkReal x2486=(cj5*r10);
IkReal x2487=(r11*sj5);
IkReal x2488=((((-1.0)*x2485))+((x2484*x2485))+(((-1.0)*(r12*r12)))+(((-1.0)*x2484*(r10*r10)))+(((2.0)*x2486*x2487)));
j4eval[0]=x2488;
j4eval[1]=((IKabs(r12))+(IKabs((x2487+(((-1.0)*x2486))))));
j4eval[2]=IKsign(x2488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2489=cj5*cj5;
IkReal x2490=r11*r11;
IkReal x2491=(cj5*r10);
IkReal x2492=(r11*sj5);
CheckValue<IkReal> x2493=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2489*(r10*r10)))+(((-1.0)*x2490))+(((2.0)*x2491*x2492))+(((-1.0)*(r12*r12)))+((x2489*x2490)))),-1);
if(!x2493.valid){
continue;
}
CheckValue<IkReal> x2494 = IKatan2WithCheck(IkReal((x2492+(((-1.0)*x2491)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2493.value)))+(x2494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2495=IKsin(j4);
IkReal x2496=IKcos(j4);
IkReal x2497=(cj5*r00);
IkReal x2498=((1.0)*cj1);
IkReal x2499=((1.0)*x2496);
IkReal x2500=(sj5*x2496);
IkReal x2501=(cj5*x2495);
IkReal x2502=((1.0)*x2495);
IkReal x2503=(sj5*x2502);
evalcond[0]=(((r20*x2501))+(((-1.0)*r22*x2499))+(((-1.0)*r21*x2503)));
evalcond[1]=(((x2495*x2497))+(((-1.0)*r01*x2503))+(((-1.0)*r02*x2499)));
evalcond[2]=((((-1.0)*r12*x2502))+(((-1.0)*cj5*r10*x2499))+((r11*x2500)));
evalcond[3]=((-1.0)+((r10*x2501))+(((-1.0)*r11*x2503))+(((-1.0)*r12*x2499)));
evalcond[4]=((((-1.0)*r02*x2502))+(((-1.0)*x2497*x2499))+((sj1*sj2))+(((-1.0)*cj2*x2498))+((r01*x2500)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r22*x2502))+(((-1.0)*sj2*x2498))+(((-1.0)*cj5*r20*x2499))+((r21*x2500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2504=((1.0)*sj5);
CheckValue<IkReal> x2505 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2505.valid){
continue;
}
CheckValue<IkReal> x2506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2504))+(((-1.0)*cj5*r01)))),-1);
if(!x2506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2505.value)+(((1.5707963267949)*(x2506.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2507=IKsin(j4);
IkReal x2508=IKcos(j4);
IkReal x2509=(cj5*r00);
IkReal x2510=((1.0)*cj1);
IkReal x2511=((1.0)*x2508);
IkReal x2512=(sj5*x2508);
IkReal x2513=(cj5*x2507);
IkReal x2514=((1.0)*x2507);
IkReal x2515=(sj5*x2514);
evalcond[0]=((((-1.0)*r22*x2511))+(((-1.0)*r21*x2515))+((r20*x2513)));
evalcond[1]=((((-1.0)*r01*x2515))+((x2507*x2509))+(((-1.0)*r02*x2511)));
evalcond[2]=(((r11*x2512))+(((-1.0)*cj5*r10*x2511))+(((-1.0)*r12*x2514)));
evalcond[3]=((-1.0)+((r10*x2513))+(((-1.0)*r11*x2515))+(((-1.0)*r12*x2511)));
evalcond[4]=((((-1.0)*cj2*x2510))+((sj1*sj2))+(((-1.0)*x2509*x2511))+((r01*x2512))+(((-1.0)*r02*x2514)));
evalcond[5]=((((-1.0)*sj2*x2510))+(((-1.0)*cj5*r20*x2511))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2514))+((r21*x2512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2516=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2516.valid){
continue;
}
CheckValue<IkReal> x2517 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2516.value)))+(x2517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2518=IKsin(j4);
IkReal x2519=IKcos(j4);
IkReal x2520=(cj5*r00);
IkReal x2521=((1.0)*cj1);
IkReal x2522=((1.0)*x2519);
IkReal x2523=(sj5*x2519);
IkReal x2524=(cj5*x2518);
IkReal x2525=((1.0)*x2518);
IkReal x2526=(sj5*x2525);
evalcond[0]=((((-1.0)*r21*x2526))+((r20*x2524))+(((-1.0)*r22*x2522)));
evalcond[1]=((((-1.0)*r01*x2526))+(((-1.0)*r02*x2522))+((x2518*x2520)));
evalcond[2]=((((-1.0)*r12*x2525))+((r11*x2523))+(((-1.0)*cj5*r10*x2522)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2522))+(((-1.0)*r11*x2526))+((r10*x2524)));
evalcond[4]=((((-1.0)*x2520*x2522))+((sj1*sj2))+(((-1.0)*cj2*x2521))+((r01*x2523))+(((-1.0)*r02*x2525)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2521))+(((-1.0)*cj5*r20*x2522))+((r21*x2523))+(((-1.0)*r22*x2525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2527=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2527;
j4eval[1]=IKsign(x2527);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2528=((1.0)*sj5);
IkReal x2529=((((-1.0)*r20*x2528))+(((-1.0)*cj5*r21)));
j4eval[0]=x2529;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x2528))+((cj5*r00))))));
j4eval[2]=IKsign(x2529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2530=cj5*cj5;
IkReal x2531=r11*r11;
IkReal x2532=(r11*sj5);
IkReal x2533=(cj5*r10);
IkReal x2534=(((x2530*(r10*r10)))+(r12*r12)+x2531+(((-2.0)*x2532*x2533))+(((-1.0)*x2530*x2531)));
j4eval[0]=x2534;
j4eval[1]=IKsign(x2534);
j4eval[2]=((IKabs(r12))+(IKabs((x2532+(((-1.0)*x2533))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2535=cj5*cj5;
IkReal x2536=r11*r11;
IkReal x2537=(cj5*r10);
IkReal x2538=(r11*sj5);
CheckValue<IkReal> x2539=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2536+((x2535*(r10*r10)))+(((-1.0)*x2535*x2536))+(((-2.0)*x2537*x2538)))),-1);
if(!x2539.valid){
continue;
}
CheckValue<IkReal> x2540 = IKatan2WithCheck(IkReal((x2538+(((-1.0)*x2537)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2539.value)))+(x2540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2541=IKsin(j4);
IkReal x2542=IKcos(j4);
IkReal x2543=(cj5*r00);
IkReal x2544=((1.0)*sj2);
IkReal x2545=((1.0)*x2542);
IkReal x2546=(sj5*x2542);
IkReal x2547=(cj5*x2541);
IkReal x2548=((1.0)*x2541);
IkReal x2549=(sj5*x2548);
evalcond[0]=(((r20*x2547))+(((-1.0)*r21*x2549))+(((-1.0)*r22*x2545)));
evalcond[1]=((((-1.0)*r01*x2549))+(((-1.0)*r02*x2545))+((x2541*x2543)));
evalcond[2]=((((-1.0)*r12*x2548))+((r11*x2546))+(((-1.0)*cj5*r10*x2545)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2545))+(((-1.0)*r11*x2549))+((r10*x2547)));
evalcond[4]=((((-1.0)*x2543*x2545))+((r01*x2546))+(((-1.0)*sj1*x2544))+((cj1*cj2))+(((-1.0)*r02*x2548)));
evalcond[5]=(((r21*x2546))+(((-1.0)*cj5*r20*x2545))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2544))+(((-1.0)*r22*x2548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2550=((1.0)*sj5);
CheckValue<IkReal> x2551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2550))+(((-1.0)*cj5*r21)))),-1);
if(!x2551.valid){
continue;
}
CheckValue<IkReal> x2552 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x2550))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2551.value)))+(x2552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2553=IKsin(j4);
IkReal x2554=IKcos(j4);
IkReal x2555=(cj5*r00);
IkReal x2556=((1.0)*sj2);
IkReal x2557=((1.0)*x2554);
IkReal x2558=(sj5*x2554);
IkReal x2559=(cj5*x2553);
IkReal x2560=((1.0)*x2553);
IkReal x2561=(sj5*x2560);
evalcond[0]=((((-1.0)*r21*x2561))+((r20*x2559))+(((-1.0)*r22*x2557)));
evalcond[1]=((((-1.0)*r01*x2561))+(((-1.0)*r02*x2557))+((x2553*x2555)));
evalcond[2]=(((r11*x2558))+(((-1.0)*cj5*r10*x2557))+(((-1.0)*r12*x2560)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2557))+((r10*x2559))+(((-1.0)*r11*x2561)));
evalcond[4]=((((-1.0)*r02*x2560))+(((-1.0)*x2555*x2557))+((r01*x2558))+(((-1.0)*sj1*x2556))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x2560))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2556))+(((-1.0)*cj5*r20*x2557))+((r21*x2558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2562=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2562.valid){
continue;
}
CheckValue<IkReal> x2563 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2562.value)))+(x2563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2564=IKsin(j4);
IkReal x2565=IKcos(j4);
IkReal x2566=(cj5*r00);
IkReal x2567=((1.0)*sj2);
IkReal x2568=((1.0)*x2565);
IkReal x2569=(sj5*x2565);
IkReal x2570=(cj5*x2564);
IkReal x2571=((1.0)*x2564);
IkReal x2572=(sj5*x2571);
evalcond[0]=((((-1.0)*r22*x2568))+((r20*x2570))+(((-1.0)*r21*x2572)));
evalcond[1]=((((-1.0)*r02*x2568))+(((-1.0)*r01*x2572))+((x2564*x2566)));
evalcond[2]=((((-1.0)*r12*x2571))+((r11*x2569))+(((-1.0)*cj5*r10*x2568)));
evalcond[3]=((1.0)+((r10*x2570))+(((-1.0)*r12*x2568))+(((-1.0)*r11*x2572)));
evalcond[4]=(((r01*x2569))+(((-1.0)*x2566*x2568))+((cj1*cj2))+(((-1.0)*r02*x2571))+(((-1.0)*sj1*x2567)));
evalcond[5]=((((-1.0)*cj1*x2567))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2571))+(((-1.0)*cj5*r20*x2568))+((r21*x2569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2573=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2573);
rxp0_2=(py*r00);
rxp1_0=(r21*x2573);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2574=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2574);
rxp0_2=(py*r00);
rxp1_0=(r21*x2574);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2575=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2575);
rxp0_2=(py*r00);
rxp1_0=(r21*x2575);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2578=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x2578.valid){
continue;
}
IkReal x2576=x2578.value;
IkReal x2577=(cj0*x2576);
cj4array[0]=((((-1.0)*sj1*sj2*x2577))+((cj1*cj2*x2577)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2579=IKsin(j4);
IkReal x2580=IKcos(j4);
IkReal x2581=(cj5*r20);
IkReal x2582=((1.0)*x2580);
IkReal x2583=((1.0)*sj5*x2579);
evalcond[0]=((-1.0)*r12*x2579);
evalcond[1]=((((-1.0)*cj0))+(((-1.0)*r12*x2582)));
evalcond[2]=((((-1.0)*r21*x2583))+((x2579*x2581)));
evalcond[3]=((((-1.0)*r01*x2583))+((cj5*r00*x2579)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((r21*sj5*x2580))+(((-1.0)*x2581*x2582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2585=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x2585.valid){
continue;
}
IkReal x2584=x2585.value;
cj4array[0]=(((cj2*sj1*x2584))+((cj1*sj2*x2584)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2586=IKsin(j4);
IkReal x2587=IKcos(j4);
IkReal x2588=(cj5*r00);
IkReal x2589=(r01*sj5);
IkReal x2590=((1.0)*cj0);
IkReal x2591=((1.0)*x2587);
IkReal x2592=((1.0)*x2586);
evalcond[0]=((-1.0)*r12*x2586);
evalcond[1]=((((-1.0)*x2590))+(((-1.0)*r12*x2591)));
evalcond[2]=(((cj5*r20*x2586))+(((-1.0)*r21*sj5*x2592)));
evalcond[3]=((((-1.0)*x2589*x2592))+((x2586*x2588)));
evalcond[4]=((((-1.0)*cj1*cj2*x2590))+(((-1.0)*x2588*x2591))+((x2587*x2589))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2593=IKPowWithIntegerCheck(r12,-1);
if(!x2593.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2593.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2594=IKsin(j4);
IkReal x2595=IKcos(j4);
IkReal x2596=(r01*sj5);
IkReal x2597=((1.0)*cj1);
IkReal x2598=(r21*sj5);
IkReal x2599=((1.0)*x2594);
IkReal x2600=(cj5*x2594);
IkReal x2601=((1.0)*cj5*x2595);
evalcond[0]=((-1.0)*r12*x2594);
evalcond[1]=((((-1.0)*x2598*x2599))+((r20*x2600)));
evalcond[2]=((((-1.0)*x2596*x2599))+((r00*x2600)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2597))+((x2595*x2598))+(((-1.0)*r20*x2601)));
evalcond[4]=((((-1.0)*cj0*cj2*x2597))+((x2595*x2596))+((cj0*sj1*sj2))+(((-1.0)*r00*x2601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2602=((1.0)*sj5);
CheckValue<IkReal> x2603=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2603.valid){
continue;
}
CheckValue<IkReal> x2604 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x2602))+((cj0*cj5*r00))+(((-1.0)*cj0*r01*x2602))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2603.value)))+(x2604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2605=IKsin(j4);
IkReal x2606=IKcos(j4);
IkReal x2607=(cj5*r00);
IkReal x2608=((1.0)*cj1);
IkReal x2609=(sj1*sj2);
IkReal x2610=((1.0)*x2606);
IkReal x2611=(sj5*x2606);
IkReal x2612=(cj5*x2605);
IkReal x2613=((1.0)*x2605);
IkReal x2614=(sj5*x2613);
evalcond[0]=((((-1.0)*r21*x2614))+((r20*x2612))+(((-1.0)*r22*x2610)));
evalcond[1]=((((-1.0)*r01*x2614))+sj0+((x2605*x2607))+(((-1.0)*r02*x2610)));
evalcond[2]=((((-1.0)*r12*x2610))+(((-1.0)*r11*x2614))+((r10*x2612))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x2608))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2613))+(((-1.0)*cj5*r20*x2610))+((r21*x2611)));
evalcond[4]=(((r01*x2611))+(((-1.0)*x2607*x2610))+((cj0*x2609))+(((-1.0)*r02*x2613))+(((-1.0)*cj0*cj2*x2608)));
evalcond[5]=((((-1.0)*cj2*sj0*x2608))+(((-1.0)*r12*x2613))+((sj0*x2609))+((r11*x2611))+(((-1.0)*cj5*r10*x2610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2615=((1.0)*sj5);
CheckValue<IkReal> x2616 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2615))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2616.valid){
continue;
}
CheckValue<IkReal> x2617=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2615))+(((-1.0)*cj5*r01)))),-1);
if(!x2617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2616.value)+(((1.5707963267949)*(x2617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2618=IKsin(j4);
IkReal x2619=IKcos(j4);
IkReal x2620=(cj5*r00);
IkReal x2621=((1.0)*cj1);
IkReal x2622=(sj1*sj2);
IkReal x2623=((1.0)*x2619);
IkReal x2624=(sj5*x2619);
IkReal x2625=(cj5*x2618);
IkReal x2626=((1.0)*x2618);
IkReal x2627=(sj5*x2626);
evalcond[0]=(((r20*x2625))+(((-1.0)*r22*x2623))+(((-1.0)*r21*x2627)));
evalcond[1]=((((-1.0)*r01*x2627))+sj0+((x2618*x2620))+(((-1.0)*r02*x2623)));
evalcond[2]=((((-1.0)*r11*x2627))+(((-1.0)*r12*x2623))+((r10*x2625))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x2621))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2626))+(((-1.0)*cj5*r20*x2623))+((r21*x2624)));
evalcond[4]=(((r01*x2624))+(((-1.0)*cj0*cj2*x2621))+(((-1.0)*r02*x2626))+((cj0*x2622))+(((-1.0)*x2620*x2623)));
evalcond[5]=((((-1.0)*cj5*r10*x2623))+(((-1.0)*cj2*sj0*x2621))+(((-1.0)*r12*x2626))+((r11*x2624))+((sj0*x2622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2628=((1.0)*sj5);
CheckValue<IkReal> x2629=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2628)))),-1);
if(!x2629.valid){
continue;
}
CheckValue<IkReal> x2630 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2628))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2629.value)))+(x2630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2631=IKsin(j4);
IkReal x2632=IKcos(j4);
IkReal x2633=(cj5*r00);
IkReal x2634=((1.0)*cj1);
IkReal x2635=(sj1*sj2);
IkReal x2636=((1.0)*x2632);
IkReal x2637=(sj5*x2632);
IkReal x2638=(cj5*x2631);
IkReal x2639=((1.0)*x2631);
IkReal x2640=(sj5*x2639);
evalcond[0]=((((-1.0)*r21*x2640))+((r20*x2638))+(((-1.0)*r22*x2636)));
evalcond[1]=(sj0+(((-1.0)*r02*x2636))+(((-1.0)*r01*x2640))+((x2631*x2633)));
evalcond[2]=((((-1.0)*r11*x2640))+((r10*x2638))+(((-1.0)*r12*x2636))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj5*r20*x2636))+(((-1.0)*cj2*sj1))+((r21*x2637))+(((-1.0)*sj2*x2634))+(((-1.0)*r22*x2639)));
evalcond[4]=((((-1.0)*r02*x2639))+((cj0*x2635))+((r01*x2637))+(((-1.0)*cj0*cj2*x2634))+(((-1.0)*x2633*x2636)));
evalcond[5]=(((sj0*x2635))+((r11*x2637))+(((-1.0)*cj5*r10*x2636))+(((-1.0)*cj2*sj0*x2634))+(((-1.0)*r12*x2639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2641=cj5*cj5;
IkReal x2642=r21*r21;
IkReal x2643=(cj2*sj1);
IkReal x2644=(cj1*sj2);
IkReal x2645=((1.0)*r22);
IkReal x2646=(r21*sj5);
IkReal x2647=((1.0)*cj5*r20);
CheckValue<IkReal> x2648 = IKatan2WithCheck(IkReal(((((-1.0)*x2644*x2645))+(((-1.0)*x2643*x2645)))),IkReal(((((-1.0)*x2644*x2647))+((x2644*x2646))+(((-1.0)*x2643*x2647))+((x2643*x2646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2648.valid){
continue;
}
CheckValue<IkReal> x2649=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x2641*x2642))+(((-2.0)*cj5*r20*x2646))+((x2641*(r20*r20)))+x2642)),-1);
if(!x2649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2648.value)+(((1.5707963267949)*(x2649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2650=IKsin(j4);
IkReal x2651=IKcos(j4);
IkReal x2652=(cj5*r20);
IkReal x2653=(r21*sj5);
IkReal x2654=((1.0)*x2651);
IkReal x2655=((1.0)*x2650);
evalcond[0]=((((-1.0)*r22*x2654))+((x2650*x2652))+(((-1.0)*x2653*x2655)));
evalcond[1]=((((-1.0)*x2652*x2654))+(((-1.0)*r22*x2655))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x2651*x2653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2656=(cj5*sj4);
IkReal x2657=(sj4*sj5);
if( IKabs((((r01*x2657))+(((-1.0)*r00*x2656))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2656))+(((-1.0)*r11*x2657))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2657))+(((-1.0)*r00*x2656))+((cj4*r02))))+IKsqr((((r10*x2656))+(((-1.0)*r11*x2657))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2657))+(((-1.0)*r00*x2656))+((cj4*r02))), (((r10*x2656))+(((-1.0)*r11*x2657))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2658=IKcos(j0);
IkReal x2659=IKsin(j0);
IkReal x2660=((0.353)*cj2);
IkReal x2661=(cj5*r00);
IkReal x2662=((1.0)*sj4);
IkReal x2663=(r01*sj5);
IkReal x2664=((1.0)*cj4);
IkReal x2665=(cj5*r10);
IkReal x2666=(r10*sj5);
IkReal x2667=(cj5*r11);
IkReal x2668=(r00*sj5);
IkReal x2669=(sj1*sj2);
IkReal x2670=(cj5*r01);
IkReal x2671=(r11*sj5);
IkReal x2672=((1.0)*cj2);
IkReal x2673=(cj2*sj1);
IkReal x2674=(cj1*x2658);
IkReal x2675=(cj1*x2659);
evalcond[0]=(((sj4*x2661))+(((-1.0)*x2662*x2663))+(((-1.0)*r02*x2664))+x2659);
evalcond[1]=((((-1.0)*r12*x2664))+((sj4*x2665))+(((-1.0)*x2662*x2671))+(((-1.0)*x2658)));
evalcond[2]=((((-1.0)*x2668))+(((-1.0)*x2670))+((x2658*x2673))+((sj2*x2674)));
evalcond[3]=((((-1.0)*x2666))+(((-1.0)*x2667))+((x2659*x2673))+((sj2*x2675)));
evalcond[4]=(((x2658*x2669))+((cj4*x2663))+(((-1.0)*r02*x2662))+(((-1.0)*x2672*x2674))+(((-1.0)*x2661*x2664)));
evalcond[5]=((((-1.0)*r12*x2662))+((x2659*x2669))+((cj4*x2671))+(((-1.0)*x2672*x2675))+(((-1.0)*x2664*x2665)));
evalcond[6]=((((-1.0)*x2660*x2674))+(((0.117)*x2668))+(((0.353)*x2658*x2669))+(((0.117)*x2670))+(((0.139)*x2659))+(((-1.0)*px))+(((-0.43)*x2674)));
evalcond[7]=((((-1.0)*x2660*x2675))+(((0.117)*x2666))+(((0.117)*x2667))+(((-1.0)*py))+(((-0.43)*x2675))+(((0.353)*x2659*x2669))+(((-0.139)*x2658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2676=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x2676.valid){
continue;
}
CheckValue<IkReal> x2677 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2677.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2676.value)))+(x2677.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2678=IKcos(j0);
IkReal x2679=IKsin(j0);
IkReal x2680=((0.353)*cj2);
IkReal x2681=(r10*sj5);
IkReal x2682=(cj5*r11);
IkReal x2683=(cj2*sj1);
IkReal x2684=(r00*sj5);
IkReal x2685=(cj5*r01);
IkReal x2686=(cj1*x2678);
IkReal x2687=(cj1*x2679);
IkReal x2688=((0.353)*sj1*sj2);
evalcond[0]=(((x2678*x2683))+(((-1.0)*x2685))+(((-1.0)*x2684))+((sj2*x2686)));
evalcond[1]=((((-1.0)*x2681))+(((-1.0)*x2682))+((x2679*x2683))+((sj2*x2687)));
evalcond[2]=((((0.139)*x2679))+(((-1.0)*x2680*x2686))+(((0.117)*x2684))+(((0.117)*x2685))+(((-1.0)*px))+((x2678*x2688))+(((-0.43)*x2686)));
evalcond[3]=((((-1.0)*x2680*x2687))+(((0.117)*x2681))+(((0.117)*x2682))+(((-1.0)*py))+((x2679*x2688))+(((-0.43)*x2687))+(((-0.139)*x2678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2689=((1.0)*sj5);
IkReal x2690=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2689)));
j4eval[0]=x2690;
j4eval[1]=IKsign(x2690);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x2689))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2691=((1.0)*sj5);
IkReal x2692=((((-1.0)*r00*x2691))+(((-1.0)*cj5*r01)));
j4eval[0]=x2692;
j4eval[1]=IKsign(x2692);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x2691)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2693=((1.0)*sj5);
IkReal x2694=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2694;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x2693))+(((-1.0)*r11*sj0*x2693)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x2694);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2696 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2696)==0){
continue;
}
IkReal x2695=pow(x2696,-0.5);
CheckValue<IkReal> x2697 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2697.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2697.value));
IkReal gconst79=((-1.0)*r21*x2695);
IkReal gconst80=(r20*x2695);
CheckValue<IkReal> x2698 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2698.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2698.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2701 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2701.valid){
continue;
}
IkReal x2699=((-1.0)*(x2701.value));
IkReal x2700=x2695;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2699;
IkReal gconst78=x2699;
IkReal gconst79=((-1.0)*r21*x2700);
IkReal gconst80=(r20*x2700);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2704 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2704.valid){
continue;
}
IkReal x2702=((-1.0)*(x2704.value));
IkReal x2703=x2695;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2702;
IkReal gconst78=x2702;
IkReal gconst79=((-1.0)*r21*x2703);
IkReal gconst80=(r20*x2703);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2707 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2707.valid){
continue;
}
IkReal x2705=((-1.0)*(x2707.value));
IkReal x2706=x2695;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2705;
IkReal gconst78=x2705;
IkReal gconst79=((-1.0)*r21*x2706);
IkReal gconst80=(r20*x2706);
IkReal x2708=r22*r22;
CheckValue<IkReal> x2711=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2708))),-1);
if(!x2711.valid){
continue;
}
IkReal x2709=x2711.value;
IkReal x2710=(x2708+((x2709*(r20*r20*r20*r20)))+(((2.0)*x2709*(r20*r20)*(r21*r21)))+((x2709*(r21*r21*r21*r21))));
j4eval[0]=x2710;
j4eval[1]=IKsign(x2710);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2712=(gconst80*r20);
IkReal x2713=(gconst79*r21);
IkReal x2714=(cj2*sj1);
IkReal x2715=((1.0)*cj1*sj2);
CheckValue<IkReal> x2716 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2715))+(((-1.0)*r22*x2714)))),IkReal(((((-1.0)*x2712*x2715))+((cj1*sj2*x2713))+((x2713*x2714))+(((-1.0)*x2712*x2714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2716.valid){
continue;
}
CheckValue<IkReal> x2717=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2713*x2713)+(x2712*x2712)+(((-2.0)*x2712*x2713)))),-1);
if(!x2717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2716.value)+(((1.5707963267949)*(x2717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2718=IKsin(j4);
IkReal x2719=IKcos(j4);
IkReal x2720=((1.0)*cj2);
IkReal x2721=(gconst80*r20);
IkReal x2722=(sj1*sj2);
IkReal x2723=(gconst79*r21);
IkReal x2724=(gconst80*r10);
IkReal x2725=(gconst79*r01);
IkReal x2726=(gconst79*r11);
IkReal x2727=(gconst80*r00);
IkReal x2728=((1.0)*x2719);
IkReal x2729=((1.0)*x2718);
evalcond[0]=((((-1.0)*x2723*x2729))+(((-1.0)*r22*x2728))+((x2718*x2721)));
evalcond[1]=((((-1.0)*x2725*x2729))+sj0+((x2718*x2727))+(((-1.0)*r02*x2728)));
evalcond[2]=((((-1.0)*x2726*x2729))+(((-1.0)*r12*x2728))+((x2718*x2724))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2720))+(((-1.0)*cj1*sj2))+(((-1.0)*x2721*x2728))+(((-1.0)*r22*x2729))+((x2719*x2723)));
evalcond[4]=((((-1.0)*cj0*cj1*x2720))+(((-1.0)*x2727*x2728))+((x2719*x2725))+((cj0*x2722))+(((-1.0)*r02*x2729)));
evalcond[5]=((((-1.0)*x2724*x2728))+(((-1.0)*r12*x2729))+((x2719*x2726))+((sj0*x2722))+(((-1.0)*cj1*sj0*x2720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2730=((1.0)*gconst79);
CheckValue<IkReal> x2731=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst80*r01))+(((-1.0)*r00*x2730)))),-1);
if(!x2731.valid){
continue;
}
CheckValue<IkReal> x2732 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2730))+((cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2731.value)))+(x2732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2733=IKsin(j4);
IkReal x2734=IKcos(j4);
IkReal x2735=((1.0)*cj2);
IkReal x2736=(gconst80*r20);
IkReal x2737=(sj1*sj2);
IkReal x2738=(gconst79*r21);
IkReal x2739=(gconst80*r10);
IkReal x2740=(gconst79*r01);
IkReal x2741=(gconst79*r11);
IkReal x2742=(gconst80*r00);
IkReal x2743=((1.0)*x2734);
IkReal x2744=((1.0)*x2733);
evalcond[0]=((((-1.0)*x2738*x2744))+((x2733*x2736))+(((-1.0)*r22*x2743)));
evalcond[1]=(sj0+(((-1.0)*x2740*x2744))+((x2733*x2742))+(((-1.0)*r02*x2743)));
evalcond[2]=((((-1.0)*x2741*x2744))+(((-1.0)*r12*x2743))+((x2733*x2739))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2735))+(((-1.0)*cj1*sj2))+(((-1.0)*x2736*x2743))+((x2734*x2738))+(((-1.0)*r22*x2744)));
evalcond[4]=(((x2734*x2740))+((cj0*x2737))+(((-1.0)*cj0*cj1*x2735))+(((-1.0)*r02*x2744))+(((-1.0)*x2742*x2743)));
evalcond[5]=(((x2734*x2741))+(((-1.0)*cj1*sj0*x2735))+(((-1.0)*x2739*x2743))+(((-1.0)*r12*x2744))+((sj0*x2737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2745=((1.0)*gconst79);
CheckValue<IkReal> x2746=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2745))+(((-1.0)*gconst80*r11)))),-1);
if(!x2746.valid){
continue;
}
CheckValue<IkReal> x2747 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst80*r20*sj0))+(((-1.0)*r21*sj0*x2745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2746.value)))+(x2747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2748=IKsin(j4);
IkReal x2749=IKcos(j4);
IkReal x2750=((1.0)*cj2);
IkReal x2751=(gconst80*r20);
IkReal x2752=(sj1*sj2);
IkReal x2753=(gconst79*r21);
IkReal x2754=(gconst80*r10);
IkReal x2755=(gconst79*r01);
IkReal x2756=(gconst79*r11);
IkReal x2757=(gconst80*r00);
IkReal x2758=((1.0)*x2749);
IkReal x2759=((1.0)*x2748);
evalcond[0]=((((-1.0)*r22*x2758))+(((-1.0)*x2753*x2759))+((x2748*x2751)));
evalcond[1]=(sj0+((x2748*x2757))+(((-1.0)*x2755*x2759))+(((-1.0)*r02*x2758)));
evalcond[2]=((((-1.0)*x2756*x2759))+(((-1.0)*r12*x2758))+((x2748*x2754))+(((-1.0)*cj0)));
evalcond[3]=(((x2749*x2753))+(((-1.0)*r22*x2759))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2750))+(((-1.0)*x2751*x2758)));
evalcond[4]=(((x2749*x2755))+((cj0*x2752))+(((-1.0)*x2757*x2758))+(((-1.0)*cj0*cj1*x2750))+(((-1.0)*r02*x2759)));
evalcond[5]=(((x2749*x2756))+(((-1.0)*cj1*sj0*x2750))+(((-1.0)*r12*x2759))+((sj0*x2752))+(((-1.0)*x2754*x2758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2761 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2761)==0){
continue;
}
IkReal x2760=pow(x2761,-0.5);
CheckValue<IkReal> x2762 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2762.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2762.value))));
IkReal gconst82=((1.0)*r21*x2760);
IkReal gconst83=((-1.0)*r20*x2760);
CheckValue<IkReal> x2763 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2763.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2763.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2766 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2766.valid){
continue;
}
IkReal x2764=((1.0)*(x2766.value));
IkReal x2765=x2760;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2764)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2764)));
IkReal gconst82=((1.0)*r21*x2765);
IkReal gconst83=((-1.0)*r20*x2765);
IkReal x2767=r22*r22;
IkReal x2768=((1.0)*x2767);
CheckValue<IkReal> x2772=IKPowWithIntegerCheck(((-1.0)+x2767),-1);
if(!x2772.valid){
continue;
}
IkReal x2769=x2772.value;
if((((1.0)+(((-1.0)*x2768)))) < -0.00001)
continue;
IkReal x2770=IKsqrt(((1.0)+(((-1.0)*x2768))));
IkReal x2771=(sj0*x2769*x2770);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2771+(((-1.0)*x2768*x2771))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2775 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2775.valid){
continue;
}
IkReal x2773=((1.0)*(x2775.value));
IkReal x2774=x2760;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2773)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2773)));
IkReal gconst82=((1.0)*r21*x2774);
IkReal gconst83=((-1.0)*r20*x2774);
IkReal x2776=r22*r22;
IkReal x2777=((1.0)*x2776);
CheckValue<IkReal> x2781=IKPowWithIntegerCheck(((-1.0)+x2776),-1);
if(!x2781.valid){
continue;
}
IkReal x2778=x2781.value;
if((((1.0)+(((-1.0)*x2777)))) < -0.00001)
continue;
IkReal x2779=IKsqrt(((1.0)+(((-1.0)*x2777))));
IkReal x2780=(cj0*x2778*x2779);
j4eval[0]=((IKabs((x2780+(((-1.0)*x2777*x2780)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2784 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2784.valid){
continue;
}
IkReal x2782=((1.0)*(x2784.value));
IkReal x2783=x2760;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2782)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2782)));
IkReal gconst82=((1.0)*r21*x2783);
IkReal gconst83=((-1.0)*r20*x2783);
IkReal x2785=r22*r22;
IkReal x2786=(cj0*r02);
IkReal x2787=(r12*sj0);
CheckValue<IkReal> x2791=IKPowWithIntegerCheck(((-1.0)+x2785),-1);
if(!x2791.valid){
continue;
}
IkReal x2788=x2791.value;
if((((1.0)+(((-1.0)*x2785)))) < -0.00001)
continue;
IkReal x2789=IKsqrt(((1.0)+(((-1.0)*x2785))));
IkReal x2790=((1.0)*r22*x2788*x2789);
j4eval[0]=0;
j4eval[1]=((IKabs((x2787+x2786)))+(IKabs(((((-1.0)*x2787*x2790))+(((-1.0)*x2786*x2790))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2792=((1.0)*gconst82);
CheckValue<IkReal> x2793=IKPowWithIntegerCheck(IKsign((((gconst83*r21))+((gconst82*r20)))),-1);
if(!x2793.valid){
continue;
}
CheckValue<IkReal> x2794 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x2792))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*cj0*r01*x2792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2793.value)))+(x2794.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2795=IKsin(j4);
IkReal x2796=IKcos(j4);
IkReal x2797=(sj1*sj2);
IkReal x2798=((1.0)*cj2);
IkReal x2799=((1.0)*x2796);
IkReal x2800=(gconst83*x2795);
IkReal x2801=(gconst82*x2796);
IkReal x2802=((1.0)*x2795);
evalcond[0]=((((-1.0)*gconst82*r21*x2802))+((r20*x2800))+(((-1.0)*r22*x2799)));
evalcond[1]=(sj0+(((-1.0)*gconst82*r01*x2802))+((r00*x2800))+(((-1.0)*r02*x2799)));
evalcond[2]=(((r10*x2800))+(((-1.0)*gconst82*r11*x2802))+(((-1.0)*cj0))+(((-1.0)*r12*x2799)));
evalcond[3]=((((-1.0)*sj1*x2798))+(((-1.0)*gconst83*r20*x2799))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2802))+((r21*x2801)));
evalcond[4]=((((-1.0)*gconst83*r00*x2799))+(((-1.0)*r02*x2802))+((cj0*x2797))+((r01*x2801))+(((-1.0)*cj0*cj1*x2798)));
evalcond[5]=((((-1.0)*cj1*sj0*x2798))+(((-1.0)*r12*x2802))+((sj0*x2797))+(((-1.0)*gconst83*r10*x2799))+((r11*x2801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2803=((1.0)*gconst82);
CheckValue<IkReal> x2804=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2803))+(((-1.0)*gconst83*r01)))),-1);
if(!x2804.valid){
continue;
}
CheckValue<IkReal> x2805 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst83*r20))+(((-1.0)*cj0*r21*x2803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2804.value)))+(x2805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2806=IKsin(j4);
IkReal x2807=IKcos(j4);
IkReal x2808=(sj1*sj2);
IkReal x2809=((1.0)*cj2);
IkReal x2810=((1.0)*x2807);
IkReal x2811=(gconst83*x2806);
IkReal x2812=(gconst82*x2807);
IkReal x2813=((1.0)*x2806);
evalcond[0]=((((-1.0)*gconst82*r21*x2813))+(((-1.0)*r22*x2810))+((r20*x2811)));
evalcond[1]=(((r00*x2811))+(((-1.0)*r02*x2810))+sj0+(((-1.0)*gconst82*r01*x2813)));
evalcond[2]=((((-1.0)*r12*x2810))+((r10*x2811))+(((-1.0)*cj0))+(((-1.0)*gconst82*r11*x2813)));
evalcond[3]=((((-1.0)*sj1*x2809))+(((-1.0)*gconst83*r20*x2810))+(((-1.0)*cj1*sj2))+((r21*x2812))+(((-1.0)*r22*x2813)));
evalcond[4]=(((r01*x2812))+(((-1.0)*gconst83*r00*x2810))+(((-1.0)*r02*x2813))+(((-1.0)*cj0*cj1*x2809))+((cj0*x2808)));
evalcond[5]=((((-1.0)*r12*x2813))+(((-1.0)*cj1*sj0*x2809))+((r11*x2812))+(((-1.0)*gconst83*r10*x2810))+((sj0*x2808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2814=((1.0)*gconst82);
CheckValue<IkReal> x2815 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2814))+((gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2815.valid){
continue;
}
CheckValue<IkReal> x2816=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst83*r11))+(((-1.0)*r10*x2814)))),-1);
if(!x2816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2815.value)+(((1.5707963267949)*(x2816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2817=IKsin(j4);
IkReal x2818=IKcos(j4);
IkReal x2819=(sj1*sj2);
IkReal x2820=((1.0)*cj2);
IkReal x2821=((1.0)*x2818);
IkReal x2822=(gconst83*x2817);
IkReal x2823=(gconst82*x2818);
IkReal x2824=((1.0)*x2817);
evalcond[0]=(((r20*x2822))+(((-1.0)*r22*x2821))+(((-1.0)*gconst82*r21*x2824)));
evalcond[1]=(sj0+((r00*x2822))+(((-1.0)*r02*x2821))+(((-1.0)*gconst82*r01*x2824)));
evalcond[2]=((((-1.0)*r12*x2821))+((r10*x2822))+(((-1.0)*gconst82*r11*x2824))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst83*r20*x2821))+(((-1.0)*sj1*x2820))+(((-1.0)*cj1*sj2))+((r21*x2823))+(((-1.0)*r22*x2824)));
evalcond[4]=((((-1.0)*cj0*cj1*x2820))+(((-1.0)*r02*x2824))+((r01*x2823))+(((-1.0)*gconst83*r00*x2821))+((cj0*x2819)));
evalcond[5]=((((-1.0)*r12*x2824))+(((-1.0)*cj1*sj0*x2820))+(((-1.0)*gconst83*r10*x2821))+((sj0*x2819))+((r11*x2823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2825=((-1.0)*r00);
IkReal x2827 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2827)==0){
continue;
}
IkReal x2826=pow(x2827,-0.5);
CheckValue<IkReal> x2828 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2825),IKFAST_ATAN2_MAGTHRESH);
if(!x2828.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2828.value));
IkReal gconst85=(r01*x2826);
IkReal gconst86=(x2825*x2826);
CheckValue<IkReal> x2829 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2829.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2829.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2830=((-1.0)*r00);
IkReal x2831=x2826;
CheckValue<IkReal> x2833 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2830),IKFAST_ATAN2_MAGTHRESH);
if(!x2833.valid){
continue;
}
IkReal x2832=((-1.0)*(x2833.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2832;
IkReal gconst84=x2832;
IkReal gconst85=(r01*x2831);
IkReal gconst86=(x2830*x2831);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2834=((1.0)*gconst85);
CheckValue<IkReal> x2835 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*r11*sj0*x2834))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x2834)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2835.valid){
continue;
}
CheckValue<IkReal> x2836=IKPowWithIntegerCheck(IKsign((((gconst86*r21))+((gconst85*r20)))),-1);
if(!x2836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2835.value)+(((1.5707963267949)*(x2836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2837=IKsin(j4);
IkReal x2838=IKcos(j4);
IkReal x2839=((1.0)*cj2);
IkReal x2840=(sj1*sj2);
IkReal x2841=((1.0)*x2838);
IkReal x2842=(gconst86*x2837);
IkReal x2843=(gconst85*x2838);
IkReal x2844=((1.0)*x2837);
IkReal x2845=(gconst85*x2844);
evalcond[0]=((((-1.0)*r21*x2845))+((r20*x2842))+(((-1.0)*r22*x2841)));
evalcond[1]=(sj0+(((-1.0)*r01*x2845))+(((-1.0)*r02*x2841))+((r00*x2842)));
evalcond[2]=((((-1.0)*r12*x2841))+(((-1.0)*r11*x2845))+((r10*x2842))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x2843))+(((-1.0)*sj1*x2839))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst86*r20*x2841))+(((-1.0)*r22*x2844)));
evalcond[4]=((((-1.0)*cj0*cj1*x2839))+((cj0*x2840))+(((-1.0)*r02*x2844))+(((-1.0)*gconst86*r00*x2841))+((r01*x2843)));
evalcond[5]=((((-1.0)*cj1*sj0*x2839))+((r11*x2843))+(((-1.0)*r12*x2844))+((sj0*x2840))+(((-1.0)*gconst86*r10*x2841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2846=((1.0)*gconst85);
CheckValue<IkReal> x2847=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2846))+(((-1.0)*gconst86*r11)))),-1);
if(!x2847.valid){
continue;
}
CheckValue<IkReal> x2848 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst86*r20*sj0))+(((-1.0)*r21*sj0*x2846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2847.value)))+(x2848.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2849=IKsin(j4);
IkReal x2850=IKcos(j4);
IkReal x2851=((1.0)*cj2);
IkReal x2852=(sj1*sj2);
IkReal x2853=((1.0)*x2850);
IkReal x2854=(gconst86*x2849);
IkReal x2855=(gconst85*x2850);
IkReal x2856=((1.0)*x2849);
IkReal x2857=(gconst85*x2856);
evalcond[0]=((((-1.0)*r21*x2857))+((r20*x2854))+(((-1.0)*r22*x2853)));
evalcond[1]=(sj0+(((-1.0)*r01*x2857))+(((-1.0)*r02*x2853))+((r00*x2854)));
evalcond[2]=((((-1.0)*r11*x2857))+(((-1.0)*r12*x2853))+(((-1.0)*cj0))+((r10*x2854)));
evalcond[3]=(((r21*x2855))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2856))+(((-1.0)*gconst86*r20*x2853))+(((-1.0)*sj1*x2851)));
evalcond[4]=((((-1.0)*cj0*cj1*x2851))+(((-1.0)*r02*x2856))+((cj0*x2852))+(((-1.0)*gconst86*r00*x2853))+((r01*x2855)));
evalcond[5]=(((sj0*x2852))+(((-1.0)*gconst86*r10*x2853))+((r11*x2855))+(((-1.0)*cj1*sj0*x2851))+(((-1.0)*r12*x2856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2858=((-1.0)*r01);
IkReal x2860 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2860)==0){
continue;
}
IkReal x2859=pow(x2860,-0.5);
CheckValue<IkReal> x2861 = IKatan2WithCheck(IkReal(x2858),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2861.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2861.value))));
IkReal gconst88=(x2858*x2859);
IkReal gconst89=((1.0)*r00*x2859);
CheckValue<IkReal> x2862 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2862.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2862.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2863=((-1.0)*r01);
CheckValue<IkReal> x2866 = IKatan2WithCheck(IkReal(x2863),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2866.valid){
continue;
}
IkReal x2864=((1.0)*(x2866.value));
IkReal x2865=x2859;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2864)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2864)));
IkReal gconst88=(x2863*x2865);
IkReal gconst89=((1.0)*r00*x2865);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x2867=((-1.0)*r01);
CheckValue<IkReal> x2870 = IKatan2WithCheck(IkReal(x2867),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2870.valid){
continue;
}
IkReal x2868=((1.0)*(x2870.value));
IkReal x2869=x2859;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2868)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2868)));
IkReal gconst88=(x2867*x2869);
IkReal gconst89=((1.0)*r00*x2869);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2871=((-1.0)*r01);
CheckValue<IkReal> x2874 = IKatan2WithCheck(IkReal(x2871),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2874.valid){
continue;
}
IkReal x2872=((1.0)*(x2874.value));
IkReal x2873=x2859;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2872)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2872)));
IkReal gconst88=(x2871*x2873);
IkReal gconst89=((1.0)*r00*x2873);
IkReal x2875=r02*r02;
IkReal x2876=(r12*sj0);
IkReal x2877=x2859;
IkReal x2878=(cj0*x2877);
j4eval[0]=((IKabs((x2876+((cj0*r02)))))+(IKabs(((((-1.0)*x2878))+((x2875*x2878))+((r02*x2876*x2877))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2879=((1.0)*gconst88);
CheckValue<IkReal> x2880 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*cj0*r01*x2879))+(((-1.0)*r11*sj0*x2879))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2880.valid){
continue;
}
CheckValue<IkReal> x2881=IKPowWithIntegerCheck(IKsign((((gconst89*r21))+((gconst88*r20)))),-1);
if(!x2881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2880.value)+(((1.5707963267949)*(x2881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2882=IKsin(j4);
IkReal x2883=IKcos(j4);
IkReal x2884=((1.0)*cj1);
IkReal x2885=(gconst89*r10);
IkReal x2886=(sj1*sj2);
IkReal x2887=((1.0)*x2883);
IkReal x2888=(gconst88*x2883);
IkReal x2889=(gconst89*x2882);
IkReal x2890=((1.0)*x2882);
evalcond[0]=(((r20*x2889))+(((-1.0)*r22*x2887))+(((-1.0)*gconst88*r21*x2890)));
evalcond[1]=(sj0+(((-1.0)*gconst88*r01*x2890))+(((-1.0)*r02*x2887))+((r00*x2889)));
evalcond[2]=((((-1.0)*gconst88*r11*x2890))+((x2882*x2885))+(((-1.0)*r12*x2887))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2890))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst89*r20*x2887))+((r21*x2888))+(((-1.0)*sj2*x2884)));
evalcond[4]=((((-1.0)*cj0*cj2*x2884))+(((-1.0)*r02*x2890))+((cj0*x2886))+((r01*x2888))+(((-1.0)*gconst89*r00*x2887)));
evalcond[5]=(((r11*x2888))+(((-1.0)*cj2*sj0*x2884))+(((-1.0)*x2885*x2887))+((sj0*x2886))+(((-1.0)*r12*x2890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2891=((1.0)*gconst88);
CheckValue<IkReal> x2892=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r01))+(((-1.0)*r00*x2891)))),-1);
if(!x2892.valid){
continue;
}
CheckValue<IkReal> x2893 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst89*r20))+(((-1.0)*cj0*r21*x2891)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2892.value)))+(x2893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2894=IKsin(j4);
IkReal x2895=IKcos(j4);
IkReal x2896=((1.0)*cj1);
IkReal x2897=(gconst89*r10);
IkReal x2898=(sj1*sj2);
IkReal x2899=((1.0)*x2895);
IkReal x2900=(gconst88*x2895);
IkReal x2901=(gconst89*x2894);
IkReal x2902=((1.0)*x2894);
evalcond[0]=((((-1.0)*r22*x2899))+(((-1.0)*gconst88*r21*x2902))+((r20*x2901)));
evalcond[1]=(sj0+(((-1.0)*gconst88*r01*x2902))+(((-1.0)*r02*x2899))+((r00*x2901)));
evalcond[2]=(((x2894*x2897))+(((-1.0)*gconst88*r11*x2902))+(((-1.0)*cj0))+(((-1.0)*r12*x2899)));
evalcond[3]=((((-1.0)*gconst89*r20*x2899))+((r21*x2900))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2896))+(((-1.0)*r22*x2902)));
evalcond[4]=((((-1.0)*cj0*cj2*x2896))+(((-1.0)*r02*x2902))+(((-1.0)*gconst89*r00*x2899))+((cj0*x2898))+((r01*x2900)));
evalcond[5]=((((-1.0)*cj2*sj0*x2896))+((sj0*x2898))+(((-1.0)*x2897*x2899))+(((-1.0)*r12*x2902))+((r11*x2900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2903=((1.0)*gconst88);
CheckValue<IkReal> x2904 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst89*r20*sj0))+(((-1.0)*r21*sj0*x2903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2904.valid){
continue;
}
CheckValue<IkReal> x2905=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2903))+(((-1.0)*gconst89*r11)))),-1);
if(!x2905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2904.value)+(((1.5707963267949)*(x2905.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2906=IKsin(j4);
IkReal x2907=IKcos(j4);
IkReal x2908=((1.0)*cj1);
IkReal x2909=(gconst89*r10);
IkReal x2910=(sj1*sj2);
IkReal x2911=((1.0)*x2907);
IkReal x2912=(gconst88*x2907);
IkReal x2913=(gconst89*x2906);
IkReal x2914=((1.0)*x2906);
evalcond[0]=((((-1.0)*gconst88*r21*x2914))+((r20*x2913))+(((-1.0)*r22*x2911)));
evalcond[1]=(sj0+((r00*x2913))+(((-1.0)*gconst88*r01*x2914))+(((-1.0)*r02*x2911)));
evalcond[2]=((((-1.0)*gconst88*r11*x2914))+((x2906*x2909))+(((-1.0)*r12*x2911))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*gconst89*r20*x2911))+((r21*x2912))+(((-1.0)*sj2*x2908))+(((-1.0)*r22*x2914)));
evalcond[4]=(((cj0*x2910))+((r01*x2912))+(((-1.0)*gconst89*r00*x2911))+(((-1.0)*r02*x2914))+(((-1.0)*cj0*cj2*x2908)));
evalcond[5]=(((r11*x2912))+((sj0*x2910))+(((-1.0)*r12*x2914))+(((-1.0)*cj2*sj0*x2908))+(((-1.0)*x2909*x2911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2915=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2915;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x2915);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2916=((1.0)*sj5);
IkReal x2917=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2916)));
j4eval[0]=x2917;
j4eval[1]=IKsign(x2917);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x2916)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2918=cj5*cj5;
IkReal x2919=r01*r01;
IkReal x2920=(cj5*r00);
IkReal x2921=(r01*sj5);
IkReal x2922=((r02*r02)+(((-1.0)*x2918*x2919))+(((-2.0)*x2920*x2921))+((x2918*(r00*r00)))+x2919);
j4eval[0]=x2922;
j4eval[1]=((IKabs(r02))+(IKabs((x2921+(((-1.0)*x2920))))));
j4eval[2]=IKsign(x2922);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2923=cj5*cj5;
IkReal x2924=r01*r01;
IkReal x2925=(r01*sj5);
IkReal x2926=(cj5*r00);
CheckValue<IkReal> x2927 = IKatan2WithCheck(IkReal((x2925+(((-1.0)*x2926)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2927.valid){
continue;
}
CheckValue<IkReal> x2928=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2925*x2926))+(((-1.0)*x2923*x2924))+(r02*r02)+x2924+((x2923*(r00*r00))))),-1);
if(!x2928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2927.value)+(((1.5707963267949)*(x2928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2929=IKsin(j4);
IkReal x2930=IKcos(j4);
IkReal x2931=(cj5*r00);
IkReal x2932=((1.0)*cj1);
IkReal x2933=(cj5*r20);
IkReal x2934=(cj5*r10);
IkReal x2935=((1.0)*x2930);
IkReal x2936=(sj5*x2930);
IkReal x2937=((1.0)*x2929);
IkReal x2938=(sj5*x2937);
evalcond[0]=(((x2929*x2933))+(((-1.0)*r22*x2935))+(((-1.0)*r21*x2938)));
evalcond[1]=(((x2929*x2934))+(((-1.0)*r11*x2938))+(((-1.0)*r12*x2935)));
evalcond[2]=((((-1.0)*x2931*x2935))+((r01*x2936))+(((-1.0)*r02*x2937)));
evalcond[3]=((1.0)+((x2929*x2931))+(((-1.0)*r01*x2938))+(((-1.0)*r02*x2935)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x2932))+(((-1.0)*r12*x2937))+(((-1.0)*x2934*x2935))+((r11*x2936)));
evalcond[5]=((((-1.0)*x2933*x2935))+((r21*x2936))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2932))+(((-1.0)*r22*x2937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2939=((1.0)*sj5);
CheckValue<IkReal> x2940=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2939)))),-1);
if(!x2940.valid){
continue;
}
CheckValue<IkReal> x2941 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2940.value)))+(x2941.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2942=IKsin(j4);
IkReal x2943=IKcos(j4);
IkReal x2944=(cj5*r00);
IkReal x2945=((1.0)*cj1);
IkReal x2946=(cj5*r20);
IkReal x2947=(cj5*r10);
IkReal x2948=((1.0)*x2943);
IkReal x2949=(sj5*x2943);
IkReal x2950=((1.0)*x2942);
IkReal x2951=(sj5*x2950);
evalcond[0]=((((-1.0)*r21*x2951))+(((-1.0)*r22*x2948))+((x2942*x2946)));
evalcond[1]=((((-1.0)*r12*x2948))+(((-1.0)*r11*x2951))+((x2942*x2947)));
evalcond[2]=((((-1.0)*r02*x2950))+((r01*x2949))+(((-1.0)*x2944*x2948)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2948))+(((-1.0)*r01*x2951))+((x2942*x2944)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x2947*x2948))+((r11*x2949))+(((-1.0)*r12*x2950))+(((-1.0)*cj2*x2945)));
evalcond[5]=(((r21*x2949))+(((-1.0)*cj2*sj1))+(((-1.0)*x2946*x2948))+(((-1.0)*r22*x2950))+(((-1.0)*sj2*x2945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2952 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2952.valid){
continue;
}
CheckValue<IkReal> x2953=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2952.value)+(((1.5707963267949)*(x2953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2954=IKsin(j4);
IkReal x2955=IKcos(j4);
IkReal x2956=(cj5*r00);
IkReal x2957=((1.0)*cj1);
IkReal x2958=(cj5*r20);
IkReal x2959=(cj5*r10);
IkReal x2960=((1.0)*x2955);
IkReal x2961=(sj5*x2955);
IkReal x2962=((1.0)*x2954);
IkReal x2963=(sj5*x2962);
evalcond[0]=(((x2954*x2958))+(((-1.0)*r21*x2963))+(((-1.0)*r22*x2960)));
evalcond[1]=((((-1.0)*r11*x2963))+((x2954*x2959))+(((-1.0)*r12*x2960)));
evalcond[2]=((((-1.0)*r02*x2962))+((r01*x2961))+(((-1.0)*x2956*x2960)));
evalcond[3]=((1.0)+((x2954*x2956))+(((-1.0)*r02*x2960))+(((-1.0)*r01*x2963)));
evalcond[4]=(((sj1*sj2))+((r11*x2961))+(((-1.0)*x2959*x2960))+(((-1.0)*cj2*x2957))+(((-1.0)*r12*x2962)));
evalcond[5]=(((r21*x2961))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2957))+(((-1.0)*r22*x2962))+(((-1.0)*x2958*x2960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2964=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2964;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x2964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2965=((1.0)*sj5);
IkReal x2966=((((-1.0)*r20*x2965))+(((-1.0)*cj5*r21)));
j4eval[0]=x2966;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r11*x2965))+((cj5*r10))))));
j4eval[2]=IKsign(x2966);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2967=cj5*cj5;
IkReal x2968=r01*r01;
IkReal x2969=(r01*sj5);
IkReal x2970=(cj5*r00);
IkReal x2971=((((-1.0)*x2968))+(((2.0)*x2969*x2970))+(((-1.0)*(r02*r02)))+((x2967*x2968))+(((-1.0)*x2967*(r00*r00))));
j4eval[0]=x2971;
j4eval[1]=IKsign(x2971);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2970))+x2969))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2972=cj5*cj5;
IkReal x2973=r01*r01;
IkReal x2974=(r01*sj5);
IkReal x2975=(cj5*r00);
CheckValue<IkReal> x2976 = IKatan2WithCheck(IkReal(((((-1.0)*x2975))+x2974)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2976.valid){
continue;
}
CheckValue<IkReal> x2977=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2973))+(((-1.0)*(r02*r02)))+(((2.0)*x2974*x2975))+(((-1.0)*x2972*(r00*r00)))+((x2972*x2973)))),-1);
if(!x2977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2976.value)+(((1.5707963267949)*(x2977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2978=IKsin(j4);
IkReal x2979=IKcos(j4);
IkReal x2980=(cj5*r00);
IkReal x2981=((1.0)*sj2);
IkReal x2982=(cj5*r20);
IkReal x2983=(cj5*r10);
IkReal x2984=((1.0)*x2979);
IkReal x2985=(sj5*x2979);
IkReal x2986=((1.0)*x2978);
IkReal x2987=(sj5*x2986);
evalcond[0]=(((x2978*x2982))+(((-1.0)*r21*x2987))+(((-1.0)*r22*x2984)));
evalcond[1]=((((-1.0)*r12*x2984))+(((-1.0)*r11*x2987))+((x2978*x2983)));
evalcond[2]=(((r01*x2985))+(((-1.0)*x2980*x2984))+(((-1.0)*r02*x2986)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x2987))+((x2978*x2980))+(((-1.0)*r02*x2984)));
evalcond[4]=(((r11*x2985))+(((-1.0)*r12*x2986))+(((-1.0)*sj1*x2981))+(((-1.0)*x2983*x2984))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x2982*x2984))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2981))+(((-1.0)*r22*x2986))+((r21*x2985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2988=((1.0)*sj5);
CheckValue<IkReal> x2989=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2988))+(((-1.0)*cj5*r21)))),-1);
if(!x2989.valid){
continue;
}
CheckValue<IkReal> x2990 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x2988)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2989.value)))+(x2990.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2991=IKsin(j4);
IkReal x2992=IKcos(j4);
IkReal x2993=(cj5*r00);
IkReal x2994=((1.0)*sj2);
IkReal x2995=(cj5*r20);
IkReal x2996=(cj5*r10);
IkReal x2997=((1.0)*x2992);
IkReal x2998=(sj5*x2992);
IkReal x2999=((1.0)*x2991);
IkReal x3000=(sj5*x2999);
evalcond[0]=((((-1.0)*r22*x2997))+((x2991*x2995))+(((-1.0)*r21*x3000)));
evalcond[1]=((((-1.0)*r12*x2997))+(((-1.0)*r11*x3000))+((x2991*x2996)));
evalcond[2]=(((r01*x2998))+(((-1.0)*x2993*x2997))+(((-1.0)*r02*x2999)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x3000))+((x2991*x2993))+(((-1.0)*r02*x2997)));
evalcond[4]=((((-1.0)*x2996*x2997))+(((-1.0)*sj1*x2994))+(((-1.0)*r12*x2999))+((cj1*cj2))+((r11*x2998)));
evalcond[5]=((((-1.0)*x2995*x2997))+(((-1.0)*r22*x2999))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2994))+((r21*x2998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3001=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3001.valid){
continue;
}
CheckValue<IkReal> x3002 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3001.value)))+(x3002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3003=IKsin(j4);
IkReal x3004=IKcos(j4);
IkReal x3005=(cj5*r00);
IkReal x3006=((1.0)*sj2);
IkReal x3007=(cj5*r20);
IkReal x3008=(cj5*r10);
IkReal x3009=((1.0)*x3004);
IkReal x3010=(sj5*x3004);
IkReal x3011=((1.0)*x3003);
IkReal x3012=(sj5*x3011);
evalcond[0]=((((-1.0)*r22*x3009))+((x3003*x3007))+(((-1.0)*r21*x3012)));
evalcond[1]=(((x3003*x3008))+(((-1.0)*r12*x3009))+(((-1.0)*r11*x3012)));
evalcond[2]=(((r01*x3010))+(((-1.0)*r02*x3011))+(((-1.0)*x3005*x3009)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3009))+(((-1.0)*r01*x3012))+((x3003*x3005)));
evalcond[4]=((((-1.0)*r12*x3011))+((r11*x3010))+((cj1*cj2))+(((-1.0)*sj1*x3006))+(((-1.0)*x3008*x3009)));
evalcond[5]=((((-1.0)*r22*x3011))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3006))+(((-1.0)*x3007*x3009))+((r21*x3010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3013=((-1.0)*r10);
IkReal x3015 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3015)==0){
continue;
}
IkReal x3014=pow(x3015,-0.5);
CheckValue<IkReal> x3016 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3013),IKFAST_ATAN2_MAGTHRESH);
if(!x3016.valid){
continue;
}
IkReal gconst90=((-1.0)*(x3016.value));
IkReal gconst91=(r11*x3014);
IkReal gconst92=(x3013*x3014);
CheckValue<IkReal> x3017 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3017.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3017.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3018=((-1.0)*r10);
IkReal x3019=x3014;
CheckValue<IkReal> x3021 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3018),IKFAST_ATAN2_MAGTHRESH);
if(!x3021.valid){
continue;
}
IkReal x3020=((-1.0)*(x3021.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x3020;
IkReal gconst90=x3020;
IkReal gconst91=(r11*x3019);
IkReal gconst92=(x3018*x3019);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3022=((1.0)*gconst91);
CheckValue<IkReal> x3023=IKPowWithIntegerCheck(IKsign((((gconst91*r20))+((gconst92*r21)))),-1);
if(!x3023.valid){
continue;
}
CheckValue<IkReal> x3024 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x3022))+((cj0*gconst92*r00))+(((-1.0)*cj0*r01*x3022))+((gconst92*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3023.value)))+(x3024.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3025=IKsin(j4);
IkReal x3026=IKcos(j4);
IkReal x3027=((1.0)*cj2);
IkReal x3028=(gconst92*r00);
IkReal x3029=(sj1*sj2);
IkReal x3030=((1.0)*x3026);
IkReal x3031=(gconst91*x3026);
IkReal x3032=((1.0)*x3025);
IkReal x3033=(gconst92*x3025);
IkReal x3034=(gconst91*x3032);
evalcond[0]=((((-1.0)*r21*x3034))+(((-1.0)*r22*x3030))+((r20*x3033)));
evalcond[1]=(sj0+(((-1.0)*r01*x3034))+(((-1.0)*r02*x3030))+((x3025*x3028)));
evalcond[2]=((((-1.0)*r11*x3034))+(((-1.0)*r12*x3030))+((r10*x3033))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst92*r20*x3030))+(((-1.0)*sj1*x3027))+(((-1.0)*cj1*sj2))+((r21*x3031))+(((-1.0)*r22*x3032)));
evalcond[4]=((((-1.0)*cj0*cj1*x3027))+((r01*x3031))+(((-1.0)*r02*x3032))+(((-1.0)*x3028*x3030))+((cj0*x3029)));
evalcond[5]=(((sj0*x3029))+((r11*x3031))+(((-1.0)*gconst92*r10*x3030))+(((-1.0)*r12*x3032))+(((-1.0)*cj1*sj0*x3027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3035=((1.0)*gconst91);
CheckValue<IkReal> x3036=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3035))+(((-1.0)*gconst92*r01)))),-1);
if(!x3036.valid){
continue;
}
CheckValue<IkReal> x3037 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst92*r20))+(((-1.0)*cj0*r21*x3035)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3036.value)))+(x3037.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3038=IKsin(j4);
IkReal x3039=IKcos(j4);
IkReal x3040=((1.0)*cj2);
IkReal x3041=(gconst92*r00);
IkReal x3042=(sj1*sj2);
IkReal x3043=((1.0)*x3039);
IkReal x3044=(gconst91*x3039);
IkReal x3045=((1.0)*x3038);
IkReal x3046=(gconst92*x3038);
IkReal x3047=(gconst91*x3045);
evalcond[0]=((((-1.0)*r22*x3043))+(((-1.0)*r21*x3047))+((r20*x3046)));
evalcond[1]=(sj0+(((-1.0)*r01*x3047))+((x3038*x3041))+(((-1.0)*r02*x3043)));
evalcond[2]=(((r10*x3046))+(((-1.0)*r12*x3043))+(((-1.0)*r11*x3047))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3044))+(((-1.0)*r22*x3045))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3040))+(((-1.0)*gconst92*r20*x3043)));
evalcond[4]=((((-1.0)*cj0*cj1*x3040))+(((-1.0)*x3041*x3043))+(((-1.0)*r02*x3045))+((cj0*x3042))+((r01*x3044)));
evalcond[5]=((((-1.0)*r12*x3045))+(((-1.0)*cj1*sj0*x3040))+((sj0*x3042))+(((-1.0)*gconst92*r10*x3043))+((r11*x3044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3048=((-1.0)*r11);
IkReal x3050 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3050)==0){
continue;
}
IkReal x3049=pow(x3050,-0.5);
CheckValue<IkReal> x3051 = IKatan2WithCheck(IkReal(x3048),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3051.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x3051.value))));
IkReal gconst94=(x3048*x3049);
IkReal gconst95=((1.0)*r10*x3049);
CheckValue<IkReal> x3052 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3052.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3052.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3053=((-1.0)*r11);
CheckValue<IkReal> x3056 = IKatan2WithCheck(IkReal(x3053),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3056.valid){
continue;
}
IkReal x3054=((1.0)*(x3056.value));
IkReal x3055=x3049;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3054)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3054)));
IkReal gconst94=(x3053*x3055);
IkReal gconst95=((1.0)*r10*x3055);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3057=((-1.0)*r11);
CheckValue<IkReal> x3060 = IKatan2WithCheck(IkReal(x3057),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3060.valid){
continue;
}
IkReal x3058=((1.0)*(x3060.value));
IkReal x3059=x3049;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3058)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3058)));
IkReal gconst94=(x3057*x3059);
IkReal gconst95=((1.0)*r10*x3059);
IkReal x3061=r12*r12;
IkReal x3062=(cj0*r02);
IkReal x3063=x3049;
IkReal x3064=(sj0*x3063);
j4eval[0]=((IKabs((x3062+((r12*sj0)))))+(IKabs(((((-1.0)*x3064))+((x3061*x3064))+((r12*x3062*x3063))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3065=((-1.0)*r11);
CheckValue<IkReal> x3068 = IKatan2WithCheck(IkReal(x3065),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3068.valid){
continue;
}
IkReal x3066=((1.0)*(x3068.value));
IkReal x3067=x3049;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3066)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3066)));
IkReal gconst94=(x3065*x3067);
IkReal gconst95=((1.0)*r10*x3067);
IkReal x3069=r12*r12;
IkReal x3070=((1.0)*r22);
IkReal x3071=(cj1*sj2);
IkReal x3072=(cj2*sj1);
CheckValue<IkReal> x3076=IKPowWithIntegerCheck(((-1.0)+x3069),-1);
if(!x3076.valid){
continue;
}
IkReal x3073=x3076.value;
if((((1.0)+(((-1.0)*x3069)))) < -0.00001)
continue;
IkReal x3074=IKsqrt(((1.0)+(((-1.0)*x3069))));
IkReal x3075=(r12*x3073*x3074);
j4eval[0]=((IKabs(((((-1.0)*x3070*x3072))+(((-1.0)*x3070*x3071)))))+(IKabs(((((-1.0)*x3070*x3071*x3075))+(((-1.0)*x3070*x3072*x3075))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3077=(cj2*sj1);
IkReal x3078=(gconst95*r20);
IkReal x3079=(cj1*sj2);
IkReal x3080=((1.0)*r22);
IkReal x3081=(gconst94*r21);
CheckValue<IkReal> x3082 = IKatan2WithCheck(IkReal(((((-1.0)*x3079*x3080))+(((-1.0)*x3077*x3080)))),IkReal(((((-1.0)*x3078*x3079))+((x3079*x3081))+(((-1.0)*x3077*x3078))+((x3077*x3081)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3082.valid){
continue;
}
CheckValue<IkReal> x3083=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3078*x3081))+(r22*r22)+(x3081*x3081)+(x3078*x3078))),-1);
if(!x3083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3082.value)+(((1.5707963267949)*(x3083.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3084=IKsin(j4);
IkReal x3085=IKcos(j4);
IkReal x3086=((1.0)*cj2);
IkReal x3087=(gconst95*r10);
IkReal x3088=(sj1*sj2);
IkReal x3089=((1.0)*x3085);
IkReal x3090=(gconst95*x3084);
IkReal x3091=(gconst94*x3085);
IkReal x3092=((1.0)*x3084);
IkReal x3093=(gconst94*x3092);
evalcond[0]=(((r20*x3090))+(((-1.0)*r21*x3093))+(((-1.0)*r22*x3089)));
evalcond[1]=(sj0+((r00*x3090))+(((-1.0)*r01*x3093))+(((-1.0)*r02*x3089)));
evalcond[2]=((((-1.0)*r11*x3093))+((x3084*x3087))+(((-1.0)*r12*x3089))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x3092))+(((-1.0)*gconst95*r20*x3089))+((r21*x3091))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3086)));
evalcond[4]=(((r01*x3091))+(((-1.0)*r02*x3092))+((cj0*x3088))+(((-1.0)*gconst95*r00*x3089))+(((-1.0)*cj0*cj1*x3086)));
evalcond[5]=((((-1.0)*cj1*sj0*x3086))+((sj0*x3088))+(((-1.0)*r12*x3092))+((r11*x3091))+(((-1.0)*x3087*x3089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3094=((1.0)*gconst94);
CheckValue<IkReal> x3095=IKPowWithIntegerCheck(IKsign((((gconst95*r21))+((gconst94*r20)))),-1);
if(!x3095.valid){
continue;
}
CheckValue<IkReal> x3096 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst95*r10*sj0))+(((-1.0)*r11*sj0*x3094))+(((-1.0)*cj0*r01*x3094))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3095.value)))+(x3096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3097=IKsin(j4);
IkReal x3098=IKcos(j4);
IkReal x3099=((1.0)*cj2);
IkReal x3100=(gconst95*r10);
IkReal x3101=(sj1*sj2);
IkReal x3102=((1.0)*x3098);
IkReal x3103=(gconst95*x3097);
IkReal x3104=(gconst94*x3098);
IkReal x3105=((1.0)*x3097);
IkReal x3106=(gconst94*x3105);
evalcond[0]=((((-1.0)*r22*x3102))+((r20*x3103))+(((-1.0)*r21*x3106)));
evalcond[1]=(sj0+(((-1.0)*r01*x3106))+((r00*x3103))+(((-1.0)*r02*x3102)));
evalcond[2]=(((x3097*x3100))+(((-1.0)*r11*x3106))+(((-1.0)*r12*x3102))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r21*x3104))+(((-1.0)*sj1*x3099))+(((-1.0)*r22*x3105))+(((-1.0)*gconst95*r20*x3102)));
evalcond[4]=((((-1.0)*cj0*cj1*x3099))+(((-1.0)*gconst95*r00*x3102))+((cj0*x3101))+((r01*x3104))+(((-1.0)*r02*x3105)));
evalcond[5]=(((sj0*x3101))+((r11*x3104))+(((-1.0)*r12*x3105))+(((-1.0)*cj1*sj0*x3099))+(((-1.0)*x3100*x3102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3107=((1.0)*gconst94);
CheckValue<IkReal> x3108 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3107))+((cj0*gconst95*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3108.valid){
continue;
}
CheckValue<IkReal> x3109=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r01))+(((-1.0)*r00*x3107)))),-1);
if(!x3109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3108.value)+(((1.5707963267949)*(x3109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3110=IKsin(j4);
IkReal x3111=IKcos(j4);
IkReal x3112=((1.0)*cj2);
IkReal x3113=(gconst95*r10);
IkReal x3114=(sj1*sj2);
IkReal x3115=((1.0)*x3111);
IkReal x3116=(gconst95*x3110);
IkReal x3117=(gconst94*x3111);
IkReal x3118=((1.0)*x3110);
IkReal x3119=(gconst94*x3118);
evalcond[0]=((((-1.0)*r21*x3119))+(((-1.0)*r22*x3115))+((r20*x3116)));
evalcond[1]=((((-1.0)*r02*x3115))+sj0+(((-1.0)*r01*x3119))+((r00*x3116)));
evalcond[2]=((((-1.0)*r12*x3115))+(((-1.0)*r11*x3119))+((x3110*x3113))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x3112))+(((-1.0)*cj1*sj2))+((r21*x3117))+(((-1.0)*r22*x3118))+(((-1.0)*gconst95*r20*x3115)));
evalcond[4]=((((-1.0)*r02*x3118))+(((-1.0)*gconst95*r00*x3115))+(((-1.0)*cj0*cj1*x3112))+((cj0*x3114))+((r01*x3117)));
evalcond[5]=((((-1.0)*x3113*x3115))+((sj0*x3114))+(((-1.0)*r12*x3118))+((r11*x3117))+(((-1.0)*cj1*sj0*x3112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3120=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3120;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x3120);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3121=((1.0)*sj5);
IkReal x3122=((((-1.0)*r00*x3121))+(((-1.0)*cj5*r01)));
j4eval[0]=x3122;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x3121))))));
j4eval[2]=IKsign(x3122);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3123=cj5*cj5;
IkReal x3124=r11*r11;
IkReal x3125=(cj5*r10);
IkReal x3126=(r11*sj5);
IkReal x3127=((((-1.0)*x3124))+(((2.0)*x3125*x3126))+(((-1.0)*x3123*(r10*r10)))+(((-1.0)*(r12*r12)))+((x3123*x3124)));
j4eval[0]=x3127;
j4eval[1]=((IKabs((x3126+(((-1.0)*x3125)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3127);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3128=cj5*cj5;
IkReal x3129=r11*r11;
IkReal x3130=(cj5*r10);
IkReal x3131=(r11*sj5);
CheckValue<IkReal> x3132=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3128*(r10*r10)))+(((-1.0)*x3129))+(((-1.0)*(r12*r12)))+(((2.0)*x3130*x3131))+((x3128*x3129)))),-1);
if(!x3132.valid){
continue;
}
CheckValue<IkReal> x3133 = IKatan2WithCheck(IkReal((x3131+(((-1.0)*x3130)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x3133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3132.value)))+(x3133.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3134=IKsin(j4);
IkReal x3135=IKcos(j4);
IkReal x3136=(cj5*r00);
IkReal x3137=((1.0)*cj1);
IkReal x3138=((1.0)*x3135);
IkReal x3139=(sj5*x3135);
IkReal x3140=(cj5*x3134);
IkReal x3141=((1.0)*x3134);
IkReal x3142=(sj5*x3141);
evalcond[0]=(((r20*x3140))+(((-1.0)*r21*x3142))+(((-1.0)*r22*x3138)));
evalcond[1]=((((-1.0)*r02*x3138))+((x3134*x3136))+(((-1.0)*r01*x3142)));
evalcond[2]=((((-1.0)*r12*x3141))+(((-1.0)*cj5*r10*x3138))+((r11*x3139)));
evalcond[3]=((-1.0)+((r10*x3140))+(((-1.0)*r11*x3142))+(((-1.0)*r12*x3138)));
evalcond[4]=(((r01*x3139))+(((-1.0)*x3136*x3138))+((sj1*sj2))+(((-1.0)*r02*x3141))+(((-1.0)*cj2*x3137)));
evalcond[5]=((((-1.0)*r22*x3141))+(((-1.0)*sj2*x3137))+(((-1.0)*cj2*sj1))+((r21*x3139))+(((-1.0)*cj5*r20*x3138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3143=((1.0)*sj5);
CheckValue<IkReal> x3144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3143))+(((-1.0)*cj5*r01)))),-1);
if(!x3144.valid){
continue;
}
CheckValue<IkReal> x3145 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x3143)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3144.value)))+(x3145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3146=IKsin(j4);
IkReal x3147=IKcos(j4);
IkReal x3148=(cj5*r00);
IkReal x3149=((1.0)*cj1);
IkReal x3150=((1.0)*x3147);
IkReal x3151=(sj5*x3147);
IkReal x3152=(cj5*x3146);
IkReal x3153=((1.0)*x3146);
IkReal x3154=(sj5*x3153);
evalcond[0]=((((-1.0)*r22*x3150))+((r20*x3152))+(((-1.0)*r21*x3154)));
evalcond[1]=(((x3146*x3148))+(((-1.0)*r02*x3150))+(((-1.0)*r01*x3154)));
evalcond[2]=(((r11*x3151))+(((-1.0)*cj5*r10*x3150))+(((-1.0)*r12*x3153)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x3154))+((r10*x3152))+(((-1.0)*r12*x3150)));
evalcond[4]=((((-1.0)*x3148*x3150))+((sj1*sj2))+((r01*x3151))+(((-1.0)*r02*x3153))+(((-1.0)*cj2*x3149)));
evalcond[5]=((((-1.0)*r22*x3153))+(((-1.0)*cj5*r20*x3150))+(((-1.0)*cj2*sj1))+((r21*x3151))+(((-1.0)*sj2*x3149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3155=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3155.valid){
continue;
}
CheckValue<IkReal> x3156 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3155.value)))+(x3156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3157=IKsin(j4);
IkReal x3158=IKcos(j4);
IkReal x3159=(cj5*r00);
IkReal x3160=((1.0)*cj1);
IkReal x3161=((1.0)*x3158);
IkReal x3162=(sj5*x3158);
IkReal x3163=(cj5*x3157);
IkReal x3164=((1.0)*x3157);
IkReal x3165=(sj5*x3164);
evalcond[0]=(((r20*x3163))+(((-1.0)*r21*x3165))+(((-1.0)*r22*x3161)));
evalcond[1]=(((x3157*x3159))+(((-1.0)*r02*x3161))+(((-1.0)*r01*x3165)));
evalcond[2]=((((-1.0)*r12*x3164))+((r11*x3162))+(((-1.0)*cj5*r10*x3161)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3161))+((r10*x3163))+(((-1.0)*r11*x3165)));
evalcond[4]=(((sj1*sj2))+((r01*x3162))+(((-1.0)*r02*x3164))+(((-1.0)*x3159*x3161))+(((-1.0)*cj2*x3160)));
evalcond[5]=((((-1.0)*cj5*r20*x3161))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x3160))+((r21*x3162))+(((-1.0)*r22*x3164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3166=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3166;
j4eval[1]=IKsign(x3166);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3167=((1.0)*sj5);
IkReal x3168=((((-1.0)*cj5*r21))+(((-1.0)*r20*x3167)));
j4eval[0]=x3168;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x3167))+((cj5*r00))))));
j4eval[2]=IKsign(x3168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3169=cj5*cj5;
IkReal x3170=r11*r11;
IkReal x3171=(r11*sj5);
IkReal x3172=(cj5*r10);
IkReal x3173=(x3170+(r12*r12)+(((-1.0)*x3169*x3170))+(((-2.0)*x3171*x3172))+((x3169*(r10*r10))));
j4eval[0]=x3173;
j4eval[1]=IKsign(x3173);
j4eval[2]=((IKabs(r12))+(IKabs((x3171+(((-1.0)*x3172))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3174=cj5*cj5;
IkReal x3175=r11*r11;
IkReal x3176=(cj5*r10);
IkReal x3177=(r11*sj5);
CheckValue<IkReal> x3178=IKPowWithIntegerCheck(IKsign((x3175+(r12*r12)+(((-1.0)*x3174*x3175))+((x3174*(r10*r10)))+(((-2.0)*x3176*x3177)))),-1);
if(!x3178.valid){
continue;
}
CheckValue<IkReal> x3179 = IKatan2WithCheck(IkReal((x3177+(((-1.0)*x3176)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x3179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3178.value)))+(x3179.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3180=IKsin(j4);
IkReal x3181=IKcos(j4);
IkReal x3182=(cj5*r00);
IkReal x3183=((1.0)*sj2);
IkReal x3184=((1.0)*x3181);
IkReal x3185=(sj5*x3181);
IkReal x3186=(cj5*x3180);
IkReal x3187=((1.0)*x3180);
IkReal x3188=(sj5*x3187);
evalcond[0]=((((-1.0)*r22*x3184))+(((-1.0)*r21*x3188))+((r20*x3186)));
evalcond[1]=((((-1.0)*r02*x3184))+((x3180*x3182))+(((-1.0)*r01*x3188)));
evalcond[2]=((((-1.0)*cj5*r10*x3184))+((r11*x3185))+(((-1.0)*r12*x3187)));
evalcond[3]=((1.0)+(((-1.0)*r11*x3188))+(((-1.0)*r12*x3184))+((r10*x3186)));
evalcond[4]=((((-1.0)*r02*x3187))+((r01*x3185))+(((-1.0)*x3182*x3184))+((cj1*cj2))+(((-1.0)*sj1*x3183)));
evalcond[5]=((((-1.0)*r22*x3187))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3183))+((r21*x3185))+(((-1.0)*cj5*r20*x3184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3189=((1.0)*sj5);
CheckValue<IkReal> x3190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3189))+(((-1.0)*cj5*r21)))),-1);
if(!x3190.valid){
continue;
}
CheckValue<IkReal> x3191 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x3189))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3190.value)))+(x3191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3192=IKsin(j4);
IkReal x3193=IKcos(j4);
IkReal x3194=(cj5*r00);
IkReal x3195=((1.0)*sj2);
IkReal x3196=((1.0)*x3193);
IkReal x3197=(sj5*x3193);
IkReal x3198=(cj5*x3192);
IkReal x3199=((1.0)*x3192);
IkReal x3200=(sj5*x3199);
evalcond[0]=((((-1.0)*r22*x3196))+((r20*x3198))+(((-1.0)*r21*x3200)));
evalcond[1]=((((-1.0)*r01*x3200))+(((-1.0)*r02*x3196))+((x3192*x3194)));
evalcond[2]=(((r11*x3197))+(((-1.0)*r12*x3199))+(((-1.0)*cj5*r10*x3196)));
evalcond[3]=((1.0)+(((-1.0)*r11*x3200))+(((-1.0)*r12*x3196))+((r10*x3198)));
evalcond[4]=(((r01*x3197))+(((-1.0)*r02*x3199))+(((-1.0)*sj1*x3195))+((cj1*cj2))+(((-1.0)*x3194*x3196)));
evalcond[5]=((((-1.0)*r22*x3199))+((r21*x3197))+(((-1.0)*cj5*r20*x3196))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3201=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3201.valid){
continue;
}
CheckValue<IkReal> x3202 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3201.value)))+(x3202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3203=IKsin(j4);
IkReal x3204=IKcos(j4);
IkReal x3205=(cj5*r00);
IkReal x3206=((1.0)*sj2);
IkReal x3207=((1.0)*x3204);
IkReal x3208=(sj5*x3204);
IkReal x3209=(cj5*x3203);
IkReal x3210=((1.0)*x3203);
IkReal x3211=(sj5*x3210);
evalcond[0]=((((-1.0)*r21*x3211))+((r20*x3209))+(((-1.0)*r22*x3207)));
evalcond[1]=((((-1.0)*r02*x3207))+(((-1.0)*r01*x3211))+((x3203*x3205)));
evalcond[2]=(((r11*x3208))+(((-1.0)*r12*x3210))+(((-1.0)*cj5*r10*x3207)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3207))+(((-1.0)*r11*x3211))+((r10*x3209)));
evalcond[4]=(((r01*x3208))+(((-1.0)*sj1*x3206))+((cj1*cj2))+(((-1.0)*r02*x3210))+(((-1.0)*x3205*x3207)));
evalcond[5]=((((-1.0)*cj5*r20*x3207))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3206))+(((-1.0)*r22*x3210))+((r21*x3208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3212=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3212);
rxp0_2=(py*r00);
rxp1_0=(r21*x3212);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3213=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3213);
rxp0_2=(py*r00);
rxp1_0=(r21*x3213);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3214=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3214);
rxp0_2=(py*r00);
rxp1_0=(r21*x3214);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3217=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x3217.valid){
continue;
}
IkReal x3215=x3217.value;
IkReal x3216=(cj0*x3215);
cj4array[0]=(((cj1*cj2*x3216))+(((-1.0)*sj1*sj2*x3216)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3218=IKsin(j4);
IkReal x3219=IKcos(j4);
IkReal x3220=(cj5*r20);
IkReal x3221=((1.0)*x3219);
IkReal x3222=((1.0)*sj5*x3218);
evalcond[0]=((-1.0)*r12*x3218);
evalcond[1]=((((-1.0)*r12*x3221))+(((-1.0)*cj0)));
evalcond[2]=(((x3218*x3220))+(((-1.0)*r21*x3222)));
evalcond[3]=(((cj5*r00*x3218))+(((-1.0)*r01*x3222)));
evalcond[4]=(((r21*sj5*x3219))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x3220*x3221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3224=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3224.valid){
continue;
}
IkReal x3223=x3224.value;
cj4array[0]=(((cj1*sj2*x3223))+((cj2*sj1*x3223)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3225=IKsin(j4);
IkReal x3226=IKcos(j4);
IkReal x3227=(cj5*r00);
IkReal x3228=(r01*sj5);
IkReal x3229=((1.0)*cj0);
IkReal x3230=((1.0)*x3226);
IkReal x3231=((1.0)*x3225);
evalcond[0]=((-1.0)*r12*x3225);
evalcond[1]=((((-1.0)*r12*x3230))+(((-1.0)*x3229)));
evalcond[2]=((((-1.0)*r21*sj5*x3231))+((cj5*r20*x3225)));
evalcond[3]=((((-1.0)*x3228*x3231))+((x3225*x3227)));
evalcond[4]=((((-1.0)*cj1*cj2*x3229))+(((-1.0)*x3227*x3230))+((x3226*x3228))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3232=IKPowWithIntegerCheck(r12,-1);
if(!x3232.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x3232.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3233=IKsin(j4);
IkReal x3234=IKcos(j4);
IkReal x3235=(r01*sj5);
IkReal x3236=((1.0)*cj1);
IkReal x3237=(r21*sj5);
IkReal x3238=((1.0)*x3233);
IkReal x3239=(cj5*x3233);
IkReal x3240=((1.0)*cj5*x3234);
evalcond[0]=((-1.0)*r12*x3233);
evalcond[1]=((((-1.0)*x3237*x3238))+((r20*x3239)));
evalcond[2]=((((-1.0)*x3235*x3238))+((r00*x3239)));
evalcond[3]=((((-1.0)*r20*x3240))+((x3234*x3237))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x3236)));
evalcond[4]=((((-1.0)*cj0*cj2*x3236))+((x3234*x3235))+(((-1.0)*r00*x3240))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3241=((1.0)*sj5);
CheckValue<IkReal> x3242=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3242.valid){
continue;
}
CheckValue<IkReal> x3243 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x3241))+(((-1.0)*r11*sj0*x3241)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3242.value)))+(x3243.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3244=IKsin(j4);
IkReal x3245=IKcos(j4);
IkReal x3246=(cj5*r00);
IkReal x3247=((1.0)*cj1);
IkReal x3248=(sj1*sj2);
IkReal x3249=((1.0)*x3245);
IkReal x3250=(sj5*x3245);
IkReal x3251=(cj5*x3244);
IkReal x3252=((1.0)*x3244);
IkReal x3253=(sj5*x3252);
evalcond[0]=((((-1.0)*r21*x3253))+((r20*x3251))+(((-1.0)*r22*x3249)));
evalcond[1]=(sj0+(((-1.0)*r02*x3249))+((x3244*x3246))+(((-1.0)*r01*x3253)));
evalcond[2]=(((r10*x3251))+(((-1.0)*r12*x3249))+(((-1.0)*r11*x3253))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj5*r20*x3249))+(((-1.0)*cj2*sj1))+((r21*x3250))+(((-1.0)*r22*x3252))+(((-1.0)*sj2*x3247)));
evalcond[4]=((((-1.0)*r02*x3252))+((r01*x3250))+(((-1.0)*x3246*x3249))+((cj0*x3248))+(((-1.0)*cj0*cj2*x3247)));
evalcond[5]=((((-1.0)*cj5*r10*x3249))+(((-1.0)*cj2*sj0*x3247))+((r11*x3250))+(((-1.0)*r12*x3252))+((sj0*x3248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3254=((1.0)*sj5);
CheckValue<IkReal> x3255 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3254))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3255.valid){
continue;
}
CheckValue<IkReal> x3256=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x3254)))),-1);
if(!x3256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3255.value)+(((1.5707963267949)*(x3256.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3257=IKsin(j4);
IkReal x3258=IKcos(j4);
IkReal x3259=(cj5*r00);
IkReal x3260=((1.0)*cj1);
IkReal x3261=(sj1*sj2);
IkReal x3262=((1.0)*x3258);
IkReal x3263=(sj5*x3258);
IkReal x3264=(cj5*x3257);
IkReal x3265=((1.0)*x3257);
IkReal x3266=(sj5*x3265);
evalcond[0]=((((-1.0)*r21*x3266))+((r20*x3264))+(((-1.0)*r22*x3262)));
evalcond[1]=(sj0+(((-1.0)*r01*x3266))+(((-1.0)*r02*x3262))+((x3257*x3259)));
evalcond[2]=((((-1.0)*r11*x3266))+(((-1.0)*r12*x3262))+((r10*x3264))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3263))+(((-1.0)*cj5*r20*x3262))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x3260))+(((-1.0)*r22*x3265)));
evalcond[4]=((((-1.0)*cj0*cj2*x3260))+((r01*x3263))+(((-1.0)*r02*x3265))+(((-1.0)*x3259*x3262))+((cj0*x3261)));
evalcond[5]=((((-1.0)*cj5*r10*x3262))+((sj0*x3261))+(((-1.0)*r12*x3265))+(((-1.0)*cj2*sj0*x3260))+((r11*x3263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3267=((1.0)*sj5);
CheckValue<IkReal> x3268=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3267)))),-1);
if(!x3268.valid){
continue;
}
CheckValue<IkReal> x3269 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3268.value)))+(x3269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3270=IKsin(j4);
IkReal x3271=IKcos(j4);
IkReal x3272=(cj5*r00);
IkReal x3273=((1.0)*cj1);
IkReal x3274=(sj1*sj2);
IkReal x3275=((1.0)*x3271);
IkReal x3276=(sj5*x3271);
IkReal x3277=(cj5*x3270);
IkReal x3278=((1.0)*x3270);
IkReal x3279=(sj5*x3278);
evalcond[0]=((((-1.0)*r21*x3279))+((r20*x3277))+(((-1.0)*r22*x3275)));
evalcond[1]=(sj0+(((-1.0)*r01*x3279))+(((-1.0)*r02*x3275))+((x3270*x3272)));
evalcond[2]=((((-1.0)*r12*x3275))+(((-1.0)*r11*x3279))+((r10*x3277))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3276))+(((-1.0)*cj5*r20*x3275))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x3273))+(((-1.0)*r22*x3278)));
evalcond[4]=(((cj0*x3274))+(((-1.0)*x3272*x3275))+((r01*x3276))+(((-1.0)*cj0*cj2*x3273))+(((-1.0)*r02*x3278)));
evalcond[5]=((((-1.0)*r12*x3278))+((sj0*x3274))+(((-1.0)*cj2*sj0*x3273))+((r11*x3276))+(((-1.0)*cj5*r10*x3275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3280=((1.0)*cj5);
IkReal x3281=((1.0)*sj5);
IkReal x3282=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x3282;
j0eval[1]=((IKabs(((((-1.0)*r10*x3281))+(((-1.0)*r11*x3280)))))+(IKabs(((((-1.0)*r01*x3280))+(((-1.0)*r00*x3281))))));
j0eval[2]=IKsign(x3282);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3283=r21*r21;
IkReal x3284=cj5*cj5;
IkReal x3285=(cj2*sj1);
IkReal x3286=(cj1*sj2);
IkReal x3287=((1.0)*r22);
IkReal x3288=(r21*sj5);
IkReal x3289=((1.0)*cj5*r20);
IkReal x3290=((((-1.0)*x3284*(r20*r20)))+(((-1.0)*r22*x3287))+(((2.0)*cj5*r20*x3288))+((x3283*x3284))+(((-1.0)*x3283)));
j4eval[0]=x3290;
j4eval[1]=((IKabs(((((-1.0)*x3286*x3287))+(((-1.0)*x3285*x3287)))))+(IKabs((((x3285*x3288))+((x3286*x3288))+(((-1.0)*x3286*x3289))+(((-1.0)*x3285*x3289))))));
j4eval[2]=IKsign(x3290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3291=cj1*cj1;
IkReal x3292=(cj2*sj2);
IkReal x3293=(cj1*sj1);
j0eval[0]=((((-2.0)*x3293*(cj2*cj2)))+(((-1.21813031161473)*sj2*x3291))+x3292+x3293+(((-2.0)*x3291*x3292))+(((-1.21813031161473)*cj2*x3293)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.219794120902579)*px))+(((-1.23812083932892)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.219794120902579)*py))+(((-1.23812083932892)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.219794120902579)*px))+(((-1.23812083932892)*py))))+IKsqr(((((-0.219794120902579)*py))+(((-1.23812083932892)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.219794120902579)*px))+(((-1.23812083932892)*py))), ((((-0.219794120902579)*py))+(((-1.23812083932892)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3294=IKsin(j0);
IkReal x3295=IKcos(j0);
evalcond[0]=((((0.139)*x3294))+(((-1.0)*px))+(((-0.783)*x3295)));
evalcond[1]=((((-1.0)*py))+(((-0.139)*x3295))+(((-0.783)*x3294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3296=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3296;
j4eval[1]=IKsign(x3296);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3297=((1.0)*sj5);
IkReal x3298=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3297)));
j4eval[0]=x3298;
j4eval[1]=IKsign(x3298);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3297))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3299=((1.0)*sj5);
IkReal x3300=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3299)));
j4eval[0]=x3300;
j4eval[1]=IKsign(x3300);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3299))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3301=((1.0)*sj5);
CheckValue<IkReal> x3302 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3301))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3302.valid){
continue;
}
CheckValue<IkReal> x3303=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3301)))),-1);
if(!x3303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3302.value)+(((1.5707963267949)*(x3303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3304=IKcos(j4);
IkReal x3305=IKsin(j4);
IkReal x3306=((1.0)*cj0);
IkReal x3307=(r11*sj5);
IkReal x3308=(r21*sj5);
IkReal x3309=(r01*sj5);
IkReal x3310=((1.0)*x3304);
IkReal x3311=(cj5*x3304);
IkReal x3312=((1.0)*x3305);
IkReal x3313=(cj5*x3305);
evalcond[0]=(((r22*x3305))+(((-1.0)*x3308*x3310))+((r20*x3311)));
evalcond[1]=((((-1.0)*r22*x3310))+(((-1.0)*x3308*x3312))+((r20*x3313)));
evalcond[2]=(sj0+(((-1.0)*x3309*x3312))+(((-1.0)*r02*x3310))+((r00*x3313)));
evalcond[3]=(((r02*x3305))+(((-1.0)*x3306))+(((-1.0)*x3309*x3310))+((r00*x3311)));
evalcond[4]=((((-1.0)*sj0))+((r10*x3311))+((r12*x3305))+(((-1.0)*x3307*x3310)));
evalcond[5]=(((r10*x3313))+(((-1.0)*x3306))+(((-1.0)*r12*x3310))+(((-1.0)*x3307*x3312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3314=((1.0)*sj5);
CheckValue<IkReal> x3315 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3315.valid){
continue;
}
CheckValue<IkReal> x3316=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3314)))),-1);
if(!x3316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3315.value)+(((1.5707963267949)*(x3316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3317=IKcos(j4);
IkReal x3318=IKsin(j4);
IkReal x3319=((1.0)*cj0);
IkReal x3320=(r11*sj5);
IkReal x3321=(r21*sj5);
IkReal x3322=(r01*sj5);
IkReal x3323=((1.0)*x3317);
IkReal x3324=(cj5*x3317);
IkReal x3325=((1.0)*x3318);
IkReal x3326=(cj5*x3318);
evalcond[0]=(((r20*x3324))+(((-1.0)*x3321*x3323))+((r22*x3318)));
evalcond[1]=(((r20*x3326))+(((-1.0)*x3321*x3325))+(((-1.0)*r22*x3323)));
evalcond[2]=(sj0+(((-1.0)*r02*x3323))+((r00*x3326))+(((-1.0)*x3322*x3325)));
evalcond[3]=(((r02*x3318))+((r00*x3324))+(((-1.0)*x3319))+(((-1.0)*x3322*x3323)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3320*x3323))+((r12*x3318))+((r10*x3324)));
evalcond[5]=((((-1.0)*x3319))+(((-1.0)*x3320*x3325))+(((-1.0)*r12*x3323))+((r10*x3326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3327 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3327.valid){
continue;
}
CheckValue<IkReal> x3328=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3327.value)+(((1.5707963267949)*(x3328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3329=IKcos(j4);
IkReal x3330=IKsin(j4);
IkReal x3331=((1.0)*cj0);
IkReal x3332=(r11*sj5);
IkReal x3333=(r21*sj5);
IkReal x3334=(r01*sj5);
IkReal x3335=((1.0)*x3329);
IkReal x3336=(cj5*x3329);
IkReal x3337=((1.0)*x3330);
IkReal x3338=(cj5*x3330);
evalcond[0]=(((r22*x3330))+(((-1.0)*x3333*x3335))+((r20*x3336)));
evalcond[1]=((((-1.0)*r22*x3335))+(((-1.0)*x3333*x3337))+((r20*x3338)));
evalcond[2]=(sj0+(((-1.0)*r02*x3335))+(((-1.0)*x3334*x3337))+((r00*x3338)));
evalcond[3]=(((r02*x3330))+(((-1.0)*x3331))+(((-1.0)*x3334*x3335))+((r00*x3336)));
evalcond[4]=((((-1.0)*sj0))+((r10*x3336))+((r12*x3330))+(((-1.0)*x3332*x3335)));
evalcond[5]=(((r10*x3338))+(((-1.0)*x3331))+(((-1.0)*x3332*x3337))+(((-1.0)*r12*x3335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.5049504950495)*px))+(((-3.04950495049505)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-5.5049504950495)*py))+(((-3.04950495049505)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.5049504950495)*px))+(((-3.04950495049505)*py))))+IKsqr(((((-5.5049504950495)*py))+(((-3.04950495049505)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.5049504950495)*px))+(((-3.04950495049505)*py))), ((((-5.5049504950495)*py))+(((-3.04950495049505)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3339=IKsin(j0);
IkReal x3340=IKcos(j0);
evalcond[0]=((((-0.077)*x3340))+(((0.139)*x3339))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.139)*x3340))+(((-0.077)*x3339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3341=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3341;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3341);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3342=((1.0)*sj5);
IkReal x3343=((((-1.0)*cj5*r01))+(((-1.0)*r00*x3342)));
j4eval[0]=x3343;
j4eval[1]=IKsign(x3343);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3342))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3344=cj5*cj5;
IkReal x3345=((1.0)*r21);
IkReal x3346=(cj5*r20);
IkReal x3347=(((r01*r21*x3344))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3344))+((r01*sj5*x3346))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3345)));
j4eval[0]=x3347;
j4eval[1]=IKsign(x3347);
j4eval[2]=((IKabs((((cj0*x3346))+(((-1.0)*cj0*sj5*x3345)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3348=cj5*cj5;
IkReal x3349=((1.0)*r21);
IkReal x3350=(cj5*r20);
CheckValue<IkReal> x3351 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3349))+((cj0*x3350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3351.valid){
continue;
}
CheckValue<IkReal> x3352=IKPowWithIntegerCheck(IKsign((((r01*r21*x3348))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3348))+((r01*sj5*x3350))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3349)))),-1);
if(!x3352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3351.value)+(((1.5707963267949)*(x3352.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3353=IKcos(j4);
IkReal x3354=IKsin(j4);
IkReal x3355=(r11*sj5);
IkReal x3356=(r21*sj5);
IkReal x3357=(r01*sj5);
IkReal x3358=((1.0)*x3353);
IkReal x3359=((1.0)*x3354);
IkReal x3360=(cj5*x3353);
IkReal x3361=(cj5*x3354);
evalcond[0]=((((-1.0)*x3356*x3358))+((r20*x3360))+((r22*x3354)));
evalcond[1]=((((-1.0)*x3356*x3359))+((r20*x3361))+(((-1.0)*r22*x3358)));
evalcond[2]=(cj0+((r00*x3360))+(((-1.0)*x3357*x3358))+((r02*x3354)));
evalcond[3]=(((r12*x3354))+sj0+((r10*x3360))+(((-1.0)*x3355*x3358)));
evalcond[4]=(sj0+(((-1.0)*r02*x3358))+((r00*x3361))+(((-1.0)*x3357*x3359)));
evalcond[5]=(((r10*x3361))+(((-1.0)*x3355*x3359))+(((-1.0)*r12*x3358))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3362=((1.0)*sj5);
CheckValue<IkReal> x3363=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3362))+(((-1.0)*cj5*r01)))),-1);
if(!x3363.valid){
continue;
}
CheckValue<IkReal> x3364 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3362)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3363.value)))+(x3364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3365=IKcos(j4);
IkReal x3366=IKsin(j4);
IkReal x3367=(r11*sj5);
IkReal x3368=(r21*sj5);
IkReal x3369=(r01*sj5);
IkReal x3370=((1.0)*x3365);
IkReal x3371=((1.0)*x3366);
IkReal x3372=(cj5*x3365);
IkReal x3373=(cj5*x3366);
evalcond[0]=(((r22*x3366))+((r20*x3372))+(((-1.0)*x3368*x3370)));
evalcond[1]=((((-1.0)*r22*x3370))+((r20*x3373))+(((-1.0)*x3368*x3371)));
evalcond[2]=(((r02*x3366))+cj0+(((-1.0)*x3369*x3370))+((r00*x3372)));
evalcond[3]=(((r10*x3372))+sj0+(((-1.0)*x3367*x3370))+((r12*x3366)));
evalcond[4]=(sj0+(((-1.0)*r02*x3370))+(((-1.0)*x3369*x3371))+((r00*x3373)));
evalcond[5]=(((r10*x3373))+(((-1.0)*x3367*x3371))+(((-1.0)*r12*x3370))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3374 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3374.valid){
continue;
}
CheckValue<IkReal> x3375=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3374.value)+(((1.5707963267949)*(x3375.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3376=IKcos(j4);
IkReal x3377=IKsin(j4);
IkReal x3378=(r11*sj5);
IkReal x3379=(r21*sj5);
IkReal x3380=(r01*sj5);
IkReal x3381=((1.0)*x3376);
IkReal x3382=((1.0)*x3377);
IkReal x3383=(cj5*x3376);
IkReal x3384=(cj5*x3377);
evalcond[0]=(((r20*x3383))+((r22*x3377))+(((-1.0)*x3379*x3381)));
evalcond[1]=((((-1.0)*r22*x3381))+((r20*x3384))+(((-1.0)*x3379*x3382)));
evalcond[2]=(cj0+(((-1.0)*x3380*x3381))+((r02*x3377))+((r00*x3383)));
evalcond[3]=(((r12*x3377))+(((-1.0)*x3378*x3381))+sj0+((r10*x3383)));
evalcond[4]=(sj0+(((-1.0)*x3380*x3382))+(((-1.0)*r02*x3381))+((r00*x3384)));
evalcond[5]=((((-1.0)*x3378*x3382))+((r10*x3384))+(((-1.0)*r12*x3381))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3385=((1.0)*sj5);
IkReal x3386=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x3385))+(((-1.0)*r11*x3386)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x3385))+(((-1.0)*r01*x3386)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x3385))+(((-1.0)*r11*x3386))))+IKsqr(((((-1.0)*r00*x3385))+(((-1.0)*r01*x3386))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x3385))+(((-1.0)*r11*x3386))), ((((-1.0)*r00*x3385))+(((-1.0)*r01*x3386))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3387=IKsin(j0);
IkReal x3388=IKcos(j0);
IkReal x3389=(r00*sj5);
IkReal x3390=(r10*sj5);
IkReal x3391=(cj5*r11);
IkReal x3392=(cj5*r01);
evalcond[0]=(x3388+x3389+x3392);
evalcond[1]=(x3387+x3391+x3390);
evalcond[2]=((((0.139)*x3387))+(((0.117)*x3389))+(((0.117)*x3392))+(((-1.0)*px)));
evalcond[3]=((((-0.139)*x3388))+(((0.117)*x3391))+(((0.117)*x3390))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3393=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3393;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x3393);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3394=((1.0)*sj5);
IkReal x3395=((((-1.0)*cj5*r01))+(((-1.0)*r00*x3394)));
j4eval[0]=x3395;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x3394)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3396=cj5*cj5;
IkReal x3397=r01*r01;
IkReal x3398=(r01*sj5);
IkReal x3399=(cj5*r00);
IkReal x3400=((((2.0)*x3398*x3399))+(((-1.0)*(r02*r02)))+(((-1.0)*x3397))+((x3396*x3397))+(((-1.0)*x3396*(r00*r00))));
j4eval[0]=x3400;
j4eval[1]=IKsign(x3400);
j4eval[2]=((IKabs((((sj0*x3399))+(((-1.0)*sj0*x3398)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3401=cj5*cj5;
IkReal x3402=r01*r01;
IkReal x3403=(r01*sj5);
IkReal x3404=(cj5*r00);
CheckValue<IkReal> x3405 = IKatan2WithCheck(IkReal((((sj0*x3404))+(((-1.0)*sj0*x3403)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3405.valid){
continue;
}
CheckValue<IkReal> x3406=IKPowWithIntegerCheck(IKsign(((((2.0)*x3403*x3404))+(((-1.0)*x3402))+(((-1.0)*x3401*(r00*r00)))+(((-1.0)*(r02*r02)))+((x3401*x3402)))),-1);
if(!x3406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3405.value)+(((1.5707963267949)*(x3406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3407=IKcos(j4);
IkReal x3408=IKsin(j4);
IkReal x3409=(r11*sj5);
IkReal x3410=(r21*sj5);
IkReal x3411=(cj5*r20);
IkReal x3412=(cj5*r00);
IkReal x3413=(r01*sj5);
IkReal x3414=(cj5*r10);
IkReal x3415=((1.0)*x3407);
IkReal x3416=((1.0)*x3408);
evalcond[0]=(((r02*x3408))+((x3407*x3412))+(((-1.0)*x3413*x3415)));
evalcond[1]=(((r12*x3408))+((x3407*x3414))+(((-1.0)*x3409*x3415)));
evalcond[2]=((((-1.0)*r22*x3415))+((x3408*x3411))+(((-1.0)*x3410*x3416)));
evalcond[3]=((-1.0)+((r22*x3408))+((x3407*x3411))+(((-1.0)*x3410*x3415)));
evalcond[4]=(sj0+((x3408*x3412))+(((-1.0)*r02*x3415))+(((-1.0)*x3413*x3416)));
evalcond[5]=(((x3408*x3414))+(((-1.0)*r12*x3415))+(((-1.0)*x3409*x3416))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3417=((1.0)*sj5);
CheckValue<IkReal> x3418=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x3417)))),-1);
if(!x3418.valid){
continue;
}
CheckValue<IkReal> x3419 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x3417)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3418.value)))+(x3419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3420=IKcos(j4);
IkReal x3421=IKsin(j4);
IkReal x3422=(r11*sj5);
IkReal x3423=(r21*sj5);
IkReal x3424=(cj5*r20);
IkReal x3425=(cj5*r00);
IkReal x3426=(r01*sj5);
IkReal x3427=(cj5*r10);
IkReal x3428=((1.0)*x3420);
IkReal x3429=((1.0)*x3421);
evalcond[0]=((((-1.0)*x3426*x3428))+((x3420*x3425))+((r02*x3421)));
evalcond[1]=(((x3420*x3427))+(((-1.0)*x3422*x3428))+((r12*x3421)));
evalcond[2]=(((x3421*x3424))+(((-1.0)*r22*x3428))+(((-1.0)*x3423*x3429)));
evalcond[3]=((-1.0)+((x3420*x3424))+(((-1.0)*x3423*x3428))+((r22*x3421)));
evalcond[4]=(sj0+(((-1.0)*x3426*x3429))+((x3421*x3425))+(((-1.0)*r02*x3428)));
evalcond[5]=((((-1.0)*r12*x3428))+((x3421*x3427))+(((-1.0)*x3422*x3429))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3430 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3430.valid){
continue;
}
CheckValue<IkReal> x3431=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3430.value)+(((1.5707963267949)*(x3431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3432=IKcos(j4);
IkReal x3433=IKsin(j4);
IkReal x3434=(r11*sj5);
IkReal x3435=(r21*sj5);
IkReal x3436=(cj5*r20);
IkReal x3437=(cj5*r00);
IkReal x3438=(r01*sj5);
IkReal x3439=(cj5*r10);
IkReal x3440=((1.0)*x3432);
IkReal x3441=((1.0)*x3433);
evalcond[0]=((((-1.0)*x3438*x3440))+((x3432*x3437))+((r02*x3433)));
evalcond[1]=((((-1.0)*x3434*x3440))+((x3432*x3439))+((r12*x3433)));
evalcond[2]=((((-1.0)*x3435*x3441))+((x3433*x3436))+(((-1.0)*r22*x3440)));
evalcond[3]=((-1.0)+(((-1.0)*x3435*x3440))+((x3432*x3436))+((r22*x3433)));
evalcond[4]=(sj0+(((-1.0)*x3438*x3441))+((x3433*x3437))+(((-1.0)*r02*x3440)));
evalcond[5]=((((-1.0)*x3434*x3441))+((x3433*x3439))+(((-1.0)*r12*x3440))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.965747238240812)*px))+(((2.45258111582019)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.965747238240812)*py))+(((2.45258111582019)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.965747238240812)*px))+(((2.45258111582019)*py))))+IKsqr(((((-0.965747238240812)*py))+(((2.45258111582019)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.965747238240812)*px))+(((2.45258111582019)*py))), ((((-0.965747238240812)*py))+(((2.45258111582019)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3442=IKsin(j0);
IkReal x3443=IKcos(j0);
evalcond[0]=((((0.353)*x3443))+(((-1.0)*px))+(((0.139)*x3442)));
evalcond[1]=((((-0.139)*x3443))+(((0.353)*x3442))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3444=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3444;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3444);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3445=((1.0)*sj5);
IkReal x3446=((((-1.0)*cj5*r01))+(((-1.0)*r00*x3445)));
j4eval[0]=x3446;
j4eval[1]=IKsign(x3446);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3445))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3447=cj5*cj5;
IkReal x3448=((1.0)*r21);
IkReal x3449=(cj5*r20);
IkReal x3450=(((r01*sj5*x3449))+(((-1.0)*r02*r22))+((r01*r21*x3447))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x3447))+(((-1.0)*r01*x3448)));
j4eval[0]=x3450;
j4eval[1]=IKsign(x3450);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x3448))+((cj0*x3449))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3451=cj5*cj5;
IkReal x3452=((1.0)*r21);
IkReal x3453=(cj5*r20);
CheckValue<IkReal> x3454=IKPowWithIntegerCheck(IKsign((((r01*sj5*x3453))+(((-1.0)*r01*x3452))+(((-1.0)*r02*r22))+((r01*r21*x3451))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x3451)))),-1);
if(!x3454.valid){
continue;
}
CheckValue<IkReal> x3455 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3452))+((cj0*x3453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3454.value)))+(x3455.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3456=IKcos(j4);
IkReal x3457=IKsin(j4);
IkReal x3458=(r11*sj5);
IkReal x3459=(r21*sj5);
IkReal x3460=(r01*sj5);
IkReal x3461=((1.0)*x3456);
IkReal x3462=((1.0)*x3457);
IkReal x3463=(cj5*x3456);
IkReal x3464=(cj5*x3457);
evalcond[0]=(((r22*x3457))+((r20*x3463))+(((-1.0)*x3459*x3461)));
evalcond[1]=(((r20*x3464))+(((-1.0)*r22*x3461))+(((-1.0)*x3459*x3462)));
evalcond[2]=(cj0+(((-1.0)*x3460*x3461))+((r00*x3463))+((r02*x3457)));
evalcond[3]=(sj0+((r12*x3457))+(((-1.0)*x3458*x3461))+((r10*x3463)));
evalcond[4]=(sj0+(((-1.0)*r02*x3461))+(((-1.0)*x3460*x3462))+((r00*x3464)));
evalcond[5]=((((-1.0)*x3458*x3462))+(((-1.0)*r12*x3461))+((r10*x3464))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3465=((1.0)*sj5);
CheckValue<IkReal> x3466 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3465)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3466.valid){
continue;
}
CheckValue<IkReal> x3467=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3465))+(((-1.0)*cj5*r01)))),-1);
if(!x3467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3466.value)+(((1.5707963267949)*(x3467.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3468=IKcos(j4);
IkReal x3469=IKsin(j4);
IkReal x3470=(r11*sj5);
IkReal x3471=(r21*sj5);
IkReal x3472=(r01*sj5);
IkReal x3473=((1.0)*x3468);
IkReal x3474=((1.0)*x3469);
IkReal x3475=(cj5*x3468);
IkReal x3476=(cj5*x3469);
evalcond[0]=((((-1.0)*x3471*x3473))+((r20*x3475))+((r22*x3469)));
evalcond[1]=((((-1.0)*x3471*x3474))+((r20*x3476))+(((-1.0)*r22*x3473)));
evalcond[2]=(cj0+(((-1.0)*x3472*x3473))+((r00*x3475))+((r02*x3469)));
evalcond[3]=(sj0+((r12*x3469))+((r10*x3475))+(((-1.0)*x3470*x3473)));
evalcond[4]=(sj0+(((-1.0)*r02*x3473))+(((-1.0)*x3472*x3474))+((r00*x3476)));
evalcond[5]=((((-1.0)*r12*x3473))+((r10*x3476))+(((-1.0)*x3470*x3474))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3477 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3477.valid){
continue;
}
CheckValue<IkReal> x3478=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3477.value)+(((1.5707963267949)*(x3478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3479=IKcos(j4);
IkReal x3480=IKsin(j4);
IkReal x3481=(r11*sj5);
IkReal x3482=(r21*sj5);
IkReal x3483=(r01*sj5);
IkReal x3484=((1.0)*x3479);
IkReal x3485=((1.0)*x3480);
IkReal x3486=(cj5*x3479);
IkReal x3487=(cj5*x3480);
evalcond[0]=((((-1.0)*x3482*x3484))+((r20*x3486))+((r22*x3480)));
evalcond[1]=((((-1.0)*x3482*x3485))+((r20*x3487))+(((-1.0)*r22*x3484)));
evalcond[2]=((((-1.0)*x3483*x3484))+cj0+((r00*x3486))+((r02*x3480)));
evalcond[3]=(sj0+(((-1.0)*x3481*x3484))+((r10*x3486))+((r12*x3480)));
evalcond[4]=((((-1.0)*x3483*x3485))+sj0+(((-1.0)*r02*x3484))+((r00*x3487)));
evalcond[5]=((((-1.0)*x3481*x3485))+(((-1.0)*r12*x3484))+((r10*x3487))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3488=IKsin(j0);
IkReal x3489=IKcos(j0);
IkReal x3490=(r00*sj5);
IkReal x3491=(r10*sj5);
IkReal x3492=(cj5*r11);
IkReal x3493=(cj5*r01);
evalcond[0]=(x3493+x3490+(((-1.0)*x3489)));
evalcond[1]=(x3492+x3491+(((-1.0)*x3488)));
evalcond[2]=((((0.139)*x3488))+(((-1.0)*px))+(((0.117)*x3490))+(((0.117)*x3493)));
evalcond[3]=((((-0.139)*x3489))+(((-1.0)*py))+(((0.117)*x3492))+(((0.117)*x3491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3494=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3494;
j4eval[1]=IKsign(x3494);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3495=((1.0)*sj5);
IkReal x3496=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3495)));
j4eval[0]=x3496;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x3495))+((cj5*r00))))));
j4eval[2]=IKsign(x3496);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3497=cj5*cj5;
IkReal x3498=r01*r01;
IkReal x3499=(r01*sj5);
IkReal x3500=(cj5*r00);
IkReal x3501=((((-1.0)*x3497*(r00*r00)))+(((-1.0)*(r02*r02)))+((x3497*x3498))+(((2.0)*x3499*x3500))+(((-1.0)*x3498)));
j4eval[0]=x3501;
j4eval[1]=IKsign(x3501);
j4eval[2]=((IKabs(((((-1.0)*sj0*x3499))+((sj0*x3500)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3502=cj5*cj5;
IkReal x3503=r01*r01;
IkReal x3504=(r01*sj5);
IkReal x3505=(cj5*r00);
CheckValue<IkReal> x3506=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x3504*x3505))+(((-1.0)*x3502*(r00*r00)))+((x3502*x3503))+(((-1.0)*x3503)))),-1);
if(!x3506.valid){
continue;
}
CheckValue<IkReal> x3507 = IKatan2WithCheck(IkReal((((sj0*x3505))+(((-1.0)*sj0*x3504)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3506.value)))+(x3507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3508=IKcos(j4);
IkReal x3509=IKsin(j4);
IkReal x3510=(r11*sj5);
IkReal x3511=(r21*sj5);
IkReal x3512=(cj5*r20);
IkReal x3513=(cj5*r00);
IkReal x3514=(r01*sj5);
IkReal x3515=(cj5*r10);
IkReal x3516=((1.0)*x3508);
IkReal x3517=((1.0)*x3509);
evalcond[0]=((((-1.0)*x3514*x3516))+((x3508*x3513))+((r02*x3509)));
evalcond[1]=((((-1.0)*x3510*x3516))+((r12*x3509))+((x3508*x3515)));
evalcond[2]=((((-1.0)*x3511*x3517))+(((-1.0)*r22*x3516))+((x3509*x3512)));
evalcond[3]=((1.0)+(((-1.0)*x3511*x3516))+((x3508*x3512))+((r22*x3509)));
evalcond[4]=((((-1.0)*x3514*x3517))+(((-1.0)*r02*x3516))+sj0+((x3509*x3513)));
evalcond[5]=((((-1.0)*x3510*x3517))+((x3509*x3515))+(((-1.0)*r12*x3516))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3518=((1.0)*sj5);
CheckValue<IkReal> x3519=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3518)))),-1);
if(!x3519.valid){
continue;
}
CheckValue<IkReal> x3520 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x3518))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3519.value)))+(x3520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3521=IKcos(j4);
IkReal x3522=IKsin(j4);
IkReal x3523=(r11*sj5);
IkReal x3524=(r21*sj5);
IkReal x3525=(cj5*r20);
IkReal x3526=(cj5*r00);
IkReal x3527=(r01*sj5);
IkReal x3528=(cj5*r10);
IkReal x3529=((1.0)*x3521);
IkReal x3530=((1.0)*x3522);
evalcond[0]=((((-1.0)*x3527*x3529))+((r02*x3522))+((x3521*x3526)));
evalcond[1]=(((r12*x3522))+((x3521*x3528))+(((-1.0)*x3523*x3529)));
evalcond[2]=((((-1.0)*x3524*x3530))+((x3522*x3525))+(((-1.0)*r22*x3529)));
evalcond[3]=((1.0)+(((-1.0)*x3524*x3529))+((r22*x3522))+((x3521*x3525)));
evalcond[4]=((((-1.0)*r02*x3529))+sj0+((x3522*x3526))+(((-1.0)*x3527*x3530)));
evalcond[5]=(((x3522*x3528))+(((-1.0)*x3523*x3530))+(((-1.0)*r12*x3529))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3531 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3531.valid){
continue;
}
CheckValue<IkReal> x3532=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3531.value)+(((1.5707963267949)*(x3532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3533=IKcos(j4);
IkReal x3534=IKsin(j4);
IkReal x3535=(r11*sj5);
IkReal x3536=(r21*sj5);
IkReal x3537=(cj5*r20);
IkReal x3538=(cj5*r00);
IkReal x3539=(r01*sj5);
IkReal x3540=(cj5*r10);
IkReal x3541=((1.0)*x3533);
IkReal x3542=((1.0)*x3534);
evalcond[0]=(((r02*x3534))+(((-1.0)*x3539*x3541))+((x3533*x3538)));
evalcond[1]=(((r12*x3534))+((x3533*x3540))+(((-1.0)*x3535*x3541)));
evalcond[2]=(((x3534*x3537))+(((-1.0)*r22*x3541))+(((-1.0)*x3536*x3542)));
evalcond[3]=((1.0)+((r22*x3534))+((x3533*x3537))+(((-1.0)*x3536*x3541)));
evalcond[4]=(((x3534*x3538))+(((-1.0)*r02*x3541))+(((-1.0)*x3539*x3542))+sj0);
evalcond[5]=((((-1.0)*x3535*x3542))+(((-1.0)*r12*x3541))+((x3534*x3540))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.45258111582019)*py))+(((0.965747238240812)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.965747238240812)*py))+(((-2.45258111582019)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.45258111582019)*py))+(((0.965747238240812)*px))))+IKsqr(((((-0.965747238240812)*py))+(((-2.45258111582019)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.45258111582019)*py))+(((0.965747238240812)*px))), ((((-0.965747238240812)*py))+(((-2.45258111582019)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3543=IKcos(j0);
IkReal x3544=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.139)*x3544))+(((-0.353)*x3543)));
evalcond[1]=((((-0.139)*x3543))+(((-1.0)*py))+(((-0.353)*x3544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3545=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3545;
j4eval[1]=IKsign(x3545);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3546=((1.0)*sj5);
IkReal x3547=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3546)));
j4eval[0]=x3547;
j4eval[1]=IKsign(x3547);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3546))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3548=((1.0)*sj5);
IkReal x3549=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3548)));
j4eval[0]=x3549;
j4eval[1]=IKsign(x3549);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3548))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3550=((1.0)*sj5);
CheckValue<IkReal> x3551 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3550))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3551.valid){
continue;
}
CheckValue<IkReal> x3552=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3550)))),-1);
if(!x3552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3551.value)+(((1.5707963267949)*(x3552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3553=IKcos(j4);
IkReal x3554=IKsin(j4);
IkReal x3555=((1.0)*cj0);
IkReal x3556=(r11*sj5);
IkReal x3557=(r21*sj5);
IkReal x3558=(r01*sj5);
IkReal x3559=((1.0)*x3553);
IkReal x3560=(cj5*x3553);
IkReal x3561=((1.0)*x3554);
IkReal x3562=(cj5*x3554);
evalcond[0]=((((-1.0)*x3557*x3559))+((r22*x3554))+((r20*x3560)));
evalcond[1]=((((-1.0)*r22*x3559))+(((-1.0)*x3557*x3561))+((r20*x3562)));
evalcond[2]=(sj0+((r00*x3562))+(((-1.0)*x3558*x3561))+(((-1.0)*r02*x3559)));
evalcond[3]=((((-1.0)*x3558*x3559))+((r00*x3560))+(((-1.0)*x3555))+((r02*x3554)));
evalcond[4]=(((r10*x3560))+(((-1.0)*sj0))+((r12*x3554))+(((-1.0)*x3556*x3559)));
evalcond[5]=(((r10*x3562))+(((-1.0)*r12*x3559))+(((-1.0)*x3555))+(((-1.0)*x3556*x3561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3563=((1.0)*sj5);
CheckValue<IkReal> x3564=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3563)))),-1);
if(!x3564.valid){
continue;
}
CheckValue<IkReal> x3565 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3564.value)))+(x3565.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3566=IKcos(j4);
IkReal x3567=IKsin(j4);
IkReal x3568=((1.0)*cj0);
IkReal x3569=(r11*sj5);
IkReal x3570=(r21*sj5);
IkReal x3571=(r01*sj5);
IkReal x3572=((1.0)*x3566);
IkReal x3573=(cj5*x3566);
IkReal x3574=((1.0)*x3567);
IkReal x3575=(cj5*x3567);
evalcond[0]=(((r20*x3573))+((r22*x3567))+(((-1.0)*x3570*x3572)));
evalcond[1]=(((r20*x3575))+(((-1.0)*r22*x3572))+(((-1.0)*x3570*x3574)));
evalcond[2]=(((r00*x3575))+sj0+(((-1.0)*x3571*x3574))+(((-1.0)*r02*x3572)));
evalcond[3]=(((r00*x3573))+(((-1.0)*x3568))+(((-1.0)*x3571*x3572))+((r02*x3567)));
evalcond[4]=(((r10*x3573))+(((-1.0)*sj0))+(((-1.0)*x3569*x3572))+((r12*x3567)));
evalcond[5]=(((r10*x3575))+(((-1.0)*x3568))+(((-1.0)*x3569*x3574))+(((-1.0)*r12*x3572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3576 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3576.valid){
continue;
}
CheckValue<IkReal> x3577=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3576.value)+(((1.5707963267949)*(x3577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3578=IKcos(j4);
IkReal x3579=IKsin(j4);
IkReal x3580=((1.0)*cj0);
IkReal x3581=(r11*sj5);
IkReal x3582=(r21*sj5);
IkReal x3583=(r01*sj5);
IkReal x3584=((1.0)*x3578);
IkReal x3585=(cj5*x3578);
IkReal x3586=((1.0)*x3579);
IkReal x3587=(cj5*x3579);
evalcond[0]=(((r20*x3585))+(((-1.0)*x3582*x3584))+((r22*x3579)));
evalcond[1]=((((-1.0)*r22*x3584))+((r20*x3587))+(((-1.0)*x3582*x3586)));
evalcond[2]=(sj0+(((-1.0)*r02*x3584))+((r00*x3587))+(((-1.0)*x3583*x3586)));
evalcond[3]=(((r00*x3585))+(((-1.0)*x3583*x3584))+((r02*x3579))+(((-1.0)*x3580)));
evalcond[4]=((((-1.0)*sj0))+((r10*x3585))+(((-1.0)*x3581*x3584))+((r12*x3579)));
evalcond[5]=(((r10*x3587))+(((-1.0)*x3581*x3586))+(((-1.0)*r12*x3584))+(((-1.0)*x3580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.23812083932892)*py))+(((0.219794120902579)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.23812083932892)*px))+(((-0.219794120902579)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.23812083932892)*py))+(((0.219794120902579)*px))))+IKsqr(((((1.23812083932892)*px))+(((-0.219794120902579)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.23812083932892)*py))+(((0.219794120902579)*px))), ((((1.23812083932892)*px))+(((-0.219794120902579)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3588=IKsin(j0);
IkReal x3589=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.783)*x3589))+(((0.139)*x3588)));
evalcond[1]=((((-0.139)*x3589))+(((-1.0)*py))+(((0.783)*x3588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3590=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3590;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3590);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3591=((1.0)*sj5);
IkReal x3592=((((-1.0)*r00*x3591))+(((-1.0)*cj5*r01)));
j4eval[0]=x3592;
j4eval[1]=IKsign(x3592);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3591)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3593=cj5*cj5;
IkReal x3594=((1.0)*r21);
IkReal x3595=(cj5*r20);
IkReal x3596=((((-1.0)*r02*r22))+((r01*sj5*x3595))+(((-1.0)*r01*x3594))+((r01*r21*x3593))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x3593)));
j4eval[0]=x3596;
j4eval[1]=IKsign(x3596);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x3594))+((cj0*x3595)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3597=cj5*cj5;
IkReal x3598=((1.0)*r21);
IkReal x3599=(cj5*r20);
CheckValue<IkReal> x3600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*sj5*x3599))+(((-1.0)*r01*x3598))+((r01*r21*x3597))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x3597)))),-1);
if(!x3600.valid){
continue;
}
CheckValue<IkReal> x3601 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3598))+((cj0*x3599)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3600.value)))+(x3601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3602=IKcos(j4);
IkReal x3603=IKsin(j4);
IkReal x3604=(r11*sj5);
IkReal x3605=(r21*sj5);
IkReal x3606=(r01*sj5);
IkReal x3607=((1.0)*x3602);
IkReal x3608=((1.0)*x3603);
IkReal x3609=(cj5*x3602);
IkReal x3610=(cj5*x3603);
evalcond[0]=(((r22*x3603))+((r20*x3609))+(((-1.0)*x3605*x3607)));
evalcond[1]=((((-1.0)*r22*x3607))+((r20*x3610))+(((-1.0)*x3605*x3608)));
evalcond[2]=((((-1.0)*x3606*x3607))+((r02*x3603))+cj0+((r00*x3609)));
evalcond[3]=(sj0+((r10*x3609))+(((-1.0)*x3604*x3607))+((r12*x3603)));
evalcond[4]=((((-1.0)*x3606*x3608))+sj0+(((-1.0)*r02*x3607))+((r00*x3610)));
evalcond[5]=((((-1.0)*r12*x3607))+((r10*x3610))+(((-1.0)*x3604*x3608))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3611=((1.0)*sj5);
CheckValue<IkReal> x3612 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x3611))+((cj5*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3612.valid){
continue;
}
CheckValue<IkReal> x3613=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3611))+(((-1.0)*cj5*r01)))),-1);
if(!x3613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3612.value)+(((1.5707963267949)*(x3613.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3614=IKcos(j4);
IkReal x3615=IKsin(j4);
IkReal x3616=(r11*sj5);
IkReal x3617=(r21*sj5);
IkReal x3618=(r01*sj5);
IkReal x3619=((1.0)*x3614);
IkReal x3620=((1.0)*x3615);
IkReal x3621=(cj5*x3614);
IkReal x3622=(cj5*x3615);
evalcond[0]=((((-1.0)*x3617*x3619))+((r20*x3621))+((r22*x3615)));
evalcond[1]=(((r20*x3622))+(((-1.0)*r22*x3619))+(((-1.0)*x3617*x3620)));
evalcond[2]=(cj0+((r02*x3615))+((r00*x3621))+(((-1.0)*x3618*x3619)));
evalcond[3]=((((-1.0)*x3616*x3619))+sj0+((r10*x3621))+((r12*x3615)));
evalcond[4]=(sj0+((r00*x3622))+(((-1.0)*r02*x3619))+(((-1.0)*x3618*x3620)));
evalcond[5]=(((r10*x3622))+(((-1.0)*r12*x3619))+(((-1.0)*x3616*x3620))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3623 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3623.valid){
continue;
}
CheckValue<IkReal> x3624=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3623.value)+(((1.5707963267949)*(x3624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3625=IKcos(j4);
IkReal x3626=IKsin(j4);
IkReal x3627=(r11*sj5);
IkReal x3628=(r21*sj5);
IkReal x3629=(r01*sj5);
IkReal x3630=((1.0)*x3625);
IkReal x3631=((1.0)*x3626);
IkReal x3632=(cj5*x3625);
IkReal x3633=(cj5*x3626);
evalcond[0]=((((-1.0)*x3628*x3630))+((r22*x3626))+((r20*x3632)));
evalcond[1]=((((-1.0)*x3628*x3631))+(((-1.0)*r22*x3630))+((r20*x3633)));
evalcond[2]=(cj0+((r02*x3626))+((r00*x3632))+(((-1.0)*x3629*x3630)));
evalcond[3]=((((-1.0)*x3627*x3630))+sj0+((r12*x3626))+((r10*x3632)));
evalcond[4]=(sj0+(((-1.0)*r02*x3630))+((r00*x3633))+(((-1.0)*x3629*x3631)));
evalcond[5]=((((-1.0)*x3627*x3631))+(((-1.0)*r12*x3630))+((r10*x3633))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.04950495049505)*py))+(((5.5049504950495)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.04950495049505)*px))+(((-5.5049504950495)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.04950495049505)*py))+(((5.5049504950495)*px))))+IKsqr(((((3.04950495049505)*px))+(((-5.5049504950495)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.04950495049505)*py))+(((5.5049504950495)*px))), ((((3.04950495049505)*px))+(((-5.5049504950495)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3634=IKsin(j0);
IkReal x3635=IKcos(j0);
evalcond[0]=((((0.139)*x3634))+(((-1.0)*px))+(((0.077)*x3635)));
evalcond[1]=((((-0.139)*x3635))+(((-1.0)*py))+(((0.077)*x3634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3636=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3636;
j4eval[1]=IKsign(x3636);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3637=((1.0)*sj5);
IkReal x3638=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3637)));
j4eval[0]=x3638;
j4eval[1]=IKsign(x3638);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3637))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3639=((1.0)*sj5);
IkReal x3640=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3639)));
j4eval[0]=x3640;
j4eval[1]=IKsign(x3640);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3639))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3641=((1.0)*sj5);
CheckValue<IkReal> x3642 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3641)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3642.valid){
continue;
}
CheckValue<IkReal> x3643=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3641)))),-1);
if(!x3643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3642.value)+(((1.5707963267949)*(x3643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3644=IKcos(j4);
IkReal x3645=IKsin(j4);
IkReal x3646=((1.0)*cj0);
IkReal x3647=(r11*sj5);
IkReal x3648=(r21*sj5);
IkReal x3649=(r01*sj5);
IkReal x3650=((1.0)*x3644);
IkReal x3651=(cj5*x3644);
IkReal x3652=((1.0)*x3645);
IkReal x3653=(cj5*x3645);
evalcond[0]=(((r20*x3651))+(((-1.0)*x3648*x3650))+((r22*x3645)));
evalcond[1]=(((r20*x3653))+(((-1.0)*x3648*x3652))+(((-1.0)*r22*x3650)));
evalcond[2]=(((r00*x3653))+sj0+(((-1.0)*r02*x3650))+(((-1.0)*x3649*x3652)));
evalcond[3]=(((r00*x3651))+((r02*x3645))+(((-1.0)*x3649*x3650))+(((-1.0)*x3646)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3645))+((r10*x3651))+(((-1.0)*x3647*x3650)));
evalcond[5]=(((r10*x3653))+(((-1.0)*r12*x3650))+(((-1.0)*x3647*x3652))+(((-1.0)*x3646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3654=((1.0)*sj5);
CheckValue<IkReal> x3655 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3655.valid){
continue;
}
CheckValue<IkReal> x3656=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3654)))),-1);
if(!x3656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3655.value)+(((1.5707963267949)*(x3656.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3657=IKcos(j4);
IkReal x3658=IKsin(j4);
IkReal x3659=((1.0)*cj0);
IkReal x3660=(r11*sj5);
IkReal x3661=(r21*sj5);
IkReal x3662=(r01*sj5);
IkReal x3663=((1.0)*x3657);
IkReal x3664=(cj5*x3657);
IkReal x3665=((1.0)*x3658);
IkReal x3666=(cj5*x3658);
evalcond[0]=((((-1.0)*x3661*x3663))+((r20*x3664))+((r22*x3658)));
evalcond[1]=((((-1.0)*x3661*x3665))+((r20*x3666))+(((-1.0)*r22*x3663)));
evalcond[2]=((((-1.0)*x3662*x3665))+sj0+(((-1.0)*r02*x3663))+((r00*x3666)));
evalcond[3]=((((-1.0)*x3662*x3663))+((r00*x3664))+((r02*x3658))+(((-1.0)*x3659)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3660*x3663))+((r12*x3658))+((r10*x3664)));
evalcond[5]=((((-1.0)*x3660*x3665))+((r10*x3666))+(((-1.0)*r12*x3663))+(((-1.0)*x3659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3667 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3667.valid){
continue;
}
CheckValue<IkReal> x3668=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3667.value)+(((1.5707963267949)*(x3668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3669=IKcos(j4);
IkReal x3670=IKsin(j4);
IkReal x3671=((1.0)*cj0);
IkReal x3672=(r11*sj5);
IkReal x3673=(r21*sj5);
IkReal x3674=(r01*sj5);
IkReal x3675=((1.0)*x3669);
IkReal x3676=(cj5*x3669);
IkReal x3677=((1.0)*x3670);
IkReal x3678=(cj5*x3670);
evalcond[0]=(((r20*x3676))+(((-1.0)*x3673*x3675))+((r22*x3670)));
evalcond[1]=(((r20*x3678))+(((-1.0)*x3673*x3677))+(((-1.0)*r22*x3675)));
evalcond[2]=(sj0+((r00*x3678))+(((-1.0)*r02*x3675))+(((-1.0)*x3674*x3677)));
evalcond[3]=(((r00*x3676))+((r02*x3670))+(((-1.0)*x3671))+(((-1.0)*x3674*x3675)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3670))+(((-1.0)*x3672*x3675))+((r10*x3676)));
evalcond[5]=((((-1.0)*x3672*x3677))+(((-1.0)*r12*x3675))+((r10*x3678))+(((-1.0)*x3671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3679=IKsin(j0);
IkReal x3680=IKcos(j0);
IkReal x3681=(r00*sj5);
IkReal x3682=(r10*sj5);
IkReal x3683=(cj5*r11);
IkReal x3684=(cj5*r01);
evalcond[0]=(x3681+x3684+(((-1.0)*x3680)));
evalcond[1]=(x3683+x3682+(((-1.0)*x3679)));
evalcond[2]=((((0.117)*x3681))+(((0.117)*x3684))+(((-1.0)*px))+(((0.139)*x3679)));
evalcond[3]=((((0.117)*x3682))+(((0.117)*x3683))+(((-1.0)*py))+(((-0.139)*x3680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3685=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3685;
j4eval[1]=IKsign(x3685);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3686=((1.0)*sj5);
IkReal x3687=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3686)));
j4eval[0]=x3687;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x3686))+((cj5*r00))))));
j4eval[2]=IKsign(x3687);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3688=cj5*cj5;
IkReal x3689=r01*r01;
IkReal x3690=(r01*sj5);
IkReal x3691=(cj5*r00);
IkReal x3692=((((2.0)*x3690*x3691))+(((-1.0)*(r02*r02)))+((x3688*x3689))+(((-1.0)*x3688*(r00*r00)))+(((-1.0)*x3689)));
j4eval[0]=x3692;
j4eval[1]=IKsign(x3692);
j4eval[2]=((IKabs((((sj0*x3691))+(((-1.0)*sj0*x3690)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3693=cj5*cj5;
IkReal x3694=r01*r01;
IkReal x3695=(r01*sj5);
IkReal x3696=(cj5*r00);
CheckValue<IkReal> x3697=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x3693*x3694))+(((2.0)*x3695*x3696))+(((-1.0)*x3694))+(((-1.0)*x3693*(r00*r00))))),-1);
if(!x3697.valid){
continue;
}
CheckValue<IkReal> x3698 = IKatan2WithCheck(IkReal((((sj0*x3696))+(((-1.0)*sj0*x3695)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3697.value)))+(x3698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3699=IKcos(j4);
IkReal x3700=IKsin(j4);
IkReal x3701=(r11*sj5);
IkReal x3702=(r21*sj5);
IkReal x3703=(cj5*r20);
IkReal x3704=(cj5*r00);
IkReal x3705=(r01*sj5);
IkReal x3706=(cj5*r10);
IkReal x3707=((1.0)*x3699);
IkReal x3708=((1.0)*x3700);
evalcond[0]=((((-1.0)*x3705*x3707))+((x3699*x3704))+((r02*x3700)));
evalcond[1]=(((r12*x3700))+((x3699*x3706))+(((-1.0)*x3701*x3707)));
evalcond[2]=((((-1.0)*x3702*x3708))+((x3700*x3703))+(((-1.0)*r22*x3707)));
evalcond[3]=((1.0)+((x3699*x3703))+(((-1.0)*x3702*x3707))+((r22*x3700)));
evalcond[4]=((((-1.0)*r02*x3707))+sj0+(((-1.0)*x3705*x3708))+((x3700*x3704)));
evalcond[5]=((((-1.0)*x3701*x3708))+(((-1.0)*r12*x3707))+((x3700*x3706))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3709=((1.0)*sj5);
CheckValue<IkReal> x3710=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3709)))),-1);
if(!x3710.valid){
continue;
}
CheckValue<IkReal> x3711 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x3709))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3710.value)))+(x3711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3712=IKcos(j4);
IkReal x3713=IKsin(j4);
IkReal x3714=(r11*sj5);
IkReal x3715=(r21*sj5);
IkReal x3716=(cj5*r20);
IkReal x3717=(cj5*r00);
IkReal x3718=(r01*sj5);
IkReal x3719=(cj5*r10);
IkReal x3720=((1.0)*x3712);
IkReal x3721=((1.0)*x3713);
evalcond[0]=(((x3712*x3717))+(((-1.0)*x3718*x3720))+((r02*x3713)));
evalcond[1]=(((r12*x3713))+((x3712*x3719))+(((-1.0)*x3714*x3720)));
evalcond[2]=((((-1.0)*r22*x3720))+((x3713*x3716))+(((-1.0)*x3715*x3721)));
evalcond[3]=((1.0)+((x3712*x3716))+((r22*x3713))+(((-1.0)*x3715*x3720)));
evalcond[4]=(sj0+(((-1.0)*x3718*x3721))+((x3713*x3717))+(((-1.0)*r02*x3720)));
evalcond[5]=((((-1.0)*r12*x3720))+((x3713*x3719))+(((-1.0)*x3714*x3721))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3722 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3722.valid){
continue;
}
CheckValue<IkReal> x3723=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3722.value)+(((1.5707963267949)*(x3723.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3724=IKcos(j4);
IkReal x3725=IKsin(j4);
IkReal x3726=(r11*sj5);
IkReal x3727=(r21*sj5);
IkReal x3728=(cj5*r20);
IkReal x3729=(cj5*r00);
IkReal x3730=(r01*sj5);
IkReal x3731=(cj5*r10);
IkReal x3732=((1.0)*x3724);
IkReal x3733=((1.0)*x3725);
evalcond[0]=(((r02*x3725))+(((-1.0)*x3730*x3732))+((x3724*x3729)));
evalcond[1]=((((-1.0)*x3726*x3732))+((x3724*x3731))+((r12*x3725)));
evalcond[2]=((((-1.0)*x3727*x3733))+((x3725*x3728))+(((-1.0)*r22*x3732)));
evalcond[3]=((1.0)+(((-1.0)*x3727*x3732))+((r22*x3725))+((x3724*x3728)));
evalcond[4]=(sj0+((x3725*x3729))+(((-1.0)*x3730*x3733))+(((-1.0)*r02*x3732)));
evalcond[5]=((((-1.0)*r12*x3732))+((x3725*x3731))+(((-1.0)*x3726*x3733))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.45258111582019)*py))+(((0.965747238240812)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.965747238240812)*py))+(((-2.45258111582019)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.45258111582019)*py))+(((0.965747238240812)*px))))+IKsqr(((((-0.965747238240812)*py))+(((-2.45258111582019)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.45258111582019)*py))+(((0.965747238240812)*px))), ((((-0.965747238240812)*py))+(((-2.45258111582019)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3734=IKcos(j0);
IkReal x3735=IKsin(j0);
evalcond[0]=((((-0.353)*x3734))+(((-1.0)*px))+(((0.139)*x3735)));
evalcond[1]=((((-0.353)*x3735))+(((-1.0)*py))+(((-0.139)*x3734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3736=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3736;
j4eval[1]=IKsign(x3736);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3737=((1.0)*sj5);
IkReal x3738=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3737)));
j4eval[0]=x3738;
j4eval[1]=IKsign(x3738);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3737))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3739=((1.0)*sj5);
IkReal x3740=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3739)));
j4eval[0]=x3740;
j4eval[1]=IKsign(x3740);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x3739))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3741=((1.0)*sj5);
CheckValue<IkReal> x3742 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3741)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3742.valid){
continue;
}
CheckValue<IkReal> x3743=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3741)))),-1);
if(!x3743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3742.value)+(((1.5707963267949)*(x3743.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3744=IKcos(j4);
IkReal x3745=IKsin(j4);
IkReal x3746=((1.0)*cj0);
IkReal x3747=(r11*sj5);
IkReal x3748=(r21*sj5);
IkReal x3749=(r01*sj5);
IkReal x3750=((1.0)*x3744);
IkReal x3751=(cj5*x3744);
IkReal x3752=((1.0)*x3745);
IkReal x3753=(cj5*x3745);
evalcond[0]=((((-1.0)*x3748*x3750))+((r20*x3751))+((r22*x3745)));
evalcond[1]=((((-1.0)*x3748*x3752))+(((-1.0)*r22*x3750))+((r20*x3753)));
evalcond[2]=(((r00*x3753))+sj0+(((-1.0)*x3749*x3752))+(((-1.0)*r02*x3750)));
evalcond[3]=(((r00*x3751))+(((-1.0)*x3749*x3750))+(((-1.0)*x3746))+((r02*x3745)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3745))+(((-1.0)*x3747*x3750))+((r10*x3751)));
evalcond[5]=((((-1.0)*x3746))+(((-1.0)*r12*x3750))+(((-1.0)*x3747*x3752))+((r10*x3753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3754=((1.0)*sj5);
CheckValue<IkReal> x3755 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3755.valid){
continue;
}
CheckValue<IkReal> x3756=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3754)))),-1);
if(!x3756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3755.value)+(((1.5707963267949)*(x3756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3757=IKcos(j4);
IkReal x3758=IKsin(j4);
IkReal x3759=((1.0)*cj0);
IkReal x3760=(r11*sj5);
IkReal x3761=(r21*sj5);
IkReal x3762=(r01*sj5);
IkReal x3763=((1.0)*x3757);
IkReal x3764=(cj5*x3757);
IkReal x3765=((1.0)*x3758);
IkReal x3766=(cj5*x3758);
evalcond[0]=((((-1.0)*x3761*x3763))+((r22*x3758))+((r20*x3764)));
evalcond[1]=((((-1.0)*x3761*x3765))+(((-1.0)*r22*x3763))+((r20*x3766)));
evalcond[2]=(sj0+(((-1.0)*x3762*x3765))+(((-1.0)*r02*x3763))+((r00*x3766)));
evalcond[3]=((((-1.0)*x3762*x3763))+(((-1.0)*x3759))+((r02*x3758))+((r00*x3764)));
evalcond[4]=((((-1.0)*sj0))+((r10*x3764))+((r12*x3758))+(((-1.0)*x3760*x3763)));
evalcond[5]=((((-1.0)*x3759))+((r10*x3766))+(((-1.0)*x3760*x3765))+(((-1.0)*r12*x3763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3767 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3767.valid){
continue;
}
CheckValue<IkReal> x3768=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3767.value)+(((1.5707963267949)*(x3768.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3769=IKcos(j4);
IkReal x3770=IKsin(j4);
IkReal x3771=((1.0)*cj0);
IkReal x3772=(r11*sj5);
IkReal x3773=(r21*sj5);
IkReal x3774=(r01*sj5);
IkReal x3775=((1.0)*x3769);
IkReal x3776=(cj5*x3769);
IkReal x3777=((1.0)*x3770);
IkReal x3778=(cj5*x3770);
evalcond[0]=(((r22*x3770))+(((-1.0)*x3773*x3775))+((r20*x3776)));
evalcond[1]=((((-1.0)*r22*x3775))+(((-1.0)*x3773*x3777))+((r20*x3778)));
evalcond[2]=(sj0+(((-1.0)*r02*x3775))+(((-1.0)*x3774*x3777))+((r00*x3778)));
evalcond[3]=(((r02*x3770))+(((-1.0)*x3774*x3775))+(((-1.0)*x3771))+((r00*x3776)));
evalcond[4]=((((-1.0)*sj0))+((r10*x3776))+((r12*x3770))+(((-1.0)*x3772*x3775)));
evalcond[5]=(((r10*x3778))+(((-1.0)*x3771))+(((-1.0)*x3772*x3777))+(((-1.0)*r12*x3775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3779=((1.0)*sj5);
IkReal x3780=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x3780))+(((-1.0)*r10*x3779)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x3780))+(((-1.0)*r00*x3779)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x3780))+(((-1.0)*r10*x3779))))+IKsqr(((((-1.0)*r01*x3780))+(((-1.0)*r00*x3779))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x3780))+(((-1.0)*r10*x3779))), ((((-1.0)*r01*x3780))+(((-1.0)*r00*x3779))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3781=IKsin(j0);
IkReal x3782=IKcos(j0);
IkReal x3783=(r00*sj5);
IkReal x3784=(r10*sj5);
IkReal x3785=(cj5*r11);
IkReal x3786=(cj5*r01);
evalcond[0]=(x3782+x3783+x3786);
evalcond[1]=(x3781+x3784+x3785);
evalcond[2]=((((-1.0)*px))+(((0.117)*x3783))+(((0.117)*x3786))+(((0.139)*x3781)));
evalcond[3]=((((-0.139)*x3782))+(((-1.0)*py))+(((0.117)*x3784))+(((0.117)*x3785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3787=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3787;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x3787);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3788=((1.0)*sj5);
IkReal x3789=((((-1.0)*r00*x3788))+(((-1.0)*cj5*r01)));
j4eval[0]=x3789;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x3788))))));
j4eval[2]=IKsign(x3789);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3790=cj5*cj5;
IkReal x3791=r01*r01;
IkReal x3792=(r01*sj5);
IkReal x3793=(cj5*r00);
IkReal x3794=((((-1.0)*x3791))+(((-1.0)*(r02*r02)))+(((2.0)*x3792*x3793))+((x3790*x3791))+(((-1.0)*x3790*(r00*r00))));
j4eval[0]=x3794;
j4eval[1]=IKsign(x3794);
j4eval[2]=((IKabs(((((-1.0)*sj0*x3792))+((sj0*x3793)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3795=cj5*cj5;
IkReal x3796=r01*r01;
IkReal x3797=(r01*sj5);
IkReal x3798=(cj5*r00);
CheckValue<IkReal> x3799=IKPowWithIntegerCheck(IKsign(((((2.0)*x3797*x3798))+(((-1.0)*x3795*(r00*r00)))+(((-1.0)*x3796))+(((-1.0)*(r02*r02)))+((x3795*x3796)))),-1);
if(!x3799.valid){
continue;
}
CheckValue<IkReal> x3800 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x3797))+((sj0*x3798)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3799.value)))+(x3800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3801=IKcos(j4);
IkReal x3802=IKsin(j4);
IkReal x3803=(r11*sj5);
IkReal x3804=(r21*sj5);
IkReal x3805=(cj5*r20);
IkReal x3806=(cj5*r00);
IkReal x3807=(r01*sj5);
IkReal x3808=(cj5*r10);
IkReal x3809=((1.0)*x3801);
IkReal x3810=((1.0)*x3802);
evalcond[0]=(((x3801*x3806))+((r02*x3802))+(((-1.0)*x3807*x3809)));
evalcond[1]=(((r12*x3802))+((x3801*x3808))+(((-1.0)*x3803*x3809)));
evalcond[2]=((((-1.0)*x3804*x3810))+((x3802*x3805))+(((-1.0)*r22*x3809)));
evalcond[3]=((-1.0)+((r22*x3802))+((x3801*x3805))+(((-1.0)*x3804*x3809)));
evalcond[4]=((((-1.0)*x3807*x3810))+sj0+((x3802*x3806))+(((-1.0)*r02*x3809)));
evalcond[5]=(((x3802*x3808))+(((-1.0)*x3803*x3810))+(((-1.0)*r12*x3809))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3811=((1.0)*sj5);
CheckValue<IkReal> x3812 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x3811)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3812.valid){
continue;
}
CheckValue<IkReal> x3813=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3811))+(((-1.0)*cj5*r01)))),-1);
if(!x3813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3812.value)+(((1.5707963267949)*(x3813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3814=IKcos(j4);
IkReal x3815=IKsin(j4);
IkReal x3816=(r11*sj5);
IkReal x3817=(r21*sj5);
IkReal x3818=(cj5*r20);
IkReal x3819=(cj5*r00);
IkReal x3820=(r01*sj5);
IkReal x3821=(cj5*r10);
IkReal x3822=((1.0)*x3814);
IkReal x3823=((1.0)*x3815);
evalcond[0]=(((r02*x3815))+((x3814*x3819))+(((-1.0)*x3820*x3822)));
evalcond[1]=(((r12*x3815))+(((-1.0)*x3816*x3822))+((x3814*x3821)));
evalcond[2]=((((-1.0)*r22*x3822))+(((-1.0)*x3817*x3823))+((x3815*x3818)));
evalcond[3]=((-1.0)+(((-1.0)*x3817*x3822))+((r22*x3815))+((x3814*x3818)));
evalcond[4]=(sj0+(((-1.0)*r02*x3822))+((x3815*x3819))+(((-1.0)*x3820*x3823)));
evalcond[5]=((((-1.0)*r12*x3822))+((x3815*x3821))+(((-1.0)*x3816*x3823))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3824 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3824.valid){
continue;
}
CheckValue<IkReal> x3825=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3824.value)+(((1.5707963267949)*(x3825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3826=IKcos(j4);
IkReal x3827=IKsin(j4);
IkReal x3828=(r11*sj5);
IkReal x3829=(r21*sj5);
IkReal x3830=(cj5*r20);
IkReal x3831=(cj5*r00);
IkReal x3832=(r01*sj5);
IkReal x3833=(cj5*r10);
IkReal x3834=((1.0)*x3826);
IkReal x3835=((1.0)*x3827);
evalcond[0]=((((-1.0)*x3832*x3834))+((x3826*x3831))+((r02*x3827)));
evalcond[1]=(((r12*x3827))+(((-1.0)*x3828*x3834))+((x3826*x3833)));
evalcond[2]=((((-1.0)*x3829*x3835))+((x3827*x3830))+(((-1.0)*r22*x3834)));
evalcond[3]=((-1.0)+(((-1.0)*x3829*x3834))+((x3826*x3830))+((r22*x3827)));
evalcond[4]=((((-1.0)*x3832*x3835))+sj0+((x3827*x3831))+(((-1.0)*r02*x3834)));
evalcond[5]=((((-1.0)*x3828*x3835))+((x3827*x3833))+(((-1.0)*r12*x3834))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.965747238240812)*px))+(((2.45258111582019)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.965747238240812)*py))+(((2.45258111582019)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.965747238240812)*px))+(((2.45258111582019)*py))))+IKsqr(((((-0.965747238240812)*py))+(((2.45258111582019)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.965747238240812)*px))+(((2.45258111582019)*py))), ((((-0.965747238240812)*py))+(((2.45258111582019)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3836=IKsin(j0);
IkReal x3837=IKcos(j0);
evalcond[0]=((((0.139)*x3836))+(((-1.0)*px))+(((0.353)*x3837)));
evalcond[1]=((((-0.139)*x3837))+(((-1.0)*py))+(((0.353)*x3836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3838=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3838;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3838);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3839=((1.0)*sj5);
IkReal x3840=((((-1.0)*r00*x3839))+(((-1.0)*cj5*r01)));
j4eval[0]=x3840;
j4eval[1]=IKsign(x3840);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3839))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3841=cj5*cj5;
IkReal x3842=((1.0)*r21);
IkReal x3843=(cj5*r20);
IkReal x3844=(((r01*sj5*x3843))+(((-1.0)*r02*r22))+((r01*r21*x3841))+(((-1.0)*r00*r20*x3841))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3842)));
j4eval[0]=x3844;
j4eval[1]=IKsign(x3844);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x3842))+((cj0*x3843))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3845=cj5*cj5;
IkReal x3846=((1.0)*r21);
IkReal x3847=(cj5*r20);
CheckValue<IkReal> x3848=IKPowWithIntegerCheck(IKsign((((r01*sj5*x3847))+(((-1.0)*r02*r22))+((r01*r21*x3845))+(((-1.0)*r00*r20*x3845))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3846)))),-1);
if(!x3848.valid){
continue;
}
CheckValue<IkReal> x3849 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3846))+((cj0*x3847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3848.value)))+(x3849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3850=IKcos(j4);
IkReal x3851=IKsin(j4);
IkReal x3852=(r11*sj5);
IkReal x3853=(r21*sj5);
IkReal x3854=(r01*sj5);
IkReal x3855=((1.0)*x3850);
IkReal x3856=((1.0)*x3851);
IkReal x3857=(cj5*x3850);
IkReal x3858=(cj5*x3851);
evalcond[0]=(((r20*x3857))+(((-1.0)*x3853*x3855))+((r22*x3851)));
evalcond[1]=(((r20*x3858))+(((-1.0)*x3853*x3856))+(((-1.0)*r22*x3855)));
evalcond[2]=(((r02*x3851))+cj0+(((-1.0)*x3854*x3855))+((r00*x3857)));
evalcond[3]=(sj0+((r10*x3857))+(((-1.0)*x3852*x3855))+((r12*x3851)));
evalcond[4]=(sj0+(((-1.0)*x3854*x3856))+((r00*x3858))+(((-1.0)*r02*x3855)));
evalcond[5]=(((r10*x3858))+(((-1.0)*r12*x3855))+(((-1.0)*x3852*x3856))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3859=((1.0)*sj5);
CheckValue<IkReal> x3860=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3859))+(((-1.0)*cj5*r01)))),-1);
if(!x3860.valid){
continue;
}
CheckValue<IkReal> x3861 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3859)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3860.value)))+(x3861.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3862=IKcos(j4);
IkReal x3863=IKsin(j4);
IkReal x3864=(r11*sj5);
IkReal x3865=(r21*sj5);
IkReal x3866=(r01*sj5);
IkReal x3867=((1.0)*x3862);
IkReal x3868=((1.0)*x3863);
IkReal x3869=(cj5*x3862);
IkReal x3870=(cj5*x3863);
evalcond[0]=((((-1.0)*x3865*x3867))+((r20*x3869))+((r22*x3863)));
evalcond[1]=((((-1.0)*x3865*x3868))+((r20*x3870))+(((-1.0)*r22*x3867)));
evalcond[2]=(((r02*x3863))+(((-1.0)*x3866*x3867))+cj0+((r00*x3869)));
evalcond[3]=(sj0+(((-1.0)*x3864*x3867))+((r10*x3869))+((r12*x3863)));
evalcond[4]=((((-1.0)*r02*x3867))+sj0+((r00*x3870))+(((-1.0)*x3866*x3868)));
evalcond[5]=((((-1.0)*x3864*x3868))+(((-1.0)*r12*x3867))+((r10*x3870))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3871 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3871.valid){
continue;
}
CheckValue<IkReal> x3872=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3871.value)+(((1.5707963267949)*(x3872.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3873=IKcos(j4);
IkReal x3874=IKsin(j4);
IkReal x3875=(r11*sj5);
IkReal x3876=(r21*sj5);
IkReal x3877=(r01*sj5);
IkReal x3878=((1.0)*x3873);
IkReal x3879=((1.0)*x3874);
IkReal x3880=(cj5*x3873);
IkReal x3881=(cj5*x3874);
evalcond[0]=((((-1.0)*x3876*x3878))+((r20*x3880))+((r22*x3874)));
evalcond[1]=((((-1.0)*x3876*x3879))+((r20*x3881))+(((-1.0)*r22*x3878)));
evalcond[2]=((((-1.0)*x3877*x3878))+cj0+((r00*x3880))+((r02*x3874)));
evalcond[3]=(sj0+((r10*x3880))+(((-1.0)*x3875*x3878))+((r12*x3874)));
evalcond[4]=((((-1.0)*x3877*x3879))+sj0+(((-1.0)*r02*x3878))+((r00*x3881)));
evalcond[5]=(((r10*x3881))+(((-1.0)*r12*x3878))+(((-1.0)*x3875*x3879))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3882=cj1*cj1;
IkReal x3883=(cj1*sj1);
IkReal x3884=(cj1*sj2);
IkReal x3885=(cj5*r01);
IkReal x3886=(r00*sj5);
IkReal x3887=(cj2*sj1);
IkReal x3888=((1000.0)*py);
IkReal x3889=((117.0)*cj5*r11);
IkReal x3890=(sj2*x3882);
IkReal x3891=((117.0)*r10*sj5);
CheckValue<IkReal> x3892=IKPowWithIntegerCheck(((((-430.0)*x3890))+(((-706.0)*cj2*x3890))+(((353.0)*cj2*sj2))+(((353.0)*x3883))+(((-706.0)*x3883*(cj2*cj2)))+(((-430.0)*cj2*x3883))),-1);
if(!x3892.valid){
continue;
}
CheckValue<IkReal> x3893=IKPowWithIntegerCheck((x3884+x3887),-1);
if(!x3893.valid){
continue;
}
if( IKabs(((x3892.value)*((((x3887*x3888))+(((-1.0)*x3887*x3891))+(((-1.0)*x3884*x3891))+(((-1.0)*x3884*x3889))+(((-1.0)*x3887*x3889))+((x3884*x3888))+(((-139.0)*x3885))+(((-139.0)*x3886)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3893.value)*(((((-1.0)*x3886))+(((-1.0)*x3885)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3892.value)*((((x3887*x3888))+(((-1.0)*x3887*x3891))+(((-1.0)*x3884*x3891))+(((-1.0)*x3884*x3889))+(((-1.0)*x3887*x3889))+((x3884*x3888))+(((-139.0)*x3885))+(((-139.0)*x3886))))))+IKsqr(((x3893.value)*(((((-1.0)*x3886))+(((-1.0)*x3885))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3892.value)*((((x3887*x3888))+(((-1.0)*x3887*x3891))+(((-1.0)*x3884*x3891))+(((-1.0)*x3884*x3889))+(((-1.0)*x3887*x3889))+((x3884*x3888))+(((-139.0)*x3885))+(((-139.0)*x3886))))), ((x3893.value)*(((((-1.0)*x3886))+(((-1.0)*x3885))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3894=IKcos(j0);
IkReal x3895=IKsin(j0);
IkReal x3896=((0.353)*cj2);
IkReal x3897=(cj5*r01);
IkReal x3898=((0.117)*sj5);
IkReal x3899=(cj5*r11);
IkReal x3900=(cj2*sj1);
IkReal x3901=(cj1*x3894);
IkReal x3902=(cj1*x3895);
IkReal x3903=((0.353)*sj1*sj2);
evalcond[0]=(((sj2*x3901))+((r00*sj5))+((x3894*x3900))+x3897);
evalcond[1]=(((sj2*x3902))+((r10*sj5))+x3899+((x3895*x3900)));
evalcond[2]=((((-0.43)*x3901))+(((0.117)*x3897))+(((0.139)*x3895))+((x3894*x3903))+(((-1.0)*px))+((r00*x3898))+(((-1.0)*x3896*x3901)));
evalcond[3]=((((-0.43)*x3902))+((r10*x3898))+(((0.117)*x3899))+(((-0.139)*x3894))+(((-1.0)*py))+((x3895*x3903))+(((-1.0)*x3896*x3902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3904=((1.0)*sj5);
IkReal x3905=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3904)));
j4eval[0]=x3905;
j4eval[1]=IKsign(x3905);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3904))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3906=((1.0)*sj5);
IkReal x3907=((((-1.0)*r00*x3906))+(((-1.0)*cj5*r01)));
j4eval[0]=x3907;
j4eval[1]=IKsign(x3907);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3906)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3908=((1.0)*sj5);
IkReal x3909=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3909;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*r11*sj0*x3908))+((cj0*cj5*r00))+(((-1.0)*cj0*r01*x3908))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x3909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3911 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3911)==0){
continue;
}
IkReal x3910=pow(x3911,-0.5);
CheckValue<IkReal> x3912 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3912.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3912.value));
IkReal gconst97=((-1.0)*r21*x3910);
IkReal gconst98=(r20*x3910);
CheckValue<IkReal> x3913 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3913.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3913.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3916 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3916.valid){
continue;
}
IkReal x3914=((-1.0)*(x3916.value));
IkReal x3915=x3910;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3914;
IkReal gconst96=x3914;
IkReal gconst97=((-1.0)*r21*x3915);
IkReal gconst98=(r20*x3915);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3919 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3919.valid){
continue;
}
IkReal x3917=((-1.0)*(x3919.value));
IkReal x3918=x3910;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3917;
IkReal gconst96=x3917;
IkReal gconst97=((-1.0)*r21*x3918);
IkReal gconst98=(r20*x3918);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x3922 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3922.valid){
continue;
}
IkReal x3920=((-1.0)*(x3922.value));
IkReal x3921=x3910;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3920;
IkReal gconst96=x3920;
IkReal gconst97=((-1.0)*r21*x3921);
IkReal gconst98=(r20*x3921);
IkReal x3923=((1.0)*(r22*r22));
CheckValue<IkReal> x3927=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3923))),-1);
if(!x3927.valid){
continue;
}
IkReal x3924=x3927.value;
IkReal x3925=((1.0)*x3924);
IkReal x3926=((((-1.0)*x3923))+(((-1.0)*x3925*(r20*r20*r20*r20)))+(((-2.0)*x3924*(r20*r20)*(r21*r21)))+(((-1.0)*x3925*(r21*r21*r21*r21))));
j4eval[0]=x3926;
j4eval[1]=IKsign(x3926);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3928=(cj1*sj2);
IkReal x3929=((1.0)*r22);
IkReal x3930=(gconst97*r21);
IkReal x3931=(cj2*sj1);
IkReal x3932=(gconst98*r20);
CheckValue<IkReal> x3933 = IKatan2WithCheck(IkReal(((((-1.0)*x3929*x3931))+(((-1.0)*x3928*x3929)))),IkReal(((((-1.0)*x3928*x3932))+(((-1.0)*x3931*x3932))+((x3928*x3930))+((x3930*x3931)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3933.valid){
continue;
}
CheckValue<IkReal> x3934=IKPowWithIntegerCheck(IKsign(((((2.0)*x3930*x3932))+(((-1.0)*r22*x3929))+(((-1.0)*(x3932*x3932)))+(((-1.0)*(x3930*x3930))))),-1);
if(!x3934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3933.value)+(((1.5707963267949)*(x3934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3935=IKsin(j4);
IkReal x3936=IKcos(j4);
IkReal x3937=(gconst98*r00);
IkReal x3938=(sj1*sj2);
IkReal x3939=((1.0)*cj2);
IkReal x3940=((1.0)*x3936);
IkReal x3941=(gconst98*x3935);
IkReal x3942=(gconst98*x3936);
IkReal x3943=((1.0)*gconst97*x3935);
evalcond[0]=(((r20*x3941))+(((-1.0)*r22*x3940))+(((-1.0)*r21*x3943)));
evalcond[1]=(sj0+(((-1.0)*r01*x3943))+((x3935*x3937))+(((-1.0)*r02*x3940)));
evalcond[2]=((((-1.0)*r11*x3943))+(((-1.0)*r12*x3940))+((r10*x3941))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3935))+(((-1.0)*sj1*x3939))+(((-1.0)*gconst97*r21*x3940))+(((-1.0)*cj1*sj2))+((r20*x3942)));
evalcond[4]=(((cj0*x3938))+(((-1.0)*cj0*cj1*x3939))+((x3936*x3937))+(((-1.0)*gconst97*r01*x3940))+((r02*x3935)));
evalcond[5]=((((-1.0)*gconst97*r11*x3940))+((sj0*x3938))+(((-1.0)*cj1*sj0*x3939))+((r10*x3942))+((r12*x3935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3944=((1.0)*gconst97);
CheckValue<IkReal> x3945 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst98*r20))+(((-1.0)*cj0*r21*x3944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3945.valid){
continue;
}
CheckValue<IkReal> x3946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3944))+(((-1.0)*gconst98*r01)))),-1);
if(!x3946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3945.value)+(((1.5707963267949)*(x3946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3947=IKsin(j4);
IkReal x3948=IKcos(j4);
IkReal x3949=(gconst98*r00);
IkReal x3950=(sj1*sj2);
IkReal x3951=((1.0)*cj2);
IkReal x3952=((1.0)*x3948);
IkReal x3953=(gconst98*x3947);
IkReal x3954=(gconst98*x3948);
IkReal x3955=((1.0)*gconst97*x3947);
evalcond[0]=(((r20*x3953))+(((-1.0)*r22*x3952))+(((-1.0)*r21*x3955)));
evalcond[1]=(sj0+((x3947*x3949))+(((-1.0)*r01*x3955))+(((-1.0)*r02*x3952)));
evalcond[2]=((((-1.0)*r12*x3952))+(((-1.0)*r11*x3955))+((r10*x3953))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3947))+(((-1.0)*sj1*x3951))+((r20*x3954))+(((-1.0)*gconst97*r21*x3952))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((cj0*x3950))+((x3948*x3949))+(((-1.0)*cj0*cj1*x3951))+(((-1.0)*gconst97*r01*x3952))+((r02*x3947)));
evalcond[5]=((((-1.0)*gconst97*r11*x3952))+(((-1.0)*cj1*sj0*x3951))+((sj0*x3950))+((r12*x3947))+((r10*x3954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3956=((1.0)*gconst97);
CheckValue<IkReal> x3957 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst98*r20*sj0))+(((-1.0)*r21*sj0*x3956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3957.valid){
continue;
}
CheckValue<IkReal> x3958=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst98*r11))+(((-1.0)*r10*x3956)))),-1);
if(!x3958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3957.value)+(((1.5707963267949)*(x3958.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3959=IKsin(j4);
IkReal x3960=IKcos(j4);
IkReal x3961=(gconst98*r00);
IkReal x3962=(sj1*sj2);
IkReal x3963=((1.0)*cj2);
IkReal x3964=((1.0)*x3960);
IkReal x3965=(gconst98*x3959);
IkReal x3966=(gconst98*x3960);
IkReal x3967=((1.0)*gconst97*x3959);
evalcond[0]=((((-1.0)*r21*x3967))+(((-1.0)*r22*x3964))+((r20*x3965)));
evalcond[1]=(sj0+(((-1.0)*r02*x3964))+((x3959*x3961))+(((-1.0)*r01*x3967)));
evalcond[2]=(((r10*x3965))+(((-1.0)*cj0))+(((-1.0)*r12*x3964))+(((-1.0)*r11*x3967)));
evalcond[3]=((((-1.0)*gconst97*r21*x3964))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3963))+((r20*x3966))+((r22*x3959)));
evalcond[4]=((((-1.0)*gconst97*r01*x3964))+((x3960*x3961))+(((-1.0)*cj0*cj1*x3963))+((r02*x3959))+((cj0*x3962)));
evalcond[5]=(((r10*x3966))+(((-1.0)*gconst97*r11*x3964))+(((-1.0)*cj1*sj0*x3963))+((r12*x3959))+((sj0*x3962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3969 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3969)==0){
continue;
}
IkReal x3968=pow(x3969,-0.5);
CheckValue<IkReal> x3970 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3970.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3970.value))));
IkReal gconst100=((1.0)*r21*x3968);
IkReal gconst101=((-1.0)*r20*x3968);
CheckValue<IkReal> x3971 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3971.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3971.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3974 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3974.valid){
continue;
}
IkReal x3972=((1.0)*(x3974.value));
IkReal x3973=x3968;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3972)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3972)));
IkReal gconst100=((1.0)*r21*x3973);
IkReal gconst101=((-1.0)*r20*x3973);
IkReal x3975=r22*r22;
IkReal x3976=((1.0)*x3975);
CheckValue<IkReal> x3980=IKPowWithIntegerCheck(((-1.0)+x3975),-1);
if(!x3980.valid){
continue;
}
IkReal x3977=x3980.value;
if((((1.0)+(((-1.0)*x3976)))) < -0.00001)
continue;
IkReal x3978=IKsqrt(((1.0)+(((-1.0)*x3976))));
IkReal x3979=(sj0*x3977*x3978);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3976*x3979))+x3979))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3983 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3983.valid){
continue;
}
IkReal x3981=((1.0)*(x3983.value));
IkReal x3982=x3968;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3981)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3981)));
IkReal gconst100=((1.0)*r21*x3982);
IkReal gconst101=((-1.0)*r20*x3982);
IkReal x3984=r22*r22;
IkReal x3985=((1.0)*x3984);
CheckValue<IkReal> x3989=IKPowWithIntegerCheck(((-1.0)+x3984),-1);
if(!x3989.valid){
continue;
}
IkReal x3986=x3989.value;
if((((1.0)+(((-1.0)*x3985)))) < -0.00001)
continue;
IkReal x3987=IKsqrt(((1.0)+(((-1.0)*x3985))));
IkReal x3988=(cj0*x3986*x3987);
j4eval[0]=((IKabs(((((-1.0)*x3985*x3988))+x3988)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3992 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3992.valid){
continue;
}
IkReal x3990=((1.0)*(x3992.value));
IkReal x3991=x3968;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3990)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3990)));
IkReal gconst100=((1.0)*r21*x3991);
IkReal gconst101=((-1.0)*r20*x3991);
IkReal x3993=r22*r22;
IkReal x3994=(cj0*r02);
IkReal x3995=(r12*sj0);
CheckValue<IkReal> x3999=IKPowWithIntegerCheck(((-1.0)+x3993),-1);
if(!x3999.valid){
continue;
}
IkReal x3996=x3999.value;
if((((1.0)+(((-1.0)*x3993)))) < -0.00001)
continue;
IkReal x3997=IKsqrt(((1.0)+(((-1.0)*x3993))));
IkReal x3998=((1.0)*r22*x3996*x3997);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x3995*x3998))+(((-1.0)*x3994*x3998)))))+(IKabs((x3995+x3994))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4000=((1.0)*gconst100);
CheckValue<IkReal> x4001=IKPowWithIntegerCheck(IKsign((((gconst100*r20))+((gconst101*r21)))),-1);
if(!x4001.valid){
continue;
}
CheckValue<IkReal> x4002 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x4000))+(((-1.0)*cj0*r01*x4000))+((gconst101*r10*sj0))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4001.value)))+(x4002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4003=IKsin(j4);
IkReal x4004=IKcos(j4);
IkReal x4005=((1.0)*cj2);
IkReal x4006=(sj1*sj2);
IkReal x4007=(gconst101*r10);
IkReal x4008=((1.0)*x4004);
IkReal x4009=(gconst101*x4004);
IkReal x4010=(gconst101*x4003);
IkReal x4011=((1.0)*gconst100*x4003);
evalcond[0]=((((-1.0)*r22*x4008))+((r20*x4010))+(((-1.0)*r21*x4011)));
evalcond[1]=(sj0+(((-1.0)*r02*x4008))+((r00*x4010))+(((-1.0)*r01*x4011)));
evalcond[2]=((((-1.0)*r11*x4011))+((x4003*x4007))+(((-1.0)*r12*x4008))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r22*x4003))+(((-1.0)*sj1*x4005))+(((-1.0)*gconst100*r21*x4008))+((r20*x4009)));
evalcond[4]=((((-1.0)*gconst100*r01*x4008))+((cj0*x4006))+(((-1.0)*cj0*cj1*x4005))+((r00*x4009))+((r02*x4003)));
evalcond[5]=(((r12*x4003))+(((-1.0)*gconst100*r11*x4008))+((sj0*x4006))+((x4004*x4007))+(((-1.0)*cj1*sj0*x4005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4012=((1.0)*gconst100);
CheckValue<IkReal> x4013=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4012))+(((-1.0)*gconst101*r01)))),-1);
if(!x4013.valid){
continue;
}
CheckValue<IkReal> x4014 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4012))+((cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4013.value)))+(x4014.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4015=IKsin(j4);
IkReal x4016=IKcos(j4);
IkReal x4017=((1.0)*cj2);
IkReal x4018=(sj1*sj2);
IkReal x4019=(gconst101*r10);
IkReal x4020=((1.0)*x4016);
IkReal x4021=(gconst101*x4016);
IkReal x4022=(gconst101*x4015);
IkReal x4023=((1.0)*gconst100*x4015);
evalcond[0]=((((-1.0)*r22*x4020))+((r20*x4022))+(((-1.0)*r21*x4023)));
evalcond[1]=(sj0+(((-1.0)*r02*x4020))+((r00*x4022))+(((-1.0)*r01*x4023)));
evalcond[2]=((((-1.0)*r11*x4023))+(((-1.0)*r12*x4020))+((x4015*x4019))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x4021))+(((-1.0)*cj1*sj2))+((r22*x4015))+(((-1.0)*sj1*x4017))+(((-1.0)*gconst100*r21*x4020)));
evalcond[4]=(((r02*x4015))+(((-1.0)*cj0*cj1*x4017))+((cj0*x4018))+((r00*x4021))+(((-1.0)*gconst100*r01*x4020)));
evalcond[5]=(((sj0*x4018))+((x4016*x4019))+(((-1.0)*cj1*sj0*x4017))+((r12*x4015))+(((-1.0)*gconst100*r11*x4020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4024=((1.0)*gconst100);
CheckValue<IkReal> x4025 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst101*r20*sj0))+(((-1.0)*r21*sj0*x4024)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4025.valid){
continue;
}
CheckValue<IkReal> x4026=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4024))+(((-1.0)*gconst101*r11)))),-1);
if(!x4026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4025.value)+(((1.5707963267949)*(x4026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4027=IKsin(j4);
IkReal x4028=IKcos(j4);
IkReal x4029=((1.0)*cj2);
IkReal x4030=(sj1*sj2);
IkReal x4031=(gconst101*r10);
IkReal x4032=((1.0)*x4028);
IkReal x4033=(gconst101*x4028);
IkReal x4034=(gconst101*x4027);
IkReal x4035=((1.0)*gconst100*x4027);
evalcond[0]=((((-1.0)*r22*x4032))+(((-1.0)*r21*x4035))+((r20*x4034)));
evalcond[1]=((((-1.0)*r01*x4035))+sj0+((r00*x4034))+(((-1.0)*r02*x4032)));
evalcond[2]=(((x4027*x4031))+(((-1.0)*r12*x4032))+(((-1.0)*r11*x4035))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst100*r21*x4032))+(((-1.0)*cj1*sj2))+((r20*x4033))+(((-1.0)*sj1*x4029))+((r22*x4027)));
evalcond[4]=(((r00*x4033))+((cj0*x4030))+(((-1.0)*gconst100*r01*x4032))+((r02*x4027))+(((-1.0)*cj0*cj1*x4029)));
evalcond[5]=(((x4028*x4031))+(((-1.0)*gconst100*r11*x4032))+(((-1.0)*cj1*sj0*x4029))+((r12*x4027))+((sj0*x4030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4036=((-1.0)*r00);
IkReal x4038 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4038)==0){
continue;
}
IkReal x4037=pow(x4038,-0.5);
CheckValue<IkReal> x4039 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4036),IKFAST_ATAN2_MAGTHRESH);
if(!x4039.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4039.value));
IkReal gconst103=(r01*x4037);
IkReal gconst104=(x4036*x4037);
CheckValue<IkReal> x4040 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4040.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4040.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4041=((-1.0)*r00);
IkReal x4042=x4037;
CheckValue<IkReal> x4044 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4041),IKFAST_ATAN2_MAGTHRESH);
if(!x4044.valid){
continue;
}
IkReal x4043=((-1.0)*(x4044.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x4043;
IkReal gconst102=x4043;
IkReal gconst103=(r01*x4042);
IkReal gconst104=(x4041*x4042);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4045=((1.0)*gconst103);
CheckValue<IkReal> x4046 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4045))+((gconst104*r10*sj0))+(((-1.0)*r11*sj0*x4045))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4046.valid){
continue;
}
CheckValue<IkReal> x4047=IKPowWithIntegerCheck(IKsign((((gconst104*r21))+((gconst103*r20)))),-1);
if(!x4047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4046.value)+(((1.5707963267949)*(x4047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4048=IKsin(j4);
IkReal x4049=IKcos(j4);
IkReal x4050=((1.0)*cj2);
IkReal x4051=(sj1*sj2);
IkReal x4052=((1.0)*x4049);
IkReal x4053=(gconst104*x4049);
IkReal x4054=(gconst104*x4048);
IkReal x4055=((1.0)*gconst103*x4048);
evalcond[0]=((((-1.0)*r21*x4055))+((r20*x4054))+(((-1.0)*r22*x4052)));
evalcond[1]=(sj0+(((-1.0)*r01*x4055))+((r00*x4054))+(((-1.0)*r02*x4052)));
evalcond[2]=((((-1.0)*r12*x4052))+(((-1.0)*r11*x4055))+((r10*x4054))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4048))+(((-1.0)*cj1*sj2))+((r20*x4053))+(((-1.0)*gconst103*r21*x4052))+(((-1.0)*sj1*x4050)));
evalcond[4]=(((r02*x4048))+(((-1.0)*cj0*cj1*x4050))+(((-1.0)*gconst103*r01*x4052))+((cj0*x4051))+((r00*x4053)));
evalcond[5]=(((sj0*x4051))+(((-1.0)*cj1*sj0*x4050))+(((-1.0)*gconst103*r11*x4052))+((r12*x4048))+((r10*x4053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4056=((1.0)*gconst103);
CheckValue<IkReal> x4057=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r11))+(((-1.0)*r10*x4056)))),-1);
if(!x4057.valid){
continue;
}
CheckValue<IkReal> x4058 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst104*r20*sj0))+(((-1.0)*r21*sj0*x4056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4057.value)))+(x4058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4059=IKsin(j4);
IkReal x4060=IKcos(j4);
IkReal x4061=((1.0)*cj2);
IkReal x4062=(sj1*sj2);
IkReal x4063=((1.0)*x4060);
IkReal x4064=(gconst104*x4060);
IkReal x4065=(gconst104*x4059);
IkReal x4066=((1.0)*gconst103*x4059);
evalcond[0]=((((-1.0)*r21*x4066))+((r20*x4065))+(((-1.0)*r22*x4063)));
evalcond[1]=(sj0+(((-1.0)*r01*x4066))+((r00*x4065))+(((-1.0)*r02*x4063)));
evalcond[2]=((((-1.0)*r12*x4063))+(((-1.0)*r11*x4066))+((r10*x4065))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r20*x4064))+(((-1.0)*gconst103*r21*x4063))+((r22*x4059))+(((-1.0)*sj1*x4061)));
evalcond[4]=(((r02*x4059))+(((-1.0)*cj0*cj1*x4061))+(((-1.0)*gconst103*r01*x4063))+((cj0*x4062))+((r00*x4064)));
evalcond[5]=(((sj0*x4062))+(((-1.0)*cj1*sj0*x4061))+(((-1.0)*gconst103*r11*x4063))+((r12*x4059))+((r10*x4064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4067=((-1.0)*r01);
IkReal x4069 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4069)==0){
continue;
}
IkReal x4068=pow(x4069,-0.5);
CheckValue<IkReal> x4070 = IKatan2WithCheck(IkReal(x4067),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4070.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4070.value))));
IkReal gconst106=(x4067*x4068);
IkReal gconst107=((1.0)*r00*x4068);
CheckValue<IkReal> x4071 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4071.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4071.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4072=((-1.0)*r01);
CheckValue<IkReal> x4075 = IKatan2WithCheck(IkReal(x4072),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4075.valid){
continue;
}
IkReal x4073=((1.0)*(x4075.value));
IkReal x4074=x4068;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4073)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4073)));
IkReal gconst106=(x4072*x4074);
IkReal gconst107=((1.0)*r00*x4074);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x4076=((-1.0)*r01);
CheckValue<IkReal> x4079 = IKatan2WithCheck(IkReal(x4076),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4079.valid){
continue;
}
IkReal x4077=((1.0)*(x4079.value));
IkReal x4078=x4068;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4077)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4077)));
IkReal gconst106=(x4076*x4078);
IkReal gconst107=((1.0)*r00*x4078);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4080=((-1.0)*r01);
CheckValue<IkReal> x4083 = IKatan2WithCheck(IkReal(x4080),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4083.valid){
continue;
}
IkReal x4081=((1.0)*(x4083.value));
IkReal x4082=x4068;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4081)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4081)));
IkReal gconst106=(x4080*x4082);
IkReal gconst107=((1.0)*r00*x4082);
IkReal x4084=r02*r02;
IkReal x4085=(r12*sj0);
IkReal x4086=x4068;
IkReal x4087=(cj0*x4086);
j4eval[0]=((IKabs((x4085+((cj0*r02)))))+(IKabs((((x4084*x4087))+((r02*x4085*x4086))+(((-1.0)*x4087))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4088=((1.0)*gconst106);
CheckValue<IkReal> x4089 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4088))+((gconst107*r10*sj0))+(((-1.0)*r11*sj0*x4088))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4089.valid){
continue;
}
CheckValue<IkReal> x4090=IKPowWithIntegerCheck(IKsign((((gconst107*r21))+((gconst106*r20)))),-1);
if(!x4090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4089.value)+(((1.5707963267949)*(x4090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4091=IKsin(j4);
IkReal x4092=IKcos(j4);
IkReal x4093=(gconst106*r01);
IkReal x4094=((1.0)*cj2);
IkReal x4095=(sj1*sj2);
IkReal x4096=(gconst106*r21);
IkReal x4097=(gconst106*r11);
IkReal x4098=((1.0)*x4092);
IkReal x4099=((1.0)*x4091);
IkReal x4100=(gconst107*x4091);
IkReal x4101=(gconst107*x4092);
evalcond[0]=((((-1.0)*r22*x4098))+((r20*x4100))+(((-1.0)*x4096*x4099)));
evalcond[1]=(sj0+(((-1.0)*x4093*x4099))+(((-1.0)*r02*x4098))+((r00*x4100)));
evalcond[2]=((((-1.0)*r12*x4098))+(((-1.0)*x4097*x4099))+((r10*x4100))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4094))+(((-1.0)*cj1*sj2))+((r22*x4091))+((r20*x4101))+(((-1.0)*x4096*x4098)));
evalcond[4]=((((-1.0)*cj0*cj1*x4094))+((cj0*x4095))+(((-1.0)*x4093*x4098))+((r02*x4091))+((r00*x4101)));
evalcond[5]=((((-1.0)*x4097*x4098))+(((-1.0)*cj1*sj0*x4094))+((r12*x4091))+((r10*x4101))+((sj0*x4095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4102=((1.0)*gconst106);
CheckValue<IkReal> x4103=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r01))+(((-1.0)*r00*x4102)))),-1);
if(!x4103.valid){
continue;
}
CheckValue<IkReal> x4104 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r20))+(((-1.0)*cj0*r21*x4102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4103.value)))+(x4104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4105=IKsin(j4);
IkReal x4106=IKcos(j4);
IkReal x4107=(gconst106*r01);
IkReal x4108=((1.0)*cj2);
IkReal x4109=(sj1*sj2);
IkReal x4110=(gconst106*r21);
IkReal x4111=(gconst106*r11);
IkReal x4112=((1.0)*x4106);
IkReal x4113=((1.0)*x4105);
IkReal x4114=(gconst107*x4105);
IkReal x4115=(gconst107*x4106);
evalcond[0]=((((-1.0)*r22*x4112))+((r20*x4114))+(((-1.0)*x4110*x4113)));
evalcond[1]=(sj0+(((-1.0)*r02*x4112))+((r00*x4114))+(((-1.0)*x4107*x4113)));
evalcond[2]=((((-1.0)*r12*x4112))+(((-1.0)*x4111*x4113))+(((-1.0)*cj0))+((r10*x4114)));
evalcond[3]=(((r22*x4105))+((r20*x4115))+(((-1.0)*cj1*sj2))+(((-1.0)*x4110*x4112))+(((-1.0)*sj1*x4108)));
evalcond[4]=(((cj0*x4109))+(((-1.0)*cj0*cj1*x4108))+((r02*x4105))+((r00*x4115))+(((-1.0)*x4107*x4112)));
evalcond[5]=((((-1.0)*x4111*x4112))+((r12*x4105))+((sj0*x4109))+((r10*x4115))+(((-1.0)*cj1*sj0*x4108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4116=((1.0)*gconst106);
CheckValue<IkReal> x4117=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r11))+(((-1.0)*r10*x4116)))),-1);
if(!x4117.valid){
continue;
}
CheckValue<IkReal> x4118 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst107*r20*sj0))+(((-1.0)*r21*sj0*x4116)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4117.value)))+(x4118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4119=IKsin(j4);
IkReal x4120=IKcos(j4);
IkReal x4121=(gconst106*r01);
IkReal x4122=((1.0)*cj2);
IkReal x4123=(sj1*sj2);
IkReal x4124=(gconst106*r21);
IkReal x4125=(gconst106*r11);
IkReal x4126=((1.0)*x4120);
IkReal x4127=((1.0)*x4119);
IkReal x4128=(gconst107*x4119);
IkReal x4129=(gconst107*x4120);
evalcond[0]=((((-1.0)*r22*x4126))+((r20*x4128))+(((-1.0)*x4124*x4127)));
evalcond[1]=(sj0+(((-1.0)*x4121*x4127))+(((-1.0)*r02*x4126))+((r00*x4128)));
evalcond[2]=((((-1.0)*r12*x4126))+(((-1.0)*x4125*x4127))+((r10*x4128))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x4129))+(((-1.0)*x4124*x4126))+(((-1.0)*sj1*x4122))+(((-1.0)*cj1*sj2))+((r22*x4119)));
evalcond[4]=(((cj0*x4123))+((r02*x4119))+(((-1.0)*x4121*x4126))+(((-1.0)*cj0*cj1*x4122))+((r00*x4129)));
evalcond[5]=(((sj0*x4123))+((r12*x4119))+(((-1.0)*x4125*x4126))+(((-1.0)*cj1*sj0*x4122))+((r10*x4129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4130=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4130;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x4130);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4131=((1.0)*sj5);
IkReal x4132=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4131)));
j4eval[0]=x4132;
j4eval[1]=IKsign(x4132);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x4131)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4133=(cj1*cj2);
IkReal x4134=(cj5*r00);
IkReal x4135=(r01*sj5);
IkReal x4136=((1.0)*sj1*sj2);
IkReal x4137=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4137;
j4eval[1]=((IKabs((((sj1*sj2*x4134))+(((-1.0)*x4135*x4136))+((x4133*x4135))+(((-1.0)*x4133*x4134)))))+(IKabs(((((-1.0)*r02*x4136))+((r02*x4133))))));
j4eval[2]=IKsign(x4137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4138=(r01*sj5);
IkReal x4139=(cj1*cj2);
IkReal x4140=(cj5*r00);
IkReal x4141=((1.0)*sj1*sj2);
CheckValue<IkReal> x4142=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4142.valid){
continue;
}
CheckValue<IkReal> x4143 = IKatan2WithCheck(IkReal((((x4138*x4139))+(((-1.0)*x4139*x4140))+((sj1*sj2*x4140))+(((-1.0)*x4138*x4141)))),IkReal(((((-1.0)*r02*x4141))+((r02*x4139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4142.value)))+(x4143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4144=IKcos(j4);
IkReal x4145=IKsin(j4);
IkReal x4146=((1.0)*cj1);
IkReal x4147=((1.0)*x4144);
IkReal x4148=(cj5*x4144);
IkReal x4149=(cj5*x4145);
IkReal x4150=((1.0)*sj5*x4145);
evalcond[0]=(((r02*x4145))+(((-1.0)*r01*sj5*x4147))+((r00*x4148)));
evalcond[1]=((((-1.0)*r21*x4150))+((r20*x4149))+(((-1.0)*r22*x4147)));
evalcond[2]=(((r10*x4149))+(((-1.0)*r12*x4147))+(((-1.0)*r11*x4150)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4147))+((r00*x4149))+(((-1.0)*r01*x4150)));
evalcond[4]=(((r10*x4148))+((r12*x4145))+((sj1*sj2))+(((-1.0)*r11*sj5*x4147))+(((-1.0)*cj2*x4146)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x4145))+(((-1.0)*r21*sj5*x4147))+((r20*x4148))+(((-1.0)*sj2*x4146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4151=((1.0)*sj5);
CheckValue<IkReal> x4152 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x4151))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4152.valid){
continue;
}
CheckValue<IkReal> x4153=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4151)))),-1);
if(!x4153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4152.value)+(((1.5707963267949)*(x4153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4154=IKcos(j4);
IkReal x4155=IKsin(j4);
IkReal x4156=((1.0)*cj1);
IkReal x4157=((1.0)*x4154);
IkReal x4158=(cj5*x4154);
IkReal x4159=(cj5*x4155);
IkReal x4160=((1.0)*sj5*x4155);
evalcond[0]=(((r02*x4155))+(((-1.0)*r01*sj5*x4157))+((r00*x4158)));
evalcond[1]=(((r20*x4159))+(((-1.0)*r21*x4160))+(((-1.0)*r22*x4157)));
evalcond[2]=(((r10*x4159))+(((-1.0)*r11*x4160))+(((-1.0)*r12*x4157)));
evalcond[3]=((1.0)+((r00*x4159))+(((-1.0)*r02*x4157))+(((-1.0)*r01*x4160)));
evalcond[4]=(((r10*x4158))+((r12*x4155))+((sj1*sj2))+(((-1.0)*r11*sj5*x4157))+(((-1.0)*cj2*x4156)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x4155))+(((-1.0)*r21*sj5*x4157))+((r20*x4158))+(((-1.0)*sj2*x4156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4161 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4161.valid){
continue;
}
CheckValue<IkReal> x4162=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4161.value)+(((1.5707963267949)*(x4162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4163=IKcos(j4);
IkReal x4164=IKsin(j4);
IkReal x4165=((1.0)*cj1);
IkReal x4166=((1.0)*x4163);
IkReal x4167=(cj5*x4163);
IkReal x4168=(cj5*x4164);
IkReal x4169=((1.0)*sj5*x4164);
evalcond[0]=(((r00*x4167))+(((-1.0)*r01*sj5*x4166))+((r02*x4164)));
evalcond[1]=(((r20*x4168))+(((-1.0)*r21*x4169))+(((-1.0)*r22*x4166)));
evalcond[2]=(((r10*x4168))+(((-1.0)*r11*x4169))+(((-1.0)*r12*x4166)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4166))+((r00*x4168))+(((-1.0)*r01*x4169)));
evalcond[4]=((((-1.0)*cj2*x4165))+((r10*x4167))+((sj1*sj2))+((r12*x4164))+(((-1.0)*r11*sj5*x4166)));
evalcond[5]=(((r22*x4164))+(((-1.0)*r21*sj5*x4166))+((r20*x4167))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4170=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4170;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x4170);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4171=((1.0)*sj5);
IkReal x4172=((((-1.0)*r20*x4171))+(((-1.0)*cj5*r21)));
j4eval[0]=x4172;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x4171))))));
j4eval[2]=IKsign(x4172);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4173=cj5*cj5;
IkReal x4174=r01*r01;
IkReal x4175=(cj5*r00);
IkReal x4176=(r01*sj5);
IkReal x4177=((((-2.0)*x4175*x4176))+(((-1.0)*x4173*x4174))+x4174+(r02*r02)+((x4173*(r00*r00))));
j4eval[0]=x4177;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x4176))+x4175))));
j4eval[2]=IKsign(x4177);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4178=cj5*cj5;
IkReal x4179=r01*r01;
IkReal x4180=(r01*sj5);
IkReal x4181=(cj5*r00);
CheckValue<IkReal> x4182 = IKatan2WithCheck(IkReal(((((-1.0)*x4180))+x4181)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4182.valid){
continue;
}
CheckValue<IkReal> x4183=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4178*x4179))+(((-2.0)*x4180*x4181))+x4179+((x4178*(r00*r00)))+(r02*r02))),-1);
if(!x4183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4182.value)+(((1.5707963267949)*(x4183.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4184=IKcos(j4);
IkReal x4185=IKsin(j4);
IkReal x4186=((1.0)*sj2);
IkReal x4187=((1.0)*x4184);
IkReal x4188=(cj5*x4184);
IkReal x4189=(cj5*x4185);
IkReal x4190=((1.0)*sj5*x4185);
evalcond[0]=(((r02*x4185))+(((-1.0)*r01*sj5*x4187))+((r00*x4188)));
evalcond[1]=(((r20*x4189))+(((-1.0)*r21*x4190))+(((-1.0)*r22*x4187)));
evalcond[2]=((((-1.0)*r12*x4187))+(((-1.0)*r11*x4190))+((r10*x4189)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4190))+(((-1.0)*r02*x4187))+((r00*x4189)));
evalcond[4]=(((r12*x4185))+((r10*x4188))+((cj1*cj2))+(((-1.0)*r11*sj5*x4187))+(((-1.0)*sj1*x4186)));
evalcond[5]=((((-1.0)*cj1*x4186))+((r20*x4188))+(((-1.0)*cj2*sj1))+((r22*x4185))+(((-1.0)*r21*sj5*x4187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4191=((1.0)*sj5);
CheckValue<IkReal> x4192 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x4191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4192.valid){
continue;
}
CheckValue<IkReal> x4193=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4191))+(((-1.0)*cj5*r21)))),-1);
if(!x4193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4192.value)+(((1.5707963267949)*(x4193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4194=IKcos(j4);
IkReal x4195=IKsin(j4);
IkReal x4196=((1.0)*sj2);
IkReal x4197=((1.0)*x4194);
IkReal x4198=(cj5*x4194);
IkReal x4199=(cj5*x4195);
IkReal x4200=((1.0)*sj5*x4195);
evalcond[0]=((((-1.0)*r01*sj5*x4197))+((r02*x4195))+((r00*x4198)));
evalcond[1]=(((r20*x4199))+(((-1.0)*r22*x4197))+(((-1.0)*r21*x4200)));
evalcond[2]=((((-1.0)*r12*x4197))+(((-1.0)*r11*x4200))+((r10*x4199)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4200))+((r00*x4199))+(((-1.0)*r02*x4197)));
evalcond[4]=((((-1.0)*sj1*x4196))+((r12*x4195))+((r10*x4198))+((cj1*cj2))+(((-1.0)*r11*sj5*x4197)));
evalcond[5]=((((-1.0)*r21*sj5*x4197))+((r20*x4198))+(((-1.0)*cj2*sj1))+((r22*x4195))+(((-1.0)*cj1*x4196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4201=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4201.valid){
continue;
}
CheckValue<IkReal> x4202 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4201.value)))+(x4202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4203=IKcos(j4);
IkReal x4204=IKsin(j4);
IkReal x4205=((1.0)*sj2);
IkReal x4206=((1.0)*x4203);
IkReal x4207=(cj5*x4203);
IkReal x4208=(cj5*x4204);
IkReal x4209=((1.0)*sj5*x4204);
evalcond[0]=((((-1.0)*r01*sj5*x4206))+((r02*x4204))+((r00*x4207)));
evalcond[1]=((((-1.0)*r22*x4206))+((r20*x4208))+(((-1.0)*r21*x4209)));
evalcond[2]=((((-1.0)*r12*x4206))+(((-1.0)*r11*x4209))+((r10*x4208)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4206))+(((-1.0)*r01*x4209))+((r00*x4208)));
evalcond[4]=((((-1.0)*r11*sj5*x4206))+(((-1.0)*sj1*x4205))+((r10*x4207))+((cj1*cj2))+((r12*x4204)));
evalcond[5]=(((r22*x4204))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4205))+((r20*x4207))+(((-1.0)*r21*sj5*x4206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4210=((-1.0)*r10);
IkReal x4212 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4212)==0){
continue;
}
IkReal x4211=pow(x4212,-0.5);
CheckValue<IkReal> x4213 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4210),IKFAST_ATAN2_MAGTHRESH);
if(!x4213.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4213.value));
IkReal gconst109=(r11*x4211);
IkReal gconst110=(x4210*x4211);
CheckValue<IkReal> x4214 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4214.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4214.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4215=((-1.0)*r10);
IkReal x4216=x4211;
CheckValue<IkReal> x4218 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4215),IKFAST_ATAN2_MAGTHRESH);
if(!x4218.valid){
continue;
}
IkReal x4217=((-1.0)*(x4218.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4217;
IkReal gconst108=x4217;
IkReal gconst109=(r11*x4216);
IkReal gconst110=(x4215*x4216);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4219=((1.0)*gconst109);
CheckValue<IkReal> x4220 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*r11*sj0*x4219))+(((-1.0)*cj0*r01*x4219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4220.valid){
continue;
}
CheckValue<IkReal> x4221=IKPowWithIntegerCheck(IKsign((((gconst109*r20))+((gconst110*r21)))),-1);
if(!x4221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4220.value)+(((1.5707963267949)*(x4221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4222=IKsin(j4);
IkReal x4223=IKcos(j4);
IkReal x4224=((1.0)*cj2);
IkReal x4225=(sj1*sj2);
IkReal x4226=(gconst110*r20);
IkReal x4227=(gconst109*r01);
IkReal x4228=(gconst109*r11);
IkReal x4229=(gconst109*r21);
IkReal x4230=((1.0)*x4223);
IkReal x4231=((1.0)*x4222);
IkReal x4232=(gconst110*x4223);
IkReal x4233=(gconst110*x4222);
evalcond[0]=((((-1.0)*r22*x4230))+(((-1.0)*x4229*x4231))+((x4222*x4226)));
evalcond[1]=(sj0+(((-1.0)*x4227*x4231))+((r00*x4233))+(((-1.0)*r02*x4230)));
evalcond[2]=(((r10*x4233))+(((-1.0)*r12*x4230))+(((-1.0)*x4228*x4231))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r22*x4222))+(((-1.0)*x4229*x4230))+((x4223*x4226))+(((-1.0)*sj1*x4224)));
evalcond[4]=((((-1.0)*x4227*x4230))+((r00*x4232))+((r02*x4222))+(((-1.0)*cj0*cj1*x4224))+((cj0*x4225)));
evalcond[5]=(((r10*x4232))+((sj0*x4225))+(((-1.0)*x4228*x4230))+(((-1.0)*cj1*sj0*x4224))+((r12*x4222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4234=((1.0)*gconst109);
CheckValue<IkReal> x4235 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4234))+((cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4235.valid){
continue;
}
CheckValue<IkReal> x4236=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4234))+(((-1.0)*gconst110*r01)))),-1);
if(!x4236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4235.value)+(((1.5707963267949)*(x4236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4237=IKsin(j4);
IkReal x4238=IKcos(j4);
IkReal x4239=((1.0)*cj2);
IkReal x4240=(sj1*sj2);
IkReal x4241=(gconst110*r20);
IkReal x4242=(gconst109*r01);
IkReal x4243=(gconst109*r11);
IkReal x4244=(gconst109*r21);
IkReal x4245=((1.0)*x4238);
IkReal x4246=((1.0)*x4237);
IkReal x4247=(gconst110*x4238);
IkReal x4248=(gconst110*x4237);
evalcond[0]=((((-1.0)*x4244*x4246))+((x4237*x4241))+(((-1.0)*r22*x4245)));
evalcond[1]=(((r00*x4248))+sj0+(((-1.0)*r02*x4245))+(((-1.0)*x4242*x4246)));
evalcond[2]=(((r10*x4248))+(((-1.0)*x4243*x4246))+(((-1.0)*r12*x4245))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4244*x4245))+((x4238*x4241))+(((-1.0)*cj1*sj2))+((r22*x4237))+(((-1.0)*sj1*x4239)));
evalcond[4]=(((r00*x4247))+((r02*x4237))+(((-1.0)*cj0*cj1*x4239))+((cj0*x4240))+(((-1.0)*x4242*x4245)));
evalcond[5]=(((r12*x4237))+((r10*x4247))+((sj0*x4240))+(((-1.0)*x4243*x4245))+(((-1.0)*cj1*sj0*x4239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4249=((-1.0)*r11);
IkReal x4251 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4251)==0){
continue;
}
IkReal x4250=pow(x4251,-0.5);
CheckValue<IkReal> x4252 = IKatan2WithCheck(IkReal(x4249),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4252.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4252.value))));
IkReal gconst112=(x4249*x4250);
IkReal gconst113=((1.0)*r10*x4250);
CheckValue<IkReal> x4253 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4253.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4253.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4254=((-1.0)*r11);
CheckValue<IkReal> x4257 = IKatan2WithCheck(IkReal(x4254),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4257.valid){
continue;
}
IkReal x4255=((1.0)*(x4257.value));
IkReal x4256=x4250;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4255)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4255)));
IkReal gconst112=(x4254*x4256);
IkReal gconst113=((1.0)*r10*x4256);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4258=((-1.0)*r11);
CheckValue<IkReal> x4261 = IKatan2WithCheck(IkReal(x4258),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4261.valid){
continue;
}
IkReal x4259=((1.0)*(x4261.value));
IkReal x4260=x4250;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4259)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4259)));
IkReal gconst112=(x4258*x4260);
IkReal gconst113=((1.0)*r10*x4260);
IkReal x4262=r12*r12;
IkReal x4263=(cj0*r02);
IkReal x4264=x4250;
IkReal x4265=(sj0*x4264);
j4eval[0]=((IKabs((x4263+((r12*sj0)))))+(IKabs((((r12*x4263*x4264))+((x4262*x4265))+(((-1.0)*x4265))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4266=((-1.0)*r11);
CheckValue<IkReal> x4269 = IKatan2WithCheck(IkReal(x4266),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4269.valid){
continue;
}
IkReal x4267=((1.0)*(x4269.value));
IkReal x4268=x4250;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4267)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4267)));
IkReal gconst112=(x4266*x4268);
IkReal gconst113=((1.0)*r10*x4268);
IkReal x4270=r12*r12;
IkReal x4271=((1.0)*r22);
IkReal x4272=(cj1*sj2);
IkReal x4273=(cj2*sj1);
IkReal x4274=((1.0)+(((-1.0)*x4270)));
CheckValue<IkReal> x4281=IKPowWithIntegerCheck(x4274,-1);
if(!x4281.valid){
continue;
}
IkReal x4275=x4281.value;
CheckValue<IkReal> x4282=IKPowWithIntegerCheck(((-1.0)+x4270),-1);
if(!x4282.valid){
continue;
}
IkReal x4276=x4282.value;
IkReal x4277=((1.0)*x4275);
if((x4274) < -0.00001)
continue;
IkReal x4278=IKsqrt(x4274);
IkReal x4279=(r12*x4276*x4278);
IkReal x4280=((((-1.0)*x4277*(r11*r11)*(r21*r21)))+(((-1.0)*x4277*(r10*r10)*(r20*r20)))+(((-1.0)*r22*x4271))+(((-2.0)*r10*r11*r20*r21*x4275)));
j4eval[0]=x4280;
j4eval[1]=((IKabs(((((-1.0)*x4271*x4272*x4279))+(((-1.0)*x4271*x4273*x4279)))))+(IKabs(((((-1.0)*x4271*x4273))+(((-1.0)*x4271*x4272))))));
j4eval[2]=IKsign(x4280);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4283=((1.0)*r22);
IkReal x4284=(cj1*sj2);
IkReal x4285=(cj2*sj1);
IkReal x4286=(gconst113*r20);
IkReal x4287=(gconst112*r21);
CheckValue<IkReal> x4288=IKPowWithIntegerCheck(IKsign(((((2.0)*x4286*x4287))+(((-1.0)*r22*x4283))+(((-1.0)*(x4287*x4287)))+(((-1.0)*(x4286*x4286))))),-1);
if(!x4288.valid){
continue;
}
CheckValue<IkReal> x4289 = IKatan2WithCheck(IkReal(((((-1.0)*x4283*x4284))+(((-1.0)*x4283*x4285)))),IkReal((((x4284*x4287))+((x4285*x4287))+(((-1.0)*x4285*x4286))+(((-1.0)*x4284*x4286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4288.value)))+(x4289.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4290=IKsin(j4);
IkReal x4291=IKcos(j4);
IkReal x4292=(gconst113*r10);
IkReal x4293=((1.0)*cj2);
IkReal x4294=(gconst112*r01);
IkReal x4295=(sj1*sj2);
IkReal x4296=(gconst112*r11);
IkReal x4297=(gconst113*r20);
IkReal x4298=(gconst113*r00);
IkReal x4299=(gconst112*r21);
IkReal x4300=((1.0)*x4291);
IkReal x4301=((1.0)*x4290);
evalcond[0]=((((-1.0)*r22*x4300))+((x4290*x4297))+(((-1.0)*x4299*x4301)));
evalcond[1]=(sj0+(((-1.0)*x4294*x4301))+((x4290*x4298))+(((-1.0)*r02*x4300)));
evalcond[2]=((((-1.0)*r12*x4300))+(((-1.0)*x4296*x4301))+((x4290*x4292))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x4291*x4297))+((r22*x4290))+(((-1.0)*sj1*x4293))+(((-1.0)*x4299*x4300)));
evalcond[4]=((((-1.0)*x4294*x4300))+((x4291*x4298))+(((-1.0)*cj0*cj1*x4293))+((cj0*x4295))+((r02*x4290)));
evalcond[5]=(((sj0*x4295))+(((-1.0)*x4296*x4300))+(((-1.0)*cj1*sj0*x4293))+((x4291*x4292))+((r12*x4290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4302=((1.0)*gconst112);
CheckValue<IkReal> x4303 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*r11*sj0*x4302))+(((-1.0)*cj0*r01*x4302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4303.valid){
continue;
}
CheckValue<IkReal> x4304=IKPowWithIntegerCheck(IKsign((((gconst112*r20))+((gconst113*r21)))),-1);
if(!x4304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4303.value)+(((1.5707963267949)*(x4304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4305=IKsin(j4);
IkReal x4306=IKcos(j4);
IkReal x4307=(gconst113*r10);
IkReal x4308=((1.0)*cj2);
IkReal x4309=(gconst112*r01);
IkReal x4310=(sj1*sj2);
IkReal x4311=(gconst112*r11);
IkReal x4312=(gconst113*r20);
IkReal x4313=(gconst113*r00);
IkReal x4314=(gconst112*r21);
IkReal x4315=((1.0)*x4306);
IkReal x4316=((1.0)*x4305);
evalcond[0]=((((-1.0)*r22*x4315))+(((-1.0)*x4314*x4316))+((x4305*x4312)));
evalcond[1]=(sj0+(((-1.0)*x4309*x4316))+(((-1.0)*r02*x4315))+((x4305*x4313)));
evalcond[2]=((((-1.0)*x4311*x4316))+((x4305*x4307))+(((-1.0)*r12*x4315))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4305))+(((-1.0)*cj1*sj2))+(((-1.0)*x4314*x4315))+(((-1.0)*sj1*x4308))+((x4306*x4312)));
evalcond[4]=(((r02*x4305))+(((-1.0)*cj0*cj1*x4308))+(((-1.0)*x4309*x4315))+((cj0*x4310))+((x4306*x4313)));
evalcond[5]=(((r12*x4305))+(((-1.0)*cj1*sj0*x4308))+(((-1.0)*x4311*x4315))+((sj0*x4310))+((x4306*x4307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4317=((1.0)*gconst112);
CheckValue<IkReal> x4318=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r01))+(((-1.0)*r00*x4317)))),-1);
if(!x4318.valid){
continue;
}
CheckValue<IkReal> x4319 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4317))+((cj0*gconst113*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4318.value)))+(x4319.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4320=IKsin(j4);
IkReal x4321=IKcos(j4);
IkReal x4322=(gconst113*r10);
IkReal x4323=((1.0)*cj2);
IkReal x4324=(gconst112*r01);
IkReal x4325=(sj1*sj2);
IkReal x4326=(gconst112*r11);
IkReal x4327=(gconst113*r20);
IkReal x4328=(gconst113*r00);
IkReal x4329=(gconst112*r21);
IkReal x4330=((1.0)*x4321);
IkReal x4331=((1.0)*x4320);
evalcond[0]=(((x4320*x4327))+(((-1.0)*r22*x4330))+(((-1.0)*x4329*x4331)));
evalcond[1]=(sj0+(((-1.0)*r02*x4330))+(((-1.0)*x4324*x4331))+((x4320*x4328)));
evalcond[2]=((((-1.0)*x4326*x4331))+((x4320*x4322))+(((-1.0)*r12*x4330))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4323))+((x4321*x4327))+(((-1.0)*cj1*sj2))+((r22*x4320))+(((-1.0)*x4329*x4330)));
evalcond[4]=(((cj0*x4325))+(((-1.0)*cj0*cj1*x4323))+(((-1.0)*x4324*x4330))+((x4321*x4328))+((r02*x4320)));
evalcond[5]=((((-1.0)*cj1*sj0*x4323))+((x4321*x4322))+(((-1.0)*x4326*x4330))+((sj0*x4325))+((r12*x4320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4332=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4332;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x4332);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4333=((1.0)*sj5);
IkReal x4334=((((-1.0)*r00*x4333))+(((-1.0)*cj5*r01)));
j4eval[0]=x4334;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x4333))))));
j4eval[2]=IKsign(x4334);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4335=cj5*cj5;
IkReal x4336=r11*r11;
IkReal x4337=(r11*sj5);
IkReal x4338=(cj5*r10);
IkReal x4339=((r12*r12)+(((-2.0)*x4337*x4338))+(((-1.0)*x4335*x4336))+x4336+((x4335*(r10*r10))));
j4eval[0]=x4339;
j4eval[1]=IKsign(x4339);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4337))+x4338))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4340=cj5*cj5;
IkReal x4341=r11*r11;
IkReal x4342=(cj5*r10);
IkReal x4343=(r11*sj5);
CheckValue<IkReal> x4344=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x4340*x4341))+((x4340*(r10*r10)))+(((-2.0)*x4342*x4343))+x4341)),-1);
if(!x4344.valid){
continue;
}
CheckValue<IkReal> x4345 = IKatan2WithCheck(IkReal((x4342+(((-1.0)*x4343)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4344.value)))+(x4345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4346=IKcos(j4);
IkReal x4347=IKsin(j4);
IkReal x4348=(cj5*r10);
IkReal x4349=((1.0)*cj1);
IkReal x4350=((1.0)*x4346);
IkReal x4351=(cj5*x4347);
IkReal x4352=(cj5*x4346);
IkReal x4353=((1.0)*sj5*x4347);
evalcond[0]=((((-1.0)*r11*sj5*x4350))+((r12*x4347))+((x4346*x4348)));
evalcond[1]=((((-1.0)*r21*x4353))+((r20*x4351))+(((-1.0)*r22*x4350)));
evalcond[2]=((((-1.0)*r01*x4353))+(((-1.0)*r02*x4350))+((r00*x4351)));
evalcond[3]=((-1.0)+((x4347*x4348))+(((-1.0)*r12*x4350))+(((-1.0)*r11*x4353)));
evalcond[4]=(((r02*x4347))+((sj1*sj2))+(((-1.0)*r01*sj5*x4350))+((r00*x4352))+(((-1.0)*cj2*x4349)));
evalcond[5]=((((-1.0)*r21*sj5*x4350))+((r20*x4352))+(((-1.0)*cj2*sj1))+((r22*x4347))+(((-1.0)*sj2*x4349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4354=((1.0)*sj5);
CheckValue<IkReal> x4355=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x4354)))),-1);
if(!x4355.valid){
continue;
}
CheckValue<IkReal> x4356 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x4354))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4355.value)))+(x4356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4357=IKcos(j4);
IkReal x4358=IKsin(j4);
IkReal x4359=(cj5*r10);
IkReal x4360=((1.0)*cj1);
IkReal x4361=((1.0)*x4357);
IkReal x4362=(cj5*x4358);
IkReal x4363=(cj5*x4357);
IkReal x4364=((1.0)*sj5*x4358);
evalcond[0]=(((x4357*x4359))+(((-1.0)*r11*sj5*x4361))+((r12*x4358)));
evalcond[1]=((((-1.0)*r22*x4361))+((r20*x4362))+(((-1.0)*r21*x4364)));
evalcond[2]=(((r00*x4362))+(((-1.0)*r02*x4361))+(((-1.0)*r01*x4364)));
evalcond[3]=((-1.0)+((x4358*x4359))+(((-1.0)*r12*x4361))+(((-1.0)*r11*x4364)));
evalcond[4]=((((-1.0)*cj2*x4360))+((sj1*sj2))+((r00*x4363))+((r02*x4358))+(((-1.0)*r01*sj5*x4361)));
evalcond[5]=((((-1.0)*r21*sj5*x4361))+((r20*x4363))+(((-1.0)*sj2*x4360))+(((-1.0)*cj2*sj1))+((r22*x4358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4365=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4365.valid){
continue;
}
CheckValue<IkReal> x4366 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4365.value)))+(x4366.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4367=IKcos(j4);
IkReal x4368=IKsin(j4);
IkReal x4369=(cj5*r10);
IkReal x4370=((1.0)*cj1);
IkReal x4371=((1.0)*x4367);
IkReal x4372=(cj5*x4368);
IkReal x4373=(cj5*x4367);
IkReal x4374=((1.0)*sj5*x4368);
evalcond[0]=((((-1.0)*r11*sj5*x4371))+((r12*x4368))+((x4367*x4369)));
evalcond[1]=((((-1.0)*r22*x4371))+((r20*x4372))+(((-1.0)*r21*x4374)));
evalcond[2]=(((r00*x4372))+(((-1.0)*r02*x4371))+(((-1.0)*r01*x4374)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x4374))+((x4368*x4369))+(((-1.0)*r12*x4371)));
evalcond[4]=((((-1.0)*r01*sj5*x4371))+((r00*x4373))+((sj1*sj2))+(((-1.0)*cj2*x4370))+((r02*x4368)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r20*x4373))+(((-1.0)*r21*sj5*x4371))+(((-1.0)*sj2*x4370))+((r22*x4368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4375=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4375;
j4eval[1]=IKsign(x4375);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4376=((1.0)*sj5);
IkReal x4377=((((-1.0)*r20*x4376))+(((-1.0)*cj5*r21)));
j4eval[0]=x4377;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x4376))+((cj5*r00))))));
j4eval[2]=IKsign(x4377);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4378=(sj1*sj2);
IkReal x4379=(cj5*r10);
IkReal x4380=(r11*sj5);
IkReal x4381=(cj1*cj2);
IkReal x4382=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4382;
j4eval[1]=IKsign(x4382);
j4eval[2]=((IKabs(((((-1.0)*r12*x4381))+((r12*x4378)))))+(IKabs(((((-1.0)*x4378*x4379))+((x4378*x4380))+((x4379*x4381))+(((-1.0)*x4380*x4381))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4383=(sj1*sj2);
IkReal x4384=(cj5*r10);
IkReal x4385=(r11*sj5);
IkReal x4386=(cj1*cj2);
CheckValue<IkReal> x4387 = IKatan2WithCheck(IkReal(((((-1.0)*x4383*x4384))+((x4383*x4385))+(((-1.0)*x4385*x4386))+((x4384*x4386)))),IkReal(((((-1.0)*r12*x4386))+((r12*x4383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4387.valid){
continue;
}
CheckValue<IkReal> x4388=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4387.value)+(((1.5707963267949)*(x4388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4389=IKcos(j4);
IkReal x4390=IKsin(j4);
IkReal x4391=(cj5*r10);
IkReal x4392=((1.0)*sj2);
IkReal x4393=((1.0)*x4389);
IkReal x4394=(cj5*x4390);
IkReal x4395=(cj5*x4389);
IkReal x4396=((1.0)*sj5*x4390);
evalcond[0]=(((x4389*x4391))+(((-1.0)*r11*sj5*x4393))+((r12*x4390)));
evalcond[1]=((((-1.0)*r22*x4393))+((r20*x4394))+(((-1.0)*r21*x4396)));
evalcond[2]=((((-1.0)*r02*x4393))+(((-1.0)*r01*x4396))+((r00*x4394)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4393))+(((-1.0)*r11*x4396))+((x4390*x4391)));
evalcond[4]=((((-1.0)*r01*sj5*x4393))+((r02*x4390))+((cj1*cj2))+(((-1.0)*sj1*x4392))+((r00*x4395)));
evalcond[5]=(((r22*x4390))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4393))+(((-1.0)*cj1*x4392))+((r20*x4395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4397=((1.0)*sj5);
CheckValue<IkReal> x4398 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x4397))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4398.valid){
continue;
}
CheckValue<IkReal> x4399=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x4397)))),-1);
if(!x4399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4398.value)+(((1.5707963267949)*(x4399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4400=IKcos(j4);
IkReal x4401=IKsin(j4);
IkReal x4402=(cj5*r10);
IkReal x4403=((1.0)*sj2);
IkReal x4404=((1.0)*x4400);
IkReal x4405=(cj5*x4401);
IkReal x4406=(cj5*x4400);
IkReal x4407=((1.0)*sj5*x4401);
evalcond[0]=((((-1.0)*r11*sj5*x4404))+((x4400*x4402))+((r12*x4401)));
evalcond[1]=((((-1.0)*r21*x4407))+((r20*x4405))+(((-1.0)*r22*x4404)));
evalcond[2]=(((r00*x4405))+(((-1.0)*r01*x4407))+(((-1.0)*r02*x4404)));
evalcond[3]=((1.0)+((x4401*x4402))+(((-1.0)*r12*x4404))+(((-1.0)*r11*x4407)));
evalcond[4]=((((-1.0)*sj1*x4403))+(((-1.0)*r01*sj5*x4404))+((r00*x4406))+((cj1*cj2))+((r02*x4401)));
evalcond[5]=(((r22*x4401))+(((-1.0)*r21*sj5*x4404))+(((-1.0)*cj2*sj1))+((r20*x4406))+(((-1.0)*cj1*x4403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4408=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4408.valid){
continue;
}
CheckValue<IkReal> x4409 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4408.value)))+(x4409.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4410=IKcos(j4);
IkReal x4411=IKsin(j4);
IkReal x4412=(cj5*r10);
IkReal x4413=((1.0)*sj2);
IkReal x4414=((1.0)*x4410);
IkReal x4415=(cj5*x4411);
IkReal x4416=(cj5*x4410);
IkReal x4417=((1.0)*sj5*x4411);
evalcond[0]=(((x4410*x4412))+((r12*x4411))+(((-1.0)*r11*sj5*x4414)));
evalcond[1]=((((-1.0)*r21*x4417))+((r20*x4415))+(((-1.0)*r22*x4414)));
evalcond[2]=((((-1.0)*r01*x4417))+(((-1.0)*r02*x4414))+((r00*x4415)));
evalcond[3]=((1.0)+(((-1.0)*r11*x4417))+(((-1.0)*r12*x4414))+((x4411*x4412)));
evalcond[4]=((((-1.0)*sj1*x4413))+(((-1.0)*r01*sj5*x4414))+((r00*x4416))+((r02*x4411))+((cj1*cj2)));
evalcond[5]=(((r22*x4411))+(((-1.0)*r21*sj5*x4414))+(((-1.0)*cj2*sj1))+((r20*x4416))+(((-1.0)*cj1*x4413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4418=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4418);
rxp0_2=(py*r00);
rxp1_0=(r21*x4418);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4419=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4419);
rxp0_2=(py*r00);
rxp1_0=(r21*x4419);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4420=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4420);
rxp0_2=(py*r00);
rxp1_0=(r21*x4420);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4423=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x4423.valid){
continue;
}
IkReal x4421=x4423.value;
IkReal x4422=(cj0*x4421);
cj4array[0]=((((-1.0)*sj1*sj2*x4422))+((cj1*cj2*x4422)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4424=IKsin(j4);
IkReal x4425=IKcos(j4);
IkReal x4426=(cj5*r20);
IkReal x4427=((1.0)*sj5);
evalcond[0]=(r12*x4424);
evalcond[1]=((((-1.0)*r12*x4425))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x4424*x4427))+((x4424*x4426)));
evalcond[3]=((((-1.0)*r01*x4424*x4427))+((cj5*r00*x4424)));
evalcond[4]=((((-1.0)*r21*x4425*x4427))+((x4425*x4426))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4429=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x4429.valid){
continue;
}
IkReal x4428=x4429.value;
cj4array[0]=(((cj2*sj1*x4428))+((cj1*sj2*x4428)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4430=IKsin(j4);
IkReal x4431=IKcos(j4);
IkReal x4432=(cj5*r00);
IkReal x4433=((1.0)*cj0);
IkReal x4434=((1.0)*r01*sj5);
evalcond[0]=(r12*x4430);
evalcond[1]=((((-1.0)*r12*x4431))+(((-1.0)*x4433)));
evalcond[2]=((((-1.0)*r21*sj5*x4430))+((cj5*r20*x4430)));
evalcond[3]=((((-1.0)*x4430*x4434))+((x4430*x4432)));
evalcond[4]=((((-1.0)*cj1*cj2*x4433))+((x4431*x4432))+(((-1.0)*x4431*x4434))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4435=IKPowWithIntegerCheck(r12,-1);
if(!x4435.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x4435.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4436=IKsin(j4);
IkReal x4437=IKcos(j4);
IkReal x4438=((1.0)*cj1);
IkReal x4439=((1.0)*sj5);
IkReal x4440=(cj5*x4437);
IkReal x4441=(cj5*x4436);
evalcond[0]=(r12*x4436);
evalcond[1]=(((r20*x4441))+(((-1.0)*r21*x4436*x4439)));
evalcond[2]=(((r00*x4441))+(((-1.0)*r01*x4436*x4439)));
evalcond[3]=(((r20*x4440))+(((-1.0)*r21*x4437*x4439))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4438)));
evalcond[4]=(((r00*x4440))+(((-1.0)*cj0*cj2*x4438))+(((-1.0)*r01*x4437*x4439))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4442=((1.0)*sj5);
CheckValue<IkReal> x4443=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4443.valid){
continue;
}
CheckValue<IkReal> x4444 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+(((-1.0)*cj0*r01*x4442))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x4442)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4443.value)))+(x4444.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4445=IKsin(j4);
IkReal x4446=IKcos(j4);
IkReal x4447=((1.0)*cj1);
IkReal x4448=(sj1*sj2);
IkReal x4449=(cj5*r10);
IkReal x4450=((1.0)*x4446);
IkReal x4451=(cj5*x4445);
IkReal x4452=(cj5*x4446);
IkReal x4453=((1.0)*sj5*x4445);
evalcond[0]=(((r20*x4451))+(((-1.0)*r22*x4450))+(((-1.0)*r21*x4453)));
evalcond[1]=(sj0+((r00*x4451))+(((-1.0)*r02*x4450))+(((-1.0)*r01*x4453)));
evalcond[2]=((((-1.0)*r11*x4453))+(((-1.0)*r12*x4450))+((x4445*x4449))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x4452))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4447))+(((-1.0)*r21*sj5*x4450))+((r22*x4445)));
evalcond[4]=((((-1.0)*r01*sj5*x4450))+((r00*x4452))+(((-1.0)*cj0*cj2*x4447))+((cj0*x4448))+((r02*x4445)));
evalcond[5]=(((sj0*x4448))+((x4446*x4449))+(((-1.0)*cj2*sj0*x4447))+(((-1.0)*r11*sj5*x4450))+((r12*x4445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4454=((1.0)*sj5);
CheckValue<IkReal> x4455 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4455.valid){
continue;
}
CheckValue<IkReal> x4456=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4454))+(((-1.0)*cj5*r01)))),-1);
if(!x4456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4455.value)+(((1.5707963267949)*(x4456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4457=IKsin(j4);
IkReal x4458=IKcos(j4);
IkReal x4459=((1.0)*cj1);
IkReal x4460=(sj1*sj2);
IkReal x4461=(cj5*r10);
IkReal x4462=((1.0)*x4458);
IkReal x4463=(cj5*x4457);
IkReal x4464=(cj5*x4458);
IkReal x4465=((1.0)*sj5*x4457);
evalcond[0]=((((-1.0)*r21*x4465))+(((-1.0)*r22*x4462))+((r20*x4463)));
evalcond[1]=((((-1.0)*r01*x4465))+sj0+((r00*x4463))+(((-1.0)*r02*x4462)));
evalcond[2]=((((-1.0)*r12*x4462))+(((-1.0)*r11*x4465))+((x4457*x4461))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4459))+((r20*x4464))+((r22*x4457))+(((-1.0)*r21*sj5*x4462)));
evalcond[4]=((((-1.0)*r01*sj5*x4462))+(((-1.0)*cj0*cj2*x4459))+((r00*x4464))+((r02*x4457))+((cj0*x4460)));
evalcond[5]=(((x4458*x4461))+(((-1.0)*cj2*sj0*x4459))+((sj0*x4460))+((r12*x4457))+(((-1.0)*r11*sj5*x4462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4466=((1.0)*sj5);
CheckValue<IkReal> x4467=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4466)))),-1);
if(!x4467.valid){
continue;
}
CheckValue<IkReal> x4468 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4466)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4467.value)))+(x4468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4469=IKsin(j4);
IkReal x4470=IKcos(j4);
IkReal x4471=((1.0)*cj1);
IkReal x4472=(sj1*sj2);
IkReal x4473=(cj5*r10);
IkReal x4474=((1.0)*x4470);
IkReal x4475=(cj5*x4469);
IkReal x4476=(cj5*x4470);
IkReal x4477=((1.0)*sj5*x4469);
evalcond[0]=(((r20*x4475))+(((-1.0)*r21*x4477))+(((-1.0)*r22*x4474)));
evalcond[1]=(sj0+((r00*x4475))+(((-1.0)*r01*x4477))+(((-1.0)*r02*x4474)));
evalcond[2]=((((-1.0)*r12*x4474))+(((-1.0)*r11*x4477))+(((-1.0)*cj0))+((x4469*x4473)));
evalcond[3]=(((r22*x4469))+((r20*x4476))+(((-1.0)*sj2*x4471))+(((-1.0)*r21*sj5*x4474))+(((-1.0)*cj2*sj1)));
evalcond[4]=((((-1.0)*cj0*cj2*x4471))+((cj0*x4472))+(((-1.0)*r01*sj5*x4474))+((r00*x4476))+((r02*x4469)));
evalcond[5]=(((sj0*x4472))+((x4470*x4473))+((r12*x4469))+(((-1.0)*cj2*sj0*x4471))+(((-1.0)*r11*sj5*x4474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4478=r21*r21;
IkReal x4479=cj5*cj5;
IkReal x4480=(cj5*r20);
IkReal x4481=(cj1*sj2);
IkReal x4482=(r21*sj5);
IkReal x4483=((1.0)*cj2*sj1);
CheckValue<IkReal> x4484 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4481))+(((-1.0)*r22*x4483)))),IkReal((((cj2*sj1*x4482))+(((-1.0)*x4480*x4481))+(((-1.0)*x4480*x4483))+((x4481*x4482)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4484.valid){
continue;
}
CheckValue<IkReal> x4485=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4479*(r20*r20)))+((x4478*x4479))+(((-1.0)*(r22*r22)))+(((2.0)*x4480*x4482))+(((-1.0)*x4478)))),-1);
if(!x4485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4484.value)+(((1.5707963267949)*(x4485.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4486=IKsin(j4);
IkReal x4487=IKcos(j4);
IkReal x4488=(r21*sj5);
IkReal x4489=(cj5*r20);
IkReal x4490=((1.0)*x4487);
evalcond[0]=((((-1.0)*x4486*x4488))+(((-1.0)*r22*x4490))+((x4486*x4489)));
evalcond[1]=(((x4487*x4489))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x4488*x4490))+((r22*x4486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4491=(cj5*sj4);
IkReal x4492=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x4491))+((r01*x4492))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x4492))+((r10*x4491))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x4491))+((r01*x4492))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x4492))+((r10*x4491))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x4491))+((r01*x4492))+((cj4*r02))), ((((-1.0)*r11*x4492))+((r10*x4491))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4493=IKcos(j0);
IkReal x4494=IKsin(j0);
IkReal x4495=(cj5*r10);
IkReal x4496=((0.353)*cj2);
IkReal x4497=(cj5*r00);
IkReal x4498=(cj5*r01);
IkReal x4499=((0.117)*sj5);
IkReal x4500=(cj5*r11);
IkReal x4501=(sj1*sj2);
IkReal x4502=((1.0)*cj4);
IkReal x4503=((1.0)*cj2);
IkReal x4504=(cj2*sj1);
IkReal x4505=(cj1*x4493);
IkReal x4506=((1.0)*sj4*sj5);
IkReal x4507=(cj1*x4494);
evalcond[0]=((((-1.0)*r01*x4506))+x4494+((sj4*x4497))+(((-1.0)*r02*x4502)));
evalcond[1]=((((-1.0)*x4493))+((sj4*x4495))+(((-1.0)*r12*x4502))+(((-1.0)*r11*x4506)));
evalcond[2]=(((r00*sj5))+x4498+((x4493*x4504))+((sj2*x4505)));
evalcond[3]=(((r10*sj5))+x4500+((x4494*x4504))+((sj2*x4507)));
evalcond[4]=(((cj4*x4497))+((x4493*x4501))+(((-1.0)*x4503*x4505))+((r02*sj4))+(((-1.0)*r01*sj5*x4502)));
evalcond[5]=(((cj4*x4495))+((x4494*x4501))+(((-1.0)*r11*sj5*x4502))+(((-1.0)*x4503*x4507))+((r12*sj4)));
evalcond[6]=((((0.353)*x4493*x4501))+(((-1.0)*x4496*x4505))+(((-1.0)*px))+(((-0.43)*x4505))+(((0.139)*x4494))+((r00*x4499))+(((0.117)*x4498)));
evalcond[7]=(((r10*x4499))+(((-1.0)*x4496*x4507))+(((-1.0)*py))+(((0.353)*x4494*x4501))+(((0.117)*x4500))+(((-0.43)*x4507))+(((-0.139)*x4493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4508=((1.0)*cj5);
IkReal x4509=((1.0)*sj5);
CheckValue<IkReal> x4510=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x4510.valid){
continue;
}
CheckValue<IkReal> x4511 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x4508))+(((-1.0)*r10*x4509)))),IkReal(((((-1.0)*r00*x4509))+(((-1.0)*r01*x4508)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4511.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4510.value)))+(x4511.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4512=IKcos(j0);
IkReal x4513=IKsin(j0);
IkReal x4514=((0.353)*cj2);
IkReal x4515=(cj5*r01);
IkReal x4516=((0.117)*sj5);
IkReal x4517=(cj5*r11);
IkReal x4518=(cj2*sj1);
IkReal x4519=(cj1*x4512);
IkReal x4520=(cj1*x4513);
IkReal x4521=((0.353)*sj1*sj2);
evalcond[0]=(((r00*sj5))+x4515+((sj2*x4519))+((x4512*x4518)));
evalcond[1]=(((r10*sj5))+x4517+((x4513*x4518))+((sj2*x4520)));
evalcond[2]=((((-0.43)*x4519))+(((0.139)*x4513))+(((-1.0)*px))+(((0.117)*x4515))+((r00*x4516))+((x4512*x4521))+(((-1.0)*x4514*x4519)));
evalcond[3]=(((r10*x4516))+(((-0.139)*x4512))+(((-1.0)*x4514*x4520))+(((-1.0)*py))+(((0.117)*x4517))+(((-0.43)*x4520))+((x4513*x4521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4522=((1.0)*sj5);
IkReal x4523=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4522)));
j4eval[0]=x4523;
j4eval[1]=IKsign(x4523);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x4522))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4524=((1.0)*sj5);
IkReal x4525=((((-1.0)*r00*x4524))+(((-1.0)*cj5*r01)));
j4eval[0]=x4525;
j4eval[1]=IKsign(x4525);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4524)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4526=((1.0)*sj5);
IkReal x4527=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4527;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x4526))+(((-1.0)*cj0*r01*x4526)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x4527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4529 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4529)==0){
continue;
}
IkReal x4528=pow(x4529,-0.5);
CheckValue<IkReal> x4530 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4530.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4530.value));
IkReal gconst97=((-1.0)*r21*x4528);
IkReal gconst98=(r20*x4528);
CheckValue<IkReal> x4531 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4531.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4531.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x4534 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4534.valid){
continue;
}
IkReal x4532=((-1.0)*(x4534.value));
IkReal x4533=x4528;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x4532;
IkReal gconst96=x4532;
IkReal gconst97=((-1.0)*r21*x4533);
IkReal gconst98=(r20*x4533);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4537 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4537.valid){
continue;
}
IkReal x4535=((-1.0)*(x4537.value));
IkReal x4536=x4528;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x4535;
IkReal gconst96=x4535;
IkReal gconst97=((-1.0)*r21*x4536);
IkReal gconst98=(r20*x4536);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x4540 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4540.valid){
continue;
}
IkReal x4538=((-1.0)*(x4540.value));
IkReal x4539=x4528;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x4538;
IkReal gconst96=x4538;
IkReal gconst97=((-1.0)*r21*x4539);
IkReal gconst98=(r20*x4539);
IkReal x4541=((1.0)*(r22*r22));
CheckValue<IkReal> x4545=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4541))),-1);
if(!x4545.valid){
continue;
}
IkReal x4542=x4545.value;
IkReal x4543=((1.0)*x4542);
IkReal x4544=((((-2.0)*x4542*(r20*r20)*(r21*r21)))+(((-1.0)*x4543*(r21*r21*r21*r21)))+(((-1.0)*x4543*(r20*r20*r20*r20)))+(((-1.0)*x4541)));
j4eval[0]=x4544;
j4eval[1]=IKsign(x4544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4546=(cj1*sj2);
IkReal x4547=((1.0)*r22);
IkReal x4548=(gconst97*r21);
IkReal x4549=(cj2*sj1);
IkReal x4550=(gconst98*r20);
CheckValue<IkReal> x4551 = IKatan2WithCheck(IkReal(((((-1.0)*x4546*x4547))+(((-1.0)*x4547*x4549)))),IkReal((((x4546*x4548))+(((-1.0)*x4549*x4550))+((x4548*x4549))+(((-1.0)*x4546*x4550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4551.valid){
continue;
}
CheckValue<IkReal> x4552=IKPowWithIntegerCheck(IKsign(((((2.0)*x4548*x4550))+(((-1.0)*r22*x4547))+(((-1.0)*(x4550*x4550)))+(((-1.0)*(x4548*x4548))))),-1);
if(!x4552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4551.value)+(((1.5707963267949)*(x4552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4553=IKsin(j4);
IkReal x4554=IKcos(j4);
IkReal x4555=(gconst98*r00);
IkReal x4556=(sj1*sj2);
IkReal x4557=((1.0)*cj2);
IkReal x4558=((1.0)*x4554);
IkReal x4559=(gconst98*x4553);
IkReal x4560=(gconst98*x4554);
IkReal x4561=((1.0)*gconst97*x4553);
evalcond[0]=((((-1.0)*r21*x4561))+(((-1.0)*r22*x4558))+((r20*x4559)));
evalcond[1]=(sj0+(((-1.0)*r01*x4561))+((x4553*x4555))+(((-1.0)*r02*x4558)));
evalcond[2]=((((-1.0)*r12*x4558))+((r10*x4559))+(((-1.0)*r11*x4561))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r22*x4553))+((r20*x4560))+(((-1.0)*gconst97*r21*x4558))+(((-1.0)*sj1*x4557)));
evalcond[4]=((((-1.0)*cj0*cj1*x4557))+((r02*x4553))+(((-1.0)*gconst97*r01*x4558))+((x4554*x4555))+((cj0*x4556)));
evalcond[5]=(((r10*x4560))+(((-1.0)*gconst97*r11*x4558))+((r12*x4553))+(((-1.0)*cj1*sj0*x4557))+((sj0*x4556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4562=((1.0)*gconst97);
CheckValue<IkReal> x4563=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4562))+(((-1.0)*gconst98*r01)))),-1);
if(!x4563.valid){
continue;
}
CheckValue<IkReal> x4564 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4562))+((cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4563.value)))+(x4564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4565=IKsin(j4);
IkReal x4566=IKcos(j4);
IkReal x4567=(gconst98*r00);
IkReal x4568=(sj1*sj2);
IkReal x4569=((1.0)*cj2);
IkReal x4570=((1.0)*x4566);
IkReal x4571=(gconst98*x4565);
IkReal x4572=(gconst98*x4566);
IkReal x4573=((1.0)*gconst97*x4565);
evalcond[0]=(((r20*x4571))+(((-1.0)*r22*x4570))+(((-1.0)*r21*x4573)));
evalcond[1]=((((-1.0)*r01*x4573))+((x4565*x4567))+sj0+(((-1.0)*r02*x4570)));
evalcond[2]=(((r10*x4571))+(((-1.0)*r11*x4573))+(((-1.0)*r12*x4570))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4569))+((r22*x4565))+(((-1.0)*cj1*sj2))+((r20*x4572))+(((-1.0)*gconst97*r21*x4570)));
evalcond[4]=(((x4566*x4567))+(((-1.0)*cj0*cj1*x4569))+((cj0*x4568))+((r02*x4565))+(((-1.0)*gconst97*r01*x4570)));
evalcond[5]=(((r10*x4572))+((r12*x4565))+((sj0*x4568))+(((-1.0)*gconst97*r11*x4570))+(((-1.0)*cj1*sj0*x4569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4574=((1.0)*gconst97);
CheckValue<IkReal> x4575=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst98*r11))+(((-1.0)*r10*x4574)))),-1);
if(!x4575.valid){
continue;
}
CheckValue<IkReal> x4576 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst98*r20*sj0))+(((-1.0)*r21*sj0*x4574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4575.value)))+(x4576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4577=IKsin(j4);
IkReal x4578=IKcos(j4);
IkReal x4579=(gconst98*r00);
IkReal x4580=(sj1*sj2);
IkReal x4581=((1.0)*cj2);
IkReal x4582=((1.0)*x4578);
IkReal x4583=(gconst98*x4577);
IkReal x4584=(gconst98*x4578);
IkReal x4585=((1.0)*gconst97*x4577);
evalcond[0]=((((-1.0)*r22*x4582))+((r20*x4583))+(((-1.0)*r21*x4585)));
evalcond[1]=(sj0+(((-1.0)*r01*x4585))+(((-1.0)*r02*x4582))+((x4577*x4579)));
evalcond[2]=((((-1.0)*r11*x4585))+(((-1.0)*r12*x4582))+((r10*x4583))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst97*r21*x4582))+((r22*x4577))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4581))+((r20*x4584)));
evalcond[4]=((((-1.0)*gconst97*r01*x4582))+((r02*x4577))+((cj0*x4580))+(((-1.0)*cj0*cj1*x4581))+((x4578*x4579)));
evalcond[5]=(((sj0*x4580))+((r12*x4577))+(((-1.0)*gconst97*r11*x4582))+((r10*x4584))+(((-1.0)*cj1*sj0*x4581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4587 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4587)==0){
continue;
}
IkReal x4586=pow(x4587,-0.5);
CheckValue<IkReal> x4588 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4588.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4588.value))));
IkReal gconst100=((1.0)*r21*x4586);
IkReal gconst101=((-1.0)*r20*x4586);
CheckValue<IkReal> x4589 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4589.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4589.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x4592 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4592.valid){
continue;
}
IkReal x4590=((1.0)*(x4592.value));
IkReal x4591=x4586;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4590)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4590)));
IkReal gconst100=((1.0)*r21*x4591);
IkReal gconst101=((-1.0)*r20*x4591);
IkReal x4593=r22*r22;
IkReal x4594=((1.0)*x4593);
CheckValue<IkReal> x4598=IKPowWithIntegerCheck(((-1.0)+x4593),-1);
if(!x4598.valid){
continue;
}
IkReal x4595=x4598.value;
if((((1.0)+(((-1.0)*x4594)))) < -0.00001)
continue;
IkReal x4596=IKsqrt(((1.0)+(((-1.0)*x4594))));
IkReal x4597=(sj0*x4595*x4596);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x4597+(((-1.0)*x4594*x4597))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4601 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4601.valid){
continue;
}
IkReal x4599=((1.0)*(x4601.value));
IkReal x4600=x4586;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4599)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4599)));
IkReal gconst100=((1.0)*r21*x4600);
IkReal gconst101=((-1.0)*r20*x4600);
IkReal x4602=r22*r22;
IkReal x4603=((1.0)*x4602);
CheckValue<IkReal> x4607=IKPowWithIntegerCheck(((-1.0)+x4602),-1);
if(!x4607.valid){
continue;
}
IkReal x4604=x4607.value;
if((((1.0)+(((-1.0)*x4603)))) < -0.00001)
continue;
IkReal x4605=IKsqrt(((1.0)+(((-1.0)*x4603))));
IkReal x4606=(cj0*x4604*x4605);
j4eval[0]=((IKabs(((((-1.0)*x4603*x4606))+x4606)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4610 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4610.valid){
continue;
}
IkReal x4608=((1.0)*(x4610.value));
IkReal x4609=x4586;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4608)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4608)));
IkReal gconst100=((1.0)*r21*x4609);
IkReal gconst101=((-1.0)*r20*x4609);
IkReal x4611=r22*r22;
IkReal x4612=(cj0*r02);
IkReal x4613=(r12*sj0);
CheckValue<IkReal> x4617=IKPowWithIntegerCheck(((-1.0)+x4611),-1);
if(!x4617.valid){
continue;
}
IkReal x4614=x4617.value;
if((((1.0)+(((-1.0)*x4611)))) < -0.00001)
continue;
IkReal x4615=IKsqrt(((1.0)+(((-1.0)*x4611))));
IkReal x4616=((1.0)*r22*x4614*x4615);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x4613+x4612)))+(IKabs(((((-1.0)*x4612*x4616))+(((-1.0)*x4613*x4616))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4618=((1.0)*gconst100);
CheckValue<IkReal> x4619=IKPowWithIntegerCheck(IKsign((((gconst100*r20))+((gconst101*r21)))),-1);
if(!x4619.valid){
continue;
}
CheckValue<IkReal> x4620 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4618))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*r11*sj0*x4618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4619.value)))+(x4620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4621=IKsin(j4);
IkReal x4622=IKcos(j4);
IkReal x4623=((1.0)*cj2);
IkReal x4624=(sj1*sj2);
IkReal x4625=(gconst101*r10);
IkReal x4626=((1.0)*x4622);
IkReal x4627=(gconst101*x4622);
IkReal x4628=(gconst101*x4621);
IkReal x4629=((1.0)*gconst100*x4621);
evalcond[0]=(((r20*x4628))+(((-1.0)*r22*x4626))+(((-1.0)*r21*x4629)));
evalcond[1]=(sj0+(((-1.0)*r01*x4629))+(((-1.0)*r02*x4626))+((r00*x4628)));
evalcond[2]=(((x4621*x4625))+(((-1.0)*r11*x4629))+(((-1.0)*r12*x4626))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x4627))+(((-1.0)*sj1*x4623))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst100*r21*x4626))+((r22*x4621)));
evalcond[4]=(((cj0*x4624))+((r02*x4621))+(((-1.0)*cj0*cj1*x4623))+((r00*x4627))+(((-1.0)*gconst100*r01*x4626)));
evalcond[5]=(((r12*x4621))+((x4622*x4625))+(((-1.0)*gconst100*r11*x4626))+(((-1.0)*cj1*sj0*x4623))+((sj0*x4624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4630=((1.0)*gconst100);
CheckValue<IkReal> x4631 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4630))+((cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4631.valid){
continue;
}
CheckValue<IkReal> x4632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4630))+(((-1.0)*gconst101*r01)))),-1);
if(!x4632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4631.value)+(((1.5707963267949)*(x4632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4633=IKsin(j4);
IkReal x4634=IKcos(j4);
IkReal x4635=((1.0)*cj2);
IkReal x4636=(sj1*sj2);
IkReal x4637=(gconst101*r10);
IkReal x4638=((1.0)*x4634);
IkReal x4639=(gconst101*x4634);
IkReal x4640=(gconst101*x4633);
IkReal x4641=((1.0)*gconst100*x4633);
evalcond[0]=((((-1.0)*r21*x4641))+((r20*x4640))+(((-1.0)*r22*x4638)));
evalcond[1]=(sj0+(((-1.0)*r02*x4638))+((r00*x4640))+(((-1.0)*r01*x4641)));
evalcond[2]=(((x4633*x4637))+(((-1.0)*r11*x4641))+(((-1.0)*r12*x4638))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r20*x4639))+(((-1.0)*gconst100*r21*x4638))+(((-1.0)*sj1*x4635))+((r22*x4633)));
evalcond[4]=(((r00*x4639))+(((-1.0)*gconst100*r01*x4638))+((r02*x4633))+((cj0*x4636))+(((-1.0)*cj0*cj1*x4635)));
evalcond[5]=(((r12*x4633))+((sj0*x4636))+((x4634*x4637))+(((-1.0)*gconst100*r11*x4638))+(((-1.0)*cj1*sj0*x4635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4642=((1.0)*gconst100);
CheckValue<IkReal> x4643 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4642))+((gconst101*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4643.valid){
continue;
}
CheckValue<IkReal> x4644=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4642))+(((-1.0)*gconst101*r11)))),-1);
if(!x4644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4643.value)+(((1.5707963267949)*(x4644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4645=IKsin(j4);
IkReal x4646=IKcos(j4);
IkReal x4647=((1.0)*cj2);
IkReal x4648=(sj1*sj2);
IkReal x4649=(gconst101*r10);
IkReal x4650=((1.0)*x4646);
IkReal x4651=(gconst101*x4646);
IkReal x4652=(gconst101*x4645);
IkReal x4653=((1.0)*gconst100*x4645);
evalcond[0]=(((r20*x4652))+(((-1.0)*r22*x4650))+(((-1.0)*r21*x4653)));
evalcond[1]=(sj0+(((-1.0)*r02*x4650))+(((-1.0)*r01*x4653))+((r00*x4652)));
evalcond[2]=(((x4645*x4649))+(((-1.0)*r12*x4650))+(((-1.0)*r11*x4653))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x4651))+(((-1.0)*cj1*sj2))+((r22*x4645))+(((-1.0)*gconst100*r21*x4650))+(((-1.0)*sj1*x4647)));
evalcond[4]=(((r02*x4645))+(((-1.0)*cj0*cj1*x4647))+((r00*x4651))+(((-1.0)*gconst100*r01*x4650))+((cj0*x4648)));
evalcond[5]=((((-1.0)*cj1*sj0*x4647))+((x4646*x4649))+((sj0*x4648))+((r12*x4645))+(((-1.0)*gconst100*r11*x4650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4654=((-1.0)*r00);
IkReal x4656 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4656)==0){
continue;
}
IkReal x4655=pow(x4656,-0.5);
CheckValue<IkReal> x4657 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4654),IKFAST_ATAN2_MAGTHRESH);
if(!x4657.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4657.value));
IkReal gconst103=(r01*x4655);
IkReal gconst104=(x4654*x4655);
CheckValue<IkReal> x4658 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4658.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4658.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4659=((-1.0)*r00);
IkReal x4660=x4655;
CheckValue<IkReal> x4662 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4659),IKFAST_ATAN2_MAGTHRESH);
if(!x4662.valid){
continue;
}
IkReal x4661=((-1.0)*(x4662.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x4661;
IkReal gconst102=x4661;
IkReal gconst103=(r01*x4660);
IkReal gconst104=(x4659*x4660);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4663=((1.0)*gconst103);
CheckValue<IkReal> x4664 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4663))+((gconst104*r10*sj0))+(((-1.0)*r11*sj0*x4663))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4664.valid){
continue;
}
CheckValue<IkReal> x4665=IKPowWithIntegerCheck(IKsign((((gconst104*r21))+((gconst103*r20)))),-1);
if(!x4665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4664.value)+(((1.5707963267949)*(x4665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4666=IKsin(j4);
IkReal x4667=IKcos(j4);
IkReal x4668=((1.0)*cj2);
IkReal x4669=(sj1*sj2);
IkReal x4670=((1.0)*x4667);
IkReal x4671=(gconst104*x4667);
IkReal x4672=(gconst104*x4666);
IkReal x4673=((1.0)*gconst103*x4666);
evalcond[0]=((((-1.0)*r21*x4673))+(((-1.0)*r22*x4670))+((r20*x4672)));
evalcond[1]=((((-1.0)*r02*x4670))+sj0+((r00*x4672))+(((-1.0)*r01*x4673)));
evalcond[2]=(((r10*x4672))+(((-1.0)*r11*x4673))+(((-1.0)*r12*x4670))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4668))+(((-1.0)*cj1*sj2))+((r22*x4666))+(((-1.0)*gconst103*r21*x4670))+((r20*x4671)));
evalcond[4]=(((r02*x4666))+(((-1.0)*gconst103*r01*x4670))+(((-1.0)*cj0*cj1*x4668))+((r00*x4671))+((cj0*x4669)));
evalcond[5]=((((-1.0)*cj1*sj0*x4668))+(((-1.0)*gconst103*r11*x4670))+((sj0*x4669))+((r12*x4666))+((r10*x4671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4674=((1.0)*gconst103);
CheckValue<IkReal> x4675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4674))+(((-1.0)*gconst104*r11)))),-1);
if(!x4675.valid){
continue;
}
CheckValue<IkReal> x4676 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst104*r20*sj0))+(((-1.0)*r21*sj0*x4674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4675.value)))+(x4676.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4677=IKsin(j4);
IkReal x4678=IKcos(j4);
IkReal x4679=((1.0)*cj2);
IkReal x4680=(sj1*sj2);
IkReal x4681=((1.0)*x4678);
IkReal x4682=(gconst104*x4678);
IkReal x4683=(gconst104*x4677);
IkReal x4684=((1.0)*gconst103*x4677);
evalcond[0]=(((r20*x4683))+(((-1.0)*r22*x4681))+(((-1.0)*r21*x4684)));
evalcond[1]=(sj0+(((-1.0)*r01*x4684))+(((-1.0)*r02*x4681))+((r00*x4683)));
evalcond[2]=((((-1.0)*r11*x4684))+((r10*x4683))+(((-1.0)*cj0))+(((-1.0)*r12*x4681)));
evalcond[3]=(((r20*x4682))+(((-1.0)*gconst103*r21*x4681))+(((-1.0)*cj1*sj2))+((r22*x4677))+(((-1.0)*sj1*x4679)));
evalcond[4]=(((r02*x4677))+((r00*x4682))+((cj0*x4680))+(((-1.0)*cj0*cj1*x4679))+(((-1.0)*gconst103*r01*x4681)));
evalcond[5]=((((-1.0)*cj1*sj0*x4679))+(((-1.0)*gconst103*r11*x4681))+((r12*x4677))+((r10*x4682))+((sj0*x4680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4685=((-1.0)*r01);
IkReal x4687 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4687)==0){
continue;
}
IkReal x4686=pow(x4687,-0.5);
CheckValue<IkReal> x4688 = IKatan2WithCheck(IkReal(x4685),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4688.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4688.value))));
IkReal gconst106=(x4685*x4686);
IkReal gconst107=((1.0)*r00*x4686);
CheckValue<IkReal> x4689 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4689.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4689.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4690=((-1.0)*r01);
CheckValue<IkReal> x4693 = IKatan2WithCheck(IkReal(x4690),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4693.valid){
continue;
}
IkReal x4691=((1.0)*(x4693.value));
IkReal x4692=x4686;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4691)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4691)));
IkReal gconst106=(x4690*x4692);
IkReal gconst107=((1.0)*r00*x4692);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x4694=((-1.0)*r01);
CheckValue<IkReal> x4697 = IKatan2WithCheck(IkReal(x4694),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4697.valid){
continue;
}
IkReal x4695=((1.0)*(x4697.value));
IkReal x4696=x4686;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4695)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4695)));
IkReal gconst106=(x4694*x4696);
IkReal gconst107=((1.0)*r00*x4696);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4698=((-1.0)*r01);
CheckValue<IkReal> x4701 = IKatan2WithCheck(IkReal(x4698),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4701.valid){
continue;
}
IkReal x4699=((1.0)*(x4701.value));
IkReal x4700=x4686;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4699)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4699)));
IkReal gconst106=(x4698*x4700);
IkReal gconst107=((1.0)*r00*x4700);
IkReal x4702=r02*r02;
IkReal x4703=(r12*sj0);
IkReal x4704=x4686;
IkReal x4705=(cj0*x4704);
j4eval[0]=((IKabs(((((-1.0)*x4705))+((r02*x4703*x4704))+((x4702*x4705)))))+(IKabs((x4703+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4706=((1.0)*gconst106);
CheckValue<IkReal> x4707 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4706))+((gconst107*r10*sj0))+(((-1.0)*r11*sj0*x4706))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4707.valid){
continue;
}
CheckValue<IkReal> x4708=IKPowWithIntegerCheck(IKsign((((gconst107*r21))+((gconst106*r20)))),-1);
if(!x4708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4707.value)+(((1.5707963267949)*(x4708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4709=IKsin(j4);
IkReal x4710=IKcos(j4);
IkReal x4711=(gconst106*r01);
IkReal x4712=((1.0)*cj2);
IkReal x4713=(sj1*sj2);
IkReal x4714=(gconst106*r21);
IkReal x4715=(gconst106*r11);
IkReal x4716=((1.0)*x4710);
IkReal x4717=((1.0)*x4709);
IkReal x4718=(gconst107*x4709);
IkReal x4719=(gconst107*x4710);
evalcond[0]=((((-1.0)*x4714*x4717))+(((-1.0)*r22*x4716))+((r20*x4718)));
evalcond[1]=((((-1.0)*r02*x4716))+sj0+(((-1.0)*x4711*x4717))+((r00*x4718)));
evalcond[2]=(((r10*x4718))+(((-1.0)*r12*x4716))+(((-1.0)*x4715*x4717))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4714*x4716))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4712))+((r20*x4719))+((r22*x4709)));
evalcond[4]=(((cj0*x4713))+(((-1.0)*x4711*x4716))+((r00*x4719))+(((-1.0)*cj0*cj1*x4712))+((r02*x4709)));
evalcond[5]=(((r10*x4719))+((sj0*x4713))+(((-1.0)*x4715*x4716))+(((-1.0)*cj1*sj0*x4712))+((r12*x4709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4720=((1.0)*gconst106);
CheckValue<IkReal> x4721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4720))+(((-1.0)*gconst107*r01)))),-1);
if(!x4721.valid){
continue;
}
CheckValue<IkReal> x4722 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r20))+(((-1.0)*cj0*r21*x4720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4721.value)))+(x4722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4723=IKsin(j4);
IkReal x4724=IKcos(j4);
IkReal x4725=(gconst106*r01);
IkReal x4726=((1.0)*cj2);
IkReal x4727=(sj1*sj2);
IkReal x4728=(gconst106*r21);
IkReal x4729=(gconst106*r11);
IkReal x4730=((1.0)*x4724);
IkReal x4731=((1.0)*x4723);
IkReal x4732=(gconst107*x4723);
IkReal x4733=(gconst107*x4724);
evalcond[0]=((((-1.0)*x4728*x4731))+((r20*x4732))+(((-1.0)*r22*x4730)));
evalcond[1]=(sj0+(((-1.0)*x4725*x4731))+((r00*x4732))+(((-1.0)*r02*x4730)));
evalcond[2]=((((-1.0)*r12*x4730))+((r10*x4732))+(((-1.0)*x4729*x4731))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4726))+(((-1.0)*x4728*x4730))+((r20*x4733))+(((-1.0)*cj1*sj2))+((r22*x4723)));
evalcond[4]=(((cj0*x4727))+((r02*x4723))+(((-1.0)*x4725*x4730))+(((-1.0)*cj0*cj1*x4726))+((r00*x4733)));
evalcond[5]=(((sj0*x4727))+(((-1.0)*cj1*sj0*x4726))+((r10*x4733))+(((-1.0)*x4729*x4730))+((r12*x4723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4734=((1.0)*gconst106);
CheckValue<IkReal> x4735 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst107*r20*sj0))+(((-1.0)*r21*sj0*x4734)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4735.valid){
continue;
}
CheckValue<IkReal> x4736=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4734))+(((-1.0)*gconst107*r11)))),-1);
if(!x4736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4735.value)+(((1.5707963267949)*(x4736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4737=IKsin(j4);
IkReal x4738=IKcos(j4);
IkReal x4739=(gconst106*r01);
IkReal x4740=((1.0)*cj2);
IkReal x4741=(sj1*sj2);
IkReal x4742=(gconst106*r21);
IkReal x4743=(gconst106*r11);
IkReal x4744=((1.0)*x4738);
IkReal x4745=((1.0)*x4737);
IkReal x4746=(gconst107*x4737);
IkReal x4747=(gconst107*x4738);
evalcond[0]=(((r20*x4746))+(((-1.0)*r22*x4744))+(((-1.0)*x4742*x4745)));
evalcond[1]=(sj0+((r00*x4746))+(((-1.0)*x4739*x4745))+(((-1.0)*r02*x4744)));
evalcond[2]=((((-1.0)*r12*x4744))+((r10*x4746))+(((-1.0)*x4743*x4745))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4740))+((r20*x4747))+(((-1.0)*cj1*sj2))+((r22*x4737))+(((-1.0)*x4742*x4744)));
evalcond[4]=(((cj0*x4741))+((r00*x4747))+((r02*x4737))+(((-1.0)*cj0*cj1*x4740))+(((-1.0)*x4739*x4744)));
evalcond[5]=((((-1.0)*cj1*sj0*x4740))+((r10*x4747))+((sj0*x4741))+(((-1.0)*x4743*x4744))+((r12*x4737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4748=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4748;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x4748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4749=((1.0)*sj5);
IkReal x4750=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4749)));
j4eval[0]=x4750;
j4eval[1]=IKsign(x4750);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x4749)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4751=(cj1*cj2);
IkReal x4752=(cj5*r00);
IkReal x4753=(r01*sj5);
IkReal x4754=((1.0)*sj1*sj2);
IkReal x4755=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4755;
j4eval[1]=((IKabs(((((-1.0)*x4751*x4752))+(((-1.0)*x4753*x4754))+((x4751*x4753))+((sj1*sj2*x4752)))))+(IKabs((((r02*x4751))+(((-1.0)*r02*x4754))))));
j4eval[2]=IKsign(x4755);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4756=(r01*sj5);
IkReal x4757=(cj1*cj2);
IkReal x4758=(cj5*r00);
IkReal x4759=((1.0)*sj1*sj2);
CheckValue<IkReal> x4760=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4760.valid){
continue;
}
CheckValue<IkReal> x4761 = IKatan2WithCheck(IkReal((((x4756*x4757))+(((-1.0)*x4756*x4759))+((sj1*sj2*x4758))+(((-1.0)*x4757*x4758)))),IkReal((((r02*x4757))+(((-1.0)*r02*x4759)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4760.value)))+(x4761.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4762=IKcos(j4);
IkReal x4763=IKsin(j4);
IkReal x4764=((1.0)*cj1);
IkReal x4765=((1.0)*x4762);
IkReal x4766=(cj5*x4762);
IkReal x4767=(cj5*x4763);
IkReal x4768=((1.0)*sj5*x4763);
evalcond[0]=(((r02*x4763))+((r00*x4766))+(((-1.0)*r01*sj5*x4765)));
evalcond[1]=((((-1.0)*r22*x4765))+(((-1.0)*r21*x4768))+((r20*x4767)));
evalcond[2]=((((-1.0)*r12*x4765))+(((-1.0)*r11*x4768))+((r10*x4767)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4765))+((r00*x4767))+(((-1.0)*r01*x4768)));
evalcond[4]=((((-1.0)*r11*sj5*x4765))+((sj1*sj2))+((r12*x4763))+(((-1.0)*cj2*x4764))+((r10*x4766)));
evalcond[5]=(((r22*x4763))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4765))+(((-1.0)*sj2*x4764))+((r20*x4766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4769=((1.0)*sj5);
CheckValue<IkReal> x4770 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4770.valid){
continue;
}
CheckValue<IkReal> x4771=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4769)))),-1);
if(!x4771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4770.value)+(((1.5707963267949)*(x4771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4772=IKcos(j4);
IkReal x4773=IKsin(j4);
IkReal x4774=((1.0)*cj1);
IkReal x4775=((1.0)*x4772);
IkReal x4776=(cj5*x4772);
IkReal x4777=(cj5*x4773);
IkReal x4778=((1.0)*sj5*x4773);
evalcond[0]=(((r00*x4776))+((r02*x4773))+(((-1.0)*r01*sj5*x4775)));
evalcond[1]=(((r20*x4777))+(((-1.0)*r21*x4778))+(((-1.0)*r22*x4775)));
evalcond[2]=((((-1.0)*r11*x4778))+(((-1.0)*r12*x4775))+((r10*x4777)));
evalcond[3]=((1.0)+((r00*x4777))+(((-1.0)*r01*x4778))+(((-1.0)*r02*x4775)));
evalcond[4]=((((-1.0)*cj2*x4774))+((r12*x4773))+((sj1*sj2))+(((-1.0)*r11*sj5*x4775))+((r10*x4776)));
evalcond[5]=(((r20*x4776))+(((-1.0)*sj2*x4774))+(((-1.0)*cj2*sj1))+((r22*x4773))+(((-1.0)*r21*sj5*x4775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4779 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4779.valid){
continue;
}
CheckValue<IkReal> x4780=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4779.value)+(((1.5707963267949)*(x4780.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4781=IKcos(j4);
IkReal x4782=IKsin(j4);
IkReal x4783=((1.0)*cj1);
IkReal x4784=((1.0)*x4781);
IkReal x4785=(cj5*x4781);
IkReal x4786=(cj5*x4782);
IkReal x4787=((1.0)*sj5*x4782);
evalcond[0]=(((r02*x4782))+((r00*x4785))+(((-1.0)*r01*sj5*x4784)));
evalcond[1]=((((-1.0)*r21*x4787))+(((-1.0)*r22*x4784))+((r20*x4786)));
evalcond[2]=(((r10*x4786))+(((-1.0)*r12*x4784))+(((-1.0)*r11*x4787)));
evalcond[3]=((1.0)+((r00*x4786))+(((-1.0)*r02*x4784))+(((-1.0)*r01*x4787)));
evalcond[4]=((((-1.0)*r11*sj5*x4784))+((r10*x4785))+((r12*x4782))+((sj1*sj2))+(((-1.0)*cj2*x4783)));
evalcond[5]=((((-1.0)*r21*sj5*x4784))+((r22*x4782))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4783))+((r20*x4785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4788=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4788;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x4788);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4789=((1.0)*sj5);
IkReal x4790=((((-1.0)*r20*x4789))+(((-1.0)*cj5*r21)));
j4eval[0]=x4790;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x4789))))));
j4eval[2]=IKsign(x4790);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4791=cj5*cj5;
IkReal x4792=r01*r01;
IkReal x4793=(cj5*r00);
IkReal x4794=(r01*sj5);
IkReal x4795=(((x4791*(r00*r00)))+(((-1.0)*x4791*x4792))+x4792+(((-2.0)*x4793*x4794))+(r02*r02));
j4eval[0]=x4795;
j4eval[1]=((IKabs(r02))+(IKabs((x4793+(((-1.0)*x4794))))));
j4eval[2]=IKsign(x4795);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4796=cj5*cj5;
IkReal x4797=r01*r01;
IkReal x4798=(r01*sj5);
IkReal x4799=(cj5*r00);
CheckValue<IkReal> x4800=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4796*x4797))+x4797+((x4796*(r00*r00)))+(((-2.0)*x4798*x4799))+(r02*r02))),-1);
if(!x4800.valid){
continue;
}
CheckValue<IkReal> x4801 = IKatan2WithCheck(IkReal((x4799+(((-1.0)*x4798)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4800.value)))+(x4801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4802=IKcos(j4);
IkReal x4803=IKsin(j4);
IkReal x4804=((1.0)*sj2);
IkReal x4805=((1.0)*x4802);
IkReal x4806=(cj5*x4802);
IkReal x4807=(cj5*x4803);
IkReal x4808=((1.0)*sj5*x4803);
evalcond[0]=(((r02*x4803))+(((-1.0)*r01*sj5*x4805))+((r00*x4806)));
evalcond[1]=((((-1.0)*r22*x4805))+(((-1.0)*r21*x4808))+((r20*x4807)));
evalcond[2]=((((-1.0)*r11*x4808))+((r10*x4807))+(((-1.0)*r12*x4805)));
evalcond[3]=((-1.0)+((r00*x4807))+(((-1.0)*r01*x4808))+(((-1.0)*r02*x4805)));
evalcond[4]=((((-1.0)*r11*sj5*x4805))+(((-1.0)*sj1*x4804))+((r12*x4803))+((r10*x4806))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r21*sj5*x4805))+(((-1.0)*cj2*sj1))+((r22*x4803))+(((-1.0)*cj1*x4804))+((r20*x4806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4809=((1.0)*sj5);
CheckValue<IkReal> x4810=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4809))+(((-1.0)*cj5*r21)))),-1);
if(!x4810.valid){
continue;
}
CheckValue<IkReal> x4811 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x4809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4810.value)))+(x4811.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4812=IKcos(j4);
IkReal x4813=IKsin(j4);
IkReal x4814=((1.0)*sj2);
IkReal x4815=((1.0)*x4812);
IkReal x4816=(cj5*x4812);
IkReal x4817=(cj5*x4813);
IkReal x4818=((1.0)*sj5*x4813);
evalcond[0]=((((-1.0)*r01*sj5*x4815))+((r02*x4813))+((r00*x4816)));
evalcond[1]=((((-1.0)*r22*x4815))+((r20*x4817))+(((-1.0)*r21*x4818)));
evalcond[2]=((((-1.0)*r11*x4818))+((r10*x4817))+(((-1.0)*r12*x4815)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4818))+(((-1.0)*r02*x4815))+((r00*x4817)));
evalcond[4]=(((r10*x4816))+(((-1.0)*r11*sj5*x4815))+((r12*x4813))+(((-1.0)*sj1*x4814))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4815))+((r20*x4816))+(((-1.0)*cj1*x4814))+((r22*x4813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4819=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4819.valid){
continue;
}
CheckValue<IkReal> x4820 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4819.value)))+(x4820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4821=IKcos(j4);
IkReal x4822=IKsin(j4);
IkReal x4823=((1.0)*sj2);
IkReal x4824=((1.0)*x4821);
IkReal x4825=(cj5*x4821);
IkReal x4826=(cj5*x4822);
IkReal x4827=((1.0)*sj5*x4822);
evalcond[0]=((((-1.0)*r01*sj5*x4824))+((r02*x4822))+((r00*x4825)));
evalcond[1]=((((-1.0)*r22*x4824))+((r20*x4826))+(((-1.0)*r21*x4827)));
evalcond[2]=(((r10*x4826))+(((-1.0)*r11*x4827))+(((-1.0)*r12*x4824)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4827))+(((-1.0)*r02*x4824))+((r00*x4826)));
evalcond[4]=(((r10*x4825))+((r12*x4822))+(((-1.0)*r11*sj5*x4824))+(((-1.0)*sj1*x4823))+((cj1*cj2)));
evalcond[5]=(((r22*x4822))+(((-1.0)*r21*sj5*x4824))+(((-1.0)*cj2*sj1))+((r20*x4825))+(((-1.0)*cj1*x4823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4828=((-1.0)*r10);
IkReal x4830 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4830)==0){
continue;
}
IkReal x4829=pow(x4830,-0.5);
CheckValue<IkReal> x4831 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4828),IKFAST_ATAN2_MAGTHRESH);
if(!x4831.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4831.value));
IkReal gconst109=(r11*x4829);
IkReal gconst110=(x4828*x4829);
CheckValue<IkReal> x4832 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4832.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4832.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4833=((-1.0)*r10);
IkReal x4834=x4829;
CheckValue<IkReal> x4836 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4833),IKFAST_ATAN2_MAGTHRESH);
if(!x4836.valid){
continue;
}
IkReal x4835=((-1.0)*(x4836.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4835;
IkReal gconst108=x4835;
IkReal gconst109=(r11*x4834);
IkReal gconst110=(x4833*x4834);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4837=((1.0)*gconst109);
CheckValue<IkReal> x4838=IKPowWithIntegerCheck(IKsign((((gconst109*r20))+((gconst110*r21)))),-1);
if(!x4838.valid){
continue;
}
CheckValue<IkReal> x4839 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4837))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*r11*sj0*x4837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4838.value)))+(x4839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4840=IKsin(j4);
IkReal x4841=IKcos(j4);
IkReal x4842=((1.0)*cj2);
IkReal x4843=(sj1*sj2);
IkReal x4844=(gconst110*r20);
IkReal x4845=(gconst109*r01);
IkReal x4846=(gconst109*r11);
IkReal x4847=(gconst109*r21);
IkReal x4848=((1.0)*x4841);
IkReal x4849=((1.0)*x4840);
IkReal x4850=(gconst110*x4841);
IkReal x4851=(gconst110*x4840);
evalcond[0]=((((-1.0)*x4847*x4849))+((x4840*x4844))+(((-1.0)*r22*x4848)));
evalcond[1]=(((r00*x4851))+sj0+(((-1.0)*r02*x4848))+(((-1.0)*x4845*x4849)));
evalcond[2]=(((r10*x4851))+(((-1.0)*x4846*x4849))+(((-1.0)*r12*x4848))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4842))+((x4841*x4844))+(((-1.0)*x4847*x4848))+(((-1.0)*cj1*sj2))+((r22*x4840)));
evalcond[4]=(((r02*x4840))+((r00*x4850))+(((-1.0)*x4845*x4848))+((cj0*x4843))+(((-1.0)*cj0*cj1*x4842)));
evalcond[5]=(((sj0*x4843))+((r10*x4850))+(((-1.0)*x4846*x4848))+((r12*x4840))+(((-1.0)*cj1*sj0*x4842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4852=((1.0)*gconst109);
CheckValue<IkReal> x4853=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4852))+(((-1.0)*gconst110*r01)))),-1);
if(!x4853.valid){
continue;
}
CheckValue<IkReal> x4854 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4852))+((cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4853.value)))+(x4854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4855=IKsin(j4);
IkReal x4856=IKcos(j4);
IkReal x4857=((1.0)*cj2);
IkReal x4858=(sj1*sj2);
IkReal x4859=(gconst110*r20);
IkReal x4860=(gconst109*r01);
IkReal x4861=(gconst109*r11);
IkReal x4862=(gconst109*r21);
IkReal x4863=((1.0)*x4856);
IkReal x4864=((1.0)*x4855);
IkReal x4865=(gconst110*x4856);
IkReal x4866=(gconst110*x4855);
evalcond[0]=((((-1.0)*x4862*x4864))+(((-1.0)*r22*x4863))+((x4855*x4859)));
evalcond[1]=(sj0+((r00*x4866))+(((-1.0)*r02*x4863))+(((-1.0)*x4860*x4864)));
evalcond[2]=((((-1.0)*r12*x4863))+((r10*x4866))+(((-1.0)*x4861*x4864))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4862*x4863))+((r22*x4855))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4857))+((x4856*x4859)));
evalcond[4]=(((r00*x4865))+((cj0*x4858))+((r02*x4855))+(((-1.0)*x4860*x4863))+(((-1.0)*cj0*cj1*x4857)));
evalcond[5]=(((r12*x4855))+((r10*x4865))+(((-1.0)*cj1*sj0*x4857))+(((-1.0)*x4861*x4863))+((sj0*x4858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4867=((-1.0)*r11);
IkReal x4869 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4869)==0){
continue;
}
IkReal x4868=pow(x4869,-0.5);
CheckValue<IkReal> x4870 = IKatan2WithCheck(IkReal(x4867),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4870.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4870.value))));
IkReal gconst112=(x4867*x4868);
IkReal gconst113=((1.0)*r10*x4868);
CheckValue<IkReal> x4871 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4871.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4871.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4872=((-1.0)*r11);
CheckValue<IkReal> x4875 = IKatan2WithCheck(IkReal(x4872),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4875.valid){
continue;
}
IkReal x4873=((1.0)*(x4875.value));
IkReal x4874=x4868;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4873)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4873)));
IkReal gconst112=(x4872*x4874);
IkReal gconst113=((1.0)*r10*x4874);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4876=((-1.0)*r11);
CheckValue<IkReal> x4879 = IKatan2WithCheck(IkReal(x4876),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4879.valid){
continue;
}
IkReal x4877=((1.0)*(x4879.value));
IkReal x4878=x4868;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4877)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4877)));
IkReal gconst112=(x4876*x4878);
IkReal gconst113=((1.0)*r10*x4878);
IkReal x4880=r12*r12;
IkReal x4881=(cj0*r02);
IkReal x4882=x4868;
IkReal x4883=(sj0*x4882);
j4eval[0]=((IKabs(((((-1.0)*x4883))+((r12*x4881*x4882))+((x4880*x4883)))))+(IKabs((((r12*sj0))+x4881))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4884=((-1.0)*r11);
CheckValue<IkReal> x4887 = IKatan2WithCheck(IkReal(x4884),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4887.valid){
continue;
}
IkReal x4885=((1.0)*(x4887.value));
IkReal x4886=x4868;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4885)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4885)));
IkReal gconst112=(x4884*x4886);
IkReal gconst113=((1.0)*r10*x4886);
IkReal x4888=r12*r12;
IkReal x4889=((1.0)*r22);
IkReal x4890=(cj1*sj2);
IkReal x4891=(cj2*sj1);
IkReal x4892=((1.0)+(((-1.0)*x4888)));
CheckValue<IkReal> x4899=IKPowWithIntegerCheck(x4892,-1);
if(!x4899.valid){
continue;
}
IkReal x4893=x4899.value;
CheckValue<IkReal> x4900=IKPowWithIntegerCheck(((-1.0)+x4888),-1);
if(!x4900.valid){
continue;
}
IkReal x4894=x4900.value;
IkReal x4895=((1.0)*x4893);
if((x4892) < -0.00001)
continue;
IkReal x4896=IKsqrt(x4892);
IkReal x4897=(r12*x4894*x4896);
IkReal x4898=((((-1.0)*x4895*(r11*r11)*(r21*r21)))+(((-1.0)*x4895*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x4893))+(((-1.0)*r22*x4889)));
j4eval[0]=x4898;
j4eval[1]=((IKabs(((((-1.0)*x4889*x4891))+(((-1.0)*x4889*x4890)))))+(IKabs(((((-1.0)*x4889*x4891*x4897))+(((-1.0)*x4889*x4890*x4897))))));
j4eval[2]=IKsign(x4898);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4901=((1.0)*r22);
IkReal x4902=(cj1*sj2);
IkReal x4903=(cj2*sj1);
IkReal x4904=(gconst113*r20);
IkReal x4905=(gconst112*r21);
CheckValue<IkReal> x4906=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4904*x4904)))+(((-1.0)*r22*x4901))+(((2.0)*x4904*x4905))+(((-1.0)*(x4905*x4905))))),-1);
if(!x4906.valid){
continue;
}
CheckValue<IkReal> x4907 = IKatan2WithCheck(IkReal(((((-1.0)*x4901*x4903))+(((-1.0)*x4901*x4902)))),IkReal((((x4902*x4905))+((x4903*x4905))+(((-1.0)*x4902*x4904))+(((-1.0)*x4903*x4904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4906.value)))+(x4907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4908=IKsin(j4);
IkReal x4909=IKcos(j4);
IkReal x4910=(gconst113*r10);
IkReal x4911=((1.0)*cj2);
IkReal x4912=(gconst112*r01);
IkReal x4913=(sj1*sj2);
IkReal x4914=(gconst112*r11);
IkReal x4915=(gconst113*r20);
IkReal x4916=(gconst113*r00);
IkReal x4917=(gconst112*r21);
IkReal x4918=((1.0)*x4909);
IkReal x4919=((1.0)*x4908);
evalcond[0]=(((x4908*x4915))+(((-1.0)*r22*x4918))+(((-1.0)*x4917*x4919)));
evalcond[1]=((((-1.0)*x4912*x4919))+sj0+(((-1.0)*r02*x4918))+((x4908*x4916)));
evalcond[2]=((((-1.0)*r12*x4918))+((x4908*x4910))+(((-1.0)*x4914*x4919))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4911))+(((-1.0)*cj1*sj2))+((x4909*x4915))+((r22*x4908))+(((-1.0)*x4917*x4918)));
evalcond[4]=((((-1.0)*x4912*x4918))+((r02*x4908))+((x4909*x4916))+((cj0*x4913))+(((-1.0)*cj0*cj1*x4911)));
evalcond[5]=(((sj0*x4913))+((x4909*x4910))+(((-1.0)*cj1*sj0*x4911))+((r12*x4908))+(((-1.0)*x4914*x4918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4920=((1.0)*gconst112);
CheckValue<IkReal> x4921=IKPowWithIntegerCheck(IKsign((((gconst112*r20))+((gconst113*r21)))),-1);
if(!x4921.valid){
continue;
}
CheckValue<IkReal> x4922 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*r11*sj0*x4920))+(((-1.0)*cj0*r01*x4920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4921.value)))+(x4922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4923=IKsin(j4);
IkReal x4924=IKcos(j4);
IkReal x4925=(gconst113*r10);
IkReal x4926=((1.0)*cj2);
IkReal x4927=(gconst112*r01);
IkReal x4928=(sj1*sj2);
IkReal x4929=(gconst112*r11);
IkReal x4930=(gconst113*r20);
IkReal x4931=(gconst113*r00);
IkReal x4932=(gconst112*r21);
IkReal x4933=((1.0)*x4924);
IkReal x4934=((1.0)*x4923);
evalcond[0]=((((-1.0)*x4932*x4934))+((x4923*x4930))+(((-1.0)*r22*x4933)));
evalcond[1]=(sj0+(((-1.0)*r02*x4933))+((x4923*x4931))+(((-1.0)*x4927*x4934)));
evalcond[2]=(((x4923*x4925))+(((-1.0)*r12*x4933))+(((-1.0)*x4929*x4934))+(((-1.0)*cj0)));
evalcond[3]=(((x4924*x4930))+(((-1.0)*x4932*x4933))+(((-1.0)*cj1*sj2))+((r22*x4923))+(((-1.0)*sj1*x4926)));
evalcond[4]=(((x4924*x4931))+((cj0*x4928))+((r02*x4923))+(((-1.0)*x4927*x4933))+(((-1.0)*cj0*cj1*x4926)));
evalcond[5]=(((x4924*x4925))+(((-1.0)*cj1*sj0*x4926))+(((-1.0)*x4929*x4933))+((sj0*x4928))+((r12*x4923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4935=((1.0)*gconst112);
CheckValue<IkReal> x4936 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst113*r20))+(((-1.0)*cj0*r21*x4935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4936.valid){
continue;
}
CheckValue<IkReal> x4937=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4935))+(((-1.0)*gconst113*r01)))),-1);
if(!x4937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4936.value)+(((1.5707963267949)*(x4937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4938=IKsin(j4);
IkReal x4939=IKcos(j4);
IkReal x4940=(gconst113*r10);
IkReal x4941=((1.0)*cj2);
IkReal x4942=(gconst112*r01);
IkReal x4943=(sj1*sj2);
IkReal x4944=(gconst112*r11);
IkReal x4945=(gconst113*r20);
IkReal x4946=(gconst113*r00);
IkReal x4947=(gconst112*r21);
IkReal x4948=((1.0)*x4939);
IkReal x4949=((1.0)*x4938);
evalcond[0]=((((-1.0)*x4947*x4949))+(((-1.0)*r22*x4948))+((x4938*x4945)));
evalcond[1]=((((-1.0)*x4942*x4949))+sj0+((x4938*x4946))+(((-1.0)*r02*x4948)));
evalcond[2]=((((-1.0)*r12*x4948))+(((-1.0)*x4944*x4949))+((x4938*x4940))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4947*x4948))+(((-1.0)*sj1*x4941))+((x4939*x4945))+(((-1.0)*cj1*sj2))+((r22*x4938)));
evalcond[4]=((((-1.0)*x4942*x4948))+((cj0*x4943))+(((-1.0)*cj0*cj1*x4941))+((x4939*x4946))+((r02*x4938)));
evalcond[5]=(((r12*x4938))+(((-1.0)*cj1*sj0*x4941))+((x4939*x4940))+(((-1.0)*x4944*x4948))+((sj0*x4943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4950=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4950;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x4950);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4951=((1.0)*sj5);
IkReal x4952=((((-1.0)*r00*x4951))+(((-1.0)*cj5*r01)));
j4eval[0]=x4952;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x4951))+((cj5*r20))))));
j4eval[2]=IKsign(x4952);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4953=cj5*cj5;
IkReal x4954=r11*r11;
IkReal x4955=(r11*sj5);
IkReal x4956=(cj5*r10);
IkReal x4957=(x4954+(r12*r12)+(((-1.0)*x4953*x4954))+((x4953*(r10*r10)))+(((-2.0)*x4955*x4956)));
j4eval[0]=x4957;
j4eval[1]=IKsign(x4957);
j4eval[2]=((IKabs((x4956+(((-1.0)*x4955)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4958=cj5*cj5;
IkReal x4959=r11*r11;
IkReal x4960=(cj5*r10);
IkReal x4961=(r11*sj5);
CheckValue<IkReal> x4962 = IKatan2WithCheck(IkReal((x4960+(((-1.0)*x4961)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4962.valid){
continue;
}
CheckValue<IkReal> x4963=IKPowWithIntegerCheck(IKsign((x4959+(r12*r12)+(((-2.0)*x4960*x4961))+(((-1.0)*x4958*x4959))+((x4958*(r10*r10))))),-1);
if(!x4963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4962.value)+(((1.5707963267949)*(x4963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4964=IKcos(j4);
IkReal x4965=IKsin(j4);
IkReal x4966=(cj5*r10);
IkReal x4967=((1.0)*cj1);
IkReal x4968=((1.0)*x4964);
IkReal x4969=(cj5*x4965);
IkReal x4970=(cj5*x4964);
IkReal x4971=((1.0)*sj5*x4965);
evalcond[0]=(((x4964*x4966))+((r12*x4965))+(((-1.0)*r11*sj5*x4968)));
evalcond[1]=((((-1.0)*r21*x4971))+(((-1.0)*r22*x4968))+((r20*x4969)));
evalcond[2]=((((-1.0)*r02*x4968))+(((-1.0)*r01*x4971))+((r00*x4969)));
evalcond[3]=((-1.0)+((x4965*x4966))+(((-1.0)*r12*x4968))+(((-1.0)*r11*x4971)));
evalcond[4]=((((-1.0)*r01*sj5*x4968))+((sj1*sj2))+((r02*x4965))+((r00*x4970))+(((-1.0)*cj2*x4967)));
evalcond[5]=(((r22*x4965))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4967))+((r20*x4970))+(((-1.0)*r21*sj5*x4968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4972=((1.0)*sj5);
CheckValue<IkReal> x4973 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4973.valid){
continue;
}
CheckValue<IkReal> x4974=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4972))+(((-1.0)*cj5*r01)))),-1);
if(!x4974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4973.value)+(((1.5707963267949)*(x4974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4975=IKcos(j4);
IkReal x4976=IKsin(j4);
IkReal x4977=(cj5*r10);
IkReal x4978=((1.0)*cj1);
IkReal x4979=((1.0)*x4975);
IkReal x4980=(cj5*x4976);
IkReal x4981=(cj5*x4975);
IkReal x4982=((1.0)*sj5*x4976);
evalcond[0]=((((-1.0)*r11*sj5*x4979))+((r12*x4976))+((x4975*x4977)));
evalcond[1]=((((-1.0)*r21*x4982))+(((-1.0)*r22*x4979))+((r20*x4980)));
evalcond[2]=(((r00*x4980))+(((-1.0)*r02*x4979))+(((-1.0)*r01*x4982)));
evalcond[3]=((-1.0)+((x4976*x4977))+(((-1.0)*r12*x4979))+(((-1.0)*r11*x4982)));
evalcond[4]=((((-1.0)*cj2*x4978))+((r00*x4981))+(((-1.0)*r01*sj5*x4979))+((sj1*sj2))+((r02*x4976)));
evalcond[5]=(((r22*x4976))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4978))+((r20*x4981))+(((-1.0)*r21*sj5*x4979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4983=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4983.valid){
continue;
}
CheckValue<IkReal> x4984 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4983.value)))+(x4984.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4985=IKcos(j4);
IkReal x4986=IKsin(j4);
IkReal x4987=(cj5*r10);
IkReal x4988=((1.0)*cj1);
IkReal x4989=((1.0)*x4985);
IkReal x4990=(cj5*x4986);
IkReal x4991=(cj5*x4985);
IkReal x4992=((1.0)*sj5*x4986);
evalcond[0]=(((r12*x4986))+((x4985*x4987))+(((-1.0)*r11*sj5*x4989)));
evalcond[1]=((((-1.0)*r21*x4992))+(((-1.0)*r22*x4989))+((r20*x4990)));
evalcond[2]=((((-1.0)*r01*x4992))+(((-1.0)*r02*x4989))+((r00*x4990)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x4992))+(((-1.0)*r12*x4989))+((x4986*x4987)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x4988))+(((-1.0)*r01*sj5*x4989))+((r02*x4986))+((r00*x4991)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r20*x4991))+((r22*x4986))+(((-1.0)*sj2*x4988))+(((-1.0)*r21*sj5*x4989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4993=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4993;
j4eval[1]=IKsign(x4993);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4994=((1.0)*sj5);
IkReal x4995=((((-1.0)*r20*x4994))+(((-1.0)*cj5*r21)));
j4eval[0]=x4995;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x4994))+((cj5*r00))))));
j4eval[2]=IKsign(x4995);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4996=(sj1*sj2);
IkReal x4997=(cj5*r10);
IkReal x4998=(r11*sj5);
IkReal x4999=(cj1*cj2);
IkReal x5000=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5000;
j4eval[1]=IKsign(x5000);
j4eval[2]=((IKabs(((((-1.0)*r12*x4999))+((r12*x4996)))))+(IKabs(((((-1.0)*x4996*x4997))+((x4996*x4998))+((x4997*x4999))+(((-1.0)*x4998*x4999))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5001=(sj1*sj2);
IkReal x5002=(cj5*r10);
IkReal x5003=(r11*sj5);
IkReal x5004=(cj1*cj2);
CheckValue<IkReal> x5005 = IKatan2WithCheck(IkReal(((((-1.0)*x5001*x5002))+((x5001*x5003))+((x5002*x5004))+(((-1.0)*x5003*x5004)))),IkReal(((((-1.0)*r12*x5004))+((r12*x5001)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5005.valid){
continue;
}
CheckValue<IkReal> x5006=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x5006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5005.value)+(((1.5707963267949)*(x5006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5007=IKcos(j4);
IkReal x5008=IKsin(j4);
IkReal x5009=(cj5*r10);
IkReal x5010=((1.0)*sj2);
IkReal x5011=((1.0)*x5007);
IkReal x5012=(cj5*x5008);
IkReal x5013=(cj5*x5007);
IkReal x5014=((1.0)*sj5*x5008);
evalcond[0]=(((r12*x5008))+(((-1.0)*r11*sj5*x5011))+((x5007*x5009)));
evalcond[1]=(((r20*x5012))+(((-1.0)*r21*x5014))+(((-1.0)*r22*x5011)));
evalcond[2]=((((-1.0)*r02*x5011))+(((-1.0)*r01*x5014))+((r00*x5012)));
evalcond[3]=((1.0)+((x5008*x5009))+(((-1.0)*r11*x5014))+(((-1.0)*r12*x5011)));
evalcond[4]=((((-1.0)*r01*sj5*x5011))+((r02*x5008))+(((-1.0)*sj1*x5010))+((cj1*cj2))+((r00*x5013)));
evalcond[5]=((((-1.0)*r21*sj5*x5011))+((r20*x5013))+(((-1.0)*cj2*sj1))+((r22*x5008))+(((-1.0)*cj1*x5010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5015=((1.0)*sj5);
CheckValue<IkReal> x5016=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5015))+(((-1.0)*cj5*r21)))),-1);
if(!x5016.valid){
continue;
}
CheckValue<IkReal> x5017 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x5015))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5016.value)))+(x5017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5018=IKcos(j4);
IkReal x5019=IKsin(j4);
IkReal x5020=(cj5*r10);
IkReal x5021=((1.0)*sj2);
IkReal x5022=((1.0)*x5018);
IkReal x5023=(cj5*x5019);
IkReal x5024=(cj5*x5018);
IkReal x5025=((1.0)*sj5*x5019);
evalcond[0]=((((-1.0)*r11*sj5*x5022))+((x5018*x5020))+((r12*x5019)));
evalcond[1]=(((r20*x5023))+(((-1.0)*r21*x5025))+(((-1.0)*r22*x5022)));
evalcond[2]=((((-1.0)*r02*x5022))+(((-1.0)*r01*x5025))+((r00*x5023)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5022))+(((-1.0)*r11*x5025))+((x5019*x5020)));
evalcond[4]=((((-1.0)*r01*sj5*x5022))+((r02*x5019))+(((-1.0)*sj1*x5021))+((r00*x5024))+((cj1*cj2)));
evalcond[5]=(((r20*x5024))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x5021))+(((-1.0)*r21*sj5*x5022))+((r22*x5019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5026=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5026.valid){
continue;
}
CheckValue<IkReal> x5027 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5026.value)))+(x5027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5028=IKcos(j4);
IkReal x5029=IKsin(j4);
IkReal x5030=(cj5*r10);
IkReal x5031=((1.0)*sj2);
IkReal x5032=((1.0)*x5028);
IkReal x5033=(cj5*x5029);
IkReal x5034=(cj5*x5028);
IkReal x5035=((1.0)*sj5*x5029);
evalcond[0]=(((r12*x5029))+((x5028*x5030))+(((-1.0)*r11*sj5*x5032)));
evalcond[1]=(((r20*x5033))+(((-1.0)*r22*x5032))+(((-1.0)*r21*x5035)));
evalcond[2]=(((r00*x5033))+(((-1.0)*r02*x5032))+(((-1.0)*r01*x5035)));
evalcond[3]=((1.0)+(((-1.0)*r11*x5035))+(((-1.0)*r12*x5032))+((x5029*x5030)));
evalcond[4]=(((r02*x5029))+(((-1.0)*r01*sj5*x5032))+((r00*x5034))+(((-1.0)*sj1*x5031))+((cj1*cj2)));
evalcond[5]=(((r20*x5034))+(((-1.0)*cj2*sj1))+((r22*x5029))+(((-1.0)*cj1*x5031))+(((-1.0)*r21*sj5*x5032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5036=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5036);
rxp0_2=(py*r00);
rxp1_0=(r21*x5036);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5037=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5037);
rxp0_2=(py*r00);
rxp1_0=(r21*x5037);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5038=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5038);
rxp0_2=(py*r00);
rxp1_0=(r21*x5038);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5041=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x5041.valid){
continue;
}
IkReal x5039=x5041.value;
IkReal x5040=(cj0*x5039);
cj4array[0]=(((cj1*cj2*x5040))+(((-1.0)*sj1*sj2*x5040)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5042=IKsin(j4);
IkReal x5043=IKcos(j4);
IkReal x5044=(cj5*r20);
IkReal x5045=((1.0)*sj5);
evalcond[0]=(r12*x5042);
evalcond[1]=((((-1.0)*r12*x5043))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x5042*x5045))+((x5042*x5044)));
evalcond[3]=((((-1.0)*r01*x5042*x5045))+((cj5*r00*x5042)));
evalcond[4]=((((-1.0)*r21*x5043*x5045))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x5043*x5044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5047=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x5047.valid){
continue;
}
IkReal x5046=x5047.value;
cj4array[0]=(((cj2*sj1*x5046))+((cj1*sj2*x5046)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5048=IKsin(j4);
IkReal x5049=IKcos(j4);
IkReal x5050=(cj5*r00);
IkReal x5051=((1.0)*cj0);
IkReal x5052=((1.0)*r01*sj5);
evalcond[0]=(r12*x5048);
evalcond[1]=((((-1.0)*r12*x5049))+(((-1.0)*x5051)));
evalcond[2]=(((cj5*r20*x5048))+(((-1.0)*r21*sj5*x5048)));
evalcond[3]=(((x5048*x5050))+(((-1.0)*x5048*x5052)));
evalcond[4]=(((x5049*x5050))+(((-1.0)*x5049*x5052))+((cj0*sj1*sj2))+(((-1.0)*cj1*cj2*x5051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5053=IKPowWithIntegerCheck(r12,-1);
if(!x5053.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x5053.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5054=IKsin(j4);
IkReal x5055=IKcos(j4);
IkReal x5056=((1.0)*cj1);
IkReal x5057=((1.0)*sj5);
IkReal x5058=(cj5*x5055);
IkReal x5059=(cj5*x5054);
evalcond[0]=(r12*x5054);
evalcond[1]=(((r20*x5059))+(((-1.0)*r21*x5054*x5057)));
evalcond[2]=((((-1.0)*r01*x5054*x5057))+((r00*x5059)));
evalcond[3]=(((r20*x5058))+(((-1.0)*sj2*x5056))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x5055*x5057)));
evalcond[4]=((((-1.0)*cj0*cj2*x5056))+(((-1.0)*r01*x5055*x5057))+((r00*x5058))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5060=((1.0)*sj5);
CheckValue<IkReal> x5061 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x5060))+(((-1.0)*cj0*r01*x5060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5061.valid){
continue;
}
CheckValue<IkReal> x5062=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5061.value)+(((1.5707963267949)*(x5062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5063=IKsin(j4);
IkReal x5064=IKcos(j4);
IkReal x5065=((1.0)*cj1);
IkReal x5066=(sj1*sj2);
IkReal x5067=(cj5*r10);
IkReal x5068=((1.0)*x5064);
IkReal x5069=(cj5*x5063);
IkReal x5070=(cj5*x5064);
IkReal x5071=((1.0)*sj5*x5063);
evalcond[0]=((((-1.0)*r21*x5071))+((r20*x5069))+(((-1.0)*r22*x5068)));
evalcond[1]=(sj0+(((-1.0)*r02*x5068))+(((-1.0)*r01*x5071))+((r00*x5069)));
evalcond[2]=(((x5063*x5067))+(((-1.0)*r12*x5068))+(((-1.0)*r11*x5071))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x5068))+((r20*x5070))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x5065))+((r22*x5063)));
evalcond[4]=(((cj0*x5066))+(((-1.0)*r01*sj5*x5068))+(((-1.0)*cj0*cj2*x5065))+((r02*x5063))+((r00*x5070)));
evalcond[5]=((((-1.0)*r11*sj5*x5068))+(((-1.0)*cj2*sj0*x5065))+((x5064*x5067))+((sj0*x5066))+((r12*x5063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5072=((1.0)*sj5);
CheckValue<IkReal> x5073=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5072))+(((-1.0)*cj5*r01)))),-1);
if(!x5073.valid){
continue;
}
CheckValue<IkReal> x5074 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5072)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5073.value)))+(x5074.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5075=IKsin(j4);
IkReal x5076=IKcos(j4);
IkReal x5077=((1.0)*cj1);
IkReal x5078=(sj1*sj2);
IkReal x5079=(cj5*r10);
IkReal x5080=((1.0)*x5076);
IkReal x5081=(cj5*x5075);
IkReal x5082=(cj5*x5076);
IkReal x5083=((1.0)*sj5*x5075);
evalcond[0]=(((r20*x5081))+(((-1.0)*r21*x5083))+(((-1.0)*r22*x5080)));
evalcond[1]=(sj0+(((-1.0)*r01*x5083))+((r00*x5081))+(((-1.0)*r02*x5080)));
evalcond[2]=((((-1.0)*r11*x5083))+(((-1.0)*r12*x5080))+((x5075*x5079))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x5080))+((r20*x5082))+(((-1.0)*sj2*x5077))+((r22*x5075)));
evalcond[4]=(((cj0*x5078))+(((-1.0)*cj0*cj2*x5077))+((r00*x5082))+((r02*x5075))+(((-1.0)*r01*sj5*x5080)));
evalcond[5]=((((-1.0)*cj2*sj0*x5077))+((sj0*x5078))+((x5076*x5079))+((r12*x5075))+(((-1.0)*r11*sj5*x5080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5084=((1.0)*sj5);
CheckValue<IkReal> x5085 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5085.valid){
continue;
}
CheckValue<IkReal> x5086=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5084)))),-1);
if(!x5086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5085.value)+(((1.5707963267949)*(x5086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5087=IKsin(j4);
IkReal x5088=IKcos(j4);
IkReal x5089=((1.0)*cj1);
IkReal x5090=(sj1*sj2);
IkReal x5091=(cj5*r10);
IkReal x5092=((1.0)*x5088);
IkReal x5093=(cj5*x5087);
IkReal x5094=(cj5*x5088);
IkReal x5095=((1.0)*sj5*x5087);
evalcond[0]=((((-1.0)*r22*x5092))+((r20*x5093))+(((-1.0)*r21*x5095)));
evalcond[1]=(sj0+((r00*x5093))+(((-1.0)*r01*x5095))+(((-1.0)*r02*x5092)));
evalcond[2]=((((-1.0)*r11*x5095))+((x5087*x5091))+(((-1.0)*cj0))+(((-1.0)*r12*x5092)));
evalcond[3]=((((-1.0)*sj2*x5089))+(((-1.0)*cj2*sj1))+((r22*x5087))+(((-1.0)*r21*sj5*x5092))+((r20*x5094)));
evalcond[4]=(((r00*x5094))+(((-1.0)*r01*sj5*x5092))+((cj0*x5090))+((r02*x5087))+(((-1.0)*cj0*cj2*x5089)));
evalcond[5]=(((r12*x5087))+(((-1.0)*cj2*sj0*x5089))+((x5088*x5091))+(((-1.0)*r11*sj5*x5092))+((sj0*x5090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5096=((1.0)*cj5);
IkReal x5097=((1.0)*sj5);
IkReal x5098=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x5098;
j0eval[1]=((IKabs(((((-1.0)*r11*x5096))+(((-1.0)*r10*x5097)))))+(IKabs(((((-1.0)*r00*x5097))+(((-1.0)*r01*x5096))))));
j0eval[2]=IKsign(x5098);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5099=cj5*cj5;
IkReal x5100=r21*r21;
IkReal x5101=(sj1*sj2);
IkReal x5102=(r21*sj5);
IkReal x5103=(cj1*cj2);
IkReal x5104=(cj5*r20);
IkReal x5105=((r22*r22)+((x5099*(r20*r20)))+x5100+(((-2.0)*x5102*x5104))+(((-1.0)*x5099*x5100)));
j4eval[0]=x5105;
j4eval[1]=IKsign(x5105);
j4eval[2]=((IKabs((((x5102*x5103))+((x5101*x5104))+(((-1.0)*x5103*x5104))+(((-1.0)*x5101*x5102)))))+(IKabs(((((-1.0)*r22*x5103))+((r22*x5101))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.680635194225863)*px))+(((-2.10556211163397)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.680635194225863)*py))+(((-2.10556211163397)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.680635194225863)*px))+(((-2.10556211163397)*py))))+IKsqr(((((-0.680635194225863)*py))+(((-2.10556211163397)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.680635194225863)*px))+(((-2.10556211163397)*py))), ((((-0.680635194225863)*py))+(((-2.10556211163397)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5106=IKcos(j0);
IkReal x5107=IKsin(j0);
evalcond[0]=((((0.139)*x5107))+(((-1.0)*px))+(((-0.43)*x5106)));
evalcond[1]=((((-0.139)*x5106))+(((-1.0)*py))+(((-0.43)*x5107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5108=((1.0)*sj5);
IkReal x5109=((((-1.0)*r10*x5108))+(((-1.0)*cj5*r11)));
j4eval[0]=x5109;
j4eval[1]=IKsign(x5109);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5108))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5110=cj5*cj5;
IkReal x5111=((1.0)*r21);
IkReal x5112=(cj5*sj5);
IkReal x5113=((((-1.0)*r01*r20*x5112))+(((-1.0)*r01*x5110*x5111))+((r00*r20*x5110))+((r01*r21))+((r02*r22))+(((-1.0)*r00*x5111*x5112)));
j4eval[0]=x5113;
j4eval[1]=IKsign(x5113);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x5111)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5114=cj5*cj5;
IkReal x5115=(cj5*r20);
IkReal x5116=((1.0)*sj5);
IkReal x5117=(r11*r21);
IkReal x5118=((((-1.0)*x5114*x5117))+(((-1.0)*cj5*r10*r21*x5116))+((r12*r22))+x5117+(((-1.0)*r11*x5115*x5116))+((r10*r20*x5114)));
j4eval[0]=x5118;
j4eval[1]=IKsign(x5118);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x5115))+(((-1.0)*r21*sj0*x5116))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5119=cj5*cj5;
IkReal x5120=(cj5*r20);
IkReal x5121=((1.0)*sj5);
IkReal x5122=(r11*r21);
CheckValue<IkReal> x5123=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5119*x5122))+((r12*r22))+x5122+(((-1.0)*cj5*r10*r21*x5121))+(((-1.0)*r11*x5120*x5121))+((r10*r20*x5119)))),-1);
if(!x5123.valid){
continue;
}
CheckValue<IkReal> x5124 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5121))+((sj0*x5120)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5123.value)))+(x5124.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5125=IKsin(j4);
IkReal x5126=IKcos(j4);
IkReal x5127=(cj5*r00);
IkReal x5128=(r11*sj5);
IkReal x5129=(r01*sj5);
IkReal x5130=(cj5*r20);
IkReal x5131=(r21*sj5);
IkReal x5132=(cj5*r10);
IkReal x5133=((1.0)*x5126);
IkReal x5134=((1.0)*x5125);
evalcond[0]=((((-1.0)*x5131*x5134))+((x5125*x5130))+(((-1.0)*r22*x5133)));
evalcond[1]=(((x5126*x5131))+(((-1.0)*x5130*x5133))+(((-1.0)*r22*x5134)));
evalcond[2]=(sj0+((x5125*x5127))+(((-1.0)*x5129*x5134))+(((-1.0)*r02*x5133)));
evalcond[3]=(cj0+((x5126*x5129))+(((-1.0)*r02*x5134))+(((-1.0)*x5127*x5133)));
evalcond[4]=(sj0+(((-1.0)*x5132*x5133))+((x5126*x5128))+(((-1.0)*r12*x5134)));
evalcond[5]=(((x5125*x5132))+(((-1.0)*x5128*x5134))+(((-1.0)*r12*x5133))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5135=cj5*cj5;
IkReal x5136=((1.0)*r21);
IkReal x5137=(cj5*sj5);
CheckValue<IkReal> x5138=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5136*x5137))+((r01*r21))+(((-1.0)*r01*r20*x5137))+((r00*r20*x5135))+((r02*r22))+(((-1.0)*r01*x5135*x5136)))),-1);
if(!x5138.valid){
continue;
}
CheckValue<IkReal> x5139 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x5136)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5138.value)))+(x5139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5140=IKsin(j4);
IkReal x5141=IKcos(j4);
IkReal x5142=(cj5*r00);
IkReal x5143=(r11*sj5);
IkReal x5144=(r01*sj5);
IkReal x5145=(cj5*r20);
IkReal x5146=(r21*sj5);
IkReal x5147=(cj5*r10);
IkReal x5148=((1.0)*x5141);
IkReal x5149=((1.0)*x5140);
evalcond[0]=((((-1.0)*x5146*x5149))+((x5140*x5145))+(((-1.0)*r22*x5148)));
evalcond[1]=(((x5141*x5146))+(((-1.0)*r22*x5149))+(((-1.0)*x5145*x5148)));
evalcond[2]=(sj0+(((-1.0)*r02*x5148))+((x5140*x5142))+(((-1.0)*x5144*x5149)));
evalcond[3]=((((-1.0)*x5142*x5148))+cj0+(((-1.0)*r02*x5149))+((x5141*x5144)));
evalcond[4]=(sj0+(((-1.0)*r12*x5149))+((x5141*x5143))+(((-1.0)*x5147*x5148)));
evalcond[5]=((((-1.0)*x5143*x5149))+(((-1.0)*r12*x5148))+((x5140*x5147))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5150=((1.0)*sj5);
CheckValue<IkReal> x5151 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5151.valid){
continue;
}
CheckValue<IkReal> x5152=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5150)))),-1);
if(!x5152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5151.value)+(((1.5707963267949)*(x5152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5153=IKsin(j4);
IkReal x5154=IKcos(j4);
IkReal x5155=(cj5*r00);
IkReal x5156=(r11*sj5);
IkReal x5157=(r01*sj5);
IkReal x5158=(cj5*r20);
IkReal x5159=(r21*sj5);
IkReal x5160=(cj5*r10);
IkReal x5161=((1.0)*x5154);
IkReal x5162=((1.0)*x5153);
evalcond[0]=(((x5153*x5158))+(((-1.0)*r22*x5161))+(((-1.0)*x5159*x5162)));
evalcond[1]=((((-1.0)*r22*x5162))+((x5154*x5159))+(((-1.0)*x5158*x5161)));
evalcond[2]=(((x5153*x5155))+(((-1.0)*x5157*x5162))+sj0+(((-1.0)*r02*x5161)));
evalcond[3]=(cj0+((x5154*x5157))+(((-1.0)*r02*x5162))+(((-1.0)*x5155*x5161)));
evalcond[4]=(sj0+(((-1.0)*x5160*x5161))+((x5154*x5156))+(((-1.0)*r12*x5162)));
evalcond[5]=(((x5153*x5160))+(((-1.0)*r12*x5161))+(((-1.0)*x5156*x5162))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.680635194225863)*px))+(((-2.10556211163397)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.680635194225863)*py))+(((-2.10556211163397)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.680635194225863)*px))+(((-2.10556211163397)*py))))+IKsqr(((((-0.680635194225863)*py))+(((-2.10556211163397)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.680635194225863)*px))+(((-2.10556211163397)*py))), ((((-0.680635194225863)*py))+(((-2.10556211163397)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5163=IKcos(j0);
IkReal x5164=IKsin(j0);
evalcond[0]=((((-0.43)*x5163))+(((0.139)*x5164))+(((-1.0)*px)));
evalcond[1]=((((-0.43)*x5164))+(((-1.0)*py))+(((-0.139)*x5163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5165=((1.0)*sj5);
IkReal x5166=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5165)));
j4eval[0]=x5166;
j4eval[1]=IKsign(x5166);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5165))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5167=((1.0)*sj5);
IkReal x5168=((((-1.0)*r00*x5167))+(((-1.0)*cj5*r01)));
j4eval[0]=x5168;
j4eval[1]=IKsign(x5168);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x5167))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5169=cj5*cj5;
IkReal x5170=((1.0)*r21);
IkReal x5171=(cj5*sj5);
IkReal x5172=((1.0)*r20);
IkReal x5173=((((-1.0)*r00*x5170*x5171))+(((-1.0)*r01*x5171*x5172))+((r01*r21))+(((-1.0)*r01*x5169*x5170))+((r00*r20*x5169))+((r02*r22)));
j4eval[0]=x5173;
j4eval[1]=IKsign(x5173);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*sj0*x5172))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5174=cj5*cj5;
IkReal x5175=((1.0)*r21);
IkReal x5176=(cj5*sj5);
IkReal x5177=((1.0)*r20);
CheckValue<IkReal> x5178=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5176*x5177))+((r01*r21))+((r00*r20*x5174))+(((-1.0)*r01*x5174*x5175))+(((-1.0)*r00*x5175*x5176))+((r02*r22)))),-1);
if(!x5178.valid){
continue;
}
CheckValue<IkReal> x5179 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x5177))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5178.value)))+(x5179.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5180=IKsin(j4);
IkReal x5181=IKcos(j4);
IkReal x5182=((1.0)*cj0);
IkReal x5183=(cj5*r00);
IkReal x5184=(r11*sj5);
IkReal x5185=(r01*sj5);
IkReal x5186=(cj5*r20);
IkReal x5187=(r21*sj5);
IkReal x5188=(cj5*r10);
IkReal x5189=((1.0)*x5181);
IkReal x5190=((1.0)*x5180);
evalcond[0]=((((-1.0)*r22*x5189))+(((-1.0)*x5187*x5190))+((x5180*x5186)));
evalcond[1]=(((x5181*x5187))+(((-1.0)*r22*x5190))+(((-1.0)*x5186*x5189)));
evalcond[2]=((((-1.0)*x5185*x5190))+sj0+(((-1.0)*r02*x5189))+((x5180*x5183)));
evalcond[3]=((((-1.0)*x5184*x5190))+(((-1.0)*r12*x5189))+((x5180*x5188))+(((-1.0)*x5182)));
evalcond[4]=((((-1.0)*x5183*x5189))+((x5181*x5185))+(((-1.0)*r02*x5190))+(((-1.0)*x5182)));
evalcond[5]=((((-1.0)*r12*x5190))+(((-1.0)*sj0))+((x5181*x5184))+(((-1.0)*x5188*x5189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5191=((1.0)*sj5);
CheckValue<IkReal> x5192 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5192.valid){
continue;
}
CheckValue<IkReal> x5193=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5191))+(((-1.0)*cj5*r01)))),-1);
if(!x5193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5192.value)+(((1.5707963267949)*(x5193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5194=IKsin(j4);
IkReal x5195=IKcos(j4);
IkReal x5196=((1.0)*cj0);
IkReal x5197=(cj5*r00);
IkReal x5198=(r11*sj5);
IkReal x5199=(r01*sj5);
IkReal x5200=(cj5*r20);
IkReal x5201=(r21*sj5);
IkReal x5202=(cj5*r10);
IkReal x5203=((1.0)*x5195);
IkReal x5204=((1.0)*x5194);
evalcond[0]=((((-1.0)*x5201*x5204))+(((-1.0)*r22*x5203))+((x5194*x5200)));
evalcond[1]=((((-1.0)*x5200*x5203))+(((-1.0)*r22*x5204))+((x5195*x5201)));
evalcond[2]=((((-1.0)*x5199*x5204))+(((-1.0)*r02*x5203))+sj0+((x5194*x5197)));
evalcond[3]=((((-1.0)*x5196))+(((-1.0)*x5198*x5204))+((x5194*x5202))+(((-1.0)*r12*x5203)));
evalcond[4]=((((-1.0)*r02*x5204))+((x5195*x5199))+(((-1.0)*x5196))+(((-1.0)*x5197*x5203)));
evalcond[5]=((((-1.0)*sj0))+((x5195*x5198))+(((-1.0)*x5202*x5203))+(((-1.0)*r12*x5204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5205=((1.0)*sj5);
CheckValue<IkReal> x5206 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5205)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5206.valid){
continue;
}
CheckValue<IkReal> x5207=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5205)))),-1);
if(!x5207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5206.value)+(((1.5707963267949)*(x5207.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5208=IKsin(j4);
IkReal x5209=IKcos(j4);
IkReal x5210=((1.0)*cj0);
IkReal x5211=(cj5*r00);
IkReal x5212=(r11*sj5);
IkReal x5213=(r01*sj5);
IkReal x5214=(cj5*r20);
IkReal x5215=(r21*sj5);
IkReal x5216=(cj5*r10);
IkReal x5217=((1.0)*x5209);
IkReal x5218=((1.0)*x5208);
evalcond[0]=(((x5208*x5214))+(((-1.0)*x5215*x5218))+(((-1.0)*r22*x5217)));
evalcond[1]=(((x5209*x5215))+(((-1.0)*x5214*x5217))+(((-1.0)*r22*x5218)));
evalcond[2]=(sj0+((x5208*x5211))+(((-1.0)*x5213*x5218))+(((-1.0)*r02*x5217)));
evalcond[3]=((((-1.0)*x5212*x5218))+(((-1.0)*x5210))+((x5208*x5216))+(((-1.0)*r12*x5217)));
evalcond[4]=(((x5209*x5213))+(((-1.0)*x5210))+(((-1.0)*x5211*x5217))+(((-1.0)*r02*x5218)));
evalcond[5]=((((-1.0)*sj0))+((x5209*x5212))+(((-1.0)*x5216*x5217))+(((-1.0)*r12*x5218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.19424460431655)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.19424460431655)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.19424460431655)*px))+IKsqr(((-7.19424460431655)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.19424460431655)*px), ((-7.19424460431655)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.139)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.139)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5219=((1.0)*sj5);
IkReal x5220=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5219)));
j4eval[0]=x5220;
j4eval[1]=IKsign(x5220);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5219))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5221=cj5*cj5;
IkReal x5222=((1.0)*r21);
IkReal x5223=(cj5*sj5);
IkReal x5224=(((r00*r20*x5221))+((r01*r21))+(((-1.0)*r00*x5222*x5223))+(((-1.0)*r01*x5221*x5222))+((r02*r22))+(((-1.0)*r01*r20*x5223)));
j4eval[0]=x5224;
j4eval[1]=IKsign(x5224);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x5222))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5225=cj5*cj5;
IkReal x5226=(cj5*r20);
IkReal x5227=((1.0)*sj5);
IkReal x5228=(r11*r21);
IkReal x5229=(x5228+((r12*r22))+((r10*r20*x5225))+(((-1.0)*r11*x5226*x5227))+(((-1.0)*cj5*r10*r21*x5227))+(((-1.0)*x5225*x5228)));
j4eval[0]=x5229;
j4eval[1]=IKsign(x5229);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x5227))+((sj0*x5226))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5230=cj5*cj5;
IkReal x5231=(cj5*r20);
IkReal x5232=((1.0)*sj5);
IkReal x5233=(r11*r21);
CheckValue<IkReal> x5234 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x5231))+(((-1.0)*r21*sj0*x5232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5234.valid){
continue;
}
CheckValue<IkReal> x5235=IKPowWithIntegerCheck(IKsign((x5233+((r12*r22))+(((-1.0)*cj5*r10*r21*x5232))+(((-1.0)*x5230*x5233))+(((-1.0)*r11*x5231*x5232))+((r10*r20*x5230)))),-1);
if(!x5235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5234.value)+(((1.5707963267949)*(x5235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5236=IKsin(j4);
IkReal x5237=IKcos(j4);
IkReal x5238=(cj5*r00);
IkReal x5239=(r11*sj5);
IkReal x5240=(r01*sj5);
IkReal x5241=(cj5*r20);
IkReal x5242=(r21*sj5);
IkReal x5243=(cj5*r10);
IkReal x5244=((1.0)*x5237);
IkReal x5245=((1.0)*x5236);
evalcond[0]=((((-1.0)*x5242*x5245))+((x5236*x5241))+(((-1.0)*r22*x5244)));
evalcond[1]=(((x5237*x5242))+(((-1.0)*r22*x5245))+(((-1.0)*x5241*x5244)));
evalcond[2]=(sj0+((x5236*x5238))+(((-1.0)*r02*x5244))+(((-1.0)*x5240*x5245)));
evalcond[3]=(((x5237*x5240))+cj0+(((-1.0)*r02*x5245))+(((-1.0)*x5238*x5244)));
evalcond[4]=(sj0+(((-1.0)*r12*x5245))+((x5237*x5239))+(((-1.0)*x5243*x5244)));
evalcond[5]=((((-1.0)*r12*x5244))+((x5236*x5243))+(((-1.0)*x5239*x5245))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5246=cj5*cj5;
IkReal x5247=((1.0)*r21);
IkReal x5248=(cj5*sj5);
CheckValue<IkReal> x5249=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x5248))+((r01*r21))+((r00*r20*x5246))+(((-1.0)*r01*x5246*x5247))+((r02*r22))+(((-1.0)*r00*x5247*x5248)))),-1);
if(!x5249.valid){
continue;
}
CheckValue<IkReal> x5250 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x5247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5249.value)))+(x5250.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5251=IKsin(j4);
IkReal x5252=IKcos(j4);
IkReal x5253=(cj5*r00);
IkReal x5254=(r11*sj5);
IkReal x5255=(r01*sj5);
IkReal x5256=(cj5*r20);
IkReal x5257=(r21*sj5);
IkReal x5258=(cj5*r10);
IkReal x5259=((1.0)*x5252);
IkReal x5260=((1.0)*x5251);
evalcond[0]=((((-1.0)*r22*x5259))+((x5251*x5256))+(((-1.0)*x5257*x5260)));
evalcond[1]=((((-1.0)*r22*x5260))+(((-1.0)*x5256*x5259))+((x5252*x5257)));
evalcond[2]=(sj0+(((-1.0)*r02*x5259))+(((-1.0)*x5255*x5260))+((x5251*x5253)));
evalcond[3]=(cj0+(((-1.0)*r02*x5260))+((x5252*x5255))+(((-1.0)*x5253*x5259)));
evalcond[4]=(sj0+(((-1.0)*x5258*x5259))+(((-1.0)*r12*x5260))+((x5252*x5254)));
evalcond[5]=((((-1.0)*x5254*x5260))+(((-1.0)*r12*x5259))+((x5251*x5258))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5261=((1.0)*sj5);
CheckValue<IkReal> x5262 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5262.valid){
continue;
}
CheckValue<IkReal> x5263=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5261)))),-1);
if(!x5263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5262.value)+(((1.5707963267949)*(x5263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5264=IKsin(j4);
IkReal x5265=IKcos(j4);
IkReal x5266=(cj5*r00);
IkReal x5267=(r11*sj5);
IkReal x5268=(r01*sj5);
IkReal x5269=(cj5*r20);
IkReal x5270=(r21*sj5);
IkReal x5271=(cj5*r10);
IkReal x5272=((1.0)*x5265);
IkReal x5273=((1.0)*x5264);
evalcond[0]=((((-1.0)*x5270*x5273))+((x5264*x5269))+(((-1.0)*r22*x5272)));
evalcond[1]=(((x5265*x5270))+(((-1.0)*x5269*x5272))+(((-1.0)*r22*x5273)));
evalcond[2]=(sj0+((x5264*x5266))+(((-1.0)*r02*x5272))+(((-1.0)*x5268*x5273)));
evalcond[3]=(cj0+(((-1.0)*x5266*x5272))+((x5265*x5268))+(((-1.0)*r02*x5273)));
evalcond[4]=(sj0+(((-1.0)*x5271*x5272))+((x5265*x5267))+(((-1.0)*r12*x5273)));
evalcond[5]=((((-1.0)*r12*x5272))+((x5264*x5271))+(((-1.0)*x5267*x5273))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.19424460431655)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.19424460431655)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.19424460431655)*px))+IKsqr(((-7.19424460431655)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.19424460431655)*px), ((-7.19424460431655)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.139)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.139)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5274=((1.0)*sj5);
IkReal x5275=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5274)));
j4eval[0]=x5275;
j4eval[1]=IKsign(x5275);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x5274))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5276=((1.0)*sj5);
IkReal x5277=((((-1.0)*r00*x5276))+(((-1.0)*cj5*r01)));
j4eval[0]=x5277;
j4eval[1]=IKsign(x5277);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x5276))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5278=cj5*cj5;
IkReal x5279=((1.0)*r21);
IkReal x5280=(cj5*sj5);
IkReal x5281=((1.0)*r20);
IkReal x5282=((((-1.0)*r00*x5279*x5280))+(((-1.0)*r01*x5278*x5279))+((r01*r21))+((r02*r22))+((r00*r20*x5278))+(((-1.0)*r01*x5280*x5281)));
j4eval[0]=x5282;
j4eval[1]=IKsign(x5282);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5281)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5283=cj5*cj5;
IkReal x5284=((1.0)*r21);
IkReal x5285=(cj5*sj5);
IkReal x5286=((1.0)*r20);
CheckValue<IkReal> x5287=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x5285*x5286))+(((-1.0)*r00*x5284*x5285))+(((-1.0)*r01*x5283*x5284))+((r02*r22))+((r00*r20*x5283)))),-1);
if(!x5287.valid){
continue;
}
CheckValue<IkReal> x5288 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5286)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5287.value)))+(x5288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5289=IKsin(j4);
IkReal x5290=IKcos(j4);
IkReal x5291=((1.0)*cj0);
IkReal x5292=(cj5*r00);
IkReal x5293=(r11*sj5);
IkReal x5294=(r01*sj5);
IkReal x5295=(cj5*r20);
IkReal x5296=(r21*sj5);
IkReal x5297=(cj5*r10);
IkReal x5298=((1.0)*x5290);
IkReal x5299=((1.0)*x5289);
evalcond[0]=((((-1.0)*r22*x5298))+((x5289*x5295))+(((-1.0)*x5296*x5299)));
evalcond[1]=((((-1.0)*r22*x5299))+((x5290*x5296))+(((-1.0)*x5295*x5298)));
evalcond[2]=(sj0+((x5289*x5292))+(((-1.0)*x5294*x5299))+(((-1.0)*r02*x5298)));
evalcond[3]=(((x5289*x5297))+(((-1.0)*r12*x5298))+(((-1.0)*x5291))+(((-1.0)*x5293*x5299)));
evalcond[4]=(((x5290*x5294))+(((-1.0)*x5291))+(((-1.0)*x5292*x5298))+(((-1.0)*r02*x5299)));
evalcond[5]=((((-1.0)*sj0))+((x5290*x5293))+(((-1.0)*r12*x5299))+(((-1.0)*x5297*x5298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5300=((1.0)*sj5);
CheckValue<IkReal> x5301 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5300))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5301.valid){
continue;
}
CheckValue<IkReal> x5302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5300))+(((-1.0)*cj5*r01)))),-1);
if(!x5302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5301.value)+(((1.5707963267949)*(x5302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5303=IKsin(j4);
IkReal x5304=IKcos(j4);
IkReal x5305=((1.0)*cj0);
IkReal x5306=(cj5*r00);
IkReal x5307=(r11*sj5);
IkReal x5308=(r01*sj5);
IkReal x5309=(cj5*r20);
IkReal x5310=(r21*sj5);
IkReal x5311=(cj5*r10);
IkReal x5312=((1.0)*x5304);
IkReal x5313=((1.0)*x5303);
evalcond[0]=((((-1.0)*x5310*x5313))+((x5303*x5309))+(((-1.0)*r22*x5312)));
evalcond[1]=(((x5304*x5310))+(((-1.0)*x5309*x5312))+(((-1.0)*r22*x5313)));
evalcond[2]=(sj0+(((-1.0)*x5308*x5313))+((x5303*x5306))+(((-1.0)*r02*x5312)));
evalcond[3]=((((-1.0)*r12*x5312))+(((-1.0)*x5305))+((x5303*x5311))+(((-1.0)*x5307*x5313)));
evalcond[4]=((((-1.0)*x5306*x5312))+(((-1.0)*x5305))+((x5304*x5308))+(((-1.0)*r02*x5313)));
evalcond[5]=((((-1.0)*r12*x5313))+(((-1.0)*sj0))+((x5304*x5307))+(((-1.0)*x5311*x5312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5314=((1.0)*sj5);
CheckValue<IkReal> x5315=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5314)))),-1);
if(!x5315.valid){
continue;
}
CheckValue<IkReal> x5316 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5315.value)))+(x5316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5317=IKsin(j4);
IkReal x5318=IKcos(j4);
IkReal x5319=((1.0)*cj0);
IkReal x5320=(cj5*r00);
IkReal x5321=(r11*sj5);
IkReal x5322=(r01*sj5);
IkReal x5323=(cj5*r20);
IkReal x5324=(r21*sj5);
IkReal x5325=(cj5*r10);
IkReal x5326=((1.0)*x5318);
IkReal x5327=((1.0)*x5317);
evalcond[0]=((((-1.0)*r22*x5326))+(((-1.0)*x5324*x5327))+((x5317*x5323)));
evalcond[1]=(((x5318*x5324))+(((-1.0)*x5323*x5326))+(((-1.0)*r22*x5327)));
evalcond[2]=(sj0+(((-1.0)*r02*x5326))+(((-1.0)*x5322*x5327))+((x5317*x5320)));
evalcond[3]=((((-1.0)*x5321*x5327))+(((-1.0)*x5319))+(((-1.0)*r12*x5326))+((x5317*x5325)));
evalcond[4]=(((x5318*x5322))+(((-1.0)*x5319))+(((-1.0)*r02*x5327))+(((-1.0)*x5320*x5326)));
evalcond[5]=(((x5318*x5321))+(((-1.0)*x5325*x5326))+(((-1.0)*sj0))+(((-1.0)*r12*x5327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.680635194225863)*px))+(((2.10556211163397)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.680635194225863)*py))+(((2.10556211163397)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.680635194225863)*px))+(((2.10556211163397)*py))))+IKsqr(((((-0.680635194225863)*py))+(((2.10556211163397)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.680635194225863)*px))+(((2.10556211163397)*py))), ((((-0.680635194225863)*py))+(((2.10556211163397)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5328=IKsin(j0);
IkReal x5329=IKcos(j0);
evalcond[0]=((((0.43)*x5329))+(((0.139)*x5328))+(((-1.0)*px)));
evalcond[1]=((((0.43)*x5328))+(((-0.139)*x5329))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5330=((1.0)*sj5);
IkReal x5331=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5330)));
j4eval[0]=x5331;
j4eval[1]=IKsign(x5331);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5330)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5332=((1.0)*sj5);
IkReal x5333=((((-1.0)*r00*x5332))+(((-1.0)*cj5*r01)));
j4eval[0]=x5333;
j4eval[1]=IKsign(x5333);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5332))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5334=cj5*cj5;
IkReal x5335=((1.0)*r21);
IkReal x5336=(cj5*sj5);
IkReal x5337=((1.0)*r20);
IkReal x5338=(((r00*r20*x5334))+(((-1.0)*r01*x5336*x5337))+(((-1.0)*r00*x5335*x5336))+((r01*r21))+(((-1.0)*r01*x5334*x5335))+((r02*r22)));
j4eval[0]=x5338;
j4eval[1]=IKsign(x5338);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5337)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5339=cj5*cj5;
IkReal x5340=((1.0)*r21);
IkReal x5341=(cj5*sj5);
IkReal x5342=((1.0)*r20);
CheckValue<IkReal> x5343=IKPowWithIntegerCheck(IKsign((((r00*r20*x5339))+((r01*r21))+(((-1.0)*r01*x5341*x5342))+(((-1.0)*r01*x5339*x5340))+(((-1.0)*r00*x5340*x5341))+((r02*r22)))),-1);
if(!x5343.valid){
continue;
}
CheckValue<IkReal> x5344 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5342)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5343.value)))+(x5344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5345=IKsin(j4);
IkReal x5346=IKcos(j4);
IkReal x5347=((1.0)*cj0);
IkReal x5348=(cj5*r00);
IkReal x5349=(r11*sj5);
IkReal x5350=(r01*sj5);
IkReal x5351=(cj5*r20);
IkReal x5352=(r21*sj5);
IkReal x5353=(cj5*r10);
IkReal x5354=((1.0)*x5346);
IkReal x5355=((1.0)*x5345);
evalcond[0]=((((-1.0)*x5352*x5355))+(((-1.0)*r22*x5354))+((x5345*x5351)));
evalcond[1]=((((-1.0)*x5351*x5354))+((x5346*x5352))+(((-1.0)*r22*x5355)));
evalcond[2]=(sj0+(((-1.0)*r02*x5354))+(((-1.0)*x5350*x5355))+((x5345*x5348)));
evalcond[3]=((((-1.0)*r12*x5354))+(((-1.0)*x5347))+(((-1.0)*x5349*x5355))+((x5345*x5353)));
evalcond[4]=((((-1.0)*r02*x5355))+((x5346*x5350))+(((-1.0)*x5347))+(((-1.0)*x5348*x5354)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5353*x5354))+(((-1.0)*r12*x5355))+((x5346*x5349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5356=((1.0)*sj5);
CheckValue<IkReal> x5357=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5356))+(((-1.0)*cj5*r01)))),-1);
if(!x5357.valid){
continue;
}
CheckValue<IkReal> x5358 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5357.value)))+(x5358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5359=IKsin(j4);
IkReal x5360=IKcos(j4);
IkReal x5361=((1.0)*cj0);
IkReal x5362=(cj5*r00);
IkReal x5363=(r11*sj5);
IkReal x5364=(r01*sj5);
IkReal x5365=(cj5*r20);
IkReal x5366=(r21*sj5);
IkReal x5367=(cj5*r10);
IkReal x5368=((1.0)*x5360);
IkReal x5369=((1.0)*x5359);
evalcond[0]=((((-1.0)*r22*x5368))+(((-1.0)*x5366*x5369))+((x5359*x5365)));
evalcond[1]=((((-1.0)*r22*x5369))+((x5360*x5366))+(((-1.0)*x5365*x5368)));
evalcond[2]=(sj0+(((-1.0)*x5364*x5369))+(((-1.0)*r02*x5368))+((x5359*x5362)));
evalcond[3]=((((-1.0)*x5363*x5369))+((x5359*x5367))+(((-1.0)*r12*x5368))+(((-1.0)*x5361)));
evalcond[4]=(((x5360*x5364))+(((-1.0)*r02*x5369))+(((-1.0)*x5362*x5368))+(((-1.0)*x5361)));
evalcond[5]=((((-1.0)*sj0))+((x5360*x5363))+(((-1.0)*x5367*x5368))+(((-1.0)*r12*x5369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5370=((1.0)*sj5);
CheckValue<IkReal> x5371 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5370)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5371.valid){
continue;
}
CheckValue<IkReal> x5372=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5370)))),-1);
if(!x5372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5371.value)+(((1.5707963267949)*(x5372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5373=IKsin(j4);
IkReal x5374=IKcos(j4);
IkReal x5375=((1.0)*cj0);
IkReal x5376=(cj5*r00);
IkReal x5377=(r11*sj5);
IkReal x5378=(r01*sj5);
IkReal x5379=(cj5*r20);
IkReal x5380=(r21*sj5);
IkReal x5381=(cj5*r10);
IkReal x5382=((1.0)*x5374);
IkReal x5383=((1.0)*x5373);
evalcond[0]=((((-1.0)*x5380*x5383))+((x5373*x5379))+(((-1.0)*r22*x5382)));
evalcond[1]=(((x5374*x5380))+(((-1.0)*x5379*x5382))+(((-1.0)*r22*x5383)));
evalcond[2]=(sj0+(((-1.0)*r02*x5382))+((x5373*x5376))+(((-1.0)*x5378*x5383)));
evalcond[3]=((((-1.0)*x5375))+(((-1.0)*r12*x5382))+(((-1.0)*x5377*x5383))+((x5373*x5381)));
evalcond[4]=((((-1.0)*x5375))+(((-1.0)*r02*x5383))+(((-1.0)*x5376*x5382))+((x5374*x5378)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5383))+((x5374*x5377))+(((-1.0)*x5381*x5382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.680635194225863)*px))+(((2.10556211163397)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.680635194225863)*py))+(((2.10556211163397)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.680635194225863)*px))+(((2.10556211163397)*py))))+IKsqr(((((-0.680635194225863)*py))+(((2.10556211163397)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.680635194225863)*px))+(((2.10556211163397)*py))), ((((-0.680635194225863)*py))+(((2.10556211163397)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5384=IKsin(j0);
IkReal x5385=IKcos(j0);
evalcond[0]=((((0.139)*x5384))+(((0.43)*x5385))+(((-1.0)*px)));
evalcond[1]=((((-0.139)*x5385))+(((0.43)*x5384))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5386=((1.0)*sj5);
IkReal x5387=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5386)));
j4eval[0]=x5387;
j4eval[1]=IKsign(x5387);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x5386))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5388=cj5*cj5;
IkReal x5389=((1.0)*r21);
IkReal x5390=(cj5*sj5);
IkReal x5391=((((-1.0)*r00*x5389*x5390))+(((-1.0)*r01*r20*x5390))+(((-1.0)*r01*x5388*x5389))+((r00*r20*x5388))+((r01*r21))+((r02*r22)));
j4eval[0]=x5391;
j4eval[1]=IKsign(x5391);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x5389))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5392=cj5*cj5;
IkReal x5393=(cj5*r20);
IkReal x5394=((1.0)*sj5);
IkReal x5395=(r11*r21);
IkReal x5396=(x5395+((r12*r22))+((r10*r20*x5392))+(((-1.0)*r11*x5393*x5394))+(((-1.0)*cj5*r10*r21*x5394))+(((-1.0)*x5392*x5395)));
j4eval[0]=x5396;
j4eval[1]=IKsign(x5396);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x5394))+((sj0*x5393))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5397=cj5*cj5;
IkReal x5398=(cj5*r20);
IkReal x5399=((1.0)*sj5);
IkReal x5400=(r11*r21);
CheckValue<IkReal> x5401 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5399))+((sj0*x5398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5401.valid){
continue;
}
CheckValue<IkReal> x5402=IKPowWithIntegerCheck(IKsign((x5400+((r12*r22))+((r10*r20*x5397))+(((-1.0)*r11*x5398*x5399))+(((-1.0)*cj5*r10*r21*x5399))+(((-1.0)*x5397*x5400)))),-1);
if(!x5402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5401.value)+(((1.5707963267949)*(x5402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5403=IKsin(j4);
IkReal x5404=IKcos(j4);
IkReal x5405=(cj5*r00);
IkReal x5406=(r11*sj5);
IkReal x5407=(r01*sj5);
IkReal x5408=(cj5*r20);
IkReal x5409=(r21*sj5);
IkReal x5410=(cj5*r10);
IkReal x5411=((1.0)*x5404);
IkReal x5412=((1.0)*x5403);
evalcond[0]=((((-1.0)*r22*x5411))+(((-1.0)*x5409*x5412))+((x5403*x5408)));
evalcond[1]=((((-1.0)*r22*x5412))+((x5404*x5409))+(((-1.0)*x5408*x5411)));
evalcond[2]=((((-1.0)*r02*x5411))+sj0+(((-1.0)*x5407*x5412))+((x5403*x5405)));
evalcond[3]=((((-1.0)*r02*x5412))+cj0+((x5404*x5407))+(((-1.0)*x5405*x5411)));
evalcond[4]=(sj0+(((-1.0)*x5410*x5411))+(((-1.0)*r12*x5412))+((x5404*x5406)));
evalcond[5]=((((-1.0)*x5406*x5412))+(((-1.0)*r12*x5411))+((x5403*x5410))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5413=cj5*cj5;
IkReal x5414=((1.0)*r21);
IkReal x5415=(cj5*sj5);
CheckValue<IkReal> x5416 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x5414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5416.valid){
continue;
}
CheckValue<IkReal> x5417=IKPowWithIntegerCheck(IKsign((((r00*r20*x5413))+(((-1.0)*r00*x5414*x5415))+(((-1.0)*r01*x5413*x5414))+((r01*r21))+(((-1.0)*r01*r20*x5415))+((r02*r22)))),-1);
if(!x5417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5416.value)+(((1.5707963267949)*(x5417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5418=IKsin(j4);
IkReal x5419=IKcos(j4);
IkReal x5420=(cj5*r00);
IkReal x5421=(r11*sj5);
IkReal x5422=(r01*sj5);
IkReal x5423=(cj5*r20);
IkReal x5424=(r21*sj5);
IkReal x5425=(cj5*r10);
IkReal x5426=((1.0)*x5419);
IkReal x5427=((1.0)*x5418);
evalcond[0]=(((x5418*x5423))+(((-1.0)*x5424*x5427))+(((-1.0)*r22*x5426)));
evalcond[1]=(((x5419*x5424))+(((-1.0)*r22*x5427))+(((-1.0)*x5423*x5426)));
evalcond[2]=((((-1.0)*x5422*x5427))+sj0+((x5418*x5420))+(((-1.0)*r02*x5426)));
evalcond[3]=(cj0+((x5419*x5422))+(((-1.0)*r02*x5427))+(((-1.0)*x5420*x5426)));
evalcond[4]=(sj0+((x5419*x5421))+(((-1.0)*x5425*x5426))+(((-1.0)*r12*x5427)));
evalcond[5]=((((-1.0)*x5421*x5427))+((x5418*x5425))+(((-1.0)*r12*x5426))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5428=((1.0)*sj5);
CheckValue<IkReal> x5429 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5429.valid){
continue;
}
CheckValue<IkReal> x5430=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5428)))),-1);
if(!x5430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5429.value)+(((1.5707963267949)*(x5430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5431=IKsin(j4);
IkReal x5432=IKcos(j4);
IkReal x5433=(cj5*r00);
IkReal x5434=(r11*sj5);
IkReal x5435=(r01*sj5);
IkReal x5436=(cj5*r20);
IkReal x5437=(r21*sj5);
IkReal x5438=(cj5*r10);
IkReal x5439=((1.0)*x5432);
IkReal x5440=((1.0)*x5431);
evalcond[0]=((((-1.0)*x5437*x5440))+((x5431*x5436))+(((-1.0)*r22*x5439)));
evalcond[1]=((((-1.0)*x5436*x5439))+(((-1.0)*r22*x5440))+((x5432*x5437)));
evalcond[2]=((((-1.0)*x5435*x5440))+sj0+(((-1.0)*r02*x5439))+((x5431*x5433)));
evalcond[3]=(cj0+(((-1.0)*x5433*x5439))+(((-1.0)*r02*x5440))+((x5432*x5435)));
evalcond[4]=(sj0+(((-1.0)*x5438*x5439))+(((-1.0)*r12*x5440))+((x5432*x5434)));
evalcond[5]=((((-1.0)*x5434*x5440))+(((-1.0)*r12*x5439))+((x5431*x5438))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.19424460431655)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.19424460431655)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.19424460431655)*px))+IKsqr(((-7.19424460431655)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.19424460431655)*px), ((-7.19424460431655)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.139)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.139)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5441=((1.0)*sj5);
IkReal x5442=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5441)));
j4eval[0]=x5442;
j4eval[1]=IKsign(x5442);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5441)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5443=((1.0)*sj5);
IkReal x5444=((((-1.0)*r00*x5443))+(((-1.0)*cj5*r01)));
j4eval[0]=x5444;
j4eval[1]=IKsign(x5444);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x5443))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5445=cj5*cj5;
IkReal x5446=((1.0)*r21);
IkReal x5447=(cj5*sj5);
IkReal x5448=((1.0)*r20);
IkReal x5449=((((-1.0)*r00*x5446*x5447))+((r01*r21))+(((-1.0)*r01*x5445*x5446))+((r00*r20*x5445))+(((-1.0)*r01*x5447*x5448))+((r02*r22)));
j4eval[0]=x5449;
j4eval[1]=IKsign(x5449);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5448))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5450=cj5*cj5;
IkReal x5451=((1.0)*r21);
IkReal x5452=(cj5*sj5);
IkReal x5453=((1.0)*r20);
CheckValue<IkReal> x5454 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x5453))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5454.valid){
continue;
}
CheckValue<IkReal> x5455=IKPowWithIntegerCheck(IKsign((((r00*r20*x5450))+(((-1.0)*r01*x5450*x5451))+((r01*r21))+(((-1.0)*r00*x5451*x5452))+(((-1.0)*r01*x5452*x5453))+((r02*r22)))),-1);
if(!x5455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5454.value)+(((1.5707963267949)*(x5455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5456=IKsin(j4);
IkReal x5457=IKcos(j4);
IkReal x5458=((1.0)*cj0);
IkReal x5459=(cj5*r00);
IkReal x5460=(r11*sj5);
IkReal x5461=(r01*sj5);
IkReal x5462=(cj5*r20);
IkReal x5463=(r21*sj5);
IkReal x5464=(cj5*r10);
IkReal x5465=((1.0)*x5457);
IkReal x5466=((1.0)*x5456);
evalcond[0]=((((-1.0)*x5463*x5466))+((x5456*x5462))+(((-1.0)*r22*x5465)));
evalcond[1]=(((x5457*x5463))+(((-1.0)*x5462*x5465))+(((-1.0)*r22*x5466)));
evalcond[2]=(((x5456*x5459))+sj0+(((-1.0)*r02*x5465))+(((-1.0)*x5461*x5466)));
evalcond[3]=(((x5456*x5464))+(((-1.0)*r12*x5465))+(((-1.0)*x5460*x5466))+(((-1.0)*x5458)));
evalcond[4]=((((-1.0)*x5459*x5465))+(((-1.0)*r02*x5466))+((x5457*x5461))+(((-1.0)*x5458)));
evalcond[5]=((((-1.0)*x5464*x5465))+(((-1.0)*sj0))+(((-1.0)*r12*x5466))+((x5457*x5460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5467=((1.0)*sj5);
CheckValue<IkReal> x5468 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5468.valid){
continue;
}
CheckValue<IkReal> x5469=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x5467)))),-1);
if(!x5469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5468.value)+(((1.5707963267949)*(x5469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5470=IKsin(j4);
IkReal x5471=IKcos(j4);
IkReal x5472=((1.0)*cj0);
IkReal x5473=(cj5*r00);
IkReal x5474=(r11*sj5);
IkReal x5475=(r01*sj5);
IkReal x5476=(cj5*r20);
IkReal x5477=(r21*sj5);
IkReal x5478=(cj5*r10);
IkReal x5479=((1.0)*x5471);
IkReal x5480=((1.0)*x5470);
evalcond[0]=(((x5470*x5476))+(((-1.0)*x5477*x5480))+(((-1.0)*r22*x5479)));
evalcond[1]=(((x5471*x5477))+(((-1.0)*x5476*x5479))+(((-1.0)*r22*x5480)));
evalcond[2]=(sj0+(((-1.0)*x5475*x5480))+((x5470*x5473))+(((-1.0)*r02*x5479)));
evalcond[3]=((((-1.0)*x5472))+(((-1.0)*x5474*x5480))+(((-1.0)*r12*x5479))+((x5470*x5478)));
evalcond[4]=(((x5471*x5475))+(((-1.0)*x5472))+(((-1.0)*x5473*x5479))+(((-1.0)*r02*x5480)));
evalcond[5]=((((-1.0)*x5478*x5479))+(((-1.0)*sj0))+(((-1.0)*r12*x5480))+((x5471*x5474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5481=((1.0)*sj5);
CheckValue<IkReal> x5482=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5481))+(((-1.0)*cj5*r11)))),-1);
if(!x5482.valid){
continue;
}
CheckValue<IkReal> x5483 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5482.value)))+(x5483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5484=IKsin(j4);
IkReal x5485=IKcos(j4);
IkReal x5486=((1.0)*cj0);
IkReal x5487=(cj5*r00);
IkReal x5488=(r11*sj5);
IkReal x5489=(r01*sj5);
IkReal x5490=(cj5*r20);
IkReal x5491=(r21*sj5);
IkReal x5492=(cj5*r10);
IkReal x5493=((1.0)*x5485);
IkReal x5494=((1.0)*x5484);
evalcond[0]=(((x5484*x5490))+(((-1.0)*x5491*x5494))+(((-1.0)*r22*x5493)));
evalcond[1]=((((-1.0)*r22*x5494))+(((-1.0)*x5490*x5493))+((x5485*x5491)));
evalcond[2]=(sj0+(((-1.0)*x5489*x5494))+((x5484*x5487))+(((-1.0)*r02*x5493)));
evalcond[3]=((((-1.0)*x5486))+((x5484*x5492))+(((-1.0)*x5488*x5494))+(((-1.0)*r12*x5493)));
evalcond[4]=(((x5485*x5489))+(((-1.0)*x5486))+(((-1.0)*x5487*x5493))+(((-1.0)*r02*x5494)));
evalcond[5]=(((x5485*x5488))+(((-1.0)*sj0))+(((-1.0)*r12*x5494))+(((-1.0)*x5492*x5493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.19424460431655)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.19424460431655)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.19424460431655)*px))+IKsqr(((-7.19424460431655)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.19424460431655)*px), ((-7.19424460431655)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.139)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.139)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5495=((1.0)*sj5);
IkReal x5496=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5495)));
j4eval[0]=x5496;
j4eval[1]=IKsign(x5496);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x5495))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5497=cj5*cj5;
IkReal x5498=((1.0)*r21);
IkReal x5499=(cj5*sj5);
IkReal x5500=((((-1.0)*r01*r20*x5499))+((r01*r21))+((r00*r20*x5497))+(((-1.0)*r00*x5498*x5499))+((r02*r22))+(((-1.0)*r01*x5497*x5498)));
j4eval[0]=x5500;
j4eval[1]=IKsign(x5500);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x5498))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5501=cj5*cj5;
IkReal x5502=(cj5*r20);
IkReal x5503=((1.0)*sj5);
IkReal x5504=(r11*r21);
IkReal x5505=(x5504+(((-1.0)*cj5*r10*r21*x5503))+((r12*r22))+((r10*r20*x5501))+(((-1.0)*r11*x5502*x5503))+(((-1.0)*x5501*x5504)));
j4eval[0]=x5505;
j4eval[1]=IKsign(x5505);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x5502))+(((-1.0)*r21*sj0*x5503))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5506=cj5*cj5;
IkReal x5507=(cj5*r20);
IkReal x5508=((1.0)*sj5);
IkReal x5509=(r11*r21);
CheckValue<IkReal> x5510=IKPowWithIntegerCheck(IKsign((x5509+(((-1.0)*r11*x5507*x5508))+(((-1.0)*cj5*r10*r21*x5508))+((r12*r22))+((r10*r20*x5506))+(((-1.0)*x5506*x5509)))),-1);
if(!x5510.valid){
continue;
}
CheckValue<IkReal> x5511 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x5507))+(((-1.0)*r21*sj0*x5508)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5510.value)))+(x5511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5512=IKsin(j4);
IkReal x5513=IKcos(j4);
IkReal x5514=(cj5*r00);
IkReal x5515=(r11*sj5);
IkReal x5516=(r01*sj5);
IkReal x5517=(cj5*r20);
IkReal x5518=(r21*sj5);
IkReal x5519=(cj5*r10);
IkReal x5520=((1.0)*x5513);
IkReal x5521=((1.0)*x5512);
evalcond[0]=(((x5512*x5517))+(((-1.0)*r22*x5520))+(((-1.0)*x5518*x5521)));
evalcond[1]=((((-1.0)*r22*x5521))+((x5513*x5518))+(((-1.0)*x5517*x5520)));
evalcond[2]=((((-1.0)*x5516*x5521))+((x5512*x5514))+sj0+(((-1.0)*r02*x5520)));
evalcond[3]=(((x5513*x5516))+cj0+(((-1.0)*r02*x5521))+(((-1.0)*x5514*x5520)));
evalcond[4]=(sj0+((x5513*x5515))+(((-1.0)*x5519*x5520))+(((-1.0)*r12*x5521)));
evalcond[5]=(((x5512*x5519))+(((-1.0)*x5515*x5521))+(((-1.0)*r12*x5520))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5522=cj5*cj5;
IkReal x5523=((1.0)*r21);
IkReal x5524=(cj5*sj5);
CheckValue<IkReal> x5525=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x5524))+((r01*r21))+(((-1.0)*r00*x5523*x5524))+(((-1.0)*r01*x5522*x5523))+((r02*r22))+((r00*r20*x5522)))),-1);
if(!x5525.valid){
continue;
}
CheckValue<IkReal> x5526 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x5523))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5525.value)))+(x5526.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5527=IKsin(j4);
IkReal x5528=IKcos(j4);
IkReal x5529=(cj5*r00);
IkReal x5530=(r11*sj5);
IkReal x5531=(r01*sj5);
IkReal x5532=(cj5*r20);
IkReal x5533=(r21*sj5);
IkReal x5534=(cj5*r10);
IkReal x5535=((1.0)*x5528);
IkReal x5536=((1.0)*x5527);
evalcond[0]=((((-1.0)*r22*x5535))+((x5527*x5532))+(((-1.0)*x5533*x5536)));
evalcond[1]=((((-1.0)*r22*x5536))+((x5528*x5533))+(((-1.0)*x5532*x5535)));
evalcond[2]=((((-1.0)*r02*x5535))+((x5527*x5529))+sj0+(((-1.0)*x5531*x5536)));
evalcond[3]=((((-1.0)*r02*x5536))+((x5528*x5531))+cj0+(((-1.0)*x5529*x5535)));
evalcond[4]=(sj0+((x5528*x5530))+(((-1.0)*x5534*x5535))+(((-1.0)*r12*x5536)));
evalcond[5]=(((x5527*x5534))+(((-1.0)*x5530*x5536))+(((-1.0)*r12*x5535))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5537=((1.0)*sj5);
CheckValue<IkReal> x5538 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5537)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5538.valid){
continue;
}
CheckValue<IkReal> x5539=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5537)))),-1);
if(!x5539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5538.value)+(((1.5707963267949)*(x5539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5540=IKsin(j4);
IkReal x5541=IKcos(j4);
IkReal x5542=(cj5*r00);
IkReal x5543=(r11*sj5);
IkReal x5544=(r01*sj5);
IkReal x5545=(cj5*r20);
IkReal x5546=(r21*sj5);
IkReal x5547=(cj5*r10);
IkReal x5548=((1.0)*x5541);
IkReal x5549=((1.0)*x5540);
evalcond[0]=(((x5540*x5545))+(((-1.0)*r22*x5548))+(((-1.0)*x5546*x5549)));
evalcond[1]=((((-1.0)*x5545*x5548))+((x5541*x5546))+(((-1.0)*r22*x5549)));
evalcond[2]=(sj0+(((-1.0)*x5544*x5549))+(((-1.0)*r02*x5548))+((x5540*x5542)));
evalcond[3]=((((-1.0)*x5542*x5548))+cj0+((x5541*x5544))+(((-1.0)*r02*x5549)));
evalcond[4]=(sj0+((x5541*x5543))+(((-1.0)*r12*x5549))+(((-1.0)*x5547*x5548)));
evalcond[5]=((((-1.0)*x5543*x5549))+(((-1.0)*r12*x5548))+((x5540*x5547))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5550=(sj1*sj2);
IkReal x5551=(cj1*cj2);
IkReal x5552=((1000.0)*px);
IkReal x5553=(cj5*r01);
IkReal x5554=(r00*sj5);
IkReal x5555=((236.0)*x5553);
IkReal x5556=(cj1*x5554);
CheckValue<IkReal> x5557=IKPowWithIntegerCheck(((((-139.0)*x5551))+(((139.0)*x5550))),-1);
if(!x5557.valid){
continue;
}
CheckValue<IkReal> x5558=IKPowWithIntegerCheck(((((-1.0)*x5551))+x5550),-1);
if(!x5558.valid){
continue;
}
if( IKabs(((x5557.value)*(((((-1.0)*x5551*x5552))+(((-1.0)*x5551*x5555))+(((-236.0)*x5551*x5554))+(((236.0)*x5550*x5554))+(((-430.0)*x5556))+((x5550*x5555))+((x5550*x5552))+(((-430.0)*cj1*x5553)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5558.value)*(((((-1.0)*x5554))+(((-1.0)*x5553)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5557.value)*(((((-1.0)*x5551*x5552))+(((-1.0)*x5551*x5555))+(((-236.0)*x5551*x5554))+(((236.0)*x5550*x5554))+(((-430.0)*x5556))+((x5550*x5555))+((x5550*x5552))+(((-430.0)*cj1*x5553))))))+IKsqr(((x5558.value)*(((((-1.0)*x5554))+(((-1.0)*x5553))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5557.value)*(((((-1.0)*x5551*x5552))+(((-1.0)*x5551*x5555))+(((-236.0)*x5551*x5554))+(((236.0)*x5550*x5554))+(((-430.0)*x5556))+((x5550*x5555))+((x5550*x5552))+(((-430.0)*cj1*x5553))))), ((x5558.value)*(((((-1.0)*x5554))+(((-1.0)*x5553))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5559=IKcos(j0);
IkReal x5560=IKsin(j0);
IkReal x5561=((0.353)*cj2);
IkReal x5562=(cj5*r01);
IkReal x5563=((0.117)*sj5);
IkReal x5564=(cj5*r11);
IkReal x5565=(sj1*sj2);
IkReal x5566=((1.0)*cj2);
IkReal x5567=(cj1*x5559);
IkReal x5568=(cj1*x5560);
evalcond[0]=(((r00*sj5))+x5562+((x5559*x5565))+(((-1.0)*x5566*x5567)));
evalcond[1]=(((x5560*x5565))+x5564+((r10*sj5))+(((-1.0)*x5566*x5568)));
evalcond[2]=((((0.353)*x5559*x5565))+(((0.139)*x5560))+(((-0.43)*x5567))+(((-1.0)*px))+(((0.117)*x5562))+(((-1.0)*x5561*x5567))+((r00*x5563)));
evalcond[3]=((((-0.139)*x5559))+((r10*x5563))+(((0.353)*x5560*x5565))+(((-0.43)*x5568))+(((-1.0)*py))+(((0.117)*x5564))+(((-1.0)*x5561*x5568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5569=((1.0)*sj5);
IkReal x5570=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5569)));
j4eval[0]=x5570;
j4eval[1]=IKsign(x5570);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5569))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5571=((1.0)*sj5);
IkReal x5572=((((-1.0)*r00*x5571))+(((-1.0)*cj5*r01)));
j4eval[0]=x5572;
j4eval[1]=IKsign(x5572);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x5571))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5573=((1.0)*sj5);
IkReal x5574=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5574;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x5573))+(((-1.0)*r11*sj0*x5573)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x5574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5576 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5576)==0){
continue;
}
IkReal x5575=pow(x5576,-0.5);
CheckValue<IkReal> x5577 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5577.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5577.value));
IkReal gconst115=((-1.0)*r21*x5575);
IkReal gconst116=(r20*x5575);
CheckValue<IkReal> x5578 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5578.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5578.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5581 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5581.valid){
continue;
}
IkReal x5579=((-1.0)*(x5581.value));
IkReal x5580=x5575;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5579;
IkReal gconst114=x5579;
IkReal gconst115=((-1.0)*r21*x5580);
IkReal gconst116=(r20*x5580);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5584 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5584.valid){
continue;
}
IkReal x5582=((-1.0)*(x5584.value));
IkReal x5583=x5575;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5582;
IkReal gconst114=x5582;
IkReal gconst115=((-1.0)*r21*x5583);
IkReal gconst116=(r20*x5583);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x5587 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5587.valid){
continue;
}
IkReal x5585=((-1.0)*(x5587.value));
IkReal x5586=x5575;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5585;
IkReal gconst114=x5585;
IkReal gconst115=((-1.0)*r21*x5586);
IkReal gconst116=(r20*x5586);
IkReal x5588=r22*r22;
CheckValue<IkReal> x5591=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5588))),-1);
if(!x5591.valid){
continue;
}
IkReal x5589=x5591.value;
IkReal x5590=(x5588+((x5589*(r21*r21*r21*r21)))+((x5589*(r20*r20*r20*r20)))+(((2.0)*x5589*(r20*r20)*(r21*r21))));
j4eval[0]=x5590;
j4eval[1]=IKsign(x5590);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5592=(sj1*sj2);
IkReal x5593=(gconst115*r21);
IkReal x5594=(cj1*cj2);
IkReal x5595=(gconst116*r20);
CheckValue<IkReal> x5596 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5594))+((r22*x5592)))),IkReal((((x5592*x5595))+(((-1.0)*x5592*x5593))+((x5593*x5594))+(((-1.0)*x5594*x5595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5596.valid){
continue;
}
CheckValue<IkReal> x5597=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5593*x5595))+(r22*r22)+(x5593*x5593)+(x5595*x5595))),-1);
if(!x5597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5596.value)+(((1.5707963267949)*(x5597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5598=IKsin(j4);
IkReal x5599=IKcos(j4);
IkReal x5600=(cj2*sj1);
IkReal x5601=(cj1*sj2);
IkReal x5602=((1.0)*x5599);
IkReal x5603=(gconst116*x5598);
IkReal x5604=(gconst115*x5599);
IkReal x5605=((1.0)*x5598);
evalcond[0]=((((-1.0)*r22*x5602))+(((-1.0)*gconst115*r21*x5605))+((r20*x5603)));
evalcond[1]=(sj0+(((-1.0)*gconst115*r01*x5605))+((r00*x5603))+(((-1.0)*r02*x5602)));
evalcond[2]=((((-1.0)*gconst115*r11*x5605))+(((-1.0)*r12*x5602))+(((-1.0)*cj0))+((r10*x5603)));
evalcond[3]=((((-1.0)*r22*x5605))+(((-1.0)*gconst116*r20*x5602))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5604)));
evalcond[4]=(((r01*x5604))+(((-1.0)*gconst116*r00*x5602))+(((-1.0)*r02*x5605))+((cj0*x5600))+((cj0*x5601)));
evalcond[5]=(((sj0*x5600))+((sj0*x5601))+(((-1.0)*r12*x5605))+(((-1.0)*gconst116*r10*x5602))+((r11*x5604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5606=((1.0)*gconst115);
CheckValue<IkReal> x5607 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst116*r20))+(((-1.0)*cj0*r21*x5606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5607.valid){
continue;
}
CheckValue<IkReal> x5608=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5606))+(((-1.0)*gconst116*r01)))),-1);
if(!x5608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5607.value)+(((1.5707963267949)*(x5608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5609=IKsin(j4);
IkReal x5610=IKcos(j4);
IkReal x5611=(cj2*sj1);
IkReal x5612=(cj1*sj2);
IkReal x5613=((1.0)*x5610);
IkReal x5614=(gconst116*x5609);
IkReal x5615=(gconst115*x5610);
IkReal x5616=((1.0)*x5609);
evalcond[0]=((((-1.0)*r22*x5613))+(((-1.0)*gconst115*r21*x5616))+((r20*x5614)));
evalcond[1]=(sj0+(((-1.0)*gconst115*r01*x5616))+((r00*x5614))+(((-1.0)*r02*x5613)));
evalcond[2]=((((-1.0)*gconst115*r11*x5616))+(((-1.0)*r12*x5613))+(((-1.0)*cj0))+((r10*x5614)));
evalcond[3]=((((-1.0)*gconst116*r20*x5613))+(((-1.0)*r22*x5616))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5615)));
evalcond[4]=(((cj0*x5611))+((cj0*x5612))+((r01*x5615))+(((-1.0)*gconst116*r00*x5613))+(((-1.0)*r02*x5616)));
evalcond[5]=(((sj0*x5612))+((sj0*x5611))+(((-1.0)*gconst116*r10*x5613))+(((-1.0)*r12*x5616))+((r11*x5615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5617=((1.0)*gconst115);
CheckValue<IkReal> x5618 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5617))+((gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5618.valid){
continue;
}
CheckValue<IkReal> x5619=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5617))+(((-1.0)*gconst116*r11)))),-1);
if(!x5619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5618.value)+(((1.5707963267949)*(x5619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5620=IKsin(j4);
IkReal x5621=IKcos(j4);
IkReal x5622=(cj2*sj1);
IkReal x5623=(cj1*sj2);
IkReal x5624=((1.0)*x5621);
IkReal x5625=(gconst116*x5620);
IkReal x5626=(gconst115*x5621);
IkReal x5627=((1.0)*x5620);
evalcond[0]=((((-1.0)*r22*x5624))+(((-1.0)*gconst115*r21*x5627))+((r20*x5625)));
evalcond[1]=(sj0+(((-1.0)*gconst115*r01*x5627))+((r00*x5625))+(((-1.0)*r02*x5624)));
evalcond[2]=((((-1.0)*gconst115*r11*x5627))+(((-1.0)*r12*x5624))+((r10*x5625))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5627))+(((-1.0)*gconst116*r20*x5624))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5626)));
evalcond[4]=(((cj0*x5622))+((cj0*x5623))+((r01*x5626))+(((-1.0)*gconst116*r00*x5624))+(((-1.0)*r02*x5627)));
evalcond[5]=(((sj0*x5622))+((sj0*x5623))+(((-1.0)*gconst116*r10*x5624))+(((-1.0)*r12*x5627))+((r11*x5626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5629 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5629)==0){
continue;
}
IkReal x5628=pow(x5629,-0.5);
CheckValue<IkReal> x5630 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5630.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5630.value))));
IkReal gconst118=((1.0)*r21*x5628);
IkReal gconst119=((-1.0)*r20*x5628);
CheckValue<IkReal> x5631 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5631.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5631.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5634 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5634.valid){
continue;
}
IkReal x5632=((1.0)*(x5634.value));
IkReal x5633=x5628;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5632)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5632)));
IkReal gconst118=((1.0)*r21*x5633);
IkReal gconst119=((-1.0)*r20*x5633);
IkReal x5635=r22*r22;
IkReal x5636=((1.0)*x5635);
CheckValue<IkReal> x5640=IKPowWithIntegerCheck(((-1.0)+x5635),-1);
if(!x5640.valid){
continue;
}
IkReal x5637=x5640.value;
if((((1.0)+(((-1.0)*x5636)))) < -0.00001)
continue;
IkReal x5638=IKsqrt(((1.0)+(((-1.0)*x5636))));
IkReal x5639=(sj0*x5637*x5638);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5639+(((-1.0)*x5636*x5639))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5643 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5643.valid){
continue;
}
IkReal x5641=((1.0)*(x5643.value));
IkReal x5642=x5628;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5641)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5641)));
IkReal gconst118=((1.0)*r21*x5642);
IkReal gconst119=((-1.0)*r20*x5642);
IkReal x5644=r22*r22;
IkReal x5645=((1.0)*x5644);
CheckValue<IkReal> x5649=IKPowWithIntegerCheck(((-1.0)+x5644),-1);
if(!x5649.valid){
continue;
}
IkReal x5646=x5649.value;
if((((1.0)+(((-1.0)*x5645)))) < -0.00001)
continue;
IkReal x5647=IKsqrt(((1.0)+(((-1.0)*x5645))));
IkReal x5648=(cj0*x5646*x5647);
j4eval[0]=((IKabs((x5648+(((-1.0)*x5645*x5648)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5652 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5652.valid){
continue;
}
IkReal x5650=((1.0)*(x5652.value));
IkReal x5651=x5628;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5650)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5650)));
IkReal gconst118=((1.0)*r21*x5651);
IkReal gconst119=((-1.0)*r20*x5651);
IkReal x5653=r22*r22;
IkReal x5654=(cj0*r02);
IkReal x5655=(r12*sj0);
CheckValue<IkReal> x5659=IKPowWithIntegerCheck(((-1.0)+x5653),-1);
if(!x5659.valid){
continue;
}
IkReal x5656=x5659.value;
if((((1.0)+(((-1.0)*x5653)))) < -0.00001)
continue;
IkReal x5657=IKsqrt(((1.0)+(((-1.0)*x5653))));
IkReal x5658=((1.0)*r22*x5656*x5657);
j4eval[0]=0;
j4eval[1]=((IKabs((x5654+x5655)))+(IKabs(((((-1.0)*x5654*x5658))+(((-1.0)*x5655*x5658))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5660=((1.0)*gconst118);
CheckValue<IkReal> x5661=IKPowWithIntegerCheck(IKsign((((gconst119*r21))+((gconst118*r20)))),-1);
if(!x5661.valid){
continue;
}
CheckValue<IkReal> x5662 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5660))+(((-1.0)*r11*sj0*x5660))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5661.value)))+(x5662.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5663=IKsin(j4);
IkReal x5664=IKcos(j4);
IkReal x5665=(cj2*sj1);
IkReal x5666=(gconst118*r01);
IkReal x5667=(gconst119*r10);
IkReal x5668=(gconst119*r20);
IkReal x5669=(gconst118*r21);
IkReal x5670=(gconst119*r00);
IkReal x5671=(gconst118*r11);
IkReal x5672=(cj1*sj2);
IkReal x5673=((1.0)*x5664);
IkReal x5674=((1.0)*x5663);
evalcond[0]=((((-1.0)*r22*x5673))+(((-1.0)*x5669*x5674))+((x5663*x5668)));
evalcond[1]=((((-1.0)*x5666*x5674))+sj0+(((-1.0)*r02*x5673))+((x5663*x5670)));
evalcond[2]=((((-1.0)*r12*x5673))+(((-1.0)*x5671*x5674))+((x5663*x5667))+(((-1.0)*cj0)));
evalcond[3]=(((x5664*x5669))+(((-1.0)*r22*x5674))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5668*x5673)));
evalcond[4]=(((x5664*x5666))+(((-1.0)*x5670*x5673))+((cj0*x5672))+((cj0*x5665))+(((-1.0)*r02*x5674)));
evalcond[5]=((((-1.0)*x5667*x5673))+(((-1.0)*r12*x5674))+((sj0*x5672))+((x5664*x5671))+((sj0*x5665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5675=((1.0)*gconst118);
CheckValue<IkReal> x5676 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5675))+((cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5676.valid){
continue;
}
CheckValue<IkReal> x5677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5675))+(((-1.0)*gconst119*r01)))),-1);
if(!x5677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5676.value)+(((1.5707963267949)*(x5677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5678=IKsin(j4);
IkReal x5679=IKcos(j4);
IkReal x5680=(cj2*sj1);
IkReal x5681=(gconst118*r01);
IkReal x5682=(gconst119*r10);
IkReal x5683=(gconst119*r20);
IkReal x5684=(gconst118*r21);
IkReal x5685=(gconst119*r00);
IkReal x5686=(gconst118*r11);
IkReal x5687=(cj1*sj2);
IkReal x5688=((1.0)*x5679);
IkReal x5689=((1.0)*x5678);
evalcond[0]=((((-1.0)*r22*x5688))+(((-1.0)*x5684*x5689))+((x5678*x5683)));
evalcond[1]=((((-1.0)*r02*x5688))+sj0+(((-1.0)*x5681*x5689))+((x5678*x5685)));
evalcond[2]=((((-1.0)*x5686*x5689))+((x5678*x5682))+(((-1.0)*r12*x5688))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+(((-1.0)*r22*x5689))+((sj1*sj2))+(((-1.0)*x5683*x5688))+((x5679*x5684)));
evalcond[4]=((((-1.0)*r02*x5689))+(((-1.0)*x5685*x5688))+((x5679*x5681))+((cj0*x5687))+((cj0*x5680)));
evalcond[5]=(((sj0*x5687))+((sj0*x5680))+((x5679*x5686))+(((-1.0)*x5682*x5688))+(((-1.0)*r12*x5689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5690=((1.0)*gconst118);
CheckValue<IkReal> x5691=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r11))+(((-1.0)*r10*x5690)))),-1);
if(!x5691.valid){
continue;
}
CheckValue<IkReal> x5692 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5690))+((gconst119*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5691.value)))+(x5692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5693=IKsin(j4);
IkReal x5694=IKcos(j4);
IkReal x5695=(cj2*sj1);
IkReal x5696=(gconst118*r01);
IkReal x5697=(gconst119*r10);
IkReal x5698=(gconst119*r20);
IkReal x5699=(gconst118*r21);
IkReal x5700=(gconst119*r00);
IkReal x5701=(gconst118*r11);
IkReal x5702=(cj1*sj2);
IkReal x5703=((1.0)*x5694);
IkReal x5704=((1.0)*x5693);
evalcond[0]=(((x5693*x5698))+(((-1.0)*r22*x5703))+(((-1.0)*x5699*x5704)));
evalcond[1]=(sj0+((x5693*x5700))+(((-1.0)*r02*x5703))+(((-1.0)*x5696*x5704)));
evalcond[2]=((((-1.0)*r12*x5703))+((x5693*x5697))+(((-1.0)*x5701*x5704))+(((-1.0)*cj0)));
evalcond[3]=(((x5694*x5699))+(((-1.0)*r22*x5704))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5698*x5703)));
evalcond[4]=(((x5694*x5696))+(((-1.0)*x5700*x5703))+(((-1.0)*r02*x5704))+((cj0*x5695))+((cj0*x5702)));
evalcond[5]=((((-1.0)*r12*x5704))+(((-1.0)*x5697*x5703))+((x5694*x5701))+((sj0*x5702))+((sj0*x5695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5705=((-1.0)*r00);
IkReal x5707 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5707)==0){
continue;
}
IkReal x5706=pow(x5707,-0.5);
CheckValue<IkReal> x5708 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5705),IKFAST_ATAN2_MAGTHRESH);
if(!x5708.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5708.value));
IkReal gconst121=(r01*x5706);
IkReal gconst122=(x5705*x5706);
CheckValue<IkReal> x5709 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5709.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5709.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5710=((-1.0)*r00);
IkReal x5711=x5706;
CheckValue<IkReal> x5713 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5710),IKFAST_ATAN2_MAGTHRESH);
if(!x5713.valid){
continue;
}
IkReal x5712=((-1.0)*(x5713.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5712;
IkReal gconst120=x5712;
IkReal gconst121=(r01*x5711);
IkReal gconst122=(x5710*x5711);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5714=((1.0)*gconst121);
CheckValue<IkReal> x5715 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*r11*sj0*x5714))+(((-1.0)*cj0*r01*x5714))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5715.valid){
continue;
}
CheckValue<IkReal> x5716=IKPowWithIntegerCheck(IKsign((((gconst122*r21))+((gconst121*r20)))),-1);
if(!x5716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5715.value)+(((1.5707963267949)*(x5716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5717=IKsin(j4);
IkReal x5718=IKcos(j4);
IkReal x5719=(gconst121*r11);
IkReal x5720=(gconst122*r00);
IkReal x5721=(cj2*sj1);
IkReal x5722=(gconst121*r01);
IkReal x5723=(gconst121*r21);
IkReal x5724=(cj1*sj2);
IkReal x5725=((1.0)*x5718);
IkReal x5726=(gconst122*x5717);
IkReal x5727=((1.0)*x5717);
evalcond[0]=((((-1.0)*x5723*x5727))+((r20*x5726))+(((-1.0)*r22*x5725)));
evalcond[1]=(sj0+((x5717*x5720))+(((-1.0)*r02*x5725))+(((-1.0)*x5722*x5727)));
evalcond[2]=((((-1.0)*r12*x5725))+(((-1.0)*x5719*x5727))+((r10*x5726))+(((-1.0)*cj0)));
evalcond[3]=(((x5718*x5723))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x5727))+(((-1.0)*gconst122*r20*x5725)));
evalcond[4]=(((x5718*x5722))+(((-1.0)*r02*x5727))+((cj0*x5721))+((cj0*x5724))+(((-1.0)*x5720*x5725)));
evalcond[5]=(((sj0*x5721))+((sj0*x5724))+(((-1.0)*r12*x5727))+(((-1.0)*gconst122*r10*x5725))+((x5718*x5719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5728=((1.0)*gconst121);
CheckValue<IkReal> x5729 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst122*r20*sj0))+(((-1.0)*r21*sj0*x5728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5729.valid){
continue;
}
CheckValue<IkReal> x5730=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r11))+(((-1.0)*r10*x5728)))),-1);
if(!x5730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5729.value)+(((1.5707963267949)*(x5730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5731=IKsin(j4);
IkReal x5732=IKcos(j4);
IkReal x5733=(gconst121*r11);
IkReal x5734=(gconst122*r00);
IkReal x5735=(cj2*sj1);
IkReal x5736=(gconst121*r01);
IkReal x5737=(gconst121*r21);
IkReal x5738=(cj1*sj2);
IkReal x5739=((1.0)*x5732);
IkReal x5740=(gconst122*x5731);
IkReal x5741=((1.0)*x5731);
evalcond[0]=((((-1.0)*x5737*x5741))+(((-1.0)*r22*x5739))+((r20*x5740)));
evalcond[1]=(sj0+(((-1.0)*r02*x5739))+((x5731*x5734))+(((-1.0)*x5736*x5741)));
evalcond[2]=((((-1.0)*r12*x5739))+((r10*x5740))+(((-1.0)*cj0))+(((-1.0)*x5733*x5741)));
evalcond[3]=(((x5732*x5737))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x5741))+(((-1.0)*gconst122*r20*x5739)));
evalcond[4]=(((x5732*x5736))+(((-1.0)*x5734*x5739))+(((-1.0)*r02*x5741))+((cj0*x5738))+((cj0*x5735)));
evalcond[5]=(((x5732*x5733))+(((-1.0)*r12*x5741))+(((-1.0)*gconst122*r10*x5739))+((sj0*x5735))+((sj0*x5738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5742=((-1.0)*r01);
IkReal x5744 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5744)==0){
continue;
}
IkReal x5743=pow(x5744,-0.5);
CheckValue<IkReal> x5745 = IKatan2WithCheck(IkReal(x5742),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5745.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5745.value))));
IkReal gconst124=(x5742*x5743);
IkReal gconst125=((1.0)*r00*x5743);
CheckValue<IkReal> x5746 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5746.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5746.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5747=((-1.0)*r01);
CheckValue<IkReal> x5750 = IKatan2WithCheck(IkReal(x5747),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5750.valid){
continue;
}
IkReal x5748=((1.0)*(x5750.value));
IkReal x5749=x5743;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5748)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5748)));
IkReal gconst124=(x5747*x5749);
IkReal gconst125=((1.0)*r00*x5749);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x5751=((-1.0)*r01);
CheckValue<IkReal> x5754 = IKatan2WithCheck(IkReal(x5751),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5754.valid){
continue;
}
IkReal x5752=((1.0)*(x5754.value));
IkReal x5753=x5743;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5752)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5752)));
IkReal gconst124=(x5751*x5753);
IkReal gconst125=((1.0)*r00*x5753);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5755=((-1.0)*r01);
CheckValue<IkReal> x5758 = IKatan2WithCheck(IkReal(x5755),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5758.valid){
continue;
}
IkReal x5756=((1.0)*(x5758.value));
IkReal x5757=x5743;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5756)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5756)));
IkReal gconst124=(x5755*x5757);
IkReal gconst125=((1.0)*r00*x5757);
IkReal x5759=r02*r02;
IkReal x5760=(r12*sj0);
IkReal x5761=x5743;
IkReal x5762=(cj0*x5761);
j4eval[0]=((IKabs((x5760+((cj0*r02)))))+(IKabs((((r02*x5760*x5761))+(((-1.0)*x5762))+((x5759*x5762))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5763=((1.0)*gconst124);
CheckValue<IkReal> x5764 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*r11*sj0*x5763))+(((-1.0)*cj0*r01*x5763))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5764.valid){
continue;
}
CheckValue<IkReal> x5765=IKPowWithIntegerCheck(IKsign((((gconst124*r20))+((gconst125*r21)))),-1);
if(!x5765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5764.value)+(((1.5707963267949)*(x5765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5766=IKsin(j4);
IkReal x5767=IKcos(j4);
IkReal x5768=(cj2*sj1);
IkReal x5769=(cj1*sj2);
IkReal x5770=((1.0)*x5767);
IkReal x5771=(gconst125*x5766);
IkReal x5772=(gconst124*x5767);
IkReal x5773=((1.0)*x5766);
evalcond[0]=((((-1.0)*gconst124*r21*x5773))+(((-1.0)*r22*x5770))+((r20*x5771)));
evalcond[1]=(sj0+((r00*x5771))+(((-1.0)*gconst124*r01*x5773))+(((-1.0)*r02*x5770)));
evalcond[2]=((((-1.0)*gconst124*r11*x5773))+(((-1.0)*r12*x5770))+((r10*x5771))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst125*r20*x5770))+((r21*x5772))+(((-1.0)*r22*x5773)));
evalcond[4]=(((r01*x5772))+(((-1.0)*r02*x5773))+((cj0*x5768))+((cj0*x5769))+(((-1.0)*gconst125*r00*x5770)));
evalcond[5]=((((-1.0)*r12*x5773))+(((-1.0)*gconst125*r10*x5770))+((r11*x5772))+((sj0*x5768))+((sj0*x5769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5774=((1.0)*gconst124);
CheckValue<IkReal> x5775 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5774))+((cj0*gconst125*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5775.valid){
continue;
}
CheckValue<IkReal> x5776=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5774))+(((-1.0)*gconst125*r01)))),-1);
if(!x5776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5775.value)+(((1.5707963267949)*(x5776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5777=IKsin(j4);
IkReal x5778=IKcos(j4);
IkReal x5779=(cj2*sj1);
IkReal x5780=(cj1*sj2);
IkReal x5781=((1.0)*x5778);
IkReal x5782=(gconst125*x5777);
IkReal x5783=(gconst124*x5778);
IkReal x5784=((1.0)*x5777);
evalcond[0]=(((r20*x5782))+(((-1.0)*gconst124*r21*x5784))+(((-1.0)*r22*x5781)));
evalcond[1]=(sj0+(((-1.0)*gconst124*r01*x5784))+((r00*x5782))+(((-1.0)*r02*x5781)));
evalcond[2]=((((-1.0)*r12*x5781))+(((-1.0)*gconst124*r11*x5784))+((r10*x5782))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5783))+(((-1.0)*gconst125*r20*x5781))+(((-1.0)*r22*x5784)));
evalcond[4]=(((r01*x5783))+((cj0*x5779))+(((-1.0)*r02*x5784))+((cj0*x5780))+(((-1.0)*gconst125*r00*x5781)));
evalcond[5]=((((-1.0)*gconst125*r10*x5781))+((r11*x5783))+(((-1.0)*r12*x5784))+((sj0*x5780))+((sj0*x5779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5785=((1.0)*gconst124);
CheckValue<IkReal> x5786 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst125*r20*sj0))+(((-1.0)*r21*sj0*x5785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5786.valid){
continue;
}
CheckValue<IkReal> x5787=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5785))+(((-1.0)*gconst125*r11)))),-1);
if(!x5787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5786.value)+(((1.5707963267949)*(x5787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5788=IKsin(j4);
IkReal x5789=IKcos(j4);
IkReal x5790=(cj2*sj1);
IkReal x5791=(cj1*sj2);
IkReal x5792=((1.0)*x5789);
IkReal x5793=(gconst125*x5788);
IkReal x5794=(gconst124*x5789);
IkReal x5795=((1.0)*x5788);
evalcond[0]=(((r20*x5793))+(((-1.0)*gconst124*r21*x5795))+(((-1.0)*r22*x5792)));
evalcond[1]=(sj0+(((-1.0)*gconst124*r01*x5795))+((r00*x5793))+(((-1.0)*r02*x5792)));
evalcond[2]=(((r10*x5793))+(((-1.0)*r12*x5792))+(((-1.0)*gconst124*r11*x5795))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5794))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst125*r20*x5792))+(((-1.0)*r22*x5795)));
evalcond[4]=((((-1.0)*gconst125*r00*x5792))+((r01*x5794))+((cj0*x5791))+((cj0*x5790))+(((-1.0)*r02*x5795)));
evalcond[5]=((((-1.0)*gconst125*r10*x5792))+((r11*x5794))+((sj0*x5791))+((sj0*x5790))+(((-1.0)*r12*x5795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5796=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5796;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x5796);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5797=((1.0)*sj5);
IkReal x5798=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5797)));
j4eval[0]=x5798;
j4eval[1]=IKsign(x5798);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x5797))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5799=cj5*cj5;
IkReal x5800=r01*r01;
IkReal x5801=(cj5*r00);
IkReal x5802=(r01*sj5);
IkReal x5803=((((-1.0)*x5799*x5800))+(r02*r02)+(((-2.0)*x5801*x5802))+x5800+((x5799*(r00*r00))));
j4eval[0]=x5803;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x5801))+x5802))));
j4eval[2]=IKsign(x5803);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5804=cj5*cj5;
IkReal x5805=r01*r01;
IkReal x5806=(r01*sj5);
IkReal x5807=(cj5*r00);
CheckValue<IkReal> x5808=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5804*x5805))+(r02*r02)+((x5804*(r00*r00)))+(((-2.0)*x5806*x5807))+x5805)),-1);
if(!x5808.valid){
continue;
}
CheckValue<IkReal> x5809 = IKatan2WithCheck(IkReal(((((-1.0)*x5807))+x5806)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5808.value)))+(x5809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5810=IKsin(j4);
IkReal x5811=IKcos(j4);
IkReal x5812=(cj5*r00);
IkReal x5813=(cj5*r20);
IkReal x5814=(cj5*r10);
IkReal x5815=((1.0)*x5811);
IkReal x5816=(sj5*x5811);
IkReal x5817=((1.0)*x5810);
IkReal x5818=(sj5*x5817);
evalcond[0]=(((x5810*x5813))+(((-1.0)*r21*x5818))+(((-1.0)*r22*x5815)));
evalcond[1]=((((-1.0)*r11*x5818))+(((-1.0)*r12*x5815))+((x5810*x5814)));
evalcond[2]=((((-1.0)*r02*x5817))+(((-1.0)*x5812*x5815))+((r01*x5816)));
evalcond[3]=((1.0)+((x5810*x5812))+(((-1.0)*r02*x5815))+(((-1.0)*r01*x5818)));
evalcond[4]=((((-1.0)*r12*x5817))+((cj2*sj1))+(((-1.0)*x5814*x5815))+((cj1*sj2))+((r11*x5816)));
evalcond[5]=(((r21*x5816))+(((-1.0)*x5813*x5815))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x5817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5819=((1.0)*sj5);
CheckValue<IkReal> x5820 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x5819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5820.valid){
continue;
}
CheckValue<IkReal> x5821=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5819)))),-1);
if(!x5821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5820.value)+(((1.5707963267949)*(x5821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5822=IKsin(j4);
IkReal x5823=IKcos(j4);
IkReal x5824=(cj5*r00);
IkReal x5825=(cj5*r20);
IkReal x5826=(cj5*r10);
IkReal x5827=((1.0)*x5823);
IkReal x5828=(sj5*x5823);
IkReal x5829=((1.0)*x5822);
IkReal x5830=(sj5*x5829);
evalcond[0]=((((-1.0)*r22*x5827))+(((-1.0)*r21*x5830))+((x5822*x5825)));
evalcond[1]=(((x5822*x5826))+(((-1.0)*r12*x5827))+(((-1.0)*r11*x5830)));
evalcond[2]=((((-1.0)*r02*x5829))+((r01*x5828))+(((-1.0)*x5824*x5827)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5827))+(((-1.0)*r01*x5830))+((x5822*x5824)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x5828))+(((-1.0)*x5826*x5827))+(((-1.0)*r12*x5829)));
evalcond[5]=((((-1.0)*r22*x5829))+((r21*x5828))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5825*x5827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5831 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5831.valid){
continue;
}
CheckValue<IkReal> x5832=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5831.value)+(((1.5707963267949)*(x5832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5833=IKsin(j4);
IkReal x5834=IKcos(j4);
IkReal x5835=(cj5*r00);
IkReal x5836=(cj5*r20);
IkReal x5837=(cj5*r10);
IkReal x5838=((1.0)*x5834);
IkReal x5839=(sj5*x5834);
IkReal x5840=((1.0)*x5833);
IkReal x5841=(sj5*x5840);
evalcond[0]=((((-1.0)*r22*x5838))+(((-1.0)*r21*x5841))+((x5833*x5836)));
evalcond[1]=(((x5833*x5837))+(((-1.0)*r11*x5841))+(((-1.0)*r12*x5838)));
evalcond[2]=((((-1.0)*r02*x5840))+((r01*x5839))+(((-1.0)*x5835*x5838)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5838))+(((-1.0)*r01*x5841))+((x5833*x5835)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x5839))+(((-1.0)*r12*x5840))+(((-1.0)*x5837*x5838)));
evalcond[5]=(((r21*x5839))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x5840))+(((-1.0)*x5836*x5838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5842=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5842;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x5842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5843=((1.0)*sj5);
IkReal x5844=((((-1.0)*r20*x5843))+(((-1.0)*cj5*r21)));
j4eval[0]=x5844;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x5843))))));
j4eval[2]=IKsign(x5844);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5845=cj5*cj5;
IkReal x5846=r01*r01;
IkReal x5847=(r01*sj5);
IkReal x5848=(cj5*r00);
IkReal x5849=((((-1.0)*x5846))+((x5845*x5846))+(((2.0)*x5847*x5848))+(((-1.0)*(r02*r02)))+(((-1.0)*x5845*(r00*r00))));
j4eval[0]=x5849;
j4eval[1]=IKsign(x5849);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5848))+x5847))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5850=cj5*cj5;
IkReal x5851=r01*r01;
IkReal x5852=(r01*sj5);
IkReal x5853=(cj5*r00);
CheckValue<IkReal> x5854=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5850*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x5851))+((x5850*x5851))+(((2.0)*x5852*x5853)))),-1);
if(!x5854.valid){
continue;
}
CheckValue<IkReal> x5855 = IKatan2WithCheck(IkReal(((((-1.0)*x5853))+x5852)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5854.value)))+(x5855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5856=IKsin(j4);
IkReal x5857=IKcos(j4);
IkReal x5858=(cj5*r00);
IkReal x5859=((1.0)*cj1);
IkReal x5860=(cj5*r20);
IkReal x5861=(cj5*r10);
IkReal x5862=((1.0)*x5857);
IkReal x5863=(sj5*x5857);
IkReal x5864=((1.0)*x5856);
IkReal x5865=(sj5*x5864);
evalcond[0]=((((-1.0)*r22*x5862))+((x5856*x5860))+(((-1.0)*r21*x5865)));
evalcond[1]=((((-1.0)*r11*x5865))+((x5856*x5861))+(((-1.0)*r12*x5862)));
evalcond[2]=((((-1.0)*x5858*x5862))+(((-1.0)*r02*x5864))+((r01*x5863)));
evalcond[3]=((-1.0)+((x5856*x5858))+(((-1.0)*r02*x5862))+(((-1.0)*r01*x5865)));
evalcond[4]=((((-1.0)*r22*x5864))+((r21*x5863))+(((-1.0)*cj2*x5859))+((sj1*sj2))+(((-1.0)*x5860*x5862)));
evalcond[5]=((((-1.0)*x5861*x5862))+(((-1.0)*cj2*sj1))+((r11*x5863))+(((-1.0)*r12*x5864))+(((-1.0)*sj2*x5859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5866=((1.0)*sj5);
CheckValue<IkReal> x5867 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x5866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5867.valid){
continue;
}
CheckValue<IkReal> x5868=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x5866)))),-1);
if(!x5868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5867.value)+(((1.5707963267949)*(x5868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5869=IKsin(j4);
IkReal x5870=IKcos(j4);
IkReal x5871=(cj5*r00);
IkReal x5872=((1.0)*cj1);
IkReal x5873=(cj5*r20);
IkReal x5874=(cj5*r10);
IkReal x5875=((1.0)*x5870);
IkReal x5876=(sj5*x5870);
IkReal x5877=((1.0)*x5869);
IkReal x5878=(sj5*x5877);
evalcond[0]=((((-1.0)*r22*x5875))+((x5869*x5873))+(((-1.0)*r21*x5878)));
evalcond[1]=((((-1.0)*r12*x5875))+(((-1.0)*r11*x5878))+((x5869*x5874)));
evalcond[2]=((((-1.0)*r02*x5877))+(((-1.0)*x5871*x5875))+((r01*x5876)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5875))+((x5869*x5871))+(((-1.0)*r01*x5878)));
evalcond[4]=((((-1.0)*r22*x5877))+((sj1*sj2))+(((-1.0)*x5873*x5875))+(((-1.0)*cj2*x5872))+((r21*x5876)));
evalcond[5]=((((-1.0)*r12*x5877))+(((-1.0)*x5874*x5875))+(((-1.0)*cj2*sj1))+((r11*x5876))+(((-1.0)*sj2*x5872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5879=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5879.valid){
continue;
}
CheckValue<IkReal> x5880 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5879.value)))+(x5880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5881=IKsin(j4);
IkReal x5882=IKcos(j4);
IkReal x5883=(cj5*r00);
IkReal x5884=((1.0)*cj1);
IkReal x5885=(cj5*r20);
IkReal x5886=(cj5*r10);
IkReal x5887=((1.0)*x5882);
IkReal x5888=(sj5*x5882);
IkReal x5889=((1.0)*x5881);
IkReal x5890=(sj5*x5889);
evalcond[0]=((((-1.0)*r21*x5890))+((x5881*x5885))+(((-1.0)*r22*x5887)));
evalcond[1]=((((-1.0)*r11*x5890))+(((-1.0)*r12*x5887))+((x5881*x5886)));
evalcond[2]=((((-1.0)*x5883*x5887))+((r01*x5888))+(((-1.0)*r02*x5889)));
evalcond[3]=((-1.0)+((x5881*x5883))+(((-1.0)*r02*x5887))+(((-1.0)*r01*x5890)));
evalcond[4]=((((-1.0)*x5885*x5887))+((sj1*sj2))+(((-1.0)*cj2*x5884))+((r21*x5888))+(((-1.0)*r22*x5889)));
evalcond[5]=((((-1.0)*sj2*x5884))+(((-1.0)*x5886*x5887))+((r11*x5888))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x5889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5891=((-1.0)*r10);
IkReal x5893 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5893)==0){
continue;
}
IkReal x5892=pow(x5893,-0.5);
CheckValue<IkReal> x5894 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5891),IKFAST_ATAN2_MAGTHRESH);
if(!x5894.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5894.value));
IkReal gconst127=(r11*x5892);
IkReal gconst128=(x5891*x5892);
CheckValue<IkReal> x5895 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5895.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5895.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5896=((-1.0)*r10);
IkReal x5897=x5892;
CheckValue<IkReal> x5899 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5896),IKFAST_ATAN2_MAGTHRESH);
if(!x5899.valid){
continue;
}
IkReal x5898=((-1.0)*(x5899.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5898;
IkReal gconst126=x5898;
IkReal gconst127=(r11*x5897);
IkReal gconst128=(x5896*x5897);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5900=((1.0)*gconst127);
CheckValue<IkReal> x5901 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x5900))+((cj0*gconst128*r00))+(((-1.0)*r11*sj0*x5900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5901.valid){
continue;
}
CheckValue<IkReal> x5902=IKPowWithIntegerCheck(IKsign((((gconst127*r20))+((gconst128*r21)))),-1);
if(!x5902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5901.value)+(((1.5707963267949)*(x5902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5903=IKsin(j4);
IkReal x5904=IKcos(j4);
IkReal x5905=(cj2*sj1);
IkReal x5906=(gconst128*r10);
IkReal x5907=(cj1*sj2);
IkReal x5908=((1.0)*x5904);
IkReal x5909=(gconst127*x5904);
IkReal x5910=((1.0)*x5903);
IkReal x5911=(gconst128*x5903);
evalcond[0]=((((-1.0)*gconst127*r21*x5910))+(((-1.0)*r22*x5908))+((r20*x5911)));
evalcond[1]=(((r00*x5911))+sj0+(((-1.0)*gconst127*r01*x5910))+(((-1.0)*r02*x5908)));
evalcond[2]=(((x5903*x5906))+(((-1.0)*r12*x5908))+(((-1.0)*gconst127*r11*x5910))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5910))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst128*r20*x5908))+((r21*x5909)));
evalcond[4]=((((-1.0)*gconst128*r00*x5908))+(((-1.0)*r02*x5910))+((cj0*x5905))+((cj0*x5907))+((r01*x5909)));
evalcond[5]=(((sj0*x5905))+((sj0*x5907))+(((-1.0)*r12*x5910))+(((-1.0)*x5906*x5908))+((r11*x5909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5912=((1.0)*gconst127);
CheckValue<IkReal> x5913=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5912))+(((-1.0)*gconst128*r01)))),-1);
if(!x5913.valid){
continue;
}
CheckValue<IkReal> x5914 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst128*r20))+(((-1.0)*cj0*r21*x5912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5913.value)))+(x5914.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5915=IKsin(j4);
IkReal x5916=IKcos(j4);
IkReal x5917=(cj2*sj1);
IkReal x5918=(gconst128*r10);
IkReal x5919=(cj1*sj2);
IkReal x5920=((1.0)*x5916);
IkReal x5921=(gconst127*x5916);
IkReal x5922=((1.0)*x5915);
IkReal x5923=(gconst128*x5915);
evalcond[0]=((((-1.0)*r22*x5920))+((r20*x5923))+(((-1.0)*gconst127*r21*x5922)));
evalcond[1]=(sj0+(((-1.0)*r02*x5920))+((r00*x5923))+(((-1.0)*gconst127*r01*x5922)));
evalcond[2]=(((x5915*x5918))+(((-1.0)*r12*x5920))+(((-1.0)*gconst127*r11*x5922))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5922))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst128*r20*x5920))+((r21*x5921)));
evalcond[4]=((((-1.0)*r02*x5922))+(((-1.0)*gconst128*r00*x5920))+((r01*x5921))+((cj0*x5919))+((cj0*x5917)));
evalcond[5]=((((-1.0)*x5918*x5920))+((sj0*x5919))+((sj0*x5917))+((r11*x5921))+(((-1.0)*r12*x5922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5924=((-1.0)*r11);
IkReal x5926 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5926)==0){
continue;
}
IkReal x5925=pow(x5926,-0.5);
CheckValue<IkReal> x5927 = IKatan2WithCheck(IkReal(x5924),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5927.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5927.value))));
IkReal gconst130=(x5924*x5925);
IkReal gconst131=((1.0)*r10*x5925);
CheckValue<IkReal> x5928 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5928.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5928.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5929=((-1.0)*r11);
CheckValue<IkReal> x5932 = IKatan2WithCheck(IkReal(x5929),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5932.valid){
continue;
}
IkReal x5930=((1.0)*(x5932.value));
IkReal x5931=x5925;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5930)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5930)));
IkReal gconst130=(x5929*x5931);
IkReal gconst131=((1.0)*r10*x5931);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5933=((-1.0)*r11);
CheckValue<IkReal> x5936 = IKatan2WithCheck(IkReal(x5933),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5936.valid){
continue;
}
IkReal x5934=((1.0)*(x5936.value));
IkReal x5935=x5925;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5934)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5934)));
IkReal gconst130=(x5933*x5935);
IkReal gconst131=((1.0)*r10*x5935);
IkReal x5937=r12*r12;
IkReal x5938=(cj0*r02);
IkReal x5939=x5925;
IkReal x5940=(sj0*x5939);
j4eval[0]=((IKabs((((r12*sj0))+x5938)))+(IKabs((((r12*x5938*x5939))+(((-1.0)*x5940))+((x5937*x5940))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5941=((-1.0)*r11);
CheckValue<IkReal> x5944 = IKatan2WithCheck(IkReal(x5941),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5944.valid){
continue;
}
IkReal x5942=((1.0)*(x5944.value));
IkReal x5943=x5925;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5942)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5942)));
IkReal gconst130=(x5941*x5943);
IkReal gconst131=((1.0)*r10*x5943);
IkReal x5945=r12*r12;
IkReal x5946=(sj1*sj2);
IkReal x5947=((1.0)*cj1*cj2);
CheckValue<IkReal> x5951=IKPowWithIntegerCheck(((-1.0)+x5945),-1);
if(!x5951.valid){
continue;
}
IkReal x5948=x5951.value;
if((((1.0)+(((-1.0)*x5945)))) < -0.00001)
continue;
IkReal x5949=IKsqrt(((1.0)+(((-1.0)*x5945))));
IkReal x5950=(r12*r22*x5948*x5949);
j4eval[0]=((IKabs(((((-1.0)*r22*x5947))+((r22*x5946)))))+(IKabs(((((-1.0)*x5947*x5950))+((x5946*x5950))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5952=(gconst131*r20);
IkReal x5953=(cj1*cj2);
IkReal x5954=(sj1*sj2);
IkReal x5955=(gconst130*r21);
CheckValue<IkReal> x5956 = IKatan2WithCheck(IkReal((((r22*x5954))+(((-1.0)*r22*x5953)))),IkReal(((((-1.0)*x5952*x5953))+((x5952*x5954))+((x5953*x5955))+(((-1.0)*x5954*x5955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5956.valid){
continue;
}
CheckValue<IkReal> x5957=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x5955*x5955)+(((-2.0)*x5952*x5955))+(x5952*x5952))),-1);
if(!x5957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5956.value)+(((1.5707963267949)*(x5957.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5958=IKsin(j4);
IkReal x5959=IKcos(j4);
IkReal x5960=(cj2*sj1);
IkReal x5961=(gconst131*r20);
IkReal x5962=(gconst131*r10);
IkReal x5963=(gconst131*r00);
IkReal x5964=(cj1*sj2);
IkReal x5965=((1.0)*x5959);
IkReal x5966=(gconst130*x5959);
IkReal x5967=((1.0)*x5958);
evalcond[0]=((((-1.0)*r22*x5965))+((x5958*x5961))+(((-1.0)*gconst130*r21*x5967)));
evalcond[1]=(sj0+(((-1.0)*gconst130*r01*x5967))+((x5958*x5963))+(((-1.0)*r02*x5965)));
evalcond[2]=((((-1.0)*gconst130*r11*x5967))+(((-1.0)*r12*x5965))+((x5958*x5962))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5967))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5966))+(((-1.0)*x5961*x5965)));
evalcond[4]=(((cj0*x5960))+((cj0*x5964))+((r01*x5966))+(((-1.0)*x5963*x5965))+(((-1.0)*r02*x5967)));
evalcond[5]=((((-1.0)*r12*x5967))+((r11*x5966))+((sj0*x5964))+((sj0*x5960))+(((-1.0)*x5962*x5965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5968=((1.0)*gconst130);
CheckValue<IkReal> x5969 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x5968))+(((-1.0)*cj0*r01*x5968))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5969.valid){
continue;
}
CheckValue<IkReal> x5970=IKPowWithIntegerCheck(IKsign((((gconst131*r21))+((gconst130*r20)))),-1);
if(!x5970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5969.value)+(((1.5707963267949)*(x5970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5971=IKsin(j4);
IkReal x5972=IKcos(j4);
IkReal x5973=(cj2*sj1);
IkReal x5974=(gconst131*r20);
IkReal x5975=(gconst131*r10);
IkReal x5976=(gconst131*r00);
IkReal x5977=(cj1*sj2);
IkReal x5978=((1.0)*x5972);
IkReal x5979=(gconst130*x5972);
IkReal x5980=((1.0)*x5971);
evalcond[0]=((((-1.0)*r22*x5978))+(((-1.0)*gconst130*r21*x5980))+((x5971*x5974)));
evalcond[1]=((((-1.0)*r02*x5978))+sj0+(((-1.0)*gconst130*r01*x5980))+((x5971*x5976)));
evalcond[2]=((((-1.0)*r12*x5978))+(((-1.0)*gconst130*r11*x5980))+(((-1.0)*cj0))+((x5971*x5975)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5979))+(((-1.0)*x5974*x5978))+(((-1.0)*r22*x5980)));
evalcond[4]=(((cj0*x5973))+((cj0*x5977))+((r01*x5979))+(((-1.0)*r02*x5980))+(((-1.0)*x5976*x5978)));
evalcond[5]=((((-1.0)*r12*x5980))+(((-1.0)*x5975*x5978))+((r11*x5979))+((sj0*x5973))+((sj0*x5977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5981=((1.0)*gconst130);
CheckValue<IkReal> x5982 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst131*r20))+(((-1.0)*cj0*r21*x5981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5982.valid){
continue;
}
CheckValue<IkReal> x5983=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r01))+(((-1.0)*r00*x5981)))),-1);
if(!x5983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5982.value)+(((1.5707963267949)*(x5983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5984=IKsin(j4);
IkReal x5985=IKcos(j4);
IkReal x5986=(cj2*sj1);
IkReal x5987=(gconst131*r20);
IkReal x5988=(gconst131*r10);
IkReal x5989=(gconst131*r00);
IkReal x5990=(cj1*sj2);
IkReal x5991=((1.0)*x5985);
IkReal x5992=(gconst130*x5985);
IkReal x5993=((1.0)*x5984);
evalcond[0]=((((-1.0)*gconst130*r21*x5993))+(((-1.0)*r22*x5991))+((x5984*x5987)));
evalcond[1]=(sj0+(((-1.0)*r02*x5991))+(((-1.0)*gconst130*r01*x5993))+((x5984*x5989)));
evalcond[2]=((((-1.0)*r12*x5991))+(((-1.0)*gconst130*r11*x5993))+(((-1.0)*cj0))+((x5984*x5988)));
evalcond[3]=(((r21*x5992))+(((-1.0)*x5987*x5991))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x5993)));
evalcond[4]=((((-1.0)*r02*x5993))+((cj0*x5990))+((cj0*x5986))+((r01*x5992))+(((-1.0)*x5989*x5991)));
evalcond[5]=((((-1.0)*r12*x5993))+((sj0*x5990))+((r11*x5992))+((sj0*x5986))+(((-1.0)*x5988*x5991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5994=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5994;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x5994);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5995=((1.0)*sj5);
IkReal x5996=((((-1.0)*r00*x5995))+(((-1.0)*cj5*r01)));
j4eval[0]=x5996;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x5995))))));
j4eval[2]=IKsign(x5996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5997=cj5*cj5;
IkReal x5998=r11*r11;
IkReal x5999=(cj5*r10);
IkReal x6000=(r11*sj5);
IkReal x6001=(((x5997*x5998))+(((-1.0)*x5997*(r10*r10)))+(((-1.0)*x5998))+(((2.0)*x5999*x6000))+(((-1.0)*(r12*r12))));
j4eval[0]=x6001;
j4eval[1]=((IKabs(r12))+(IKabs((x6000+(((-1.0)*x5999))))));
j4eval[2]=IKsign(x6001);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6002=cj5*cj5;
IkReal x6003=r11*r11;
IkReal x6004=(cj5*r10);
IkReal x6005=(r11*sj5);
CheckValue<IkReal> x6006 = IKatan2WithCheck(IkReal((x6005+(((-1.0)*x6004)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6006.valid){
continue;
}
CheckValue<IkReal> x6007=IKPowWithIntegerCheck(IKsign(((((2.0)*x6004*x6005))+((x6002*x6003))+(((-1.0)*(r12*r12)))+(((-1.0)*x6002*(r10*r10)))+(((-1.0)*x6003)))),-1);
if(!x6007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6006.value)+(((1.5707963267949)*(x6007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6008=IKsin(j4);
IkReal x6009=IKcos(j4);
IkReal x6010=(cj5*r00);
IkReal x6011=((1.0)*x6009);
IkReal x6012=(sj5*x6009);
IkReal x6013=(cj5*x6008);
IkReal x6014=((1.0)*x6008);
IkReal x6015=(sj5*x6014);
evalcond[0]=((((-1.0)*r21*x6015))+((r20*x6013))+(((-1.0)*r22*x6011)));
evalcond[1]=(((x6008*x6010))+(((-1.0)*r02*x6011))+(((-1.0)*r01*x6015)));
evalcond[2]=(((r11*x6012))+(((-1.0)*r12*x6014))+(((-1.0)*cj5*r10*x6011)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6011))+(((-1.0)*r11*x6015))+((r10*x6013)));
evalcond[4]=(((r01*x6012))+((cj2*sj1))+(((-1.0)*r02*x6014))+(((-1.0)*x6010*x6011))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj5*r20*x6011))+((r21*x6012))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6016=((1.0)*sj5);
CheckValue<IkReal> x6017=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6016))+(((-1.0)*cj5*r01)))),-1);
if(!x6017.valid){
continue;
}
CheckValue<IkReal> x6018 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x6016))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6017.value)))+(x6018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6019=IKsin(j4);
IkReal x6020=IKcos(j4);
IkReal x6021=(cj5*r00);
IkReal x6022=((1.0)*x6020);
IkReal x6023=(sj5*x6020);
IkReal x6024=(cj5*x6019);
IkReal x6025=((1.0)*x6019);
IkReal x6026=(sj5*x6025);
evalcond[0]=((((-1.0)*r22*x6022))+(((-1.0)*r21*x6026))+((r20*x6024)));
evalcond[1]=((((-1.0)*r01*x6026))+((x6019*x6021))+(((-1.0)*r02*x6022)));
evalcond[2]=((((-1.0)*cj5*r10*x6022))+((r11*x6023))+(((-1.0)*r12*x6025)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x6026))+((r10*x6024))+(((-1.0)*r12*x6022)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x6023))+(((-1.0)*x6021*x6022))+(((-1.0)*r02*x6025)));
evalcond[5]=((((-1.0)*cj5*r20*x6022))+(((-1.0)*r22*x6025))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6027=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6027.valid){
continue;
}
CheckValue<IkReal> x6028 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6027.value)))+(x6028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6029=IKsin(j4);
IkReal x6030=IKcos(j4);
IkReal x6031=(cj5*r00);
IkReal x6032=((1.0)*x6030);
IkReal x6033=(sj5*x6030);
IkReal x6034=(cj5*x6029);
IkReal x6035=((1.0)*x6029);
IkReal x6036=(sj5*x6035);
evalcond[0]=(((r20*x6034))+(((-1.0)*r22*x6032))+(((-1.0)*r21*x6036)));
evalcond[1]=(((x6029*x6031))+(((-1.0)*r01*x6036))+(((-1.0)*r02*x6032)));
evalcond[2]=(((r11*x6033))+(((-1.0)*r12*x6035))+(((-1.0)*cj5*r10*x6032)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6032))+(((-1.0)*r11*x6036))+((r10*x6034)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6031*x6032))+((cj1*sj2))+((r01*x6033))+(((-1.0)*r02*x6035)));
evalcond[5]=(((r21*x6033))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6035))+(((-1.0)*cj5*r20*x6032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6037=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6037;
j4eval[1]=IKsign(x6037);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6038=((1.0)*sj5);
IkReal x6039=((((-1.0)*cj5*r21))+(((-1.0)*r20*x6038)));
j4eval[0]=x6039;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x6038))+((cj5*r00))))));
j4eval[2]=IKsign(x6039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6040=cj5*cj5;
IkReal x6041=r11*r11;
IkReal x6042=(r11*sj5);
IkReal x6043=(cj5*r10);
IkReal x6044=((r12*r12)+x6041+(((-2.0)*x6042*x6043))+((x6040*(r10*r10)))+(((-1.0)*x6040*x6041)));
j4eval[0]=x6044;
j4eval[1]=IKsign(x6044);
j4eval[2]=((IKabs(r12))+(IKabs((x6042+(((-1.0)*x6043))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6045=cj5*cj5;
IkReal x6046=r11*r11;
IkReal x6047=(cj5*r10);
IkReal x6048=(r11*sj5);
CheckValue<IkReal> x6049 = IKatan2WithCheck(IkReal((x6048+(((-1.0)*x6047)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6049.valid){
continue;
}
CheckValue<IkReal> x6050=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6047*x6048))+(r12*r12)+(((-1.0)*x6045*x6046))+x6046+((x6045*(r10*r10))))),-1);
if(!x6050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6049.value)+(((1.5707963267949)*(x6050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6051=IKsin(j4);
IkReal x6052=IKcos(j4);
IkReal x6053=(cj5*r00);
IkReal x6054=((1.0)*cj1);
IkReal x6055=((1.0)*x6052);
IkReal x6056=(sj5*x6052);
IkReal x6057=(cj5*x6051);
IkReal x6058=((1.0)*x6051);
IkReal x6059=(sj5*x6058);
evalcond[0]=((((-1.0)*r21*x6059))+(((-1.0)*r22*x6055))+((r20*x6057)));
evalcond[1]=((((-1.0)*r02*x6055))+(((-1.0)*r01*x6059))+((x6051*x6053)));
evalcond[2]=((((-1.0)*cj5*r10*x6055))+(((-1.0)*r12*x6058))+((r11*x6056)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6055))+(((-1.0)*r11*x6059))+((r10*x6057)));
evalcond[4]=((((-1.0)*cj2*x6054))+(((-1.0)*cj5*r20*x6055))+((sj1*sj2))+(((-1.0)*r22*x6058))+((r21*x6056)));
evalcond[5]=((((-1.0)*x6053*x6055))+((r01*x6056))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x6058))+(((-1.0)*sj2*x6054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6060=((1.0)*sj5);
CheckValue<IkReal> x6061=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6060))+(((-1.0)*cj5*r21)))),-1);
if(!x6061.valid){
continue;
}
CheckValue<IkReal> x6062 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x6060))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6061.value)))+(x6062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6063=IKsin(j4);
IkReal x6064=IKcos(j4);
IkReal x6065=(cj5*r00);
IkReal x6066=((1.0)*cj1);
IkReal x6067=((1.0)*x6064);
IkReal x6068=(sj5*x6064);
IkReal x6069=(cj5*x6063);
IkReal x6070=((1.0)*x6063);
IkReal x6071=(sj5*x6070);
evalcond[0]=((((-1.0)*r22*x6067))+(((-1.0)*r21*x6071))+((r20*x6069)));
evalcond[1]=((((-1.0)*r01*x6071))+((x6063*x6065))+(((-1.0)*r02*x6067)));
evalcond[2]=((((-1.0)*cj5*r10*x6067))+((r11*x6068))+(((-1.0)*r12*x6070)));
evalcond[3]=((1.0)+((r10*x6069))+(((-1.0)*r11*x6071))+(((-1.0)*r12*x6067)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj5*r20*x6067))+((r21*x6068))+(((-1.0)*r22*x6070))+(((-1.0)*cj2*x6066)));
evalcond[5]=((((-1.0)*r02*x6070))+(((-1.0)*cj2*sj1))+((r01*x6068))+(((-1.0)*sj2*x6066))+(((-1.0)*x6065*x6067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6072=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6072.valid){
continue;
}
CheckValue<IkReal> x6073 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6072.value)))+(x6073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6074=IKsin(j4);
IkReal x6075=IKcos(j4);
IkReal x6076=(cj5*r00);
IkReal x6077=((1.0)*cj1);
IkReal x6078=((1.0)*x6075);
IkReal x6079=(sj5*x6075);
IkReal x6080=(cj5*x6074);
IkReal x6081=((1.0)*x6074);
IkReal x6082=(sj5*x6081);
evalcond[0]=((((-1.0)*r21*x6082))+(((-1.0)*r22*x6078))+((r20*x6080)));
evalcond[1]=((((-1.0)*r02*x6078))+((x6074*x6076))+(((-1.0)*r01*x6082)));
evalcond[2]=(((r11*x6079))+(((-1.0)*r12*x6081))+(((-1.0)*cj5*r10*x6078)));
evalcond[3]=((1.0)+((r10*x6080))+(((-1.0)*r12*x6078))+(((-1.0)*r11*x6082)));
evalcond[4]=((((-1.0)*cj5*r20*x6078))+(((-1.0)*r22*x6081))+(((-1.0)*cj2*x6077))+((sj1*sj2))+((r21*x6079)));
evalcond[5]=(((r01*x6079))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x6081))+(((-1.0)*x6076*x6078))+(((-1.0)*sj2*x6077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6083=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6083);
rxp0_2=(py*r00);
rxp1_0=(r21*x6083);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6084=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6084);
rxp0_2=(py*r00);
rxp1_0=(r21*x6084);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6085=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6085);
rxp0_2=(py*r00);
rxp1_0=(r21*x6085);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6088=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x6088.valid){
continue;
}
IkReal x6086=x6088.value;
IkReal x6087=((1.0)*cj0*x6086);
cj4array[0]=((((-1.0)*cj1*sj2*x6087))+(((-1.0)*cj2*sj1*x6087)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6089=IKsin(j4);
IkReal x6090=IKcos(j4);
IkReal x6091=(cj5*r20);
IkReal x6092=((1.0)*x6090);
IkReal x6093=((1.0)*sj5*x6089);
evalcond[0]=((-1.0)*r12*x6089);
evalcond[1]=((((-1.0)*r12*x6092))+(((-1.0)*cj0)));
evalcond[2]=(((x6089*x6091))+(((-1.0)*r21*x6093)));
evalcond[3]=(((cj5*r00*x6089))+(((-1.0)*r01*x6093)));
evalcond[4]=((((-1.0)*x6091*x6092))+((r21*sj5*x6090))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6095=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6095.valid){
continue;
}
IkReal x6094=x6095.value;
cj4array[0]=((((-1.0)*sj1*sj2*x6094))+((cj1*cj2*x6094)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6096=IKsin(j4);
IkReal x6097=IKcos(j4);
IkReal x6098=(cj5*r00);
IkReal x6099=(r01*sj5);
IkReal x6100=((1.0)*x6097);
IkReal x6101=((1.0)*x6096);
evalcond[0]=((-1.0)*r12*x6096);
evalcond[1]=((((-1.0)*r12*x6100))+(((-1.0)*cj0)));
evalcond[2]=(((cj5*r20*x6096))+(((-1.0)*r21*sj5*x6101)));
evalcond[3]=(((x6096*x6098))+(((-1.0)*x6099*x6101)));
evalcond[4]=((((-1.0)*x6098*x6100))+((x6097*x6099))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6102=IKPowWithIntegerCheck(r12,-1);
if(!x6102.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x6102.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6103=IKsin(j4);
IkReal x6104=IKcos(j4);
IkReal x6105=(sj5*x6104);
IkReal x6106=(cj5*x6103);
IkReal x6107=((1.0)*sj5*x6103);
IkReal x6108=((1.0)*cj5*x6104);
evalcond[0]=((-1.0)*r12*x6103);
evalcond[1]=(((r20*x6106))+(((-1.0)*r21*x6107)));
evalcond[2]=((((-1.0)*r01*x6107))+((r00*x6106)));
evalcond[3]=(((r21*x6105))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x6108)));
evalcond[4]=((((-1.0)*r00*x6108))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((r01*x6105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6109=((1.0)*sj5);
CheckValue<IkReal> x6110 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x6109))+(((-1.0)*r11*sj0*x6109)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6110.valid){
continue;
}
CheckValue<IkReal> x6111=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6110.value)+(((1.5707963267949)*(x6111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6112=IKsin(j4);
IkReal x6113=IKcos(j4);
IkReal x6114=(cj5*r00);
IkReal x6115=(cj2*sj1);
IkReal x6116=(cj1*sj2);
IkReal x6117=((1.0)*x6113);
IkReal x6118=(sj5*x6113);
IkReal x6119=(cj5*x6112);
IkReal x6120=((1.0)*x6112);
IkReal x6121=(sj5*x6120);
evalcond[0]=((((-1.0)*r22*x6117))+((r20*x6119))+(((-1.0)*r21*x6121)));
evalcond[1]=(sj0+((x6112*x6114))+(((-1.0)*r02*x6117))+(((-1.0)*r01*x6121)));
evalcond[2]=((((-1.0)*r12*x6117))+(((-1.0)*r11*x6121))+(((-1.0)*cj0))+((r10*x6119)));
evalcond[3]=((((-1.0)*r22*x6120))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x6117))+((r21*x6118)));
evalcond[4]=((((-1.0)*r02*x6120))+(((-1.0)*x6114*x6117))+((r01*x6118))+((cj0*x6116))+((cj0*x6115)));
evalcond[5]=((((-1.0)*cj5*r10*x6117))+(((-1.0)*r12*x6120))+((r11*x6118))+((sj0*x6116))+((sj0*x6115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6122=((1.0)*sj5);
CheckValue<IkReal> x6123=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6122))+(((-1.0)*cj5*r01)))),-1);
if(!x6123.valid){
continue;
}
CheckValue<IkReal> x6124 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6122))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6123.value)))+(x6124.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6125=IKsin(j4);
IkReal x6126=IKcos(j4);
IkReal x6127=(cj5*r00);
IkReal x6128=(cj2*sj1);
IkReal x6129=(cj1*sj2);
IkReal x6130=((1.0)*x6126);
IkReal x6131=(sj5*x6126);
IkReal x6132=(cj5*x6125);
IkReal x6133=((1.0)*x6125);
IkReal x6134=(sj5*x6133);
evalcond[0]=((((-1.0)*r22*x6130))+((r20*x6132))+(((-1.0)*r21*x6134)));
evalcond[1]=(((x6125*x6127))+sj0+(((-1.0)*r01*x6134))+(((-1.0)*r02*x6130)));
evalcond[2]=(((r10*x6132))+(((-1.0)*r11*x6134))+(((-1.0)*r12*x6130))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6131))+(((-1.0)*cj5*r20*x6130))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6133)));
evalcond[4]=(((cj0*x6128))+((cj0*x6129))+(((-1.0)*x6127*x6130))+((r01*x6131))+(((-1.0)*r02*x6133)));
evalcond[5]=(((r11*x6131))+((sj0*x6128))+((sj0*x6129))+(((-1.0)*cj5*r10*x6130))+(((-1.0)*r12*x6133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6135=((1.0)*sj5);
CheckValue<IkReal> x6136=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6135)))),-1);
if(!x6136.valid){
continue;
}
CheckValue<IkReal> x6137 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6135))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6136.value)))+(x6137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6138=IKsin(j4);
IkReal x6139=IKcos(j4);
IkReal x6140=(cj5*r00);
IkReal x6141=(cj2*sj1);
IkReal x6142=(cj1*sj2);
IkReal x6143=((1.0)*x6139);
IkReal x6144=(sj5*x6139);
IkReal x6145=(cj5*x6138);
IkReal x6146=((1.0)*x6138);
IkReal x6147=(sj5*x6146);
evalcond[0]=((((-1.0)*r21*x6147))+(((-1.0)*r22*x6143))+((r20*x6145)));
evalcond[1]=((((-1.0)*r01*x6147))+sj0+(((-1.0)*r02*x6143))+((x6138*x6140)));
evalcond[2]=(((r10*x6145))+(((-1.0)*r11*x6147))+(((-1.0)*r12*x6143))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6144))+(((-1.0)*r22*x6146))+(((-1.0)*cj5*r20*x6143)));
evalcond[4]=((((-1.0)*r02*x6146))+((r01*x6144))+(((-1.0)*x6140*x6143))+((cj0*x6142))+((cj0*x6141)));
evalcond[5]=(((sj0*x6141))+((sj0*x6142))+((r11*x6144))+(((-1.0)*cj5*r10*x6143))+(((-1.0)*r12*x6146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6148=cj5*cj5;
IkReal x6149=r21*r21;
IkReal x6150=(sj1*sj2);
IkReal x6151=(r21*sj5);
IkReal x6152=(cj1*cj2);
IkReal x6153=(cj5*r20);
CheckValue<IkReal> x6154=IKPowWithIntegerCheck(IKsign((((x6148*(r20*r20)))+(r22*r22)+x6149+(((-2.0)*x6151*x6153))+(((-1.0)*x6148*x6149)))),-1);
if(!x6154.valid){
continue;
}
CheckValue<IkReal> x6155 = IKatan2WithCheck(IkReal((((r22*x6150))+(((-1.0)*r22*x6152)))),IkReal(((((-1.0)*x6152*x6153))+(((-1.0)*x6150*x6151))+((x6151*x6152))+((x6150*x6153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6154.value)))+(x6155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6156=IKsin(j4);
IkReal x6157=IKcos(j4);
IkReal x6158=(cj5*r20);
IkReal x6159=(r21*sj5);
IkReal x6160=((1.0)*x6157);
IkReal x6161=((1.0)*x6156);
evalcond[0]=(((x6156*x6158))+(((-1.0)*x6159*x6161))+(((-1.0)*r22*x6160)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x6157*x6159))+(((-1.0)*x6158*x6160))+(((-1.0)*r22*x6161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6162=(cj5*sj4);
IkReal x6163=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x6162))+((r01*x6163))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6162))+(((-1.0)*r11*x6163))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x6162))+((r01*x6163))+((cj4*r02))))+IKsqr((((r10*x6162))+(((-1.0)*r11*x6163))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x6162))+((r01*x6163))+((cj4*r02))), (((r10*x6162))+(((-1.0)*r11*x6163))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6164=IKcos(j0);
IkReal x6165=IKsin(j0);
IkReal x6166=((0.353)*cj2);
IkReal x6167=(cj5*r00);
IkReal x6168=(cj5*r01);
IkReal x6169=((1.0)*sj4);
IkReal x6170=(r01*sj5);
IkReal x6171=((1.0)*cj4);
IkReal x6172=(cj5*r10);
IkReal x6173=((0.117)*sj5);
IkReal x6174=(cj5*r11);
IkReal x6175=(sj1*sj2);
IkReal x6176=(r11*sj5);
IkReal x6177=((1.0)*cj2);
IkReal x6178=(cj2*sj1);
IkReal x6179=(cj1*x6164);
IkReal x6180=(cj1*x6165);
evalcond[0]=(x6165+((sj4*x6167))+(((-1.0)*r02*x6171))+(((-1.0)*x6169*x6170)));
evalcond[1]=((((-1.0)*r12*x6171))+(((-1.0)*x6164))+((sj4*x6172))+(((-1.0)*x6169*x6176)));
evalcond[2]=(((r00*sj5))+x6168+(((-1.0)*x6177*x6179))+((x6164*x6175)));
evalcond[3]=(((r10*sj5))+x6174+((x6165*x6175))+(((-1.0)*x6177*x6180)));
evalcond[4]=(((sj2*x6179))+(((-1.0)*x6167*x6171))+((x6164*x6178))+(((-1.0)*r02*x6169))+((cj4*x6170)));
evalcond[5]=((((-1.0)*r12*x6169))+((x6165*x6178))+((sj2*x6180))+(((-1.0)*x6171*x6172))+((cj4*x6176)));
evalcond[6]=((((-0.43)*x6179))+(((-1.0)*x6166*x6179))+(((0.139)*x6165))+(((0.353)*x6164*x6175))+(((-1.0)*px))+((r00*x6173))+(((0.117)*x6168)));
evalcond[7]=(((r10*x6173))+(((-0.139)*x6164))+(((0.353)*x6165*x6175))+(((-1.0)*py))+(((-1.0)*x6166*x6180))+(((0.117)*x6174))+(((-0.43)*x6180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6181=((1.0)*cj5);
IkReal x6182=((1.0)*sj5);
CheckValue<IkReal> x6183 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6181))+(((-1.0)*r10*x6182)))),IkReal(((((-1.0)*r00*x6182))+(((-1.0)*r01*x6181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6183.valid){
continue;
}
CheckValue<IkReal> x6184=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x6184.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6183.value)+(((1.5707963267949)*(x6184.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6185=IKcos(j0);
IkReal x6186=IKsin(j0);
IkReal x6187=((0.353)*cj2);
IkReal x6188=(cj5*r01);
IkReal x6189=((0.117)*sj5);
IkReal x6190=(cj5*r11);
IkReal x6191=(sj1*sj2);
IkReal x6192=((1.0)*cj2);
IkReal x6193=(cj1*x6185);
IkReal x6194=(cj1*x6186);
evalcond[0]=(((r00*sj5))+(((-1.0)*x6192*x6193))+x6188+((x6185*x6191)));
evalcond[1]=(((r10*sj5))+(((-1.0)*x6192*x6194))+x6190+((x6186*x6191)));
evalcond[2]=(((r00*x6189))+(((0.353)*x6185*x6191))+(((-0.43)*x6193))+(((0.117)*x6188))+(((-1.0)*px))+(((0.139)*x6186))+(((-1.0)*x6187*x6193)));
evalcond[3]=((((-0.43)*x6194))+(((-1.0)*py))+(((0.353)*x6186*x6191))+((r10*x6189))+(((0.117)*x6190))+(((-1.0)*x6187*x6194))+(((-0.139)*x6185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6195=((1.0)*sj5);
IkReal x6196=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6195)));
j4eval[0]=x6196;
j4eval[1]=IKsign(x6196);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6195))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6197=((1.0)*sj5);
IkReal x6198=((((-1.0)*r00*x6197))+(((-1.0)*cj5*r01)));
j4eval[0]=x6198;
j4eval[1]=IKsign(x6198);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x6197))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6199=((1.0)*sj5);
IkReal x6200=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6200;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x6199))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x6199))))));
j4eval[2]=IKsign(x6200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6202 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6202)==0){
continue;
}
IkReal x6201=pow(x6202,-0.5);
CheckValue<IkReal> x6203 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6203.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6203.value));
IkReal gconst115=((-1.0)*r21*x6201);
IkReal gconst116=(r20*x6201);
CheckValue<IkReal> x6204 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6204.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6204.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6207 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6207.valid){
continue;
}
IkReal x6205=((-1.0)*(x6207.value));
IkReal x6206=x6201;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x6205;
IkReal gconst114=x6205;
IkReal gconst115=((-1.0)*r21*x6206);
IkReal gconst116=(r20*x6206);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6210 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6210.valid){
continue;
}
IkReal x6208=((-1.0)*(x6210.value));
IkReal x6209=x6201;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x6208;
IkReal gconst114=x6208;
IkReal gconst115=((-1.0)*r21*x6209);
IkReal gconst116=(r20*x6209);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x6213 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6213.valid){
continue;
}
IkReal x6211=((-1.0)*(x6213.value));
IkReal x6212=x6201;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x6211;
IkReal gconst114=x6211;
IkReal gconst115=((-1.0)*r21*x6212);
IkReal gconst116=(r20*x6212);
IkReal x6214=r22*r22;
CheckValue<IkReal> x6217=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6214))),-1);
if(!x6217.valid){
continue;
}
IkReal x6215=x6217.value;
IkReal x6216=(((x6215*(r21*r21*r21*r21)))+x6214+(((2.0)*x6215*(r20*r20)*(r21*r21)))+((x6215*(r20*r20*r20*r20))));
j4eval[0]=x6216;
j4eval[1]=IKsign(x6216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6218=(sj1*sj2);
IkReal x6219=(gconst115*r21);
IkReal x6220=(cj1*cj2);
IkReal x6221=(gconst116*r20);
CheckValue<IkReal> x6222 = IKatan2WithCheck(IkReal((((r22*x6218))+(((-1.0)*r22*x6220)))),IkReal(((((-1.0)*x6218*x6219))+((x6219*x6220))+((x6218*x6221))+(((-1.0)*x6220*x6221)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6222.valid){
continue;
}
CheckValue<IkReal> x6223=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x6219*x6221))+(x6221*x6221)+(x6219*x6219))),-1);
if(!x6223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6222.value)+(((1.5707963267949)*(x6223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6224=IKsin(j4);
IkReal x6225=IKcos(j4);
IkReal x6226=(cj2*sj1);
IkReal x6227=(cj1*sj2);
IkReal x6228=((1.0)*x6225);
IkReal x6229=(gconst116*x6224);
IkReal x6230=(gconst115*x6225);
IkReal x6231=((1.0)*x6224);
evalcond[0]=(((r20*x6229))+(((-1.0)*r22*x6228))+(((-1.0)*gconst115*r21*x6231)));
evalcond[1]=(sj0+(((-1.0)*r02*x6228))+((r00*x6229))+(((-1.0)*gconst115*r01*x6231)));
evalcond[2]=((((-1.0)*r12*x6228))+((r10*x6229))+(((-1.0)*gconst115*r11*x6231))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6230))+(((-1.0)*gconst116*r20*x6228))+(((-1.0)*r22*x6231)));
evalcond[4]=((((-1.0)*gconst116*r00*x6228))+((r01*x6230))+((cj0*x6226))+((cj0*x6227))+(((-1.0)*r02*x6231)));
evalcond[5]=((((-1.0)*gconst116*r10*x6228))+(((-1.0)*r12*x6231))+((sj0*x6226))+((sj0*x6227))+((r11*x6230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6232=((1.0)*gconst115);
CheckValue<IkReal> x6233 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6232))+((cj0*gconst116*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6233.valid){
continue;
}
CheckValue<IkReal> x6234=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r01))+(((-1.0)*r00*x6232)))),-1);
if(!x6234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6233.value)+(((1.5707963267949)*(x6234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6235=IKsin(j4);
IkReal x6236=IKcos(j4);
IkReal x6237=(cj2*sj1);
IkReal x6238=(cj1*sj2);
IkReal x6239=((1.0)*x6236);
IkReal x6240=(gconst116*x6235);
IkReal x6241=(gconst115*x6236);
IkReal x6242=((1.0)*x6235);
evalcond[0]=(((r20*x6240))+(((-1.0)*r22*x6239))+(((-1.0)*gconst115*r21*x6242)));
evalcond[1]=((((-1.0)*gconst115*r01*x6242))+sj0+(((-1.0)*r02*x6239))+((r00*x6240)));
evalcond[2]=((((-1.0)*r12*x6239))+((r10*x6240))+(((-1.0)*gconst115*r11*x6242))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6241))+(((-1.0)*gconst116*r20*x6239))+(((-1.0)*r22*x6242)));
evalcond[4]=((((-1.0)*r02*x6242))+(((-1.0)*gconst116*r00*x6239))+((cj0*x6238))+((cj0*x6237))+((r01*x6241)));
evalcond[5]=((((-1.0)*gconst116*r10*x6239))+((r11*x6241))+((sj0*x6238))+((sj0*x6237))+(((-1.0)*r12*x6242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6243=((1.0)*gconst115);
CheckValue<IkReal> x6244=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r11))+(((-1.0)*r10*x6243)))),-1);
if(!x6244.valid){
continue;
}
CheckValue<IkReal> x6245 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6243))+((gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6244.value)))+(x6245.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6246=IKsin(j4);
IkReal x6247=IKcos(j4);
IkReal x6248=(cj2*sj1);
IkReal x6249=(cj1*sj2);
IkReal x6250=((1.0)*x6247);
IkReal x6251=(gconst116*x6246);
IkReal x6252=(gconst115*x6247);
IkReal x6253=((1.0)*x6246);
evalcond[0]=((((-1.0)*gconst115*r21*x6253))+(((-1.0)*r22*x6250))+((r20*x6251)));
evalcond[1]=(((r00*x6251))+sj0+(((-1.0)*r02*x6250))+(((-1.0)*gconst115*r01*x6253)));
evalcond[2]=((((-1.0)*gconst115*r11*x6253))+((r10*x6251))+(((-1.0)*r12*x6250))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6252))+(((-1.0)*r22*x6253))+(((-1.0)*gconst116*r20*x6250)));
evalcond[4]=(((r01*x6252))+(((-1.0)*r02*x6253))+(((-1.0)*gconst116*r00*x6250))+((cj0*x6249))+((cj0*x6248)));
evalcond[5]=(((sj0*x6249))+((sj0*x6248))+(((-1.0)*r12*x6253))+((r11*x6252))+(((-1.0)*gconst116*r10*x6250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6255 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6255)==0){
continue;
}
IkReal x6254=pow(x6255,-0.5);
CheckValue<IkReal> x6256 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6256.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6256.value))));
IkReal gconst118=((1.0)*r21*x6254);
IkReal gconst119=((-1.0)*r20*x6254);
CheckValue<IkReal> x6257 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6257.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6257.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6260 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6260.valid){
continue;
}
IkReal x6258=((1.0)*(x6260.value));
IkReal x6259=x6254;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6258)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6258)));
IkReal gconst118=((1.0)*r21*x6259);
IkReal gconst119=((-1.0)*r20*x6259);
IkReal x6261=r22*r22;
IkReal x6262=((1.0)*x6261);
CheckValue<IkReal> x6266=IKPowWithIntegerCheck(((-1.0)+x6261),-1);
if(!x6266.valid){
continue;
}
IkReal x6263=x6266.value;
if((((1.0)+(((-1.0)*x6262)))) < -0.00001)
continue;
IkReal x6264=IKsqrt(((1.0)+(((-1.0)*x6262))));
IkReal x6265=(sj0*x6263*x6264);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6265+(((-1.0)*x6262*x6265))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6269 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6269.valid){
continue;
}
IkReal x6267=((1.0)*(x6269.value));
IkReal x6268=x6254;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6267)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6267)));
IkReal gconst118=((1.0)*r21*x6268);
IkReal gconst119=((-1.0)*r20*x6268);
IkReal x6270=r22*r22;
IkReal x6271=((1.0)*x6270);
CheckValue<IkReal> x6275=IKPowWithIntegerCheck(((-1.0)+x6270),-1);
if(!x6275.valid){
continue;
}
IkReal x6272=x6275.value;
if((((1.0)+(((-1.0)*x6271)))) < -0.00001)
continue;
IkReal x6273=IKsqrt(((1.0)+(((-1.0)*x6271))));
IkReal x6274=(cj0*x6272*x6273);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x6274+(((-1.0)*x6271*x6274))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6278 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6278.valid){
continue;
}
IkReal x6276=((1.0)*(x6278.value));
IkReal x6277=x6254;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6276)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6276)));
IkReal gconst118=((1.0)*r21*x6277);
IkReal gconst119=((-1.0)*r20*x6277);
IkReal x6279=r22*r22;
IkReal x6280=(cj0*r02);
IkReal x6281=(r12*sj0);
CheckValue<IkReal> x6285=IKPowWithIntegerCheck(((-1.0)+x6279),-1);
if(!x6285.valid){
continue;
}
IkReal x6282=x6285.value;
if((((1.0)+(((-1.0)*x6279)))) < -0.00001)
continue;
IkReal x6283=IKsqrt(((1.0)+(((-1.0)*x6279))));
IkReal x6284=((1.0)*r22*x6282*x6283);
j4eval[0]=0;
j4eval[1]=((IKabs((x6280+x6281)))+(IKabs(((((-1.0)*x6280*x6284))+(((-1.0)*x6281*x6284))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6286=((1.0)*gconst118);
CheckValue<IkReal> x6287=IKPowWithIntegerCheck(IKsign((((gconst119*r21))+((gconst118*r20)))),-1);
if(!x6287.valid){
continue;
}
CheckValue<IkReal> x6288 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x6286))+(((-1.0)*r11*sj0*x6286))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6287.value)))+(x6288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6289=IKsin(j4);
IkReal x6290=IKcos(j4);
IkReal x6291=(cj2*sj1);
IkReal x6292=(gconst118*r01);
IkReal x6293=(gconst119*r10);
IkReal x6294=(gconst119*r20);
IkReal x6295=(gconst118*r21);
IkReal x6296=(gconst119*r00);
IkReal x6297=(gconst118*r11);
IkReal x6298=(cj1*sj2);
IkReal x6299=((1.0)*x6290);
IkReal x6300=((1.0)*x6289);
evalcond[0]=((((-1.0)*r22*x6299))+(((-1.0)*x6295*x6300))+((x6289*x6294)));
evalcond[1]=(sj0+(((-1.0)*r02*x6299))+(((-1.0)*x6292*x6300))+((x6289*x6296)));
evalcond[2]=((((-1.0)*r12*x6299))+(((-1.0)*x6297*x6300))+((x6289*x6293))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x6294*x6299))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6300))+((x6290*x6295)));
evalcond[4]=((((-1.0)*x6296*x6299))+(((-1.0)*r02*x6300))+((cj0*x6298))+((cj0*x6291))+((x6290*x6292)));
evalcond[5]=((((-1.0)*r12*x6300))+(((-1.0)*x6293*x6299))+((sj0*x6291))+((sj0*x6298))+((x6290*x6297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6301=((1.0)*gconst118);
CheckValue<IkReal> x6302=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r01))+(((-1.0)*r00*x6301)))),-1);
if(!x6302.valid){
continue;
}
CheckValue<IkReal> x6303 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6301))+((cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6302.value)))+(x6303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6304=IKsin(j4);
IkReal x6305=IKcos(j4);
IkReal x6306=(cj2*sj1);
IkReal x6307=(gconst118*r01);
IkReal x6308=(gconst119*r10);
IkReal x6309=(gconst119*r20);
IkReal x6310=(gconst118*r21);
IkReal x6311=(gconst119*r00);
IkReal x6312=(gconst118*r11);
IkReal x6313=(cj1*sj2);
IkReal x6314=((1.0)*x6305);
IkReal x6315=((1.0)*x6304);
evalcond[0]=((((-1.0)*r22*x6314))+(((-1.0)*x6310*x6315))+((x6304*x6309)));
evalcond[1]=(sj0+(((-1.0)*r02*x6314))+(((-1.0)*x6307*x6315))+((x6304*x6311)));
evalcond[2]=((((-1.0)*x6312*x6315))+(((-1.0)*r12*x6314))+((x6304*x6308))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x6315))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6309*x6314))+((x6305*x6310)));
evalcond[4]=((((-1.0)*x6311*x6314))+(((-1.0)*r02*x6315))+((cj0*x6306))+((cj0*x6313))+((x6305*x6307)));
evalcond[5]=((((-1.0)*r12*x6315))+(((-1.0)*x6308*x6314))+((x6305*x6312))+((sj0*x6306))+((sj0*x6313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6316=((1.0)*gconst118);
CheckValue<IkReal> x6317 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6316))+((gconst119*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6317.valid){
continue;
}
CheckValue<IkReal> x6318=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6316))+(((-1.0)*gconst119*r11)))),-1);
if(!x6318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6317.value)+(((1.5707963267949)*(x6318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6319=IKsin(j4);
IkReal x6320=IKcos(j4);
IkReal x6321=(cj2*sj1);
IkReal x6322=(gconst118*r01);
IkReal x6323=(gconst119*r10);
IkReal x6324=(gconst119*r20);
IkReal x6325=(gconst118*r21);
IkReal x6326=(gconst119*r00);
IkReal x6327=(gconst118*r11);
IkReal x6328=(cj1*sj2);
IkReal x6329=((1.0)*x6320);
IkReal x6330=((1.0)*x6319);
evalcond[0]=((((-1.0)*x6325*x6330))+((x6319*x6324))+(((-1.0)*r22*x6329)));
evalcond[1]=(sj0+((x6319*x6326))+(((-1.0)*r02*x6329))+(((-1.0)*x6322*x6330)));
evalcond[2]=((((-1.0)*x6327*x6330))+((x6319*x6323))+(((-1.0)*r12*x6329))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6330))+((x6320*x6325))+(((-1.0)*x6324*x6329)));
evalcond[4]=((((-1.0)*x6326*x6329))+((cj0*x6328))+((cj0*x6321))+(((-1.0)*r02*x6330))+((x6320*x6322)));
evalcond[5]=((((-1.0)*r12*x6330))+((sj0*x6321))+((sj0*x6328))+((x6320*x6327))+(((-1.0)*x6323*x6329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6331=((-1.0)*r00);
IkReal x6333 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6333)==0){
continue;
}
IkReal x6332=pow(x6333,-0.5);
CheckValue<IkReal> x6334 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6331),IKFAST_ATAN2_MAGTHRESH);
if(!x6334.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6334.value));
IkReal gconst121=(r01*x6332);
IkReal gconst122=(x6331*x6332);
CheckValue<IkReal> x6335 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6335.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6335.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6336=((-1.0)*r00);
IkReal x6337=x6332;
CheckValue<IkReal> x6339 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6336),IKFAST_ATAN2_MAGTHRESH);
if(!x6339.valid){
continue;
}
IkReal x6338=((-1.0)*(x6339.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x6338;
IkReal gconst120=x6338;
IkReal gconst121=(r01*x6337);
IkReal gconst122=(x6336*x6337);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6340=((1.0)*gconst121);
CheckValue<IkReal> x6341=IKPowWithIntegerCheck(IKsign((((gconst122*r21))+((gconst121*r20)))),-1);
if(!x6341.valid){
continue;
}
CheckValue<IkReal> x6342 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*r11*sj0*x6340))+(((-1.0)*cj0*r01*x6340))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6341.value)))+(x6342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6343=IKsin(j4);
IkReal x6344=IKcos(j4);
IkReal x6345=(gconst121*r11);
IkReal x6346=(gconst122*r00);
IkReal x6347=(cj2*sj1);
IkReal x6348=(gconst121*r01);
IkReal x6349=(gconst121*r21);
IkReal x6350=(cj1*sj2);
IkReal x6351=((1.0)*x6344);
IkReal x6352=(gconst122*x6343);
IkReal x6353=((1.0)*x6343);
evalcond[0]=((((-1.0)*x6349*x6353))+((r20*x6352))+(((-1.0)*r22*x6351)));
evalcond[1]=(sj0+(((-1.0)*r02*x6351))+(((-1.0)*x6348*x6353))+((x6343*x6346)));
evalcond[2]=(((r10*x6352))+(((-1.0)*x6345*x6353))+(((-1.0)*r12*x6351))+(((-1.0)*cj0)));
evalcond[3]=(((x6344*x6349))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6353))+(((-1.0)*gconst122*r20*x6351)));
evalcond[4]=(((x6344*x6348))+((cj0*x6347))+(((-1.0)*r02*x6353))+((cj0*x6350))+(((-1.0)*x6346*x6351)));
evalcond[5]=(((x6344*x6345))+((sj0*x6347))+(((-1.0)*gconst122*r10*x6351))+(((-1.0)*r12*x6353))+((sj0*x6350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6354=((1.0)*gconst121);
CheckValue<IkReal> x6355 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst122*r20*sj0))+(((-1.0)*r21*sj0*x6354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6355.valid){
continue;
}
CheckValue<IkReal> x6356=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6354))+(((-1.0)*gconst122*r11)))),-1);
if(!x6356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6355.value)+(((1.5707963267949)*(x6356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6357=IKsin(j4);
IkReal x6358=IKcos(j4);
IkReal x6359=(gconst121*r11);
IkReal x6360=(gconst122*r00);
IkReal x6361=(cj2*sj1);
IkReal x6362=(gconst121*r01);
IkReal x6363=(gconst121*r21);
IkReal x6364=(cj1*sj2);
IkReal x6365=((1.0)*x6358);
IkReal x6366=(gconst122*x6357);
IkReal x6367=((1.0)*x6357);
evalcond[0]=(((r20*x6366))+(((-1.0)*x6363*x6367))+(((-1.0)*r22*x6365)));
evalcond[1]=((((-1.0)*x6362*x6367))+sj0+(((-1.0)*r02*x6365))+((x6357*x6360)));
evalcond[2]=((((-1.0)*x6359*x6367))+(((-1.0)*r12*x6365))+(((-1.0)*cj0))+((r10*x6366)));
evalcond[3]=(((x6358*x6363))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6367))+(((-1.0)*gconst122*r20*x6365)));
evalcond[4]=(((x6358*x6362))+(((-1.0)*r02*x6367))+(((-1.0)*x6360*x6365))+((cj0*x6361))+((cj0*x6364)));
evalcond[5]=(((x6358*x6359))+((sj0*x6364))+((sj0*x6361))+(((-1.0)*r12*x6367))+(((-1.0)*gconst122*r10*x6365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6368=((-1.0)*r01);
IkReal x6370 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6370)==0){
continue;
}
IkReal x6369=pow(x6370,-0.5);
CheckValue<IkReal> x6371 = IKatan2WithCheck(IkReal(x6368),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6371.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6371.value))));
IkReal gconst124=(x6368*x6369);
IkReal gconst125=((1.0)*r00*x6369);
CheckValue<IkReal> x6372 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6372.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6372.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6373=((-1.0)*r01);
CheckValue<IkReal> x6376 = IKatan2WithCheck(IkReal(x6373),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6376.valid){
continue;
}
IkReal x6374=((1.0)*(x6376.value));
IkReal x6375=x6369;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6374)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6374)));
IkReal gconst124=(x6373*x6375);
IkReal gconst125=((1.0)*r00*x6375);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x6377=((-1.0)*r01);
CheckValue<IkReal> x6380 = IKatan2WithCheck(IkReal(x6377),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6380.valid){
continue;
}
IkReal x6378=((1.0)*(x6380.value));
IkReal x6379=x6369;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6378)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6378)));
IkReal gconst124=(x6377*x6379);
IkReal gconst125=((1.0)*r00*x6379);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6381=((-1.0)*r01);
CheckValue<IkReal> x6384 = IKatan2WithCheck(IkReal(x6381),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6384.valid){
continue;
}
IkReal x6382=((1.0)*(x6384.value));
IkReal x6383=x6369;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6382)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6382)));
IkReal gconst124=(x6381*x6383);
IkReal gconst125=((1.0)*r00*x6383);
IkReal x6385=r02*r02;
IkReal x6386=(r12*sj0);
IkReal x6387=x6369;
IkReal x6388=(cj0*x6387);
j4eval[0]=((IKabs((x6386+((cj0*r02)))))+(IKabs((((r02*x6386*x6387))+(((-1.0)*x6388))+((x6385*x6388))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6389=((1.0)*gconst124);
CheckValue<IkReal> x6390 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*cj0*r01*x6389))+(((-1.0)*r11*sj0*x6389))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6390.valid){
continue;
}
CheckValue<IkReal> x6391=IKPowWithIntegerCheck(IKsign((((gconst124*r20))+((gconst125*r21)))),-1);
if(!x6391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6390.value)+(((1.5707963267949)*(x6391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6392=IKsin(j4);
IkReal x6393=IKcos(j4);
IkReal x6394=(cj2*sj1);
IkReal x6395=(cj1*sj2);
IkReal x6396=((1.0)*x6393);
IkReal x6397=(gconst125*x6392);
IkReal x6398=(gconst124*x6393);
IkReal x6399=((1.0)*x6392);
evalcond[0]=((((-1.0)*gconst124*r21*x6399))+((r20*x6397))+(((-1.0)*r22*x6396)));
evalcond[1]=(sj0+(((-1.0)*gconst124*r01*x6399))+((r00*x6397))+(((-1.0)*r02*x6396)));
evalcond[2]=(((r10*x6397))+(((-1.0)*gconst124*r11*x6399))+(((-1.0)*r12*x6396))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6399))+((r21*x6398))+(((-1.0)*gconst125*r20*x6396)));
evalcond[4]=(((cj0*x6395))+((cj0*x6394))+(((-1.0)*gconst125*r00*x6396))+((r01*x6398))+(((-1.0)*r02*x6399)));
evalcond[5]=(((r11*x6398))+((sj0*x6395))+((sj0*x6394))+(((-1.0)*r12*x6399))+(((-1.0)*gconst125*r10*x6396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6400=((1.0)*gconst124);
CheckValue<IkReal> x6401=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6400))+(((-1.0)*gconst125*r01)))),-1);
if(!x6401.valid){
continue;
}
CheckValue<IkReal> x6402 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst125*r20))+(((-1.0)*cj0*r21*x6400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6401.value)))+(x6402.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6403=IKsin(j4);
IkReal x6404=IKcos(j4);
IkReal x6405=(cj2*sj1);
IkReal x6406=(cj1*sj2);
IkReal x6407=((1.0)*x6404);
IkReal x6408=(gconst125*x6403);
IkReal x6409=(gconst124*x6404);
IkReal x6410=((1.0)*x6403);
evalcond[0]=(((r20*x6408))+(((-1.0)*gconst124*r21*x6410))+(((-1.0)*r22*x6407)));
evalcond[1]=(sj0+((r00*x6408))+(((-1.0)*r02*x6407))+(((-1.0)*gconst124*r01*x6410)));
evalcond[2]=((((-1.0)*gconst124*r11*x6410))+((r10*x6408))+(((-1.0)*r12*x6407))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6409))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6410))+(((-1.0)*gconst125*r20*x6407)));
evalcond[4]=(((r01*x6409))+((cj0*x6406))+((cj0*x6405))+(((-1.0)*r02*x6410))+(((-1.0)*gconst125*r00*x6407)));
evalcond[5]=(((sj0*x6406))+((sj0*x6405))+(((-1.0)*gconst125*r10*x6407))+((r11*x6409))+(((-1.0)*r12*x6410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6411=((1.0)*gconst124);
CheckValue<IkReal> x6412 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst125*r20*sj0))+(((-1.0)*r21*sj0*x6411)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6412.valid){
continue;
}
CheckValue<IkReal> x6413=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6411))+(((-1.0)*gconst125*r11)))),-1);
if(!x6413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6412.value)+(((1.5707963267949)*(x6413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6414=IKsin(j4);
IkReal x6415=IKcos(j4);
IkReal x6416=(cj2*sj1);
IkReal x6417=(cj1*sj2);
IkReal x6418=((1.0)*x6415);
IkReal x6419=(gconst125*x6414);
IkReal x6420=(gconst124*x6415);
IkReal x6421=((1.0)*x6414);
evalcond[0]=(((r20*x6419))+(((-1.0)*gconst124*r21*x6421))+(((-1.0)*r22*x6418)));
evalcond[1]=(sj0+((r00*x6419))+(((-1.0)*gconst124*r01*x6421))+(((-1.0)*r02*x6418)));
evalcond[2]=(((r10*x6419))+(((-1.0)*gconst124*r11*x6421))+(((-1.0)*r12*x6418))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6420))+(((-1.0)*r22*x6421))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst125*r20*x6418)));
evalcond[4]=(((cj0*x6417))+((cj0*x6416))+((r01*x6420))+(((-1.0)*gconst125*r00*x6418))+(((-1.0)*r02*x6421)));
evalcond[5]=(((sj0*x6417))+((sj0*x6416))+(((-1.0)*gconst125*r10*x6418))+((r11*x6420))+(((-1.0)*r12*x6421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6422=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6422;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x6422);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6423=((1.0)*sj5);
IkReal x6424=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6423)));
j4eval[0]=x6424;
j4eval[1]=IKsign(x6424);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x6423)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6425=cj5*cj5;
IkReal x6426=r01*r01;
IkReal x6427=(cj5*r00);
IkReal x6428=(r01*sj5);
IkReal x6429=(((x6425*(r00*r00)))+x6426+(((-1.0)*x6425*x6426))+(r02*r02)+(((-2.0)*x6427*x6428)));
j4eval[0]=x6429;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x6427))+x6428))));
j4eval[2]=IKsign(x6429);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6430=cj5*cj5;
IkReal x6431=r01*r01;
IkReal x6432=(r01*sj5);
IkReal x6433=(cj5*r00);
CheckValue<IkReal> x6434 = IKatan2WithCheck(IkReal((x6432+(((-1.0)*x6433)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6434.valid){
continue;
}
CheckValue<IkReal> x6435=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6432*x6433))+x6431+((x6430*(r00*r00)))+(((-1.0)*x6430*x6431))+(r02*r02))),-1);
if(!x6435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6434.value)+(((1.5707963267949)*(x6435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6436=IKsin(j4);
IkReal x6437=IKcos(j4);
IkReal x6438=(cj5*r00);
IkReal x6439=(cj5*r20);
IkReal x6440=(cj5*r10);
IkReal x6441=((1.0)*x6437);
IkReal x6442=(sj5*x6437);
IkReal x6443=((1.0)*x6436);
IkReal x6444=(sj5*x6443);
evalcond[0]=((((-1.0)*r21*x6444))+((x6436*x6439))+(((-1.0)*r22*x6441)));
evalcond[1]=((((-1.0)*r12*x6441))+(((-1.0)*r11*x6444))+((x6436*x6440)));
evalcond[2]=(((r01*x6442))+(((-1.0)*r02*x6443))+(((-1.0)*x6438*x6441)));
evalcond[3]=((1.0)+(((-1.0)*r01*x6444))+(((-1.0)*r02*x6441))+((x6436*x6438)));
evalcond[4]=(((cj2*sj1))+((r11*x6442))+((cj1*sj2))+(((-1.0)*r12*x6443))+(((-1.0)*x6440*x6441)));
evalcond[5]=((((-1.0)*x6439*x6441))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6442))+(((-1.0)*r22*x6443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6445=((1.0)*sj5);
CheckValue<IkReal> x6446=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6445)))),-1);
if(!x6446.valid){
continue;
}
CheckValue<IkReal> x6447 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x6445))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6446.value)))+(x6447.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6448=IKsin(j4);
IkReal x6449=IKcos(j4);
IkReal x6450=(cj5*r00);
IkReal x6451=(cj5*r20);
IkReal x6452=(cj5*r10);
IkReal x6453=((1.0)*x6449);
IkReal x6454=(sj5*x6449);
IkReal x6455=((1.0)*x6448);
IkReal x6456=(sj5*x6455);
evalcond[0]=(((x6448*x6451))+(((-1.0)*r22*x6453))+(((-1.0)*r21*x6456)));
evalcond[1]=((((-1.0)*r11*x6456))+(((-1.0)*r12*x6453))+((x6448*x6452)));
evalcond[2]=(((r01*x6454))+(((-1.0)*r02*x6455))+(((-1.0)*x6450*x6453)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6453))+((x6448*x6450))+(((-1.0)*r01*x6456)));
evalcond[4]=(((cj2*sj1))+((r11*x6454))+(((-1.0)*x6452*x6453))+((cj1*sj2))+(((-1.0)*r12*x6455)));
evalcond[5]=((((-1.0)*x6451*x6453))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6454))+(((-1.0)*r22*x6455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6457 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6457.valid){
continue;
}
CheckValue<IkReal> x6458=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6457.value)+(((1.5707963267949)*(x6458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6459=IKsin(j4);
IkReal x6460=IKcos(j4);
IkReal x6461=(cj5*r00);
IkReal x6462=(cj5*r20);
IkReal x6463=(cj5*r10);
IkReal x6464=((1.0)*x6460);
IkReal x6465=(sj5*x6460);
IkReal x6466=((1.0)*x6459);
IkReal x6467=(sj5*x6466);
evalcond[0]=((((-1.0)*r21*x6467))+(((-1.0)*r22*x6464))+((x6459*x6462)));
evalcond[1]=((((-1.0)*r11*x6467))+(((-1.0)*r12*x6464))+((x6459*x6463)));
evalcond[2]=(((r01*x6465))+(((-1.0)*r02*x6466))+(((-1.0)*x6461*x6464)));
evalcond[3]=((1.0)+(((-1.0)*r01*x6467))+(((-1.0)*r02*x6464))+((x6459*x6461)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6463*x6464))+(((-1.0)*r12*x6466))+((r11*x6465)));
evalcond[5]=(((r21*x6465))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6466))+(((-1.0)*x6462*x6464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6468=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6468;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x6468);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6469=((1.0)*sj5);
IkReal x6470=((((-1.0)*r20*x6469))+(((-1.0)*cj5*r21)));
j4eval[0]=x6470;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x6469)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6470);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6471=cj5*cj5;
IkReal x6472=r01*r01;
IkReal x6473=(r01*sj5);
IkReal x6474=(cj5*r00);
IkReal x6475=((((2.0)*x6473*x6474))+(((-1.0)*(r02*r02)))+((x6471*x6472))+(((-1.0)*x6472))+(((-1.0)*x6471*(r00*r00))));
j4eval[0]=x6475;
j4eval[1]=IKsign(x6475);
j4eval[2]=((IKabs(r02))+(IKabs((x6473+(((-1.0)*x6474))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6476=cj5*cj5;
IkReal x6477=r01*r01;
IkReal x6478=(r01*sj5);
IkReal x6479=(cj5*r00);
CheckValue<IkReal> x6480 = IKatan2WithCheck(IkReal((x6478+(((-1.0)*x6479)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6480.valid){
continue;
}
CheckValue<IkReal> x6481=IKPowWithIntegerCheck(IKsign((((x6476*x6477))+(((-1.0)*(r02*r02)))+(((2.0)*x6478*x6479))+(((-1.0)*x6477))+(((-1.0)*x6476*(r00*r00))))),-1);
if(!x6481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6480.value)+(((1.5707963267949)*(x6481.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6482=IKsin(j4);
IkReal x6483=IKcos(j4);
IkReal x6484=(cj5*r00);
IkReal x6485=((1.0)*cj1);
IkReal x6486=(cj5*r20);
IkReal x6487=(cj5*r10);
IkReal x6488=((1.0)*x6483);
IkReal x6489=(sj5*x6483);
IkReal x6490=((1.0)*x6482);
IkReal x6491=(sj5*x6490);
evalcond[0]=(((x6482*x6486))+(((-1.0)*r22*x6488))+(((-1.0)*r21*x6491)));
evalcond[1]=((((-1.0)*r12*x6488))+((x6482*x6487))+(((-1.0)*r11*x6491)));
evalcond[2]=(((r01*x6489))+(((-1.0)*r02*x6490))+(((-1.0)*x6484*x6488)));
evalcond[3]=((-1.0)+((x6482*x6484))+(((-1.0)*r01*x6491))+(((-1.0)*r02*x6488)));
evalcond[4]=(((r21*x6489))+(((-1.0)*r22*x6490))+(((-1.0)*x6486*x6488))+((sj1*sj2))+(((-1.0)*cj2*x6485)));
evalcond[5]=((((-1.0)*x6487*x6488))+((r11*x6489))+(((-1.0)*r12*x6490))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x6485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6492=((1.0)*sj5);
CheckValue<IkReal> x6493=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6492))+(((-1.0)*cj5*r21)))),-1);
if(!x6493.valid){
continue;
}
CheckValue<IkReal> x6494 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x6492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6493.value)))+(x6494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6495=IKsin(j4);
IkReal x6496=IKcos(j4);
IkReal x6497=(cj5*r00);
IkReal x6498=((1.0)*cj1);
IkReal x6499=(cj5*r20);
IkReal x6500=(cj5*r10);
IkReal x6501=((1.0)*x6496);
IkReal x6502=(sj5*x6496);
IkReal x6503=((1.0)*x6495);
IkReal x6504=(sj5*x6503);
evalcond[0]=(((x6495*x6499))+(((-1.0)*r21*x6504))+(((-1.0)*r22*x6501)));
evalcond[1]=((((-1.0)*r12*x6501))+(((-1.0)*r11*x6504))+((x6495*x6500)));
evalcond[2]=((((-1.0)*r02*x6503))+(((-1.0)*x6497*x6501))+((r01*x6502)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x6504))+((x6495*x6497))+(((-1.0)*r02*x6501)));
evalcond[4]=(((r21*x6502))+((sj1*sj2))+(((-1.0)*r22*x6503))+(((-1.0)*cj2*x6498))+(((-1.0)*x6499*x6501)));
evalcond[5]=((((-1.0)*r12*x6503))+(((-1.0)*x6500*x6501))+(((-1.0)*cj2*sj1))+((r11*x6502))+(((-1.0)*sj2*x6498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6505=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6505.valid){
continue;
}
CheckValue<IkReal> x6506 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6505.value)))+(x6506.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6507=IKsin(j4);
IkReal x6508=IKcos(j4);
IkReal x6509=(cj5*r00);
IkReal x6510=((1.0)*cj1);
IkReal x6511=(cj5*r20);
IkReal x6512=(cj5*r10);
IkReal x6513=((1.0)*x6508);
IkReal x6514=(sj5*x6508);
IkReal x6515=((1.0)*x6507);
IkReal x6516=(sj5*x6515);
evalcond[0]=((((-1.0)*r21*x6516))+(((-1.0)*r22*x6513))+((x6507*x6511)));
evalcond[1]=(((x6507*x6512))+(((-1.0)*r12*x6513))+(((-1.0)*r11*x6516)));
evalcond[2]=((((-1.0)*r02*x6515))+((r01*x6514))+(((-1.0)*x6509*x6513)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6513))+((x6507*x6509))+(((-1.0)*r01*x6516)));
evalcond[4]=((((-1.0)*r22*x6515))+(((-1.0)*cj2*x6510))+((sj1*sj2))+((r21*x6514))+(((-1.0)*x6511*x6513)));
evalcond[5]=((((-1.0)*x6512*x6513))+((r11*x6514))+(((-1.0)*sj2*x6510))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x6515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6517=((-1.0)*r10);
IkReal x6519 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6519)==0){
continue;
}
IkReal x6518=pow(x6519,-0.5);
CheckValue<IkReal> x6520 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6517),IKFAST_ATAN2_MAGTHRESH);
if(!x6520.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6520.value));
IkReal gconst127=(r11*x6518);
IkReal gconst128=(x6517*x6518);
CheckValue<IkReal> x6521 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6521.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6521.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6522=((-1.0)*r10);
IkReal x6523=x6518;
CheckValue<IkReal> x6525 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6522),IKFAST_ATAN2_MAGTHRESH);
if(!x6525.valid){
continue;
}
IkReal x6524=((-1.0)*(x6525.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x6524;
IkReal gconst126=x6524;
IkReal gconst127=(r11*x6523);
IkReal gconst128=(x6522*x6523);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6526=((1.0)*gconst127);
CheckValue<IkReal> x6527 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x6526))+((cj0*gconst128*r00))+(((-1.0)*r11*sj0*x6526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6527.valid){
continue;
}
CheckValue<IkReal> x6528=IKPowWithIntegerCheck(IKsign((((gconst127*r20))+((gconst128*r21)))),-1);
if(!x6528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6527.value)+(((1.5707963267949)*(x6528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6529=IKsin(j4);
IkReal x6530=IKcos(j4);
IkReal x6531=(cj2*sj1);
IkReal x6532=(gconst128*r10);
IkReal x6533=(cj1*sj2);
IkReal x6534=((1.0)*x6530);
IkReal x6535=(gconst127*x6530);
IkReal x6536=((1.0)*x6529);
IkReal x6537=(gconst128*x6529);
evalcond[0]=((((-1.0)*r22*x6534))+((r20*x6537))+(((-1.0)*gconst127*r21*x6536)));
evalcond[1]=(sj0+(((-1.0)*gconst127*r01*x6536))+(((-1.0)*r02*x6534))+((r00*x6537)));
evalcond[2]=((((-1.0)*r12*x6534))+(((-1.0)*gconst127*r11*x6536))+((x6529*x6532))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst128*r20*x6534))+((r21*x6535))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6536)));
evalcond[4]=((((-1.0)*r02*x6536))+((cj0*x6533))+((cj0*x6531))+((r01*x6535))+(((-1.0)*gconst128*r00*x6534)));
evalcond[5]=(((sj0*x6533))+((sj0*x6531))+(((-1.0)*r12*x6536))+(((-1.0)*x6532*x6534))+((r11*x6535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6538=((1.0)*gconst127);
CheckValue<IkReal> x6539=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r01))+(((-1.0)*r00*x6538)))),-1);
if(!x6539.valid){
continue;
}
CheckValue<IkReal> x6540 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst128*r20))+(((-1.0)*cj0*r21*x6538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6539.value)))+(x6540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6541=IKsin(j4);
IkReal x6542=IKcos(j4);
IkReal x6543=(cj2*sj1);
IkReal x6544=(gconst128*r10);
IkReal x6545=(cj1*sj2);
IkReal x6546=((1.0)*x6542);
IkReal x6547=(gconst127*x6542);
IkReal x6548=((1.0)*x6541);
IkReal x6549=(gconst128*x6541);
evalcond[0]=(((r20*x6549))+(((-1.0)*r22*x6546))+(((-1.0)*gconst127*r21*x6548)));
evalcond[1]=(sj0+(((-1.0)*r02*x6546))+(((-1.0)*gconst127*r01*x6548))+((r00*x6549)));
evalcond[2]=((((-1.0)*gconst127*r11*x6548))+(((-1.0)*r12*x6546))+((x6541*x6544))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x6548))+(((-1.0)*gconst128*r20*x6546))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6547)));
evalcond[4]=((((-1.0)*gconst128*r00*x6546))+(((-1.0)*r02*x6548))+((cj0*x6543))+((cj0*x6545))+((r01*x6547)));
evalcond[5]=((((-1.0)*r12*x6548))+((r11*x6547))+((sj0*x6543))+((sj0*x6545))+(((-1.0)*x6544*x6546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6550=((-1.0)*r11);
IkReal x6552 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6552)==0){
continue;
}
IkReal x6551=pow(x6552,-0.5);
CheckValue<IkReal> x6553 = IKatan2WithCheck(IkReal(x6550),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6553.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6553.value))));
IkReal gconst130=(x6550*x6551);
IkReal gconst131=((1.0)*r10*x6551);
CheckValue<IkReal> x6554 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6554.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6554.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6555=((-1.0)*r11);
CheckValue<IkReal> x6558 = IKatan2WithCheck(IkReal(x6555),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6558.valid){
continue;
}
IkReal x6556=((1.0)*(x6558.value));
IkReal x6557=x6551;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6556)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6556)));
IkReal gconst130=(x6555*x6557);
IkReal gconst131=((1.0)*r10*x6557);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6559=((-1.0)*r11);
CheckValue<IkReal> x6562 = IKatan2WithCheck(IkReal(x6559),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6562.valid){
continue;
}
IkReal x6560=((1.0)*(x6562.value));
IkReal x6561=x6551;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6560)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6560)));
IkReal gconst130=(x6559*x6561);
IkReal gconst131=((1.0)*r10*x6561);
IkReal x6563=r12*r12;
IkReal x6564=(cj0*r02);
IkReal x6565=x6551;
IkReal x6566=(sj0*x6565);
j4eval[0]=((IKabs((((x6563*x6566))+(((-1.0)*x6566))+((r12*x6564*x6565)))))+(IKabs((x6564+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6567=((-1.0)*r11);
CheckValue<IkReal> x6570 = IKatan2WithCheck(IkReal(x6567),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6570.valid){
continue;
}
IkReal x6568=((1.0)*(x6570.value));
IkReal x6569=x6551;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6568)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6568)));
IkReal gconst130=(x6567*x6569);
IkReal gconst131=((1.0)*r10*x6569);
IkReal x6571=r12*r12;
IkReal x6572=(sj1*sj2);
IkReal x6573=((1.0)*cj1*cj2);
CheckValue<IkReal> x6577=IKPowWithIntegerCheck(((-1.0)+x6571),-1);
if(!x6577.valid){
continue;
}
IkReal x6574=x6577.value;
if((((1.0)+(((-1.0)*x6571)))) < -0.00001)
continue;
IkReal x6575=IKsqrt(((1.0)+(((-1.0)*x6571))));
IkReal x6576=(r12*r22*x6574*x6575);
j4eval[0]=((IKabs((((r22*x6572))+(((-1.0)*r22*x6573)))))+(IKabs(((((-1.0)*x6573*x6576))+((x6572*x6576))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6578=(gconst131*r20);
IkReal x6579=(cj1*cj2);
IkReal x6580=(sj1*sj2);
IkReal x6581=(gconst130*r21);
CheckValue<IkReal> x6582=IKPowWithIntegerCheck(IKsign(((x6578*x6578)+(r22*r22)+(x6581*x6581)+(((-2.0)*x6578*x6581)))),-1);
if(!x6582.valid){
continue;
}
CheckValue<IkReal> x6583 = IKatan2WithCheck(IkReal((((r22*x6580))+(((-1.0)*r22*x6579)))),IkReal(((((-1.0)*x6578*x6579))+((x6579*x6581))+((x6578*x6580))+(((-1.0)*x6580*x6581)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6582.value)))+(x6583.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6584=IKsin(j4);
IkReal x6585=IKcos(j4);
IkReal x6586=(cj2*sj1);
IkReal x6587=(gconst131*r20);
IkReal x6588=(gconst131*r10);
IkReal x6589=(gconst131*r00);
IkReal x6590=(cj1*sj2);
IkReal x6591=((1.0)*x6585);
IkReal x6592=(gconst130*x6585);
IkReal x6593=((1.0)*x6584);
evalcond[0]=((((-1.0)*gconst130*r21*x6593))+(((-1.0)*r22*x6591))+((x6584*x6587)));
evalcond[1]=(sj0+(((-1.0)*r02*x6591))+(((-1.0)*gconst130*r01*x6593))+((x6584*x6589)));
evalcond[2]=((((-1.0)*r12*x6591))+(((-1.0)*gconst130*r11*x6593))+(((-1.0)*cj0))+((x6584*x6588)));
evalcond[3]=(((r21*x6592))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6587*x6591))+(((-1.0)*r22*x6593)));
evalcond[4]=((((-1.0)*x6589*x6591))+((cj0*x6586))+((cj0*x6590))+(((-1.0)*r02*x6593))+((r01*x6592)));
evalcond[5]=(((sj0*x6586))+((r11*x6592))+((sj0*x6590))+(((-1.0)*r12*x6593))+(((-1.0)*x6588*x6591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6594=((1.0)*gconst130);
CheckValue<IkReal> x6595 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x6594))+(((-1.0)*r11*sj0*x6594))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6595.valid){
continue;
}
CheckValue<IkReal> x6596=IKPowWithIntegerCheck(IKsign((((gconst131*r21))+((gconst130*r20)))),-1);
if(!x6596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6595.value)+(((1.5707963267949)*(x6596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6597=IKsin(j4);
IkReal x6598=IKcos(j4);
IkReal x6599=(cj2*sj1);
IkReal x6600=(gconst131*r20);
IkReal x6601=(gconst131*r10);
IkReal x6602=(gconst131*r00);
IkReal x6603=(cj1*sj2);
IkReal x6604=((1.0)*x6598);
IkReal x6605=(gconst130*x6598);
IkReal x6606=((1.0)*x6597);
evalcond[0]=(((x6597*x6600))+(((-1.0)*r22*x6604))+(((-1.0)*gconst130*r21*x6606)));
evalcond[1]=(sj0+((x6597*x6602))+(((-1.0)*r02*x6604))+(((-1.0)*gconst130*r01*x6606)));
evalcond[2]=(((x6597*x6601))+(((-1.0)*gconst130*r11*x6606))+(((-1.0)*r12*x6604))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x6606))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6600*x6604))+((r21*x6605)));
evalcond[4]=(((r01*x6605))+((cj0*x6599))+(((-1.0)*r02*x6606))+(((-1.0)*x6602*x6604))+((cj0*x6603)));
evalcond[5]=(((sj0*x6603))+((sj0*x6599))+(((-1.0)*x6601*x6604))+(((-1.0)*r12*x6606))+((r11*x6605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6607=((1.0)*gconst130);
CheckValue<IkReal> x6608=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r01))+(((-1.0)*r00*x6607)))),-1);
if(!x6608.valid){
continue;
}
CheckValue<IkReal> x6609 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst131*r20))+(((-1.0)*cj0*r21*x6607)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6608.value)))+(x6609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6610=IKsin(j4);
IkReal x6611=IKcos(j4);
IkReal x6612=(cj2*sj1);
IkReal x6613=(gconst131*r20);
IkReal x6614=(gconst131*r10);
IkReal x6615=(gconst131*r00);
IkReal x6616=(cj1*sj2);
IkReal x6617=((1.0)*x6611);
IkReal x6618=(gconst130*x6611);
IkReal x6619=((1.0)*x6610);
evalcond[0]=((((-1.0)*r22*x6617))+(((-1.0)*gconst130*r21*x6619))+((x6610*x6613)));
evalcond[1]=(sj0+(((-1.0)*r02*x6617))+((x6610*x6615))+(((-1.0)*gconst130*r01*x6619)));
evalcond[2]=((((-1.0)*r12*x6617))+(((-1.0)*gconst130*r11*x6619))+((x6610*x6614))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x6613*x6617))+((r21*x6618))+(((-1.0)*r22*x6619))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r01*x6618))+(((-1.0)*r02*x6619))+((cj0*x6612))+((cj0*x6616))+(((-1.0)*x6615*x6617)));
evalcond[5]=((((-1.0)*r12*x6619))+(((-1.0)*x6614*x6617))+((r11*x6618))+((sj0*x6612))+((sj0*x6616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6620=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6620;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6620);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6621=((1.0)*sj5);
IkReal x6622=((((-1.0)*r00*x6621))+(((-1.0)*cj5*r01)));
j4eval[0]=x6622;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x6621)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6622);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6623=cj5*cj5;
IkReal x6624=r11*r11;
IkReal x6625=(cj5*r10);
IkReal x6626=(r11*sj5);
IkReal x6627=((((-1.0)*x6624))+(((-1.0)*(r12*r12)))+(((2.0)*x6625*x6626))+(((-1.0)*x6623*(r10*r10)))+((x6623*x6624)));
j4eval[0]=x6627;
j4eval[1]=((IKabs(((((-1.0)*x6625))+x6626)))+(IKabs(r12)));
j4eval[2]=IKsign(x6627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6628=cj5*cj5;
IkReal x6629=r11*r11;
IkReal x6630=(cj5*r10);
IkReal x6631=(r11*sj5);
CheckValue<IkReal> x6632=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6629))+(((-1.0)*x6628*(r10*r10)))+((x6628*x6629))+(((-1.0)*(r12*r12)))+(((2.0)*x6630*x6631)))),-1);
if(!x6632.valid){
continue;
}
CheckValue<IkReal> x6633 = IKatan2WithCheck(IkReal(((((-1.0)*x6630))+x6631)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6632.value)))+(x6633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6634=IKsin(j4);
IkReal x6635=IKcos(j4);
IkReal x6636=(cj5*r00);
IkReal x6637=((1.0)*x6635);
IkReal x6638=(sj5*x6635);
IkReal x6639=(cj5*x6634);
IkReal x6640=((1.0)*x6634);
IkReal x6641=(sj5*x6640);
evalcond[0]=((((-1.0)*r21*x6641))+(((-1.0)*r22*x6637))+((r20*x6639)));
evalcond[1]=((((-1.0)*r02*x6637))+(((-1.0)*r01*x6641))+((x6634*x6636)));
evalcond[2]=((((-1.0)*cj5*r10*x6637))+((r11*x6638))+(((-1.0)*r12*x6640)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x6641))+((r10*x6639))+(((-1.0)*r12*x6637)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6636*x6637))+((r01*x6638))+(((-1.0)*r02*x6640)));
evalcond[5]=((((-1.0)*r22*x6640))+((r21*x6638))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x6637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6642=((1.0)*sj5);
CheckValue<IkReal> x6643 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x6642))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6643.valid){
continue;
}
CheckValue<IkReal> x6644=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6642))+(((-1.0)*cj5*r01)))),-1);
if(!x6644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6643.value)+(((1.5707963267949)*(x6644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6645=IKsin(j4);
IkReal x6646=IKcos(j4);
IkReal x6647=(cj5*r00);
IkReal x6648=((1.0)*x6646);
IkReal x6649=(sj5*x6646);
IkReal x6650=(cj5*x6645);
IkReal x6651=((1.0)*x6645);
IkReal x6652=(sj5*x6651);
evalcond[0]=((((-1.0)*r21*x6652))+(((-1.0)*r22*x6648))+((r20*x6650)));
evalcond[1]=((((-1.0)*r01*x6652))+((x6645*x6647))+(((-1.0)*r02*x6648)));
evalcond[2]=((((-1.0)*cj5*r10*x6648))+(((-1.0)*r12*x6651))+((r11*x6649)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x6652))+((r10*x6650))+(((-1.0)*r12*x6648)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x6649))+(((-1.0)*x6647*x6648))+(((-1.0)*r02*x6651)));
evalcond[5]=((((-1.0)*r22*x6651))+((r21*x6649))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x6648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6653=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6653.valid){
continue;
}
CheckValue<IkReal> x6654 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6653.value)))+(x6654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6655=IKsin(j4);
IkReal x6656=IKcos(j4);
IkReal x6657=(cj5*r00);
IkReal x6658=((1.0)*x6656);
IkReal x6659=(sj5*x6656);
IkReal x6660=(cj5*x6655);
IkReal x6661=((1.0)*x6655);
IkReal x6662=(sj5*x6661);
evalcond[0]=((((-1.0)*r22*x6658))+(((-1.0)*r21*x6662))+((r20*x6660)));
evalcond[1]=((((-1.0)*r01*x6662))+((x6655*x6657))+(((-1.0)*r02*x6658)));
evalcond[2]=((((-1.0)*cj5*r10*x6658))+((r11*x6659))+(((-1.0)*r12*x6661)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6658))+(((-1.0)*r11*x6662))+((r10*x6660)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6657*x6658))+((cj1*sj2))+((r01*x6659))+(((-1.0)*r02*x6661)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x6658))+((r21*x6659))+(((-1.0)*r22*x6661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6663=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6663;
j4eval[1]=IKsign(x6663);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6664=((1.0)*sj5);
IkReal x6665=((((-1.0)*r20*x6664))+(((-1.0)*cj5*r21)));
j4eval[0]=x6665;
j4eval[1]=((IKabs(((((-1.0)*r01*x6664))+((cj5*r00)))))+(IKabs(r02)));
j4eval[2]=IKsign(x6665);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6666=cj5*cj5;
IkReal x6667=r11*r11;
IkReal x6668=(r11*sj5);
IkReal x6669=(cj5*r10);
IkReal x6670=((r12*r12)+x6667+(((-1.0)*x6666*x6667))+((x6666*(r10*r10)))+(((-2.0)*x6668*x6669)));
j4eval[0]=x6670;
j4eval[1]=IKsign(x6670);
j4eval[2]=((IKabs((x6668+(((-1.0)*x6669)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6671=cj5*cj5;
IkReal x6672=r11*r11;
IkReal x6673=(cj5*r10);
IkReal x6674=(r11*sj5);
CheckValue<IkReal> x6675=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x6671*(r10*r10)))+(((-2.0)*x6673*x6674))+x6672+(((-1.0)*x6671*x6672)))),-1);
if(!x6675.valid){
continue;
}
CheckValue<IkReal> x6676 = IKatan2WithCheck(IkReal((x6674+(((-1.0)*x6673)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6675.value)))+(x6676.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6677=IKsin(j4);
IkReal x6678=IKcos(j4);
IkReal x6679=(cj5*r00);
IkReal x6680=((1.0)*cj1);
IkReal x6681=((1.0)*x6678);
IkReal x6682=(sj5*x6678);
IkReal x6683=(cj5*x6677);
IkReal x6684=((1.0)*x6677);
IkReal x6685=(sj5*x6684);
evalcond[0]=((((-1.0)*r21*x6685))+((r20*x6683))+(((-1.0)*r22*x6681)));
evalcond[1]=((((-1.0)*r01*x6685))+(((-1.0)*r02*x6681))+((x6677*x6679)));
evalcond[2]=(((r11*x6682))+(((-1.0)*cj5*r10*x6681))+(((-1.0)*r12*x6684)));
evalcond[3]=((1.0)+((r10*x6683))+(((-1.0)*r11*x6685))+(((-1.0)*r12*x6681)));
evalcond[4]=((((-1.0)*cj2*x6680))+((r21*x6682))+((sj1*sj2))+(((-1.0)*cj5*r20*x6681))+(((-1.0)*r22*x6684)));
evalcond[5]=((((-1.0)*r02*x6684))+(((-1.0)*x6679*x6681))+(((-1.0)*cj2*sj1))+((r01*x6682))+(((-1.0)*sj2*x6680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6686=((1.0)*sj5);
CheckValue<IkReal> x6687=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6686))+(((-1.0)*cj5*r21)))),-1);
if(!x6687.valid){
continue;
}
CheckValue<IkReal> x6688 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x6686))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6687.value)))+(x6688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6689=IKsin(j4);
IkReal x6690=IKcos(j4);
IkReal x6691=(cj5*r00);
IkReal x6692=((1.0)*cj1);
IkReal x6693=((1.0)*x6690);
IkReal x6694=(sj5*x6690);
IkReal x6695=(cj5*x6689);
IkReal x6696=((1.0)*x6689);
IkReal x6697=(sj5*x6696);
evalcond[0]=((((-1.0)*r21*x6697))+((r20*x6695))+(((-1.0)*r22*x6693)));
evalcond[1]=((((-1.0)*r01*x6697))+(((-1.0)*r02*x6693))+((x6689*x6691)));
evalcond[2]=(((r11*x6694))+(((-1.0)*cj5*r10*x6693))+(((-1.0)*r12*x6696)));
evalcond[3]=((1.0)+((r10*x6695))+(((-1.0)*r12*x6693))+(((-1.0)*r11*x6697)));
evalcond[4]=((((-1.0)*cj2*x6692))+((sj1*sj2))+((r21*x6694))+(((-1.0)*r22*x6696))+(((-1.0)*cj5*r20*x6693)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r02*x6696))+(((-1.0)*sj2*x6692))+((r01*x6694))+(((-1.0)*x6691*x6693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6698=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6698.valid){
continue;
}
CheckValue<IkReal> x6699 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6698.value)))+(x6699.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6700=IKsin(j4);
IkReal x6701=IKcos(j4);
IkReal x6702=(cj5*r00);
IkReal x6703=((1.0)*cj1);
IkReal x6704=((1.0)*x6701);
IkReal x6705=(sj5*x6701);
IkReal x6706=(cj5*x6700);
IkReal x6707=((1.0)*x6700);
IkReal x6708=(sj5*x6707);
evalcond[0]=((((-1.0)*r22*x6704))+((r20*x6706))+(((-1.0)*r21*x6708)));
evalcond[1]=((((-1.0)*r02*x6704))+((x6700*x6702))+(((-1.0)*r01*x6708)));
evalcond[2]=((((-1.0)*cj5*r10*x6704))+((r11*x6705))+(((-1.0)*r12*x6707)));
evalcond[3]=((1.0)+((r10*x6706))+(((-1.0)*r12*x6704))+(((-1.0)*r11*x6708)));
evalcond[4]=((((-1.0)*cj5*r20*x6704))+((r21*x6705))+(((-1.0)*r22*x6707))+((sj1*sj2))+(((-1.0)*cj2*x6703)));
evalcond[5]=((((-1.0)*r02*x6707))+(((-1.0)*cj2*sj1))+(((-1.0)*x6702*x6704))+((r01*x6705))+(((-1.0)*sj2*x6703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6709=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6709);
rxp0_2=(py*r00);
rxp1_0=(r21*x6709);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6710=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6710);
rxp0_2=(py*r00);
rxp1_0=(r21*x6710);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6711=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6711);
rxp0_2=(py*r00);
rxp1_0=(r21*x6711);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6714=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x6714.valid){
continue;
}
IkReal x6712=x6714.value;
IkReal x6713=((1.0)*cj0*x6712);
cj4array[0]=((((-1.0)*cj1*sj2*x6713))+(((-1.0)*cj2*sj1*x6713)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6715=IKsin(j4);
IkReal x6716=IKcos(j4);
IkReal x6717=(cj5*r20);
IkReal x6718=((1.0)*x6716);
IkReal x6719=((1.0)*sj5*x6715);
evalcond[0]=((-1.0)*r12*x6715);
evalcond[1]=((((-1.0)*r12*x6718))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x6719))+((x6715*x6717)));
evalcond[3]=(((cj5*r00*x6715))+(((-1.0)*r01*x6719)));
evalcond[4]=(((r21*sj5*x6716))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6717*x6718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6721=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6721.valid){
continue;
}
IkReal x6720=x6721.value;
cj4array[0]=(((cj1*cj2*x6720))+(((-1.0)*sj1*sj2*x6720)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6722=IKsin(j4);
IkReal x6723=IKcos(j4);
IkReal x6724=(cj5*r00);
IkReal x6725=(r01*sj5);
IkReal x6726=((1.0)*x6723);
IkReal x6727=((1.0)*x6722);
evalcond[0]=((-1.0)*r12*x6722);
evalcond[1]=((((-1.0)*r12*x6726))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*sj5*x6727))+((cj5*r20*x6722)));
evalcond[3]=(((x6722*x6724))+(((-1.0)*x6725*x6727)));
evalcond[4]=((((-1.0)*x6724*x6726))+((x6723*x6725))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6728=IKPowWithIntegerCheck(r12,-1);
if(!x6728.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x6728.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6729=IKsin(j4);
IkReal x6730=IKcos(j4);
IkReal x6731=(sj5*x6730);
IkReal x6732=(cj5*x6729);
IkReal x6733=((1.0)*sj5*x6729);
IkReal x6734=((1.0)*cj5*x6730);
evalcond[0]=((-1.0)*r12*x6729);
evalcond[1]=(((r20*x6732))+(((-1.0)*r21*x6733)));
evalcond[2]=((((-1.0)*r01*x6733))+((r00*x6732)));
evalcond[3]=((((-1.0)*r20*x6734))+((r21*x6731))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*r00*x6734))+((cj0*cj2*sj1))+((r01*x6731))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6735=((1.0)*sj5);
CheckValue<IkReal> x6736=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6736.valid){
continue;
}
CheckValue<IkReal> x6737 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+(((-1.0)*cj0*r01*x6735))+(((-1.0)*r11*sj0*x6735))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6736.value)))+(x6737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6738=IKsin(j4);
IkReal x6739=IKcos(j4);
IkReal x6740=(cj5*r00);
IkReal x6741=(cj2*sj1);
IkReal x6742=(cj1*sj2);
IkReal x6743=((1.0)*x6739);
IkReal x6744=(sj5*x6739);
IkReal x6745=(cj5*x6738);
IkReal x6746=((1.0)*x6738);
IkReal x6747=(sj5*x6746);
evalcond[0]=((((-1.0)*r21*x6747))+(((-1.0)*r22*x6743))+((r20*x6745)));
evalcond[1]=(sj0+(((-1.0)*r01*x6747))+((x6738*x6740))+(((-1.0)*r02*x6743)));
evalcond[2]=((((-1.0)*r12*x6743))+(((-1.0)*r11*x6747))+((r10*x6745))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6744))+(((-1.0)*r22*x6746))+(((-1.0)*cj5*r20*x6743))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((cj0*x6741))+((cj0*x6742))+(((-1.0)*r02*x6746))+((r01*x6744))+(((-1.0)*x6740*x6743)));
evalcond[5]=((((-1.0)*cj5*r10*x6743))+(((-1.0)*r12*x6746))+((r11*x6744))+((sj0*x6742))+((sj0*x6741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6748=((1.0)*sj5);
CheckValue<IkReal> x6749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6748))+(((-1.0)*cj5*r01)))),-1);
if(!x6749.valid){
continue;
}
CheckValue<IkReal> x6750 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6749.value)))+(x6750.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6751=IKsin(j4);
IkReal x6752=IKcos(j4);
IkReal x6753=(cj5*r00);
IkReal x6754=(cj2*sj1);
IkReal x6755=(cj1*sj2);
IkReal x6756=((1.0)*x6752);
IkReal x6757=(sj5*x6752);
IkReal x6758=(cj5*x6751);
IkReal x6759=((1.0)*x6751);
IkReal x6760=(sj5*x6759);
evalcond[0]=(((r20*x6758))+(((-1.0)*r22*x6756))+(((-1.0)*r21*x6760)));
evalcond[1]=(sj0+((x6751*x6753))+(((-1.0)*r01*x6760))+(((-1.0)*r02*x6756)));
evalcond[2]=(((r10*x6758))+(((-1.0)*r11*x6760))+(((-1.0)*r12*x6756))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6759))+((r21*x6757))+(((-1.0)*cj5*r20*x6756)));
evalcond[4]=(((cj0*x6754))+((cj0*x6755))+((r01*x6757))+(((-1.0)*r02*x6759))+(((-1.0)*x6753*x6756)));
evalcond[5]=(((r11*x6757))+(((-1.0)*cj5*r10*x6756))+(((-1.0)*r12*x6759))+((sj0*x6754))+((sj0*x6755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6761=((1.0)*sj5);
CheckValue<IkReal> x6762=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6761)))),-1);
if(!x6762.valid){
continue;
}
CheckValue<IkReal> x6763 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6762.value)))+(x6763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6764=IKsin(j4);
IkReal x6765=IKcos(j4);
IkReal x6766=(cj5*r00);
IkReal x6767=(cj2*sj1);
IkReal x6768=(cj1*sj2);
IkReal x6769=((1.0)*x6765);
IkReal x6770=(sj5*x6765);
IkReal x6771=(cj5*x6764);
IkReal x6772=((1.0)*x6764);
IkReal x6773=(sj5*x6772);
evalcond[0]=((((-1.0)*r22*x6769))+(((-1.0)*r21*x6773))+((r20*x6771)));
evalcond[1]=(sj0+(((-1.0)*r01*x6773))+(((-1.0)*r02*x6769))+((x6764*x6766)));
evalcond[2]=((((-1.0)*r11*x6773))+(((-1.0)*r12*x6769))+((r10*x6771))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x6772))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x6769))+((r21*x6770)));
evalcond[4]=(((cj0*x6767))+((cj0*x6768))+(((-1.0)*x6766*x6769))+(((-1.0)*r02*x6772))+((r01*x6770)));
evalcond[5]=(((r11*x6770))+(((-1.0)*r12*x6772))+(((-1.0)*cj5*r10*x6769))+((sj0*x6767))+((sj0*x6768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6774=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x6774;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x6774);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6775=r21*r21;
IkReal x6776=cj5*cj5;
IkReal x6777=(sj1*sj2);
IkReal x6778=(r21*sj5);
IkReal x6779=(cj1*cj2);
IkReal x6780=(cj5*r20);
IkReal x6781=((((-1.0)*x6776*(r20*r20)))+((x6775*x6776))+(((-1.0)*x6775))+(((-1.0)*(r22*r22)))+(((2.0)*x6778*x6780)));
j4eval[0]=x6781;
j4eval[1]=((IKabs((((r22*x6777))+(((-1.0)*r22*x6779)))))+(IKabs(((((-1.0)*x6777*x6778))+((x6777*x6780))+((x6778*x6779))+(((-1.0)*x6779*x6780))))));
j4eval[2]=IKsign(x6781);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.680635194225863)*px))+(((-2.10556211163397)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.680635194225863)*py))+(((-2.10556211163397)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.680635194225863)*px))+(((-2.10556211163397)*py))))+IKsqr(((((-0.680635194225863)*py))+(((-2.10556211163397)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.680635194225863)*px))+(((-2.10556211163397)*py))), ((((-0.680635194225863)*py))+(((-2.10556211163397)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6782=IKcos(j0);
IkReal x6783=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.139)*x6783))+(((-0.43)*x6782)));
evalcond[1]=((((-0.139)*x6782))+(((-1.0)*py))+(((-0.43)*x6783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6784=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6784;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6784);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6785=((1.0)*sj5);
IkReal x6786=((((-1.0)*r00*x6785))+(((-1.0)*cj5*r01)));
j4eval[0]=x6786;
j4eval[1]=IKsign(x6786);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6785))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6787=cj5*cj5;
IkReal x6788=((1.0)*r21);
IkReal x6789=(cj5*r20);
IkReal x6790=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x6787))+((cj5*r00*r21*sj5))+((r01*sj5*x6789))+((r01*r21*x6787))+(((-1.0)*r01*x6788)));
j4eval[0]=x6790;
j4eval[1]=IKsign(x6790);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x6789))+(((-1.0)*cj0*sj5*x6788))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6791=cj5*cj5;
IkReal x6792=((1.0)*r21);
IkReal x6793=(cj5*r20);
CheckValue<IkReal> x6794=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*sj5*x6793))+((r01*r21*x6791))+(((-1.0)*r01*x6792))+(((-1.0)*r00*r20*x6791))+((cj5*r00*r21*sj5)))),-1);
if(!x6794.valid){
continue;
}
CheckValue<IkReal> x6795 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x6792))+((cj0*x6793)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6794.value)))+(x6795.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6796=IKcos(j4);
IkReal x6797=IKsin(j4);
IkReal x6798=(r11*sj5);
IkReal x6799=(r21*sj5);
IkReal x6800=(r01*sj5);
IkReal x6801=((1.0)*x6796);
IkReal x6802=((1.0)*x6797);
IkReal x6803=(cj5*x6796);
IkReal x6804=(cj5*x6797);
evalcond[0]=(((r22*x6797))+((r20*x6803))+(((-1.0)*x6799*x6801)));
evalcond[1]=(((r20*x6804))+(((-1.0)*r22*x6801))+(((-1.0)*x6799*x6802)));
evalcond[2]=(((r02*x6797))+cj0+((r00*x6803))+(((-1.0)*x6800*x6801)));
evalcond[3]=(sj0+((r10*x6803))+(((-1.0)*x6798*x6801))+((r12*x6797)));
evalcond[4]=(sj0+(((-1.0)*r02*x6801))+((r00*x6804))+(((-1.0)*x6800*x6802)));
evalcond[5]=((((-1.0)*r12*x6801))+((r10*x6804))+(((-1.0)*x6798*x6802))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6805=((1.0)*sj5);
CheckValue<IkReal> x6806=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6805))+(((-1.0)*cj5*r01)))),-1);
if(!x6806.valid){
continue;
}
CheckValue<IkReal> x6807 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6805)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6806.value)))+(x6807.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6808=IKcos(j4);
IkReal x6809=IKsin(j4);
IkReal x6810=(r11*sj5);
IkReal x6811=(r21*sj5);
IkReal x6812=(r01*sj5);
IkReal x6813=((1.0)*x6808);
IkReal x6814=((1.0)*x6809);
IkReal x6815=(cj5*x6808);
IkReal x6816=(cj5*x6809);
evalcond[0]=(((r22*x6809))+(((-1.0)*x6811*x6813))+((r20*x6815)));
evalcond[1]=((((-1.0)*x6811*x6814))+(((-1.0)*r22*x6813))+((r20*x6816)));
evalcond[2]=(cj0+(((-1.0)*x6812*x6813))+((r02*x6809))+((r00*x6815)));
evalcond[3]=(sj0+((r10*x6815))+(((-1.0)*x6810*x6813))+((r12*x6809)));
evalcond[4]=(sj0+(((-1.0)*x6812*x6814))+(((-1.0)*r02*x6813))+((r00*x6816)));
evalcond[5]=(((r10*x6816))+(((-1.0)*x6810*x6814))+(((-1.0)*r12*x6813))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6817 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6817.valid){
continue;
}
CheckValue<IkReal> x6818=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6817.value)+(((1.5707963267949)*(x6818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6819=IKcos(j4);
IkReal x6820=IKsin(j4);
IkReal x6821=(r11*sj5);
IkReal x6822=(r21*sj5);
IkReal x6823=(r01*sj5);
IkReal x6824=((1.0)*x6819);
IkReal x6825=((1.0)*x6820);
IkReal x6826=(cj5*x6819);
IkReal x6827=(cj5*x6820);
evalcond[0]=(((r22*x6820))+((r20*x6826))+(((-1.0)*x6822*x6824)));
evalcond[1]=(((r20*x6827))+(((-1.0)*r22*x6824))+(((-1.0)*x6822*x6825)));
evalcond[2]=(((r02*x6820))+cj0+((r00*x6826))+(((-1.0)*x6823*x6824)));
evalcond[3]=(sj0+((r10*x6826))+((r12*x6820))+(((-1.0)*x6821*x6824)));
evalcond[4]=(sj0+((r00*x6827))+(((-1.0)*r02*x6824))+(((-1.0)*x6823*x6825)));
evalcond[5]=(((r10*x6827))+(((-1.0)*r12*x6824))+(((-1.0)*x6821*x6825))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.680635194225863)*px))+(((-2.10556211163397)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.680635194225863)*py))+(((-2.10556211163397)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.680635194225863)*px))+(((-2.10556211163397)*py))))+IKsqr(((((-0.680635194225863)*py))+(((-2.10556211163397)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.680635194225863)*px))+(((-2.10556211163397)*py))), ((((-0.680635194225863)*py))+(((-2.10556211163397)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6828=IKcos(j0);
IkReal x6829=IKsin(j0);
evalcond[0]=((((0.139)*x6829))+(((-1.0)*px))+(((-0.43)*x6828)));
evalcond[1]=((((-1.0)*py))+(((-0.43)*x6829))+(((-0.139)*x6828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6830=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6830;
j4eval[1]=IKsign(x6830);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6831=((1.0)*sj5);
IkReal x6832=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6831)));
j4eval[0]=x6832;
j4eval[1]=IKsign(x6832);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6831))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6833=((1.0)*sj5);
IkReal x6834=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6833)));
j4eval[0]=x6834;
j4eval[1]=IKsign(x6834);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6833)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6835=((1.0)*sj5);
CheckValue<IkReal> x6836 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6835)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6836.valid){
continue;
}
CheckValue<IkReal> x6837=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6835)))),-1);
if(!x6837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6836.value)+(((1.5707963267949)*(x6837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6838=IKcos(j4);
IkReal x6839=IKsin(j4);
IkReal x6840=((1.0)*cj0);
IkReal x6841=(r11*sj5);
IkReal x6842=(r21*sj5);
IkReal x6843=(r01*sj5);
IkReal x6844=((1.0)*x6838);
IkReal x6845=(cj5*x6838);
IkReal x6846=((1.0)*x6839);
IkReal x6847=(cj5*x6839);
evalcond[0]=(((r22*x6839))+((r20*x6845))+(((-1.0)*x6842*x6844)));
evalcond[1]=((((-1.0)*r22*x6844))+((r20*x6847))+(((-1.0)*x6842*x6846)));
evalcond[2]=((((-1.0)*x6843*x6846))+sj0+(((-1.0)*r02*x6844))+((r00*x6847)));
evalcond[3]=(((r02*x6839))+(((-1.0)*x6843*x6844))+(((-1.0)*x6840))+((r00*x6845)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x6841*x6844))+((r12*x6839))+((r10*x6845)));
evalcond[5]=((((-1.0)*x6840))+(((-1.0)*x6841*x6846))+(((-1.0)*r12*x6844))+((r10*x6847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6848=((1.0)*sj5);
CheckValue<IkReal> x6849 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6848)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6849.valid){
continue;
}
CheckValue<IkReal> x6850=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6848)))),-1);
if(!x6850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6849.value)+(((1.5707963267949)*(x6850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6851=IKcos(j4);
IkReal x6852=IKsin(j4);
IkReal x6853=((1.0)*cj0);
IkReal x6854=(r11*sj5);
IkReal x6855=(r21*sj5);
IkReal x6856=(r01*sj5);
IkReal x6857=((1.0)*x6851);
IkReal x6858=(cj5*x6851);
IkReal x6859=((1.0)*x6852);
IkReal x6860=(cj5*x6852);
evalcond[0]=(((r22*x6852))+(((-1.0)*x6855*x6857))+((r20*x6858)));
evalcond[1]=((((-1.0)*x6855*x6859))+(((-1.0)*r22*x6857))+((r20*x6860)));
evalcond[2]=(sj0+(((-1.0)*x6856*x6859))+(((-1.0)*r02*x6857))+((r00*x6860)));
evalcond[3]=((((-1.0)*x6853))+((r02*x6852))+(((-1.0)*x6856*x6857))+((r00*x6858)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6858))+((r12*x6852))+(((-1.0)*x6854*x6857)));
evalcond[5]=((((-1.0)*x6853))+(((-1.0)*r12*x6857))+(((-1.0)*x6854*x6859))+((r10*x6860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6861 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6861.valid){
continue;
}
CheckValue<IkReal> x6862=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6861.value)+(((1.5707963267949)*(x6862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6863=IKcos(j4);
IkReal x6864=IKsin(j4);
IkReal x6865=((1.0)*cj0);
IkReal x6866=(r11*sj5);
IkReal x6867=(r21*sj5);
IkReal x6868=(r01*sj5);
IkReal x6869=((1.0)*x6863);
IkReal x6870=(cj5*x6863);
IkReal x6871=((1.0)*x6864);
IkReal x6872=(cj5*x6864);
evalcond[0]=(((r22*x6864))+(((-1.0)*x6867*x6869))+((r20*x6870)));
evalcond[1]=((((-1.0)*r22*x6869))+(((-1.0)*x6867*x6871))+((r20*x6872)));
evalcond[2]=((((-1.0)*x6868*x6871))+sj0+(((-1.0)*r02*x6869))+((r00*x6872)));
evalcond[3]=(((r02*x6864))+(((-1.0)*x6868*x6869))+(((-1.0)*x6865))+((r00*x6870)));
evalcond[4]=((((-1.0)*sj0))+((r12*x6864))+(((-1.0)*x6866*x6869))+((r10*x6870)));
evalcond[5]=((((-1.0)*x6865))+(((-1.0)*r12*x6869))+(((-1.0)*x6866*x6871))+((r10*x6872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.19424460431655)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.19424460431655)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.19424460431655)*px))+IKsqr(((-7.19424460431655)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.19424460431655)*px), ((-7.19424460431655)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.139)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.139)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6873=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6873;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6873);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6874=((1.0)*sj5);
IkReal x6875=((((-1.0)*r00*x6874))+(((-1.0)*cj5*r01)));
j4eval[0]=x6875;
j4eval[1]=IKsign(x6875);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6874))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6876=cj5*cj5;
IkReal x6877=((1.0)*r21);
IkReal x6878=(cj5*r20);
IkReal x6879=((((-1.0)*r02*r22))+(((-1.0)*r01*x6877))+((r01*sj5*x6878))+(((-1.0)*r00*r20*x6876))+((cj5*r00*r21*sj5))+((r01*r21*x6876)));
j4eval[0]=x6879;
j4eval[1]=IKsign(x6879);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x6878))+(((-1.0)*cj0*sj5*x6877))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6880=cj5*cj5;
IkReal x6881=((1.0)*r21);
IkReal x6882=(cj5*r20);
CheckValue<IkReal> x6883=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*sj5*x6882))+(((-1.0)*r00*r20*x6880))+((r01*r21*x6880))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x6881)))),-1);
if(!x6883.valid){
continue;
}
CheckValue<IkReal> x6884 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x6882))+(((-1.0)*cj0*sj5*x6881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6883.value)))+(x6884.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6885=IKcos(j4);
IkReal x6886=IKsin(j4);
IkReal x6887=(r11*sj5);
IkReal x6888=(r21*sj5);
IkReal x6889=(r01*sj5);
IkReal x6890=((1.0)*x6885);
IkReal x6891=((1.0)*x6886);
IkReal x6892=(cj5*x6885);
IkReal x6893=(cj5*x6886);
evalcond[0]=((((-1.0)*x6888*x6890))+((r22*x6886))+((r20*x6892)));
evalcond[1]=((((-1.0)*x6888*x6891))+(((-1.0)*r22*x6890))+((r20*x6893)));
evalcond[2]=((((-1.0)*x6889*x6890))+cj0+((r02*x6886))+((r00*x6892)));
evalcond[3]=(((r10*x6892))+sj0+((r12*x6886))+(((-1.0)*x6887*x6890)));
evalcond[4]=((((-1.0)*x6889*x6891))+sj0+(((-1.0)*r02*x6890))+((r00*x6893)));
evalcond[5]=(((r10*x6893))+(((-1.0)*r12*x6890))+(((-1.0)*cj0))+(((-1.0)*x6887*x6891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6894=((1.0)*sj5);
CheckValue<IkReal> x6895 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6894)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6895.valid){
continue;
}
CheckValue<IkReal> x6896=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x6894)))),-1);
if(!x6896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6895.value)+(((1.5707963267949)*(x6896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6897=IKcos(j4);
IkReal x6898=IKsin(j4);
IkReal x6899=(r11*sj5);
IkReal x6900=(r21*sj5);
IkReal x6901=(r01*sj5);
IkReal x6902=((1.0)*x6897);
IkReal x6903=((1.0)*x6898);
IkReal x6904=(cj5*x6897);
IkReal x6905=(cj5*x6898);
evalcond[0]=((((-1.0)*x6900*x6902))+((r22*x6898))+((r20*x6904)));
evalcond[1]=((((-1.0)*x6900*x6903))+(((-1.0)*r22*x6902))+((r20*x6905)));
evalcond[2]=(((r00*x6904))+cj0+((r02*x6898))+(((-1.0)*x6901*x6902)));
evalcond[3]=(sj0+((r12*x6898))+((r10*x6904))+(((-1.0)*x6899*x6902)));
evalcond[4]=((((-1.0)*r02*x6902))+((r00*x6905))+sj0+(((-1.0)*x6901*x6903)));
evalcond[5]=((((-1.0)*r12*x6902))+((r10*x6905))+(((-1.0)*x6899*x6903))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6906 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6906.valid){
continue;
}
CheckValue<IkReal> x6907=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6906.value)+(((1.5707963267949)*(x6907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6908=IKcos(j4);
IkReal x6909=IKsin(j4);
IkReal x6910=(r11*sj5);
IkReal x6911=(r21*sj5);
IkReal x6912=(r01*sj5);
IkReal x6913=((1.0)*x6908);
IkReal x6914=((1.0)*x6909);
IkReal x6915=(cj5*x6908);
IkReal x6916=(cj5*x6909);
evalcond[0]=(((r22*x6909))+(((-1.0)*x6911*x6913))+((r20*x6915)));
evalcond[1]=((((-1.0)*x6911*x6914))+(((-1.0)*r22*x6913))+((r20*x6916)));
evalcond[2]=((((-1.0)*x6912*x6913))+((r00*x6915))+cj0+((r02*x6909)));
evalcond[3]=(sj0+(((-1.0)*x6910*x6913))+((r10*x6915))+((r12*x6909)));
evalcond[4]=((((-1.0)*x6912*x6914))+((r00*x6916))+sj0+(((-1.0)*r02*x6913)));
evalcond[5]=((((-1.0)*x6910*x6914))+((r10*x6916))+(((-1.0)*r12*x6913))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.19424460431655)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.19424460431655)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.19424460431655)*px))+IKsqr(((-7.19424460431655)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.19424460431655)*px), ((-7.19424460431655)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.139)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.139)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6917=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6917;
j4eval[1]=IKsign(x6917);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6918=((1.0)*sj5);
IkReal x6919=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6918)));
j4eval[0]=x6919;
j4eval[1]=IKsign(x6919);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x6918))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6920=((1.0)*sj5);
IkReal x6921=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6920)));
j4eval[0]=x6921;
j4eval[1]=IKsign(x6921);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6920))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6922=((1.0)*sj5);
CheckValue<IkReal> x6923=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6922)))),-1);
if(!x6923.valid){
continue;
}
CheckValue<IkReal> x6924 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6922))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6923.value)))+(x6924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6925=IKcos(j4);
IkReal x6926=IKsin(j4);
IkReal x6927=((1.0)*cj0);
IkReal x6928=(r11*sj5);
IkReal x6929=(r21*sj5);
IkReal x6930=(r01*sj5);
IkReal x6931=((1.0)*x6925);
IkReal x6932=(cj5*x6925);
IkReal x6933=((1.0)*x6926);
IkReal x6934=(cj5*x6926);
evalcond[0]=(((r20*x6932))+((r22*x6926))+(((-1.0)*x6929*x6931)));
evalcond[1]=(((r20*x6934))+(((-1.0)*r22*x6931))+(((-1.0)*x6929*x6933)));
evalcond[2]=(sj0+(((-1.0)*x6930*x6933))+((r00*x6934))+(((-1.0)*r02*x6931)));
evalcond[3]=((((-1.0)*x6930*x6931))+((r00*x6932))+((r02*x6926))+(((-1.0)*x6927)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6932))+((r12*x6926))+(((-1.0)*x6928*x6931)));
evalcond[5]=(((r10*x6934))+(((-1.0)*r12*x6931))+(((-1.0)*x6928*x6933))+(((-1.0)*x6927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6935=((1.0)*sj5);
CheckValue<IkReal> x6936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6935))+(((-1.0)*cj5*r11)))),-1);
if(!x6936.valid){
continue;
}
CheckValue<IkReal> x6937 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6936.value)))+(x6937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6938=IKcos(j4);
IkReal x6939=IKsin(j4);
IkReal x6940=((1.0)*cj0);
IkReal x6941=(r11*sj5);
IkReal x6942=(r21*sj5);
IkReal x6943=(r01*sj5);
IkReal x6944=((1.0)*x6938);
IkReal x6945=(cj5*x6938);
IkReal x6946=((1.0)*x6939);
IkReal x6947=(cj5*x6939);
evalcond[0]=((((-1.0)*x6942*x6944))+((r22*x6939))+((r20*x6945)));
evalcond[1]=((((-1.0)*x6942*x6946))+((r20*x6947))+(((-1.0)*r22*x6944)));
evalcond[2]=((((-1.0)*x6943*x6946))+sj0+(((-1.0)*r02*x6944))+((r00*x6947)));
evalcond[3]=((((-1.0)*x6943*x6944))+(((-1.0)*x6940))+((r00*x6945))+((r02*x6939)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6945))+(((-1.0)*x6941*x6944))+((r12*x6939)));
evalcond[5]=(((r10*x6947))+(((-1.0)*r12*x6944))+(((-1.0)*x6940))+(((-1.0)*x6941*x6946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6948 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6948.valid){
continue;
}
CheckValue<IkReal> x6949=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6948.value)+(((1.5707963267949)*(x6949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6950=IKcos(j4);
IkReal x6951=IKsin(j4);
IkReal x6952=((1.0)*cj0);
IkReal x6953=(r11*sj5);
IkReal x6954=(r21*sj5);
IkReal x6955=(r01*sj5);
IkReal x6956=((1.0)*x6950);
IkReal x6957=(cj5*x6950);
IkReal x6958=((1.0)*x6951);
IkReal x6959=(cj5*x6951);
evalcond[0]=(((r22*x6951))+((r20*x6957))+(((-1.0)*x6954*x6956)));
evalcond[1]=(((r20*x6959))+(((-1.0)*r22*x6956))+(((-1.0)*x6954*x6958)));
evalcond[2]=(sj0+(((-1.0)*x6955*x6958))+(((-1.0)*r02*x6956))+((r00*x6959)));
evalcond[3]=((((-1.0)*x6955*x6956))+(((-1.0)*x6952))+((r02*x6951))+((r00*x6957)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6957))+((r12*x6951))+(((-1.0)*x6953*x6956)));
evalcond[5]=(((r10*x6959))+(((-1.0)*r12*x6956))+(((-1.0)*x6952))+(((-1.0)*x6953*x6958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.680635194225863)*px))+(((2.10556211163397)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.680635194225863)*py))+(((2.10556211163397)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.680635194225863)*px))+(((2.10556211163397)*py))))+IKsqr(((((-0.680635194225863)*py))+(((2.10556211163397)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.680635194225863)*px))+(((2.10556211163397)*py))), ((((-0.680635194225863)*py))+(((2.10556211163397)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6960=IKsin(j0);
IkReal x6961=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.43)*x6961))+(((0.139)*x6960)));
evalcond[1]=((((-1.0)*py))+(((-0.139)*x6961))+(((0.43)*x6960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6962=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6962;
j4eval[1]=IKsign(x6962);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6963=((1.0)*sj5);
IkReal x6964=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6963)));
j4eval[0]=x6964;
j4eval[1]=IKsign(x6964);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6963))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6965=((1.0)*sj5);
IkReal x6966=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6965)));
j4eval[0]=x6966;
j4eval[1]=IKsign(x6966);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6965)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6967=((1.0)*sj5);
CheckValue<IkReal> x6968=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6967)))),-1);
if(!x6968.valid){
continue;
}
CheckValue<IkReal> x6969 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6967)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6968.value)))+(x6969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6970=IKcos(j4);
IkReal x6971=IKsin(j4);
IkReal x6972=((1.0)*cj0);
IkReal x6973=(r11*sj5);
IkReal x6974=(r21*sj5);
IkReal x6975=(r01*sj5);
IkReal x6976=((1.0)*x6970);
IkReal x6977=(cj5*x6970);
IkReal x6978=((1.0)*x6971);
IkReal x6979=(cj5*x6971);
evalcond[0]=((((-1.0)*x6974*x6976))+((r22*x6971))+((r20*x6977)));
evalcond[1]=((((-1.0)*x6974*x6978))+(((-1.0)*r22*x6976))+((r20*x6979)));
evalcond[2]=(sj0+(((-1.0)*r02*x6976))+((r00*x6979))+(((-1.0)*x6975*x6978)));
evalcond[3]=(((r00*x6977))+(((-1.0)*x6975*x6976))+(((-1.0)*x6972))+((r02*x6971)));
evalcond[4]=(((r12*x6971))+(((-1.0)*sj0))+(((-1.0)*x6973*x6976))+((r10*x6977)));
evalcond[5]=((((-1.0)*r12*x6976))+(((-1.0)*x6972))+(((-1.0)*x6973*x6978))+((r10*x6979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6980=((1.0)*sj5);
CheckValue<IkReal> x6981 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6981.valid){
continue;
}
CheckValue<IkReal> x6982=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6980)))),-1);
if(!x6982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6981.value)+(((1.5707963267949)*(x6982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6983=IKcos(j4);
IkReal x6984=IKsin(j4);
IkReal x6985=((1.0)*cj0);
IkReal x6986=(r11*sj5);
IkReal x6987=(r21*sj5);
IkReal x6988=(r01*sj5);
IkReal x6989=((1.0)*x6983);
IkReal x6990=(cj5*x6983);
IkReal x6991=((1.0)*x6984);
IkReal x6992=(cj5*x6984);
evalcond[0]=(((r22*x6984))+((r20*x6990))+(((-1.0)*x6987*x6989)));
evalcond[1]=(((r20*x6992))+(((-1.0)*x6987*x6991))+(((-1.0)*r22*x6989)));
evalcond[2]=(sj0+((r00*x6992))+(((-1.0)*x6988*x6991))+(((-1.0)*r02*x6989)));
evalcond[3]=((((-1.0)*x6985))+((r02*x6984))+((r00*x6990))+(((-1.0)*x6988*x6989)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x6986*x6989))+((r10*x6990))+((r12*x6984)));
evalcond[5]=(((r10*x6992))+(((-1.0)*x6985))+(((-1.0)*x6986*x6991))+(((-1.0)*r12*x6989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6993 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6993.valid){
continue;
}
CheckValue<IkReal> x6994=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6993.value)+(((1.5707963267949)*(x6994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6995=IKcos(j4);
IkReal x6996=IKsin(j4);
IkReal x6997=((1.0)*cj0);
IkReal x6998=(r11*sj5);
IkReal x6999=(r21*sj5);
IkReal x7000=(r01*sj5);
IkReal x7001=((1.0)*x6995);
IkReal x7002=(cj5*x6995);
IkReal x7003=((1.0)*x6996);
IkReal x7004=(cj5*x6996);
evalcond[0]=(((r20*x7002))+(((-1.0)*x6999*x7001))+((r22*x6996)));
evalcond[1]=((((-1.0)*r22*x7001))+((r20*x7004))+(((-1.0)*x6999*x7003)));
evalcond[2]=((((-1.0)*r02*x7001))+sj0+((r00*x7004))+(((-1.0)*x7000*x7003)));
evalcond[3]=(((r02*x6996))+((r00*x7002))+(((-1.0)*x7000*x7001))+(((-1.0)*x6997)));
evalcond[4]=((((-1.0)*sj0))+((r12*x6996))+(((-1.0)*x6998*x7001))+((r10*x7002)));
evalcond[5]=((((-1.0)*r12*x7001))+(((-1.0)*x6998*x7003))+((r10*x7004))+(((-1.0)*x6997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.680635194225863)*px))+(((2.10556211163397)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.680635194225863)*py))+(((2.10556211163397)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.680635194225863)*px))+(((2.10556211163397)*py))))+IKsqr(((((-0.680635194225863)*py))+(((2.10556211163397)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.680635194225863)*px))+(((2.10556211163397)*py))), ((((-0.680635194225863)*py))+(((2.10556211163397)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7005=IKsin(j0);
IkReal x7006=IKcos(j0);
evalcond[0]=((((0.139)*x7005))+(((-1.0)*px))+(((0.43)*x7006)));
evalcond[1]=((((-1.0)*py))+(((-0.139)*x7006))+(((0.43)*x7005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7007=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7007;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x7007);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7008=((1.0)*sj5);
IkReal x7009=((((-1.0)*r00*x7008))+(((-1.0)*cj5*r01)));
j4eval[0]=x7009;
j4eval[1]=IKsign(x7009);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7008))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7010=cj5*cj5;
IkReal x7011=((1.0)*r21);
IkReal x7012=(cj5*r20);
IkReal x7013=(((r01*r21*x7010))+(((-1.0)*r02*r22))+((r01*sj5*x7012))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x7010))+(((-1.0)*r01*x7011)));
j4eval[0]=x7013;
j4eval[1]=IKsign(x7013);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x7011))+((cj0*x7012)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7014=cj5*cj5;
IkReal x7015=((1.0)*r21);
IkReal x7016=(cj5*r20);
CheckValue<IkReal> x7017 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x7015))+((cj0*x7016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7017.valid){
continue;
}
CheckValue<IkReal> x7018=IKPowWithIntegerCheck(IKsign((((r01*r21*x7014))+(((-1.0)*r02*r22))+((r01*sj5*x7016))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x7014))+(((-1.0)*r01*x7015)))),-1);
if(!x7018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7017.value)+(((1.5707963267949)*(x7018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7019=IKcos(j4);
IkReal x7020=IKsin(j4);
IkReal x7021=(r11*sj5);
IkReal x7022=(r21*sj5);
IkReal x7023=(r01*sj5);
IkReal x7024=((1.0)*x7019);
IkReal x7025=((1.0)*x7020);
IkReal x7026=(cj5*x7019);
IkReal x7027=(cj5*x7020);
evalcond[0]=(((r20*x7026))+(((-1.0)*x7022*x7024))+((r22*x7020)));
evalcond[1]=((((-1.0)*r22*x7024))+((r20*x7027))+(((-1.0)*x7022*x7025)));
evalcond[2]=(cj0+((r00*x7026))+((r02*x7020))+(((-1.0)*x7023*x7024)));
evalcond[3]=(sj0+(((-1.0)*x7021*x7024))+((r12*x7020))+((r10*x7026)));
evalcond[4]=(sj0+((r00*x7027))+(((-1.0)*r02*x7024))+(((-1.0)*x7023*x7025)));
evalcond[5]=((((-1.0)*r12*x7024))+(((-1.0)*x7021*x7025))+((r10*x7027))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7028=((1.0)*sj5);
CheckValue<IkReal> x7029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7028))+(((-1.0)*cj5*r01)))),-1);
if(!x7029.valid){
continue;
}
CheckValue<IkReal> x7030 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x7028))+((cj5*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7029.value)))+(x7030.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7031=IKcos(j4);
IkReal x7032=IKsin(j4);
IkReal x7033=(r11*sj5);
IkReal x7034=(r21*sj5);
IkReal x7035=(r01*sj5);
IkReal x7036=((1.0)*x7031);
IkReal x7037=((1.0)*x7032);
IkReal x7038=(cj5*x7031);
IkReal x7039=(cj5*x7032);
evalcond[0]=((((-1.0)*x7034*x7036))+((r20*x7038))+((r22*x7032)));
evalcond[1]=((((-1.0)*x7034*x7037))+(((-1.0)*r22*x7036))+((r20*x7039)));
evalcond[2]=(cj0+((r00*x7038))+(((-1.0)*x7035*x7036))+((r02*x7032)));
evalcond[3]=(sj0+((r12*x7032))+((r10*x7038))+(((-1.0)*x7033*x7036)));
evalcond[4]=(sj0+(((-1.0)*r02*x7036))+((r00*x7039))+(((-1.0)*x7035*x7037)));
evalcond[5]=((((-1.0)*r12*x7036))+((r10*x7039))+(((-1.0)*x7033*x7037))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7040 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7040.valid){
continue;
}
CheckValue<IkReal> x7041=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7040.value)+(((1.5707963267949)*(x7041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7042=IKcos(j4);
IkReal x7043=IKsin(j4);
IkReal x7044=(r11*sj5);
IkReal x7045=(r21*sj5);
IkReal x7046=(r01*sj5);
IkReal x7047=((1.0)*x7042);
IkReal x7048=((1.0)*x7043);
IkReal x7049=(cj5*x7042);
IkReal x7050=(cj5*x7043);
evalcond[0]=((((-1.0)*x7045*x7047))+((r20*x7049))+((r22*x7043)));
evalcond[1]=(((r20*x7050))+(((-1.0)*r22*x7047))+(((-1.0)*x7045*x7048)));
evalcond[2]=(((r00*x7049))+cj0+((r02*x7043))+(((-1.0)*x7046*x7047)));
evalcond[3]=(sj0+((r12*x7043))+((r10*x7049))+(((-1.0)*x7044*x7047)));
evalcond[4]=(sj0+(((-1.0)*r02*x7047))+(((-1.0)*x7046*x7048))+((r00*x7050)));
evalcond[5]=(((r10*x7050))+(((-1.0)*r12*x7047))+(((-1.0)*x7044*x7048))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.19424460431655)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.19424460431655)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.19424460431655)*px))+IKsqr(((-7.19424460431655)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.19424460431655)*px), ((-7.19424460431655)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.139)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.139)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7051=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7051;
j4eval[1]=IKsign(x7051);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7052=((1.0)*sj5);
IkReal x7053=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7052)));
j4eval[0]=x7053;
j4eval[1]=IKsign(x7053);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x7052))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7054=((1.0)*sj5);
IkReal x7055=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7054)));
j4eval[0]=x7055;
j4eval[1]=IKsign(x7055);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x7054)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7056=((1.0)*sj5);
CheckValue<IkReal> x7057 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x7056)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7057.valid){
continue;
}
CheckValue<IkReal> x7058=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7056)))),-1);
if(!x7058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7057.value)+(((1.5707963267949)*(x7058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7059=IKcos(j4);
IkReal x7060=IKsin(j4);
IkReal x7061=((1.0)*cj0);
IkReal x7062=(r11*sj5);
IkReal x7063=(r21*sj5);
IkReal x7064=(r01*sj5);
IkReal x7065=((1.0)*x7059);
IkReal x7066=(cj5*x7059);
IkReal x7067=((1.0)*x7060);
IkReal x7068=(cj5*x7060);
evalcond[0]=(((r22*x7060))+(((-1.0)*x7063*x7065))+((r20*x7066)));
evalcond[1]=((((-1.0)*x7063*x7067))+((r20*x7068))+(((-1.0)*r22*x7065)));
evalcond[2]=(sj0+(((-1.0)*x7064*x7067))+((r00*x7068))+(((-1.0)*r02*x7065)));
evalcond[3]=((((-1.0)*x7061))+(((-1.0)*x7064*x7065))+((r00*x7066))+((r02*x7060)));
evalcond[4]=(((r12*x7060))+(((-1.0)*sj0))+(((-1.0)*x7062*x7065))+((r10*x7066)));
evalcond[5]=((((-1.0)*x7061))+(((-1.0)*x7062*x7067))+(((-1.0)*r12*x7065))+((r10*x7068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7069=((1.0)*sj5);
CheckValue<IkReal> x7070=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7069)))),-1);
if(!x7070.valid){
continue;
}
CheckValue<IkReal> x7071 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7070.value)))+(x7071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7072=IKcos(j4);
IkReal x7073=IKsin(j4);
IkReal x7074=((1.0)*cj0);
IkReal x7075=(r11*sj5);
IkReal x7076=(r21*sj5);
IkReal x7077=(r01*sj5);
IkReal x7078=((1.0)*x7072);
IkReal x7079=(cj5*x7072);
IkReal x7080=((1.0)*x7073);
IkReal x7081=(cj5*x7073);
evalcond[0]=(((r22*x7073))+(((-1.0)*x7076*x7078))+((r20*x7079)));
evalcond[1]=((((-1.0)*x7076*x7080))+((r20*x7081))+(((-1.0)*r22*x7078)));
evalcond[2]=(sj0+((r00*x7081))+(((-1.0)*r02*x7078))+(((-1.0)*x7077*x7080)));
evalcond[3]=((((-1.0)*x7074))+((r00*x7079))+(((-1.0)*x7077*x7078))+((r02*x7073)));
evalcond[4]=((((-1.0)*sj0))+((r10*x7079))+(((-1.0)*x7075*x7078))+((r12*x7073)));
evalcond[5]=((((-1.0)*x7074))+(((-1.0)*r12*x7078))+(((-1.0)*x7075*x7080))+((r10*x7081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7082 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7082.valid){
continue;
}
CheckValue<IkReal> x7083=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7082.value)+(((1.5707963267949)*(x7083.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7084=IKcos(j4);
IkReal x7085=IKsin(j4);
IkReal x7086=((1.0)*cj0);
IkReal x7087=(r11*sj5);
IkReal x7088=(r21*sj5);
IkReal x7089=(r01*sj5);
IkReal x7090=((1.0)*x7084);
IkReal x7091=(cj5*x7084);
IkReal x7092=((1.0)*x7085);
IkReal x7093=(cj5*x7085);
evalcond[0]=((((-1.0)*x7088*x7090))+((r22*x7085))+((r20*x7091)));
evalcond[1]=((((-1.0)*x7088*x7092))+(((-1.0)*r22*x7090))+((r20*x7093)));
evalcond[2]=(sj0+((r00*x7093))+(((-1.0)*x7089*x7092))+(((-1.0)*r02*x7090)));
evalcond[3]=(((r00*x7091))+(((-1.0)*x7089*x7090))+((r02*x7085))+(((-1.0)*x7086)));
evalcond[4]=((((-1.0)*sj0))+((r12*x7085))+(((-1.0)*x7087*x7090))+((r10*x7091)));
evalcond[5]=((((-1.0)*x7087*x7092))+(((-1.0)*r12*x7090))+((r10*x7093))+(((-1.0)*x7086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.19424460431655)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.19424460431655)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.19424460431655)*px))+IKsqr(((-7.19424460431655)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.19424460431655)*px), ((-7.19424460431655)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.139)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.139)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7094=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7094;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x7094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7095=((1.0)*sj5);
IkReal x7096=((((-1.0)*r00*x7095))+(((-1.0)*cj5*r01)));
j4eval[0]=x7096;
j4eval[1]=IKsign(x7096);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x7095))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7097=cj5*cj5;
IkReal x7098=((1.0)*r21);
IkReal x7099=(cj5*r20);
IkReal x7100=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x7097))+((r01*r21*x7097))+(((-1.0)*r01*x7098))+((cj5*r00*r21*sj5))+((r01*sj5*x7099)));
j4eval[0]=x7100;
j4eval[1]=IKsign(x7100);
j4eval[2]=((IKabs((((cj0*x7099))+(((-1.0)*cj0*sj5*x7098)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7101=cj5*cj5;
IkReal x7102=((1.0)*r21);
IkReal x7103=(cj5*r20);
CheckValue<IkReal> x7104 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x7103))+(((-1.0)*cj0*sj5*x7102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7104.valid){
continue;
}
CheckValue<IkReal> x7105=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*sj5*x7103))+((r01*r21*x7101))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x7102))+(((-1.0)*r00*r20*x7101)))),-1);
if(!x7105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7104.value)+(((1.5707963267949)*(x7105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7106=IKcos(j4);
IkReal x7107=IKsin(j4);
IkReal x7108=(r11*sj5);
IkReal x7109=(r21*sj5);
IkReal x7110=(r01*sj5);
IkReal x7111=((1.0)*x7106);
IkReal x7112=((1.0)*x7107);
IkReal x7113=(cj5*x7106);
IkReal x7114=(cj5*x7107);
evalcond[0]=(((r22*x7107))+(((-1.0)*x7109*x7111))+((r20*x7113)));
evalcond[1]=((((-1.0)*r22*x7111))+(((-1.0)*x7109*x7112))+((r20*x7114)));
evalcond[2]=(cj0+(((-1.0)*x7110*x7111))+((r02*x7107))+((r00*x7113)));
evalcond[3]=(sj0+((r12*x7107))+((r10*x7113))+(((-1.0)*x7108*x7111)));
evalcond[4]=(sj0+(((-1.0)*x7110*x7112))+(((-1.0)*r02*x7111))+((r00*x7114)));
evalcond[5]=((((-1.0)*r12*x7111))+((r10*x7114))+(((-1.0)*cj0))+(((-1.0)*x7108*x7112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7115=((1.0)*sj5);
CheckValue<IkReal> x7116=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7115))+(((-1.0)*cj5*r01)))),-1);
if(!x7116.valid){
continue;
}
CheckValue<IkReal> x7117 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x7115))+((cj5*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7116.value)))+(x7117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7118=IKcos(j4);
IkReal x7119=IKsin(j4);
IkReal x7120=(r11*sj5);
IkReal x7121=(r21*sj5);
IkReal x7122=(r01*sj5);
IkReal x7123=((1.0)*x7118);
IkReal x7124=((1.0)*x7119);
IkReal x7125=(cj5*x7118);
IkReal x7126=(cj5*x7119);
evalcond[0]=((((-1.0)*x7121*x7123))+((r20*x7125))+((r22*x7119)));
evalcond[1]=((((-1.0)*x7121*x7124))+((r20*x7126))+(((-1.0)*r22*x7123)));
evalcond[2]=(((r00*x7125))+cj0+((r02*x7119))+(((-1.0)*x7122*x7123)));
evalcond[3]=((((-1.0)*x7120*x7123))+((r12*x7119))+sj0+((r10*x7125)));
evalcond[4]=(((r00*x7126))+sj0+(((-1.0)*x7122*x7124))+(((-1.0)*r02*x7123)));
evalcond[5]=((((-1.0)*x7120*x7124))+((r10*x7126))+(((-1.0)*r12*x7123))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7127 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7127.valid){
continue;
}
CheckValue<IkReal> x7128=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7127.value)+(((1.5707963267949)*(x7128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7129=IKcos(j4);
IkReal x7130=IKsin(j4);
IkReal x7131=(r11*sj5);
IkReal x7132=(r21*sj5);
IkReal x7133=(r01*sj5);
IkReal x7134=((1.0)*x7129);
IkReal x7135=((1.0)*x7130);
IkReal x7136=(cj5*x7129);
IkReal x7137=(cj5*x7130);
evalcond[0]=(((r22*x7130))+(((-1.0)*x7132*x7134))+((r20*x7136)));
evalcond[1]=((((-1.0)*x7132*x7135))+(((-1.0)*r22*x7134))+((r20*x7137)));
evalcond[2]=(cj0+((r00*x7136))+(((-1.0)*x7133*x7134))+((r02*x7130)));
evalcond[3]=(sj0+((r10*x7136))+((r12*x7130))+(((-1.0)*x7131*x7134)));
evalcond[4]=(sj0+((r00*x7137))+(((-1.0)*x7133*x7135))+(((-1.0)*r02*x7134)));
evalcond[5]=((((-1.0)*r12*x7134))+((r10*x7137))+(((-1.0)*x7131*x7135))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7138=(cj1*cj2);
IkReal x7139=(cj5*r01);
IkReal x7140=(sj1*sj2);
IkReal x7141=(r00*sj5);
IkReal x7142=((430.0)*cj1);
IkReal x7143=((1000.0)*px);
CheckValue<IkReal> x7144=IKPowWithIntegerCheck(((((-139.0)*x7138))+(((139.0)*x7140))),-1);
if(!x7144.valid){
continue;
}
CheckValue<IkReal> x7145=IKPowWithIntegerCheck((x7140+(((-1.0)*x7138))),-1);
if(!x7145.valid){
continue;
}
if( IKabs(((x7144.value)*((((x7141*x7142))+(((470.0)*x7138*x7141))+((x7140*x7143))+((x7139*x7142))+(((-470.0)*x7140*x7141))+(((-1.0)*x7138*x7143))+(((470.0)*x7138*x7139))+(((-470.0)*x7139*x7140)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7145.value)*((x7139+x7141)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7144.value)*((((x7141*x7142))+(((470.0)*x7138*x7141))+((x7140*x7143))+((x7139*x7142))+(((-470.0)*x7140*x7141))+(((-1.0)*x7138*x7143))+(((470.0)*x7138*x7139))+(((-470.0)*x7139*x7140))))))+IKsqr(((x7145.value)*((x7139+x7141))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7144.value)*((((x7141*x7142))+(((470.0)*x7138*x7141))+((x7140*x7143))+((x7139*x7142))+(((-470.0)*x7140*x7141))+(((-1.0)*x7138*x7143))+(((470.0)*x7138*x7139))+(((-470.0)*x7139*x7140))))), ((x7145.value)*((x7139+x7141))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7146=IKcos(j0);
IkReal x7147=IKsin(j0);
IkReal x7148=((0.353)*cj2);
IkReal x7149=(r10*sj5);
IkReal x7150=(cj5*r11);
IkReal x7151=(r00*sj5);
IkReal x7152=(sj1*sj2);
IkReal x7153=(cj5*r01);
IkReal x7154=((1.0)*cj2);
IkReal x7155=(cj1*x7146);
IkReal x7156=(cj1*x7147);
evalcond[0]=(((x7146*x7152))+(((-1.0)*x7154*x7155))+(((-1.0)*x7153))+(((-1.0)*x7151)));
evalcond[1]=((((-1.0)*x7154*x7156))+(((-1.0)*x7149))+((x7147*x7152))+(((-1.0)*x7150)));
evalcond[2]=((((0.117)*x7153))+(((0.117)*x7151))+(((0.353)*x7146*x7152))+(((0.139)*x7147))+(((-0.43)*x7155))+(((-1.0)*x7148*x7155))+(((-1.0)*px)));
evalcond[3]=((((0.117)*x7150))+(((0.117)*x7149))+(((0.353)*x7147*x7152))+(((-0.43)*x7156))+(((-1.0)*x7148*x7156))+(((-1.0)*py))+(((-0.139)*x7146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7157=((1.0)*sj5);
IkReal x7158=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7157)));
j4eval[0]=x7158;
j4eval[1]=IKsign(x7158);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x7157))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7159=((1.0)*sj5);
IkReal x7160=((((-1.0)*r00*x7159))+(((-1.0)*cj5*r01)));
j4eval[0]=x7160;
j4eval[1]=IKsign(x7160);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7159))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7161=((1.0)*sj5);
IkReal x7162=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7162;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x7161))+(((-1.0)*cj0*r01*x7161))))));
j4eval[2]=IKsign(x7162);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7164 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7164)==0){
continue;
}
IkReal x7163=pow(x7164,-0.5);
CheckValue<IkReal> x7165 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7165.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7165.value));
IkReal gconst133=((-1.0)*r21*x7163);
IkReal gconst134=(r20*x7163);
CheckValue<IkReal> x7166 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7166.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7166.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7169 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7169.valid){
continue;
}
IkReal x7167=((-1.0)*(x7169.value));
IkReal x7168=x7163;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7167;
IkReal gconst132=x7167;
IkReal gconst133=((-1.0)*r21*x7168);
IkReal gconst134=(r20*x7168);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7172 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7172.valid){
continue;
}
IkReal x7170=((-1.0)*(x7172.value));
IkReal x7171=x7163;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7170;
IkReal gconst132=x7170;
IkReal gconst133=((-1.0)*r21*x7171);
IkReal gconst134=(r20*x7171);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7175 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7175.valid){
continue;
}
IkReal x7173=((-1.0)*(x7175.value));
IkReal x7174=x7163;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7173;
IkReal gconst132=x7173;
IkReal gconst133=((-1.0)*r21*x7174);
IkReal gconst134=(r20*x7174);
IkReal x7176=((1.0)*(r22*r22));
CheckValue<IkReal> x7180=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7176))),-1);
if(!x7180.valid){
continue;
}
IkReal x7177=x7180.value;
IkReal x7178=((1.0)*x7177);
IkReal x7179=((((-1.0)*x7176))+(((-1.0)*x7178*(r20*r20*r20*r20)))+(((-1.0)*x7178*(r21*r21*r21*r21)))+(((-2.0)*x7177*(r20*r20)*(r21*r21))));
j4eval[0]=x7179;
j4eval[1]=IKsign(x7179);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7181=(gconst134*r20);
IkReal x7182=(cj1*cj2);
IkReal x7183=(gconst133*r21);
IkReal x7184=(sj1*sj2);
CheckValue<IkReal> x7185=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7181*x7181)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7183*x7183)))+(((2.0)*x7181*x7183)))),-1);
if(!x7185.valid){
continue;
}
CheckValue<IkReal> x7186 = IKatan2WithCheck(IkReal((((r22*x7184))+(((-1.0)*r22*x7182)))),IkReal((((x7181*x7184))+((x7182*x7183))+(((-1.0)*x7183*x7184))+(((-1.0)*x7181*x7182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7185.value)))+(x7186.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7187=IKsin(j4);
IkReal x7188=IKcos(j4);
IkReal x7189=(gconst134*r10);
IkReal x7190=(cj2*sj1);
IkReal x7191=(gconst133*r11);
IkReal x7192=(gconst133*r01);
IkReal x7193=(gconst133*r21);
IkReal x7194=(cj1*sj2);
IkReal x7195=((1.0)*x7188);
IkReal x7196=((1.0)*x7187);
IkReal x7197=(gconst134*x7188);
IkReal x7198=(gconst134*x7187);
evalcond[0]=(((r20*x7198))+(((-1.0)*x7193*x7196))+(((-1.0)*r22*x7195)));
evalcond[1]=(sj0+((r00*x7198))+(((-1.0)*r02*x7195))+(((-1.0)*x7192*x7196)));
evalcond[2]=((((-1.0)*x7191*x7196))+(((-1.0)*r12*x7195))+(((-1.0)*cj0))+((x7187*x7189)));
evalcond[3]=(((r20*x7197))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7193*x7195))+((r22*x7187)));
evalcond[4]=(((r00*x7197))+((r02*x7187))+(((-1.0)*x7192*x7195))+((cj0*x7190))+((cj0*x7194)));
evalcond[5]=(((r12*x7187))+(((-1.0)*x7191*x7195))+((sj0*x7190))+((sj0*x7194))+((x7188*x7189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7199=((1.0)*gconst133);
CheckValue<IkReal> x7200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7199))+(((-1.0)*gconst134*r01)))),-1);
if(!x7200.valid){
continue;
}
CheckValue<IkReal> x7201 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7199))+((cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7200.value)))+(x7201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7202=IKsin(j4);
IkReal x7203=IKcos(j4);
IkReal x7204=(gconst134*r10);
IkReal x7205=(cj2*sj1);
IkReal x7206=(gconst133*r11);
IkReal x7207=(gconst133*r01);
IkReal x7208=(gconst133*r21);
IkReal x7209=(cj1*sj2);
IkReal x7210=((1.0)*x7203);
IkReal x7211=((1.0)*x7202);
IkReal x7212=(gconst134*x7203);
IkReal x7213=(gconst134*x7202);
evalcond[0]=(((r20*x7213))+(((-1.0)*x7208*x7211))+(((-1.0)*r22*x7210)));
evalcond[1]=(((r00*x7213))+sj0+(((-1.0)*r02*x7210))+(((-1.0)*x7207*x7211)));
evalcond[2]=((((-1.0)*x7206*x7211))+((x7202*x7204))+(((-1.0)*r12*x7210))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7202))+((r20*x7212))+(((-1.0)*x7208*x7210)));
evalcond[4]=(((r00*x7212))+((cj0*x7209))+((cj0*x7205))+((r02*x7202))+(((-1.0)*x7207*x7210)));
evalcond[5]=(((x7203*x7204))+(((-1.0)*x7206*x7210))+((r12*x7202))+((sj0*x7209))+((sj0*x7205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7214=((1.0)*gconst133);
CheckValue<IkReal> x7215 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst134*r20*sj0))+(((-1.0)*r21*sj0*x7214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7215.valid){
continue;
}
CheckValue<IkReal> x7216=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7214))+(((-1.0)*gconst134*r11)))),-1);
if(!x7216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7215.value)+(((1.5707963267949)*(x7216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7217=IKsin(j4);
IkReal x7218=IKcos(j4);
IkReal x7219=(gconst134*r10);
IkReal x7220=(cj2*sj1);
IkReal x7221=(gconst133*r11);
IkReal x7222=(gconst133*r01);
IkReal x7223=(gconst133*r21);
IkReal x7224=(cj1*sj2);
IkReal x7225=((1.0)*x7218);
IkReal x7226=((1.0)*x7217);
IkReal x7227=(gconst134*x7218);
IkReal x7228=(gconst134*x7217);
evalcond[0]=(((r20*x7228))+(((-1.0)*r22*x7225))+(((-1.0)*x7223*x7226)));
evalcond[1]=((((-1.0)*r02*x7225))+sj0+((r00*x7228))+(((-1.0)*x7222*x7226)));
evalcond[2]=((((-1.0)*x7221*x7226))+(((-1.0)*r12*x7225))+(((-1.0)*cj0))+((x7217*x7219)));
evalcond[3]=(((r20*x7227))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7217))+(((-1.0)*x7223*x7225)));
evalcond[4]=(((r00*x7227))+((r02*x7217))+(((-1.0)*x7222*x7225))+((cj0*x7220))+((cj0*x7224)));
evalcond[5]=(((sj0*x7220))+((sj0*x7224))+((r12*x7217))+(((-1.0)*x7221*x7225))+((x7218*x7219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7230 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7230)==0){
continue;
}
IkReal x7229=pow(x7230,-0.5);
CheckValue<IkReal> x7231 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7231.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7231.value))));
IkReal gconst136=((1.0)*r21*x7229);
IkReal gconst137=((-1.0)*r20*x7229);
CheckValue<IkReal> x7232 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7232.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7232.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7235 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7235.valid){
continue;
}
IkReal x7233=((1.0)*(x7235.value));
IkReal x7234=x7229;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7233)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7233)));
IkReal gconst136=((1.0)*r21*x7234);
IkReal gconst137=((-1.0)*r20*x7234);
IkReal x7236=r22*r22;
IkReal x7237=((1.0)*x7236);
CheckValue<IkReal> x7241=IKPowWithIntegerCheck(((-1.0)+x7236),-1);
if(!x7241.valid){
continue;
}
IkReal x7238=x7241.value;
if((((1.0)+(((-1.0)*x7237)))) < -0.00001)
continue;
IkReal x7239=IKsqrt(((1.0)+(((-1.0)*x7237))));
IkReal x7240=(sj0*x7238*x7239);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7240+(((-1.0)*x7237*x7240))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7244 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7244.valid){
continue;
}
IkReal x7242=((1.0)*(x7244.value));
IkReal x7243=x7229;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7242)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7242)));
IkReal gconst136=((1.0)*r21*x7243);
IkReal gconst137=((-1.0)*r20*x7243);
IkReal x7245=r22*r22;
IkReal x7246=((1.0)*x7245);
CheckValue<IkReal> x7250=IKPowWithIntegerCheck(((-1.0)+x7245),-1);
if(!x7250.valid){
continue;
}
IkReal x7247=x7250.value;
if((((1.0)+(((-1.0)*x7246)))) < -0.00001)
continue;
IkReal x7248=IKsqrt(((1.0)+(((-1.0)*x7246))));
IkReal x7249=(cj0*x7247*x7248);
j4eval[0]=((IKabs(((((-1.0)*x7246*x7249))+x7249)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7253 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7253.valid){
continue;
}
IkReal x7251=((1.0)*(x7253.value));
IkReal x7252=x7229;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7251)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7251)));
IkReal gconst136=((1.0)*r21*x7252);
IkReal gconst137=((-1.0)*r20*x7252);
IkReal x7254=r22*r22;
IkReal x7255=(cj0*r02);
IkReal x7256=(r12*sj0);
CheckValue<IkReal> x7260=IKPowWithIntegerCheck(((-1.0)+x7254),-1);
if(!x7260.valid){
continue;
}
IkReal x7257=x7260.value;
if((((1.0)+(((-1.0)*x7254)))) < -0.00001)
continue;
IkReal x7258=IKsqrt(((1.0)+(((-1.0)*x7254))));
IkReal x7259=((1.0)*r22*x7257*x7258);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x7255*x7259))+(((-1.0)*x7256*x7259)))))+(IKabs((x7255+x7256))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7261=((1.0)*gconst136);
CheckValue<IkReal> x7262 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7261))+((gconst137*r10*sj0))+((cj0*gconst137*r00))+(((-1.0)*r11*sj0*x7261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7262.valid){
continue;
}
CheckValue<IkReal> x7263=IKPowWithIntegerCheck(IKsign((((gconst136*r20))+((gconst137*r21)))),-1);
if(!x7263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7262.value)+(((1.5707963267949)*(x7263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7264=IKsin(j4);
IkReal x7265=IKcos(j4);
IkReal x7266=(gconst136*r01);
IkReal x7267=(cj2*sj1);
IkReal x7268=(gconst136*r11);
IkReal x7269=(gconst136*r21);
IkReal x7270=(cj1*sj2);
IkReal x7271=((1.0)*x7265);
IkReal x7272=(gconst137*x7265);
IkReal x7273=((1.0)*x7264);
IkReal x7274=(gconst137*x7264);
evalcond[0]=((((-1.0)*r22*x7271))+((r20*x7274))+(((-1.0)*x7269*x7273)));
evalcond[1]=((((-1.0)*x7266*x7273))+sj0+(((-1.0)*r02*x7271))+((r00*x7274)));
evalcond[2]=((((-1.0)*r12*x7271))+((r10*x7274))+(((-1.0)*x7268*x7273))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7264))+((r20*x7272))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7269*x7271)));
evalcond[4]=(((cj0*x7267))+(((-1.0)*x7266*x7271))+((r02*x7264))+((r00*x7272))+((cj0*x7270)));
evalcond[5]=(((r12*x7264))+((sj0*x7267))+((r10*x7272))+(((-1.0)*x7268*x7271))+((sj0*x7270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7275=((1.0)*gconst136);
CheckValue<IkReal> x7276 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7275))+((cj0*gconst137*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7276.valid){
continue;
}
CheckValue<IkReal> x7277=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r01))+(((-1.0)*r00*x7275)))),-1);
if(!x7277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7276.value)+(((1.5707963267949)*(x7277.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7278=IKsin(j4);
IkReal x7279=IKcos(j4);
IkReal x7280=(gconst136*r01);
IkReal x7281=(cj2*sj1);
IkReal x7282=(gconst136*r11);
IkReal x7283=(gconst136*r21);
IkReal x7284=(cj1*sj2);
IkReal x7285=((1.0)*x7279);
IkReal x7286=(gconst137*x7279);
IkReal x7287=((1.0)*x7278);
IkReal x7288=(gconst137*x7278);
evalcond[0]=((((-1.0)*x7283*x7287))+((r20*x7288))+(((-1.0)*r22*x7285)));
evalcond[1]=(sj0+(((-1.0)*x7280*x7287))+((r00*x7288))+(((-1.0)*r02*x7285)));
evalcond[2]=((((-1.0)*x7282*x7287))+(((-1.0)*r12*x7285))+((r10*x7288))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7283*x7285))+((r20*x7286))+((r22*x7278)));
evalcond[4]=(((cj0*x7281))+((cj0*x7284))+(((-1.0)*x7280*x7285))+((r00*x7286))+((r02*x7278)));
evalcond[5]=((((-1.0)*x7282*x7285))+((sj0*x7281))+((sj0*x7284))+((r12*x7278))+((r10*x7286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7289=((1.0)*gconst136);
CheckValue<IkReal> x7290=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r11))+(((-1.0)*r10*x7289)))),-1);
if(!x7290.valid){
continue;
}
CheckValue<IkReal> x7291 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst137*r20*sj0))+(((-1.0)*r21*sj0*x7289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7290.value)))+(x7291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7292=IKsin(j4);
IkReal x7293=IKcos(j4);
IkReal x7294=(gconst136*r01);
IkReal x7295=(cj2*sj1);
IkReal x7296=(gconst136*r11);
IkReal x7297=(gconst136*r21);
IkReal x7298=(cj1*sj2);
IkReal x7299=((1.0)*x7293);
IkReal x7300=(gconst137*x7293);
IkReal x7301=((1.0)*x7292);
IkReal x7302=(gconst137*x7292);
evalcond[0]=((((-1.0)*x7297*x7301))+(((-1.0)*r22*x7299))+((r20*x7302)));
evalcond[1]=(sj0+(((-1.0)*r02*x7299))+(((-1.0)*x7294*x7301))+((r00*x7302)));
evalcond[2]=(((r10*x7302))+(((-1.0)*x7296*x7301))+(((-1.0)*r12*x7299))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7292))+((r20*x7300))+(((-1.0)*x7297*x7299)));
evalcond[4]=(((cj0*x7295))+((cj0*x7298))+((r02*x7292))+(((-1.0)*x7294*x7299))+((r00*x7300)));
evalcond[5]=(((r12*x7292))+((r10*x7300))+(((-1.0)*x7296*x7299))+((sj0*x7295))+((sj0*x7298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7303=((-1.0)*r00);
IkReal x7305 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7305)==0){
continue;
}
IkReal x7304=pow(x7305,-0.5);
CheckValue<IkReal> x7306 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7303),IKFAST_ATAN2_MAGTHRESH);
if(!x7306.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7306.value));
IkReal gconst139=(r01*x7304);
IkReal gconst140=(x7303*x7304);
CheckValue<IkReal> x7307 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7307.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7307.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7308=((-1.0)*r00);
IkReal x7309=x7304;
CheckValue<IkReal> x7311 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7308),IKFAST_ATAN2_MAGTHRESH);
if(!x7311.valid){
continue;
}
IkReal x7310=((-1.0)*(x7311.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7310;
IkReal gconst138=x7310;
IkReal gconst139=(r01*x7309);
IkReal gconst140=(x7308*x7309);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7312=((1.0)*gconst139);
CheckValue<IkReal> x7313=IKPowWithIntegerCheck(IKsign((((gconst139*r20))+((gconst140*r21)))),-1);
if(!x7313.valid){
continue;
}
CheckValue<IkReal> x7314 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7312))+((gconst140*r10*sj0))+(((-1.0)*r11*sj0*x7312))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7313.value)))+(x7314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7315=IKsin(j4);
IkReal x7316=IKcos(j4);
IkReal x7317=(cj2*sj1);
IkReal x7318=(gconst140*r10);
IkReal x7319=(cj1*sj2);
IkReal x7320=((1.0)*x7316);
IkReal x7321=(gconst140*x7316);
IkReal x7322=(gconst140*x7315);
IkReal x7323=((1.0)*gconst139*x7315);
evalcond[0]=((((-1.0)*r22*x7320))+(((-1.0)*r21*x7323))+((r20*x7322)));
evalcond[1]=(sj0+(((-1.0)*r01*x7323))+((r00*x7322))+(((-1.0)*r02*x7320)));
evalcond[2]=(((x7315*x7318))+(((-1.0)*r11*x7323))+(((-1.0)*r12*x7320))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7315))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst139*r21*x7320))+((r20*x7321)));
evalcond[4]=(((r02*x7315))+((r00*x7321))+(((-1.0)*gconst139*r01*x7320))+((cj0*x7317))+((cj0*x7319)));
evalcond[5]=(((r12*x7315))+((sj0*x7319))+((sj0*x7317))+(((-1.0)*gconst139*r11*x7320))+((x7316*x7318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7324=((1.0)*gconst139);
CheckValue<IkReal> x7325=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r11))+(((-1.0)*r10*x7324)))),-1);
if(!x7325.valid){
continue;
}
CheckValue<IkReal> x7326 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7324))+((gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7325.value)))+(x7326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7327=IKsin(j4);
IkReal x7328=IKcos(j4);
IkReal x7329=(cj2*sj1);
IkReal x7330=(gconst140*r10);
IkReal x7331=(cj1*sj2);
IkReal x7332=((1.0)*x7328);
IkReal x7333=(gconst140*x7328);
IkReal x7334=(gconst140*x7327);
IkReal x7335=((1.0)*gconst139*x7327);
evalcond[0]=((((-1.0)*r21*x7335))+((r20*x7334))+(((-1.0)*r22*x7332)));
evalcond[1]=((((-1.0)*r02*x7332))+sj0+((r00*x7334))+(((-1.0)*r01*x7335)));
evalcond[2]=((((-1.0)*r12*x7332))+((x7327*x7330))+(((-1.0)*r11*x7335))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7327))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7333))+(((-1.0)*gconst139*r21*x7332)));
evalcond[4]=(((cj0*x7329))+((r00*x7333))+(((-1.0)*gconst139*r01*x7332))+((cj0*x7331))+((r02*x7327)));
evalcond[5]=(((x7328*x7330))+((sj0*x7331))+((r12*x7327))+(((-1.0)*gconst139*r11*x7332))+((sj0*x7329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7336=((-1.0)*r01);
IkReal x7338 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7338)==0){
continue;
}
IkReal x7337=pow(x7338,-0.5);
CheckValue<IkReal> x7339 = IKatan2WithCheck(IkReal(x7336),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7339.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7339.value))));
IkReal gconst142=(x7336*x7337);
IkReal gconst143=((1.0)*r00*x7337);
CheckValue<IkReal> x7340 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7340.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7340.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7341=((-1.0)*r01);
CheckValue<IkReal> x7344 = IKatan2WithCheck(IkReal(x7341),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7344.valid){
continue;
}
IkReal x7342=((1.0)*(x7344.value));
IkReal x7343=x7337;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7342)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7342)));
IkReal gconst142=(x7341*x7343);
IkReal gconst143=((1.0)*r00*x7343);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x7345=((-1.0)*r01);
CheckValue<IkReal> x7348 = IKatan2WithCheck(IkReal(x7345),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7348.valid){
continue;
}
IkReal x7346=((1.0)*(x7348.value));
IkReal x7347=x7337;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7346)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7346)));
IkReal gconst142=(x7345*x7347);
IkReal gconst143=((1.0)*r00*x7347);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7349=((-1.0)*r01);
CheckValue<IkReal> x7352 = IKatan2WithCheck(IkReal(x7349),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7352.valid){
continue;
}
IkReal x7350=((1.0)*(x7352.value));
IkReal x7351=x7337;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7350)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7350)));
IkReal gconst142=(x7349*x7351);
IkReal gconst143=((1.0)*r00*x7351);
IkReal x7353=r02*r02;
IkReal x7354=(r12*sj0);
IkReal x7355=x7337;
IkReal x7356=(cj0*x7355);
j4eval[0]=((IKabs((((x7353*x7356))+((r02*x7354*x7355))+(((-1.0)*x7356)))))+(IKabs((x7354+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7357=((1.0)*gconst142);
CheckValue<IkReal> x7358=IKPowWithIntegerCheck(IKsign((((gconst143*r21))+((gconst142*r20)))),-1);
if(!x7358.valid){
continue;
}
CheckValue<IkReal> x7359 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x7357))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7357))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7358.value)))+(x7359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7360=IKsin(j4);
IkReal x7361=IKcos(j4);
IkReal x7362=(gconst143*r00);
IkReal x7363=(cj2*sj1);
IkReal x7364=(gconst142*r21);
IkReal x7365=(gconst142*r11);
IkReal x7366=(gconst142*r01);
IkReal x7367=(cj1*sj2);
IkReal x7368=((1.0)*x7361);
IkReal x7369=((1.0)*x7360);
IkReal x7370=(gconst143*x7361);
IkReal x7371=(gconst143*x7360);
evalcond[0]=((((-1.0)*x7364*x7369))+((r20*x7371))+(((-1.0)*r22*x7368)));
evalcond[1]=(sj0+(((-1.0)*x7366*x7369))+((x7360*x7362))+(((-1.0)*r02*x7368)));
evalcond[2]=((((-1.0)*r12*x7368))+(((-1.0)*x7365*x7369))+((r10*x7371))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x7364*x7368))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7370))+((r22*x7360)));
evalcond[4]=((((-1.0)*x7366*x7368))+((cj0*x7363))+((cj0*x7367))+((x7361*x7362))+((r02*x7360)));
evalcond[5]=(((r12*x7360))+((sj0*x7367))+((sj0*x7363))+(((-1.0)*x7365*x7368))+((r10*x7370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7372=((1.0)*gconst142);
CheckValue<IkReal> x7373=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r01))+(((-1.0)*r00*x7372)))),-1);
if(!x7373.valid){
continue;
}
CheckValue<IkReal> x7374 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7372))+((cj0*gconst143*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7373.value)))+(x7374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7375=IKsin(j4);
IkReal x7376=IKcos(j4);
IkReal x7377=(gconst143*r00);
IkReal x7378=(cj2*sj1);
IkReal x7379=(gconst142*r21);
IkReal x7380=(gconst142*r11);
IkReal x7381=(gconst142*r01);
IkReal x7382=(cj1*sj2);
IkReal x7383=((1.0)*x7376);
IkReal x7384=((1.0)*x7375);
IkReal x7385=(gconst143*x7376);
IkReal x7386=(gconst143*x7375);
evalcond[0]=((((-1.0)*r22*x7383))+(((-1.0)*x7379*x7384))+((r20*x7386)));
evalcond[1]=((((-1.0)*r02*x7383))+sj0+(((-1.0)*x7381*x7384))+((x7375*x7377)));
evalcond[2]=((((-1.0)*x7380*x7384))+((r10*x7386))+(((-1.0)*r12*x7383))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x7379*x7383))+((r20*x7385))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7375)));
evalcond[4]=(((r02*x7375))+(((-1.0)*x7381*x7383))+((x7376*x7377))+((cj0*x7378))+((cj0*x7382)));
evalcond[5]=(((sj0*x7382))+((r12*x7375))+(((-1.0)*x7380*x7383))+((r10*x7385))+((sj0*x7378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7387=((1.0)*gconst142);
CheckValue<IkReal> x7388=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r11))+(((-1.0)*r10*x7387)))),-1);
if(!x7388.valid){
continue;
}
CheckValue<IkReal> x7389 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7387))+((gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7388.value)))+(x7389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7390=IKsin(j4);
IkReal x7391=IKcos(j4);
IkReal x7392=(gconst143*r00);
IkReal x7393=(cj2*sj1);
IkReal x7394=(gconst142*r21);
IkReal x7395=(gconst142*r11);
IkReal x7396=(gconst142*r01);
IkReal x7397=(cj1*sj2);
IkReal x7398=((1.0)*x7391);
IkReal x7399=((1.0)*x7390);
IkReal x7400=(gconst143*x7391);
IkReal x7401=(gconst143*x7390);
evalcond[0]=((((-1.0)*r22*x7398))+((r20*x7401))+(((-1.0)*x7394*x7399)));
evalcond[1]=(sj0+(((-1.0)*r02*x7398))+(((-1.0)*x7396*x7399))+((x7390*x7392)));
evalcond[2]=((((-1.0)*r12*x7398))+(((-1.0)*x7395*x7399))+((r10*x7401))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7400))+(((-1.0)*x7394*x7398))+((r22*x7390))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x7396*x7398))+((r02*x7390))+((x7391*x7392))+((cj0*x7397))+((cj0*x7393)));
evalcond[5]=((((-1.0)*x7395*x7398))+((r12*x7390))+((sj0*x7397))+((sj0*x7393))+((r10*x7400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7402=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7402;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x7402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7403=((1.0)*sj5);
IkReal x7404=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7403)));
j4eval[0]=x7404;
j4eval[1]=IKsign(x7404);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x7403)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7405=(cj1*sj2);
IkReal x7406=(cj5*r00);
IkReal x7407=((1.0)*r02);
IkReal x7408=(cj2*sj1);
IkReal x7409=((1.0)*r01*sj5);
IkReal x7410=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7410;
j4eval[1]=((IKabs((((x7406*x7408))+(((-1.0)*x7405*x7409))+(((-1.0)*x7408*x7409))+((x7405*x7406)))))+(IKabs(((((-1.0)*x7405*x7407))+(((-1.0)*x7407*x7408))))));
j4eval[2]=IKsign(x7410);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7411=(cj1*sj2);
IkReal x7412=(cj5*r00);
IkReal x7413=((1.0)*r02);
IkReal x7414=(cj2*sj1);
IkReal x7415=((1.0)*r01*sj5);
CheckValue<IkReal> x7416=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7416.valid){
continue;
}
CheckValue<IkReal> x7417 = IKatan2WithCheck(IkReal(((((-1.0)*x7414*x7415))+(((-1.0)*x7411*x7415))+((x7411*x7412))+((x7412*x7414)))),IkReal(((((-1.0)*x7411*x7413))+(((-1.0)*x7413*x7414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7416.value)))+(x7417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7418=IKcos(j4);
IkReal x7419=IKsin(j4);
IkReal x7420=((1.0)*x7418);
IkReal x7421=(cj5*x7418);
IkReal x7422=(cj5*x7419);
IkReal x7423=((1.0)*sj5*x7419);
evalcond[0]=(((r00*x7421))+((r02*x7419))+(((-1.0)*r01*sj5*x7420)));
evalcond[1]=((((-1.0)*r22*x7420))+((r20*x7422))+(((-1.0)*r21*x7423)));
evalcond[2]=((((-1.0)*r11*x7423))+(((-1.0)*r12*x7420))+((r10*x7422)));
evalcond[3]=((1.0)+((r00*x7422))+(((-1.0)*r02*x7420))+(((-1.0)*r01*x7423)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x7421))+(((-1.0)*r11*sj5*x7420))+((r12*x7419)));
evalcond[5]=(((r20*x7421))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7419))+(((-1.0)*r21*sj5*x7420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7424=((1.0)*sj5);
CheckValue<IkReal> x7425 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7424)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7425.valid){
continue;
}
CheckValue<IkReal> x7426=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7424)))),-1);
if(!x7426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7425.value)+(((1.5707963267949)*(x7426.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7427=IKcos(j4);
IkReal x7428=IKsin(j4);
IkReal x7429=((1.0)*x7427);
IkReal x7430=(cj5*x7427);
IkReal x7431=(cj5*x7428);
IkReal x7432=((1.0)*sj5*x7428);
evalcond[0]=(((r00*x7430))+((r02*x7428))+(((-1.0)*r01*sj5*x7429)));
evalcond[1]=((((-1.0)*r22*x7429))+((r20*x7431))+(((-1.0)*r21*x7432)));
evalcond[2]=((((-1.0)*r11*x7432))+((r10*x7431))+(((-1.0)*r12*x7429)));
evalcond[3]=((1.0)+(((-1.0)*r01*x7432))+((r00*x7431))+(((-1.0)*r02*x7429)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x7430))+(((-1.0)*r11*sj5*x7429))+((r12*x7428)));
evalcond[5]=(((r20*x7430))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7428))+(((-1.0)*r21*sj5*x7429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7433 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7433.valid){
continue;
}
CheckValue<IkReal> x7434=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7433.value)+(((1.5707963267949)*(x7434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7435=IKcos(j4);
IkReal x7436=IKsin(j4);
IkReal x7437=((1.0)*x7435);
IkReal x7438=(cj5*x7435);
IkReal x7439=(cj5*x7436);
IkReal x7440=((1.0)*sj5*x7436);
evalcond[0]=(((r00*x7438))+((r02*x7436))+(((-1.0)*r01*sj5*x7437)));
evalcond[1]=((((-1.0)*r22*x7437))+((r20*x7439))+(((-1.0)*r21*x7440)));
evalcond[2]=(((r10*x7439))+(((-1.0)*r12*x7437))+(((-1.0)*r11*x7440)));
evalcond[3]=((1.0)+((r00*x7439))+(((-1.0)*r01*x7440))+(((-1.0)*r02*x7437)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x7438))+(((-1.0)*r11*sj5*x7437))+((r12*x7436)));
evalcond[5]=(((r20*x7438))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7436))+(((-1.0)*r21*sj5*x7437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7441=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7441;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x7441);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7442=((1.0)*sj5);
IkReal x7443=((((-1.0)*cj5*r21))+(((-1.0)*r20*x7442)));
j4eval[0]=x7443;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x7442))))));
j4eval[2]=IKsign(x7443);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7444=cj5*cj5;
IkReal x7445=r01*r01;
IkReal x7446=(cj5*r00);
IkReal x7447=(r01*sj5);
IkReal x7448=((((-1.0)*x7444*x7445))+(((-2.0)*x7446*x7447))+((x7444*(r00*r00)))+(r02*r02)+x7445);
j4eval[0]=x7448;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7447))+x7446))));
j4eval[2]=IKsign(x7448);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7449=cj5*cj5;
IkReal x7450=r01*r01;
IkReal x7451=(r01*sj5);
IkReal x7452=(cj5*r00);
CheckValue<IkReal> x7453=IKPowWithIntegerCheck(IKsign((((x7449*(r00*r00)))+(((-2.0)*x7451*x7452))+(r02*r02)+x7450+(((-1.0)*x7449*x7450)))),-1);
if(!x7453.valid){
continue;
}
CheckValue<IkReal> x7454 = IKatan2WithCheck(IkReal(((((-1.0)*x7451))+x7452)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7453.value)))+(x7454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7455=IKcos(j4);
IkReal x7456=IKsin(j4);
IkReal x7457=((1.0)*cj1);
IkReal x7458=((1.0)*x7455);
IkReal x7459=(cj5*x7455);
IkReal x7460=(cj5*x7456);
IkReal x7461=((1.0)*sj5*x7456);
evalcond[0]=(((r02*x7456))+((r00*x7459))+(((-1.0)*r01*sj5*x7458)));
evalcond[1]=((((-1.0)*r21*x7461))+((r20*x7460))+(((-1.0)*r22*x7458)));
evalcond[2]=(((r10*x7460))+(((-1.0)*r11*x7461))+(((-1.0)*r12*x7458)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7458))+((r00*x7460))+(((-1.0)*r01*x7461)));
evalcond[4]=(((r20*x7459))+(((-1.0)*cj2*x7457))+((sj1*sj2))+((r22*x7456))+(((-1.0)*r21*sj5*x7458)));
evalcond[5]=(((r12*x7456))+(((-1.0)*r11*sj5*x7458))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x7457))+((r10*x7459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7462=((1.0)*sj5);
CheckValue<IkReal> x7463=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7462))+(((-1.0)*cj5*r21)))),-1);
if(!x7463.valid){
continue;
}
CheckValue<IkReal> x7464 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x7462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7463.value)))+(x7464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7465=IKcos(j4);
IkReal x7466=IKsin(j4);
IkReal x7467=((1.0)*cj1);
IkReal x7468=((1.0)*x7465);
IkReal x7469=(cj5*x7465);
IkReal x7470=(cj5*x7466);
IkReal x7471=((1.0)*sj5*x7466);
evalcond[0]=((((-1.0)*r01*sj5*x7468))+((r02*x7466))+((r00*x7469)));
evalcond[1]=(((r20*x7470))+(((-1.0)*r21*x7471))+(((-1.0)*r22*x7468)));
evalcond[2]=(((r10*x7470))+(((-1.0)*r11*x7471))+(((-1.0)*r12*x7468)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7468))+(((-1.0)*r01*x7471))+((r00*x7470)));
evalcond[4]=((((-1.0)*r21*sj5*x7468))+((sj1*sj2))+((r20*x7469))+(((-1.0)*cj2*x7467))+((r22*x7466)));
evalcond[5]=(((r10*x7469))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x7468))+((r12*x7466))+(((-1.0)*sj2*x7467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7472=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7472.valid){
continue;
}
CheckValue<IkReal> x7473 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7472.value)))+(x7473.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7474=IKcos(j4);
IkReal x7475=IKsin(j4);
IkReal x7476=((1.0)*cj1);
IkReal x7477=((1.0)*x7474);
IkReal x7478=(cj5*x7474);
IkReal x7479=(cj5*x7475);
IkReal x7480=((1.0)*sj5*x7475);
evalcond[0]=(((r02*x7475))+(((-1.0)*r01*sj5*x7477))+((r00*x7478)));
evalcond[1]=(((r20*x7479))+(((-1.0)*r22*x7477))+(((-1.0)*r21*x7480)));
evalcond[2]=(((r10*x7479))+(((-1.0)*r11*x7480))+(((-1.0)*r12*x7477)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7477))+(((-1.0)*r01*x7480))+((r00*x7479)));
evalcond[4]=(((r20*x7478))+(((-1.0)*cj2*x7476))+((sj1*sj2))+((r22*x7475))+(((-1.0)*r21*sj5*x7477)));
evalcond[5]=(((r10*x7478))+(((-1.0)*sj2*x7476))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x7477))+((r12*x7475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7481=((-1.0)*r10);
IkReal x7483 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7483)==0){
continue;
}
IkReal x7482=pow(x7483,-0.5);
CheckValue<IkReal> x7484 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7481),IKFAST_ATAN2_MAGTHRESH);
if(!x7484.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7484.value));
IkReal gconst145=(r11*x7482);
IkReal gconst146=(x7481*x7482);
CheckValue<IkReal> x7485 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7485.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7485.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7486=((-1.0)*r10);
IkReal x7487=x7482;
CheckValue<IkReal> x7489 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7486),IKFAST_ATAN2_MAGTHRESH);
if(!x7489.valid){
continue;
}
IkReal x7488=((-1.0)*(x7489.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7488;
IkReal gconst144=x7488;
IkReal gconst145=(r11*x7487);
IkReal gconst146=(x7486*x7487);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7490=((1.0)*gconst145);
CheckValue<IkReal> x7491 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x7490))+((gconst146*r10*sj0))+(((-1.0)*r11*sj0*x7490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7491.valid){
continue;
}
CheckValue<IkReal> x7492=IKPowWithIntegerCheck(IKsign((((gconst145*r20))+((gconst146*r21)))),-1);
if(!x7492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7491.value)+(((1.5707963267949)*(x7492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7493=IKsin(j4);
IkReal x7494=IKcos(j4);
IkReal x7495=(gconst145*r11);
IkReal x7496=(cj2*sj1);
IkReal x7497=(gconst145*r01);
IkReal x7498=(gconst145*r21);
IkReal x7499=(cj1*sj2);
IkReal x7500=((1.0)*x7494);
IkReal x7501=(gconst146*x7494);
IkReal x7502=(gconst146*x7493);
IkReal x7503=((1.0)*x7493);
evalcond[0]=((((-1.0)*r22*x7500))+(((-1.0)*x7498*x7503))+((r20*x7502)));
evalcond[1]=(((r00*x7502))+(((-1.0)*x7497*x7503))+sj0+(((-1.0)*r02*x7500)));
evalcond[2]=(((r10*x7502))+(((-1.0)*cj0))+(((-1.0)*r12*x7500))+(((-1.0)*x7495*x7503)));
evalcond[3]=(((r22*x7493))+(((-1.0)*x7498*x7500))+((r20*x7501))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r00*x7501))+(((-1.0)*x7497*x7500))+((cj0*x7496))+((cj0*x7499))+((r02*x7493)));
evalcond[5]=(((r12*x7493))+((r10*x7501))+((sj0*x7499))+((sj0*x7496))+(((-1.0)*x7495*x7500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7504=((1.0)*gconst145);
CheckValue<IkReal> x7505=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7504))+(((-1.0)*gconst146*r01)))),-1);
if(!x7505.valid){
continue;
}
CheckValue<IkReal> x7506 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst146*r20))+(((-1.0)*cj0*r21*x7504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7505.value)))+(x7506.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7507=IKsin(j4);
IkReal x7508=IKcos(j4);
IkReal x7509=(gconst145*r11);
IkReal x7510=(cj2*sj1);
IkReal x7511=(gconst145*r01);
IkReal x7512=(gconst145*r21);
IkReal x7513=(cj1*sj2);
IkReal x7514=((1.0)*x7508);
IkReal x7515=(gconst146*x7508);
IkReal x7516=(gconst146*x7507);
IkReal x7517=((1.0)*x7507);
evalcond[0]=(((r20*x7516))+(((-1.0)*x7512*x7517))+(((-1.0)*r22*x7514)));
evalcond[1]=(((r00*x7516))+sj0+(((-1.0)*x7511*x7517))+(((-1.0)*r02*x7514)));
evalcond[2]=((((-1.0)*x7509*x7517))+((r10*x7516))+(((-1.0)*r12*x7514))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7515))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7512*x7514))+((r22*x7507)));
evalcond[4]=(((r00*x7515))+(((-1.0)*x7511*x7514))+((r02*x7507))+((cj0*x7510))+((cj0*x7513)));
evalcond[5]=(((r12*x7507))+((sj0*x7510))+((sj0*x7513))+(((-1.0)*x7509*x7514))+((r10*x7515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7518=((-1.0)*r11);
IkReal x7520 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7520)==0){
continue;
}
IkReal x7519=pow(x7520,-0.5);
CheckValue<IkReal> x7521 = IKatan2WithCheck(IkReal(x7518),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7521.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7521.value))));
IkReal gconst148=(x7518*x7519);
IkReal gconst149=((1.0)*r10*x7519);
CheckValue<IkReal> x7522 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7522.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7522.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7523=((-1.0)*r11);
CheckValue<IkReal> x7526 = IKatan2WithCheck(IkReal(x7523),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7526.valid){
continue;
}
IkReal x7524=((1.0)*(x7526.value));
IkReal x7525=x7519;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7524)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7524)));
IkReal gconst148=(x7523*x7525);
IkReal gconst149=((1.0)*r10*x7525);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7527=((-1.0)*r11);
CheckValue<IkReal> x7530 = IKatan2WithCheck(IkReal(x7527),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7530.valid){
continue;
}
IkReal x7528=((1.0)*(x7530.value));
IkReal x7529=x7519;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7528)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7528)));
IkReal gconst148=(x7527*x7529);
IkReal gconst149=((1.0)*r10*x7529);
IkReal x7531=r12*r12;
IkReal x7532=(cj0*r02);
IkReal x7533=x7519;
IkReal x7534=(sj0*x7533);
j4eval[0]=((IKabs((((r12*sj0))+x7532)))+(IKabs((((r12*x7532*x7533))+(((-1.0)*x7534))+((x7531*x7534))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7535=((-1.0)*r11);
CheckValue<IkReal> x7538 = IKatan2WithCheck(IkReal(x7535),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7538.valid){
continue;
}
IkReal x7536=((1.0)*(x7538.value));
IkReal x7537=x7519;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7536)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7536)));
IkReal gconst148=(x7535*x7537);
IkReal gconst149=((1.0)*r10*x7537);
IkReal x7539=r12*r12;
IkReal x7540=(sj1*sj2);
IkReal x7541=((1.0)+(((-1.0)*x7539)));
IkReal x7542=((1.0)*cj1*cj2);
CheckValue<IkReal> x7549=IKPowWithIntegerCheck(x7541,-1);
if(!x7549.valid){
continue;
}
IkReal x7543=x7549.value;
CheckValue<IkReal> x7550=IKPowWithIntegerCheck(((-1.0)+x7539),-1);
if(!x7550.valid){
continue;
}
IkReal x7544=x7550.value;
IkReal x7545=((1.0)*x7543);
if((x7541) < -0.00001)
continue;
IkReal x7546=IKsqrt(x7541);
IkReal x7547=(r12*r22*x7544*x7546);
IkReal x7548=((((-2.0)*r10*r11*r20*r21*x7543))+(((-1.0)*(r22*r22)))+(((-1.0)*x7545*(r11*r11)*(r21*r21)))+(((-1.0)*x7545*(r10*r10)*(r20*r20))));
j4eval[0]=x7548;
j4eval[1]=IKsign(x7548);
j4eval[2]=((IKabs(((((-1.0)*r22*x7542))+((r22*x7540)))))+(IKabs(((((-1.0)*x7542*x7547))+((x7540*x7547))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7551=(gconst149*r20);
IkReal x7552=(sj1*sj2);
IkReal x7553=(gconst148*r21);
IkReal x7554=(cj1*cj2);
CheckValue<IkReal> x7555=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7551*x7551)))+(((2.0)*x7551*x7553))+(((-1.0)*(x7553*x7553)))+(((-1.0)*(r22*r22))))),-1);
if(!x7555.valid){
continue;
}
CheckValue<IkReal> x7556 = IKatan2WithCheck(IkReal((((r22*x7552))+(((-1.0)*r22*x7554)))),IkReal((((x7551*x7552))+(((-1.0)*x7551*x7554))+((x7553*x7554))+(((-1.0)*x7552*x7553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7555.value)))+(x7556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7557=IKsin(j4);
IkReal x7558=IKcos(j4);
IkReal x7559=(gconst148*r11);
IkReal x7560=(gconst148*r21);
IkReal x7561=(cj2*sj1);
IkReal x7562=(gconst148*r01);
IkReal x7563=(cj1*sj2);
IkReal x7564=((1.0)*x7558);
IkReal x7565=(gconst149*x7558);
IkReal x7566=(gconst149*x7557);
IkReal x7567=((1.0)*x7557);
evalcond[0]=((((-1.0)*r22*x7564))+(((-1.0)*x7560*x7567))+((r20*x7566)));
evalcond[1]=((((-1.0)*x7562*x7567))+sj0+(((-1.0)*r02*x7564))+((r00*x7566)));
evalcond[2]=(((r10*x7566))+(((-1.0)*x7559*x7567))+(((-1.0)*r12*x7564))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7557))+(((-1.0)*x7560*x7564))+((r20*x7565)));
evalcond[4]=((((-1.0)*x7562*x7564))+((r02*x7557))+((cj0*x7563))+((cj0*x7561))+((r00*x7565)));
evalcond[5]=(((r10*x7565))+(((-1.0)*x7559*x7564))+((r12*x7557))+((sj0*x7563))+((sj0*x7561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7568=((1.0)*gconst148);
CheckValue<IkReal> x7569=IKPowWithIntegerCheck(IKsign((((gconst148*r20))+((gconst149*r21)))),-1);
if(!x7569.valid){
continue;
}
CheckValue<IkReal> x7570 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7568))+((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*r11*sj0*x7568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7569.value)))+(x7570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7571=IKsin(j4);
IkReal x7572=IKcos(j4);
IkReal x7573=(gconst148*r11);
IkReal x7574=(gconst148*r21);
IkReal x7575=(cj2*sj1);
IkReal x7576=(gconst148*r01);
IkReal x7577=(cj1*sj2);
IkReal x7578=((1.0)*x7572);
IkReal x7579=(gconst149*x7572);
IkReal x7580=(gconst149*x7571);
IkReal x7581=((1.0)*x7571);
evalcond[0]=((((-1.0)*r22*x7578))+(((-1.0)*x7574*x7581))+((r20*x7580)));
evalcond[1]=(sj0+(((-1.0)*x7576*x7581))+(((-1.0)*r02*x7578))+((r00*x7580)));
evalcond[2]=((((-1.0)*x7573*x7581))+((r10*x7580))+(((-1.0)*r12*x7578))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7574*x7578))+((r20*x7579))+((r22*x7571)));
evalcond[4]=((((-1.0)*x7576*x7578))+((r00*x7579))+((r02*x7571))+((cj0*x7577))+((cj0*x7575)));
evalcond[5]=(((r12*x7571))+((r10*x7579))+(((-1.0)*x7573*x7578))+((sj0*x7577))+((sj0*x7575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7582=((1.0)*gconst148);
CheckValue<IkReal> x7583=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r01))+(((-1.0)*r00*x7582)))),-1);
if(!x7583.valid){
continue;
}
CheckValue<IkReal> x7584 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7582))+((cj0*gconst149*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7583.value)))+(x7584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7585=IKsin(j4);
IkReal x7586=IKcos(j4);
IkReal x7587=(gconst148*r11);
IkReal x7588=(gconst148*r21);
IkReal x7589=(cj2*sj1);
IkReal x7590=(gconst148*r01);
IkReal x7591=(cj1*sj2);
IkReal x7592=((1.0)*x7586);
IkReal x7593=(gconst149*x7586);
IkReal x7594=(gconst149*x7585);
IkReal x7595=((1.0)*x7585);
evalcond[0]=(((r20*x7594))+(((-1.0)*r22*x7592))+(((-1.0)*x7588*x7595)));
evalcond[1]=(sj0+(((-1.0)*x7590*x7595))+(((-1.0)*r02*x7592))+((r00*x7594)));
evalcond[2]=((((-1.0)*r12*x7592))+((r10*x7594))+(((-1.0)*x7587*x7595))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7593))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7585))+(((-1.0)*x7588*x7592)));
evalcond[4]=(((r02*x7585))+(((-1.0)*x7590*x7592))+((cj0*x7589))+((cj0*x7591))+((r00*x7593)));
evalcond[5]=(((r12*x7585))+((r10*x7593))+(((-1.0)*x7587*x7592))+((sj0*x7591))+((sj0*x7589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7596=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7596;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7596);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7597=((1.0)*sj5);
IkReal x7598=((((-1.0)*r00*x7597))+(((-1.0)*cj5*r01)));
j4eval[0]=x7598;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x7597))))));
j4eval[2]=IKsign(x7598);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7599=cj5*cj5;
IkReal x7600=r11*r11;
IkReal x7601=(r11*sj5);
IkReal x7602=(cj5*r10);
IkReal x7603=((r12*r12)+(((-1.0)*x7599*x7600))+((x7599*(r10*r10)))+(((-2.0)*x7601*x7602))+x7600);
j4eval[0]=x7603;
j4eval[1]=IKsign(x7603);
j4eval[2]=((IKabs(((((-1.0)*x7601))+x7602)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7604=cj5*cj5;
IkReal x7605=r11*r11;
IkReal x7606=(cj5*r10);
IkReal x7607=(r11*sj5);
CheckValue<IkReal> x7608=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x7604*x7605))+(((-2.0)*x7606*x7607))+((x7604*(r10*r10)))+x7605)),-1);
if(!x7608.valid){
continue;
}
CheckValue<IkReal> x7609 = IKatan2WithCheck(IkReal(((((-1.0)*x7607))+x7606)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7608.value)))+(x7609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7610=IKcos(j4);
IkReal x7611=IKsin(j4);
IkReal x7612=(cj5*r10);
IkReal x7613=((1.0)*x7610);
IkReal x7614=(cj5*x7611);
IkReal x7615=(cj5*x7610);
IkReal x7616=((1.0)*sj5*x7611);
evalcond[0]=(((r12*x7611))+(((-1.0)*r11*sj5*x7613))+((x7610*x7612)));
evalcond[1]=(((r20*x7614))+(((-1.0)*r22*x7613))+(((-1.0)*r21*x7616)));
evalcond[2]=(((r00*x7614))+(((-1.0)*r01*x7616))+(((-1.0)*r02*x7613)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x7616))+(((-1.0)*r12*x7613))+((x7611*x7612)));
evalcond[4]=(((cj2*sj1))+((r00*x7615))+((cj1*sj2))+(((-1.0)*r01*sj5*x7613))+((r02*x7611)));
evalcond[5]=(((r20*x7615))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7611))+(((-1.0)*r21*sj5*x7613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7617=((1.0)*sj5);
CheckValue<IkReal> x7618 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7618.valid){
continue;
}
CheckValue<IkReal> x7619=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7617))+(((-1.0)*cj5*r01)))),-1);
if(!x7619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7618.value)+(((1.5707963267949)*(x7619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7620=IKcos(j4);
IkReal x7621=IKsin(j4);
IkReal x7622=(cj5*r10);
IkReal x7623=((1.0)*x7620);
IkReal x7624=(cj5*x7621);
IkReal x7625=(cj5*x7620);
IkReal x7626=((1.0)*sj5*x7621);
evalcond[0]=((((-1.0)*r11*sj5*x7623))+((x7620*x7622))+((r12*x7621)));
evalcond[1]=((((-1.0)*r21*x7626))+((r20*x7624))+(((-1.0)*r22*x7623)));
evalcond[2]=((((-1.0)*r01*x7626))+((r00*x7624))+(((-1.0)*r02*x7623)));
evalcond[3]=((-1.0)+((x7621*x7622))+(((-1.0)*r12*x7623))+(((-1.0)*r11*x7626)));
evalcond[4]=(((cj2*sj1))+((r02*x7621))+(((-1.0)*r01*sj5*x7623))+((cj1*sj2))+((r00*x7625)));
evalcond[5]=((((-1.0)*r21*sj5*x7623))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7625))+((r22*x7621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7627=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7627.valid){
continue;
}
CheckValue<IkReal> x7628 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7627.value)))+(x7628.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7629=IKcos(j4);
IkReal x7630=IKsin(j4);
IkReal x7631=(cj5*r10);
IkReal x7632=((1.0)*x7629);
IkReal x7633=(cj5*x7630);
IkReal x7634=(cj5*x7629);
IkReal x7635=((1.0)*sj5*x7630);
evalcond[0]=((((-1.0)*r11*sj5*x7632))+((r12*x7630))+((x7629*x7631)));
evalcond[1]=((((-1.0)*r22*x7632))+(((-1.0)*r21*x7635))+((r20*x7633)));
evalcond[2]=(((r00*x7633))+(((-1.0)*r01*x7635))+(((-1.0)*r02*x7632)));
evalcond[3]=((-1.0)+((x7630*x7631))+(((-1.0)*r11*x7635))+(((-1.0)*r12*x7632)));
evalcond[4]=(((cj2*sj1))+((r00*x7634))+((cj1*sj2))+(((-1.0)*r01*sj5*x7632))+((r02*x7630)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7630))+(((-1.0)*r21*sj5*x7632))+((r20*x7634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7636=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7636;
j4eval[1]=IKsign(x7636);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7637=((1.0)*sj5);
IkReal x7638=((((-1.0)*cj5*r21))+(((-1.0)*r20*x7637)));
j4eval[0]=x7638;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7637))+((cj5*r00))))));
j4eval[2]=IKsign(x7638);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7639=(sj1*sj2);
IkReal x7640=(cj1*cj2);
IkReal x7641=(r11*sj5);
IkReal x7642=(cj5*r10);
IkReal x7643=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7643;
j4eval[1]=IKsign(x7643);
j4eval[2]=((IKabs(((((-1.0)*x7640*x7642))+(((-1.0)*x7639*x7641))+((x7640*x7641))+((x7639*x7642)))))+(IKabs((((r12*x7640))+(((-1.0)*r12*x7639))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7644=(sj1*sj2);
IkReal x7645=(cj1*cj2);
IkReal x7646=(cj5*r10);
IkReal x7647=(r11*sj5);
CheckValue<IkReal> x7648 = IKatan2WithCheck(IkReal(((((-1.0)*x7645*x7646))+((x7644*x7646))+(((-1.0)*x7644*x7647))+((x7645*x7647)))),IkReal((((r12*x7645))+(((-1.0)*r12*x7644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7648.valid){
continue;
}
CheckValue<IkReal> x7649=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7648.value)+(((1.5707963267949)*(x7649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7650=IKcos(j4);
IkReal x7651=IKsin(j4);
IkReal x7652=(cj5*r10);
IkReal x7653=((1.0)*cj1);
IkReal x7654=((1.0)*x7650);
IkReal x7655=(cj5*x7651);
IkReal x7656=(cj5*x7650);
IkReal x7657=((1.0)*sj5*x7651);
evalcond[0]=((((-1.0)*r11*sj5*x7654))+((x7650*x7652))+((r12*x7651)));
evalcond[1]=((((-1.0)*r22*x7654))+(((-1.0)*r21*x7657))+((r20*x7655)));
evalcond[2]=((((-1.0)*r02*x7654))+((r00*x7655))+(((-1.0)*r01*x7657)));
evalcond[3]=((1.0)+((x7651*x7652))+(((-1.0)*r11*x7657))+(((-1.0)*r12*x7654)));
evalcond[4]=(((r22*x7651))+(((-1.0)*cj2*x7653))+((sj1*sj2))+(((-1.0)*r21*sj5*x7654))+((r20*x7656)));
evalcond[5]=(((r02*x7651))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x7654))+((r00*x7656))+(((-1.0)*sj2*x7653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7658=((1.0)*sj5);
CheckValue<IkReal> x7659=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7658))+(((-1.0)*cj5*r21)))),-1);
if(!x7659.valid){
continue;
}
CheckValue<IkReal> x7660 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x7658))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7659.value)))+(x7660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7661=IKcos(j4);
IkReal x7662=IKsin(j4);
IkReal x7663=(cj5*r10);
IkReal x7664=((1.0)*cj1);
IkReal x7665=((1.0)*x7661);
IkReal x7666=(cj5*x7662);
IkReal x7667=(cj5*x7661);
IkReal x7668=((1.0)*sj5*x7662);
evalcond[0]=(((r12*x7662))+(((-1.0)*r11*sj5*x7665))+((x7661*x7663)));
evalcond[1]=(((r20*x7666))+(((-1.0)*r22*x7665))+(((-1.0)*r21*x7668)));
evalcond[2]=(((r00*x7666))+(((-1.0)*r01*x7668))+(((-1.0)*r02*x7665)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7665))+(((-1.0)*r11*x7668))+((x7662*x7663)));
evalcond[4]=(((r20*x7667))+((sj1*sj2))+(((-1.0)*cj2*x7664))+((r22*x7662))+(((-1.0)*r21*sj5*x7665)));
evalcond[5]=(((r00*x7667))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x7665))+(((-1.0)*sj2*x7664))+((r02*x7662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7669=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7669.valid){
continue;
}
CheckValue<IkReal> x7670 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7669.value)))+(x7670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7671=IKcos(j4);
IkReal x7672=IKsin(j4);
IkReal x7673=(cj5*r10);
IkReal x7674=((1.0)*cj1);
IkReal x7675=((1.0)*x7671);
IkReal x7676=(cj5*x7672);
IkReal x7677=(cj5*x7671);
IkReal x7678=((1.0)*sj5*x7672);
evalcond[0]=((((-1.0)*r11*sj5*x7675))+((r12*x7672))+((x7671*x7673)));
evalcond[1]=((((-1.0)*r21*x7678))+((r20*x7676))+(((-1.0)*r22*x7675)));
evalcond[2]=((((-1.0)*r01*x7678))+(((-1.0)*r02*x7675))+((r00*x7676)));
evalcond[3]=((1.0)+((x7672*x7673))+(((-1.0)*r11*x7678))+(((-1.0)*r12*x7675)));
evalcond[4]=(((r22*x7672))+(((-1.0)*cj2*x7674))+((sj1*sj2))+(((-1.0)*r21*sj5*x7675))+((r20*x7677)));
evalcond[5]=(((r02*x7672))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x7675))+(((-1.0)*sj2*x7674))+((r00*x7677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7679=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7679);
rxp0_2=(py*r00);
rxp1_0=(r21*x7679);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7680=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7680);
rxp0_2=(py*r00);
rxp1_0=(r21*x7680);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7681=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7681);
rxp0_2=(py*r00);
rxp1_0=(r21*x7681);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7684=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x7684.valid){
continue;
}
IkReal x7682=x7684.value;
IkReal x7683=((1.0)*cj0*x7682);
cj4array[0]=((((-1.0)*cj2*sj1*x7683))+(((-1.0)*cj1*sj2*x7683)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7685=IKsin(j4);
IkReal x7686=IKcos(j4);
IkReal x7687=(cj5*r20);
IkReal x7688=((1.0)*sj5);
evalcond[0]=(r12*x7685);
evalcond[1]=((((-1.0)*r12*x7686))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x7685*x7688))+((x7685*x7687)));
evalcond[3]=(((cj5*r00*x7685))+(((-1.0)*r01*x7685*x7688)));
evalcond[4]=(((x7686*x7687))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x7686*x7688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7690=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7690.valid){
continue;
}
IkReal x7689=x7690.value;
cj4array[0]=((((-1.0)*sj1*sj2*x7689))+((cj1*cj2*x7689)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7691=IKsin(j4);
IkReal x7692=IKcos(j4);
IkReal x7693=(cj5*r00);
IkReal x7694=((1.0)*r01*sj5);
evalcond[0]=(r12*x7691);
evalcond[1]=((((-1.0)*r12*x7692))+(((-1.0)*cj0)));
evalcond[2]=(((cj5*r20*x7691))+(((-1.0)*r21*sj5*x7691)));
evalcond[3]=((((-1.0)*x7691*x7694))+((x7691*x7693)));
evalcond[4]=(((x7692*x7693))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*x7692*x7694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7695=IKPowWithIntegerCheck(r12,-1);
if(!x7695.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x7695.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7696=IKsin(j4);
IkReal x7697=IKcos(j4);
IkReal x7698=(cj5*x7697);
IkReal x7699=((1.0)*r21*sj5);
IkReal x7700=((1.0)*r01*sj5);
IkReal x7701=(cj5*x7696);
evalcond[0]=(r12*x7696);
evalcond[1]=((((-1.0)*x7696*x7699))+((r20*x7701)));
evalcond[2]=((((-1.0)*x7696*x7700))+((r00*x7701)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7697*x7699))+((r20*x7698)));
evalcond[4]=((((-1.0)*x7697*x7700))+((r00*x7698))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7702=((1.0)*sj5);
CheckValue<IkReal> x7703=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7703.valid){
continue;
}
CheckValue<IkReal> x7704 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x7702))+(((-1.0)*cj0*r01*x7702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7703.value)))+(x7704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7705=IKsin(j4);
IkReal x7706=IKcos(j4);
IkReal x7707=(cj2*sj1);
IkReal x7708=(cj5*r10);
IkReal x7709=(cj1*sj2);
IkReal x7710=((1.0)*x7706);
IkReal x7711=(cj5*x7705);
IkReal x7712=(cj5*x7706);
IkReal x7713=((1.0)*sj5*x7705);
evalcond[0]=((((-1.0)*r22*x7710))+((r20*x7711))+(((-1.0)*r21*x7713)));
evalcond[1]=(sj0+(((-1.0)*r01*x7713))+(((-1.0)*r02*x7710))+((r00*x7711)));
evalcond[2]=((((-1.0)*r11*x7713))+(((-1.0)*r12*x7710))+((x7705*x7708))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7712))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7705))+(((-1.0)*r21*sj5*x7710)));
evalcond[4]=((((-1.0)*r01*sj5*x7710))+((r02*x7705))+((cj0*x7707))+((cj0*x7709))+((r00*x7712)));
evalcond[5]=(((r12*x7705))+((sj0*x7707))+((sj0*x7709))+(((-1.0)*r11*sj5*x7710))+((x7706*x7708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7714=((1.0)*sj5);
CheckValue<IkReal> x7715=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7714))+(((-1.0)*cj5*r01)))),-1);
if(!x7715.valid){
continue;
}
CheckValue<IkReal> x7716 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x7714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7715.value)))+(x7716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7717=IKsin(j4);
IkReal x7718=IKcos(j4);
IkReal x7719=(cj2*sj1);
IkReal x7720=(cj5*r10);
IkReal x7721=(cj1*sj2);
IkReal x7722=((1.0)*x7718);
IkReal x7723=(cj5*x7717);
IkReal x7724=(cj5*x7718);
IkReal x7725=((1.0)*sj5*x7717);
evalcond[0]=((((-1.0)*r21*x7725))+(((-1.0)*r22*x7722))+((r20*x7723)));
evalcond[1]=((((-1.0)*r01*x7725))+sj0+((r00*x7723))+(((-1.0)*r02*x7722)));
evalcond[2]=(((x7717*x7720))+(((-1.0)*cj0))+(((-1.0)*r12*x7722))+(((-1.0)*r11*x7725)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7717))+(((-1.0)*r21*sj5*x7722))+((r20*x7724)));
evalcond[4]=(((r02*x7717))+((r00*x7724))+((cj0*x7719))+((cj0*x7721))+(((-1.0)*r01*sj5*x7722)));
evalcond[5]=(((sj0*x7721))+((r12*x7717))+(((-1.0)*r11*sj5*x7722))+((sj0*x7719))+((x7718*x7720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7726=((1.0)*sj5);
CheckValue<IkReal> x7727 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7727.valid){
continue;
}
CheckValue<IkReal> x7728=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7726)))),-1);
if(!x7728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7727.value)+(((1.5707963267949)*(x7728.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7729=IKsin(j4);
IkReal x7730=IKcos(j4);
IkReal x7731=(cj2*sj1);
IkReal x7732=(cj5*r10);
IkReal x7733=(cj1*sj2);
IkReal x7734=((1.0)*x7730);
IkReal x7735=(cj5*x7729);
IkReal x7736=(cj5*x7730);
IkReal x7737=((1.0)*sj5*x7729);
evalcond[0]=((((-1.0)*r22*x7734))+(((-1.0)*r21*x7737))+((r20*x7735)));
evalcond[1]=(sj0+(((-1.0)*r01*x7737))+((r00*x7735))+(((-1.0)*r02*x7734)));
evalcond[2]=(((x7729*x7732))+(((-1.0)*r12*x7734))+(((-1.0)*r11*x7737))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x7734))+((r22*x7729))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7736)));
evalcond[4]=((((-1.0)*r01*sj5*x7734))+((cj0*x7731))+((cj0*x7733))+((r00*x7736))+((r02*x7729)));
evalcond[5]=((((-1.0)*r11*sj5*x7734))+((x7730*x7732))+((sj0*x7731))+((sj0*x7733))+((r12*x7729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7738=r21*r21;
IkReal x7739=cj5*cj5;
IkReal x7740=(sj1*sj2);
IkReal x7741=(r21*sj5);
IkReal x7742=(cj5*r20);
IkReal x7743=(cj1*cj2);
CheckValue<IkReal> x7744=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7738))+(((-1.0)*x7739*(r20*r20)))+(((-1.0)*(r22*r22)))+((x7738*x7739))+(((2.0)*x7741*x7742)))),-1);
if(!x7744.valid){
continue;
}
CheckValue<IkReal> x7745 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7743))+((r22*x7740)))),IkReal((((x7741*x7743))+(((-1.0)*x7742*x7743))+((x7740*x7742))+(((-1.0)*x7740*x7741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7744.value)))+(x7745.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7746=IKsin(j4);
IkReal x7747=IKcos(j4);
IkReal x7748=(cj5*r20);
IkReal x7749=(r21*sj5);
IkReal x7750=((1.0)*x7747);
evalcond[0]=((((-1.0)*r22*x7750))+(((-1.0)*x7746*x7749))+((x7746*x7748)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x7747*x7748))+(((-1.0)*x7749*x7750))+((r22*x7746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7751=(cj5*sj4);
IkReal x7752=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x7751))+((r01*x7752))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x7751))+(((-1.0)*r11*x7752))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x7751))+((r01*x7752))+((cj4*r02))))+IKsqr((((r10*x7751))+(((-1.0)*r11*x7752))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x7751))+((r01*x7752))+((cj4*r02))), (((r10*x7751))+(((-1.0)*r11*x7752))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7753=IKcos(j0);
IkReal x7754=IKsin(j0);
IkReal x7755=(cj5*r10);
IkReal x7756=((0.353)*cj2);
IkReal x7757=(cj5*r00);
IkReal x7758=((1.0)*sj5);
IkReal x7759=((0.117)*sj5);
IkReal x7760=(cj5*r11);
IkReal x7761=(sj1*sj2);
IkReal x7762=(cj5*r01);
IkReal x7763=((1.0)*cj4);
IkReal x7764=((1.0)*cj2);
IkReal x7765=(cj2*sj1);
IkReal x7766=(cj1*x7753);
IkReal x7767=(cj1*x7754);
evalcond[0]=((((-1.0)*r02*x7763))+((sj4*x7757))+(((-1.0)*r01*sj4*x7758))+x7754);
evalcond[1]=((((-1.0)*r11*sj4*x7758))+((sj4*x7755))+(((-1.0)*x7753))+(((-1.0)*r12*x7763)));
evalcond[2]=((((-1.0)*x7764*x7766))+(((-1.0)*x7762))+(((-1.0)*r00*x7758))+((x7753*x7761)));
evalcond[3]=((((-1.0)*x7764*x7767))+(((-1.0)*r10*x7758))+(((-1.0)*x7760))+((x7754*x7761)));
evalcond[4]=(((sj2*x7766))+((cj4*x7757))+((r02*sj4))+((x7753*x7765))+(((-1.0)*cj4*r01*x7758)));
evalcond[5]=(((sj2*x7767))+((cj4*x7755))+(((-1.0)*cj4*r11*x7758))+((r12*sj4))+((x7754*x7765)));
evalcond[6]=(((r00*x7759))+(((0.117)*x7762))+(((0.139)*x7754))+(((-1.0)*px))+(((-0.43)*x7766))+(((-1.0)*x7756*x7766))+(((0.353)*x7753*x7761)));
evalcond[7]=(((r10*x7759))+(((0.117)*x7760))+(((-1.0)*py))+(((-0.43)*x7767))+(((-0.139)*x7753))+(((-1.0)*x7756*x7767))+(((0.353)*x7754*x7761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7768 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7768.valid){
continue;
}
CheckValue<IkReal> x7769=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x7769.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7768.value)+(((1.5707963267949)*(x7769.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7770=IKcos(j0);
IkReal x7771=IKsin(j0);
IkReal x7772=((0.353)*cj2);
IkReal x7773=(r10*sj5);
IkReal x7774=(cj5*r11);
IkReal x7775=(r00*sj5);
IkReal x7776=(sj1*sj2);
IkReal x7777=(cj5*r01);
IkReal x7778=((1.0)*cj2);
IkReal x7779=(cj1*x7770);
IkReal x7780=(cj1*x7771);
evalcond[0]=(((x7770*x7776))+(((-1.0)*x7777))+(((-1.0)*x7775))+(((-1.0)*x7778*x7779)));
evalcond[1]=(((x7771*x7776))+(((-1.0)*x7774))+(((-1.0)*x7773))+(((-1.0)*x7778*x7780)));
evalcond[2]=((((-1.0)*x7772*x7779))+(((0.117)*x7777))+(((0.117)*x7775))+(((-1.0)*px))+(((-0.43)*x7779))+(((0.139)*x7771))+(((0.353)*x7770*x7776)));
evalcond[3]=((((-1.0)*x7772*x7780))+(((0.117)*x7773))+(((0.117)*x7774))+(((-0.43)*x7780))+(((-0.139)*x7770))+(((-1.0)*py))+(((0.353)*x7771*x7776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7781=((1.0)*sj5);
IkReal x7782=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7781)));
j4eval[0]=x7782;
j4eval[1]=IKsign(x7782);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x7781))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7783=((1.0)*sj5);
IkReal x7784=((((-1.0)*r00*x7783))+(((-1.0)*cj5*r01)));
j4eval[0]=x7784;
j4eval[1]=IKsign(x7784);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7783))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7785=((1.0)*sj5);
IkReal x7786=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7786;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x7785))+(((-1.0)*r11*sj0*x7785))))));
j4eval[2]=IKsign(x7786);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7788 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7788)==0){
continue;
}
IkReal x7787=pow(x7788,-0.5);
CheckValue<IkReal> x7789 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7789.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7789.value));
IkReal gconst133=((-1.0)*r21*x7787);
IkReal gconst134=(r20*x7787);
CheckValue<IkReal> x7790 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7790.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7790.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7793 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7793.valid){
continue;
}
IkReal x7791=((-1.0)*(x7793.value));
IkReal x7792=x7787;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7791;
IkReal gconst132=x7791;
IkReal gconst133=((-1.0)*r21*x7792);
IkReal gconst134=(r20*x7792);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7796 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7796.valid){
continue;
}
IkReal x7794=((-1.0)*(x7796.value));
IkReal x7795=x7787;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7794;
IkReal gconst132=x7794;
IkReal gconst133=((-1.0)*r21*x7795);
IkReal gconst134=(r20*x7795);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7799 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7799.valid){
continue;
}
IkReal x7797=((-1.0)*(x7799.value));
IkReal x7798=x7787;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7797;
IkReal gconst132=x7797;
IkReal gconst133=((-1.0)*r21*x7798);
IkReal gconst134=(r20*x7798);
IkReal x7800=((1.0)*(r22*r22));
CheckValue<IkReal> x7804=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7800))),-1);
if(!x7804.valid){
continue;
}
IkReal x7801=x7804.value;
IkReal x7802=((1.0)*x7801);
IkReal x7803=((((-1.0)*x7802*(r20*r20*r20*r20)))+(((-1.0)*x7802*(r21*r21*r21*r21)))+(((-2.0)*x7801*(r20*r20)*(r21*r21)))+(((-1.0)*x7800)));
j4eval[0]=x7803;
j4eval[1]=IKsign(x7803);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7805=(gconst134*r20);
IkReal x7806=(cj1*cj2);
IkReal x7807=(gconst133*r21);
IkReal x7808=(sj1*sj2);
CheckValue<IkReal> x7809 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7806))+((r22*x7808)))),IkReal(((((-1.0)*x7807*x7808))+(((-1.0)*x7805*x7806))+((x7806*x7807))+((x7805*x7808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7809.valid){
continue;
}
CheckValue<IkReal> x7810=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7807*x7807)))+(((2.0)*x7805*x7807))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7805*x7805))))),-1);
if(!x7810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7809.value)+(((1.5707963267949)*(x7810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7811=IKsin(j4);
IkReal x7812=IKcos(j4);
IkReal x7813=(gconst134*r10);
IkReal x7814=(cj2*sj1);
IkReal x7815=(gconst133*r11);
IkReal x7816=(gconst133*r01);
IkReal x7817=(gconst133*r21);
IkReal x7818=(cj1*sj2);
IkReal x7819=((1.0)*x7812);
IkReal x7820=((1.0)*x7811);
IkReal x7821=(gconst134*x7812);
IkReal x7822=(gconst134*x7811);
evalcond[0]=(((r20*x7822))+(((-1.0)*r22*x7819))+(((-1.0)*x7817*x7820)));
evalcond[1]=(sj0+(((-1.0)*x7816*x7820))+(((-1.0)*r02*x7819))+((r00*x7822)));
evalcond[2]=((((-1.0)*r12*x7819))+(((-1.0)*x7815*x7820))+((x7811*x7813))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7821))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7817*x7819))+((r22*x7811)));
evalcond[4]=(((r02*x7811))+((r00*x7821))+(((-1.0)*x7816*x7819))+((cj0*x7814))+((cj0*x7818)));
evalcond[5]=(((x7812*x7813))+((r12*x7811))+((sj0*x7814))+((sj0*x7818))+(((-1.0)*x7815*x7819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7823=((1.0)*gconst133);
CheckValue<IkReal> x7824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7823))+(((-1.0)*gconst134*r01)))),-1);
if(!x7824.valid){
continue;
}
CheckValue<IkReal> x7825 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst134*r20))+(((-1.0)*cj0*r21*x7823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7824.value)))+(x7825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7826=IKsin(j4);
IkReal x7827=IKcos(j4);
IkReal x7828=(gconst134*r10);
IkReal x7829=(cj2*sj1);
IkReal x7830=(gconst133*r11);
IkReal x7831=(gconst133*r01);
IkReal x7832=(gconst133*r21);
IkReal x7833=(cj1*sj2);
IkReal x7834=((1.0)*x7827);
IkReal x7835=((1.0)*x7826);
IkReal x7836=(gconst134*x7827);
IkReal x7837=(gconst134*x7826);
evalcond[0]=((((-1.0)*r22*x7834))+((r20*x7837))+(((-1.0)*x7832*x7835)));
evalcond[1]=(sj0+(((-1.0)*x7831*x7835))+(((-1.0)*r02*x7834))+((r00*x7837)));
evalcond[2]=(((x7826*x7828))+(((-1.0)*x7830*x7835))+(((-1.0)*r12*x7834))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7836))+(((-1.0)*x7832*x7834))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7826)));
evalcond[4]=(((r02*x7826))+(((-1.0)*x7831*x7834))+((cj0*x7833))+((r00*x7836))+((cj0*x7829)));
evalcond[5]=(((r12*x7826))+((x7827*x7828))+((sj0*x7829))+(((-1.0)*x7830*x7834))+((sj0*x7833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7838=((1.0)*gconst133);
CheckValue<IkReal> x7839 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7838))+((gconst134*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7839.valid){
continue;
}
CheckValue<IkReal> x7840=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7838))+(((-1.0)*gconst134*r11)))),-1);
if(!x7840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7839.value)+(((1.5707963267949)*(x7840.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7841=IKsin(j4);
IkReal x7842=IKcos(j4);
IkReal x7843=(gconst134*r10);
IkReal x7844=(cj2*sj1);
IkReal x7845=(gconst133*r11);
IkReal x7846=(gconst133*r01);
IkReal x7847=(gconst133*r21);
IkReal x7848=(cj1*sj2);
IkReal x7849=((1.0)*x7842);
IkReal x7850=((1.0)*x7841);
IkReal x7851=(gconst134*x7842);
IkReal x7852=(gconst134*x7841);
evalcond[0]=((((-1.0)*x7847*x7850))+(((-1.0)*r22*x7849))+((r20*x7852)));
evalcond[1]=(sj0+(((-1.0)*x7846*x7850))+(((-1.0)*r02*x7849))+((r00*x7852)));
evalcond[2]=((((-1.0)*r12*x7849))+(((-1.0)*cj0))+((x7841*x7843))+(((-1.0)*x7845*x7850)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7841))+(((-1.0)*x7847*x7849))+((r20*x7851)));
evalcond[4]=(((cj0*x7848))+((cj0*x7844))+((r00*x7851))+(((-1.0)*x7846*x7849))+((r02*x7841)));
evalcond[5]=(((x7842*x7843))+((r12*x7841))+(((-1.0)*x7845*x7849))+((sj0*x7844))+((sj0*x7848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7854 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7854)==0){
continue;
}
IkReal x7853=pow(x7854,-0.5);
CheckValue<IkReal> x7855 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7855.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7855.value))));
IkReal gconst136=((1.0)*r21*x7853);
IkReal gconst137=((-1.0)*r20*x7853);
CheckValue<IkReal> x7856 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7856.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7856.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7859 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7859.valid){
continue;
}
IkReal x7857=((1.0)*(x7859.value));
IkReal x7858=x7853;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7857)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7857)));
IkReal gconst136=((1.0)*r21*x7858);
IkReal gconst137=((-1.0)*r20*x7858);
IkReal x7860=r22*r22;
IkReal x7861=((1.0)*x7860);
CheckValue<IkReal> x7865=IKPowWithIntegerCheck(((-1.0)+x7860),-1);
if(!x7865.valid){
continue;
}
IkReal x7862=x7865.value;
if((((1.0)+(((-1.0)*x7861)))) < -0.00001)
continue;
IkReal x7863=IKsqrt(((1.0)+(((-1.0)*x7861))));
IkReal x7864=(sj0*x7862*x7863);
j4eval[0]=((IKabs((x7864+(((-1.0)*x7861*x7864)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7868 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7868.valid){
continue;
}
IkReal x7866=((1.0)*(x7868.value));
IkReal x7867=x7853;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7866)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7866)));
IkReal gconst136=((1.0)*r21*x7867);
IkReal gconst137=((-1.0)*r20*x7867);
IkReal x7869=r22*r22;
IkReal x7870=((1.0)*x7869);
CheckValue<IkReal> x7874=IKPowWithIntegerCheck(((-1.0)+x7869),-1);
if(!x7874.valid){
continue;
}
IkReal x7871=x7874.value;
if((((1.0)+(((-1.0)*x7870)))) < -0.00001)
continue;
IkReal x7872=IKsqrt(((1.0)+(((-1.0)*x7870))));
IkReal x7873=(cj0*x7871*x7872);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x7870*x7873))+x7873))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7877 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7877.valid){
continue;
}
IkReal x7875=((1.0)*(x7877.value));
IkReal x7876=x7853;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7875)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7875)));
IkReal gconst136=((1.0)*r21*x7876);
IkReal gconst137=((-1.0)*r20*x7876);
IkReal x7878=r22*r22;
IkReal x7879=(cj0*r02);
IkReal x7880=(r12*sj0);
CheckValue<IkReal> x7884=IKPowWithIntegerCheck(((-1.0)+x7878),-1);
if(!x7884.valid){
continue;
}
IkReal x7881=x7884.value;
if((((1.0)+(((-1.0)*x7878)))) < -0.00001)
continue;
IkReal x7882=IKsqrt(((1.0)+(((-1.0)*x7878))));
IkReal x7883=((1.0)*r22*x7881*x7882);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x7880+x7879)))+(IKabs(((((-1.0)*x7880*x7883))+(((-1.0)*x7879*x7883))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7885=((1.0)*gconst136);
CheckValue<IkReal> x7886 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*r11*sj0*x7885))+(((-1.0)*cj0*r01*x7885))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7886.valid){
continue;
}
CheckValue<IkReal> x7887=IKPowWithIntegerCheck(IKsign((((gconst136*r20))+((gconst137*r21)))),-1);
if(!x7887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7886.value)+(((1.5707963267949)*(x7887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7888=IKsin(j4);
IkReal x7889=IKcos(j4);
IkReal x7890=(gconst136*r01);
IkReal x7891=(cj2*sj1);
IkReal x7892=(gconst136*r11);
IkReal x7893=(gconst136*r21);
IkReal x7894=(cj1*sj2);
IkReal x7895=((1.0)*x7889);
IkReal x7896=(gconst137*x7889);
IkReal x7897=((1.0)*x7888);
IkReal x7898=(gconst137*x7888);
evalcond[0]=((((-1.0)*r22*x7895))+(((-1.0)*x7893*x7897))+((r20*x7898)));
evalcond[1]=(sj0+(((-1.0)*x7890*x7897))+((r00*x7898))+(((-1.0)*r02*x7895)));
evalcond[2]=((((-1.0)*r12*x7895))+(((-1.0)*x7892*x7897))+((r10*x7898))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7893*x7895))+((r22*x7888))+((r20*x7896)));
evalcond[4]=(((cj0*x7894))+((cj0*x7891))+(((-1.0)*x7890*x7895))+((r02*x7888))+((r00*x7896)));
evalcond[5]=(((r12*x7888))+(((-1.0)*x7892*x7895))+((r10*x7896))+((sj0*x7894))+((sj0*x7891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7899=((1.0)*gconst136);
CheckValue<IkReal> x7900=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r01))+(((-1.0)*r00*x7899)))),-1);
if(!x7900.valid){
continue;
}
CheckValue<IkReal> x7901 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7899))+((cj0*gconst137*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7900.value)))+(x7901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7902=IKsin(j4);
IkReal x7903=IKcos(j4);
IkReal x7904=(gconst136*r01);
IkReal x7905=(cj2*sj1);
IkReal x7906=(gconst136*r11);
IkReal x7907=(gconst136*r21);
IkReal x7908=(cj1*sj2);
IkReal x7909=((1.0)*x7903);
IkReal x7910=(gconst137*x7903);
IkReal x7911=((1.0)*x7902);
IkReal x7912=(gconst137*x7902);
evalcond[0]=((((-1.0)*x7907*x7911))+((r20*x7912))+(((-1.0)*r22*x7909)));
evalcond[1]=((((-1.0)*x7904*x7911))+sj0+((r00*x7912))+(((-1.0)*r02*x7909)));
evalcond[2]=((((-1.0)*r12*x7909))+(((-1.0)*x7906*x7911))+((r10*x7912))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((r20*x7910))+((sj1*sj2))+((r22*x7902))+(((-1.0)*x7907*x7909)));
evalcond[4]=(((r02*x7902))+(((-1.0)*x7904*x7909))+((r00*x7910))+((cj0*x7908))+((cj0*x7905)));
evalcond[5]=(((r10*x7910))+((sj0*x7908))+((sj0*x7905))+(((-1.0)*x7906*x7909))+((r12*x7902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7913=((1.0)*gconst136);
CheckValue<IkReal> x7914 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7913))+((gconst137*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7914.valid){
continue;
}
CheckValue<IkReal> x7915=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r11))+(((-1.0)*r10*x7913)))),-1);
if(!x7915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7914.value)+(((1.5707963267949)*(x7915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7916=IKsin(j4);
IkReal x7917=IKcos(j4);
IkReal x7918=(gconst136*r01);
IkReal x7919=(cj2*sj1);
IkReal x7920=(gconst136*r11);
IkReal x7921=(gconst136*r21);
IkReal x7922=(cj1*sj2);
IkReal x7923=((1.0)*x7917);
IkReal x7924=(gconst137*x7917);
IkReal x7925=((1.0)*x7916);
IkReal x7926=(gconst137*x7916);
evalcond[0]=((((-1.0)*x7921*x7925))+(((-1.0)*r22*x7923))+((r20*x7926)));
evalcond[1]=(sj0+(((-1.0)*r02*x7923))+((r00*x7926))+(((-1.0)*x7918*x7925)));
evalcond[2]=((((-1.0)*x7920*x7925))+((r10*x7926))+(((-1.0)*r12*x7923))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7916))+(((-1.0)*x7921*x7923))+((r20*x7924))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r02*x7916))+((r00*x7924))+(((-1.0)*x7918*x7923))+((cj0*x7922))+((cj0*x7919)));
evalcond[5]=(((sj0*x7919))+(((-1.0)*x7920*x7923))+((r10*x7924))+((r12*x7916))+((sj0*x7922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7927=((-1.0)*r00);
IkReal x7929 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7929)==0){
continue;
}
IkReal x7928=pow(x7929,-0.5);
CheckValue<IkReal> x7930 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7927),IKFAST_ATAN2_MAGTHRESH);
if(!x7930.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7930.value));
IkReal gconst139=(r01*x7928);
IkReal gconst140=(x7927*x7928);
CheckValue<IkReal> x7931 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7931.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7931.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7932=((-1.0)*r00);
IkReal x7933=x7928;
CheckValue<IkReal> x7935 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7932),IKFAST_ATAN2_MAGTHRESH);
if(!x7935.valid){
continue;
}
IkReal x7934=((-1.0)*(x7935.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7934;
IkReal gconst138=x7934;
IkReal gconst139=(r01*x7933);
IkReal gconst140=(x7932*x7933);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7936=((1.0)*gconst139);
CheckValue<IkReal> x7937=IKPowWithIntegerCheck(IKsign((((gconst139*r20))+((gconst140*r21)))),-1);
if(!x7937.valid){
continue;
}
CheckValue<IkReal> x7938 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7936))+(((-1.0)*r11*sj0*x7936))+((gconst140*r10*sj0))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7937.value)))+(x7938.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7939=IKsin(j4);
IkReal x7940=IKcos(j4);
IkReal x7941=(cj2*sj1);
IkReal x7942=(gconst140*r10);
IkReal x7943=(cj1*sj2);
IkReal x7944=((1.0)*x7940);
IkReal x7945=(gconst140*x7940);
IkReal x7946=(gconst140*x7939);
IkReal x7947=((1.0)*gconst139*x7939);
evalcond[0]=((((-1.0)*r22*x7944))+((r20*x7946))+(((-1.0)*r21*x7947)));
evalcond[1]=((((-1.0)*r01*x7947))+sj0+(((-1.0)*r02*x7944))+((r00*x7946)));
evalcond[2]=((((-1.0)*r11*x7947))+(((-1.0)*r12*x7944))+((x7939*x7942))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7945))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7939))+(((-1.0)*gconst139*r21*x7944)));
evalcond[4]=(((cj0*x7943))+((cj0*x7941))+(((-1.0)*gconst139*r01*x7944))+((r02*x7939))+((r00*x7945)));
evalcond[5]=((((-1.0)*gconst139*r11*x7944))+((sj0*x7943))+((sj0*x7941))+((x7940*x7942))+((r12*x7939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7948=((1.0)*gconst139);
CheckValue<IkReal> x7949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7948))+(((-1.0)*gconst140*r11)))),-1);
if(!x7949.valid){
continue;
}
CheckValue<IkReal> x7950 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst140*r20*sj0))+(((-1.0)*r21*sj0*x7948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7949.value)))+(x7950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7951=IKsin(j4);
IkReal x7952=IKcos(j4);
IkReal x7953=(cj2*sj1);
IkReal x7954=(gconst140*r10);
IkReal x7955=(cj1*sj2);
IkReal x7956=((1.0)*x7952);
IkReal x7957=(gconst140*x7952);
IkReal x7958=(gconst140*x7951);
IkReal x7959=((1.0)*gconst139*x7951);
evalcond[0]=((((-1.0)*r22*x7956))+((r20*x7958))+(((-1.0)*r21*x7959)));
evalcond[1]=(((r00*x7958))+sj0+(((-1.0)*r02*x7956))+(((-1.0)*r01*x7959)));
evalcond[2]=(((x7951*x7954))+(((-1.0)*r11*x7959))+(((-1.0)*r12*x7956))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7951))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst139*r21*x7956))+((r20*x7957)));
evalcond[4]=(((r00*x7957))+(((-1.0)*gconst139*r01*x7956))+((cj0*x7955))+((cj0*x7953))+((r02*x7951)));
evalcond[5]=(((r12*x7951))+(((-1.0)*gconst139*r11*x7956))+((x7952*x7954))+((sj0*x7955))+((sj0*x7953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7960=((-1.0)*r01);
IkReal x7962 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7962)==0){
continue;
}
IkReal x7961=pow(x7962,-0.5);
CheckValue<IkReal> x7963 = IKatan2WithCheck(IkReal(x7960),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7963.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7963.value))));
IkReal gconst142=(x7960*x7961);
IkReal gconst143=((1.0)*r00*x7961);
CheckValue<IkReal> x7964 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7964.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7964.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7965=((-1.0)*r01);
CheckValue<IkReal> x7968 = IKatan2WithCheck(IkReal(x7965),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7968.valid){
continue;
}
IkReal x7966=((1.0)*(x7968.value));
IkReal x7967=x7961;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7966)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7966)));
IkReal gconst142=(x7965*x7967);
IkReal gconst143=((1.0)*r00*x7967);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x7969=((-1.0)*r01);
CheckValue<IkReal> x7972 = IKatan2WithCheck(IkReal(x7969),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7972.valid){
continue;
}
IkReal x7970=((1.0)*(x7972.value));
IkReal x7971=x7961;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7970)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7970)));
IkReal gconst142=(x7969*x7971);
IkReal gconst143=((1.0)*r00*x7971);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7973=((-1.0)*r01);
CheckValue<IkReal> x7976 = IKatan2WithCheck(IkReal(x7973),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7976.valid){
continue;
}
IkReal x7974=((1.0)*(x7976.value));
IkReal x7975=x7961;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7974)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7974)));
IkReal gconst142=(x7973*x7975);
IkReal gconst143=((1.0)*r00*x7975);
IkReal x7977=r02*r02;
IkReal x7978=(r12*sj0);
IkReal x7979=x7961;
IkReal x7980=(cj0*x7979);
j4eval[0]=((IKabs((x7978+((cj0*r02)))))+(IKabs((((x7977*x7980))+((r02*x7978*x7979))+(((-1.0)*x7980))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7981=((1.0)*gconst142);
CheckValue<IkReal> x7982=IKPowWithIntegerCheck(IKsign((((gconst143*r21))+((gconst142*r20)))),-1);
if(!x7982.valid){
continue;
}
CheckValue<IkReal> x7983 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*r11*sj0*x7981))+((gconst143*r10*sj0))+(((-1.0)*cj0*r01*x7981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7982.value)))+(x7983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7984=IKsin(j4);
IkReal x7985=IKcos(j4);
IkReal x7986=(gconst143*r00);
IkReal x7987=(cj2*sj1);
IkReal x7988=(gconst142*r21);
IkReal x7989=(gconst142*r11);
IkReal x7990=(gconst142*r01);
IkReal x7991=(cj1*sj2);
IkReal x7992=((1.0)*x7985);
IkReal x7993=((1.0)*x7984);
IkReal x7994=(gconst143*x7985);
IkReal x7995=(gconst143*x7984);
evalcond[0]=(((r20*x7995))+(((-1.0)*x7988*x7993))+(((-1.0)*r22*x7992)));
evalcond[1]=(sj0+(((-1.0)*x7990*x7993))+((x7984*x7986))+(((-1.0)*r02*x7992)));
evalcond[2]=(((r10*x7995))+(((-1.0)*r12*x7992))+(((-1.0)*x7989*x7993))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7994))+((r22*x7984))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7988*x7992)));
evalcond[4]=((((-1.0)*x7990*x7992))+((cj0*x7991))+((cj0*x7987))+((r02*x7984))+((x7985*x7986)));
evalcond[5]=(((r10*x7994))+((sj0*x7991))+((sj0*x7987))+(((-1.0)*x7989*x7992))+((r12*x7984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7996=((1.0)*gconst142);
CheckValue<IkReal> x7997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7996))+(((-1.0)*gconst143*r01)))),-1);
if(!x7997.valid){
continue;
}
CheckValue<IkReal> x7998 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7996))+((cj0*gconst143*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7997.value)))+(x7998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7999=IKsin(j4);
IkReal x8000=IKcos(j4);
IkReal x8001=(gconst143*r00);
IkReal x8002=(cj2*sj1);
IkReal x8003=(gconst142*r21);
IkReal x8004=(gconst142*r11);
IkReal x8005=(gconst142*r01);
IkReal x8006=(cj1*sj2);
IkReal x8007=((1.0)*x8000);
IkReal x8008=((1.0)*x7999);
IkReal x8009=(gconst143*x8000);
IkReal x8010=(gconst143*x7999);
evalcond[0]=((((-1.0)*x8003*x8008))+(((-1.0)*r22*x8007))+((r20*x8010)));
evalcond[1]=(sj0+((x7999*x8001))+(((-1.0)*x8005*x8008))+(((-1.0)*r02*x8007)));
evalcond[2]=((((-1.0)*x8004*x8008))+(((-1.0)*r12*x8007))+((r10*x8010))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x8009))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7999))+(((-1.0)*x8003*x8007)));
evalcond[4]=(((x8000*x8001))+((cj0*x8006))+((cj0*x8002))+((r02*x7999))+(((-1.0)*x8005*x8007)));
evalcond[5]=(((sj0*x8002))+((sj0*x8006))+(((-1.0)*x8004*x8007))+((r12*x7999))+((r10*x8009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8011=((1.0)*gconst142);
CheckValue<IkReal> x8012=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r11))+(((-1.0)*r10*x8011)))),-1);
if(!x8012.valid){
continue;
}
CheckValue<IkReal> x8013 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x8011))+((gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8012.value)))+(x8013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8014=IKsin(j4);
IkReal x8015=IKcos(j4);
IkReal x8016=(gconst143*r00);
IkReal x8017=(cj2*sj1);
IkReal x8018=(gconst142*r21);
IkReal x8019=(gconst142*r11);
IkReal x8020=(gconst142*r01);
IkReal x8021=(cj1*sj2);
IkReal x8022=((1.0)*x8015);
IkReal x8023=((1.0)*x8014);
IkReal x8024=(gconst143*x8015);
IkReal x8025=(gconst143*x8014);
evalcond[0]=(((r20*x8025))+(((-1.0)*x8018*x8023))+(((-1.0)*r22*x8022)));
evalcond[1]=(sj0+((x8014*x8016))+(((-1.0)*r02*x8022))+(((-1.0)*x8020*x8023)));
evalcond[2]=(((r10*x8025))+(((-1.0)*r12*x8022))+(((-1.0)*x8019*x8023))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8024))+((r22*x8014))+(((-1.0)*x8018*x8022)));
evalcond[4]=(((r02*x8014))+((cj0*x8017))+((cj0*x8021))+(((-1.0)*x8020*x8022))+((x8015*x8016)));
evalcond[5]=(((r10*x8024))+((sj0*x8021))+((r12*x8014))+(((-1.0)*x8019*x8022))+((sj0*x8017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8026=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8026;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x8026);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8027=((1.0)*sj5);
IkReal x8028=((((-1.0)*cj5*r11))+(((-1.0)*r10*x8027)));
j4eval[0]=x8028;
j4eval[1]=IKsign(x8028);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x8027))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8029=(cj1*sj2);
IkReal x8030=(cj5*r00);
IkReal x8031=((1.0)*r02);
IkReal x8032=(cj2*sj1);
IkReal x8033=((1.0)*r01*sj5);
IkReal x8034=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8034;
j4eval[1]=((IKabs(((((-1.0)*x8029*x8031))+(((-1.0)*x8031*x8032)))))+(IKabs((((x8029*x8030))+(((-1.0)*x8032*x8033))+(((-1.0)*x8029*x8033))+((x8030*x8032))))));
j4eval[2]=IKsign(x8034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8035=(cj1*sj2);
IkReal x8036=(cj5*r00);
IkReal x8037=((1.0)*r02);
IkReal x8038=(cj2*sj1);
IkReal x8039=((1.0)*r01*sj5);
CheckValue<IkReal> x8040 = IKatan2WithCheck(IkReal(((((-1.0)*x8035*x8039))+(((-1.0)*x8038*x8039))+((x8036*x8038))+((x8035*x8036)))),IkReal(((((-1.0)*x8035*x8037))+(((-1.0)*x8037*x8038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8040.valid){
continue;
}
CheckValue<IkReal> x8041=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8040.value)+(((1.5707963267949)*(x8041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8042=IKcos(j4);
IkReal x8043=IKsin(j4);
IkReal x8044=((1.0)*x8042);
IkReal x8045=(cj5*x8042);
IkReal x8046=(cj5*x8043);
IkReal x8047=((1.0)*sj5*x8043);
evalcond[0]=((((-1.0)*r01*sj5*x8044))+((r02*x8043))+((r00*x8045)));
evalcond[1]=(((r20*x8046))+(((-1.0)*r21*x8047))+(((-1.0)*r22*x8044)));
evalcond[2]=((((-1.0)*r11*x8047))+((r10*x8046))+(((-1.0)*r12*x8044)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8044))+((r00*x8046))+(((-1.0)*r01*x8047)));
evalcond[4]=(((cj2*sj1))+((r10*x8045))+((cj1*sj2))+(((-1.0)*r11*sj5*x8044))+((r12*x8043)));
evalcond[5]=(((r20*x8045))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x8044))+((r22*x8043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8048=((1.0)*sj5);
CheckValue<IkReal> x8049=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x8048)))),-1);
if(!x8049.valid){
continue;
}
CheckValue<IkReal> x8050 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x8048)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8049.value)))+(x8050.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8051=IKcos(j4);
IkReal x8052=IKsin(j4);
IkReal x8053=((1.0)*x8051);
IkReal x8054=(cj5*x8051);
IkReal x8055=(cj5*x8052);
IkReal x8056=((1.0)*sj5*x8052);
evalcond[0]=(((r00*x8054))+(((-1.0)*r01*sj5*x8053))+((r02*x8052)));
evalcond[1]=(((r20*x8055))+(((-1.0)*r21*x8056))+(((-1.0)*r22*x8053)));
evalcond[2]=((((-1.0)*r12*x8053))+((r10*x8055))+(((-1.0)*r11*x8056)));
evalcond[3]=((1.0)+((r00*x8055))+(((-1.0)*r02*x8053))+(((-1.0)*r01*x8056)));
evalcond[4]=(((cj2*sj1))+((r10*x8054))+((cj1*sj2))+(((-1.0)*r11*sj5*x8053))+((r12*x8052)));
evalcond[5]=(((r20*x8054))+(((-1.0)*r21*sj5*x8053))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8057 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8057.valid){
continue;
}
CheckValue<IkReal> x8058=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8057.value)+(((1.5707963267949)*(x8058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8059=IKcos(j4);
IkReal x8060=IKsin(j4);
IkReal x8061=((1.0)*x8059);
IkReal x8062=(cj5*x8059);
IkReal x8063=(cj5*x8060);
IkReal x8064=((1.0)*sj5*x8060);
evalcond[0]=(((r00*x8062))+((r02*x8060))+(((-1.0)*r01*sj5*x8061)));
evalcond[1]=(((r20*x8063))+(((-1.0)*r21*x8064))+(((-1.0)*r22*x8061)));
evalcond[2]=(((r10*x8063))+(((-1.0)*r11*x8064))+(((-1.0)*r12*x8061)));
evalcond[3]=((1.0)+((r00*x8063))+(((-1.0)*r01*x8064))+(((-1.0)*r02*x8061)));
evalcond[4]=(((cj2*sj1))+((r10*x8062))+((cj1*sj2))+(((-1.0)*r11*sj5*x8061))+((r12*x8060)));
evalcond[5]=(((r22*x8060))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8062))+(((-1.0)*r21*sj5*x8061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8065=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8065;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x8065);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8066=((1.0)*sj5);
IkReal x8067=((((-1.0)*cj5*r21))+(((-1.0)*r20*x8066)));
j4eval[0]=x8067;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x8066))))));
j4eval[2]=IKsign(x8067);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8068=cj5*cj5;
IkReal x8069=r01*r01;
IkReal x8070=(cj5*r00);
IkReal x8071=(r01*sj5);
IkReal x8072=((((-2.0)*x8070*x8071))+((x8068*(r00*r00)))+(((-1.0)*x8068*x8069))+x8069+(r02*r02));
j4eval[0]=x8072;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8071))+x8070))));
j4eval[2]=IKsign(x8072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8073=cj5*cj5;
IkReal x8074=r01*r01;
IkReal x8075=(r01*sj5);
IkReal x8076=(cj5*r00);
CheckValue<IkReal> x8077=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8075*x8076))+((x8073*(r00*r00)))+(((-1.0)*x8073*x8074))+x8074+(r02*r02))),-1);
if(!x8077.valid){
continue;
}
CheckValue<IkReal> x8078 = IKatan2WithCheck(IkReal(((((-1.0)*x8075))+x8076)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8077.value)))+(x8078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8079=IKcos(j4);
IkReal x8080=IKsin(j4);
IkReal x8081=((1.0)*cj1);
IkReal x8082=((1.0)*x8079);
IkReal x8083=(cj5*x8079);
IkReal x8084=(cj5*x8080);
IkReal x8085=((1.0)*sj5*x8080);
evalcond[0]=((((-1.0)*r01*sj5*x8082))+((r00*x8083))+((r02*x8080)));
evalcond[1]=((((-1.0)*r22*x8082))+(((-1.0)*r21*x8085))+((r20*x8084)));
evalcond[2]=(((r10*x8084))+(((-1.0)*r11*x8085))+(((-1.0)*r12*x8082)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8082))+(((-1.0)*r01*x8085))+((r00*x8084)));
evalcond[4]=((((-1.0)*cj2*x8081))+(((-1.0)*r21*sj5*x8082))+((sj1*sj2))+((r22*x8080))+((r20*x8083)));
evalcond[5]=(((r10*x8083))+(((-1.0)*sj2*x8081))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x8082))+((r12*x8080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8086=((1.0)*sj5);
CheckValue<IkReal> x8087=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x8086)))),-1);
if(!x8087.valid){
continue;
}
CheckValue<IkReal> x8088 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x8086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8087.value)))+(x8088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8089=IKcos(j4);
IkReal x8090=IKsin(j4);
IkReal x8091=((1.0)*cj1);
IkReal x8092=((1.0)*x8089);
IkReal x8093=(cj5*x8089);
IkReal x8094=(cj5*x8090);
IkReal x8095=((1.0)*sj5*x8090);
evalcond[0]=((((-1.0)*r01*sj5*x8092))+((r00*x8093))+((r02*x8090)));
evalcond[1]=((((-1.0)*r22*x8092))+((r20*x8094))+(((-1.0)*r21*x8095)));
evalcond[2]=(((r10*x8094))+(((-1.0)*r12*x8092))+(((-1.0)*r11*x8095)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8092))+(((-1.0)*r01*x8095))+((r00*x8094)));
evalcond[4]=((((-1.0)*cj2*x8091))+(((-1.0)*r21*sj5*x8092))+((r22*x8090))+((sj1*sj2))+((r20*x8093)));
evalcond[5]=((((-1.0)*r11*sj5*x8092))+((r10*x8093))+(((-1.0)*cj2*sj1))+((r12*x8090))+(((-1.0)*sj2*x8091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8096=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8096.valid){
continue;
}
CheckValue<IkReal> x8097 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8096.value)))+(x8097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8098=IKcos(j4);
IkReal x8099=IKsin(j4);
IkReal x8100=((1.0)*cj1);
IkReal x8101=((1.0)*x8098);
IkReal x8102=(cj5*x8098);
IkReal x8103=(cj5*x8099);
IkReal x8104=((1.0)*sj5*x8099);
evalcond[0]=(((r00*x8102))+(((-1.0)*r01*sj5*x8101))+((r02*x8099)));
evalcond[1]=(((r20*x8103))+(((-1.0)*r21*x8104))+(((-1.0)*r22*x8101)));
evalcond[2]=((((-1.0)*r11*x8104))+((r10*x8103))+(((-1.0)*r12*x8101)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x8104))+((r00*x8103))+(((-1.0)*r02*x8101)));
evalcond[4]=((((-1.0)*r21*sj5*x8101))+((r22*x8099))+((r20*x8102))+((sj1*sj2))+(((-1.0)*cj2*x8100)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r10*x8102))+(((-1.0)*sj2*x8100))+((r12*x8099))+(((-1.0)*r11*sj5*x8101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8105=((-1.0)*r10);
IkReal x8107 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8107)==0){
continue;
}
IkReal x8106=pow(x8107,-0.5);
CheckValue<IkReal> x8108 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8105),IKFAST_ATAN2_MAGTHRESH);
if(!x8108.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8108.value));
IkReal gconst145=(r11*x8106);
IkReal gconst146=(x8105*x8106);
CheckValue<IkReal> x8109 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8109.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8109.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8110=((-1.0)*r10);
IkReal x8111=x8106;
CheckValue<IkReal> x8113 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8110),IKFAST_ATAN2_MAGTHRESH);
if(!x8113.valid){
continue;
}
IkReal x8112=((-1.0)*(x8113.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x8112;
IkReal gconst144=x8112;
IkReal gconst145=(r11*x8111);
IkReal gconst146=(x8110*x8111);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8114=((1.0)*gconst145);
CheckValue<IkReal> x8115=IKPowWithIntegerCheck(IKsign((((gconst145*r20))+((gconst146*r21)))),-1);
if(!x8115.valid){
continue;
}
CheckValue<IkReal> x8116 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*r11*sj0*x8114))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x8114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8115.value)))+(x8116.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8117=IKsin(j4);
IkReal x8118=IKcos(j4);
IkReal x8119=(gconst145*r11);
IkReal x8120=(cj2*sj1);
IkReal x8121=(gconst145*r01);
IkReal x8122=(gconst145*r21);
IkReal x8123=(cj1*sj2);
IkReal x8124=((1.0)*x8118);
IkReal x8125=(gconst146*x8118);
IkReal x8126=(gconst146*x8117);
IkReal x8127=((1.0)*x8117);
evalcond[0]=((((-1.0)*x8122*x8127))+((r20*x8126))+(((-1.0)*r22*x8124)));
evalcond[1]=(sj0+(((-1.0)*x8121*x8127))+((r00*x8126))+(((-1.0)*r02*x8124)));
evalcond[2]=((((-1.0)*r12*x8124))+((r10*x8126))+(((-1.0)*x8119*x8127))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x8122*x8124))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8125))+((r22*x8117)));
evalcond[4]=(((r02*x8117))+(((-1.0)*x8121*x8124))+((cj0*x8123))+((cj0*x8120))+((r00*x8125)));
evalcond[5]=(((r12*x8117))+((r10*x8125))+(((-1.0)*x8119*x8124))+((sj0*x8123))+((sj0*x8120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8128=((1.0)*gconst145);
CheckValue<IkReal> x8129 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst146*r20))+(((-1.0)*cj0*r21*x8128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8129.valid){
continue;
}
CheckValue<IkReal> x8130=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r01))+(((-1.0)*r00*x8128)))),-1);
if(!x8130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8129.value)+(((1.5707963267949)*(x8130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8131=IKsin(j4);
IkReal x8132=IKcos(j4);
IkReal x8133=(gconst145*r11);
IkReal x8134=(cj2*sj1);
IkReal x8135=(gconst145*r01);
IkReal x8136=(gconst145*r21);
IkReal x8137=(cj1*sj2);
IkReal x8138=((1.0)*x8132);
IkReal x8139=(gconst146*x8132);
IkReal x8140=(gconst146*x8131);
IkReal x8141=((1.0)*x8131);
evalcond[0]=(((r20*x8140))+(((-1.0)*r22*x8138))+(((-1.0)*x8136*x8141)));
evalcond[1]=((((-1.0)*r02*x8138))+sj0+((r00*x8140))+(((-1.0)*x8135*x8141)));
evalcond[2]=((((-1.0)*x8133*x8141))+((r10*x8140))+(((-1.0)*r12*x8138))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x8131))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8139))+(((-1.0)*x8136*x8138)));
evalcond[4]=(((r00*x8139))+((r02*x8131))+((cj0*x8134))+((cj0*x8137))+(((-1.0)*x8135*x8138)));
evalcond[5]=(((r12*x8131))+(((-1.0)*x8133*x8138))+((sj0*x8134))+((sj0*x8137))+((r10*x8139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8142=((-1.0)*r11);
IkReal x8144 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8144)==0){
continue;
}
IkReal x8143=pow(x8144,-0.5);
CheckValue<IkReal> x8145 = IKatan2WithCheck(IkReal(x8142),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8145.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8145.value))));
IkReal gconst148=(x8142*x8143);
IkReal gconst149=((1.0)*r10*x8143);
CheckValue<IkReal> x8146 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8146.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8146.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8147=((-1.0)*r11);
CheckValue<IkReal> x8150 = IKatan2WithCheck(IkReal(x8147),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8150.valid){
continue;
}
IkReal x8148=((1.0)*(x8150.value));
IkReal x8149=x8143;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8148)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8148)));
IkReal gconst148=(x8147*x8149);
IkReal gconst149=((1.0)*r10*x8149);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8151=((-1.0)*r11);
CheckValue<IkReal> x8154 = IKatan2WithCheck(IkReal(x8151),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8154.valid){
continue;
}
IkReal x8152=((1.0)*(x8154.value));
IkReal x8153=x8143;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8152)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8152)));
IkReal gconst148=(x8151*x8153);
IkReal gconst149=((1.0)*r10*x8153);
IkReal x8155=r12*r12;
IkReal x8156=(cj0*r02);
IkReal x8157=x8143;
IkReal x8158=(sj0*x8157);
j4eval[0]=((IKabs((((r12*sj0))+x8156)))+(IKabs(((((-1.0)*x8158))+((x8155*x8158))+((r12*x8156*x8157))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8159=((-1.0)*r11);
CheckValue<IkReal> x8162 = IKatan2WithCheck(IkReal(x8159),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8162.valid){
continue;
}
IkReal x8160=((1.0)*(x8162.value));
IkReal x8161=x8143;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8160)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8160)));
IkReal gconst148=(x8159*x8161);
IkReal gconst149=((1.0)*r10*x8161);
IkReal x8163=r12*r12;
IkReal x8164=(sj1*sj2);
IkReal x8165=((1.0)+(((-1.0)*x8163)));
IkReal x8166=((1.0)*cj1*cj2);
CheckValue<IkReal> x8173=IKPowWithIntegerCheck(x8165,-1);
if(!x8173.valid){
continue;
}
IkReal x8167=x8173.value;
CheckValue<IkReal> x8174=IKPowWithIntegerCheck(((-1.0)+x8163),-1);
if(!x8174.valid){
continue;
}
IkReal x8168=x8174.value;
IkReal x8169=((1.0)*x8167);
if((x8165) < -0.00001)
continue;
IkReal x8170=IKsqrt(x8165);
IkReal x8171=(r12*r22*x8168*x8170);
IkReal x8172=((((-1.0)*x8169*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8167))+(((-1.0)*(r22*r22)))+(((-1.0)*x8169*(r11*r11)*(r21*r21))));
j4eval[0]=x8172;
j4eval[1]=IKsign(x8172);
j4eval[2]=((IKabs((((x8164*x8171))+(((-1.0)*x8166*x8171)))))+(IKabs((((r22*x8164))+(((-1.0)*r22*x8166))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8175=(gconst149*r20);
IkReal x8176=(sj1*sj2);
IkReal x8177=(gconst148*r21);
IkReal x8178=(cj1*cj2);
CheckValue<IkReal> x8179=IKPowWithIntegerCheck(IKsign(((((2.0)*x8175*x8177))+(((-1.0)*(x8177*x8177)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x8175*x8175))))),-1);
if(!x8179.valid){
continue;
}
CheckValue<IkReal> x8180 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8178))+((r22*x8176)))),IkReal((((x8177*x8178))+(((-1.0)*x8176*x8177))+(((-1.0)*x8175*x8178))+((x8175*x8176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8179.value)))+(x8180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8181=IKsin(j4);
IkReal x8182=IKcos(j4);
IkReal x8183=(gconst148*r11);
IkReal x8184=(gconst148*r21);
IkReal x8185=(cj2*sj1);
IkReal x8186=(gconst148*r01);
IkReal x8187=(cj1*sj2);
IkReal x8188=((1.0)*x8182);
IkReal x8189=(gconst149*x8182);
IkReal x8190=(gconst149*x8181);
IkReal x8191=((1.0)*x8181);
evalcond[0]=(((r20*x8190))+(((-1.0)*r22*x8188))+(((-1.0)*x8184*x8191)));
evalcond[1]=((((-1.0)*r02*x8188))+((r00*x8190))+sj0+(((-1.0)*x8186*x8191)));
evalcond[2]=(((r10*x8190))+(((-1.0)*x8183*x8191))+(((-1.0)*r12*x8188))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x8181))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8184*x8188))+((r20*x8189)));
evalcond[4]=(((r00*x8189))+((r02*x8181))+(((-1.0)*x8186*x8188))+((cj0*x8187))+((cj0*x8185)));
evalcond[5]=(((r12*x8181))+((r10*x8189))+((sj0*x8187))+((sj0*x8185))+(((-1.0)*x8183*x8188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8192=((1.0)*gconst148);
CheckValue<IkReal> x8193 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8192))+((cj0*gconst149*r00))+(((-1.0)*r11*sj0*x8192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8193.valid){
continue;
}
CheckValue<IkReal> x8194=IKPowWithIntegerCheck(IKsign((((gconst148*r20))+((gconst149*r21)))),-1);
if(!x8194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8193.value)+(((1.5707963267949)*(x8194.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8195=IKsin(j4);
IkReal x8196=IKcos(j4);
IkReal x8197=(gconst148*r11);
IkReal x8198=(gconst148*r21);
IkReal x8199=(cj2*sj1);
IkReal x8200=(gconst148*r01);
IkReal x8201=(cj1*sj2);
IkReal x8202=((1.0)*x8196);
IkReal x8203=(gconst149*x8196);
IkReal x8204=(gconst149*x8195);
IkReal x8205=((1.0)*x8195);
evalcond[0]=((((-1.0)*x8198*x8205))+(((-1.0)*r22*x8202))+((r20*x8204)));
evalcond[1]=(sj0+(((-1.0)*x8200*x8205))+(((-1.0)*r02*x8202))+((r00*x8204)));
evalcond[2]=((((-1.0)*r12*x8202))+((r10*x8204))+(((-1.0)*x8197*x8205))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x8198*x8202))+((r22*x8195))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8203)));
evalcond[4]=((((-1.0)*x8200*x8202))+((cj0*x8201))+((r02*x8195))+((r00*x8203))+((cj0*x8199)));
evalcond[5]=(((r12*x8195))+((sj0*x8201))+((sj0*x8199))+((r10*x8203))+(((-1.0)*x8197*x8202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8206=((1.0)*gconst148);
CheckValue<IkReal> x8207 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x8206))+((cj0*gconst149*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8207.valid){
continue;
}
CheckValue<IkReal> x8208=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r01))+(((-1.0)*r00*x8206)))),-1);
if(!x8208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8207.value)+(((1.5707963267949)*(x8208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8209=IKsin(j4);
IkReal x8210=IKcos(j4);
IkReal x8211=(gconst148*r11);
IkReal x8212=(gconst148*r21);
IkReal x8213=(cj2*sj1);
IkReal x8214=(gconst148*r01);
IkReal x8215=(cj1*sj2);
IkReal x8216=((1.0)*x8210);
IkReal x8217=(gconst149*x8210);
IkReal x8218=(gconst149*x8209);
IkReal x8219=((1.0)*x8209);
evalcond[0]=((((-1.0)*r22*x8216))+(((-1.0)*x8212*x8219))+((r20*x8218)));
evalcond[1]=(sj0+(((-1.0)*r02*x8216))+(((-1.0)*x8214*x8219))+((r00*x8218)));
evalcond[2]=((((-1.0)*x8211*x8219))+(((-1.0)*r12*x8216))+((r10*x8218))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x8209))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8212*x8216))+((r20*x8217)));
evalcond[4]=(((r02*x8209))+((cj0*x8215))+((cj0*x8213))+(((-1.0)*x8214*x8216))+((r00*x8217)));
evalcond[5]=(((r12*x8209))+(((-1.0)*x8211*x8216))+((r10*x8217))+((sj0*x8215))+((sj0*x8213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8220=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8220;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x8220);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8221=((1.0)*sj5);
IkReal x8222=((((-1.0)*r00*x8221))+(((-1.0)*cj5*r01)));
j4eval[0]=x8222;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x8221)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8222);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8223=cj5*cj5;
IkReal x8224=r11*r11;
IkReal x8225=(r11*sj5);
IkReal x8226=(cj5*r10);
IkReal x8227=((r12*r12)+(((-2.0)*x8225*x8226))+((x8223*(r10*r10)))+(((-1.0)*x8223*x8224))+x8224);
j4eval[0]=x8227;
j4eval[1]=IKsign(x8227);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x8225))+x8226))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8228=cj5*cj5;
IkReal x8229=r11*r11;
IkReal x8230=(cj5*r10);
IkReal x8231=(r11*sj5);
CheckValue<IkReal> x8232=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x8228*(r10*r10)))+(((-1.0)*x8228*x8229))+(((-2.0)*x8230*x8231))+x8229)),-1);
if(!x8232.valid){
continue;
}
CheckValue<IkReal> x8233 = IKatan2WithCheck(IkReal(((((-1.0)*x8231))+x8230)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8232.value)))+(x8233.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8234=IKcos(j4);
IkReal x8235=IKsin(j4);
IkReal x8236=(cj5*r10);
IkReal x8237=((1.0)*x8234);
IkReal x8238=(cj5*x8235);
IkReal x8239=(cj5*x8234);
IkReal x8240=((1.0)*sj5*x8235);
evalcond[0]=(((r12*x8235))+(((-1.0)*r11*sj5*x8237))+((x8234*x8236)));
evalcond[1]=(((r20*x8238))+(((-1.0)*r21*x8240))+(((-1.0)*r22*x8237)));
evalcond[2]=((((-1.0)*r02*x8237))+((r00*x8238))+(((-1.0)*r01*x8240)));
evalcond[3]=((-1.0)+((x8235*x8236))+(((-1.0)*r12*x8237))+(((-1.0)*r11*x8240)));
evalcond[4]=(((cj2*sj1))+((r02*x8235))+((cj1*sj2))+(((-1.0)*r01*sj5*x8237))+((r00*x8239)));
evalcond[5]=(((r20*x8239))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8235))+(((-1.0)*r21*sj5*x8237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8241=((1.0)*sj5);
CheckValue<IkReal> x8242 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x8241)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8242.valid){
continue;
}
CheckValue<IkReal> x8243=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8241))+(((-1.0)*cj5*r01)))),-1);
if(!x8243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8242.value)+(((1.5707963267949)*(x8243.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8244=IKcos(j4);
IkReal x8245=IKsin(j4);
IkReal x8246=(cj5*r10);
IkReal x8247=((1.0)*x8244);
IkReal x8248=(cj5*x8245);
IkReal x8249=(cj5*x8244);
IkReal x8250=((1.0)*sj5*x8245);
evalcond[0]=((((-1.0)*r11*sj5*x8247))+((x8244*x8246))+((r12*x8245)));
evalcond[1]=(((r20*x8248))+(((-1.0)*r22*x8247))+(((-1.0)*r21*x8250)));
evalcond[2]=((((-1.0)*r01*x8250))+(((-1.0)*r02*x8247))+((r00*x8248)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x8250))+((x8245*x8246))+(((-1.0)*r12*x8247)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*sj5*x8247))+((r02*x8245))+((cj1*sj2))+((r00*x8249)));
evalcond[5]=(((r20*x8249))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8245))+(((-1.0)*r21*sj5*x8247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8251=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8251.valid){
continue;
}
CheckValue<IkReal> x8252 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8251.value)))+(x8252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8253=IKcos(j4);
IkReal x8254=IKsin(j4);
IkReal x8255=(cj5*r10);
IkReal x8256=((1.0)*x8253);
IkReal x8257=(cj5*x8254);
IkReal x8258=(cj5*x8253);
IkReal x8259=((1.0)*sj5*x8254);
evalcond[0]=((((-1.0)*r11*sj5*x8256))+((r12*x8254))+((x8253*x8255)));
evalcond[1]=((((-1.0)*r22*x8256))+(((-1.0)*r21*x8259))+((r20*x8257)));
evalcond[2]=(((r00*x8257))+(((-1.0)*r01*x8259))+(((-1.0)*r02*x8256)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8256))+(((-1.0)*r11*x8259))+((x8254*x8255)));
evalcond[4]=(((r00*x8258))+((cj2*sj1))+((cj1*sj2))+((r02*x8254))+(((-1.0)*r01*sj5*x8256)));
evalcond[5]=((((-1.0)*r21*sj5*x8256))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8258))+((r22*x8254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8260=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8260;
j4eval[1]=IKsign(x8260);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8261=((1.0)*sj5);
IkReal x8262=((((-1.0)*r20*x8261))+(((-1.0)*cj5*r21)));
j4eval[0]=x8262;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x8261))+((cj5*r00))))));
j4eval[2]=IKsign(x8262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8263=(sj1*sj2);
IkReal x8264=(cj1*cj2);
IkReal x8265=(r11*sj5);
IkReal x8266=(cj5*r10);
IkReal x8267=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8267;
j4eval[1]=IKsign(x8267);
j4eval[2]=((IKabs(((((-1.0)*x8263*x8265))+(((-1.0)*x8264*x8266))+((x8263*x8266))+((x8264*x8265)))))+(IKabs((((r12*x8264))+(((-1.0)*r12*x8263))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8268=(sj1*sj2);
IkReal x8269=(cj1*cj2);
IkReal x8270=(cj5*r10);
IkReal x8271=(r11*sj5);
CheckValue<IkReal> x8272 = IKatan2WithCheck(IkReal((((x8268*x8270))+(((-1.0)*x8268*x8271))+((x8269*x8271))+(((-1.0)*x8269*x8270)))),IkReal((((r12*x8269))+(((-1.0)*r12*x8268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8272.valid){
continue;
}
CheckValue<IkReal> x8273=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8272.value)+(((1.5707963267949)*(x8273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8274=IKcos(j4);
IkReal x8275=IKsin(j4);
IkReal x8276=(cj5*r10);
IkReal x8277=((1.0)*cj1);
IkReal x8278=((1.0)*x8274);
IkReal x8279=(cj5*x8275);
IkReal x8280=(cj5*x8274);
IkReal x8281=((1.0)*sj5*x8275);
evalcond[0]=((((-1.0)*r11*sj5*x8278))+((x8274*x8276))+((r12*x8275)));
evalcond[1]=((((-1.0)*r21*x8281))+((r20*x8279))+(((-1.0)*r22*x8278)));
evalcond[2]=((((-1.0)*r01*x8281))+(((-1.0)*r02*x8278))+((r00*x8279)));
evalcond[3]=((1.0)+((x8275*x8276))+(((-1.0)*r11*x8281))+(((-1.0)*r12*x8278)));
evalcond[4]=(((r20*x8280))+((sj1*sj2))+((r22*x8275))+(((-1.0)*cj2*x8277))+(((-1.0)*r21*sj5*x8278)));
evalcond[5]=((((-1.0)*r01*sj5*x8278))+(((-1.0)*sj2*x8277))+((r00*x8280))+((r02*x8275))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8282=((1.0)*sj5);
CheckValue<IkReal> x8283=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8282))+(((-1.0)*cj5*r21)))),-1);
if(!x8283.valid){
continue;
}
CheckValue<IkReal> x8284 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x8282))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8283.value)))+(x8284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8285=IKcos(j4);
IkReal x8286=IKsin(j4);
IkReal x8287=(cj5*r10);
IkReal x8288=((1.0)*cj1);
IkReal x8289=((1.0)*x8285);
IkReal x8290=(cj5*x8286);
IkReal x8291=(cj5*x8285);
IkReal x8292=((1.0)*sj5*x8286);
evalcond[0]=((((-1.0)*r11*sj5*x8289))+((r12*x8286))+((x8285*x8287)));
evalcond[1]=((((-1.0)*r21*x8292))+((r20*x8290))+(((-1.0)*r22*x8289)));
evalcond[2]=((((-1.0)*r02*x8289))+((r00*x8290))+(((-1.0)*r01*x8292)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8289))+(((-1.0)*r11*x8292))+((x8286*x8287)));
evalcond[4]=((((-1.0)*r21*sj5*x8289))+(((-1.0)*cj2*x8288))+((r20*x8291))+((sj1*sj2))+((r22*x8286)));
evalcond[5]=((((-1.0)*sj2*x8288))+((r00*x8291))+(((-1.0)*cj2*sj1))+((r02*x8286))+(((-1.0)*r01*sj5*x8289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8293=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8293.valid){
continue;
}
CheckValue<IkReal> x8294 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8293.value)))+(x8294.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8295=IKcos(j4);
IkReal x8296=IKsin(j4);
IkReal x8297=(cj5*r10);
IkReal x8298=((1.0)*cj1);
IkReal x8299=((1.0)*x8295);
IkReal x8300=(cj5*x8296);
IkReal x8301=(cj5*x8295);
IkReal x8302=((1.0)*sj5*x8296);
evalcond[0]=(((r12*x8296))+((x8295*x8297))+(((-1.0)*r11*sj5*x8299)));
evalcond[1]=((((-1.0)*r21*x8302))+(((-1.0)*r22*x8299))+((r20*x8300)));
evalcond[2]=(((r00*x8300))+(((-1.0)*r01*x8302))+(((-1.0)*r02*x8299)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8299))+((x8296*x8297))+(((-1.0)*r11*x8302)));
evalcond[4]=((((-1.0)*r21*sj5*x8299))+(((-1.0)*cj2*x8298))+((sj1*sj2))+((r20*x8301))+((r22*x8296)));
evalcond[5]=((((-1.0)*sj2*x8298))+((r00*x8301))+(((-1.0)*cj2*sj1))+((r02*x8296))+(((-1.0)*r01*sj5*x8299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8303=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8303);
rxp0_2=(py*r00);
rxp1_0=(r21*x8303);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8304=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8304);
rxp0_2=(py*r00);
rxp1_0=(r21*x8304);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8305=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8305);
rxp0_2=(py*r00);
rxp1_0=(r21*x8305);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8308=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x8308.valid){
continue;
}
IkReal x8306=x8308.value;
IkReal x8307=((1.0)*cj0*x8306);
cj4array[0]=((((-1.0)*cj2*sj1*x8307))+(((-1.0)*cj1*sj2*x8307)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8309=IKsin(j4);
IkReal x8310=IKcos(j4);
IkReal x8311=(cj5*r20);
IkReal x8312=((1.0)*sj5);
evalcond[0]=(r12*x8309);
evalcond[1]=((((-1.0)*r12*x8310))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x8309*x8312))+((x8309*x8311)));
evalcond[3]=((((-1.0)*r01*x8309*x8312))+((cj5*r00*x8309)));
evalcond[4]=(((x8310*x8311))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x8310*x8312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8314=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8314.valid){
continue;
}
IkReal x8313=x8314.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8313))+((cj1*cj2*x8313)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8315=IKsin(j4);
IkReal x8316=IKcos(j4);
IkReal x8317=(cj5*r00);
IkReal x8318=((1.0)*r01*sj5);
evalcond[0]=(r12*x8315);
evalcond[1]=((((-1.0)*r12*x8316))+(((-1.0)*cj0)));
evalcond[2]=(((cj5*r20*x8315))+(((-1.0)*r21*sj5*x8315)));
evalcond[3]=(((x8315*x8317))+(((-1.0)*x8315*x8318)));
evalcond[4]=((((-1.0)*x8316*x8318))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((x8316*x8317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8319=IKPowWithIntegerCheck(r12,-1);
if(!x8319.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8319.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8320=IKsin(j4);
IkReal x8321=IKcos(j4);
IkReal x8322=(cj5*x8321);
IkReal x8323=((1.0)*r21*sj5);
IkReal x8324=((1.0)*r01*sj5);
IkReal x8325=(cj5*x8320);
evalcond[0]=(r12*x8320);
evalcond[1]=(((r20*x8325))+(((-1.0)*x8320*x8323)));
evalcond[2]=(((r00*x8325))+(((-1.0)*x8320*x8324)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8322))+(((-1.0)*x8321*x8323)));
evalcond[4]=(((cj0*cj2*sj1))+((r00*x8322))+((cj0*cj1*sj2))+(((-1.0)*x8321*x8324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8326=((1.0)*sj5);
CheckValue<IkReal> x8327=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8327.valid){
continue;
}
CheckValue<IkReal> x8328 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x8326))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x8326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8327.value)))+(x8328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8329=IKsin(j4);
IkReal x8330=IKcos(j4);
IkReal x8331=(cj2*sj1);
IkReal x8332=(cj5*r10);
IkReal x8333=(cj1*sj2);
IkReal x8334=((1.0)*x8330);
IkReal x8335=(cj5*x8329);
IkReal x8336=(cj5*x8330);
IkReal x8337=((1.0)*sj5*x8329);
evalcond[0]=((((-1.0)*r22*x8334))+(((-1.0)*r21*x8337))+((r20*x8335)));
evalcond[1]=(sj0+(((-1.0)*r01*x8337))+((r00*x8335))+(((-1.0)*r02*x8334)));
evalcond[2]=(((x8329*x8332))+(((-1.0)*r11*x8337))+(((-1.0)*r12*x8334))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x8329))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x8334))+((r20*x8336)));
evalcond[4]=(((r02*x8329))+((r00*x8336))+(((-1.0)*r01*sj5*x8334))+((cj0*x8331))+((cj0*x8333)));
evalcond[5]=(((x8330*x8332))+((r12*x8329))+(((-1.0)*r11*sj5*x8334))+((sj0*x8331))+((sj0*x8333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8338=((1.0)*sj5);
CheckValue<IkReal> x8339=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8338))+(((-1.0)*cj5*r01)))),-1);
if(!x8339.valid){
continue;
}
CheckValue<IkReal> x8340 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x8338))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8339.value)))+(x8340.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8341=IKsin(j4);
IkReal x8342=IKcos(j4);
IkReal x8343=(cj2*sj1);
IkReal x8344=(cj5*r10);
IkReal x8345=(cj1*sj2);
IkReal x8346=((1.0)*x8342);
IkReal x8347=(cj5*x8341);
IkReal x8348=(cj5*x8342);
IkReal x8349=((1.0)*sj5*x8341);
evalcond[0]=((((-1.0)*r21*x8349))+((r20*x8347))+(((-1.0)*r22*x8346)));
evalcond[1]=(sj0+(((-1.0)*r02*x8346))+(((-1.0)*r01*x8349))+((r00*x8347)));
evalcond[2]=((((-1.0)*r11*x8349))+((x8341*x8344))+(((-1.0)*r12*x8346))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x8346))+((r20*x8348))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8341)));
evalcond[4]=(((cj0*x8343))+((cj0*x8345))+(((-1.0)*r01*sj5*x8346))+((r02*x8341))+((r00*x8348)));
evalcond[5]=(((sj0*x8343))+((sj0*x8345))+((x8342*x8344))+((r12*x8341))+(((-1.0)*r11*sj5*x8346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8350=((1.0)*sj5);
CheckValue<IkReal> x8351=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x8350)))),-1);
if(!x8351.valid){
continue;
}
CheckValue<IkReal> x8352 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x8350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8351.value)))+(x8352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8353=IKsin(j4);
IkReal x8354=IKcos(j4);
IkReal x8355=(cj2*sj1);
IkReal x8356=(cj5*r10);
IkReal x8357=(cj1*sj2);
IkReal x8358=((1.0)*x8354);
IkReal x8359=(cj5*x8353);
IkReal x8360=(cj5*x8354);
IkReal x8361=((1.0)*sj5*x8353);
evalcond[0]=((((-1.0)*r21*x8361))+(((-1.0)*r22*x8358))+((r20*x8359)));
evalcond[1]=(sj0+(((-1.0)*r02*x8358))+(((-1.0)*r01*x8361))+((r00*x8359)));
evalcond[2]=(((x8353*x8356))+(((-1.0)*r11*x8361))+(((-1.0)*r12*x8358))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x8353))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8360))+(((-1.0)*r21*sj5*x8358)));
evalcond[4]=(((r02*x8353))+((r00*x8360))+((cj0*x8355))+((cj0*x8357))+(((-1.0)*r01*sj5*x8358)));
evalcond[5]=(((x8354*x8356))+(((-1.0)*r11*sj5*x8358))+((sj0*x8357))+((sj0*x8355))+((r12*x8353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8362=cj1*cj1;
IkReal x8363=cj2*cj2;
IkReal x8364=(cj5*r11);
IkReal x8365=(sj1*sj2);
IkReal x8366=((353000.0)*py);
IkReal x8367=((50310.0)*cj1);
IkReal x8368=(cj5*r01);
IkReal x8369=(cj1*px);
IkReal x8370=(r10*sj5);
IkReal x8371=(r00*sj5);
IkReal x8372=(cj1*cj2);
CheckValue<IkReal> x8373 = IKatan2WithCheck(IkReal(((((-1.0)*x8365*x8366))+(((-41301.0)*x8364*x8372))+(((-1.0)*x8364*x8367))+(((-1.0)*x8367*x8370))+(((16263.0)*x8368))+(((-139000.0)*px))+(((430000.0)*cj1*py))+(((16263.0)*x8371))+(((41301.0)*x8364*x8365))+(((-41301.0)*x8370*x8372))+(((41301.0)*x8365*x8370))+((x8366*x8372)))),IkReal(((((41301.0)*x8365*x8368))+(((-16263.0)*x8364))+(((-16263.0)*x8370))+(((430000.0)*x8369))+(((-1.0)*x8367*x8371))+(((-1.0)*x8367*x8368))+(((353000.0)*cj2*x8369))+(((-41301.0)*x8368*x8372))+(((-41301.0)*x8371*x8372))+(((139000.0)*py))+(((-353000.0)*px*x8365))+(((41301.0)*x8365*x8371)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8373.valid){
continue;
}
CheckValue<IkReal> x8374=IKPowWithIntegerCheck(IKsign(((-143930.0)+(((-249218.0)*x8362*x8363))+(((-303580.0)*cj2*x8362))+(((-60291.0)*x8362))+(((124609.0)*x8363))+(((249218.0)*x8365*x8372))+(((303580.0)*cj1*x8365)))),-1);
if(!x8374.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8373.value)+(((1.5707963267949)*(x8374.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8375=IKcos(j0);
IkReal x8376=IKsin(j0);
IkReal x8377=((0.117)*cj5);
IkReal x8378=((0.43)*cj1);
IkReal x8379=((0.117)*sj5);
IkReal x8380=((0.353)*sj1*sj2);
IkReal x8381=((0.353)*cj1*cj2);
evalcond[0]=(((r00*x8379))+(((-1.0)*px))+((x8375*x8380))+(((-1.0)*x8375*x8381))+(((-1.0)*x8375*x8378))+(((0.139)*x8376))+((r01*x8377)));
evalcond[1]=(((r10*x8379))+(((-1.0)*x8376*x8378))+((x8376*x8380))+(((-1.0)*py))+(((-1.0)*x8376*x8381))+(((-0.139)*x8375))+((r11*x8377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8382=((1.0)*sj5);
IkReal x8383=((((-1.0)*cj5*r11))+(((-1.0)*r10*x8382)));
j4eval[0]=x8383;
j4eval[1]=IKsign(x8383);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x8382))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8384=((1.0)*sj5);
IkReal x8385=((((-1.0)*r00*x8384))+(((-1.0)*cj5*r01)));
j4eval[0]=x8385;
j4eval[1]=IKsign(x8385);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x8384))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8386=((1.0)*sj5);
IkReal x8387=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8387;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*r11*sj0*x8386))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x8386))))));
j4eval[2]=IKsign(x8387);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8389 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8389)==0){
continue;
}
IkReal x8388=pow(x8389,-0.5);
CheckValue<IkReal> x8390 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8390.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8390.value));
IkReal gconst1=((-1.0)*r21*x8388);
IkReal gconst2=(r20*x8388);
CheckValue<IkReal> x8391 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8391.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8391.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8394 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8394.valid){
continue;
}
IkReal x8392=((-1.0)*(x8394.value));
IkReal x8393=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8392;
IkReal gconst0=x8392;
IkReal gconst1=((-1.0)*r21*x8393);
IkReal gconst2=(r20*x8393);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8397 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8397.valid){
continue;
}
IkReal x8395=((-1.0)*(x8397.value));
IkReal x8396=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8395;
IkReal gconst0=x8395;
IkReal gconst1=((-1.0)*r21*x8396);
IkReal gconst2=(r20*x8396);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8400 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8400.valid){
continue;
}
IkReal x8398=((-1.0)*(x8400.value));
IkReal x8399=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8398;
IkReal gconst0=x8398;
IkReal gconst1=((-1.0)*r21*x8399);
IkReal gconst2=(r20*x8399);
IkReal x8401=r22*r22;
CheckValue<IkReal> x8405=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8401))),-1);
if(!x8405.valid){
continue;
}
IkReal x8402=x8405.value;
IkReal x8403=(cj3*x8402);
IkReal x8404=(((cj3*x8401))+((x8403*(r21*r21*r21*r21)))+(((2.0)*x8403*(r20*r20)*(r21*r21)))+((x8403*(r20*r20*r20*r20))));
j4eval[0]=x8404;
j4eval[1]=IKsign(x8404);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8408 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8408.valid){
continue;
}
IkReal x8406=((-1.0)*(x8408.value));
IkReal x8407=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8406;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8406;
IkReal gconst1=((-1.0)*r21*x8407);
IkReal gconst2=(r20*x8407);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8411 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8411.valid){
continue;
}
IkReal x8409=((-1.0)*(x8411.value));
IkReal x8410=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8409;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8409;
IkReal gconst1=((-1.0)*r21*x8410);
IkReal gconst2=(r20*x8410);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8414 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8414.valid){
continue;
}
IkReal x8412=((-1.0)*(x8414.value));
IkReal x8413=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8412;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8412;
IkReal gconst1=((-1.0)*r21*x8413);
IkReal gconst2=(r20*x8413);
IkReal x8415=r22*r22;
CheckValue<IkReal> x8418=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8415))),-1);
if(!x8418.valid){
continue;
}
IkReal x8416=x8418.value;
IkReal x8417=(((x8416*(r21*r21*r21*r21)))+x8415+((x8416*(r20*r20*r20*r20)))+(((2.0)*x8416*(r20*r20)*(r21*r21))));
j4eval[0]=x8417;
j4eval[1]=IKsign(x8417);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8421 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8421.valid){
continue;
}
IkReal x8419=((-1.0)*(x8421.value));
IkReal x8420=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8419;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8419;
IkReal gconst1=((-1.0)*r21*x8420);
IkReal gconst2=(r20*x8420);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8424 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8424.valid){
continue;
}
IkReal x8422=((-1.0)*(x8424.value));
IkReal x8423=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8422;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8422;
IkReal gconst1=((-1.0)*r21*x8423);
IkReal gconst2=(r20*x8423);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8427 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8427.valid){
continue;
}
IkReal x8425=((-1.0)*(x8427.value));
IkReal x8426=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8425;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8425;
IkReal gconst1=((-1.0)*r21*x8426);
IkReal gconst2=(r20*x8426);
IkReal x8428=r22*r22;
IkReal x8429=(cj1*r12*sj2);
IkReal x8430=(cj2*r12*sj1);
CheckValue<IkReal> x8434=IKPowWithIntegerCheck(((-1.0)+x8428),-1);
if(!x8434.valid){
continue;
}
IkReal x8431=x8434.value;
if((((1.0)+(((-1.0)*x8428)))) < -0.00001)
continue;
IkReal x8432=IKsqrt(((1.0)+(((-1.0)*x8428))));
IkReal x8433=(r22*x8431*x8432);
j4eval[0]=((IKabs((((x8429*x8433))+((x8430*x8433)))))+(IKabs((x8429+x8430))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8435=(cj2*sj1);
IkReal x8436=(gconst2*r10);
IkReal x8437=(cj1*sj2);
IkReal x8438=((1.0)*gconst1*r11);
CheckValue<IkReal> x8439 = IKatan2WithCheck(IkReal((((r12*x8437))+((r12*x8435)))),IkReal(((((-1.0)*x8435*x8438))+((x8436*x8437))+((x8435*x8436))+(((-1.0)*x8437*x8438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8439.valid){
continue;
}
CheckValue<IkReal> x8440=IKPowWithIntegerCheck(IKsign(((((gconst1*gconst1)*(r11*r11)))+(r12*r12)+(((-2.0)*gconst1*r11*x8436))+(x8436*x8436))),-1);
if(!x8440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8439.value)+(((1.5707963267949)*(x8440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8441=IKsin(j4);
IkReal x8442=IKcos(j4);
IkReal x8443=(gconst1*r01);
IkReal x8444=(gconst1*r21);
IkReal x8445=(gconst1*r11);
IkReal x8446=((1.0)*x8442);
IkReal x8447=((1.0)*x8441);
IkReal x8448=(gconst2*x8441);
evalcond[0]=((((-1.0)*x8444*x8447))+((r20*x8448))+(((-1.0)*r22*x8446)));
evalcond[1]=((((-1.0)*r12*x8446))+(((-1.0)*x8445*x8447))+((r10*x8448)));
evalcond[2]=((((-1.0)*gconst2*r00*x8446))+((x8442*x8443))+(((-1.0)*r02*x8447)));
evalcond[3]=((1.0)+(((-1.0)*x8443*x8447))+((r00*x8448))+(((-1.0)*r02*x8446)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x8447))+(((-1.0)*gconst2*r10*x8446))+((x8442*x8445)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8446))+((x8442*x8444))+(((-1.0)*r22*x8447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8449=(gconst1*r01);
IkReal x8450=(gconst2*r00);
CheckValue<IkReal> x8451=IKPowWithIntegerCheck(IKsign(((x8450*x8450)+(x8449*x8449)+(((-2.0)*x8449*x8450))+(r02*r02))),-1);
if(!x8451.valid){
continue;
}
CheckValue<IkReal> x8452 = IKatan2WithCheck(IkReal((x8449+(((-1.0)*x8450)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8451.value)))+(x8452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8453=IKsin(j4);
IkReal x8454=IKcos(j4);
IkReal x8455=(gconst1*r01);
IkReal x8456=(gconst1*r21);
IkReal x8457=(gconst1*r11);
IkReal x8458=((1.0)*x8454);
IkReal x8459=((1.0)*x8453);
IkReal x8460=(gconst2*x8453);
evalcond[0]=((((-1.0)*r22*x8458))+(((-1.0)*x8456*x8459))+((r20*x8460)));
evalcond[1]=((((-1.0)*x8457*x8459))+(((-1.0)*r12*x8458))+((r10*x8460)));
evalcond[2]=((((-1.0)*gconst2*r00*x8458))+(((-1.0)*r02*x8459))+((x8454*x8455)));
evalcond[3]=((1.0)+((r00*x8460))+(((-1.0)*r02*x8458))+(((-1.0)*x8455*x8459)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r10*x8458))+(((-1.0)*r12*x8459))+((x8454*x8457)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8458))+(((-1.0)*r22*x8459))+((x8454*x8456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8461=((1.0)*gconst1);
CheckValue<IkReal> x8462=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8461)))),-1);
if(!x8462.valid){
continue;
}
CheckValue<IkReal> x8463 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x8461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8462.value)))+(x8463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8464=IKsin(j4);
IkReal x8465=IKcos(j4);
IkReal x8466=(gconst1*r01);
IkReal x8467=(gconst1*r21);
IkReal x8468=(gconst1*r11);
IkReal x8469=((1.0)*x8465);
IkReal x8470=((1.0)*x8464);
IkReal x8471=(gconst2*x8464);
evalcond[0]=((((-1.0)*x8467*x8470))+(((-1.0)*r22*x8469))+((r20*x8471)));
evalcond[1]=(((r10*x8471))+(((-1.0)*r12*x8469))+(((-1.0)*x8468*x8470)));
evalcond[2]=(((x8465*x8466))+(((-1.0)*r02*x8470))+(((-1.0)*gconst2*r00*x8469)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8469))+((r00*x8471))+(((-1.0)*x8466*x8470)));
evalcond[4]=(((x8465*x8468))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r10*x8469))+(((-1.0)*r12*x8470)));
evalcond[5]=(((x8465*x8467))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8469))+(((-1.0)*r22*x8470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8474 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8474.valid){
continue;
}
IkReal x8472=((-1.0)*(x8474.value));
IkReal x8473=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8472;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8472;
IkReal gconst1=((-1.0)*r21*x8473);
IkReal gconst2=(r20*x8473);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8477 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8477.valid){
continue;
}
IkReal x8475=((-1.0)*(x8477.value));
IkReal x8476=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8475;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8475;
IkReal gconst1=((-1.0)*r21*x8476);
IkReal gconst2=(r20*x8476);
IkReal x8478=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8482=IKPowWithIntegerCheck(x8478,-1);
if(!x8482.valid){
continue;
}
IkReal x8479=x8482.value;
IkReal x8480=((1.0)*x8479);
IkReal x8481=((((-1.0)*(r02*r02)))+(((-1.0)*x8480*(r00*r00)*(r20*r20)))+(((-1.0)*x8480*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8479)));
j4eval[0]=x8481;
j4eval[1]=IKsign(x8481);
j4eval[2]=r02;
j4eval[3]=x8478;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8485 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8485.valid){
continue;
}
IkReal x8483=((-1.0)*(x8485.value));
IkReal x8484=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8483;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8483;
IkReal gconst1=((-1.0)*r21*x8484);
IkReal gconst2=(r20*x8484);
IkReal x8486=r22*r22;
IkReal x8487=(r02*sj1*sj2);
IkReal x8488=(cj1*cj2*r02);
CheckValue<IkReal> x8492=IKPowWithIntegerCheck(((-1.0)+x8486),-1);
if(!x8492.valid){
continue;
}
IkReal x8489=x8492.value;
if((((1.0)+(((-1.0)*x8486)))) < -0.00001)
continue;
IkReal x8490=IKsqrt(((1.0)+(((-1.0)*x8486))));
IkReal x8491=(r22*x8489*x8490);
j4eval[0]=((IKabs((x8487+(((-1.0)*x8488)))))+(IKabs((((x8488*x8491))+(((-1.0)*x8487*x8491))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8493=(sj1*sj2);
IkReal x8494=(gconst2*r00);
IkReal x8495=(gconst1*r01);
IkReal x8496=(cj1*cj2);
CheckValue<IkReal> x8497=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*gconst2*r11)))),-1);
if(!x8497.valid){
continue;
}
CheckValue<IkReal> x8498 = IKatan2WithCheck(IkReal(((((-1.0)*x8495*x8496))+((x8493*x8495))+(((-1.0)*x8493*x8494))+((x8494*x8496)))),IkReal((((r02*x8493))+(((-1.0)*r02*x8496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8497.value)))+(x8498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8499=IKsin(j4);
IkReal x8500=IKcos(j4);
IkReal x8501=(gconst1*r01);
IkReal x8502=(gconst1*r21);
IkReal x8503=((1.0)*cj2);
IkReal x8504=(gconst1*r11);
IkReal x8505=((1.0)*x8500);
IkReal x8506=((1.0)*x8499);
IkReal x8507=(gconst2*x8499);
evalcond[0]=((((-1.0)*r22*x8505))+((r20*x8507))+(((-1.0)*x8502*x8506)));
evalcond[1]=(((r10*x8507))+(((-1.0)*r12*x8505))+(((-1.0)*x8504*x8506)));
evalcond[2]=(((x8500*x8501))+(((-1.0)*gconst2*r00*x8505))+(((-1.0)*r02*x8506)));
evalcond[3]=((-1.0)+(((-1.0)*x8501*x8506))+(((-1.0)*r02*x8505))+((r00*x8507)));
evalcond[4]=(((x8500*x8502))+(((-1.0)*cj1*x8503))+((sj1*sj2))+(((-1.0)*r22*x8506))+(((-1.0)*gconst2*r20*x8505)));
evalcond[5]=(((x8500*x8504))+(((-1.0)*sj1*x8503))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r10*x8505))+(((-1.0)*r12*x8506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8508=(gconst1*r01);
IkReal x8509=(gconst2*r00);
CheckValue<IkReal> x8510 = IKatan2WithCheck(IkReal((x8508+(((-1.0)*x8509)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8510.valid){
continue;
}
CheckValue<IkReal> x8511=IKPowWithIntegerCheck(IKsign(((((2.0)*x8508*x8509))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8508*x8508)))+(((-1.0)*(x8509*x8509))))),-1);
if(!x8511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8510.value)+(((1.5707963267949)*(x8511.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8512=IKsin(j4);
IkReal x8513=IKcos(j4);
IkReal x8514=(gconst1*r01);
IkReal x8515=(gconst1*r21);
IkReal x8516=((1.0)*cj2);
IkReal x8517=(gconst1*r11);
IkReal x8518=((1.0)*x8513);
IkReal x8519=((1.0)*x8512);
IkReal x8520=(gconst2*x8512);
evalcond[0]=(((r20*x8520))+(((-1.0)*x8515*x8519))+(((-1.0)*r22*x8518)));
evalcond[1]=((((-1.0)*x8517*x8519))+(((-1.0)*r12*x8518))+((r10*x8520)));
evalcond[2]=((((-1.0)*gconst2*r00*x8518))+((x8513*x8514))+(((-1.0)*r02*x8519)));
evalcond[3]=((-1.0)+(((-1.0)*x8514*x8519))+(((-1.0)*r02*x8518))+((r00*x8520)));
evalcond[4]=(((x8513*x8515))+(((-1.0)*cj1*x8516))+((sj1*sj2))+(((-1.0)*r22*x8519))+(((-1.0)*gconst2*r20*x8518)));
evalcond[5]=(((x8513*x8517))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8516))+(((-1.0)*r12*x8519))+(((-1.0)*gconst2*r10*x8518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8521 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8521.valid){
continue;
}
CheckValue<IkReal> x8522=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8521.value)+(((1.5707963267949)*(x8522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8523=IKsin(j4);
IkReal x8524=IKcos(j4);
IkReal x8525=(gconst1*r01);
IkReal x8526=(gconst1*r21);
IkReal x8527=((1.0)*cj2);
IkReal x8528=(gconst1*r11);
IkReal x8529=((1.0)*x8524);
IkReal x8530=((1.0)*x8523);
IkReal x8531=(gconst2*x8523);
evalcond[0]=((((-1.0)*x8526*x8530))+((r20*x8531))+(((-1.0)*r22*x8529)));
evalcond[1]=(((r10*x8531))+(((-1.0)*r12*x8529))+(((-1.0)*x8528*x8530)));
evalcond[2]=((((-1.0)*r02*x8530))+(((-1.0)*gconst2*r00*x8529))+((x8524*x8525)));
evalcond[3]=((-1.0)+(((-1.0)*x8525*x8530))+((r00*x8531))+(((-1.0)*r02*x8529)));
evalcond[4]=((((-1.0)*cj1*x8527))+(((-1.0)*r22*x8530))+((sj1*sj2))+((x8524*x8526))+(((-1.0)*gconst2*r20*x8529)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x8524*x8528))+(((-1.0)*gconst2*r10*x8529))+(((-1.0)*r12*x8530))+(((-1.0)*sj1*x8527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8534 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8534.valid){
continue;
}
IkReal x8532=((-1.0)*(x8534.value));
IkReal x8533=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8532;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8532;
IkReal gconst1=((-1.0)*r21*x8533);
IkReal gconst2=(r20*x8533);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8537 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8537.valid){
continue;
}
IkReal x8535=((-1.0)*(x8537.value));
IkReal x8536=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8535;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8535;
IkReal gconst1=((-1.0)*r21*x8536);
IkReal gconst2=(r20*x8536);
IkReal x8538=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8542=IKPowWithIntegerCheck(x8538,-1);
if(!x8542.valid){
continue;
}
IkReal x8539=x8542.value;
IkReal x8540=((1.0)*x8539);
IkReal x8541=((((-1.0)*x8540*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8540*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8539)));
j4eval[0]=x8541;
j4eval[1]=r12;
j4eval[2]=x8538;
j4eval[3]=IKsign(x8541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8545 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8545.valid){
continue;
}
IkReal x8543=((-1.0)*(x8545.value));
IkReal x8544=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8543;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8543;
IkReal gconst1=((-1.0)*r21*x8544);
IkReal gconst2=(r20*x8544);
IkReal x8546=r22*r22;
IkReal x8547=(cj1*r02*sj2);
IkReal x8548=(cj2*r02*sj1);
CheckValue<IkReal> x8552=IKPowWithIntegerCheck(((-1.0)+x8546),-1);
if(!x8552.valid){
continue;
}
IkReal x8549=x8552.value;
if((((1.0)+(((-1.0)*x8546)))) < -0.00001)
continue;
IkReal x8550=IKsqrt(((1.0)+(((-1.0)*x8546))));
IkReal x8551=(r22*x8549*x8550);
j4eval[0]=((IKabs((((x8547*x8551))+((x8548*x8551)))))+(IKabs((x8548+x8547))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8553=(gconst1*r01);
IkReal x8554=(cj2*sj1);
IkReal x8555=(gconst2*r00);
IkReal x8556=(cj1*sj2);
CheckValue<IkReal> x8557=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8553*x8555))+(x8553*x8553)+(r02*r02)+(x8555*x8555))),-1);
if(!x8557.valid){
continue;
}
CheckValue<IkReal> x8558 = IKatan2WithCheck(IkReal((((r02*x8554))+((r02*x8556)))),IkReal((((x8555*x8556))+((x8554*x8555))+(((-1.0)*x8553*x8556))+(((-1.0)*x8553*x8554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8557.value)))+(x8558.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8559=IKsin(j4);
IkReal x8560=IKcos(j4);
IkReal x8561=(gconst1*r01);
IkReal x8562=(gconst1*r21);
IkReal x8563=(gconst1*r11);
IkReal x8564=((1.0)*x8560);
IkReal x8565=((1.0)*x8559);
IkReal x8566=(gconst2*x8559);
evalcond[0]=(((r20*x8566))+(((-1.0)*r22*x8564))+(((-1.0)*x8562*x8565)));
evalcond[1]=(((r00*x8566))+(((-1.0)*x8561*x8565))+(((-1.0)*r02*x8564)));
evalcond[2]=((((-1.0)*gconst2*r10*x8564))+(((-1.0)*r12*x8565))+((x8560*x8563)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8564))+((r10*x8566))+(((-1.0)*x8563*x8565)));
evalcond[4]=((((-1.0)*gconst2*r00*x8564))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x8565))+((x8560*x8561)));
evalcond[5]=((((-1.0)*r22*x8565))+(((-1.0)*gconst2*r20*x8564))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8560*x8562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8567=(gconst1*r11);
IkReal x8568=(gconst2*r10);
CheckValue<IkReal> x8569=IKPowWithIntegerCheck(IKsign(((((2.0)*x8567*x8568))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8568*x8568)))+(((-1.0)*(x8567*x8567))))),-1);
if(!x8569.valid){
continue;
}
CheckValue<IkReal> x8570 = IKatan2WithCheck(IkReal((x8567+(((-1.0)*x8568)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8569.value)))+(x8570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8571=IKsin(j4);
IkReal x8572=IKcos(j4);
IkReal x8573=(gconst1*r01);
IkReal x8574=(gconst1*r21);
IkReal x8575=(gconst1*r11);
IkReal x8576=((1.0)*x8572);
IkReal x8577=((1.0)*x8571);
IkReal x8578=(gconst2*x8571);
evalcond[0]=(((r20*x8578))+(((-1.0)*x8574*x8577))+(((-1.0)*r22*x8576)));
evalcond[1]=((((-1.0)*r02*x8576))+(((-1.0)*x8573*x8577))+((r00*x8578)));
evalcond[2]=((((-1.0)*r12*x8577))+(((-1.0)*gconst2*r10*x8576))+((x8572*x8575)));
evalcond[3]=((-1.0)+(((-1.0)*x8575*x8577))+((r10*x8578))+(((-1.0)*r12*x8576)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r00*x8576))+(((-1.0)*r02*x8577))+((x8572*x8573)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8576))+((x8572*x8574))+(((-1.0)*r22*x8577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8579=((1.0)*gconst1);
CheckValue<IkReal> x8580 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8579))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8580.valid){
continue;
}
CheckValue<IkReal> x8581=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8579)))),-1);
if(!x8581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8580.value)+(((1.5707963267949)*(x8581.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8582=IKsin(j4);
IkReal x8583=IKcos(j4);
IkReal x8584=(gconst1*r01);
IkReal x8585=(gconst1*r21);
IkReal x8586=(gconst1*r11);
IkReal x8587=((1.0)*x8583);
IkReal x8588=((1.0)*x8582);
IkReal x8589=(gconst2*x8582);
evalcond[0]=((((-1.0)*r22*x8587))+(((-1.0)*x8585*x8588))+((r20*x8589)));
evalcond[1]=((((-1.0)*x8584*x8588))+(((-1.0)*r02*x8587))+((r00*x8589)));
evalcond[2]=(((x8583*x8586))+(((-1.0)*r12*x8588))+(((-1.0)*gconst2*r10*x8587)));
evalcond[3]=((-1.0)+((r10*x8589))+(((-1.0)*r12*x8587))+(((-1.0)*x8586*x8588)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r00*x8587))+((cj1*sj2))+(((-1.0)*r02*x8588))+((x8583*x8584)));
evalcond[5]=((((-1.0)*r22*x8588))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8583*x8585))+(((-1.0)*gconst2*r20*x8587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8592 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8592.valid){
continue;
}
IkReal x8590=((-1.0)*(x8592.value));
IkReal x8591=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8590;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8590;
IkReal gconst1=((-1.0)*r21*x8591);
IkReal gconst2=(r20*x8591);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8595 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8595.valid){
continue;
}
IkReal x8593=((-1.0)*(x8595.value));
IkReal x8594=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8593;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8593;
IkReal gconst1=((-1.0)*r21*x8594);
IkReal gconst2=(r20*x8594);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8598 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8598.valid){
continue;
}
IkReal x8596=((-1.0)*(x8598.value));
IkReal x8597=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8596;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8596;
IkReal gconst1=((-1.0)*r21*x8597);
IkReal gconst2=(r20*x8597);
IkReal x8599=r22*r22;
IkReal x8600=(r12*sj1*sj2);
IkReal x8601=(cj1*cj2*r12);
CheckValue<IkReal> x8605=IKPowWithIntegerCheck(((-1.0)+x8599),-1);
if(!x8605.valid){
continue;
}
IkReal x8602=x8605.value;
if((((1.0)+(((-1.0)*x8599)))) < -0.00001)
continue;
IkReal x8603=IKsqrt(((1.0)+(((-1.0)*x8599))));
IkReal x8604=(r22*x8602*x8603);
j4eval[0]=((IKabs(((((-1.0)*x8600*x8604))+((x8601*x8604)))))+(IKabs((x8600+(((-1.0)*x8601))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8606=(sj1*sj2);
IkReal x8607=(gconst1*r11);
IkReal x8608=(gconst2*r10);
IkReal x8609=((1.0)*cj1*cj2);
CheckValue<IkReal> x8610 = IKatan2WithCheck(IkReal((((x8606*x8607))+(((-1.0)*x8607*x8609))+(((-1.0)*x8606*x8608))+((cj1*cj2*x8608)))),IkReal((((r12*x8606))+(((-1.0)*r12*x8609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8610.valid){
continue;
}
CheckValue<IkReal> x8611=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8610.value)+(((1.5707963267949)*(x8611.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8612=IKsin(j4);
IkReal x8613=IKcos(j4);
IkReal x8614=(gconst1*r01);
IkReal x8615=(gconst1*r21);
IkReal x8616=((1.0)*cj2);
IkReal x8617=(gconst1*r11);
IkReal x8618=((1.0)*x8613);
IkReal x8619=((1.0)*x8612);
IkReal x8620=(gconst2*x8612);
evalcond[0]=((((-1.0)*r22*x8618))+((r20*x8620))+(((-1.0)*x8615*x8619)));
evalcond[1]=((((-1.0)*x8614*x8619))+(((-1.0)*r02*x8618))+((r00*x8620)));
evalcond[2]=((((-1.0)*gconst2*r10*x8618))+(((-1.0)*r12*x8619))+((x8613*x8617)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8618))+((r10*x8620))+(((-1.0)*x8617*x8619)));
evalcond[4]=((((-1.0)*r22*x8619))+((sj1*sj2))+(((-1.0)*cj1*x8616))+((x8613*x8615))+(((-1.0)*gconst2*r20*x8618)));
evalcond[5]=((((-1.0)*r02*x8619))+(((-1.0)*sj1*x8616))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r00*x8618))+((x8613*x8614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8621=(gconst2*r10);
IkReal x8622=(gconst1*r11);
CheckValue<IkReal> x8623 = IKatan2WithCheck(IkReal(((((-1.0)*x8621))+x8622)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8623.valid){
continue;
}
CheckValue<IkReal> x8624=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8622*x8622)+(x8621*x8621)+(((-2.0)*x8621*x8622)))),-1);
if(!x8624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8623.value)+(((1.5707963267949)*(x8624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8625=IKsin(j4);
IkReal x8626=IKcos(j4);
IkReal x8627=(gconst1*r01);
IkReal x8628=(gconst1*r21);
IkReal x8629=((1.0)*cj2);
IkReal x8630=(gconst1*r11);
IkReal x8631=((1.0)*x8626);
IkReal x8632=((1.0)*x8625);
IkReal x8633=(gconst2*x8625);
evalcond[0]=((((-1.0)*x8628*x8632))+(((-1.0)*r22*x8631))+((r20*x8633)));
evalcond[1]=((((-1.0)*x8627*x8632))+((r00*x8633))+(((-1.0)*r02*x8631)));
evalcond[2]=((((-1.0)*r12*x8632))+((x8626*x8630))+(((-1.0)*gconst2*r10*x8631)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8631))+(((-1.0)*x8630*x8632))+((r10*x8633)));
evalcond[4]=((((-1.0)*cj1*x8629))+((sj1*sj2))+((x8626*x8628))+(((-1.0)*r22*x8632))+(((-1.0)*gconst2*r20*x8631)));
evalcond[5]=((((-1.0)*sj1*x8629))+(((-1.0)*cj1*sj2))+((x8626*x8627))+(((-1.0)*gconst2*r00*x8631))+(((-1.0)*r02*x8632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8634 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8634.valid){
continue;
}
CheckValue<IkReal> x8635=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8634.value)+(((1.5707963267949)*(x8635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8636=IKsin(j4);
IkReal x8637=IKcos(j4);
IkReal x8638=(gconst1*r01);
IkReal x8639=(gconst1*r21);
IkReal x8640=((1.0)*cj2);
IkReal x8641=(gconst1*r11);
IkReal x8642=((1.0)*x8637);
IkReal x8643=((1.0)*x8636);
IkReal x8644=(gconst2*x8636);
evalcond[0]=((((-1.0)*x8639*x8643))+(((-1.0)*r22*x8642))+((r20*x8644)));
evalcond[1]=((((-1.0)*x8638*x8643))+((r00*x8644))+(((-1.0)*r02*x8642)));
evalcond[2]=((((-1.0)*gconst2*r10*x8642))+(((-1.0)*r12*x8643))+((x8637*x8641)));
evalcond[3]=((1.0)+((r10*x8644))+(((-1.0)*r12*x8642))+(((-1.0)*x8641*x8643)));
evalcond[4]=(((x8637*x8639))+(((-1.0)*r22*x8643))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8642))+(((-1.0)*cj1*x8640)));
evalcond[5]=((((-1.0)*gconst2*r00*x8642))+((x8637*x8638))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8640))+(((-1.0)*r02*x8643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8645=((-1.0)*py);
CheckValue<IkReal> x8647 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8647.valid){
continue;
}
IkReal x8646=((-1.0)*(x8647.value));
sj5=gconst1;
cj5=gconst2;
j5=x8646;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8645);
rxp0_2=(py*r00);
rxp1_0=(r21*x8645);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8646;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8648=((-1.0)*py);
CheckValue<IkReal> x8650 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8650.valid){
continue;
}
IkReal x8649=((-1.0)*(x8650.value));
sj5=gconst1;
cj5=gconst2;
j5=x8649;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8648);
rxp0_2=(py*r00);
rxp1_0=(r21*x8648);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8649;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8651=((-1.0)*py);
CheckValue<IkReal> x8653 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8653.valid){
continue;
}
IkReal x8652=((-1.0)*(x8653.value));
sj5=gconst1;
cj5=gconst2;
j5=x8652;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8651);
rxp0_2=(py*r00);
rxp1_0=(r21*x8651);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8652;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8656=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x8656.valid){
continue;
}
IkReal x8654=x8656.value;
IkReal x8655=((1.0)*cj0*x8654);
cj4array[0]=((((-1.0)*cj1*sj2*x8655))+(((-1.0)*cj2*sj1*x8655)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8657=IKsin(j4);
IkReal x8658=IKcos(j4);
IkReal x8659=(gconst2*x8657);
IkReal x8660=((1.0)*x8658);
IkReal x8661=((1.0)*gconst1*x8657);
evalcond[0]=((-1.0)*r12*x8657);
evalcond[1]=((((-1.0)*r12*x8660))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x8661))+((r20*x8659)));
evalcond[3]=(((r00*x8659))+(((-1.0)*r01*x8661)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst1*r21*x8658))+(((-1.0)*gconst2*r20*x8660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8663=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8663.valid){
continue;
}
IkReal x8662=x8663.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8662))+((cj1*cj2*x8662)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8664=IKsin(j4);
IkReal x8665=IKcos(j4);
IkReal x8666=(gconst2*r00);
IkReal x8667=((1.0)*x8665);
IkReal x8668=((1.0)*gconst1*x8664);
evalcond[0]=((-1.0)*r12*x8664);
evalcond[1]=((((-1.0)*r12*x8667))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x8668))+((gconst2*r20*x8664)));
evalcond[3]=((((-1.0)*r01*x8668))+((x8664*x8666)));
evalcond[4]=((((-1.0)*x8666*x8667))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((gconst1*r01*x8665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8669=IKPowWithIntegerCheck(r12,-1);
if(!x8669.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8669.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8670=IKsin(j4);
IkReal x8671=IKcos(j4);
IkReal x8672=(gconst2*r00);
IkReal x8673=(gconst2*r20);
IkReal x8674=(gconst1*x8671);
IkReal x8675=((1.0)*x8671);
IkReal x8676=((1.0)*gconst1*x8670);
evalcond[0]=((-1.0)*r12*x8670);
evalcond[1]=(((x8670*x8673))+(((-1.0)*r21*x8676)));
evalcond[2]=((((-1.0)*r01*x8676))+((x8670*x8672)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x8674))+(((-1.0)*x8673*x8675)));
evalcond[4]=((((-1.0)*x8672*x8675))+((r01*x8674))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8677=(sj1*sj2);
IkReal x8678=(gconst2*r20);
IkReal x8679=(cj1*cj2);
IkReal x8680=(gconst1*r21);
CheckValue<IkReal> x8681=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8678*x8678)+(x8680*x8680)+(((-2.0)*x8678*x8680)))),-1);
if(!x8681.valid){
continue;
}
CheckValue<IkReal> x8682 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8679))+((r22*x8677)))),IkReal((((x8679*x8680))+(((-1.0)*x8678*x8679))+((x8677*x8678))+(((-1.0)*x8677*x8680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8681.value)))+(x8682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8683=IKsin(j4);
IkReal x8684=IKcos(j4);
IkReal x8685=(cj2*sj1);
IkReal x8686=(cj1*sj2);
IkReal x8687=((1.0)*x8684);
IkReal x8688=(gconst1*x8684);
IkReal x8689=(gconst2*x8683);
IkReal x8690=((1.0)*x8683);
IkReal x8691=(gconst1*x8690);
evalcond[0]=(((r20*x8689))+(((-1.0)*r22*x8687))+(((-1.0)*r21*x8691)));
evalcond[1]=(sj0+(((-1.0)*r02*x8687))+((r00*x8689))+(((-1.0)*r01*x8691)));
evalcond[2]=((((-1.0)*r12*x8687))+((r10*x8689))+(((-1.0)*r11*x8691))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x8688))+(((-1.0)*r22*x8690))+(((-1.0)*gconst2*r20*x8687)));
evalcond[4]=(((r01*x8688))+(((-1.0)*gconst2*r00*x8687))+(((-1.0)*r02*x8690))+((cj0*x8686))+((cj0*x8685)));
evalcond[5]=(((r11*x8688))+(((-1.0)*gconst2*r10*x8687))+(((-1.0)*r12*x8690))+((sj0*x8685))+((sj0*x8686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8692=((1.0)*gconst1);
CheckValue<IkReal> x8693=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8692)))),-1);
if(!x8693.valid){
continue;
}
CheckValue<IkReal> x8694 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*r21*x8692)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8693.value)))+(x8694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8695=IKsin(j4);
IkReal x8696=IKcos(j4);
IkReal x8697=(cj2*sj1);
IkReal x8698=(cj1*sj2);
IkReal x8699=((1.0)*x8696);
IkReal x8700=(gconst1*x8696);
IkReal x8701=(gconst2*x8695);
IkReal x8702=((1.0)*x8695);
IkReal x8703=(gconst1*x8702);
evalcond[0]=((((-1.0)*r21*x8703))+((r20*x8701))+(((-1.0)*r22*x8699)));
evalcond[1]=(sj0+(((-1.0)*r02*x8699))+((r00*x8701))+(((-1.0)*r01*x8703)));
evalcond[2]=(((r10*x8701))+(((-1.0)*r12*x8699))+(((-1.0)*r11*x8703))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst2*r20*x8699))+((r21*x8700))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8702)));
evalcond[4]=(((cj0*x8697))+((cj0*x8698))+(((-1.0)*gconst2*r00*x8699))+(((-1.0)*r02*x8702))+((r01*x8700)));
evalcond[5]=(((r11*x8700))+((sj0*x8698))+((sj0*x8697))+(((-1.0)*r12*x8702))+(((-1.0)*gconst2*r10*x8699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8704=((1.0)*gconst1);
CheckValue<IkReal> x8705=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8704)))),-1);
if(!x8705.valid){
continue;
}
CheckValue<IkReal> x8706 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x8704))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8705.value)))+(x8706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8707=IKsin(j4);
IkReal x8708=IKcos(j4);
IkReal x8709=(cj2*sj1);
IkReal x8710=(cj1*sj2);
IkReal x8711=((1.0)*x8708);
IkReal x8712=(gconst1*x8708);
IkReal x8713=(gconst2*x8707);
IkReal x8714=((1.0)*x8707);
IkReal x8715=(gconst1*x8714);
evalcond[0]=((((-1.0)*r21*x8715))+(((-1.0)*r22*x8711))+((r20*x8713)));
evalcond[1]=((((-1.0)*r01*x8715))+sj0+(((-1.0)*r02*x8711))+((r00*x8713)));
evalcond[2]=((((-1.0)*r12*x8711))+(((-1.0)*r11*x8715))+((r10*x8713))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8714))+((r21*x8712))+(((-1.0)*gconst2*r20*x8711)));
evalcond[4]=(((cj0*x8710))+(((-1.0)*r02*x8714))+((cj0*x8709))+(((-1.0)*gconst2*r00*x8711))+((r01*x8712)));
evalcond[5]=((((-1.0)*gconst2*r10*x8711))+(((-1.0)*r12*x8714))+((sj0*x8710))+((r11*x8712))+((sj0*x8709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8718 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8718.valid){
continue;
}
IkReal x8716=((-1.0)*(x8718.value));
IkReal x8717=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8716;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8716;
IkReal gconst1=((-1.0)*r21*x8717);
IkReal gconst2=(r20*x8717);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8721 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8721.valid){
continue;
}
IkReal x8719=((-1.0)*(x8721.value));
IkReal x8720=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8719;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8719;
IkReal gconst1=((-1.0)*r21*x8720);
IkReal gconst2=(r20*x8720);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8724 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8724.valid){
continue;
}
IkReal x8722=((-1.0)*(x8724.value));
IkReal x8723=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8722;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8722;
IkReal gconst1=((-1.0)*r21*x8723);
IkReal gconst2=(r20*x8723);
IkReal x8725=((1.0)*(r22*r22));
CheckValue<IkReal> x8729=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8725))),-1);
if(!x8729.valid){
continue;
}
IkReal x8726=x8729.value;
IkReal x8727=((1.0)*x8726);
IkReal x8728=((((-1.0)*x8727*(r20*r20*r20*r20)))+(((-1.0)*x8727*(r21*r21*r21*r21)))+(((-1.0)*x8725))+(((-2.0)*x8726*(r20*r20)*(r21*r21))));
j4eval[0]=x8728;
j4eval[1]=IKsign(x8728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8732 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8732.valid){
continue;
}
IkReal x8730=((-1.0)*(x8732.value));
IkReal x8731=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8730;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8730;
IkReal gconst1=((-1.0)*r21*x8731);
IkReal gconst2=(r20*x8731);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8735 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8735.valid){
continue;
}
IkReal x8733=((-1.0)*(x8735.value));
IkReal x8734=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8733;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8733;
IkReal gconst1=((-1.0)*r21*x8734);
IkReal gconst2=(r20*x8734);
IkReal x8736=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8740=IKPowWithIntegerCheck(x8736,-1);
if(!x8740.valid){
continue;
}
IkReal x8737=x8740.value;
IkReal x8738=((1.0)*x8737);
IkReal x8739=((((-1.0)*(r02*r02)))+(((-1.0)*x8738*(r00*r00)*(r20*r20)))+(((-1.0)*x8738*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8737)));
j4eval[0]=x8739;
j4eval[1]=IKsign(x8739);
j4eval[2]=r02;
j4eval[3]=x8736;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8743 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8743.valid){
continue;
}
IkReal x8741=((-1.0)*(x8743.value));
IkReal x8742=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8741;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8741;
IkReal gconst1=((-1.0)*r21*x8742);
IkReal gconst2=(r20*x8742);
IkReal x8744=r22*r22;
IkReal x8745=(r02*sj1*sj2);
IkReal x8746=(cj1*cj2*r02);
CheckValue<IkReal> x8750=IKPowWithIntegerCheck(((-1.0)+x8744),-1);
if(!x8750.valid){
continue;
}
IkReal x8747=x8750.value;
if((((1.0)+(((-1.0)*x8744)))) < -0.00001)
continue;
IkReal x8748=IKsqrt(((1.0)+(((-1.0)*x8744))));
IkReal x8749=(r22*x8747*x8748);
j4eval[0]=((IKabs((x8746+(((-1.0)*x8745)))))+(IKabs((((x8745*x8749))+(((-1.0)*x8746*x8749))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8751=(gconst1*r01);
IkReal x8752=((1.0)*gconst2);
IkReal x8753=(cj1*cj2);
IkReal x8754=((1.0)*sj1*sj2);
CheckValue<IkReal> x8755=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8752)))),-1);
if(!x8755.valid){
continue;
}
CheckValue<IkReal> x8756 = IKatan2WithCheck(IkReal(((((-1.0)*x8751*x8754))+((x8751*x8753))+((gconst2*r00*sj1*sj2))+(((-1.0)*r00*x8752*x8753)))),IkReal((((r02*x8753))+(((-1.0)*r02*x8754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8755.value)))+(x8756.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8757=IKcos(j4);
IkReal x8758=IKsin(j4);
IkReal x8759=(gconst1*r01);
IkReal x8760=(gconst1*r21);
IkReal x8761=(gconst1*r11);
IkReal x8762=((1.0)*x8757);
IkReal x8763=(gconst2*x8757);
IkReal x8764=((1.0)*x8758);
IkReal x8765=(gconst2*x8758);
evalcond[0]=(((r02*x8758))+(((-1.0)*x8759*x8762))+((r00*x8763)));
evalcond[1]=((((-1.0)*r22*x8762))+(((-1.0)*x8760*x8764))+((r20*x8765)));
evalcond[2]=((((-1.0)*x8761*x8764))+(((-1.0)*r12*x8762))+((r10*x8765)));
evalcond[3]=((1.0)+(((-1.0)*x8759*x8764))+(((-1.0)*r02*x8762))+((r00*x8765)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8761*x8762))+((r12*x8758))+((r10*x8763)));
evalcond[5]=(((r22*x8758))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8760*x8762))+((r20*x8763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8766=(gconst2*r00);
IkReal x8767=(gconst1*r01);
CheckValue<IkReal> x8768 = IKatan2WithCheck(IkReal((x8766+(((-1.0)*x8767)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8768.valid){
continue;
}
CheckValue<IkReal> x8769=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x8767*x8767)))+(((-1.0)*(x8766*x8766)))+(((2.0)*x8766*x8767)))),-1);
if(!x8769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8768.value)+(((1.5707963267949)*(x8769.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8770=IKcos(j4);
IkReal x8771=IKsin(j4);
IkReal x8772=(gconst1*r01);
IkReal x8773=(gconst1*r21);
IkReal x8774=(gconst1*r11);
IkReal x8775=((1.0)*x8770);
IkReal x8776=(gconst2*x8770);
IkReal x8777=((1.0)*x8771);
IkReal x8778=(gconst2*x8771);
evalcond[0]=(((r00*x8776))+(((-1.0)*x8772*x8775))+((r02*x8771)));
evalcond[1]=((((-1.0)*x8773*x8777))+(((-1.0)*r22*x8775))+((r20*x8778)));
evalcond[2]=((((-1.0)*x8774*x8777))+(((-1.0)*r12*x8775))+((r10*x8778)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8775))+((r00*x8778))+(((-1.0)*x8772*x8777)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8774*x8775))+((r10*x8776))+((r12*x8771)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8773*x8775))+((r20*x8776))+((r22*x8771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8779=((1.0)*gconst1);
CheckValue<IkReal> x8780 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8779))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8780.valid){
continue;
}
CheckValue<IkReal> x8781=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8779))+(((-1.0)*gconst2*r11)))),-1);
if(!x8781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8780.value)+(((1.5707963267949)*(x8781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8782=IKcos(j4);
IkReal x8783=IKsin(j4);
IkReal x8784=(gconst1*r01);
IkReal x8785=(gconst1*r21);
IkReal x8786=(gconst1*r11);
IkReal x8787=((1.0)*x8782);
IkReal x8788=(gconst2*x8782);
IkReal x8789=((1.0)*x8783);
IkReal x8790=(gconst2*x8783);
evalcond[0]=((((-1.0)*x8784*x8787))+((r02*x8783))+((r00*x8788)));
evalcond[1]=((((-1.0)*x8785*x8789))+(((-1.0)*r22*x8787))+((r20*x8790)));
evalcond[2]=(((r10*x8790))+(((-1.0)*x8786*x8789))+(((-1.0)*r12*x8787)));
evalcond[3]=((1.0)+(((-1.0)*x8784*x8789))+((r00*x8790))+(((-1.0)*r02*x8787)));
evalcond[4]=(((cj2*sj1))+((r10*x8788))+((cj1*sj2))+(((-1.0)*x8786*x8787))+((r12*x8783)));
evalcond[5]=((((-1.0)*x8785*x8787))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8783))+((r20*x8788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8793 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8793.valid){
continue;
}
IkReal x8791=((-1.0)*(x8793.value));
IkReal x8792=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8791;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8791;
IkReal gconst1=((-1.0)*r21*x8792);
IkReal gconst2=(r20*x8792);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8796 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8796.valid){
continue;
}
IkReal x8794=((-1.0)*(x8796.value));
IkReal x8795=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8794;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8794;
IkReal gconst1=((-1.0)*r21*x8795);
IkReal gconst2=(r20*x8795);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8799 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8799.valid){
continue;
}
IkReal x8797=((-1.0)*(x8799.value));
IkReal x8798=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8797;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8797;
IkReal gconst1=((-1.0)*r21*x8798);
IkReal gconst2=(r20*x8798);
IkReal x8800=r22*r22;
IkReal x8801=(r02*sj1*sj2);
IkReal x8802=(cj1*cj2*r02);
CheckValue<IkReal> x8806=IKPowWithIntegerCheck(((-1.0)+x8800),-1);
if(!x8806.valid){
continue;
}
IkReal x8803=x8806.value;
if((((1.0)+(((-1.0)*x8800)))) < -0.00001)
continue;
IkReal x8804=IKsqrt(((1.0)+(((-1.0)*x8800))));
IkReal x8805=(r22*x8803*x8804);
j4eval[0]=((IKabs(((((-1.0)*x8801))+x8802)))+(IKabs((((x8801*x8805))+(((-1.0)*x8802*x8805))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8807=(gconst1*r01);
IkReal x8808=((1.0)*gconst2);
IkReal x8809=(cj1*cj2);
IkReal x8810=((1.0)*sj1*sj2);
CheckValue<IkReal> x8811 = IKatan2WithCheck(IkReal(((((-1.0)*x8807*x8810))+((gconst2*r00*sj1*sj2))+(((-1.0)*r00*x8808*x8809))+((x8807*x8809)))),IkReal(((((-1.0)*r02*x8810))+((r02*x8809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8811.valid){
continue;
}
CheckValue<IkReal> x8812=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8808))+(((-1.0)*gconst1*r10)))),-1);
if(!x8812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8811.value)+(((1.5707963267949)*(x8812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8813=IKcos(j4);
IkReal x8814=IKsin(j4);
IkReal x8815=(gconst1*r01);
IkReal x8816=((1.0)*cj2);
IkReal x8817=(gconst1*r21);
IkReal x8818=(gconst1*r11);
IkReal x8819=((1.0)*x8813);
IkReal x8820=(gconst2*x8813);
IkReal x8821=((1.0)*x8814);
IkReal x8822=(gconst2*x8814);
evalcond[0]=(((r02*x8814))+(((-1.0)*x8815*x8819))+((r00*x8820)));
evalcond[1]=((((-1.0)*r22*x8819))+((r20*x8822))+(((-1.0)*x8817*x8821)));
evalcond[2]=((((-1.0)*r12*x8819))+((r10*x8822))+(((-1.0)*x8818*x8821)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8819))+(((-1.0)*x8815*x8821))+((r00*x8822)));
evalcond[4]=(((r22*x8814))+(((-1.0)*cj1*x8816))+((sj1*sj2))+((r20*x8820))+(((-1.0)*x8817*x8819)));
evalcond[5]=(((r12*x8814))+((r10*x8820))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8816))+(((-1.0)*x8818*x8819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8823=(gconst1*r01);
IkReal x8824=(gconst2*r00);
CheckValue<IkReal> x8825 = IKatan2WithCheck(IkReal((x8824+(((-1.0)*x8823)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8825.valid){
continue;
}
CheckValue<IkReal> x8826=IKPowWithIntegerCheck(IKsign(((x8823*x8823)+(r02*r02)+(x8824*x8824)+(((-2.0)*x8823*x8824)))),-1);
if(!x8826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8825.value)+(((1.5707963267949)*(x8826.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8827=IKcos(j4);
IkReal x8828=IKsin(j4);
IkReal x8829=(gconst1*r01);
IkReal x8830=((1.0)*cj2);
IkReal x8831=(gconst1*r21);
IkReal x8832=(gconst1*r11);
IkReal x8833=((1.0)*x8827);
IkReal x8834=(gconst2*x8827);
IkReal x8835=((1.0)*x8828);
IkReal x8836=(gconst2*x8828);
evalcond[0]=(((r02*x8828))+(((-1.0)*x8829*x8833))+((r00*x8834)));
evalcond[1]=(((r20*x8836))+(((-1.0)*x8831*x8835))+(((-1.0)*r22*x8833)));
evalcond[2]=((((-1.0)*x8832*x8835))+((r10*x8836))+(((-1.0)*r12*x8833)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8833))+(((-1.0)*x8829*x8835))+((r00*x8836)));
evalcond[4]=(((r22*x8828))+((r20*x8834))+((sj1*sj2))+(((-1.0)*cj1*x8830))+(((-1.0)*x8831*x8833)));
evalcond[5]=((((-1.0)*x8832*x8833))+((r12*x8828))+((r10*x8834))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8837 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8837.valid){
continue;
}
CheckValue<IkReal> x8838=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8837.value)+(((1.5707963267949)*(x8838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8839=IKcos(j4);
IkReal x8840=IKsin(j4);
IkReal x8841=(gconst1*r01);
IkReal x8842=((1.0)*cj2);
IkReal x8843=(gconst1*r21);
IkReal x8844=(gconst1*r11);
IkReal x8845=((1.0)*x8839);
IkReal x8846=(gconst2*x8839);
IkReal x8847=((1.0)*x8840);
IkReal x8848=(gconst2*x8840);
evalcond[0]=((((-1.0)*x8841*x8845))+((r02*x8840))+((r00*x8846)));
evalcond[1]=(((r20*x8848))+(((-1.0)*x8843*x8847))+(((-1.0)*r22*x8845)));
evalcond[2]=(((r10*x8848))+(((-1.0)*x8844*x8847))+(((-1.0)*r12*x8845)));
evalcond[3]=((-1.0)+(((-1.0)*x8841*x8847))+(((-1.0)*r02*x8845))+((r00*x8848)));
evalcond[4]=(((r22*x8840))+((r20*x8846))+((sj1*sj2))+(((-1.0)*cj1*x8842))+(((-1.0)*x8843*x8845)));
evalcond[5]=(((r12*x8840))+(((-1.0)*cj1*sj2))+((r10*x8846))+(((-1.0)*sj1*x8842))+(((-1.0)*x8844*x8845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8851 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8851.valid){
continue;
}
IkReal x8849=((-1.0)*(x8851.value));
IkReal x8850=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8849;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8849;
IkReal gconst1=((-1.0)*r21*x8850);
IkReal gconst2=(r20*x8850);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8854 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8854.valid){
continue;
}
IkReal x8852=((-1.0)*(x8854.value));
IkReal x8853=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8852;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8852;
IkReal gconst1=((-1.0)*r21*x8853);
IkReal gconst2=(r20*x8853);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8857 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8857.valid){
continue;
}
IkReal x8855=((-1.0)*(x8857.value));
IkReal x8856=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8855;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8855;
IkReal gconst1=((-1.0)*r21*x8856);
IkReal gconst2=(r20*x8856);
IkReal x8858=r22*r22;
IkReal x8859=(cj1*cj2*r12);
IkReal x8860=(r12*sj1*sj2);
CheckValue<IkReal> x8864=IKPowWithIntegerCheck(((-1.0)+x8858),-1);
if(!x8864.valid){
continue;
}
IkReal x8861=x8864.value;
if((((1.0)+(((-1.0)*x8858)))) < -0.00001)
continue;
IkReal x8862=IKsqrt(((1.0)+(((-1.0)*x8858))));
IkReal x8863=(r22*x8861*x8862);
j4eval[0]=((IKabs((x8859+(((-1.0)*x8860)))))+(IKabs((((x8860*x8863))+(((-1.0)*x8859*x8863))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8865=(cj1*cj2);
IkReal x8866=(gconst2*r10);
IkReal x8867=(gconst1*r11);
IkReal x8868=((1.0)*sj1*sj2);
CheckValue<IkReal> x8869 = IKatan2WithCheck(IkReal(((((-1.0)*x8867*x8868))+((sj1*sj2*x8866))+((x8865*x8867))+(((-1.0)*x8865*x8866)))),IkReal((((r12*x8865))+(((-1.0)*r12*x8868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8869.valid){
continue;
}
CheckValue<IkReal> x8870=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8869.value)+(((1.5707963267949)*(x8870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8871=IKcos(j4);
IkReal x8872=IKsin(j4);
IkReal x8873=(gconst1*r01);
IkReal x8874=(gconst1*r21);
IkReal x8875=(gconst1*r11);
IkReal x8876=((1.0)*x8871);
IkReal x8877=(gconst2*x8871);
IkReal x8878=((1.0)*x8872);
IkReal x8879=(gconst2*x8872);
evalcond[0]=((((-1.0)*x8875*x8876))+((r10*x8877))+((r12*x8872)));
evalcond[1]=(((r20*x8879))+(((-1.0)*r22*x8876))+(((-1.0)*x8874*x8878)));
evalcond[2]=((((-1.0)*x8873*x8878))+(((-1.0)*r02*x8876))+((r00*x8879)));
evalcond[3]=((-1.0)+(((-1.0)*x8875*x8878))+((r10*x8879))+(((-1.0)*r12*x8876)));
evalcond[4]=(((r02*x8872))+((cj2*sj1))+(((-1.0)*x8873*x8876))+((cj1*sj2))+((r00*x8877)));
evalcond[5]=(((r20*x8877))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8872))+(((-1.0)*x8874*x8876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8880=(gconst1*r11);
IkReal x8881=(gconst2*r10);
CheckValue<IkReal> x8882=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x8880*x8881))+(x8880*x8880)+(x8881*x8881))),-1);
if(!x8882.valid){
continue;
}
CheckValue<IkReal> x8883 = IKatan2WithCheck(IkReal(((((-1.0)*x8880))+x8881)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8882.value)))+(x8883.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8884=IKcos(j4);
IkReal x8885=IKsin(j4);
IkReal x8886=(gconst1*r01);
IkReal x8887=(gconst1*r21);
IkReal x8888=(gconst1*r11);
IkReal x8889=((1.0)*x8884);
IkReal x8890=(gconst2*x8884);
IkReal x8891=((1.0)*x8885);
IkReal x8892=(gconst2*x8885);
evalcond[0]=((((-1.0)*x8888*x8889))+((r10*x8890))+((r12*x8885)));
evalcond[1]=((((-1.0)*r22*x8889))+((r20*x8892))+(((-1.0)*x8887*x8891)));
evalcond[2]=(((r00*x8892))+(((-1.0)*r02*x8889))+(((-1.0)*x8886*x8891)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8889))+((r10*x8892))+(((-1.0)*x8888*x8891)));
evalcond[4]=(((cj2*sj1))+((r00*x8890))+((r02*x8885))+((cj1*sj2))+(((-1.0)*x8886*x8889)));
evalcond[5]=(((r20*x8890))+((r22*x8885))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8887*x8889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8893=((1.0)*gconst1);
CheckValue<IkReal> x8894 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8893))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8894.valid){
continue;
}
CheckValue<IkReal> x8895=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8893))+(((-1.0)*gconst2*r01)))),-1);
if(!x8895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8894.value)+(((1.5707963267949)*(x8895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8896=IKcos(j4);
IkReal x8897=IKsin(j4);
IkReal x8898=(gconst1*r01);
IkReal x8899=(gconst1*r21);
IkReal x8900=(gconst1*r11);
IkReal x8901=((1.0)*x8896);
IkReal x8902=(gconst2*x8896);
IkReal x8903=((1.0)*x8897);
IkReal x8904=(gconst2*x8897);
evalcond[0]=((((-1.0)*x8900*x8901))+((r10*x8902))+((r12*x8897)));
evalcond[1]=((((-1.0)*x8899*x8903))+((r20*x8904))+(((-1.0)*r22*x8901)));
evalcond[2]=(((r00*x8904))+(((-1.0)*r02*x8901))+(((-1.0)*x8898*x8903)));
evalcond[3]=((-1.0)+(((-1.0)*x8900*x8903))+((r10*x8904))+(((-1.0)*r12*x8901)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r00*x8902))+((r02*x8897))+(((-1.0)*x8898*x8901)));
evalcond[5]=((((-1.0)*x8899*x8901))+((r20*x8902))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8907 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8907.valid){
continue;
}
IkReal x8905=((-1.0)*(x8907.value));
IkReal x8906=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8905;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8905;
IkReal gconst1=((-1.0)*r21*x8906);
IkReal gconst2=(r20*x8906);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8910 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8910.valid){
continue;
}
IkReal x8908=((-1.0)*(x8910.value));
IkReal x8909=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8908;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8908;
IkReal gconst1=((-1.0)*r21*x8909);
IkReal gconst2=(r20*x8909);
IkReal x8911=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8915=IKPowWithIntegerCheck(x8911,-1);
if(!x8915.valid){
continue;
}
IkReal x8912=x8915.value;
IkReal x8913=((1.0)*x8912);
IkReal x8914=((((-2.0)*r10*r11*r20*r21*x8912))+(((-1.0)*(r12*r12)))+(((-1.0)*x8913*(r11*r11)*(r21*r21)))+(((-1.0)*x8913*(r10*r10)*(r20*r20))));
j4eval[0]=x8914;
j4eval[1]=IKsign(x8914);
j4eval[2]=r12;
j4eval[3]=x8911;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8918 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8918.valid){
continue;
}
IkReal x8916=((-1.0)*(x8918.value));
IkReal x8917=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x8916;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8916;
IkReal gconst1=((-1.0)*r21*x8917);
IkReal gconst2=(r20*x8917);
IkReal x8919=r22*r22;
IkReal x8920=(cj1*cj2*r12);
IkReal x8921=(r12*sj1*sj2);
CheckValue<IkReal> x8925=IKPowWithIntegerCheck(((-1.0)+x8919),-1);
if(!x8925.valid){
continue;
}
IkReal x8922=x8925.value;
if((((1.0)+(((-1.0)*x8919)))) < -0.00001)
continue;
IkReal x8923=IKsqrt(((1.0)+(((-1.0)*x8919))));
IkReal x8924=(r22*x8922*x8923);
j4eval[0]=((IKabs((((x8921*x8924))+(((-1.0)*x8920*x8924)))))+(IKabs((x8920+(((-1.0)*x8921))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8926=(cj1*cj2);
IkReal x8927=(gconst2*r10);
IkReal x8928=(gconst1*r11);
IkReal x8929=((1.0)*sj1*sj2);
CheckValue<IkReal> x8930 = IKatan2WithCheck(IkReal(((((-1.0)*x8926*x8927))+((sj1*sj2*x8927))+((x8926*x8928))+(((-1.0)*x8928*x8929)))),IkReal(((((-1.0)*r12*x8929))+((r12*x8926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8930.valid){
continue;
}
CheckValue<IkReal> x8931=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8930.value)+(((1.5707963267949)*(x8931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8932=IKcos(j4);
IkReal x8933=IKsin(j4);
IkReal x8934=(gconst1*r01);
IkReal x8935=((1.0)*cj2);
IkReal x8936=(gconst1*r21);
IkReal x8937=(gconst1*r11);
IkReal x8938=((1.0)*x8932);
IkReal x8939=(gconst2*x8932);
IkReal x8940=((1.0)*x8933);
IkReal x8941=(gconst2*x8933);
evalcond[0]=(((r12*x8933))+((r10*x8939))+(((-1.0)*x8937*x8938)));
evalcond[1]=((((-1.0)*r22*x8938))+(((-1.0)*x8936*x8940))+((r20*x8941)));
evalcond[2]=((((-1.0)*x8934*x8940))+((r00*x8941))+(((-1.0)*r02*x8938)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8938))+((r10*x8941))+(((-1.0)*x8937*x8940)));
evalcond[4]=((((-1.0)*x8936*x8938))+((sj1*sj2))+((r20*x8939))+(((-1.0)*cj1*x8935))+((r22*x8933)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r00*x8939))+(((-1.0)*x8934*x8938))+((r02*x8933))+(((-1.0)*sj1*x8935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8942=(gconst1*r11);
IkReal x8943=(gconst2*r10);
CheckValue<IkReal> x8944=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8942*x8942)))+(((-1.0)*(x8943*x8943)))+(((-1.0)*(r12*r12)))+(((2.0)*x8942*x8943)))),-1);
if(!x8944.valid){
continue;
}
CheckValue<IkReal> x8945 = IKatan2WithCheck(IkReal((x8943+(((-1.0)*x8942)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8944.value)))+(x8945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8946=IKcos(j4);
IkReal x8947=IKsin(j4);
IkReal x8948=(gconst1*r01);
IkReal x8949=((1.0)*cj2);
IkReal x8950=(gconst1*r21);
IkReal x8951=(gconst1*r11);
IkReal x8952=((1.0)*x8946);
IkReal x8953=(gconst2*x8946);
IkReal x8954=((1.0)*x8947);
IkReal x8955=(gconst2*x8947);
evalcond[0]=((((-1.0)*x8951*x8952))+((r10*x8953))+((r12*x8947)));
evalcond[1]=((((-1.0)*r22*x8952))+(((-1.0)*x8950*x8954))+((r20*x8955)));
evalcond[2]=(((r00*x8955))+(((-1.0)*r02*x8952))+(((-1.0)*x8948*x8954)));
evalcond[3]=((1.0)+(((-1.0)*x8951*x8954))+(((-1.0)*r12*x8952))+((r10*x8955)));
evalcond[4]=(((r22*x8947))+((sj1*sj2))+(((-1.0)*cj1*x8949))+(((-1.0)*x8950*x8952))+((r20*x8953)));
evalcond[5]=(((r02*x8947))+(((-1.0)*sj1*x8949))+(((-1.0)*cj1*sj2))+((r00*x8953))+(((-1.0)*x8948*x8952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8956 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8956.valid){
continue;
}
CheckValue<IkReal> x8957=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8956.value)+(((1.5707963267949)*(x8957.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8958=IKcos(j4);
IkReal x8959=IKsin(j4);
IkReal x8960=(gconst1*r01);
IkReal x8961=((1.0)*cj2);
IkReal x8962=(gconst1*r21);
IkReal x8963=(gconst1*r11);
IkReal x8964=((1.0)*x8958);
IkReal x8965=(gconst2*x8958);
IkReal x8966=((1.0)*x8959);
IkReal x8967=(gconst2*x8959);
evalcond[0]=(((r10*x8965))+(((-1.0)*x8963*x8964))+((r12*x8959)));
evalcond[1]=((((-1.0)*r22*x8964))+(((-1.0)*x8962*x8966))+((r20*x8967)));
evalcond[2]=(((r00*x8967))+(((-1.0)*r02*x8964))+(((-1.0)*x8960*x8966)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8964))+((r10*x8967))+(((-1.0)*x8963*x8966)));
evalcond[4]=(((r22*x8959))+((sj1*sj2))+(((-1.0)*cj1*x8961))+(((-1.0)*x8962*x8964))+((r20*x8965)));
evalcond[5]=(((r02*x8959))+(((-1.0)*sj1*x8961))+(((-1.0)*cj1*sj2))+((r00*x8965))+(((-1.0)*x8960*x8964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8968=((-1.0)*py);
CheckValue<IkReal> x8970 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8970.valid){
continue;
}
IkReal x8969=((-1.0)*(x8970.value));
sj5=gconst1;
cj5=gconst2;
j5=x8969;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8968);
rxp0_2=(py*r00);
rxp1_0=(r21*x8968);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8969;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8971=((-1.0)*py);
CheckValue<IkReal> x8973 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8973.valid){
continue;
}
IkReal x8972=((-1.0)*(x8973.value));
sj5=gconst1;
cj5=gconst2;
j5=x8972;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8971);
rxp0_2=(py*r00);
rxp1_0=(r21*x8971);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8972;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8974=((-1.0)*py);
CheckValue<IkReal> x8976 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8976.valid){
continue;
}
IkReal x8975=((-1.0)*(x8976.value));
sj5=gconst1;
cj5=gconst2;
j5=x8975;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8974);
rxp0_2=(py*r00);
rxp1_0=(r21*x8974);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8975;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8979=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x8979.valid){
continue;
}
IkReal x8977=x8979.value;
IkReal x8978=((1.0)*cj0*x8977);
cj4array[0]=((((-1.0)*cj1*sj2*x8978))+(((-1.0)*cj2*sj1*x8978)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8980=IKsin(j4);
IkReal x8981=IKcos(j4);
IkReal x8982=(gconst2*x8980);
IkReal x8983=((1.0)*x8981);
IkReal x8984=((1.0)*gconst1*x8980);
evalcond[0]=(r12*x8980);
evalcond[1]=((((-1.0)*r12*x8983))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x8984))+((r20*x8982)));
evalcond[3]=(((r00*x8982))+(((-1.0)*r01*x8984)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x8981))+(((-1.0)*gconst1*r21*x8983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8986=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8986.valid){
continue;
}
IkReal x8985=x8986.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8985))+((cj1*cj2*x8985)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8987=IKsin(j4);
IkReal x8988=IKcos(j4);
IkReal x8989=(gconst2*r00);
IkReal x8990=((1.0)*gconst1*r01);
evalcond[0]=(r12*x8987);
evalcond[1]=((((-1.0)*r12*x8988))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst1*r21*x8987))+((gconst2*r20*x8987)));
evalcond[3]=((((-1.0)*x8987*x8990))+((x8987*x8989)));
evalcond[4]=(((cj0*cj2*sj1))+((x8988*x8989))+((cj0*cj1*sj2))+(((-1.0)*x8988*x8990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8991=IKPowWithIntegerCheck(r12,-1);
if(!x8991.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8991.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8992=IKsin(j4);
IkReal x8993=IKcos(j4);
IkReal x8994=(gconst2*r00);
IkReal x8995=(gconst2*r20);
IkReal x8996=((1.0)*gconst1*x8992);
IkReal x8997=((1.0)*gconst1*x8993);
evalcond[0]=(r12*x8992);
evalcond[1]=(((x8992*x8995))+(((-1.0)*r21*x8996)));
evalcond[2]=(((x8992*x8994))+(((-1.0)*r01*x8996)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8993*x8995))+(((-1.0)*r21*x8997)));
evalcond[4]=(((x8993*x8994))+(((-1.0)*r01*x8997))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8998=(sj1*sj2);
IkReal x8999=(gconst2*r20);
IkReal x9000=(cj1*cj2);
IkReal x9001=(gconst1*r21);
CheckValue<IkReal> x9002 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x9000))+((r22*x8998)))),IkReal((((x8998*x8999))+(((-1.0)*x8998*x9001))+((x9000*x9001))+(((-1.0)*x8999*x9000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9002.valid){
continue;
}
CheckValue<IkReal> x9003=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8999*x8999)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x9001*x9001)))+(((2.0)*x8999*x9001)))),-1);
if(!x9003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9002.value)+(((1.5707963267949)*(x9003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9004=IKsin(j4);
IkReal x9005=IKcos(j4);
IkReal x9006=(gconst1*r01);
IkReal x9007=(cj2*sj1);
IkReal x9008=(gconst1*r21);
IkReal x9009=(gconst1*r11);
IkReal x9010=(cj1*sj2);
IkReal x9011=((1.0)*x9005);
IkReal x9012=(gconst2*x9005);
IkReal x9013=((1.0)*x9004);
IkReal x9014=(gconst2*x9004);
evalcond[0]=((((-1.0)*r22*x9011))+(((-1.0)*x9008*x9013))+((r20*x9014)));
evalcond[1]=(sj0+(((-1.0)*r02*x9011))+((r00*x9014))+(((-1.0)*x9006*x9013)));
evalcond[2]=((((-1.0)*r12*x9011))+(((-1.0)*x9009*x9013))+((r10*x9014))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x9004))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9008*x9011))+((r20*x9012)));
evalcond[4]=(((r02*x9004))+((cj0*x9010))+((cj0*x9007))+((r00*x9012))+(((-1.0)*x9006*x9011)));
evalcond[5]=(((sj0*x9010))+(((-1.0)*x9009*x9011))+((sj0*x9007))+((r10*x9012))+((r12*x9004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9015=((1.0)*gconst1);
CheckValue<IkReal> x9016=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9015))+(((-1.0)*gconst2*r01)))),-1);
if(!x9016.valid){
continue;
}
CheckValue<IkReal> x9017 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*r21*x9015)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9016.value)))+(x9017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9018=IKsin(j4);
IkReal x9019=IKcos(j4);
IkReal x9020=(gconst1*r01);
IkReal x9021=(cj2*sj1);
IkReal x9022=(gconst1*r21);
IkReal x9023=(gconst1*r11);
IkReal x9024=(cj1*sj2);
IkReal x9025=((1.0)*x9019);
IkReal x9026=(gconst2*x9019);
IkReal x9027=((1.0)*x9018);
IkReal x9028=(gconst2*x9018);
evalcond[0]=((((-1.0)*x9022*x9027))+(((-1.0)*r22*x9025))+((r20*x9028)));
evalcond[1]=(sj0+((r00*x9028))+(((-1.0)*x9020*x9027))+(((-1.0)*r02*x9025)));
evalcond[2]=((((-1.0)*r12*x9025))+(((-1.0)*x9023*x9027))+((r10*x9028))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x9022*x9025))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x9018))+((r20*x9026)));
evalcond[4]=(((r00*x9026))+(((-1.0)*x9020*x9025))+((cj0*x9024))+((cj0*x9021))+((r02*x9018)));
evalcond[5]=((((-1.0)*x9023*x9025))+((r10*x9026))+((r12*x9018))+((sj0*x9024))+((sj0*x9021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9029=((1.0)*gconst1);
CheckValue<IkReal> x9030=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x9029)))),-1);
if(!x9030.valid){
continue;
}
CheckValue<IkReal> x9031 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x9029))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9030.value)))+(x9031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9032=IKsin(j4);
IkReal x9033=IKcos(j4);
IkReal x9034=(gconst1*r01);
IkReal x9035=(cj2*sj1);
IkReal x9036=(gconst1*r21);
IkReal x9037=(gconst1*r11);
IkReal x9038=(cj1*sj2);
IkReal x9039=((1.0)*x9033);
IkReal x9040=(gconst2*x9033);
IkReal x9041=((1.0)*x9032);
IkReal x9042=(gconst2*x9032);
evalcond[0]=(((r20*x9042))+(((-1.0)*x9036*x9041))+(((-1.0)*r22*x9039)));
evalcond[1]=(sj0+((r00*x9042))+(((-1.0)*x9034*x9041))+(((-1.0)*r02*x9039)));
evalcond[2]=((((-1.0)*r12*x9039))+(((-1.0)*x9037*x9041))+((r10*x9042))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x9036*x9039))+((r22*x9032))+((r20*x9040))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x9034*x9039))+((r00*x9040))+((cj0*x9035))+((cj0*x9038))+((r02*x9032)));
evalcond[5]=(((r10*x9040))+(((-1.0)*x9037*x9039))+((r12*x9032))+((sj0*x9038))+((sj0*x9035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9045 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9045.valid){
continue;
}
IkReal x9043=((-1.0)*(x9045.value));
IkReal x9044=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9043;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9043;
IkReal gconst1=((-1.0)*r21*x9044);
IkReal gconst2=(r20*x9044);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9048 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9048.valid){
continue;
}
IkReal x9046=((-1.0)*(x9048.value));
IkReal x9047=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9046;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9046;
IkReal gconst1=((-1.0)*r21*x9047);
IkReal gconst2=(r20*x9047);
CheckValue<IkReal> x9056=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9056.valid){
continue;
}
IkReal x9049=x9056.value;
IkReal x9050=(cj3*x9049);
IkReal x9051=(r11*x9050);
IkReal x9052=(r01*x9050);
IkReal x9053=(r00*x9050);
IkReal x9054=(r10*x9050);
IkReal x9055=(r20*r21*x9050);
j4eval[0]=IKsign((((r10*x9053*(r20*r20)))+((cj3*r02*r12))+((r01*x9051*(r21*r21)))+((r10*r20*r21*x9052))+((r00*r20*r21*x9051))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9059 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9059.valid){
continue;
}
IkReal x9057=((-1.0)*(x9059.value));
IkReal x9058=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9057;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9057;
IkReal gconst1=((-1.0)*r21*x9058);
IkReal gconst2=(r20*x9058);
CheckValue<IkReal> x9067=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9067.valid){
continue;
}
IkReal x9060=x9067.value;
IkReal x9061=(sj3*x9060);
IkReal x9062=(r11*x9061);
IkReal x9063=(r00*x9061);
IkReal x9064=(r01*x9061);
IkReal x9065=(r10*x9061);
IkReal x9066=(r20*r21*x9061);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9064))+((r00*r20*r21*x9062))+((r01*x9062*(r21*r21)))+((r10*x9063*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9070 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9070.valid){
continue;
}
IkReal x9068=((-1.0)*(x9070.value));
IkReal x9069=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9068;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9068;
IkReal gconst1=((-1.0)*r21*x9069);
IkReal gconst2=(r20*x9069);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9073 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9073.valid){
continue;
}
IkReal x9071=((-1.0)*(x9073.value));
IkReal x9072=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9071;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9071;
IkReal gconst1=((-1.0)*r21*x9072);
IkReal gconst2=(r20*x9072);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9076 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9076.valid){
continue;
}
IkReal x9074=((-1.0)*(x9076.value));
IkReal x9075=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9074;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9074;
IkReal gconst1=((-1.0)*r21*x9075);
IkReal gconst2=(r20*x9075);
IkReal x9077=r22*r22;
IkReal x9078=(r12*sj1*sj2);
CheckValue<IkReal> x9083=IKPowWithIntegerCheck(((-1.0)+x9077),-1);
if(!x9083.valid){
continue;
}
IkReal x9079=x9083.value;
IkReal x9080=((1.0)*cj1*cj2*r12);
if((((1.0)+(((-1.0)*x9077)))) < -0.00001)
continue;
IkReal x9081=IKsqrt(((1.0)+(((-1.0)*x9077))));
IkReal x9082=(r22*x9079*x9081);
j4eval[0]=((IKabs(((((-1.0)*x9080))+x9078)))+(IKabs((((x9078*x9082))+(((-1.0)*x9080*x9082))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9084=(gconst2*r10);
IkReal x9085=(sj1*sj2);
IkReal x9086=(gconst1*r11);
IkReal x9087=((1.0)*cj1*cj2);
CheckValue<IkReal> x9088 = IKatan2WithCheck(IkReal((((r12*x9085))+(((-1.0)*r12*x9087)))),IkReal(((((-1.0)*x9084*x9087))+((cj1*cj2*x9086))+(((-1.0)*x9085*x9086))+((x9084*x9085)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9088.valid){
continue;
}
CheckValue<IkReal> x9089=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9084*x9086))+(x9084*x9084)+(x9086*x9086))),-1);
if(!x9089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9088.value)+(((1.5707963267949)*(x9089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9090=IKsin(j4);
IkReal x9091=IKcos(j4);
IkReal x9092=(gconst1*r01);
IkReal x9093=(gconst1*r21);
IkReal x9094=((1.0)*cj2);
IkReal x9095=(gconst1*r11);
IkReal x9096=((1.0)*x9091);
IkReal x9097=((1.0)*x9090);
IkReal x9098=(gconst2*x9090);
evalcond[0]=(((r20*x9098))+(((-1.0)*x9093*x9097))+(((-1.0)*r22*x9096)));
evalcond[1]=(((r10*x9098))+(((-1.0)*x9095*x9097))+(((-1.0)*r12*x9096)));
evalcond[2]=((((-1.0)*gconst2*r00*x9096))+((x9091*x9092))+(((-1.0)*r02*x9097)));
evalcond[3]=((1.0)+(((-1.0)*x9092*x9097))+((r00*x9098))+(((-1.0)*r02*x9096)));
evalcond[4]=(((sj1*sj2))+((x9091*x9095))+(((-1.0)*gconst2*r10*x9096))+(((-1.0)*r12*x9097))+(((-1.0)*cj1*x9094)));
evalcond[5]=((((-1.0)*sj1*x9094))+(((-1.0)*gconst2*r20*x9096))+(((-1.0)*cj1*sj2))+((x9091*x9093))+(((-1.0)*r22*x9097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9099=(gconst1*r01);
IkReal x9100=(gconst2*r00);
CheckValue<IkReal> x9101 = IKatan2WithCheck(IkReal(((((-1.0)*x9100))+x9099)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9101.valid){
continue;
}
CheckValue<IkReal> x9102=IKPowWithIntegerCheck(IKsign(((x9100*x9100)+(((-2.0)*x9099*x9100))+(x9099*x9099)+(r02*r02))),-1);
if(!x9102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9101.value)+(((1.5707963267949)*(x9102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9103=IKsin(j4);
IkReal x9104=IKcos(j4);
IkReal x9105=(gconst1*r01);
IkReal x9106=(gconst1*r21);
IkReal x9107=((1.0)*cj2);
IkReal x9108=(gconst1*r11);
IkReal x9109=((1.0)*x9104);
IkReal x9110=((1.0)*x9103);
IkReal x9111=(gconst2*x9103);
evalcond[0]=((((-1.0)*x9106*x9110))+(((-1.0)*r22*x9109))+((r20*x9111)));
evalcond[1]=((((-1.0)*r12*x9109))+(((-1.0)*x9108*x9110))+((r10*x9111)));
evalcond[2]=((((-1.0)*r02*x9110))+((x9104*x9105))+(((-1.0)*gconst2*r00*x9109)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9109))+((r00*x9111))+(((-1.0)*x9105*x9110)));
evalcond[4]=((((-1.0)*cj1*x9107))+(((-1.0)*gconst2*r10*x9109))+((sj1*sj2))+((x9104*x9108))+(((-1.0)*r12*x9110)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x9104*x9106))+(((-1.0)*r22*x9110))+(((-1.0)*gconst2*r20*x9109))+(((-1.0)*sj1*x9107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9112=((1.0)*gconst1);
CheckValue<IkReal> x9113 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x9112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9113.valid){
continue;
}
CheckValue<IkReal> x9114=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9112))+(((-1.0)*gconst2*r11)))),-1);
if(!x9114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9113.value)+(((1.5707963267949)*(x9114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9115=IKsin(j4);
IkReal x9116=IKcos(j4);
IkReal x9117=(gconst1*r01);
IkReal x9118=(gconst1*r21);
IkReal x9119=((1.0)*cj2);
IkReal x9120=(gconst1*r11);
IkReal x9121=((1.0)*x9116);
IkReal x9122=((1.0)*x9115);
IkReal x9123=(gconst2*x9115);
evalcond[0]=((((-1.0)*x9118*x9122))+(((-1.0)*r22*x9121))+((r20*x9123)));
evalcond[1]=(((r10*x9123))+(((-1.0)*r12*x9121))+(((-1.0)*x9120*x9122)));
evalcond[2]=((((-1.0)*gconst2*r00*x9121))+(((-1.0)*r02*x9122))+((x9116*x9117)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9121))+(((-1.0)*x9117*x9122))+((r00*x9123)));
evalcond[4]=((((-1.0)*r12*x9122))+((x9116*x9120))+((sj1*sj2))+(((-1.0)*cj1*x9119))+(((-1.0)*gconst2*r10*x9121)));
evalcond[5]=((((-1.0)*gconst2*r20*x9121))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x9122))+(((-1.0)*sj1*x9119))+((x9116*x9118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9126 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9126.valid){
continue;
}
IkReal x9124=((-1.0)*(x9126.value));
IkReal x9125=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9124;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9124;
IkReal gconst1=((-1.0)*r21*x9125);
IkReal gconst2=(r20*x9125);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9129 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9129.valid){
continue;
}
IkReal x9127=((-1.0)*(x9129.value));
IkReal x9128=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9127;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9127;
IkReal gconst1=((-1.0)*r21*x9128);
IkReal gconst2=(r20*x9128);
IkReal x9130=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9134=IKPowWithIntegerCheck(x9130,-1);
if(!x9134.valid){
continue;
}
IkReal x9131=x9134.value;
IkReal x9132=((1.0)*x9131);
IkReal x9133=((((-1.0)*(r02*r02)))+(((-1.0)*x9132*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9131))+(((-1.0)*x9132*(r00*r00)*(r20*r20))));
j4eval[0]=x9133;
j4eval[1]=IKsign(x9133);
j4eval[2]=r02;
j4eval[3]=x9130;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9137 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9137.valid){
continue;
}
IkReal x9135=((-1.0)*(x9137.value));
IkReal x9136=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9135;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9135;
IkReal gconst1=((-1.0)*r21*x9136);
IkReal gconst2=(r20*x9136);
IkReal x9138=r22*r22;
IkReal x9139=(cj1*r02*sj2);
IkReal x9140=(cj2*r02*sj1);
CheckValue<IkReal> x9144=IKPowWithIntegerCheck(((-1.0)+x9138),-1);
if(!x9144.valid){
continue;
}
IkReal x9141=x9144.value;
if((((1.0)+(((-1.0)*x9138)))) < -0.00001)
continue;
IkReal x9142=IKsqrt(((1.0)+(((-1.0)*x9138))));
IkReal x9143=((1.0)*r22*x9141*x9142);
j4eval[0]=((IKabs((x9139+x9140)))+(IKabs(((((-1.0)*x9140*x9143))+(((-1.0)*x9139*x9143))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9145=(cj2*sj1);
IkReal x9146=(cj1*sj2);
IkReal x9147=((1.0)*gconst2);
IkReal x9148=(gconst1*r01);
CheckValue<IkReal> x9149 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9145*x9147))+((x9145*x9148))+(((-1.0)*r00*x9146*x9147))+((x9146*x9148)))),IkReal((((r02*x9145))+((r02*x9146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9149.valid){
continue;
}
CheckValue<IkReal> x9150=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9147)))),-1);
if(!x9150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9149.value)+(((1.5707963267949)*(x9150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9151=IKcos(j4);
IkReal x9152=IKsin(j4);
IkReal x9153=(gconst1*r01);
IkReal x9154=((1.0)*cj2);
IkReal x9155=(gconst1*r21);
IkReal x9156=(gconst1*r11);
IkReal x9157=((1.0)*x9151);
IkReal x9158=(gconst2*x9151);
IkReal x9159=((1.0)*x9152);
IkReal x9160=(gconst2*x9152);
evalcond[0]=(((r02*x9152))+(((-1.0)*x9153*x9157))+((r00*x9158)));
evalcond[1]=((((-1.0)*r22*x9157))+((r20*x9160))+(((-1.0)*x9155*x9159)));
evalcond[2]=((((-1.0)*r12*x9157))+((r10*x9160))+(((-1.0)*x9156*x9159)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9157))+((r00*x9160))+(((-1.0)*x9153*x9159)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x9156*x9157))+(((-1.0)*cj1*x9154))+((r12*x9152))+((r10*x9158)));
evalcond[5]=(((r22*x9152))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9154))+((r20*x9158))+(((-1.0)*x9155*x9157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9161=(gconst2*r00);
IkReal x9162=(gconst1*r01);
CheckValue<IkReal> x9163 = IKatan2WithCheck(IkReal(((((-1.0)*x9162))+x9161)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9163.valid){
continue;
}
CheckValue<IkReal> x9164=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9161*x9161)))+(((2.0)*x9161*x9162))+(((-1.0)*(x9162*x9162))))),-1);
if(!x9164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9163.value)+(((1.5707963267949)*(x9164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9165=IKcos(j4);
IkReal x9166=IKsin(j4);
IkReal x9167=(gconst1*r01);
IkReal x9168=((1.0)*cj2);
IkReal x9169=(gconst1*r21);
IkReal x9170=(gconst1*r11);
IkReal x9171=((1.0)*x9165);
IkReal x9172=(gconst2*x9165);
IkReal x9173=((1.0)*x9166);
IkReal x9174=(gconst2*x9166);
evalcond[0]=((((-1.0)*x9167*x9171))+((r00*x9172))+((r02*x9166)));
evalcond[1]=((((-1.0)*x9169*x9173))+((r20*x9174))+(((-1.0)*r22*x9171)));
evalcond[2]=(((r10*x9174))+(((-1.0)*x9170*x9173))+(((-1.0)*r12*x9171)));
evalcond[3]=((1.0)+(((-1.0)*x9167*x9173))+((r00*x9174))+(((-1.0)*r02*x9171)));
evalcond[4]=(((r10*x9172))+(((-1.0)*cj1*x9168))+((sj1*sj2))+(((-1.0)*x9170*x9171))+((r12*x9166)));
evalcond[5]=((((-1.0)*x9169*x9171))+((r22*x9166))+((r20*x9172))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9175=((1.0)*gconst1);
CheckValue<IkReal> x9176 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9175))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9176.valid){
continue;
}
CheckValue<IkReal> x9177=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x9175)))),-1);
if(!x9177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9176.value)+(((1.5707963267949)*(x9177.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9178=IKcos(j4);
IkReal x9179=IKsin(j4);
IkReal x9180=(gconst1*r01);
IkReal x9181=((1.0)*cj2);
IkReal x9182=(gconst1*r21);
IkReal x9183=(gconst1*r11);
IkReal x9184=((1.0)*x9178);
IkReal x9185=(gconst2*x9178);
IkReal x9186=((1.0)*x9179);
IkReal x9187=(gconst2*x9179);
evalcond[0]=(((r00*x9185))+((r02*x9179))+(((-1.0)*x9180*x9184)));
evalcond[1]=((((-1.0)*x9182*x9186))+(((-1.0)*r22*x9184))+((r20*x9187)));
evalcond[2]=((((-1.0)*x9183*x9186))+(((-1.0)*r12*x9184))+((r10*x9187)));
evalcond[3]=((1.0)+((r00*x9187))+(((-1.0)*r02*x9184))+(((-1.0)*x9180*x9186)));
evalcond[4]=((((-1.0)*x9183*x9184))+((r10*x9185))+((sj1*sj2))+((r12*x9179))+(((-1.0)*cj1*x9181)));
evalcond[5]=((((-1.0)*x9182*x9184))+((r20*x9185))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9181))+((r22*x9179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9188=((-1.0)*py);
CheckValue<IkReal> x9190 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9190.valid){
continue;
}
IkReal x9189=((-1.0)*(x9190.value));
sj5=gconst1;
cj5=gconst2;
j5=x9189;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9188);
rxp0_2=(py*r00);
rxp1_0=(r21*x9188);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9189;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9191=((1.0)*sj3);
IkReal x9192=(r01*r21);
IkReal x9193=(r00*r20);
j4eval[0]=(x9193+x9192);
j4eval[1]=((((-1.0)*x9191*x9192))+(((-1.0)*x9191*x9193)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9194=((-1.0)*py);
CheckValue<IkReal> x9196 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9196.valid){
continue;
}
IkReal x9195=((-1.0)*(x9196.value));
sj5=gconst1;
cj5=gconst2;
j5=x9195;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9194);
rxp0_2=(py*r00);
rxp1_0=(r21*x9194);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9195;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9197=(r00*r20);
IkReal x9198=((1.0)*cj3);
IkReal x9199=(r01*r21);
j4eval[0]=(x9197+x9199);
j4eval[1]=((((-1.0)*x9198*x9199))+(((-1.0)*x9197*x9198)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9200=((-1.0)*py);
CheckValue<IkReal> x9202 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9202.valid){
continue;
}
IkReal x9201=((-1.0)*(x9202.value));
sj5=gconst1;
cj5=gconst2;
j5=x9201;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9200);
rxp0_2=(py*r00);
rxp1_0=(r21*x9200);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9201;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9203=((1.0)*cj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r00*r20*x9203))+(((-1.0)*r01*r21*x9203)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9204=((1.0)*gconst2);
CheckValue<IkReal> x9205=IKPowWithIntegerCheck(r12,-1);
if(!x9205.valid){
continue;
}
CheckValue<IkReal> x9206=IKPowWithIntegerCheck(sj3,-1);
if(!x9206.valid){
continue;
}
CheckValue<IkReal> x9207=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x9204))+((cj3*gconst1*r01))),-1);
if(!x9207.valid){
continue;
}
if( IKabs(((x9205.value)*(x9206.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9207.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9204)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9205.value)*(x9206.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x9207.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9204))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9205.value)*(x9206.value)*((((cj2*sj1))+((cj1*sj2))))), ((x9207.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9204))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9208=IKsin(j4);
IkReal x9209=IKcos(j4);
IkReal x9210=(sj1*sj2);
IkReal x9211=(gconst1*r01);
IkReal x9212=(r00*sj3);
IkReal x9213=(cj3*r20);
IkReal x9214=((1.0)*cj2);
IkReal x9215=(cj3*r00);
IkReal x9216=(gconst1*r21);
IkReal x9217=(cj1*sj2);
IkReal x9218=(r20*sj3);
IkReal x9219=((1.0)*gconst1);
IkReal x9220=(gconst2*r01);
IkReal x9221=((1.0)*cj3);
IkReal x9222=(gconst2*r21);
IkReal x9223=(cj1*x9214);
IkReal x9224=((1.0)*x9208);
IkReal x9225=(gconst2*x9208);
IkReal x9226=(cj3*x9209);
IkReal x9227=(sj3*x9209);
IkReal x9228=((1.0)*gconst2*x9209);
evalcond[0]=((-1.0)*r12*x9209);
evalcond[1]=(((r20*x9225))+(((-1.0)*x9216*x9224)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*r12*sj3*x9224))+x9217);
evalcond[3]=((1.0)+((r00*x9225))+(((-1.0)*x9211*x9224)));
evalcond[4]=((((-1.0)*x9223))+x9210+(((-1.0)*r12*x9208*x9221)));
evalcond[5]=(((sj3*x9220))+((gconst1*x9212))+((x9211*x9226))+(((-1.0)*x9215*x9228)));
evalcond[6]=((((-1.0)*x9212*x9228))+(((-1.0)*x9220*x9221))+((x9211*x9227))+(((-1.0)*x9215*x9219)));
evalcond[7]=((((-1.0)*x9213*x9228))+((sj3*x9222))+(((-1.0)*sj1*x9214))+((gconst1*x9218))+((x9216*x9226))+(((-1.0)*x9217)));
evalcond[8]=((((-1.0)*x9223))+(((-1.0)*x9213*x9219))+(((-1.0)*x9221*x9222))+x9210+(((-1.0)*x9218*x9228))+((x9216*x9227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9229=((1.0)*gconst2);
IkReal x9230=(gconst1*r01);
CheckValue<IkReal> x9231=IKPowWithIntegerCheck(((((-1.0)*x9230))+((gconst2*r00))),-1);
if(!x9231.valid){
continue;
}
CheckValue<IkReal> x9232=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x9229))+((cj3*x9230))),-1);
if(!x9232.valid){
continue;
}
if( IKabs(((-1.0)*(x9231.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9232.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9229)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9231.value)))+IKsqr(((x9232.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9229))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9231.value)), ((x9232.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9229))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9233=IKsin(j4);
IkReal x9234=IKcos(j4);
IkReal x9235=(sj1*sj2);
IkReal x9236=(gconst1*r01);
IkReal x9237=(r00*sj3);
IkReal x9238=(cj3*r20);
IkReal x9239=((1.0)*cj2);
IkReal x9240=(cj3*r00);
IkReal x9241=(gconst1*r21);
IkReal x9242=(cj1*sj2);
IkReal x9243=(r20*sj3);
IkReal x9244=((1.0)*gconst1);
IkReal x9245=(gconst2*r01);
IkReal x9246=((1.0)*cj3);
IkReal x9247=(gconst2*r21);
IkReal x9248=(cj1*x9239);
IkReal x9249=((1.0)*x9233);
IkReal x9250=(gconst2*x9233);
IkReal x9251=(cj3*x9234);
IkReal x9252=(sj3*x9234);
IkReal x9253=((1.0)*gconst2*x9234);
evalcond[0]=((-1.0)*r12*x9234);
evalcond[1]=((((-1.0)*x9241*x9249))+((r20*x9250)));
evalcond[2]=(((cj2*sj1))+x9242+(((-1.0)*r12*sj3*x9249)));
evalcond[3]=((1.0)+(((-1.0)*x9236*x9249))+((r00*x9250)));
evalcond[4]=(x9235+(((-1.0)*x9248))+(((-1.0)*r12*x9233*x9246)));
evalcond[5]=(((sj3*x9245))+((x9236*x9251))+((gconst1*x9237))+(((-1.0)*x9240*x9253)));
evalcond[6]=((((-1.0)*x9237*x9253))+((x9236*x9252))+(((-1.0)*x9245*x9246))+(((-1.0)*x9240*x9244)));
evalcond[7]=(((sj3*x9247))+(((-1.0)*sj1*x9239))+((gconst1*x9243))+(((-1.0)*x9242))+(((-1.0)*x9238*x9253))+((x9241*x9251)));
evalcond[8]=((((-1.0)*x9246*x9247))+x9235+(((-1.0)*x9248))+(((-1.0)*x9238*x9244))+(((-1.0)*x9243*x9253))+((x9241*x9252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9254=(gconst2*r00);
IkReal x9255=(gconst1*r01);
CheckValue<IkReal> x9256=IKPowWithIntegerCheck((x9254+(((-1.0)*x9255))),-1);
if(!x9256.valid){
continue;
}
CheckValue<IkReal> x9257=IKPowWithIntegerCheck((((sj3*x9255))+(((-1.0)*sj3*x9254))),-1);
if(!x9257.valid){
continue;
}
if( IKabs(((-1.0)*(x9256.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9257.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9256.value)))+IKsqr(((x9257.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9256.value)), ((x9257.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9258=IKsin(j4);
IkReal x9259=IKcos(j4);
IkReal x9260=(sj1*sj2);
IkReal x9261=(gconst1*r01);
IkReal x9262=(r00*sj3);
IkReal x9263=(cj3*r20);
IkReal x9264=((1.0)*cj2);
IkReal x9265=(cj3*r00);
IkReal x9266=(gconst1*r21);
IkReal x9267=(cj1*sj2);
IkReal x9268=(r20*sj3);
IkReal x9269=((1.0)*gconst1);
IkReal x9270=(gconst2*r01);
IkReal x9271=((1.0)*cj3);
IkReal x9272=(gconst2*r21);
IkReal x9273=(cj1*x9264);
IkReal x9274=((1.0)*x9258);
IkReal x9275=(gconst2*x9258);
IkReal x9276=(cj3*x9259);
IkReal x9277=(sj3*x9259);
IkReal x9278=((1.0)*gconst2*x9259);
evalcond[0]=((-1.0)*r12*x9259);
evalcond[1]=(((r20*x9275))+(((-1.0)*x9266*x9274)));
evalcond[2]=(((cj2*sj1))+x9267+(((-1.0)*r12*sj3*x9274)));
evalcond[3]=((1.0)+(((-1.0)*x9261*x9274))+((r00*x9275)));
evalcond[4]=((((-1.0)*x9273))+x9260+(((-1.0)*r12*x9258*x9271)));
evalcond[5]=(((sj3*x9270))+((gconst1*x9262))+(((-1.0)*x9265*x9278))+((x9261*x9276)));
evalcond[6]=((((-1.0)*x9262*x9278))+((x9261*x9277))+(((-1.0)*x9270*x9271))+(((-1.0)*x9265*x9269)));
evalcond[7]=((((-1.0)*x9263*x9278))+(((-1.0)*x9267))+((sj3*x9272))+((gconst1*x9268))+((x9266*x9276))+(((-1.0)*sj1*x9264)));
evalcond[8]=((((-1.0)*x9273))+x9260+(((-1.0)*x9263*x9269))+(((-1.0)*x9268*x9278))+(((-1.0)*x9271*x9272))+((x9266*x9277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9279=gconst2*gconst2;
IkReal x9280=gconst1*gconst1;
IkReal x9281=(r00*r11);
IkReal x9282=(gconst1*gconst2);
IkReal x9283=((1.0)*sj3);
IkReal x9284=(r01*r11);
IkReal x9285=((1.0)*cj3*r10);
IkReal x9286=((1.0)*cj3*r12);
CheckValue<IkReal> x9287 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r01*x9286))+(((-1.0)*gconst1*r00*x9286)))),IkReal(((((-1.0)*r01*x9279*x9285))+((cj3*x9282*x9284))+(((-1.0)*r00*x9282*x9285))+((cj3*x9280*x9281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9287.valid){
continue;
}
CheckValue<IkReal> x9288=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r10*x9282*x9283))+((r02*r12*sj3))+(((-1.0)*x9281*x9282*x9283))+((sj3*x9280*x9284))+((r00*r10*sj3*x9279)))),-1);
if(!x9288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9287.value)+(((1.5707963267949)*(x9288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9289=IKsin(j4);
IkReal x9290=IKcos(j4);
IkReal x9291=(sj1*sj2);
IkReal x9292=(r00*sj3);
IkReal x9293=(gconst2*r20);
IkReal x9294=(cj3*gconst1);
IkReal x9295=(gconst1*r01);
IkReal x9296=((1.0)*cj2);
IkReal x9297=(cj3*gconst2);
IkReal x9298=(gconst1*r11);
IkReal x9299=(gconst1*r21);
IkReal x9300=(cj1*sj2);
IkReal x9301=(gconst1*sj3);
IkReal x9302=(gconst2*sj3);
IkReal x9303=(cj1*x9296);
IkReal x9304=((1.0)*x9290);
IkReal x9305=((1.0)*x9289);
IkReal x9306=((1.0)*x9297);
IkReal x9307=(gconst2*x9289);
IkReal x9308=(sj3*x9290);
evalcond[0]=((((-1.0)*x9299*x9305))+((x9289*x9293))+(((-1.0)*r22*x9304)));
evalcond[1]=((((-1.0)*x9298*x9305))+((r10*x9307))+(((-1.0)*r12*x9304)));
evalcond[2]=((1.0)+(((-1.0)*x9295*x9305))+(((-1.0)*r02*x9304))+((r00*x9307)));
evalcond[3]=((((-1.0)*r00*x9297*x9304))+((r01*x9290*x9294))+((r01*x9302))+(((-1.0)*cj3*r02*x9305))+((gconst1*x9292)));
evalcond[4]=((((-1.0)*r00*x9294))+(((-1.0)*r02*sj3*x9305))+(((-1.0)*r01*x9306))+((x9295*x9308))+(((-1.0)*gconst2*x9292*x9304)));
evalcond[5]=(((r11*x9290*x9294))+x9291+(((-1.0)*cj3*r12*x9305))+(((-1.0)*r10*x9297*x9304))+(((-1.0)*x9303))+((r11*x9302))+((r10*x9301)));
evalcond[6]=((((-1.0)*sj1*x9296))+(((-1.0)*cj3*x9293*x9304))+((r21*x9302))+((r21*x9290*x9294))+(((-1.0)*cj3*r22*x9305))+((r20*x9301))+(((-1.0)*x9300)));
evalcond[7]=(((cj2*sj1))+x9300+(((-1.0)*r12*sj3*x9305))+(((-1.0)*r10*x9294))+((x9298*x9308))+(((-1.0)*r11*x9306))+(((-1.0)*r10*x9302*x9304)));
evalcond[8]=((((-1.0)*r21*x9306))+(((-1.0)*r20*x9294))+x9291+(((-1.0)*x9303))+(((-1.0)*r22*sj3*x9305))+(((-1.0)*sj3*x9293*x9304))+((x9299*x9308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9309=gconst1*gconst1;
IkReal x9310=gconst2*gconst2;
IkReal x9311=(r00*sj3);
IkReal x9312=((1.0)*r11);
IkReal x9313=(r01*sj3);
IkReal x9314=(gconst1*gconst2);
IkReal x9315=(cj3*r01);
IkReal x9316=(cj3*r00);
IkReal x9317=(r10*x9310);
CheckValue<IkReal> x9318 = IKatan2WithCheck(IkReal((((gconst1*r12*x9311))+((gconst2*r12*x9313)))),IkReal((((x9313*x9317))+(((-1.0)*x9309*x9311*x9312))+(((-1.0)*x9312*x9313*x9314))+((r10*x9311*x9314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9318.valid){
continue;
}
CheckValue<IkReal> x9319=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*x9312*x9314*x9316))+((r11*x9309*x9315))+((x9316*x9317))+(((-1.0)*r10*x9314*x9315)))),-1);
if(!x9319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9318.value)+(((1.5707963267949)*(x9319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9320=IKsin(j4);
IkReal x9321=IKcos(j4);
IkReal x9322=(sj1*sj2);
IkReal x9323=(r00*sj3);
IkReal x9324=(gconst2*r20);
IkReal x9325=(cj3*gconst1);
IkReal x9326=(gconst1*r01);
IkReal x9327=((1.0)*cj2);
IkReal x9328=(cj3*gconst2);
IkReal x9329=(gconst1*r11);
IkReal x9330=(gconst1*r21);
IkReal x9331=(cj1*sj2);
IkReal x9332=(gconst1*sj3);
IkReal x9333=(gconst2*sj3);
IkReal x9334=(cj1*x9327);
IkReal x9335=((1.0)*x9321);
IkReal x9336=((1.0)*x9320);
IkReal x9337=((1.0)*x9328);
IkReal x9338=(gconst2*x9320);
IkReal x9339=(sj3*x9321);
evalcond[0]=((((-1.0)*r22*x9335))+(((-1.0)*x9330*x9336))+((x9320*x9324)));
evalcond[1]=((((-1.0)*r12*x9335))+(((-1.0)*x9329*x9336))+((r10*x9338)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9335))+((r00*x9338))+(((-1.0)*x9326*x9336)));
evalcond[3]=(((gconst1*x9323))+((r01*x9333))+((r01*x9321*x9325))+(((-1.0)*r00*x9328*x9335))+(((-1.0)*cj3*r02*x9336)));
evalcond[4]=((((-1.0)*r01*x9337))+((x9326*x9339))+(((-1.0)*gconst2*x9323*x9335))+(((-1.0)*r02*sj3*x9336))+(((-1.0)*r00*x9325)));
evalcond[5]=((((-1.0)*cj3*r12*x9336))+x9322+(((-1.0)*r10*x9328*x9335))+((r11*x9333))+((r10*x9332))+((r11*x9321*x9325))+(((-1.0)*x9334)));
evalcond[6]=(((r20*x9332))+(((-1.0)*sj1*x9327))+((r21*x9321*x9325))+(((-1.0)*cj3*x9324*x9335))+(((-1.0)*x9331))+(((-1.0)*cj3*r22*x9336))+((r21*x9333)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r10*x9325))+((x9329*x9339))+(((-1.0)*r11*x9337))+x9331+(((-1.0)*r12*sj3*x9336))+(((-1.0)*r10*x9333*x9335)));
evalcond[8]=(x9322+(((-1.0)*r22*sj3*x9336))+(((-1.0)*r20*x9325))+(((-1.0)*r21*x9337))+((x9330*x9339))+(((-1.0)*sj3*x9324*x9335))+(((-1.0)*x9334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9340=((1.0)*gconst1);
CheckValue<IkReal> x9341 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x9340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9341.valid){
continue;
}
CheckValue<IkReal> x9342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9340))+(((-1.0)*gconst2*r11)))),-1);
if(!x9342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9341.value)+(((1.5707963267949)*(x9342.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9343=IKsin(j4);
IkReal x9344=IKcos(j4);
IkReal x9345=(sj1*sj2);
IkReal x9346=(r00*sj3);
IkReal x9347=(gconst2*r20);
IkReal x9348=(cj3*gconst1);
IkReal x9349=(gconst1*r01);
IkReal x9350=((1.0)*cj2);
IkReal x9351=(cj3*gconst2);
IkReal x9352=(gconst1*r11);
IkReal x9353=(gconst1*r21);
IkReal x9354=(cj1*sj2);
IkReal x9355=(gconst1*sj3);
IkReal x9356=(gconst2*sj3);
IkReal x9357=(cj1*x9350);
IkReal x9358=((1.0)*x9344);
IkReal x9359=((1.0)*x9343);
IkReal x9360=((1.0)*x9351);
IkReal x9361=(gconst2*x9343);
IkReal x9362=(sj3*x9344);
evalcond[0]=((((-1.0)*r22*x9358))+((x9343*x9347))+(((-1.0)*x9353*x9359)));
evalcond[1]=((((-1.0)*r12*x9358))+((r10*x9361))+(((-1.0)*x9352*x9359)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9358))+(((-1.0)*x9349*x9359))+((r00*x9361)));
evalcond[3]=(((gconst1*x9346))+((r01*x9356))+(((-1.0)*cj3*r02*x9359))+((r01*x9344*x9348))+(((-1.0)*r00*x9351*x9358)));
evalcond[4]=(((x9349*x9362))+(((-1.0)*r01*x9360))+(((-1.0)*r02*sj3*x9359))+(((-1.0)*gconst2*x9346*x9358))+(((-1.0)*r00*x9348)));
evalcond[5]=(((r11*x9356))+x9345+(((-1.0)*x9357))+((r10*x9355))+((r11*x9344*x9348))+(((-1.0)*cj3*r12*x9359))+(((-1.0)*r10*x9351*x9358)));
evalcond[6]=((((-1.0)*sj1*x9350))+(((-1.0)*x9354))+((r20*x9355))+((r21*x9356))+(((-1.0)*cj3*x9347*x9358))+((r21*x9344*x9348))+(((-1.0)*cj3*r22*x9359)));
evalcond[7]=(((cj2*sj1))+x9354+(((-1.0)*r12*sj3*x9359))+((x9352*x9362))+(((-1.0)*r10*x9348))+(((-1.0)*r10*x9356*x9358))+(((-1.0)*r11*x9360)));
evalcond[8]=(x9345+(((-1.0)*x9357))+(((-1.0)*r20*x9348))+(((-1.0)*r22*sj3*x9359))+(((-1.0)*r21*x9360))+((x9353*x9362))+(((-1.0)*sj3*x9347*x9358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9365 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9365.valid){
continue;
}
IkReal x9363=((-1.0)*(x9365.value));
IkReal x9364=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9363;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9363;
IkReal gconst1=((-1.0)*r21*x9364);
IkReal gconst2=(r20*x9364);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9368 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9368.valid){
continue;
}
IkReal x9366=((-1.0)*(x9368.value));
IkReal x9367=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9366;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9366;
IkReal gconst1=((-1.0)*r21*x9367);
IkReal gconst2=(r20*x9367);
CheckValue<IkReal> x9376=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9376.valid){
continue;
}
IkReal x9369=x9376.value;
IkReal x9370=(cj3*x9369);
IkReal x9371=(r11*x9370);
IkReal x9372=(r01*x9370);
IkReal x9373=(r00*x9370);
IkReal x9374=(r10*x9370);
IkReal x9375=(r20*r21*x9370);
j4eval[0]=IKsign((((cj3*r02*r12))+((r00*r20*r21*x9371))+((r10*r20*r21*x9372))+((r10*x9373*(r20*r20)))+((r01*x9371*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9379 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9379.valid){
continue;
}
IkReal x9377=((-1.0)*(x9379.value));
IkReal x9378=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9377;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9377;
IkReal gconst1=((-1.0)*r21*x9378);
IkReal gconst2=(r20*x9378);
CheckValue<IkReal> x9387=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9387.valid){
continue;
}
IkReal x9380=x9387.value;
IkReal x9381=(sj3*x9380);
IkReal x9382=(r11*x9381);
IkReal x9383=(r00*x9381);
IkReal x9384=(r01*x9381);
IkReal x9385=(r10*x9381);
IkReal x9386=(r20*r21*x9381);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9382))+((r10*r20*r21*x9384))+((r01*x9382*(r21*r21)))+((r10*x9383*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9390 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9390.valid){
continue;
}
IkReal x9388=((-1.0)*(x9390.value));
IkReal x9389=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9388;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9388;
IkReal gconst1=((-1.0)*r21*x9389);
IkReal gconst2=(r20*x9389);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9393 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9393.valid){
continue;
}
IkReal x9391=((-1.0)*(x9393.value));
IkReal x9392=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9391;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9391;
IkReal gconst1=((-1.0)*r21*x9392);
IkReal gconst2=(r20*x9392);
IkReal x9394=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9398=IKPowWithIntegerCheck(x9394,-1);
if(!x9398.valid){
continue;
}
IkReal x9395=x9398.value;
IkReal x9396=((1.0)*x9395);
IkReal x9397=((((-1.0)*x9396*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9395))+(((-1.0)*x9396*(r01*r01)*(r21*r21))));
j4eval[0]=x9397;
j4eval[1]=IKsign(x9397);
j4eval[2]=r02;
j4eval[3]=x9394;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9401 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9401.valid){
continue;
}
IkReal x9399=((-1.0)*(x9401.value));
IkReal x9400=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9399;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9399;
IkReal gconst1=((-1.0)*r21*x9400);
IkReal gconst2=(r20*x9400);
IkReal x9402=r22*r22;
IkReal x9403=(cj1*cj2*r12);
CheckValue<IkReal> x9408=IKPowWithIntegerCheck(((-1.0)+x9402),-1);
if(!x9408.valid){
continue;
}
IkReal x9404=x9408.value;
IkReal x9405=((1.0)*r12*sj1*sj2);
if((((1.0)+(((-1.0)*x9402)))) < -0.00001)
continue;
IkReal x9406=IKsqrt(((1.0)+(((-1.0)*x9402))));
IkReal x9407=(r22*x9404*x9406);
j4eval[0]=((IKabs(((((-1.0)*x9405*x9407))+((x9403*x9407)))))+(IKabs(((((-1.0)*x9405))+x9403))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9409=(sj1*sj2);
IkReal x9410=(gconst1*r11);
IkReal x9411=(cj1*cj2);
IkReal x9412=(gconst2*r10);
CheckValue<IkReal> x9413=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9412*x9412)+(((-2.0)*x9410*x9412))+(x9410*x9410))),-1);
if(!x9413.valid){
continue;
}
CheckValue<IkReal> x9414 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x9409))+((r12*x9411)))),IkReal((((x9409*x9410))+(((-1.0)*x9409*x9412))+(((-1.0)*x9410*x9411))+((x9411*x9412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9413.value)))+(x9414.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9415=IKsin(j4);
IkReal x9416=IKcos(j4);
IkReal x9417=(gconst1*r01);
IkReal x9418=(gconst1*r21);
IkReal x9419=((1.0)*sj1);
IkReal x9420=(gconst1*r11);
IkReal x9421=((1.0)*x9416);
IkReal x9422=((1.0)*x9415);
IkReal x9423=(gconst2*x9415);
evalcond[0]=(((r20*x9423))+(((-1.0)*r22*x9421))+(((-1.0)*x9418*x9422)));
evalcond[1]=((((-1.0)*x9420*x9422))+(((-1.0)*r12*x9421))+((r10*x9423)));
evalcond[2]=((((-1.0)*r02*x9422))+((x9416*x9417))+(((-1.0)*gconst2*r00*x9421)));
evalcond[3]=((-1.0)+(((-1.0)*x9417*x9422))+((r00*x9423))+(((-1.0)*r02*x9421)));
evalcond[4]=((((-1.0)*gconst2*r10*x9421))+((x9416*x9420))+(((-1.0)*r12*x9422))+(((-1.0)*sj2*x9419))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x9419))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x9421))+(((-1.0)*r22*x9422))+((x9416*x9418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9424=(gconst1*r01);
IkReal x9425=(gconst2*r00);
CheckValue<IkReal> x9426 = IKatan2WithCheck(IkReal(((((-1.0)*x9425))+x9424)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9426.valid){
continue;
}
CheckValue<IkReal> x9427=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9425*x9425)))+(((-1.0)*(x9424*x9424)))+(((2.0)*x9424*x9425)))),-1);
if(!x9427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9426.value)+(((1.5707963267949)*(x9427.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9428=IKsin(j4);
IkReal x9429=IKcos(j4);
IkReal x9430=(gconst1*r01);
IkReal x9431=(gconst1*r21);
IkReal x9432=((1.0)*sj1);
IkReal x9433=(gconst1*r11);
IkReal x9434=((1.0)*x9429);
IkReal x9435=((1.0)*x9428);
IkReal x9436=(gconst2*x9428);
evalcond[0]=((((-1.0)*x9431*x9435))+((r20*x9436))+(((-1.0)*r22*x9434)));
evalcond[1]=((((-1.0)*x9433*x9435))+(((-1.0)*r12*x9434))+((r10*x9436)));
evalcond[2]=(((x9429*x9430))+(((-1.0)*gconst2*r00*x9434))+(((-1.0)*r02*x9435)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9434))+(((-1.0)*x9430*x9435))+((r00*x9436)));
evalcond[4]=(((x9429*x9433))+(((-1.0)*gconst2*r10*x9434))+(((-1.0)*sj2*x9432))+(((-1.0)*r12*x9435))+((cj1*cj2)));
evalcond[5]=(((x9429*x9431))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9432))+(((-1.0)*gconst2*r20*x9434))+(((-1.0)*r22*x9435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9437 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9437.valid){
continue;
}
CheckValue<IkReal> x9438=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9437.value)+(((1.5707963267949)*(x9438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9439=IKsin(j4);
IkReal x9440=IKcos(j4);
IkReal x9441=(gconst1*r01);
IkReal x9442=(gconst1*r21);
IkReal x9443=((1.0)*sj1);
IkReal x9444=(gconst1*r11);
IkReal x9445=((1.0)*x9440);
IkReal x9446=((1.0)*x9439);
IkReal x9447=(gconst2*x9439);
evalcond[0]=((((-1.0)*x9442*x9446))+(((-1.0)*r22*x9445))+((r20*x9447)));
evalcond[1]=(((r10*x9447))+(((-1.0)*x9444*x9446))+(((-1.0)*r12*x9445)));
evalcond[2]=(((x9440*x9441))+(((-1.0)*gconst2*r00*x9445))+(((-1.0)*r02*x9446)));
evalcond[3]=((-1.0)+((r00*x9447))+(((-1.0)*x9441*x9446))+(((-1.0)*r02*x9445)));
evalcond[4]=(((x9440*x9444))+(((-1.0)*sj2*x9443))+((cj1*cj2))+(((-1.0)*gconst2*r10*x9445))+(((-1.0)*r12*x9446)));
evalcond[5]=((((-1.0)*cj2*x9443))+((x9440*x9442))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x9445))+(((-1.0)*r22*x9446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9450 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9450.valid){
continue;
}
IkReal x9448=((-1.0)*(x9450.value));
IkReal x9449=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9448;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9448;
IkReal gconst1=((-1.0)*r21*x9449);
IkReal gconst2=(r20*x9449);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9453 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9453.valid){
continue;
}
IkReal x9451=((-1.0)*(x9453.value));
IkReal x9452=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9451;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9451;
IkReal gconst1=((-1.0)*r21*x9452);
IkReal gconst2=(r20*x9452);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9456 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9456.valid){
continue;
}
IkReal x9454=((-1.0)*(x9456.value));
IkReal x9455=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9454;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9454;
IkReal gconst1=((-1.0)*r21*x9455);
IkReal gconst2=(r20*x9455);
IkReal x9457=r22*r22;
IkReal x9458=(cj1*r02*sj2);
IkReal x9459=(cj2*r02*sj1);
CheckValue<IkReal> x9463=IKPowWithIntegerCheck(((-1.0)+x9457),-1);
if(!x9463.valid){
continue;
}
IkReal x9460=x9463.value;
if((((1.0)+(((-1.0)*x9457)))) < -0.00001)
continue;
IkReal x9461=IKsqrt(((1.0)+(((-1.0)*x9457))));
IkReal x9462=((1.0)*r22*x9460*x9461);
j4eval[0]=((IKabs((x9458+x9459)))+(IKabs(((((-1.0)*x9459*x9462))+(((-1.0)*x9458*x9462))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9464=(cj2*sj1);
IkReal x9465=(cj1*sj2);
IkReal x9466=((1.0)*gconst2);
IkReal x9467=(gconst1*r01);
CheckValue<IkReal> x9468 = IKatan2WithCheck(IkReal((((x9465*x9467))+(((-1.0)*r00*x9465*x9466))+(((-1.0)*r00*x9464*x9466))+((x9464*x9467)))),IkReal((((r02*x9465))+((r02*x9464)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9468.valid){
continue;
}
CheckValue<IkReal> x9469=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9466)))),-1);
if(!x9469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9468.value)+(((1.5707963267949)*(x9469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9470=IKcos(j4);
IkReal x9471=IKsin(j4);
IkReal x9472=(gconst1*r01);
IkReal x9473=((1.0)*sj1);
IkReal x9474=(gconst1*r21);
IkReal x9475=(gconst1*r11);
IkReal x9476=((1.0)*x9470);
IkReal x9477=(gconst2*x9470);
IkReal x9478=((1.0)*x9471);
IkReal x9479=(gconst2*x9471);
evalcond[0]=(((r00*x9477))+(((-1.0)*x9472*x9476))+((r02*x9471)));
evalcond[1]=((((-1.0)*r22*x9476))+(((-1.0)*x9474*x9478))+((r20*x9479)));
evalcond[2]=(((r10*x9479))+(((-1.0)*x9475*x9478))+(((-1.0)*r12*x9476)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9476))+((r00*x9479))+(((-1.0)*x9472*x9478)));
evalcond[4]=(((r10*x9477))+(((-1.0)*sj2*x9473))+(((-1.0)*x9475*x9476))+((cj1*cj2))+((r12*x9471)));
evalcond[5]=(((r22*x9471))+(((-1.0)*cj2*x9473))+(((-1.0)*cj1*sj2))+(((-1.0)*x9474*x9476))+((r20*x9477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9480=(gconst1*r01);
IkReal x9481=(gconst2*r00);
CheckValue<IkReal> x9482 = IKatan2WithCheck(IkReal(((((-1.0)*x9480))+x9481)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9482.valid){
continue;
}
CheckValue<IkReal> x9483=IKPowWithIntegerCheck(IKsign(((x9480*x9480)+(x9481*x9481)+(((-2.0)*x9480*x9481))+(r02*r02))),-1);
if(!x9483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9482.value)+(((1.5707963267949)*(x9483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9484=IKcos(j4);
IkReal x9485=IKsin(j4);
IkReal x9486=(gconst1*r01);
IkReal x9487=((1.0)*sj1);
IkReal x9488=(gconst1*r21);
IkReal x9489=(gconst1*r11);
IkReal x9490=((1.0)*x9484);
IkReal x9491=(gconst2*x9484);
IkReal x9492=((1.0)*x9485);
IkReal x9493=(gconst2*x9485);
evalcond[0]=(((r02*x9485))+((r00*x9491))+(((-1.0)*x9486*x9490)));
evalcond[1]=((((-1.0)*r22*x9490))+(((-1.0)*x9488*x9492))+((r20*x9493)));
evalcond[2]=(((r10*x9493))+(((-1.0)*x9489*x9492))+(((-1.0)*r12*x9490)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9490))+((r00*x9493))+(((-1.0)*x9486*x9492)));
evalcond[4]=(((r10*x9491))+(((-1.0)*x9489*x9490))+(((-1.0)*sj2*x9487))+((r12*x9485))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x9488*x9490))+(((-1.0)*cj2*x9487))+((r22*x9485))+((r20*x9491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9494 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9494.valid){
continue;
}
CheckValue<IkReal> x9495=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9494.value)+(((1.5707963267949)*(x9495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9496=IKcos(j4);
IkReal x9497=IKsin(j4);
IkReal x9498=(gconst1*r01);
IkReal x9499=((1.0)*sj1);
IkReal x9500=(gconst1*r21);
IkReal x9501=(gconst1*r11);
IkReal x9502=((1.0)*x9496);
IkReal x9503=(gconst2*x9496);
IkReal x9504=((1.0)*x9497);
IkReal x9505=(gconst2*x9497);
evalcond[0]=(((r02*x9497))+(((-1.0)*x9498*x9502))+((r00*x9503)));
evalcond[1]=((((-1.0)*r22*x9502))+((r20*x9505))+(((-1.0)*x9500*x9504)));
evalcond[2]=(((r10*x9505))+(((-1.0)*r12*x9502))+(((-1.0)*x9501*x9504)));
evalcond[3]=((-1.0)+(((-1.0)*x9498*x9504))+(((-1.0)*r02*x9502))+((r00*x9505)));
evalcond[4]=(((r12*x9497))+((r10*x9503))+(((-1.0)*sj2*x9499))+((cj1*cj2))+(((-1.0)*x9501*x9502)));
evalcond[5]=(((r22*x9497))+((r20*x9503))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9499))+(((-1.0)*x9500*x9502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9506=((-1.0)*py);
CheckValue<IkReal> x9508 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9508.valid){
continue;
}
IkReal x9507=((-1.0)*(x9508.value));
sj5=gconst1;
cj5=gconst2;
j5=x9507;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9506);
rxp0_2=(py*r00);
rxp1_0=(r21*x9506);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9507;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9509=((1.0)*sj3);
IkReal x9510=(r01*r21);
IkReal x9511=(r00*r20);
j4eval[0]=(x9511+x9510);
j4eval[1]=((((-1.0)*x9509*x9510))+(((-1.0)*x9509*x9511)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9512=((-1.0)*py);
CheckValue<IkReal> x9514 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9514.valid){
continue;
}
IkReal x9513=((-1.0)*(x9514.value));
sj5=gconst1;
cj5=gconst2;
j5=x9513;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9512);
rxp0_2=(py*r00);
rxp1_0=(r21*x9512);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9513;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9515=(r00*r20);
IkReal x9516=((1.0)*cj3);
IkReal x9517=(r01*r21);
j4eval[0]=(x9515+x9517);
j4eval[1]=((((-1.0)*x9516*x9517))+(((-1.0)*x9515*x9516)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9518=((-1.0)*py);
CheckValue<IkReal> x9520 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9520.valid){
continue;
}
IkReal x9519=((-1.0)*(x9520.value));
sj5=gconst1;
cj5=gconst2;
j5=x9519;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9518);
rxp0_2=(py*r00);
rxp1_0=(r21*x9518);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9519;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9521=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x9521))+(((-1.0)*r01*r21*x9521)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9522=((1.0)*gconst2);
CheckValue<IkReal> x9523=IKPowWithIntegerCheck(cj3,-1);
if(!x9523.valid){
continue;
}
CheckValue<IkReal> x9524=IKPowWithIntegerCheck(r12,-1);
if(!x9524.valid){
continue;
}
CheckValue<IkReal> x9525=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x9522))+((cj3*gconst1*r01))),-1);
if(!x9525.valid){
continue;
}
if( IKabs(((x9523.value)*(x9524.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9525.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9522)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9523.value)*(x9524.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x9525.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9522))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9523.value)*(x9524.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x9525.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9522))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9526=IKsin(j4);
IkReal x9527=IKcos(j4);
IkReal x9528=((1.0)*sj3);
IkReal x9529=(gconst1*sj3);
IkReal x9530=(sj1*sj2);
IkReal x9531=((1.0)*cj3);
IkReal x9532=((1.0)*cj2);
IkReal x9533=(gconst2*r01);
IkReal x9534=(gconst2*r21);
IkReal x9535=((1.0)*cj1*sj2);
IkReal x9536=(sj1*x9532);
IkReal x9537=(r12*x9526);
IkReal x9538=(gconst2*x9527);
IkReal x9539=(gconst2*x9526);
IkReal x9540=((1.0)*gconst1*x9526);
IkReal x9541=(cj3*gconst1*x9527);
IkReal x9542=(x9536+x9535);
evalcond[0]=((-1.0)*r12*x9527);
evalcond[1]=(((r20*x9539))+(((-1.0)*r21*x9540)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x9540))+((r00*x9539)));
evalcond[3]=((((-1.0)*x9531*x9537))+(((-1.0)*x9530))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x9528*x9537))+(((-1.0)*x9542)));
evalcond[5]=(((sj3*x9533))+(((-1.0)*r00*x9531*x9538))+((r00*x9529))+((r01*x9541)));
evalcond[6]=((((-1.0)*x9531*x9533))+((r01*x9527*x9529))+(((-1.0)*r00*x9528*x9538))+(((-1.0)*gconst1*r00*x9531)));
evalcond[7]=((((-1.0)*r20*x9531*x9538))+((r20*x9529))+((sj3*x9534))+((r21*x9541))+(((-1.0)*x9542)));
evalcond[8]=((((-1.0)*x9531*x9534))+(((-1.0)*gconst1*r20*x9531))+(((-1.0)*r20*x9528*x9538))+x9530+(((-1.0)*cj1*x9532))+((r21*x9527*x9529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9543=((1.0)*gconst2);
IkReal x9544=(gconst1*r01);
CheckValue<IkReal> x9545=IKPowWithIntegerCheck(((((-1.0)*x9544))+((gconst2*r00))),-1);
if(!x9545.valid){
continue;
}
CheckValue<IkReal> x9546=IKPowWithIntegerCheck((((cj3*x9544))+(((-1.0)*cj3*r00*x9543))),-1);
if(!x9546.valid){
continue;
}
if( IKabs(x9545.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9546.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9543)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9545.value)+IKsqr(((x9546.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9543))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9545.value, ((x9546.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9543))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9547=IKsin(j4);
IkReal x9548=IKcos(j4);
IkReal x9549=((1.0)*sj3);
IkReal x9550=(gconst1*sj3);
IkReal x9551=(sj1*sj2);
IkReal x9552=((1.0)*cj3);
IkReal x9553=((1.0)*cj2);
IkReal x9554=(gconst2*r01);
IkReal x9555=(gconst2*r21);
IkReal x9556=((1.0)*cj1*sj2);
IkReal x9557=(sj1*x9553);
IkReal x9558=(r12*x9547);
IkReal x9559=(gconst2*x9548);
IkReal x9560=(gconst2*x9547);
IkReal x9561=((1.0)*gconst1*x9547);
IkReal x9562=(cj3*gconst1*x9548);
IkReal x9563=(x9557+x9556);
evalcond[0]=((-1.0)*r12*x9548);
evalcond[1]=((((-1.0)*r21*x9561))+((r20*x9560)));
evalcond[2]=((-1.0)+((r00*x9560))+(((-1.0)*r01*x9561)));
evalcond[3]=(((cj1*cj2))+(((-1.0)*x9551))+(((-1.0)*x9552*x9558)));
evalcond[4]=((((-1.0)*x9563))+(((-1.0)*x9549*x9558)));
evalcond[5]=(((r01*x9562))+(((-1.0)*r00*x9552*x9559))+((sj3*x9554))+((r00*x9550)));
evalcond[6]=((((-1.0)*r00*x9549*x9559))+((r01*x9548*x9550))+(((-1.0)*gconst1*r00*x9552))+(((-1.0)*x9552*x9554)));
evalcond[7]=(((r21*x9562))+((r20*x9550))+(((-1.0)*x9563))+((sj3*x9555))+(((-1.0)*r20*x9552*x9559)));
evalcond[8]=((((-1.0)*r20*x9549*x9559))+((r21*x9548*x9550))+(((-1.0)*gconst1*r20*x9552))+x9551+(((-1.0)*cj1*x9553))+(((-1.0)*x9552*x9555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9564=(gconst2*r00);
IkReal x9565=(gconst1*r01);
CheckValue<IkReal> x9566=IKPowWithIntegerCheck(((((-1.0)*x9565))+x9564),-1);
if(!x9566.valid){
continue;
}
CheckValue<IkReal> x9567=IKPowWithIntegerCheck(((((-1.0)*sj3*x9564))+((sj3*x9565))),-1);
if(!x9567.valid){
continue;
}
if( IKabs(x9566.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9567.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9566.value)+IKsqr(((x9567.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9566.value, ((x9567.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9568=IKsin(j4);
IkReal x9569=IKcos(j4);
IkReal x9570=((1.0)*sj3);
IkReal x9571=(gconst1*sj3);
IkReal x9572=(sj1*sj2);
IkReal x9573=((1.0)*cj3);
IkReal x9574=((1.0)*cj2);
IkReal x9575=(gconst2*r01);
IkReal x9576=(gconst2*r21);
IkReal x9577=((1.0)*cj1*sj2);
IkReal x9578=(sj1*x9574);
IkReal x9579=(r12*x9568);
IkReal x9580=(gconst2*x9569);
IkReal x9581=(gconst2*x9568);
IkReal x9582=((1.0)*gconst1*x9568);
IkReal x9583=(cj3*gconst1*x9569);
IkReal x9584=(x9577+x9578);
evalcond[0]=((-1.0)*r12*x9569);
evalcond[1]=(((r20*x9581))+(((-1.0)*r21*x9582)));
evalcond[2]=((-1.0)+((r00*x9581))+(((-1.0)*r01*x9582)));
evalcond[3]=((((-1.0)*x9572))+(((-1.0)*x9573*x9579))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x9584))+(((-1.0)*x9570*x9579)));
evalcond[5]=((((-1.0)*r00*x9573*x9580))+((sj3*x9575))+((r00*x9571))+((r01*x9583)));
evalcond[6]=((((-1.0)*r00*x9570*x9580))+((r01*x9569*x9571))+(((-1.0)*x9573*x9575))+(((-1.0)*gconst1*r00*x9573)));
evalcond[7]=(((sj3*x9576))+(((-1.0)*r20*x9573*x9580))+(((-1.0)*x9584))+((r21*x9583))+((r20*x9571)));
evalcond[8]=((((-1.0)*x9573*x9576))+(((-1.0)*gconst1*r20*x9573))+(((-1.0)*cj1*x9574))+x9572+((r21*x9569*x9571))+(((-1.0)*r20*x9570*x9580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9585=gconst2*gconst2;
IkReal x9586=gconst1*gconst1;
IkReal x9587=(r00*r11);
IkReal x9588=(gconst1*gconst2);
IkReal x9589=((1.0)*sj3);
IkReal x9590=(r01*r11);
IkReal x9591=((1.0)*cj3*r10);
IkReal x9592=((1.0)*cj3*r12);
CheckValue<IkReal> x9593 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r01*x9592))+(((-1.0)*gconst1*r00*x9592)))),IkReal((((cj3*x9586*x9587))+(((-1.0)*r01*x9585*x9591))+((cj3*x9588*x9590))+(((-1.0)*r00*x9588*x9591)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9593.valid){
continue;
}
CheckValue<IkReal> x9594=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((sj3*x9586*x9590))+(((-1.0)*x9587*x9588*x9589))+(((-1.0)*r01*r10*x9588*x9589))+((r00*r10*sj3*x9585)))),-1);
if(!x9594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9593.value)+(((1.5707963267949)*(x9594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9595=IKsin(j4);
IkReal x9596=IKcos(j4);
IkReal x9597=(r00*sj3);
IkReal x9598=(gconst2*r20);
IkReal x9599=((1.0)*cj3);
IkReal x9600=(gconst2*r01);
IkReal x9601=(gconst1*r10);
IkReal x9602=(gconst1*r01);
IkReal x9603=((1.0)*sj1);
IkReal x9604=((1.0)*cj1);
IkReal x9605=(cj3*gconst2);
IkReal x9606=(gconst1*r11);
IkReal x9607=(gconst1*r21);
IkReal x9608=(gconst1*r20);
IkReal x9609=(gconst2*r11);
IkReal x9610=(gconst2*r21);
IkReal x9611=(sj2*x9604);
IkReal x9612=(cj2*x9603);
IkReal x9613=((1.0)*x9596);
IkReal x9614=((1.0)*x9595);
IkReal x9615=(gconst2*x9595);
IkReal x9616=(sj3*x9596);
IkReal x9617=(cj3*x9596);
IkReal x9618=(x9612+x9611);
evalcond[0]=((((-1.0)*r22*x9613))+((x9595*x9598))+(((-1.0)*x9607*x9614)));
evalcond[1]=(((r10*x9615))+(((-1.0)*r12*x9613))+(((-1.0)*x9606*x9614)));
evalcond[2]=((-1.0)+((r00*x9615))+(((-1.0)*r02*x9613))+(((-1.0)*x9602*x9614)));
evalcond[3]=((((-1.0)*r02*x9595*x9599))+((sj3*x9600))+((x9602*x9617))+((gconst1*x9597))+(((-1.0)*gconst2*r00*x9596*x9599)));
evalcond[4]=((((-1.0)*gconst2*x9597*x9613))+((x9602*x9616))+(((-1.0)*r02*sj3*x9614))+(((-1.0)*gconst1*r00*x9599))+(((-1.0)*x9599*x9600)));
evalcond[5]=((((-1.0)*sj2*x9603))+(((-1.0)*gconst2*r10*x9596*x9599))+((sj3*x9601))+((sj3*x9609))+((x9606*x9617))+(((-1.0)*r12*x9595*x9599))+((cj1*cj2)));
evalcond[6]=((((-1.0)*r22*x9595*x9599))+((sj3*x9608))+((x9607*x9617))+(((-1.0)*x9596*x9598*x9599))+((sj3*x9610))+(((-1.0)*x9618)));
evalcond[7]=((((-1.0)*sj3*x9598*x9613))+((x9607*x9616))+(((-1.0)*cj2*x9604))+((sj1*sj2))+(((-1.0)*x9599*x9610))+(((-1.0)*r22*sj3*x9614))+(((-1.0)*x9599*x9608)));
evalcond[8]=(((x9606*x9616))+(((-1.0)*gconst2*r10*sj3*x9613))+(((-1.0)*r12*sj3*x9614))+(((-1.0)*x9618))+(((-1.0)*x9599*x9609))+(((-1.0)*x9599*x9601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9619=gconst1*gconst1;
IkReal x9620=gconst2*gconst2;
IkReal x9621=(r00*sj3);
IkReal x9622=((1.0)*r11);
IkReal x9623=(r01*sj3);
IkReal x9624=(gconst1*gconst2);
IkReal x9625=(cj3*r01);
IkReal x9626=(cj3*r00);
IkReal x9627=(r10*x9620);
CheckValue<IkReal> x9628=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((r11*x9619*x9625))+(((-1.0)*x9622*x9624*x9626))+(((-1.0)*r10*x9624*x9625))+((x9626*x9627)))),-1);
if(!x9628.valid){
continue;
}
CheckValue<IkReal> x9629 = IKatan2WithCheck(IkReal((((gconst1*r12*x9621))+((gconst2*r12*x9623)))),IkReal((((r10*x9621*x9624))+(((-1.0)*x9619*x9621*x9622))+((x9623*x9627))+(((-1.0)*x9622*x9623*x9624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9628.value)))+(x9629.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9630=IKsin(j4);
IkReal x9631=IKcos(j4);
IkReal x9632=(r00*sj3);
IkReal x9633=(gconst2*r20);
IkReal x9634=((1.0)*cj3);
IkReal x9635=(gconst2*r01);
IkReal x9636=(gconst1*r10);
IkReal x9637=(gconst1*r01);
IkReal x9638=((1.0)*sj1);
IkReal x9639=((1.0)*cj1);
IkReal x9640=(cj3*gconst2);
IkReal x9641=(gconst1*r11);
IkReal x9642=(gconst1*r21);
IkReal x9643=(gconst1*r20);
IkReal x9644=(gconst2*r11);
IkReal x9645=(gconst2*r21);
IkReal x9646=(sj2*x9639);
IkReal x9647=(cj2*x9638);
IkReal x9648=((1.0)*x9631);
IkReal x9649=((1.0)*x9630);
IkReal x9650=(gconst2*x9630);
IkReal x9651=(sj3*x9631);
IkReal x9652=(cj3*x9631);
IkReal x9653=(x9647+x9646);
evalcond[0]=(((x9630*x9633))+(((-1.0)*x9642*x9649))+(((-1.0)*r22*x9648)));
evalcond[1]=((((-1.0)*r12*x9648))+(((-1.0)*x9641*x9649))+((r10*x9650)));
evalcond[2]=((-1.0)+(((-1.0)*x9637*x9649))+((r00*x9650))+(((-1.0)*r02*x9648)));
evalcond[3]=((((-1.0)*gconst2*r00*x9631*x9634))+(((-1.0)*r02*x9630*x9634))+((gconst1*x9632))+((sj3*x9635))+((x9637*x9652)));
evalcond[4]=((((-1.0)*gconst1*r00*x9634))+(((-1.0)*r02*sj3*x9649))+(((-1.0)*gconst2*x9632*x9648))+(((-1.0)*x9634*x9635))+((x9637*x9651)));
evalcond[5]=((((-1.0)*r12*x9630*x9634))+(((-1.0)*gconst2*r10*x9631*x9634))+((x9641*x9652))+((sj3*x9644))+((cj1*cj2))+(((-1.0)*sj2*x9638))+((sj3*x9636)));
evalcond[6]=((((-1.0)*x9631*x9633*x9634))+(((-1.0)*r22*x9630*x9634))+((x9642*x9652))+((sj3*x9643))+((sj3*x9645))+(((-1.0)*x9653)));
evalcond[7]=((((-1.0)*r22*sj3*x9649))+((x9642*x9651))+((sj1*sj2))+(((-1.0)*sj3*x9633*x9648))+(((-1.0)*x9634*x9645))+(((-1.0)*x9634*x9643))+(((-1.0)*cj2*x9639)));
evalcond[8]=(((x9641*x9651))+(((-1.0)*gconst2*r10*sj3*x9648))+(((-1.0)*x9634*x9644))+(((-1.0)*r12*sj3*x9649))+(((-1.0)*x9634*x9636))+(((-1.0)*x9653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9654 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9654.valid){
continue;
}
CheckValue<IkReal> x9655=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9654.value)+(((1.5707963267949)*(x9655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9656=IKsin(j4);
IkReal x9657=IKcos(j4);
IkReal x9658=(r00*sj3);
IkReal x9659=(gconst2*r20);
IkReal x9660=((1.0)*cj3);
IkReal x9661=(gconst2*r01);
IkReal x9662=(gconst1*r10);
IkReal x9663=(gconst1*r01);
IkReal x9664=((1.0)*sj1);
IkReal x9665=((1.0)*cj1);
IkReal x9666=(cj3*gconst2);
IkReal x9667=(gconst1*r11);
IkReal x9668=(gconst1*r21);
IkReal x9669=(gconst1*r20);
IkReal x9670=(gconst2*r11);
IkReal x9671=(gconst2*r21);
IkReal x9672=(sj2*x9665);
IkReal x9673=(cj2*x9664);
IkReal x9674=((1.0)*x9657);
IkReal x9675=((1.0)*x9656);
IkReal x9676=(gconst2*x9656);
IkReal x9677=(sj3*x9657);
IkReal x9678=(cj3*x9657);
IkReal x9679=(x9672+x9673);
evalcond[0]=(((x9656*x9659))+(((-1.0)*x9668*x9675))+(((-1.0)*r22*x9674)));
evalcond[1]=(((r10*x9676))+(((-1.0)*r12*x9674))+(((-1.0)*x9667*x9675)));
evalcond[2]=((-1.0)+(((-1.0)*x9663*x9675))+((r00*x9676))+(((-1.0)*r02*x9674)));
evalcond[3]=(((sj3*x9661))+((gconst1*x9658))+((x9663*x9678))+(((-1.0)*gconst2*r00*x9657*x9660))+(((-1.0)*r02*x9656*x9660)));
evalcond[4]=((((-1.0)*gconst2*x9658*x9674))+(((-1.0)*r02*sj3*x9675))+((x9663*x9677))+(((-1.0)*x9660*x9661))+(((-1.0)*gconst1*r00*x9660)));
evalcond[5]=((((-1.0)*gconst2*r10*x9657*x9660))+((sj3*x9662))+((sj3*x9670))+((x9667*x9678))+(((-1.0)*r12*x9656*x9660))+((cj1*cj2))+(((-1.0)*sj2*x9664)));
evalcond[6]=((((-1.0)*r22*x9656*x9660))+((sj3*x9669))+(((-1.0)*x9679))+((sj3*x9671))+((x9668*x9678))+(((-1.0)*x9657*x9659*x9660)));
evalcond[7]=((((-1.0)*x9660*x9671))+(((-1.0)*cj2*x9665))+(((-1.0)*sj3*x9659*x9674))+(((-1.0)*x9660*x9669))+((sj1*sj2))+(((-1.0)*r22*sj3*x9675))+((x9668*x9677)));
evalcond[8]=((((-1.0)*x9660*x9670))+(((-1.0)*x9679))+(((-1.0)*x9660*x9662))+((x9667*x9677))+(((-1.0)*r12*sj3*x9675))+(((-1.0)*gconst2*r10*sj3*x9674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9682 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9682.valid){
continue;
}
IkReal x9680=((-1.0)*(x9682.value));
IkReal x9681=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9680;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9680;
IkReal gconst1=((-1.0)*r21*x9681);
IkReal gconst2=(r20*x9681);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9685 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9685.valid){
continue;
}
IkReal x9683=((-1.0)*(x9685.value));
IkReal x9684=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9683;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9683;
IkReal gconst1=((-1.0)*r21*x9684);
IkReal gconst2=(r20*x9684);
CheckValue<IkReal> x9693=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9693.valid){
continue;
}
IkReal x9686=x9693.value;
IkReal x9687=(cj3*x9686);
IkReal x9688=(r11*x9687);
IkReal x9689=(r01*x9687);
IkReal x9690=(r00*x9687);
IkReal x9691=(r10*x9687);
IkReal x9692=(r20*r21*x9687);
j4eval[0]=IKsign((((cj3*r02*r12))+((r00*r20*r21*x9688))+((r01*x9688*(r21*r21)))+((r10*r20*r21*x9689))+((r10*x9690*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9696 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9696.valid){
continue;
}
IkReal x9694=((-1.0)*(x9696.value));
IkReal x9695=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9694;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9694;
IkReal gconst1=((-1.0)*r21*x9695);
IkReal gconst2=(r20*x9695);
CheckValue<IkReal> x9704=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9704.valid){
continue;
}
IkReal x9697=x9704.value;
IkReal x9698=(sj3*x9697);
IkReal x9699=(r11*x9698);
IkReal x9700=(r00*x9698);
IkReal x9701=(r01*x9698);
IkReal x9702=(r10*x9698);
IkReal x9703=(r20*r21*x9698);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9701))+((r10*x9700*(r20*r20)))+((r00*r20*r21*x9699))+((r01*x9699*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9707 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9707.valid){
continue;
}
IkReal x9705=((-1.0)*(x9707.value));
IkReal x9706=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9705;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9705;
IkReal gconst1=((-1.0)*r21*x9706);
IkReal gconst2=(r20*x9706);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9710 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9710.valid){
continue;
}
IkReal x9708=((-1.0)*(x9710.value));
IkReal x9709=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9708;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9708;
IkReal gconst1=((-1.0)*r21*x9709);
IkReal gconst2=(r20*x9709);
IkReal x9711=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9715=IKPowWithIntegerCheck(x9711,-1);
if(!x9715.valid){
continue;
}
IkReal x9712=x9715.value;
IkReal x9713=((1.0)*x9712);
IkReal x9714=((((-1.0)*x9713*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9712))+(((-1.0)*(r12*r12)))+(((-1.0)*x9713*(r10*r10)*(r20*r20))));
j4eval[0]=x9714;
j4eval[1]=r12;
j4eval[2]=x9711;
j4eval[3]=IKsign(x9714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9718 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9718.valid){
continue;
}
IkReal x9716=((-1.0)*(x9718.value));
IkReal x9717=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9716;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9716;
IkReal gconst1=((-1.0)*r21*x9717);
IkReal gconst2=(r20*x9717);
IkReal x9719=r22*r22;
IkReal x9720=(r02*sj1*sj2);
CheckValue<IkReal> x9725=IKPowWithIntegerCheck(((-1.0)+x9719),-1);
if(!x9725.valid){
continue;
}
IkReal x9721=x9725.value;
IkReal x9722=((1.0)*cj1*cj2*r02);
if((((1.0)+(((-1.0)*x9719)))) < -0.00001)
continue;
IkReal x9723=IKsqrt(((1.0)+(((-1.0)*x9719))));
IkReal x9724=(r22*x9721*x9723);
j4eval[0]=((IKabs(((((-1.0)*x9722*x9724))+((x9720*x9724)))))+(IKabs((x9720+(((-1.0)*x9722))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9726=(sj1*sj2);
IkReal x9727=(gconst1*r01);
IkReal x9728=(gconst2*r00);
IkReal x9729=((1.0)*cj1*cj2);
CheckValue<IkReal> x9730=IKPowWithIntegerCheck(IKsign(((x9727*x9727)+(((-2.0)*x9727*x9728))+(x9728*x9728)+(r02*r02))),-1);
if(!x9730.valid){
continue;
}
CheckValue<IkReal> x9731 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x9729))+((r02*x9726)))),IkReal((((x9726*x9728))+((cj1*cj2*x9727))+(((-1.0)*x9726*x9727))+(((-1.0)*x9728*x9729)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9730.value)))+(x9731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9732=IKsin(j4);
IkReal x9733=IKcos(j4);
IkReal x9734=(gconst1*r01);
IkReal x9735=(gconst1*r21);
IkReal x9736=((1.0)*cj2);
IkReal x9737=(gconst1*r11);
IkReal x9738=((1.0)*x9733);
IkReal x9739=((1.0)*x9732);
IkReal x9740=(gconst2*x9732);
evalcond[0]=((((-1.0)*x9735*x9739))+(((-1.0)*r22*x9738))+((r20*x9740)));
evalcond[1]=((((-1.0)*r02*x9738))+(((-1.0)*x9734*x9739))+((r00*x9740)));
evalcond[2]=((((-1.0)*r12*x9739))+(((-1.0)*gconst2*r10*x9738))+((x9733*x9737)));
evalcond[3]=((-1.0)+((r10*x9740))+(((-1.0)*x9737*x9739))+(((-1.0)*r12*x9738)));
evalcond[4]=((((-1.0)*r02*x9739))+(((-1.0)*cj1*x9736))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9738))+((x9733*x9734)));
evalcond[5]=((((-1.0)*sj1*x9736))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x9739))+((x9733*x9735))+(((-1.0)*gconst2*r20*x9738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9741=(gconst1*r11);
IkReal x9742=(gconst2*r10);
CheckValue<IkReal> x9743 = IKatan2WithCheck(IkReal(((((-1.0)*x9742))+x9741)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9743.valid){
continue;
}
CheckValue<IkReal> x9744=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9741*x9741)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9742*x9742)))+(((2.0)*x9741*x9742)))),-1);
if(!x9744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9743.value)+(((1.5707963267949)*(x9744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9745=IKsin(j4);
IkReal x9746=IKcos(j4);
IkReal x9747=(gconst1*r01);
IkReal x9748=(gconst1*r21);
IkReal x9749=((1.0)*cj2);
IkReal x9750=(gconst1*r11);
IkReal x9751=((1.0)*x9746);
IkReal x9752=((1.0)*x9745);
IkReal x9753=(gconst2*x9745);
evalcond[0]=((((-1.0)*r22*x9751))+(((-1.0)*x9748*x9752))+((r20*x9753)));
evalcond[1]=(((r00*x9753))+(((-1.0)*x9747*x9752))+(((-1.0)*r02*x9751)));
evalcond[2]=((((-1.0)*gconst2*r10*x9751))+(((-1.0)*r12*x9752))+((x9746*x9750)));
evalcond[3]=((-1.0)+((r10*x9753))+(((-1.0)*r12*x9751))+(((-1.0)*x9750*x9752)));
evalcond[4]=((((-1.0)*r02*x9752))+((sj1*sj2))+((x9746*x9747))+(((-1.0)*gconst2*r00*x9751))+(((-1.0)*cj1*x9749)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x9752))+((x9746*x9748))+(((-1.0)*sj1*x9749))+(((-1.0)*gconst2*r20*x9751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9754=((1.0)*gconst1);
CheckValue<IkReal> x9755 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9754))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9755.valid){
continue;
}
CheckValue<IkReal> x9756=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9754)))),-1);
if(!x9756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9755.value)+(((1.5707963267949)*(x9756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9757=IKsin(j4);
IkReal x9758=IKcos(j4);
IkReal x9759=(gconst1*r01);
IkReal x9760=(gconst1*r21);
IkReal x9761=((1.0)*cj2);
IkReal x9762=(gconst1*r11);
IkReal x9763=((1.0)*x9758);
IkReal x9764=((1.0)*x9757);
IkReal x9765=(gconst2*x9757);
evalcond[0]=((((-1.0)*r22*x9763))+((r20*x9765))+(((-1.0)*x9760*x9764)));
evalcond[1]=((((-1.0)*x9759*x9764))+((r00*x9765))+(((-1.0)*r02*x9763)));
evalcond[2]=((((-1.0)*gconst2*r10*x9763))+((x9758*x9762))+(((-1.0)*r12*x9764)));
evalcond[3]=((-1.0)+((r10*x9765))+(((-1.0)*r12*x9763))+(((-1.0)*x9762*x9764)));
evalcond[4]=((((-1.0)*gconst2*r00*x9763))+((sj1*sj2))+((x9758*x9759))+(((-1.0)*r02*x9764))+(((-1.0)*cj1*x9761)));
evalcond[5]=((((-1.0)*r22*x9764))+(((-1.0)*cj1*sj2))+((x9758*x9760))+(((-1.0)*gconst2*r20*x9763))+(((-1.0)*sj1*x9761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9768 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9768.valid){
continue;
}
IkReal x9766=((-1.0)*(x9768.value));
IkReal x9767=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9766;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9766;
IkReal gconst1=((-1.0)*r21*x9767);
IkReal gconst2=(r20*x9767);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9771 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9771.valid){
continue;
}
IkReal x9769=((-1.0)*(x9771.value));
IkReal x9770=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9769;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9769;
IkReal gconst1=((-1.0)*r21*x9770);
IkReal gconst2=(r20*x9770);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9774 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9774.valid){
continue;
}
IkReal x9772=((-1.0)*(x9774.value));
IkReal x9773=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9772;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9772;
IkReal gconst1=((-1.0)*r21*x9773);
IkReal gconst2=(r20*x9773);
IkReal x9775=r22*r22;
IkReal x9776=(cj1*r12*sj2);
IkReal x9777=(cj2*r12*sj1);
CheckValue<IkReal> x9781=IKPowWithIntegerCheck(((-1.0)+x9775),-1);
if(!x9781.valid){
continue;
}
IkReal x9778=x9781.value;
if((((1.0)+(((-1.0)*x9775)))) < -0.00001)
continue;
IkReal x9779=IKsqrt(((1.0)+(((-1.0)*x9775))));
IkReal x9780=((1.0)*r22*x9778*x9779);
j4eval[0]=((IKabs((x9777+x9776)))+(IKabs(((((-1.0)*x9777*x9780))+(((-1.0)*x9776*x9780))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9782=(cj1*sj2);
IkReal x9783=(cj2*sj1);
IkReal x9784=(gconst1*r11);
IkReal x9785=((1.0)*gconst2*r10);
CheckValue<IkReal> x9786=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9786.valid){
continue;
}
CheckValue<IkReal> x9787 = IKatan2WithCheck(IkReal((((x9782*x9784))+(((-1.0)*x9782*x9785))+(((-1.0)*x9783*x9785))+((x9783*x9784)))),IkReal((((r12*x9782))+((r12*x9783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9786.value)))+(x9787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9788=IKcos(j4);
IkReal x9789=IKsin(j4);
IkReal x9790=(gconst1*r01);
IkReal x9791=((1.0)*cj2);
IkReal x9792=(gconst1*r21);
IkReal x9793=(gconst1*r11);
IkReal x9794=((1.0)*x9788);
IkReal x9795=(gconst2*x9788);
IkReal x9796=((1.0)*x9789);
IkReal x9797=(gconst2*x9789);
evalcond[0]=(((r10*x9795))+(((-1.0)*x9793*x9794))+((r12*x9789)));
evalcond[1]=((((-1.0)*x9792*x9796))+((r20*x9797))+(((-1.0)*r22*x9794)));
evalcond[2]=((((-1.0)*x9790*x9796))+(((-1.0)*r02*x9794))+((r00*x9797)));
evalcond[3]=((-1.0)+((r10*x9797))+(((-1.0)*x9793*x9796))+(((-1.0)*r12*x9794)));
evalcond[4]=((((-1.0)*x9790*x9794))+(((-1.0)*cj1*x9791))+((sj1*sj2))+((r00*x9795))+((r02*x9789)));
evalcond[5]=((((-1.0)*sj1*x9791))+(((-1.0)*x9792*x9794))+((r20*x9795))+((r22*x9789))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9798=(gconst1*r11);
IkReal x9799=(gconst2*r10);
CheckValue<IkReal> x9800 = IKatan2WithCheck(IkReal(((((-1.0)*x9798))+x9799)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9800.valid){
continue;
}
CheckValue<IkReal> x9801=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9799*x9799)+(x9798*x9798)+(((-2.0)*x9798*x9799)))),-1);
if(!x9801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9800.value)+(((1.5707963267949)*(x9801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9802=IKcos(j4);
IkReal x9803=IKsin(j4);
IkReal x9804=(gconst1*r01);
IkReal x9805=((1.0)*cj2);
IkReal x9806=(gconst1*r21);
IkReal x9807=(gconst1*r11);
IkReal x9808=((1.0)*x9802);
IkReal x9809=(gconst2*x9802);
IkReal x9810=((1.0)*x9803);
IkReal x9811=(gconst2*x9803);
evalcond[0]=(((r10*x9809))+((r12*x9803))+(((-1.0)*x9807*x9808)));
evalcond[1]=((((-1.0)*r22*x9808))+(((-1.0)*x9806*x9810))+((r20*x9811)));
evalcond[2]=((((-1.0)*r02*x9808))+(((-1.0)*x9804*x9810))+((r00*x9811)));
evalcond[3]=((-1.0)+(((-1.0)*x9807*x9810))+(((-1.0)*r12*x9808))+((r10*x9811)));
evalcond[4]=(((r00*x9809))+(((-1.0)*cj1*x9805))+((sj1*sj2))+((r02*x9803))+(((-1.0)*x9804*x9808)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r22*x9803))+(((-1.0)*x9806*x9808))+(((-1.0)*sj1*x9805))+((r20*x9809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9812=((1.0)*gconst1);
CheckValue<IkReal> x9813 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9812))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9813.valid){
continue;
}
CheckValue<IkReal> x9814=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9812)))),-1);
if(!x9814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9813.value)+(((1.5707963267949)*(x9814.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9815=IKcos(j4);
IkReal x9816=IKsin(j4);
IkReal x9817=(gconst1*r01);
IkReal x9818=((1.0)*cj2);
IkReal x9819=(gconst1*r21);
IkReal x9820=(gconst1*r11);
IkReal x9821=((1.0)*x9815);
IkReal x9822=(gconst2*x9815);
IkReal x9823=((1.0)*x9816);
IkReal x9824=(gconst2*x9816);
evalcond[0]=((((-1.0)*x9820*x9821))+((r12*x9816))+((r10*x9822)));
evalcond[1]=(((r20*x9824))+(((-1.0)*x9819*x9823))+(((-1.0)*r22*x9821)));
evalcond[2]=((((-1.0)*r02*x9821))+((r00*x9824))+(((-1.0)*x9817*x9823)));
evalcond[3]=((-1.0)+(((-1.0)*x9820*x9823))+(((-1.0)*r12*x9821))+((r10*x9824)));
evalcond[4]=(((sj1*sj2))+((r00*x9822))+((r02*x9816))+(((-1.0)*x9817*x9821))+(((-1.0)*cj1*x9818)));
evalcond[5]=(((r20*x9822))+(((-1.0)*cj1*sj2))+((r22*x9816))+(((-1.0)*x9819*x9821))+(((-1.0)*sj1*x9818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9825=((-1.0)*px);
CheckValue<IkReal> x9827 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9827.valid){
continue;
}
IkReal x9826=((-1.0)*(x9827.value));
sj5=gconst1;
cj5=gconst2;
j5=x9826;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9825);
rxp1_1=(px*r21);
rxp1_2=(r11*x9825);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9826;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9828=((1.0)*sj3);
IkReal x9829=(r11*r21);
IkReal x9830=(r10*r20);
j4eval[0]=(x9829+x9830);
j4eval[1]=((((-1.0)*x9828*x9829))+(((-1.0)*x9828*x9830)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9831=((-1.0)*px);
CheckValue<IkReal> x9833 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9833.valid){
continue;
}
IkReal x9832=((-1.0)*(x9833.value));
sj5=gconst1;
cj5=gconst2;
j5=x9832;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9831);
rxp1_1=(px*r21);
rxp1_2=(r11*x9831);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9832;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9834=(r10*r20);
IkReal x9835=((1.0)*cj3);
IkReal x9836=(r11*r21);
j4eval[0]=(x9836+x9834);
j4eval[1]=((((-1.0)*x9834*x9835))+(((-1.0)*x9835*x9836)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9837=((-1.0)*px);
CheckValue<IkReal> x9839 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9839.valid){
continue;
}
IkReal x9838=((-1.0)*(x9839.value));
sj5=gconst1;
cj5=gconst2;
j5=x9838;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9837);
rxp1_1=(px*r21);
rxp1_2=(r11*x9837);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9838;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9840=((1.0)*cj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r11*r21*x9840))+(((-1.0)*r10*r20*x9840)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9841=((1.0)*gconst2);
CheckValue<IkReal> x9842=IKPowWithIntegerCheck(r02,-1);
if(!x9842.valid){
continue;
}
CheckValue<IkReal> x9843=IKPowWithIntegerCheck(sj3,-1);
if(!x9843.valid){
continue;
}
CheckValue<IkReal> x9844=IKPowWithIntegerCheck(((((-1.0)*cj3*r10*x9841))+((cj3*gconst1*r11))),-1);
if(!x9844.valid){
continue;
}
if( IKabs(((x9842.value)*(x9843.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9844.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9841)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9842.value)*(x9843.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x9844.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9841))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9842.value)*(x9843.value)*((((cj2*sj1))+((cj1*sj2))))), ((x9844.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9841))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9845=IKsin(j4);
IkReal x9846=IKcos(j4);
IkReal x9847=(sj1*sj2);
IkReal x9848=((1.0)*cj3);
IkReal x9849=(gconst1*r10);
IkReal x9850=(cj2*sj1);
IkReal x9851=((1.0)*cj1);
IkReal x9852=(gconst2*r21);
IkReal x9853=(gconst1*sj3);
IkReal x9854=(gconst2*r11);
IkReal x9855=(cj3*gconst1);
IkReal x9856=((1.0)*sj3);
IkReal x9857=(cj2*x9851);
IkReal x9858=(gconst2*x9845);
IkReal x9859=(gconst2*x9846);
IkReal x9860=(r11*x9846);
IkReal x9861=(r02*x9845);
IkReal x9862=(r21*x9846);
IkReal x9863=((1.0)*gconst1*x9845);
evalcond[0]=((-1.0)*r02*x9846);
evalcond[1]=((((-1.0)*r21*x9863))+((r20*x9858)));
evalcond[2]=(((cj1*sj2))+x9850+(((-1.0)*x9856*x9861)));
evalcond[3]=((-1.0)+((r10*x9858))+(((-1.0)*r11*x9863)));
evalcond[4]=((((-1.0)*x9857))+(((-1.0)*x9848*x9861))+x9847);
evalcond[5]=(((x9855*x9860))+(((-1.0)*r10*x9848*x9859))+((sj3*x9854))+((sj3*x9849)));
evalcond[6]=((((-1.0)*x9848*x9854))+(((-1.0)*x9848*x9849))+((x9853*x9860))+(((-1.0)*r10*x9856*x9859)));
evalcond[7]=((((-1.0)*x9850))+(((-1.0)*sj2*x9851))+((x9855*x9862))+((r20*x9853))+(((-1.0)*r20*x9848*x9859))+((sj3*x9852)));
evalcond[8]=((((-1.0)*x9848*x9852))+(((-1.0)*gconst1*r20*x9848))+((x9853*x9862))+(((-1.0)*x9857))+(((-1.0)*r20*x9856*x9859))+x9847);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9864=((1.0)*r11);
IkReal x9865=(gconst2*r10);
CheckValue<IkReal> x9866=IKPowWithIntegerCheck(((((-1.0)*gconst1*x9864))+x9865),-1);
if(!x9866.valid){
continue;
}
CheckValue<IkReal> x9867=IKPowWithIntegerCheck(((((-1.0)*cj3*x9865))+((cj3*gconst1*r11))),-1);
if(!x9867.valid){
continue;
}
if( IKabs(x9866.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9867.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9864)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9866.value)+IKsqr(((x9867.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9864))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9866.value, ((x9867.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9864))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9868=IKsin(j4);
IkReal x9869=IKcos(j4);
IkReal x9870=(sj1*sj2);
IkReal x9871=((1.0)*cj3);
IkReal x9872=(gconst1*r10);
IkReal x9873=(cj2*sj1);
IkReal x9874=((1.0)*cj1);
IkReal x9875=(gconst2*r21);
IkReal x9876=(gconst1*sj3);
IkReal x9877=(gconst2*r11);
IkReal x9878=(cj3*gconst1);
IkReal x9879=((1.0)*sj3);
IkReal x9880=(cj2*x9874);
IkReal x9881=(gconst2*x9868);
IkReal x9882=(gconst2*x9869);
IkReal x9883=(r11*x9869);
IkReal x9884=(r02*x9868);
IkReal x9885=(r21*x9869);
IkReal x9886=((1.0)*gconst1*x9868);
evalcond[0]=((-1.0)*r02*x9869);
evalcond[1]=(((r20*x9881))+(((-1.0)*r21*x9886)));
evalcond[2]=(((cj1*sj2))+x9873+(((-1.0)*x9879*x9884)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x9886))+((r10*x9881)));
evalcond[4]=((((-1.0)*x9871*x9884))+(((-1.0)*x9880))+x9870);
evalcond[5]=((((-1.0)*r10*x9871*x9882))+((x9878*x9883))+((sj3*x9877))+((sj3*x9872)));
evalcond[6]=((((-1.0)*r10*x9879*x9882))+((x9876*x9883))+(((-1.0)*x9871*x9872))+(((-1.0)*x9871*x9877)));
evalcond[7]=((((-1.0)*x9873))+(((-1.0)*sj2*x9874))+((r20*x9876))+((x9878*x9885))+((sj3*x9875))+(((-1.0)*r20*x9871*x9882)));
evalcond[8]=((((-1.0)*r20*x9879*x9882))+(((-1.0)*x9880))+(((-1.0)*gconst1*r20*x9871))+((x9876*x9885))+(((-1.0)*x9871*x9875))+x9870);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9887=(gconst1*r11);
IkReal x9888=(gconst2*r10);
CheckValue<IkReal> x9889=IKPowWithIntegerCheck(((((-1.0)*x9887))+x9888),-1);
if(!x9889.valid){
continue;
}
CheckValue<IkReal> x9890=IKPowWithIntegerCheck(((((-1.0)*sj3*x9888))+((sj3*x9887))),-1);
if(!x9890.valid){
continue;
}
if( IKabs(x9889.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9890.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9889.value)+IKsqr(((x9890.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9889.value, ((x9890.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9891=IKsin(j4);
IkReal x9892=IKcos(j4);
IkReal x9893=(sj1*sj2);
IkReal x9894=((1.0)*cj3);
IkReal x9895=(gconst1*r10);
IkReal x9896=(cj2*sj1);
IkReal x9897=((1.0)*cj1);
IkReal x9898=(gconst2*r21);
IkReal x9899=(gconst1*sj3);
IkReal x9900=(gconst2*r11);
IkReal x9901=(cj3*gconst1);
IkReal x9902=((1.0)*sj3);
IkReal x9903=(cj2*x9897);
IkReal x9904=(gconst2*x9891);
IkReal x9905=(gconst2*x9892);
IkReal x9906=(r11*x9892);
IkReal x9907=(r02*x9891);
IkReal x9908=(r21*x9892);
IkReal x9909=((1.0)*gconst1*x9891);
evalcond[0]=((-1.0)*r02*x9892);
evalcond[1]=(((r20*x9904))+(((-1.0)*r21*x9909)));
evalcond[2]=((((-1.0)*x9902*x9907))+((cj1*sj2))+x9896);
evalcond[3]=((-1.0)+(((-1.0)*r11*x9909))+((r10*x9904)));
evalcond[4]=((((-1.0)*x9903))+(((-1.0)*x9894*x9907))+x9893);
evalcond[5]=(((sj3*x9900))+(((-1.0)*r10*x9894*x9905))+((sj3*x9895))+((x9901*x9906)));
evalcond[6]=((((-1.0)*r10*x9902*x9905))+((x9899*x9906))+(((-1.0)*x9894*x9895))+(((-1.0)*x9894*x9900)));
evalcond[7]=(((sj3*x9898))+(((-1.0)*r20*x9894*x9905))+(((-1.0)*x9896))+((x9901*x9908))+((r20*x9899))+(((-1.0)*sj2*x9897)));
evalcond[8]=(((x9899*x9908))+(((-1.0)*x9894*x9898))+(((-1.0)*r20*x9902*x9905))+(((-1.0)*x9903))+x9893+(((-1.0)*gconst1*r20*x9894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9910=gconst2*gconst2;
IkReal x9911=gconst1*gconst1;
IkReal x9912=(r11*sj3);
IkReal x9913=(gconst1*gconst2);
IkReal x9914=((1.0)*r00);
IkReal x9915=(cj3*r11);
IkReal x9916=(cj3*r10);
IkReal x9917=((1.0)*r02);
IkReal x9918=(r10*sj3);
IkReal x9919=(r01*x9911);
CheckValue<IkReal> x9920=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*r01*x9913*x9918))+((x9912*x9919))+((r00*x9910*x9918))+(((-1.0)*x9912*x9913*x9914)))),-1);
if(!x9920.valid){
continue;
}
CheckValue<IkReal> x9921 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x9915*x9917))+(((-1.0)*gconst1*x9916*x9917)))),IkReal((((x9916*x9919))+((r01*x9913*x9915))+(((-1.0)*x9913*x9914*x9916))+(((-1.0)*x9910*x9914*x9915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9920.value)))+(x9921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9922=IKsin(j4);
IkReal x9923=IKcos(j4);
IkReal x9924=(sj1*sj2);
IkReal x9925=(gconst1*r01);
IkReal x9926=(gconst2*sj3);
IkReal x9927=(cj3*gconst1);
IkReal x9928=(cj3*gconst2);
IkReal x9929=((1.0)*cj2);
IkReal x9930=(gconst1*r11);
IkReal x9931=(gconst1*r21);
IkReal x9932=(cj1*sj2);
IkReal x9933=(gconst1*sj3);
IkReal x9934=(cj1*x9929);
IkReal x9935=((1.0)*x9923);
IkReal x9936=((1.0)*x9922);
IkReal x9937=(sj3*x9923);
IkReal x9938=(gconst2*x9922);
evalcond[0]=((((-1.0)*r22*x9935))+((r20*x9938))+(((-1.0)*x9931*x9936)));
evalcond[1]=(((r00*x9938))+(((-1.0)*x9925*x9936))+(((-1.0)*r02*x9935)));
evalcond[2]=((-1.0)+((r10*x9938))+(((-1.0)*x9930*x9936))+(((-1.0)*r12*x9935)));
evalcond[3]=(((r10*x9933))+(((-1.0)*cj3*r12*x9936))+((r11*x9926))+(((-1.0)*r10*x9928*x9935))+((r11*x9923*x9927)));
evalcond[4]=((((-1.0)*r11*x9928))+((x9930*x9937))+(((-1.0)*r12*sj3*x9936))+(((-1.0)*r10*x9926*x9935))+(((-1.0)*r10*x9927)));
evalcond[5]=((((-1.0)*cj3*r02*x9936))+((r00*x9933))+(((-1.0)*x9934))+(((-1.0)*r00*x9928*x9935))+((cj3*x9923*x9925))+x9924+((r01*x9926)));
evalcond[6]=(((r21*x9923*x9927))+(((-1.0)*cj3*r22*x9936))+(((-1.0)*x9932))+(((-1.0)*sj1*x9929))+((r21*x9926))+(((-1.0)*r20*x9928*x9935))+((r20*x9933)));
evalcond[7]=(((cj2*sj1))+((x9925*x9937))+(((-1.0)*r02*sj3*x9936))+(((-1.0)*r01*x9928))+(((-1.0)*r00*x9927))+x9932+(((-1.0)*r00*x9926*x9935)));
evalcond[8]=((((-1.0)*x9934))+(((-1.0)*r22*sj3*x9936))+(((-1.0)*r21*x9928))+(((-1.0)*r20*x9927))+x9924+((x9931*x9937))+(((-1.0)*r20*x9926*x9935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9939=gconst1*gconst1;
IkReal x9940=gconst2*gconst2;
IkReal x9941=(r01*r11);
IkReal x9942=(r00*r10);
IkReal x9943=(gconst2*r11);
IkReal x9944=(r02*sj3);
IkReal x9945=(r01*r10);
IkReal x9946=(gconst1*gconst2*sj3);
IkReal x9947=((1.0)*cj3*gconst1);
CheckValue<IkReal> x9948 = IKatan2WithCheck(IkReal((((x9943*x9944))+((gconst1*r10*x9944)))),IkReal((((r00*r11*sj3*x9940))+(((-1.0)*sj3*x9939*x9945))+(((-1.0)*x9941*x9946))+((x9942*x9946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9948.valid){
continue;
}
CheckValue<IkReal> x9949=IKPowWithIntegerCheck(IKsign((((cj3*x9940*x9942))+((cj3*r02*r12))+(((-1.0)*gconst2*x9945*x9947))+((cj3*x9939*x9941))+(((-1.0)*r00*x9943*x9947)))),-1);
if(!x9949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9948.value)+(((1.5707963267949)*(x9949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9950=IKsin(j4);
IkReal x9951=IKcos(j4);
IkReal x9952=(sj1*sj2);
IkReal x9953=(gconst1*r01);
IkReal x9954=(gconst2*sj3);
IkReal x9955=(cj3*gconst1);
IkReal x9956=(cj3*gconst2);
IkReal x9957=((1.0)*cj2);
IkReal x9958=(gconst1*r11);
IkReal x9959=(gconst1*r21);
IkReal x9960=(cj1*sj2);
IkReal x9961=(gconst1*sj3);
IkReal x9962=(cj1*x9957);
IkReal x9963=((1.0)*x9951);
IkReal x9964=((1.0)*x9950);
IkReal x9965=(sj3*x9951);
IkReal x9966=(gconst2*x9950);
evalcond[0]=((((-1.0)*r22*x9963))+(((-1.0)*x9959*x9964))+((r20*x9966)));
evalcond[1]=(((r00*x9966))+(((-1.0)*r02*x9963))+(((-1.0)*x9953*x9964)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x9963))+((r10*x9966))+(((-1.0)*x9958*x9964)));
evalcond[3]=((((-1.0)*cj3*r12*x9964))+((r10*x9961))+((r11*x9954))+((r11*x9951*x9955))+(((-1.0)*r10*x9956*x9963)));
evalcond[4]=((((-1.0)*r11*x9956))+((x9958*x9965))+(((-1.0)*r10*x9954*x9963))+(((-1.0)*r12*sj3*x9964))+(((-1.0)*r10*x9955)));
evalcond[5]=(((r00*x9961))+(((-1.0)*cj3*r02*x9964))+(((-1.0)*x9962))+((cj3*x9951*x9953))+(((-1.0)*r00*x9956*x9963))+x9952+((r01*x9954)));
evalcond[6]=((((-1.0)*cj3*r22*x9964))+(((-1.0)*r20*x9956*x9963))+(((-1.0)*sj1*x9957))+(((-1.0)*x9960))+((r21*x9954))+((r21*x9951*x9955))+((r20*x9961)));
evalcond[7]=((((-1.0)*r02*sj3*x9964))+((cj2*sj1))+(((-1.0)*r01*x9956))+(((-1.0)*r00*x9955))+((x9953*x9965))+x9960+(((-1.0)*r00*x9954*x9963)));
evalcond[8]=((((-1.0)*r21*x9956))+((x9959*x9965))+(((-1.0)*x9962))+(((-1.0)*r20*x9954*x9963))+(((-1.0)*r20*x9955))+(((-1.0)*r22*sj3*x9964))+x9952);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9967=((1.0)*gconst1);
CheckValue<IkReal> x9968=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9967)))),-1);
if(!x9968.valid){
continue;
}
CheckValue<IkReal> x9969 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x9967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9968.value)))+(x9969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9970=IKsin(j4);
IkReal x9971=IKcos(j4);
IkReal x9972=(sj1*sj2);
IkReal x9973=(gconst1*r01);
IkReal x9974=(gconst2*sj3);
IkReal x9975=(cj3*gconst1);
IkReal x9976=(cj3*gconst2);
IkReal x9977=((1.0)*cj2);
IkReal x9978=(gconst1*r11);
IkReal x9979=(gconst1*r21);
IkReal x9980=(cj1*sj2);
IkReal x9981=(gconst1*sj3);
IkReal x9982=(cj1*x9977);
IkReal x9983=((1.0)*x9971);
IkReal x9984=((1.0)*x9970);
IkReal x9985=(sj3*x9971);
IkReal x9986=(gconst2*x9970);
evalcond[0]=((((-1.0)*r22*x9983))+((r20*x9986))+(((-1.0)*x9979*x9984)));
evalcond[1]=(((r00*x9986))+(((-1.0)*r02*x9983))+(((-1.0)*x9973*x9984)));
evalcond[2]=((-1.0)+((r10*x9986))+(((-1.0)*x9978*x9984))+(((-1.0)*r12*x9983)));
evalcond[3]=(((r10*x9981))+(((-1.0)*cj3*r12*x9984))+((r11*x9974))+((r11*x9971*x9975))+(((-1.0)*r10*x9976*x9983)));
evalcond[4]=((((-1.0)*r11*x9976))+((x9978*x9985))+(((-1.0)*r10*x9974*x9983))+(((-1.0)*r10*x9975))+(((-1.0)*r12*sj3*x9984)));
evalcond[5]=((((-1.0)*r00*x9976*x9983))+((r00*x9981))+((cj3*x9971*x9973))+((r01*x9974))+x9972+(((-1.0)*cj3*r02*x9984))+(((-1.0)*x9982)));
evalcond[6]=((((-1.0)*cj3*r22*x9984))+((r21*x9971*x9975))+(((-1.0)*r20*x9976*x9983))+(((-1.0)*x9980))+((r21*x9974))+(((-1.0)*sj1*x9977))+((r20*x9981)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r00*x9975))+(((-1.0)*r02*sj3*x9984))+(((-1.0)*r01*x9976))+((x9973*x9985))+(((-1.0)*r00*x9974*x9983))+x9980);
evalcond[8]=((((-1.0)*r21*x9976))+((x9979*x9985))+(((-1.0)*r22*sj3*x9984))+(((-1.0)*r20*x9975))+x9972+(((-1.0)*x9982))+(((-1.0)*r20*x9974*x9983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9989 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9989.valid){
continue;
}
IkReal x9987=((-1.0)*(x9989.value));
IkReal x9988=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9987;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9987;
IkReal gconst1=((-1.0)*r21*x9988);
IkReal gconst2=(r20*x9988);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9992 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9992.valid){
continue;
}
IkReal x9990=((-1.0)*(x9992.value));
IkReal x9991=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x9990;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9990;
IkReal gconst1=((-1.0)*r21*x9991);
IkReal gconst2=(r20*x9991);
CheckValue<IkReal> x10000=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x10000.valid){
continue;
}
IkReal x9993=x10000.value;
IkReal x9994=(cj3*x9993);
IkReal x9995=(r11*x9994);
IkReal x9996=(r01*x9994);
IkReal x9997=(r00*x9994);
IkReal x9998=(r10*x9994);
IkReal x9999=(r20*r21*x9994);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*r20*r21*x9996))+((r00*r20*r21*x9995))+((r10*x9997*(r20*r20)))+((r01*x9995*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10003 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10003.valid){
continue;
}
IkReal x10001=((-1.0)*(x10003.value));
IkReal x10002=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x10001;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x10001;
IkReal gconst1=((-1.0)*r21*x10002);
IkReal gconst2=(r20*x10002);
CheckValue<IkReal> x10011=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x10011.valid){
continue;
}
IkReal x10004=x10011.value;
IkReal x10005=(sj3*x10004);
IkReal x10006=(r11*x10005);
IkReal x10007=(r00*x10005);
IkReal x10008=(r01*x10005);
IkReal x10009=(r10*x10005);
IkReal x10010=(r20*r21*x10005);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x10006))+((r10*r20*r21*x10008))+((r01*x10006*(r21*r21)))+((r10*x10007*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10014 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10014.valid){
continue;
}
IkReal x10012=((-1.0)*(x10014.value));
IkReal x10013=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x10012;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10012;
IkReal gconst1=((-1.0)*r21*x10013);
IkReal gconst2=(r20*x10013);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10017 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10017.valid){
continue;
}
IkReal x10015=((-1.0)*(x10017.value));
IkReal x10016=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x10015;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10015;
IkReal gconst1=((-1.0)*r21*x10016);
IkReal gconst2=(r20*x10016);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10020 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10020.valid){
continue;
}
IkReal x10018=((-1.0)*(x10020.value));
IkReal x10019=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x10018;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10018;
IkReal gconst1=((-1.0)*r21*x10019);
IkReal gconst2=(r20*x10019);
IkReal x10021=r22*r22;
IkReal x10022=(cj1*cj2*r02);
CheckValue<IkReal> x10027=IKPowWithIntegerCheck(((-1.0)+x10021),-1);
if(!x10027.valid){
continue;
}
IkReal x10023=x10027.value;
IkReal x10024=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x10021)))) < -0.00001)
continue;
IkReal x10025=IKsqrt(((1.0)+(((-1.0)*x10021))));
IkReal x10026=(r22*x10023*x10025);
j4eval[0]=((IKabs(((((-1.0)*x10024*x10026))+((x10022*x10026)))))+(IKabs((x10022+(((-1.0)*x10024))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10028=(gconst2*r00);
IkReal x10029=(cj1*cj2);
IkReal x10030=(gconst1*r01);
IkReal x10031=((1.0)*sj1*sj2);
CheckValue<IkReal> x10032=IKPowWithIntegerCheck(IKsign(((x10028*x10028)+(((-2.0)*x10028*x10030))+(x10030*x10030)+(r02*r02))),-1);
if(!x10032.valid){
continue;
}
CheckValue<IkReal> x10033 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x10031))+((r02*x10029)))),IkReal((((sj1*sj2*x10030))+((x10028*x10029))+(((-1.0)*x10028*x10031))+(((-1.0)*x10029*x10030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10032.value)))+(x10033.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10034=IKsin(j4);
IkReal x10035=IKcos(j4);
IkReal x10036=(gconst1*r01);
IkReal x10037=(gconst1*r21);
IkReal x10038=((1.0)*sj1);
IkReal x10039=(gconst1*r11);
IkReal x10040=((1.0)*x10035);
IkReal x10041=((1.0)*x10034);
IkReal x10042=(gconst2*x10034);
evalcond[0]=((((-1.0)*x10037*x10041))+(((-1.0)*r22*x10040))+((r20*x10042)));
evalcond[1]=((((-1.0)*r02*x10040))+(((-1.0)*x10036*x10041))+((r00*x10042)));
evalcond[2]=((((-1.0)*gconst2*r10*x10040))+((x10035*x10039))+(((-1.0)*r12*x10041)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10040))+((r10*x10042))+(((-1.0)*x10039*x10041)));
evalcond[4]=((((-1.0)*r02*x10041))+((x10035*x10036))+(((-1.0)*gconst2*r00*x10040))+((cj1*cj2))+(((-1.0)*sj2*x10038)));
evalcond[5]=((((-1.0)*cj2*x10038))+((x10035*x10037))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x10041))+(((-1.0)*gconst2*r20*x10040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10043=(gconst2*r10);
IkReal x10044=(gconst1*r11);
CheckValue<IkReal> x10045 = IKatan2WithCheck(IkReal(((((-1.0)*x10043))+x10044)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10045.valid){
continue;
}
CheckValue<IkReal> x10046=IKPowWithIntegerCheck(IKsign(((x10043*x10043)+(r12*r12)+(x10044*x10044)+(((-2.0)*x10043*x10044)))),-1);
if(!x10046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10045.value)+(((1.5707963267949)*(x10046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10047=IKsin(j4);
IkReal x10048=IKcos(j4);
IkReal x10049=(gconst1*r01);
IkReal x10050=(gconst1*r21);
IkReal x10051=((1.0)*sj1);
IkReal x10052=(gconst1*r11);
IkReal x10053=((1.0)*x10048);
IkReal x10054=((1.0)*x10047);
IkReal x10055=(gconst2*x10047);
evalcond[0]=(((r20*x10055))+(((-1.0)*x10050*x10054))+(((-1.0)*r22*x10053)));
evalcond[1]=(((r00*x10055))+(((-1.0)*x10049*x10054))+(((-1.0)*r02*x10053)));
evalcond[2]=((((-1.0)*gconst2*r10*x10053))+(((-1.0)*r12*x10054))+((x10048*x10052)));
evalcond[3]=((1.0)+((r10*x10055))+(((-1.0)*r12*x10053))+(((-1.0)*x10052*x10054)));
evalcond[4]=(((x10048*x10049))+(((-1.0)*sj2*x10051))+(((-1.0)*gconst2*r00*x10053))+((cj1*cj2))+(((-1.0)*r02*x10054)));
evalcond[5]=((((-1.0)*cj2*x10051))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x10054))+(((-1.0)*gconst2*r20*x10053))+((x10048*x10050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10056 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10056.valid){
continue;
}
CheckValue<IkReal> x10057=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10056.value)+(((1.5707963267949)*(x10057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10058=IKsin(j4);
IkReal x10059=IKcos(j4);
IkReal x10060=(gconst1*r01);
IkReal x10061=(gconst1*r21);
IkReal x10062=((1.0)*sj1);
IkReal x10063=(gconst1*r11);
IkReal x10064=((1.0)*x10059);
IkReal x10065=((1.0)*x10058);
IkReal x10066=(gconst2*x10058);
evalcond[0]=(((r20*x10066))+(((-1.0)*x10061*x10065))+(((-1.0)*r22*x10064)));
evalcond[1]=(((r00*x10066))+(((-1.0)*x10060*x10065))+(((-1.0)*r02*x10064)));
evalcond[2]=((((-1.0)*gconst2*r10*x10064))+(((-1.0)*r12*x10065))+((x10059*x10063)));
evalcond[3]=((1.0)+((r10*x10066))+(((-1.0)*r12*x10064))+(((-1.0)*x10063*x10065)));
evalcond[4]=((((-1.0)*gconst2*r00*x10064))+(((-1.0)*sj2*x10062))+((cj1*cj2))+((x10059*x10060))+(((-1.0)*r02*x10065)));
evalcond[5]=((((-1.0)*cj2*x10062))+(((-1.0)*cj1*sj2))+((x10059*x10061))+(((-1.0)*r22*x10065))+(((-1.0)*gconst2*r20*x10064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10069 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10069.valid){
continue;
}
IkReal x10067=((-1.0)*(x10069.value));
IkReal x10068=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x10067;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10067;
IkReal gconst1=((-1.0)*r21*x10068);
IkReal gconst2=(r20*x10068);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10072 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10072.valid){
continue;
}
IkReal x10070=((-1.0)*(x10072.value));
IkReal x10071=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x10070;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10070;
IkReal gconst1=((-1.0)*r21*x10071);
IkReal gconst2=(r20*x10071);
IkReal x10073=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10077=IKPowWithIntegerCheck(x10073,-1);
if(!x10077.valid){
continue;
}
IkReal x10074=x10077.value;
IkReal x10075=((1.0)*x10074);
IkReal x10076=((((-1.0)*x10075*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10074))+(((-1.0)*(r12*r12)))+(((-1.0)*x10075*(r10*r10)*(r20*r20))));
j4eval[0]=x10076;
j4eval[1]=IKsign(x10076);
j4eval[2]=r12;
j4eval[3]=x10073;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10080 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10080.valid){
continue;
}
IkReal x10078=((-1.0)*(x10080.value));
IkReal x10079=x8388;
sj5=gconst1;
cj5=gconst2;
j5=x10078;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10078;
IkReal gconst1=((-1.0)*r21*x10079);
IkReal gconst2=(r20*x10079);
IkReal x10081=r22*r22;
IkReal x10082=(cj1*r12*sj2);
IkReal x10083=(cj2*r12*sj1);
CheckValue<IkReal> x10087=IKPowWithIntegerCheck(((-1.0)+x10081),-1);
if(!x10087.valid){
continue;
}
IkReal x10084=x10087.value;
if((((1.0)+(((-1.0)*x10081)))) < -0.00001)
continue;
IkReal x10085=IKsqrt(((1.0)+(((-1.0)*x10081))));
IkReal x10086=((1.0)*r22*x10084*x10085);
j4eval[0]=((IKabs((x10082+x10083)))+(IKabs(((((-1.0)*x10082*x10086))+(((-1.0)*x10083*x10086))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10088=(cj1*sj2);
IkReal x10089=(cj2*sj1);
IkReal x10090=(gconst1*r11);
IkReal x10091=((1.0)*gconst2*r10);
CheckValue<IkReal> x10092=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10092.valid){
continue;
}
CheckValue<IkReal> x10093 = IKatan2WithCheck(IkReal(((((-1.0)*x10088*x10091))+((x10089*x10090))+((x10088*x10090))+(((-1.0)*x10089*x10091)))),IkReal((((r12*x10088))+((r12*x10089)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10092.value)))+(x10093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10094=IKcos(j4);
IkReal x10095=IKsin(j4);
IkReal x10096=(gconst1*r01);
IkReal x10097=((1.0)*sj1);
IkReal x10098=(gconst1*r21);
IkReal x10099=(gconst1*r11);
IkReal x10100=((1.0)*x10094);
IkReal x10101=(gconst2*x10094);
IkReal x10102=((1.0)*x10095);
IkReal x10103=(gconst2*x10095);
evalcond[0]=(((r12*x10095))+((r10*x10101))+(((-1.0)*x10099*x10100)));
evalcond[1]=(((r20*x10103))+(((-1.0)*r22*x10100))+(((-1.0)*x10098*x10102)));
evalcond[2]=(((r00*x10103))+(((-1.0)*r02*x10100))+(((-1.0)*x10096*x10102)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10100))+((r10*x10103))+(((-1.0)*x10099*x10102)));
evalcond[4]=(((r00*x10101))+((r02*x10095))+(((-1.0)*sj2*x10097))+((cj1*cj2))+(((-1.0)*x10096*x10100)));
evalcond[5]=(((r20*x10101))+(((-1.0)*cj2*x10097))+(((-1.0)*cj1*sj2))+((r22*x10095))+(((-1.0)*x10098*x10100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10104=(gconst1*r11);
IkReal x10105=(gconst2*r10);
CheckValue<IkReal> x10106 = IKatan2WithCheck(IkReal(((((-1.0)*x10104))+x10105)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10106.valid){
continue;
}
CheckValue<IkReal> x10107=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10104*x10104)))+(((-1.0)*(x10105*x10105)))+(((2.0)*x10104*x10105))+(((-1.0)*(r12*r12))))),-1);
if(!x10107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10106.value)+(((1.5707963267949)*(x10107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10108=IKcos(j4);
IkReal x10109=IKsin(j4);
IkReal x10110=(gconst1*r01);
IkReal x10111=((1.0)*sj1);
IkReal x10112=(gconst1*r21);
IkReal x10113=(gconst1*r11);
IkReal x10114=((1.0)*x10108);
IkReal x10115=(gconst2*x10108);
IkReal x10116=((1.0)*x10109);
IkReal x10117=(gconst2*x10109);
evalcond[0]=((((-1.0)*x10113*x10114))+((r12*x10109))+((r10*x10115)));
evalcond[1]=((((-1.0)*x10112*x10116))+((r20*x10117))+(((-1.0)*r22*x10114)));
evalcond[2]=((((-1.0)*x10110*x10116))+((r00*x10117))+(((-1.0)*r02*x10114)));
evalcond[3]=((1.0)+(((-1.0)*x10113*x10116))+(((-1.0)*r12*x10114))+((r10*x10117)));
evalcond[4]=((((-1.0)*x10110*x10114))+((r00*x10115))+((r02*x10109))+((cj1*cj2))+(((-1.0)*sj2*x10111)));
evalcond[5]=((((-1.0)*x10112*x10114))+((r20*x10115))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x10111))+((r22*x10109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10118 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10118.valid){
continue;
}
CheckValue<IkReal> x10119=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10118.value)+(((1.5707963267949)*(x10119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10120=IKcos(j4);
IkReal x10121=IKsin(j4);
IkReal x10122=(gconst1*r01);
IkReal x10123=((1.0)*sj1);
IkReal x10124=(gconst1*r21);
IkReal x10125=(gconst1*r11);
IkReal x10126=((1.0)*x10120);
IkReal x10127=(gconst2*x10120);
IkReal x10128=((1.0)*x10121);
IkReal x10129=(gconst2*x10121);
evalcond[0]=(((r10*x10127))+(((-1.0)*x10125*x10126))+((r12*x10121)));
evalcond[1]=(((r20*x10129))+(((-1.0)*x10124*x10128))+(((-1.0)*r22*x10126)));
evalcond[2]=((((-1.0)*r02*x10126))+((r00*x10129))+(((-1.0)*x10122*x10128)));
evalcond[3]=((1.0)+((r10*x10129))+(((-1.0)*x10125*x10128))+(((-1.0)*r12*x10126)));
evalcond[4]=(((r02*x10121))+((r00*x10127))+(((-1.0)*sj2*x10123))+(((-1.0)*x10122*x10126))+((cj1*cj2)));
evalcond[5]=(((r20*x10127))+(((-1.0)*cj2*x10123))+(((-1.0)*cj1*sj2))+((r22*x10121))+(((-1.0)*x10124*x10126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10130=((-1.0)*px);
CheckValue<IkReal> x10132 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10132.valid){
continue;
}
IkReal x10131=((-1.0)*(x10132.value));
sj5=gconst1;
cj5=gconst2;
j5=x10131;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10130);
rxp1_1=(px*r21);
rxp1_2=(r11*x10130);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10131;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10133=((1.0)*sj3);
IkReal x10134=(r11*r21);
IkReal x10135=(r10*r20);
j4eval[0]=(x10134+x10135);
j4eval[1]=((((-1.0)*x10133*x10135))+(((-1.0)*x10133*x10134)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10136=((-1.0)*px);
CheckValue<IkReal> x10138 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10138.valid){
continue;
}
IkReal x10137=((-1.0)*(x10138.value));
sj5=gconst1;
cj5=gconst2;
j5=x10137;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10136);
rxp1_1=(px*r21);
rxp1_2=(r11*x10136);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10137;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10139=(r10*r20);
IkReal x10140=((1.0)*cj3);
IkReal x10141=(r11*r21);
j4eval[0]=(x10139+x10141);
j4eval[1]=((((-1.0)*x10139*x10140))+(((-1.0)*x10140*x10141)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10142=((-1.0)*px);
CheckValue<IkReal> x10144 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10144.valid){
continue;
}
IkReal x10143=((-1.0)*(x10144.value));
sj5=gconst1;
cj5=gconst2;
j5=x10143;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10142);
rxp1_1=(px*r21);
rxp1_2=(r11*x10142);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10143;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10145=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10145))+(((-1.0)*r11*r21*x10145)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10146=((1.0)*gconst2);
CheckValue<IkReal> x10147=IKPowWithIntegerCheck(cj3,-1);
if(!x10147.valid){
continue;
}
CheckValue<IkReal> x10148=IKPowWithIntegerCheck(r02,-1);
if(!x10148.valid){
continue;
}
CheckValue<IkReal> x10149=IKPowWithIntegerCheck(((((-1.0)*cj3*r10*x10146))+((cj3*gconst1*r11))),-1);
if(!x10149.valid){
continue;
}
if( IKabs(((x10147.value)*(x10148.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10149.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x10146)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10147.value)*(x10148.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x10149.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x10146))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10147.value)*(x10148.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x10149.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x10146))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10150=IKsin(j4);
IkReal x10151=IKcos(j4);
IkReal x10152=(sj1*sj2);
IkReal x10153=((1.0)*cj3);
IkReal x10154=(gconst1*r10);
IkReal x10155=((1.0)*cj2);
IkReal x10156=(gconst2*r21);
IkReal x10157=(gconst1*sj3);
IkReal x10158=(gconst2*r11);
IkReal x10159=(cj3*gconst1);
IkReal x10160=((1.0)*sj3);
IkReal x10161=((1.0)*cj1*sj2);
IkReal x10162=(sj1*x10155);
IkReal x10163=(gconst2*x10150);
IkReal x10164=(gconst2*x10151);
IkReal x10165=(r11*x10151);
IkReal x10166=(r02*x10150);
IkReal x10167=(r21*x10151);
IkReal x10168=((1.0)*gconst1*x10150);
IkReal x10169=(x10161+x10162);
evalcond[0]=((-1.0)*r02*x10151);
evalcond[1]=((((-1.0)*r21*x10168))+((r20*x10163)));
evalcond[2]=((1.0)+((r10*x10163))+(((-1.0)*r11*x10168)));
evalcond[3]=(((cj1*cj2))+(((-1.0)*x10153*x10166))+(((-1.0)*x10152)));
evalcond[4]=((((-1.0)*x10169))+(((-1.0)*x10160*x10166)));
evalcond[5]=((((-1.0)*r10*x10153*x10164))+((x10159*x10165))+((sj3*x10154))+((sj3*x10158)));
evalcond[6]=((((-1.0)*x10153*x10154))+(((-1.0)*x10153*x10158))+(((-1.0)*r10*x10160*x10164))+((x10157*x10165)));
evalcond[7]=((((-1.0)*x10169))+(((-1.0)*r20*x10153*x10164))+((x10159*x10167))+((sj3*x10156))+((r20*x10157)));
evalcond[8]=((((-1.0)*x10153*x10156))+((x10157*x10167))+(((-1.0)*cj1*x10155))+(((-1.0)*gconst1*r20*x10153))+x10152+(((-1.0)*r20*x10160*x10164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10170=((1.0)*r11);
IkReal x10171=(gconst2*r10);
CheckValue<IkReal> x10172=IKPowWithIntegerCheck((x10171+(((-1.0)*gconst1*x10170))),-1);
if(!x10172.valid){
continue;
}
CheckValue<IkReal> x10173=IKPowWithIntegerCheck(((((-1.0)*cj3*x10171))+((cj3*gconst1*r11))),-1);
if(!x10173.valid){
continue;
}
if( IKabs(((-1.0)*(x10172.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10173.value)*(((((-1.0)*gconst2*sj3*x10170))+(((-1.0)*gconst1*r10*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10172.value)))+IKsqr(((x10173.value)*(((((-1.0)*gconst2*sj3*x10170))+(((-1.0)*gconst1*r10*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10172.value)), ((x10173.value)*(((((-1.0)*gconst2*sj3*x10170))+(((-1.0)*gconst1*r10*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10174=IKsin(j4);
IkReal x10175=IKcos(j4);
IkReal x10176=(sj1*sj2);
IkReal x10177=((1.0)*cj3);
IkReal x10178=(gconst1*r10);
IkReal x10179=((1.0)*cj2);
IkReal x10180=(gconst2*r21);
IkReal x10181=(gconst1*sj3);
IkReal x10182=(gconst2*r11);
IkReal x10183=(cj3*gconst1);
IkReal x10184=((1.0)*sj3);
IkReal x10185=((1.0)*cj1*sj2);
IkReal x10186=(sj1*x10179);
IkReal x10187=(gconst2*x10174);
IkReal x10188=(gconst2*x10175);
IkReal x10189=(r11*x10175);
IkReal x10190=(r02*x10174);
IkReal x10191=(r21*x10175);
IkReal x10192=((1.0)*gconst1*x10174);
IkReal x10193=(x10186+x10185);
evalcond[0]=((-1.0)*r02*x10175);
evalcond[1]=((((-1.0)*r21*x10192))+((r20*x10187)));
evalcond[2]=((1.0)+((r10*x10187))+(((-1.0)*r11*x10192)));
evalcond[3]=((((-1.0)*x10176))+((cj1*cj2))+(((-1.0)*x10177*x10190)));
evalcond[4]=((((-1.0)*x10184*x10190))+(((-1.0)*x10193)));
evalcond[5]=(((sj3*x10182))+((sj3*x10178))+(((-1.0)*r10*x10177*x10188))+((x10183*x10189)));
evalcond[6]=((((-1.0)*x10177*x10178))+((x10181*x10189))+(((-1.0)*r10*x10184*x10188))+(((-1.0)*x10177*x10182)));
evalcond[7]=((((-1.0)*r20*x10177*x10188))+((sj3*x10180))+(((-1.0)*x10193))+((x10183*x10191))+((r20*x10181)));
evalcond[8]=((((-1.0)*cj1*x10179))+((x10181*x10191))+(((-1.0)*r20*x10184*x10188))+x10176+(((-1.0)*x10177*x10180))+(((-1.0)*gconst1*r20*x10177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10194=(gconst1*r11);
IkReal x10195=(gconst2*r10);
CheckValue<IkReal> x10196=IKPowWithIntegerCheck((x10195+(((-1.0)*x10194))),-1);
if(!x10196.valid){
continue;
}
CheckValue<IkReal> x10197=IKPowWithIntegerCheck(((((-1.0)*sj3*x10195))+((sj3*x10194))),-1);
if(!x10197.valid){
continue;
}
if( IKabs(((-1.0)*(x10196.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10197.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10196.value)))+IKsqr(((x10197.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10196.value)), ((x10197.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10198=IKsin(j4);
IkReal x10199=IKcos(j4);
IkReal x10200=(sj1*sj2);
IkReal x10201=((1.0)*cj3);
IkReal x10202=(gconst1*r10);
IkReal x10203=((1.0)*cj2);
IkReal x10204=(gconst2*r21);
IkReal x10205=(gconst1*sj3);
IkReal x10206=(gconst2*r11);
IkReal x10207=(cj3*gconst1);
IkReal x10208=((1.0)*sj3);
IkReal x10209=((1.0)*cj1*sj2);
IkReal x10210=(sj1*x10203);
IkReal x10211=(gconst2*x10198);
IkReal x10212=(gconst2*x10199);
IkReal x10213=(r11*x10199);
IkReal x10214=(r02*x10198);
IkReal x10215=(r21*x10199);
IkReal x10216=((1.0)*gconst1*x10198);
IkReal x10217=(x10210+x10209);
evalcond[0]=((-1.0)*r02*x10199);
evalcond[1]=((((-1.0)*r21*x10216))+((r20*x10211)));
evalcond[2]=((1.0)+((r10*x10211))+(((-1.0)*r11*x10216)));
evalcond[3]=((((-1.0)*x10200))+((cj1*cj2))+(((-1.0)*x10201*x10214)));
evalcond[4]=((((-1.0)*x10217))+(((-1.0)*x10208*x10214)));
evalcond[5]=(((sj3*x10206))+((sj3*x10202))+((x10207*x10213))+(((-1.0)*r10*x10201*x10212)));
evalcond[6]=((((-1.0)*r10*x10208*x10212))+((x10205*x10213))+(((-1.0)*x10201*x10202))+(((-1.0)*x10201*x10206)));
evalcond[7]=(((sj3*x10204))+(((-1.0)*x10217))+(((-1.0)*r20*x10201*x10212))+((x10207*x10215))+((r20*x10205)));
evalcond[8]=((((-1.0)*cj1*x10203))+(((-1.0)*gconst1*r20*x10201))+((x10205*x10215))+(((-1.0)*r20*x10208*x10212))+x10200+(((-1.0)*x10201*x10204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10218=gconst2*gconst2;
IkReal x10219=gconst1*gconst1;
IkReal x10220=(r11*sj3);
IkReal x10221=(gconst1*gconst2);
IkReal x10222=((1.0)*r00);
IkReal x10223=(cj3*r11);
IkReal x10224=(cj3*r10);
IkReal x10225=((1.0)*r02);
IkReal x10226=(r10*sj3);
IkReal x10227=(r01*x10219);
CheckValue<IkReal> x10228 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x10223*x10225))+(((-1.0)*gconst1*x10224*x10225)))),IkReal(((((-1.0)*x10221*x10222*x10224))+(((-1.0)*x10218*x10222*x10223))+((x10224*x10227))+((r01*x10221*x10223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10228.valid){
continue;
}
CheckValue<IkReal> x10229=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x10218*x10226))+(((-1.0)*r01*x10221*x10226))+((x10220*x10227))+(((-1.0)*x10220*x10221*x10222)))),-1);
if(!x10229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10228.value)+(((1.5707963267949)*(x10229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10230=IKsin(j4);
IkReal x10231=IKcos(j4);
IkReal x10232=(gconst1*r01);
IkReal x10233=(gconst2*sj3);
IkReal x10234=(sj1*sj2);
IkReal x10235=(cj3*gconst1);
IkReal x10236=(cj3*gconst2);
IkReal x10237=((1.0)*cj2);
IkReal x10238=(gconst1*r11);
IkReal x10239=(gconst1*r21);
IkReal x10240=(gconst1*sj3);
IkReal x10241=((1.0)*cj1*sj2);
IkReal x10242=(sj1*x10237);
IkReal x10243=((1.0)*x10231);
IkReal x10244=((1.0)*x10230);
IkReal x10245=(sj3*x10231);
IkReal x10246=(gconst2*x10230);
IkReal x10247=(x10241+x10242);
evalcond[0]=((((-1.0)*r22*x10243))+((r20*x10246))+(((-1.0)*x10239*x10244)));
evalcond[1]=((((-1.0)*x10232*x10244))+((r00*x10246))+(((-1.0)*r02*x10243)));
evalcond[2]=((1.0)+((r10*x10246))+(((-1.0)*x10238*x10244))+(((-1.0)*r12*x10243)));
evalcond[3]=(((r10*x10240))+(((-1.0)*cj3*r12*x10244))+((r11*x10231*x10235))+(((-1.0)*r10*x10236*x10243))+((r11*x10233)));
evalcond[4]=((((-1.0)*r10*x10235))+(((-1.0)*r10*x10233*x10243))+((x10238*x10245))+(((-1.0)*r11*x10236))+(((-1.0)*r12*sj3*x10244)));
evalcond[5]=((((-1.0)*cj3*r02*x10244))+((cj3*x10231*x10232))+(((-1.0)*x10234))+(((-1.0)*r00*x10236*x10243))+((cj1*cj2))+((r01*x10233))+((r00*x10240)));
evalcond[6]=(((r21*x10231*x10235))+(((-1.0)*r20*x10236*x10243))+(((-1.0)*cj3*r22*x10244))+((r21*x10233))+(((-1.0)*x10247))+((r20*x10240)));
evalcond[7]=(((x10239*x10245))+(((-1.0)*cj1*x10237))+(((-1.0)*r20*x10235))+(((-1.0)*r20*x10233*x10243))+(((-1.0)*r21*x10236))+(((-1.0)*r22*sj3*x10244))+x10234);
evalcond[8]=((((-1.0)*r01*x10236))+(((-1.0)*r00*x10233*x10243))+(((-1.0)*r02*sj3*x10244))+(((-1.0)*x10247))+((x10232*x10245))+(((-1.0)*r00*x10235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10248=gconst1*gconst1;
IkReal x10249=gconst2*gconst2;
IkReal x10250=(r01*r11);
IkReal x10251=(r00*r10);
IkReal x10252=(gconst2*r11);
IkReal x10253=(r02*sj3);
IkReal x10254=(r01*r10);
IkReal x10255=(gconst1*gconst2*sj3);
IkReal x10256=((1.0)*cj3*gconst1);
CheckValue<IkReal> x10257=IKPowWithIntegerCheck(IKsign((((cj3*x10249*x10251))+((cj3*r02*r12))+((cj3*x10248*x10250))+(((-1.0)*gconst2*x10254*x10256))+(((-1.0)*r00*x10252*x10256)))),-1);
if(!x10257.valid){
continue;
}
CheckValue<IkReal> x10258 = IKatan2WithCheck(IkReal((((gconst1*r10*x10253))+((x10252*x10253)))),IkReal((((r00*r11*sj3*x10249))+(((-1.0)*x10250*x10255))+(((-1.0)*sj3*x10248*x10254))+((x10251*x10255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10257.value)))+(x10258.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10259=IKsin(j4);
IkReal x10260=IKcos(j4);
IkReal x10261=(gconst1*r01);
IkReal x10262=(gconst2*sj3);
IkReal x10263=(sj1*sj2);
IkReal x10264=(cj3*gconst1);
IkReal x10265=(cj3*gconst2);
IkReal x10266=((1.0)*cj2);
IkReal x10267=(gconst1*r11);
IkReal x10268=(gconst1*r21);
IkReal x10269=(gconst1*sj3);
IkReal x10270=((1.0)*cj1*sj2);
IkReal x10271=(sj1*x10266);
IkReal x10272=((1.0)*x10260);
IkReal x10273=((1.0)*x10259);
IkReal x10274=(sj3*x10260);
IkReal x10275=(gconst2*x10259);
IkReal x10276=(x10271+x10270);
evalcond[0]=((((-1.0)*x10268*x10273))+((r20*x10275))+(((-1.0)*r22*x10272)));
evalcond[1]=(((r00*x10275))+(((-1.0)*x10261*x10273))+(((-1.0)*r02*x10272)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10272))+((r10*x10275))+(((-1.0)*x10267*x10273)));
evalcond[3]=(((r11*x10260*x10264))+(((-1.0)*cj3*r12*x10273))+((r11*x10262))+(((-1.0)*r10*x10265*x10272))+((r10*x10269)));
evalcond[4]=((((-1.0)*r11*x10265))+(((-1.0)*r12*sj3*x10273))+(((-1.0)*r10*x10264))+((x10267*x10274))+(((-1.0)*r10*x10262*x10272)));
evalcond[5]=(((cj3*x10260*x10261))+(((-1.0)*x10263))+((r00*x10269))+(((-1.0)*r00*x10265*x10272))+((r01*x10262))+((cj1*cj2))+(((-1.0)*cj3*r02*x10273)));
evalcond[6]=((((-1.0)*cj3*r22*x10273))+(((-1.0)*r20*x10265*x10272))+(((-1.0)*x10276))+((r20*x10269))+((r21*x10262))+((r21*x10260*x10264)));
evalcond[7]=((((-1.0)*r21*x10265))+(((-1.0)*r22*sj3*x10273))+(((-1.0)*r20*x10262*x10272))+x10263+(((-1.0)*cj1*x10266))+(((-1.0)*r20*x10264))+((x10268*x10274)));
evalcond[8]=((((-1.0)*x10276))+((x10261*x10274))+(((-1.0)*r00*x10264))+(((-1.0)*r01*x10265))+(((-1.0)*r00*x10262*x10272))+(((-1.0)*r02*sj3*x10273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10277 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10277.valid){
continue;
}
CheckValue<IkReal> x10278=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10277.value)+(((1.5707963267949)*(x10278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10279=IKsin(j4);
IkReal x10280=IKcos(j4);
IkReal x10281=(gconst1*r01);
IkReal x10282=(gconst2*sj3);
IkReal x10283=(sj1*sj2);
IkReal x10284=(cj3*gconst1);
IkReal x10285=(cj3*gconst2);
IkReal x10286=((1.0)*cj2);
IkReal x10287=(gconst1*r11);
IkReal x10288=(gconst1*r21);
IkReal x10289=(gconst1*sj3);
IkReal x10290=((1.0)*cj1*sj2);
IkReal x10291=(sj1*x10286);
IkReal x10292=((1.0)*x10280);
IkReal x10293=((1.0)*x10279);
IkReal x10294=(sj3*x10280);
IkReal x10295=(gconst2*x10279);
IkReal x10296=(x10291+x10290);
evalcond[0]=(((r20*x10295))+(((-1.0)*r22*x10292))+(((-1.0)*x10288*x10293)));
evalcond[1]=((((-1.0)*x10281*x10293))+(((-1.0)*r02*x10292))+((r00*x10295)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10292))+((r10*x10295))+(((-1.0)*x10287*x10293)));
evalcond[3]=(((r11*x10280*x10284))+((r11*x10282))+(((-1.0)*cj3*r12*x10293))+((r10*x10289))+(((-1.0)*r10*x10285*x10292)));
evalcond[4]=((((-1.0)*r12*sj3*x10293))+(((-1.0)*r10*x10282*x10292))+(((-1.0)*r10*x10284))+(((-1.0)*r11*x10285))+((x10287*x10294)));
evalcond[5]=(((r01*x10282))+(((-1.0)*r00*x10285*x10292))+((cj3*x10280*x10281))+(((-1.0)*x10283))+((cj1*cj2))+(((-1.0)*cj3*r02*x10293))+((r00*x10289)));
evalcond[6]=(((r21*x10280*x10284))+((r20*x10289))+(((-1.0)*cj3*r22*x10293))+(((-1.0)*r20*x10285*x10292))+((r21*x10282))+(((-1.0)*x10296)));
evalcond[7]=((((-1.0)*r20*x10284))+((x10288*x10294))+(((-1.0)*r22*sj3*x10293))+(((-1.0)*r21*x10285))+(((-1.0)*r20*x10282*x10292))+(((-1.0)*cj1*x10286))+x10283);
evalcond[8]=(((x10281*x10294))+(((-1.0)*r01*x10285))+(((-1.0)*r02*sj3*x10293))+(((-1.0)*r00*x10284))+(((-1.0)*r00*x10282*x10292))+(((-1.0)*x10296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10297=((-1.0)*py);
CheckValue<IkReal> x10299 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10299.valid){
continue;
}
IkReal x10298=((-1.0)*(x10299.value));
sj5=gconst1;
cj5=gconst2;
j5=x10298;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10297);
rxp0_2=(py*r00);
rxp1_0=(r21*x10297);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x10298;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10300=((-1.0)*py);
CheckValue<IkReal> x10302 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10302.valid){
continue;
}
IkReal x10301=((-1.0)*(x10302.value));
sj5=gconst1;
cj5=gconst2;
j5=x10301;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10300);
rxp0_2=(py*r00);
rxp1_0=(r21*x10300);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x10301;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10303=((1.0)*cj3);
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=(((cj3*(r00*r00)))+(((-1.0)*x10303))+(((-1.0)*x10303*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10304=((-1.0)*py);
CheckValue<IkReal> x10306 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10306.valid){
continue;
}
IkReal x10305=((-1.0)*(x10306.value));
sj5=gconst1;
cj5=gconst2;
j5=x10305;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10304);
rxp0_2=(py*r00);
rxp1_0=(r21*x10304);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x10305;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10307=((-1.0)*py);
CheckValue<IkReal> x10309 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10309.valid){
continue;
}
IkReal x10308=((-1.0)*(x10309.value));
sj5=gconst1;
cj5=gconst2;
j5=x10308;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10307);
rxp0_2=(py*r00);
rxp1_0=(r21*x10307);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10308;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10310=((-1.0)*py);
CheckValue<IkReal> x10312 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10312.valid){
continue;
}
IkReal x10311=((-1.0)*(x10312.value));
sj5=gconst1;
cj5=gconst2;
j5=x10311;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10310);
rxp0_2=(py*r00);
rxp1_0=(r21*x10310);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10311;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10313=((-1.0)*py);
CheckValue<IkReal> x10315 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10315.valid){
continue;
}
IkReal x10314=((-1.0)*(x10315.value));
sj5=gconst1;
cj5=gconst2;
j5=x10314;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10313);
rxp0_2=(py*r00);
rxp1_0=(r21*x10313);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10314;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10318=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x10318.valid){
continue;
}
IkReal x10316=x10318.value;
IkReal x10317=(cj0*x10316);
cj4array[0]=(((cj1*cj2*x10317))+(((-1.0)*sj1*sj2*x10317)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10319=IKsin(j4);
IkReal x10320=IKcos(j4);
IkReal x10321=(gconst2*x10319);
IkReal x10322=((1.0)*x10320);
IkReal x10323=((1.0)*gconst1*x10319);
evalcond[0]=((-1.0)*r12*x10319);
evalcond[1]=((((-1.0)*r12*x10322))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x10321))+(((-1.0)*r21*x10323)));
evalcond[3]=(((r00*x10321))+(((-1.0)*r01*x10323)));
evalcond[4]=((((-1.0)*gconst2*r20*x10322))+((gconst1*r21*x10320))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10325=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x10325.valid){
continue;
}
IkReal x10324=x10325.value;
cj4array[0]=(((cj1*sj2*x10324))+((cj2*sj1*x10324)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10326=IKsin(j4);
IkReal x10327=IKcos(j4);
IkReal x10328=(gconst2*r00);
IkReal x10329=((1.0)*cj0);
IkReal x10330=((1.0)*x10327);
IkReal x10331=((1.0)*gconst1*x10326);
evalcond[0]=((-1.0)*r12*x10326);
evalcond[1]=((((-1.0)*r12*x10330))+(((-1.0)*x10329)));
evalcond[2]=(((gconst2*r20*x10326))+(((-1.0)*r21*x10331)));
evalcond[3]=((((-1.0)*r01*x10331))+((x10326*x10328)));
evalcond[4]=((((-1.0)*x10328*x10330))+((gconst1*r01*x10327))+(((-1.0)*cj1*cj2*x10329))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10332=IKPowWithIntegerCheck(r12,-1);
if(!x10332.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x10332.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10333=IKsin(j4);
IkReal x10334=IKcos(j4);
IkReal x10335=(gconst1*r01);
IkReal x10336=(gconst1*r21);
IkReal x10337=(gconst2*r00);
IkReal x10338=((1.0)*cj2);
IkReal x10339=(gconst2*r20);
IkReal x10340=((1.0)*x10333);
IkReal x10341=((1.0)*x10334);
evalcond[0]=((-1.0)*r12*x10333);
evalcond[1]=((((-1.0)*x10336*x10340))+((x10333*x10339)));
evalcond[2]=((((-1.0)*x10335*x10340))+((x10333*x10337)));
evalcond[3]=((((-1.0)*x10339*x10341))+(((-1.0)*sj1*x10338))+(((-1.0)*cj1*sj2))+((x10334*x10336)));
evalcond[4]=((((-1.0)*x10337*x10341))+(((-1.0)*cj0*cj1*x10338))+((cj0*sj1*sj2))+((x10334*x10335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10342=((-1.0)*py);
CheckValue<IkReal> x10344 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10344.valid){
continue;
}
IkReal x10343=((-1.0)*(x10344.value));
sj5=gconst1;
cj5=gconst2;
j5=x10343;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10342);
rxp0_2=(py*r00);
rxp1_0=(r21*x10342);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10343;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10345=((-1.0)*py);
CheckValue<IkReal> x10347 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10347.valid){
continue;
}
IkReal x10346=((-1.0)*(x10347.value));
sj5=gconst1;
cj5=gconst2;
j5=x10346;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10345);
rxp0_2=(py*r00);
rxp1_0=(r21*x10345);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10346;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10348=((-1.0)*py);
CheckValue<IkReal> x10350 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10350.valid){
continue;
}
IkReal x10349=((-1.0)*(x10350.value));
sj5=gconst1;
cj5=gconst2;
j5=x10349;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10348);
rxp0_2=(py*r00);
rxp1_0=(r21*x10348);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10349;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10353=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x10353.valid){
continue;
}
IkReal x10351=x10353.value;
IkReal x10352=(cj0*x10351);
cj4array[0]=((((-1.0)*sj1*sj2*x10352))+((cj1*cj2*x10352)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10354=IKsin(j4);
IkReal x10355=IKcos(j4);
IkReal x10356=(gconst2*x10354);
IkReal x10357=((1.0)*x10355);
IkReal x10358=((1.0)*gconst1*x10354);
evalcond[0]=(r12*x10354);
evalcond[1]=((((-1.0)*r12*x10357))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x10356))+(((-1.0)*r21*x10358)));
evalcond[3]=(((r00*x10356))+(((-1.0)*r01*x10358)));
evalcond[4]=((((-1.0)*gconst1*r21*x10357))+(((-1.0)*cj2*sj1))+((gconst2*r20*x10355))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10360=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x10360.valid){
continue;
}
IkReal x10359=x10360.value;
cj4array[0]=(((cj2*sj1*x10359))+((cj1*sj2*x10359)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10361=IKsin(j4);
IkReal x10362=IKcos(j4);
IkReal x10363=(gconst2*r00);
IkReal x10364=((1.0)*cj0);
IkReal x10365=((1.0)*gconst1*r01);
evalcond[0]=(r12*x10361);
evalcond[1]=((((-1.0)*r12*x10362))+(((-1.0)*x10364)));
evalcond[2]=((((-1.0)*gconst1*r21*x10361))+((gconst2*r20*x10361)));
evalcond[3]=(((x10361*x10363))+(((-1.0)*x10361*x10365)));
evalcond[4]=((((-1.0)*cj1*cj2*x10364))+((x10362*x10363))+(((-1.0)*x10362*x10365))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10366=IKPowWithIntegerCheck(r12,-1);
if(!x10366.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x10366.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10367=IKsin(j4);
IkReal x10368=IKcos(j4);
IkReal x10369=(gconst2*r00);
IkReal x10370=((1.0)*cj2);
IkReal x10371=(gconst2*r20);
IkReal x10372=((1.0)*gconst1*r01);
IkReal x10373=((1.0)*gconst1*r21);
evalcond[0]=(r12*x10367);
evalcond[1]=(((x10367*x10371))+(((-1.0)*x10367*x10373)));
evalcond[2]=(((x10367*x10369))+(((-1.0)*x10367*x10372)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x10368*x10371))+(((-1.0)*x10368*x10373))+(((-1.0)*sj1*x10370)));
evalcond[4]=(((x10368*x10369))+(((-1.0)*x10368*x10372))+(((-1.0)*cj0*cj1*x10370))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10375=IKPowWithIntegerCheck(r12,-1);
if(!x10375.valid){
continue;
}
IkReal x10374=x10375.value;
CheckValue<IkReal> x10376=IKPowWithIntegerCheck(sj3,-1);
if(!x10376.valid){
continue;
}
if( IKabs((x10374*(x10376.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x10374)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10374*(x10376.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x10374))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10374*(x10376.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x10374));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10377=IKsin(j4);
IkReal x10378=IKcos(j4);
IkReal x10379=(gconst1*r01);
IkReal x10380=(cj2*sj1);
IkReal x10381=(sj1*sj2);
IkReal x10382=((1.0)*gconst2);
IkReal x10383=(gconst1*r21);
IkReal x10384=(cj1*sj2);
IkReal x10385=(gconst1*r20);
IkReal x10386=((1.0)*cj3);
IkReal x10387=(gconst1*r00);
IkReal x10388=(gconst2*sj3);
IkReal x10389=((1.0)*x10377);
IkReal x10390=(sj3*x10378);
IkReal x10391=((1.0)*cj1*cj2);
IkReal x10392=(cj3*x10378);
IkReal x10393=(gconst2*x10377);
evalcond[0]=((((-1.0)*r12*x10378))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x10383*x10389))+((r20*x10393)));
evalcond[2]=(sj0+(((-1.0)*x10379*x10389))+((r00*x10393)));
evalcond[3]=((((-1.0)*r12*sj3*x10389))+((sj0*x10380))+((sj0*x10384)));
evalcond[4]=((((-1.0)*sj0*x10391))+(((-1.0)*r12*x10377*x10386))+((sj0*x10381)));
evalcond[5]=(((r21*x10388))+(((-1.0)*x10380))+(((-1.0)*x10384))+((x10383*x10392))+((sj3*x10385))+(((-1.0)*r20*x10382*x10392)));
evalcond[6]=((((-1.0)*x10385*x10386))+(((-1.0)*x10391))+(((-1.0)*cj3*r21*x10382))+x10381+((x10383*x10390))+(((-1.0)*r20*x10382*x10390)));
evalcond[7]=((((-1.0)*r00*x10382*x10392))+((x10379*x10392))+(((-1.0)*cj0*x10391))+((sj3*x10387))+((cj0*x10381))+((r01*x10388)));
evalcond[8]=((((-1.0)*x10386*x10387))+(((-1.0)*r00*x10382*x10390))+((x10379*x10390))+(((-1.0)*cj3*r01*x10382))+((cj0*x10384))+((cj0*x10380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10394=((1.0)*sj3);
CheckValue<IkReal> x10395=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x10395.valid){
continue;
}
CheckValue<IkReal> x10396=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*gconst2*r20))),-1);
if(!x10396.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x10395.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10396.value)*((((cj2*sj1))+(((-1.0)*gconst1*r20*x10394))+((cj1*sj2))+(((-1.0)*gconst2*r21*x10394)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x10395.value)))+IKsqr(((x10396.value)*((((cj2*sj1))+(((-1.0)*gconst1*r20*x10394))+((cj1*sj2))+(((-1.0)*gconst2*r21*x10394))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x10395.value)), ((x10396.value)*((((cj2*sj1))+(((-1.0)*gconst1*r20*x10394))+((cj1*sj2))+(((-1.0)*gconst2*r21*x10394))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10397=IKsin(j4);
IkReal x10398=IKcos(j4);
IkReal x10399=(gconst1*r01);
IkReal x10400=(cj2*sj1);
IkReal x10401=(sj1*sj2);
IkReal x10402=((1.0)*gconst2);
IkReal x10403=(gconst1*r21);
IkReal x10404=(cj1*sj2);
IkReal x10405=(gconst1*r20);
IkReal x10406=((1.0)*cj3);
IkReal x10407=(gconst1*r00);
IkReal x10408=(gconst2*sj3);
IkReal x10409=((1.0)*x10397);
IkReal x10410=(sj3*x10398);
IkReal x10411=((1.0)*cj1*cj2);
IkReal x10412=(cj3*x10398);
IkReal x10413=(gconst2*x10397);
evalcond[0]=((((-1.0)*r12*x10398))+(((-1.0)*cj0)));
evalcond[1]=(((r20*x10413))+(((-1.0)*x10403*x10409)));
evalcond[2]=(((r00*x10413))+sj0+(((-1.0)*x10399*x10409)));
evalcond[3]=((((-1.0)*r12*sj3*x10409))+((sj0*x10400))+((sj0*x10404)));
evalcond[4]=((((-1.0)*r12*x10397*x10406))+((sj0*x10401))+(((-1.0)*sj0*x10411)));
evalcond[5]=(((r21*x10408))+((sj3*x10405))+(((-1.0)*r20*x10402*x10412))+((x10403*x10412))+(((-1.0)*x10404))+(((-1.0)*x10400)));
evalcond[6]=((((-1.0)*x10405*x10406))+(((-1.0)*x10411))+(((-1.0)*r20*x10402*x10410))+((x10403*x10410))+x10401+(((-1.0)*cj3*r21*x10402)));
evalcond[7]=(((x10399*x10412))+((r01*x10408))+((cj0*x10401))+((sj3*x10407))+(((-1.0)*r00*x10402*x10412))+(((-1.0)*cj0*x10411)));
evalcond[8]=(((x10399*x10410))+((cj0*x10400))+((cj0*x10404))+(((-1.0)*r00*x10402*x10410))+(((-1.0)*cj3*r01*x10402))+(((-1.0)*x10406*x10407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10414=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x10414.valid){
continue;
}
CheckValue<IkReal> x10415=IKPowWithIntegerCheck(r12,-1);
if(!x10415.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x10414.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10415.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x10414.value)))+IKsqr(((-1.0)*cj0*(x10415.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x10414.value)), ((-1.0)*cj0*(x10415.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10416=IKsin(j4);
IkReal x10417=IKcos(j4);
IkReal x10418=(gconst1*r01);
IkReal x10419=(cj2*sj1);
IkReal x10420=(sj1*sj2);
IkReal x10421=((1.0)*gconst2);
IkReal x10422=(gconst1*r21);
IkReal x10423=(cj1*sj2);
IkReal x10424=(gconst1*r20);
IkReal x10425=((1.0)*cj3);
IkReal x10426=(gconst1*r00);
IkReal x10427=(gconst2*sj3);
IkReal x10428=((1.0)*x10416);
IkReal x10429=(sj3*x10417);
IkReal x10430=((1.0)*cj1*cj2);
IkReal x10431=(cj3*x10417);
IkReal x10432=(gconst2*x10416);
evalcond[0]=((((-1.0)*r12*x10417))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x10422*x10428))+((r20*x10432)));
evalcond[2]=(sj0+(((-1.0)*x10418*x10428))+((r00*x10432)));
evalcond[3]=((((-1.0)*r12*sj3*x10428))+((sj0*x10423))+((sj0*x10419)));
evalcond[4]=(((sj0*x10420))+(((-1.0)*r12*x10416*x10425))+(((-1.0)*sj0*x10430)));
evalcond[5]=(((x10422*x10431))+(((-1.0)*r20*x10421*x10431))+((sj3*x10424))+(((-1.0)*x10423))+(((-1.0)*x10419))+((r21*x10427)));
evalcond[6]=(((x10422*x10429))+(((-1.0)*r20*x10421*x10429))+x10420+(((-1.0)*x10430))+(((-1.0)*cj3*r21*x10421))+(((-1.0)*x10424*x10425)));
evalcond[7]=(((r01*x10427))+((cj0*x10420))+(((-1.0)*r00*x10421*x10431))+((sj3*x10426))+(((-1.0)*cj0*x10430))+((x10418*x10431)));
evalcond[8]=((((-1.0)*cj3*r01*x10421))+((cj0*x10423))+(((-1.0)*r00*x10421*x10429))+((cj0*x10419))+(((-1.0)*x10425*x10426))+((x10418*x10429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10433=gconst1*gconst1;
IkReal x10434=r21*r21;
IkReal x10435=gconst2*gconst2;
IkReal x10436=r20*r20;
IkReal x10437=(gconst2*sj3);
IkReal x10438=(gconst2*r20);
IkReal x10439=(gconst1*r21);
IkReal x10440=((1.0)*cj1*sj2);
IkReal x10441=(r20*r21*sj3);
IkReal x10442=((1.0)*cj2*sj1);
CheckValue<IkReal> x10443=IKPowWithIntegerCheck(IKsign((((cj3*x10433*x10434))+((cj3*(r22*r22)))+(((-2.0)*cj3*x10438*x10439))+((cj3*x10435*x10436)))),-1);
if(!x10443.valid){
continue;
}
CheckValue<IkReal> x10444 = IKatan2WithCheck(IkReal((((gconst1*r20*r22*sj3))+(((-1.0)*r22*x10442))+(((-1.0)*r22*x10440))+((r21*r22*x10437)))),IkReal(((((-1.0)*x10438*x10442))+(((-1.0)*x10438*x10440))+((cj2*sj1*x10439))+(((-1.0)*gconst1*x10434*x10437))+((gconst1*x10436*x10437))+((cj1*sj2*x10439))+(((-1.0)*x10433*x10441))+((x10435*x10441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10443.value)))+(x10444.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10445=IKsin(j4);
IkReal x10446=IKcos(j4);
IkReal x10447=(gconst2*sj3);
IkReal x10448=(gconst1*r01);
IkReal x10449=(sj1*sj2);
IkReal x10450=(cj3*gconst1);
IkReal x10451=(cj3*gconst2);
IkReal x10452=(gconst1*r11);
IkReal x10453=(cj2*sj1);
IkReal x10454=(gconst1*r21);
IkReal x10455=(cj1*sj2);
IkReal x10456=(gconst1*sj3);
IkReal x10457=((1.0)*x10446);
IkReal x10458=((1.0)*x10445);
IkReal x10459=(sj3*x10446);
IkReal x10460=((1.0)*cj1*cj2);
IkReal x10461=(gconst2*x10445);
evalcond[0]=(((r20*x10461))+(((-1.0)*r22*x10457))+(((-1.0)*x10454*x10458)));
evalcond[1]=(sj0+(((-1.0)*r02*x10457))+((r00*x10461))+(((-1.0)*x10448*x10458)));
evalcond[2]=((((-1.0)*x10452*x10458))+(((-1.0)*r12*x10457))+(((-1.0)*cj0))+((r10*x10461)));
evalcond[3]=((((-1.0)*cj3*r22*x10458))+(((-1.0)*x10455))+(((-1.0)*x10453))+((r21*x10446*x10450))+((r21*x10447))+(((-1.0)*r20*x10451*x10457))+((r20*x10456)));
evalcond[4]=((((-1.0)*r21*x10451))+((x10454*x10459))+(((-1.0)*r22*sj3*x10458))+x10449+(((-1.0)*r20*x10447*x10457))+(((-1.0)*r20*x10450))+(((-1.0)*x10460)));
evalcond[5]=((((-1.0)*r00*x10451*x10457))+((cj3*x10446*x10448))+((cj0*x10449))+((r00*x10456))+(((-1.0)*cj3*r02*x10458))+((r01*x10447))+(((-1.0)*cj0*x10460)));
evalcond[6]=(((r10*x10456))+(((-1.0)*cj3*r12*x10458))+((sj0*x10449))+(((-1.0)*sj0*x10460))+((r11*x10447))+((r11*x10446*x10450))+(((-1.0)*r10*x10451*x10457)));
evalcond[7]=((((-1.0)*r01*x10451))+(((-1.0)*r00*x10450))+((cj0*x10453))+((cj0*x10455))+(((-1.0)*r02*sj3*x10458))+((x10448*x10459))+(((-1.0)*r00*x10447*x10457)));
evalcond[8]=(((x10452*x10459))+(((-1.0)*r10*x10447*x10457))+((sj0*x10453))+((sj0*x10455))+(((-1.0)*r10*x10450))+(((-1.0)*r12*sj3*x10458))+(((-1.0)*r11*x10451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10462=((1.0)*gconst1);
CheckValue<IkReal> x10463 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x10462))+((cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10463.valid){
continue;
}
CheckValue<IkReal> x10464=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10462))+(((-1.0)*gconst2*r01)))),-1);
if(!x10464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10463.value)+(((1.5707963267949)*(x10464.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10465=IKsin(j4);
IkReal x10466=IKcos(j4);
IkReal x10467=(gconst2*sj3);
IkReal x10468=(gconst1*r01);
IkReal x10469=(sj1*sj2);
IkReal x10470=(cj3*gconst1);
IkReal x10471=(cj3*gconst2);
IkReal x10472=(gconst1*r11);
IkReal x10473=(cj2*sj1);
IkReal x10474=(gconst1*r21);
IkReal x10475=(cj1*sj2);
IkReal x10476=(gconst1*sj3);
IkReal x10477=((1.0)*x10466);
IkReal x10478=((1.0)*x10465);
IkReal x10479=(sj3*x10466);
IkReal x10480=((1.0)*cj1*cj2);
IkReal x10481=(gconst2*x10465);
evalcond[0]=((((-1.0)*r22*x10477))+((r20*x10481))+(((-1.0)*x10474*x10478)));
evalcond[1]=(((r00*x10481))+(((-1.0)*r02*x10477))+sj0+(((-1.0)*x10468*x10478)));
evalcond[2]=(((r10*x10481))+(((-1.0)*x10472*x10478))+(((-1.0)*cj0))+(((-1.0)*r12*x10477)));
evalcond[3]=((((-1.0)*x10475))+(((-1.0)*x10473))+((r21*x10466*x10470))+((r20*x10476))+(((-1.0)*r20*x10471*x10477))+(((-1.0)*cj3*r22*x10478))+((r21*x10467)));
evalcond[4]=((((-1.0)*r20*x10470))+(((-1.0)*r22*sj3*x10478))+(((-1.0)*r21*x10471))+((x10474*x10479))+(((-1.0)*x10480))+(((-1.0)*r20*x10467*x10477))+x10469);
evalcond[5]=(((r01*x10467))+((cj0*x10469))+((r00*x10476))+((cj3*x10466*x10468))+(((-1.0)*r00*x10471*x10477))+(((-1.0)*cj0*x10480))+(((-1.0)*cj3*r02*x10478)));
evalcond[6]=((((-1.0)*r10*x10471*x10477))+(((-1.0)*cj3*r12*x10478))+((sj0*x10469))+(((-1.0)*sj0*x10480))+((r11*x10467))+((r11*x10466*x10470))+((r10*x10476)));
evalcond[7]=((((-1.0)*r00*x10470))+(((-1.0)*r00*x10467*x10477))+((cj0*x10473))+((cj0*x10475))+(((-1.0)*r01*x10471))+(((-1.0)*r02*sj3*x10478))+((x10468*x10479)));
evalcond[8]=((((-1.0)*r11*x10471))+((sj0*x10473))+((sj0*x10475))+(((-1.0)*r10*x10467*x10477))+(((-1.0)*r10*x10470))+((x10472*x10479))+(((-1.0)*r12*sj3*x10478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10482=((1.0)*gconst1);
CheckValue<IkReal> x10483 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x10482))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10483.valid){
continue;
}
CheckValue<IkReal> x10484=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x10482)))),-1);
if(!x10484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10483.value)+(((1.5707963267949)*(x10484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10485=IKsin(j4);
IkReal x10486=IKcos(j4);
IkReal x10487=(gconst2*sj3);
IkReal x10488=(gconst1*r01);
IkReal x10489=(sj1*sj2);
IkReal x10490=(cj3*gconst1);
IkReal x10491=(cj3*gconst2);
IkReal x10492=(gconst1*r11);
IkReal x10493=(cj2*sj1);
IkReal x10494=(gconst1*r21);
IkReal x10495=(cj1*sj2);
IkReal x10496=(gconst1*sj3);
IkReal x10497=((1.0)*x10486);
IkReal x10498=((1.0)*x10485);
IkReal x10499=(sj3*x10486);
IkReal x10500=((1.0)*cj1*cj2);
IkReal x10501=(gconst2*x10485);
evalcond[0]=(((r20*x10501))+(((-1.0)*r22*x10497))+(((-1.0)*x10494*x10498)));
evalcond[1]=((((-1.0)*x10488*x10498))+sj0+((r00*x10501))+(((-1.0)*r02*x10497)));
evalcond[2]=(((r10*x10501))+(((-1.0)*x10492*x10498))+(((-1.0)*r12*x10497))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x10487))+(((-1.0)*x10493))+(((-1.0)*x10495))+((r21*x10486*x10490))+(((-1.0)*cj3*r22*x10498))+((r20*x10496))+(((-1.0)*r20*x10491*x10497)));
evalcond[4]=((((-1.0)*r20*x10490))+(((-1.0)*x10500))+(((-1.0)*r20*x10487*x10497))+((x10494*x10499))+(((-1.0)*r21*x10491))+(((-1.0)*r22*sj3*x10498))+x10489);
evalcond[5]=((((-1.0)*r00*x10491*x10497))+(((-1.0)*cj0*x10500))+((cj3*x10486*x10488))+((cj0*x10489))+(((-1.0)*cj3*r02*x10498))+((r00*x10496))+((r01*x10487)));
evalcond[6]=(((r10*x10496))+((r11*x10487))+(((-1.0)*sj0*x10500))+((r11*x10486*x10490))+((sj0*x10489))+(((-1.0)*cj3*r12*x10498))+(((-1.0)*r10*x10491*x10497)));
evalcond[7]=((((-1.0)*r00*x10490))+(((-1.0)*r01*x10491))+(((-1.0)*r00*x10487*x10497))+((cj0*x10495))+((cj0*x10493))+((x10488*x10499))+(((-1.0)*r02*sj3*x10498)));
evalcond[8]=((((-1.0)*r10*x10490))+(((-1.0)*r10*x10487*x10497))+(((-1.0)*r12*sj3*x10498))+((x10492*x10499))+(((-1.0)*r11*x10491))+((sj0*x10493))+((sj0*x10495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10503 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10503)==0){
continue;
}
IkReal x10502=pow(x10503,-0.5);
CheckValue<IkReal> x10504 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10504.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10504.value))));
IkReal gconst4=((1.0)*r21*x10502);
IkReal gconst5=((-1.0)*r20*x10502);
CheckValue<IkReal> x10505 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10505.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10505.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10508 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10508.valid){
continue;
}
IkReal x10506=((1.0)*(x10508.value));
IkReal x10507=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10506)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10506)));
IkReal gconst4=((1.0)*r21*x10507);
IkReal gconst5=((-1.0)*r20*x10507);
IkReal x10509=r22*r22;
IkReal x10510=((1.0)*x10509);
CheckValue<IkReal> x10514=IKPowWithIntegerCheck(((-1.0)+x10509),-1);
if(!x10514.valid){
continue;
}
IkReal x10511=x10514.value;
if((((1.0)+(((-1.0)*x10510)))) < -0.00001)
continue;
IkReal x10512=IKsqrt(((1.0)+(((-1.0)*x10510))));
IkReal x10513=(sj0*x10511*x10512);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x10510*x10513))+x10513))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10517 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10517.valid){
continue;
}
IkReal x10515=((1.0)*(x10517.value));
IkReal x10516=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10515)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10515)));
IkReal gconst4=((1.0)*r21*x10516);
IkReal gconst5=((-1.0)*r20*x10516);
IkReal x10518=r22*r22;
IkReal x10519=((1.0)*x10518);
CheckValue<IkReal> x10523=IKPowWithIntegerCheck(((-1.0)+x10518),-1);
if(!x10523.valid){
continue;
}
IkReal x10520=x10523.value;
if((((1.0)+(((-1.0)*x10519)))) < -0.00001)
continue;
IkReal x10521=IKsqrt(((1.0)+(((-1.0)*x10519))));
IkReal x10522=(cj0*x10520*x10521);
j4eval[0]=((IKabs((x10522+(((-1.0)*x10519*x10522)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10526 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10526.valid){
continue;
}
IkReal x10524=((1.0)*(x10526.value));
IkReal x10525=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10524)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10524)));
IkReal gconst4=((1.0)*r21*x10525);
IkReal gconst5=((-1.0)*r20*x10525);
IkReal x10527=r22*r22;
IkReal x10528=(cj0*r02);
IkReal x10529=(r12*sj0);
CheckValue<IkReal> x10533=IKPowWithIntegerCheck(((-1.0)+x10527),-1);
if(!x10533.valid){
continue;
}
IkReal x10530=x10533.value;
if((((1.0)+(((-1.0)*x10527)))) < -0.00001)
continue;
IkReal x10531=IKsqrt(((1.0)+(((-1.0)*x10527))));
IkReal x10532=((1.0)*r22*x10530*x10531);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x10529*x10532))+(((-1.0)*x10528*x10532)))))+(IKabs((x10529+x10528))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10536 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10536.valid){
continue;
}
IkReal x10534=((1.0)*(x10536.value));
IkReal x10535=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10534)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10534)));
IkReal gconst4=((1.0)*r21*x10535);
IkReal gconst5=((-1.0)*r20*x10535);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10539 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10539.valid){
continue;
}
IkReal x10537=((1.0)*(x10539.value));
IkReal x10538=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10537)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10537)));
IkReal gconst4=((1.0)*r21*x10538);
IkReal gconst5=((-1.0)*r20*x10538);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10542 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10542.valid){
continue;
}
IkReal x10540=((1.0)*(x10542.value));
IkReal x10541=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10540)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10540)));
IkReal gconst4=((1.0)*r21*x10541);
IkReal gconst5=((-1.0)*r20*x10541);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10545 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10545.valid){
continue;
}
IkReal x10543=((1.0)*(x10545.value));
IkReal x10544=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10543)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10543)));
IkReal gconst4=((1.0)*r21*x10544);
IkReal gconst5=((-1.0)*r20*x10544);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10548 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10548.valid){
continue;
}
IkReal x10546=((1.0)*(x10548.value));
IkReal x10547=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10546)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10546)));
IkReal gconst4=((1.0)*r21*x10547);
IkReal gconst5=((-1.0)*r20*x10547);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10551 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10551.valid){
continue;
}
IkReal x10549=((1.0)*(x10551.value));
IkReal x10550=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10549)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10549)));
IkReal gconst4=((1.0)*r21*x10550);
IkReal gconst5=((-1.0)*r20*x10550);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10552=(gconst4*r01);
IkReal x10553=(gconst5*r00);
CheckValue<IkReal> x10554 = IKatan2WithCheck(IkReal(((((-1.0)*x10553))+x10552)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10554.valid){
continue;
}
CheckValue<IkReal> x10555=IKPowWithIntegerCheck(IKsign(((x10552*x10552)+(((-2.0)*x10552*x10553))+(x10553*x10553)+(r02*r02))),-1);
if(!x10555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10554.value)+(((1.5707963267949)*(x10555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10556=IKsin(j4);
IkReal x10557=IKcos(j4);
IkReal x10558=(gconst4*r21);
IkReal x10559=(gconst5*r10);
IkReal x10560=(gconst4*r11);
IkReal x10561=(gconst4*r01);
IkReal x10562=((1.0)*x10557);
IkReal x10563=((1.0)*x10556);
IkReal x10564=(gconst5*x10556);
evalcond[0]=(((r20*x10564))+(((-1.0)*r22*x10562))+(((-1.0)*x10558*x10563)));
evalcond[1]=((((-1.0)*x10560*x10563))+(((-1.0)*r12*x10562))+((x10556*x10559)));
evalcond[2]=(((x10557*x10561))+(((-1.0)*r02*x10563))+(((-1.0)*gconst5*r00*x10562)));
evalcond[3]=((1.0)+((r00*x10564))+(((-1.0)*x10561*x10563))+(((-1.0)*r02*x10562)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10557*x10560))+(((-1.0)*x10559*x10562))+(((-1.0)*r12*x10563)));
evalcond[5]=((((-1.0)*r22*x10563))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10562))+((x10557*x10558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10565=((1.0)*gconst4);
CheckValue<IkReal> x10566=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10565))+(((-1.0)*gconst5*r11)))),-1);
if(!x10566.valid){
continue;
}
CheckValue<IkReal> x10567 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*r21*x10565)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10566.value)))+(x10567.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10568=IKsin(j4);
IkReal x10569=IKcos(j4);
IkReal x10570=(gconst4*r21);
IkReal x10571=(gconst5*r10);
IkReal x10572=(gconst4*r11);
IkReal x10573=(gconst4*r01);
IkReal x10574=((1.0)*x10569);
IkReal x10575=((1.0)*x10568);
IkReal x10576=(gconst5*x10568);
evalcond[0]=(((r20*x10576))+(((-1.0)*r22*x10574))+(((-1.0)*x10570*x10575)));
evalcond[1]=((((-1.0)*r12*x10574))+((x10568*x10571))+(((-1.0)*x10572*x10575)));
evalcond[2]=(((x10569*x10573))+(((-1.0)*gconst5*r00*x10574))+(((-1.0)*r02*x10575)));
evalcond[3]=((1.0)+((r00*x10576))+(((-1.0)*x10573*x10575))+(((-1.0)*r02*x10574)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10571*x10574))+((cj1*sj2))+(((-1.0)*r12*x10575))+((x10569*x10572)));
evalcond[5]=((((-1.0)*r22*x10575))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10574))+((x10569*x10570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10577 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10577.valid){
continue;
}
CheckValue<IkReal> x10578=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10577.value)+(((1.5707963267949)*(x10578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10579=IKsin(j4);
IkReal x10580=IKcos(j4);
IkReal x10581=(gconst4*r21);
IkReal x10582=(gconst5*r10);
IkReal x10583=(gconst4*r11);
IkReal x10584=(gconst4*r01);
IkReal x10585=((1.0)*x10580);
IkReal x10586=((1.0)*x10579);
IkReal x10587=(gconst5*x10579);
evalcond[0]=((((-1.0)*r22*x10585))+(((-1.0)*x10581*x10586))+((r20*x10587)));
evalcond[1]=(((x10579*x10582))+(((-1.0)*r12*x10585))+(((-1.0)*x10583*x10586)));
evalcond[2]=(((x10580*x10584))+(((-1.0)*r02*x10586))+(((-1.0)*gconst5*r00*x10585)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10585))+(((-1.0)*x10584*x10586))+((r00*x10587)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10582*x10585))+((cj1*sj2))+((x10580*x10583))+(((-1.0)*r12*x10586)));
evalcond[5]=((((-1.0)*r22*x10586))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10585))+((x10580*x10581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10590 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10590.valid){
continue;
}
IkReal x10588=((1.0)*(x10590.value));
IkReal x10589=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10588)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10588)));
IkReal gconst4=((1.0)*r21*x10589);
IkReal gconst5=((-1.0)*r20*x10589);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10593 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10593.valid){
continue;
}
IkReal x10591=((1.0)*(x10593.value));
IkReal x10592=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10591)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10591)));
IkReal gconst4=((1.0)*r21*x10592);
IkReal gconst5=((-1.0)*r20*x10592);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10596 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10596.valid){
continue;
}
IkReal x10594=((1.0)*(x10596.value));
IkReal x10595=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10594)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10594)));
IkReal gconst4=((1.0)*r21*x10595);
IkReal gconst5=((-1.0)*r20*x10595);
IkReal x10597=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10601=IKPowWithIntegerCheck(x10597,-1);
if(!x10601.valid){
continue;
}
IkReal x10598=x10601.value;
IkReal x10599=((1.0)*x10598);
IkReal x10600=((((-2.0)*r00*r01*r20*r21*x10598))+(((-1.0)*(r02*r02)))+(((-1.0)*x10599*(r00*r00)*(r20*r20)))+(((-1.0)*x10599*(r01*r01)*(r21*r21))));
j4eval[0]=x10600;
j4eval[1]=r02;
j4eval[2]=x10597;
j4eval[3]=IKsign(x10600);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10602=(gconst5*r00);
IkReal x10603=(gconst4*r01);
CheckValue<IkReal> x10604 = IKatan2WithCheck(IkReal(((((-1.0)*x10603))+x10602)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10604.valid){
continue;
}
CheckValue<IkReal> x10605=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x10602*x10603))+(((-1.0)*(x10602*x10602)))+(((-1.0)*(x10603*x10603))))),-1);
if(!x10605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10604.value)+(((1.5707963267949)*(x10605.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10606=IKcos(j4);
IkReal x10607=IKsin(j4);
IkReal x10608=((1.0)*x10606);
IkReal x10609=(gconst5*x10606);
IkReal x10610=(gconst5*x10607);
IkReal x10611=((1.0)*gconst4*x10607);
evalcond[0]=(((r00*x10609))+((r02*x10607))+(((-1.0)*gconst4*r01*x10608)));
evalcond[1]=((((-1.0)*r21*x10611))+((r20*x10610))+(((-1.0)*r22*x10608)));
evalcond[2]=((((-1.0)*r12*x10608))+((r10*x10610))+(((-1.0)*r11*x10611)));
evalcond[3]=((1.0)+((r00*x10610))+(((-1.0)*r01*x10611))+(((-1.0)*r02*x10608)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r11*x10608))+((r12*x10607))+((r10*x10609))+((cj1*sj2)));
evalcond[5]=((((-1.0)*gconst4*r21*x10608))+((r22*x10607))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x10609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10612=((1.0)*gconst4);
CheckValue<IkReal> x10613=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10612))+(((-1.0)*gconst5*r11)))),-1);
if(!x10613.valid){
continue;
}
CheckValue<IkReal> x10614 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10612))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10613.value)))+(x10614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10615=IKcos(j4);
IkReal x10616=IKsin(j4);
IkReal x10617=((1.0)*x10615);
IkReal x10618=(gconst5*x10615);
IkReal x10619=(gconst5*x10616);
IkReal x10620=((1.0)*gconst4*x10616);
evalcond[0]=(((r02*x10616))+((r00*x10618))+(((-1.0)*gconst4*r01*x10617)));
evalcond[1]=(((r20*x10619))+(((-1.0)*r22*x10617))+(((-1.0)*r21*x10620)));
evalcond[2]=(((r10*x10619))+(((-1.0)*r11*x10620))+(((-1.0)*r12*x10617)));
evalcond[3]=((1.0)+(((-1.0)*r01*x10620))+(((-1.0)*r02*x10617))+((r00*x10619)));
evalcond[4]=(((r12*x10616))+((cj2*sj1))+(((-1.0)*gconst4*r11*x10617))+((cj1*sj2))+((r10*x10618)));
evalcond[5]=(((r22*x10616))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x10618))+(((-1.0)*gconst4*r21*x10617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10621 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10621.valid){
continue;
}
CheckValue<IkReal> x10622=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10621.value)+(((1.5707963267949)*(x10622.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10623=IKcos(j4);
IkReal x10624=IKsin(j4);
IkReal x10625=((1.0)*x10623);
IkReal x10626=(gconst5*x10623);
IkReal x10627=(gconst5*x10624);
IkReal x10628=((1.0)*gconst4*x10624);
evalcond[0]=(((r00*x10626))+(((-1.0)*gconst4*r01*x10625))+((r02*x10624)));
evalcond[1]=(((r20*x10627))+(((-1.0)*r22*x10625))+(((-1.0)*r21*x10628)));
evalcond[2]=((((-1.0)*r12*x10625))+((r10*x10627))+(((-1.0)*r11*x10628)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10625))+((r00*x10627))+(((-1.0)*r01*x10628)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r11*x10625))+((r10*x10626))+((r12*x10624)));
evalcond[5]=(((r20*x10626))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x10625))+((r22*x10624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10631 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10631.valid){
continue;
}
IkReal x10629=((1.0)*(x10631.value));
IkReal x10630=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10629)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10629)));
IkReal gconst4=((1.0)*r21*x10630);
IkReal gconst5=((-1.0)*r20*x10630);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10634 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10634.valid){
continue;
}
IkReal x10632=((1.0)*(x10634.value));
IkReal x10633=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10632)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10632)));
IkReal gconst4=((1.0)*r21*x10633);
IkReal gconst5=((-1.0)*r20*x10633);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10637 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10637.valid){
continue;
}
IkReal x10635=((1.0)*(x10637.value));
IkReal x10636=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10635)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10635)));
IkReal gconst4=((1.0)*r21*x10636);
IkReal gconst5=((-1.0)*r20*x10636);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10638=(gconst4*r01);
IkReal x10639=(gconst5*r00);
CheckValue<IkReal> x10640=IKPowWithIntegerCheck(IKsign(((x10638*x10638)+(x10639*x10639)+(((-2.0)*x10638*x10639))+(r02*r02))),-1);
if(!x10640.valid){
continue;
}
CheckValue<IkReal> x10641 = IKatan2WithCheck(IkReal(((((-1.0)*x10639))+x10638)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10640.value)))+(x10641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10642=IKsin(j4);
IkReal x10643=IKcos(j4);
IkReal x10644=(gconst4*r21);
IkReal x10645=(gconst5*r10);
IkReal x10646=((1.0)*cj2);
IkReal x10647=(gconst4*r11);
IkReal x10648=(gconst4*r01);
IkReal x10649=((1.0)*x10643);
IkReal x10650=((1.0)*x10642);
IkReal x10651=(gconst5*x10642);
evalcond[0]=((((-1.0)*r22*x10649))+(((-1.0)*x10644*x10650))+((r20*x10651)));
evalcond[1]=((((-1.0)*x10647*x10650))+((x10642*x10645))+(((-1.0)*r12*x10649)));
evalcond[2]=((((-1.0)*gconst5*r00*x10649))+((x10643*x10648))+(((-1.0)*r02*x10650)));
evalcond[3]=((1.0)+((r00*x10651))+(((-1.0)*r02*x10649))+(((-1.0)*x10648*x10650)));
evalcond[4]=((((-1.0)*r12*x10650))+((x10643*x10647))+((sj1*sj2))+(((-1.0)*x10645*x10649))+(((-1.0)*cj1*x10646)));
evalcond[5]=((((-1.0)*r22*x10650))+(((-1.0)*gconst5*r20*x10649))+((x10643*x10644))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10652=((1.0)*gconst4);
CheckValue<IkReal> x10653=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10652))+(((-1.0)*gconst5*r11)))),-1);
if(!x10653.valid){
continue;
}
CheckValue<IkReal> x10654 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10652))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10653.value)))+(x10654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10655=IKsin(j4);
IkReal x10656=IKcos(j4);
IkReal x10657=(gconst4*r21);
IkReal x10658=(gconst5*r10);
IkReal x10659=((1.0)*cj2);
IkReal x10660=(gconst4*r11);
IkReal x10661=(gconst4*r01);
IkReal x10662=((1.0)*x10656);
IkReal x10663=((1.0)*x10655);
IkReal x10664=(gconst5*x10655);
evalcond[0]=((((-1.0)*x10657*x10663))+((r20*x10664))+(((-1.0)*r22*x10662)));
evalcond[1]=(((x10655*x10658))+(((-1.0)*x10660*x10663))+(((-1.0)*r12*x10662)));
evalcond[2]=((((-1.0)*gconst5*r00*x10662))+(((-1.0)*r02*x10663))+((x10656*x10661)));
evalcond[3]=((1.0)+(((-1.0)*x10661*x10663))+(((-1.0)*r02*x10662))+((r00*x10664)));
evalcond[4]=((((-1.0)*x10658*x10662))+((sj1*sj2))+(((-1.0)*r12*x10663))+((x10656*x10660))+(((-1.0)*cj1*x10659)));
evalcond[5]=(((x10656*x10657))+(((-1.0)*sj1*x10659))+(((-1.0)*gconst5*r20*x10662))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x10663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10665 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10665.valid){
continue;
}
CheckValue<IkReal> x10666=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10665.value)+(((1.5707963267949)*(x10666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10667=IKsin(j4);
IkReal x10668=IKcos(j4);
IkReal x10669=(gconst4*r21);
IkReal x10670=(gconst5*r10);
IkReal x10671=((1.0)*cj2);
IkReal x10672=(gconst4*r11);
IkReal x10673=(gconst4*r01);
IkReal x10674=((1.0)*x10668);
IkReal x10675=((1.0)*x10667);
IkReal x10676=(gconst5*x10667);
evalcond[0]=((((-1.0)*x10669*x10675))+((r20*x10676))+(((-1.0)*r22*x10674)));
evalcond[1]=((((-1.0)*x10672*x10675))+(((-1.0)*r12*x10674))+((x10667*x10670)));
evalcond[2]=(((x10668*x10673))+(((-1.0)*r02*x10675))+(((-1.0)*gconst5*r00*x10674)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10674))+(((-1.0)*x10673*x10675))+((r00*x10676)));
evalcond[4]=(((x10668*x10672))+((sj1*sj2))+(((-1.0)*cj1*x10671))+(((-1.0)*x10670*x10674))+(((-1.0)*r12*x10675)));
evalcond[5]=((((-1.0)*sj1*x10671))+(((-1.0)*gconst5*r20*x10674))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x10675))+((x10668*x10669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10679 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10679.valid){
continue;
}
IkReal x10677=((1.0)*(x10679.value));
IkReal x10678=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10677)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10677)));
IkReal gconst4=((1.0)*r21*x10678);
IkReal gconst5=((-1.0)*r20*x10678);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10682 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10682.valid){
continue;
}
IkReal x10680=((1.0)*(x10682.value));
IkReal x10681=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10680)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10680)));
IkReal gconst4=((1.0)*r21*x10681);
IkReal gconst5=((-1.0)*r20*x10681);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10685 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10685.valid){
continue;
}
IkReal x10683=((1.0)*(x10685.value));
IkReal x10684=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10683)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10683)));
IkReal gconst4=((1.0)*r21*x10684);
IkReal gconst5=((-1.0)*r20*x10684);
IkReal x10686=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10690=IKPowWithIntegerCheck(x10686,-1);
if(!x10690.valid){
continue;
}
IkReal x10687=x10690.value;
IkReal x10688=((1.0)*x10687);
IkReal x10689=((((-1.0)*x10688*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10687))+(((-1.0)*x10688*(r01*r01)*(r21*r21))));
j4eval[0]=x10689;
j4eval[1]=r02;
j4eval[2]=x10686;
j4eval[3]=IKsign(x10689);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10691=(gconst5*r00);
IkReal x10692=(gconst4*r01);
CheckValue<IkReal> x10693=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x10691*x10692))+(((-1.0)*(x10692*x10692)))+(((-1.0)*(x10691*x10691))))),-1);
if(!x10693.valid){
continue;
}
CheckValue<IkReal> x10694 = IKatan2WithCheck(IkReal(((((-1.0)*x10692))+x10691)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10693.value)))+(x10694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10695=IKcos(j4);
IkReal x10696=IKsin(j4);
IkReal x10697=((1.0)*cj2);
IkReal x10698=((1.0)*x10695);
IkReal x10699=(gconst5*x10695);
IkReal x10700=(gconst5*x10696);
IkReal x10701=((1.0)*gconst4*x10696);
evalcond[0]=(((r02*x10696))+(((-1.0)*gconst4*r01*x10698))+((r00*x10699)));
evalcond[1]=(((r20*x10700))+(((-1.0)*r22*x10698))+(((-1.0)*r21*x10701)));
evalcond[2]=((((-1.0)*r12*x10698))+((r10*x10700))+(((-1.0)*r11*x10701)));
evalcond[3]=((1.0)+((r00*x10700))+(((-1.0)*r02*x10698))+(((-1.0)*r01*x10701)));
evalcond[4]=(((r10*x10699))+((sj1*sj2))+(((-1.0)*cj1*x10697))+((r12*x10696))+(((-1.0)*gconst4*r11*x10698)));
evalcond[5]=((((-1.0)*gconst4*r21*x10698))+(((-1.0)*cj1*sj2))+((r22*x10696))+(((-1.0)*sj1*x10697))+((r20*x10699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10702=((1.0)*gconst4);
CheckValue<IkReal> x10703=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10702))+(((-1.0)*gconst5*r11)))),-1);
if(!x10703.valid){
continue;
}
CheckValue<IkReal> x10704 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*r21*x10702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10703.value)))+(x10704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10705=IKcos(j4);
IkReal x10706=IKsin(j4);
IkReal x10707=((1.0)*cj2);
IkReal x10708=((1.0)*x10705);
IkReal x10709=(gconst5*x10705);
IkReal x10710=(gconst5*x10706);
IkReal x10711=((1.0)*gconst4*x10706);
evalcond[0]=(((r00*x10709))+(((-1.0)*gconst4*r01*x10708))+((r02*x10706)));
evalcond[1]=((((-1.0)*r21*x10711))+((r20*x10710))+(((-1.0)*r22*x10708)));
evalcond[2]=((((-1.0)*r12*x10708))+(((-1.0)*r11*x10711))+((r10*x10710)));
evalcond[3]=((1.0)+(((-1.0)*r01*x10711))+((r00*x10710))+(((-1.0)*r02*x10708)));
evalcond[4]=(((sj1*sj2))+((r12*x10706))+((r10*x10709))+(((-1.0)*gconst4*r11*x10708))+(((-1.0)*cj1*x10707)));
evalcond[5]=((((-1.0)*gconst4*r21*x10708))+(((-1.0)*sj1*x10707))+(((-1.0)*cj1*sj2))+((r22*x10706))+((r20*x10709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10712 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10712.valid){
continue;
}
CheckValue<IkReal> x10713=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10712.value)+(((1.5707963267949)*(x10713.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10714=IKcos(j4);
IkReal x10715=IKsin(j4);
IkReal x10716=((1.0)*cj2);
IkReal x10717=((1.0)*x10714);
IkReal x10718=(gconst5*x10714);
IkReal x10719=(gconst5*x10715);
IkReal x10720=((1.0)*gconst4*x10715);
evalcond[0]=(((r00*x10718))+(((-1.0)*gconst4*r01*x10717))+((r02*x10715)));
evalcond[1]=((((-1.0)*r21*x10720))+((r20*x10719))+(((-1.0)*r22*x10717)));
evalcond[2]=((((-1.0)*r12*x10717))+(((-1.0)*r11*x10720))+((r10*x10719)));
evalcond[3]=((1.0)+((r00*x10719))+(((-1.0)*r02*x10717))+(((-1.0)*r01*x10720)));
evalcond[4]=((((-1.0)*cj1*x10716))+((r12*x10715))+(((-1.0)*gconst4*r11*x10717))+((sj1*sj2))+((r10*x10718)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r20*x10718))+(((-1.0)*sj1*x10716))+((r22*x10715))+(((-1.0)*gconst4*r21*x10717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10721=gconst4*gconst4;
IkReal x10722=gconst5*gconst5;
IkReal x10723=(cj3*r20);
IkReal x10724=(r00*sj3);
IkReal x10725=(r01*sj3);
IkReal x10726=(gconst4*gconst5);
IkReal x10727=(r21*x10721);
IkReal x10728=((1.0)*r01*x10726);
CheckValue<IkReal> x10729=IKPowWithIntegerCheck(IKsign((((r00*x10722*x10723))+((cj3*r01*x10727))+(((-1.0)*x10723*x10728))+((cj3*r02*r22))+(((-1.0)*cj3*r00*r21*x10726)))),-1);
if(!x10729.valid){
continue;
}
CheckValue<IkReal> x10730 = IKatan2WithCheck(IkReal((((gconst5*r22*x10725))+((gconst4*r22*x10724)))),IkReal(((((-1.0)*r21*x10725*x10726))+((r20*x10722*x10725))+(((-1.0)*x10724*x10727))+((r20*x10724*x10726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10729.value)))+(x10730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10731=IKsin(j4);
IkReal x10732=IKcos(j4);
IkReal x10733=(sj1*sj2);
IkReal x10734=(gconst5*sj3);
IkReal x10735=((1.0)*r21);
IkReal x10736=(cj3*gconst5);
IkReal x10737=((1.0)*cj1);
IkReal x10738=(gconst4*r11);
IkReal x10739=(cj2*sj1);
IkReal x10740=(cj3*gconst4);
IkReal x10741=(gconst4*sj3);
IkReal x10742=(cj2*x10737);
IkReal x10743=((1.0)*x10732);
IkReal x10744=((1.0)*x10731);
IkReal x10745=(gconst5*x10731);
IkReal x10746=(x10732*x10741);
evalcond[0]=((((-1.0)*gconst4*x10731*x10735))+((r20*x10745))+(((-1.0)*r22*x10743)));
evalcond[1]=((((-1.0)*x10738*x10744))+((r10*x10745))+(((-1.0)*r12*x10743)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10743))+(((-1.0)*gconst4*r01*x10744))+((r00*x10745)));
evalcond[3]=((((-1.0)*r00*x10736*x10743))+((r01*x10732*x10740))+(((-1.0)*cj3*r02*x10744))+((r01*x10734))+((r00*x10741)));
evalcond[4]=((((-1.0)*r02*sj3*x10744))+(((-1.0)*r00*x10740))+(((-1.0)*r01*x10736))+(((-1.0)*r00*x10734*x10743))+((r01*x10746)));
evalcond[5]=(((r10*x10741))+(((-1.0)*cj3*r12*x10744))+(((-1.0)*x10742))+x10733+(((-1.0)*r10*x10736*x10743))+((r11*x10734))+((cj3*x10732*x10738)));
evalcond[6]=((((-1.0)*r20*x10736*x10743))+((r21*x10734))+(((-1.0)*cj3*r22*x10744))+((r21*x10732*x10740))+((r20*x10741))+(((-1.0)*x10739))+(((-1.0)*sj2*x10737)));
evalcond[7]=(((sj3*x10732*x10738))+((cj1*sj2))+(((-1.0)*r11*x10736))+x10739+(((-1.0)*r12*sj3*x10744))+(((-1.0)*r10*x10734*x10743))+(((-1.0)*r10*x10740)));
evalcond[8]=((((-1.0)*x10735*x10736))+(((-1.0)*x10742))+(((-1.0)*r20*x10740))+(((-1.0)*r20*x10734*x10743))+(((-1.0)*r22*sj3*x10744))+x10733+((r21*x10746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10747=((1.0)*gconst4);
CheckValue<IkReal> x10748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10747))+(((-1.0)*gconst5*r11)))),-1);
if(!x10748.valid){
continue;
}
CheckValue<IkReal> x10749 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10747))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10748.value)))+(x10749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10750=IKsin(j4);
IkReal x10751=IKcos(j4);
IkReal x10752=(sj1*sj2);
IkReal x10753=(gconst5*sj3);
IkReal x10754=((1.0)*r21);
IkReal x10755=(cj3*gconst5);
IkReal x10756=((1.0)*cj1);
IkReal x10757=(gconst4*r11);
IkReal x10758=(cj2*sj1);
IkReal x10759=(cj3*gconst4);
IkReal x10760=(gconst4*sj3);
IkReal x10761=(cj2*x10756);
IkReal x10762=((1.0)*x10751);
IkReal x10763=((1.0)*x10750);
IkReal x10764=(gconst5*x10750);
IkReal x10765=(x10751*x10760);
evalcond[0]=((((-1.0)*gconst4*x10750*x10754))+((r20*x10764))+(((-1.0)*r22*x10762)));
evalcond[1]=((((-1.0)*x10757*x10763))+(((-1.0)*r12*x10762))+((r10*x10764)));
evalcond[2]=((1.0)+((r00*x10764))+(((-1.0)*gconst4*r01*x10763))+(((-1.0)*r02*x10762)));
evalcond[3]=(((r01*x10751*x10759))+((r00*x10760))+(((-1.0)*r00*x10755*x10762))+(((-1.0)*cj3*r02*x10763))+((r01*x10753)));
evalcond[4]=((((-1.0)*r00*x10753*x10762))+(((-1.0)*r01*x10755))+(((-1.0)*r00*x10759))+((r01*x10765))+(((-1.0)*r02*sj3*x10763)));
evalcond[5]=((((-1.0)*cj3*r12*x10763))+((cj3*x10751*x10757))+(((-1.0)*x10761))+(((-1.0)*r10*x10755*x10762))+((r11*x10753))+((r10*x10760))+x10752);
evalcond[6]=(((r21*x10751*x10759))+(((-1.0)*cj3*r22*x10763))+((r20*x10760))+(((-1.0)*r20*x10755*x10762))+((r21*x10753))+(((-1.0)*sj2*x10756))+(((-1.0)*x10758)));
evalcond[7]=((((-1.0)*r10*x10759))+(((-1.0)*r11*x10755))+((cj1*sj2))+(((-1.0)*r10*x10753*x10762))+((sj3*x10751*x10757))+(((-1.0)*r12*sj3*x10763))+x10758);
evalcond[8]=((((-1.0)*x10761))+((r21*x10765))+(((-1.0)*r20*x10753*x10762))+(((-1.0)*r20*x10759))+(((-1.0)*r22*sj3*x10763))+x10752+(((-1.0)*x10754*x10755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10766 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10766.valid){
continue;
}
CheckValue<IkReal> x10767=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10766.value)+(((1.5707963267949)*(x10767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10768=IKsin(j4);
IkReal x10769=IKcos(j4);
IkReal x10770=(sj1*sj2);
IkReal x10771=(gconst5*sj3);
IkReal x10772=((1.0)*r21);
IkReal x10773=(cj3*gconst5);
IkReal x10774=((1.0)*cj1);
IkReal x10775=(gconst4*r11);
IkReal x10776=(cj2*sj1);
IkReal x10777=(cj3*gconst4);
IkReal x10778=(gconst4*sj3);
IkReal x10779=(cj2*x10774);
IkReal x10780=((1.0)*x10769);
IkReal x10781=((1.0)*x10768);
IkReal x10782=(gconst5*x10768);
IkReal x10783=(x10769*x10778);
evalcond[0]=((((-1.0)*gconst4*x10768*x10772))+((r20*x10782))+(((-1.0)*r22*x10780)));
evalcond[1]=((((-1.0)*x10775*x10781))+(((-1.0)*r12*x10780))+((r10*x10782)));
evalcond[2]=((1.0)+(((-1.0)*gconst4*r01*x10781))+((r00*x10782))+(((-1.0)*r02*x10780)));
evalcond[3]=(((r01*x10769*x10777))+(((-1.0)*cj3*r02*x10781))+(((-1.0)*r00*x10773*x10780))+((r00*x10778))+((r01*x10771)));
evalcond[4]=((((-1.0)*r01*x10773))+(((-1.0)*r00*x10777))+(((-1.0)*r02*sj3*x10781))+(((-1.0)*r00*x10771*x10780))+((r01*x10783)));
evalcond[5]=(((r11*x10771))+(((-1.0)*r10*x10773*x10780))+((cj3*x10769*x10775))+(((-1.0)*x10779))+(((-1.0)*cj3*r12*x10781))+x10770+((r10*x10778)));
evalcond[6]=(((r21*x10769*x10777))+((r20*x10778))+(((-1.0)*sj2*x10774))+(((-1.0)*x10776))+(((-1.0)*r20*x10773*x10780))+(((-1.0)*cj3*r22*x10781))+((r21*x10771)));
evalcond[7]=((((-1.0)*r10*x10777))+((cj1*sj2))+(((-1.0)*r10*x10771*x10780))+(((-1.0)*r12*sj3*x10781))+(((-1.0)*r11*x10773))+x10776+((sj3*x10769*x10775)));
evalcond[8]=(((r21*x10783))+(((-1.0)*x10772*x10773))+(((-1.0)*r22*sj3*x10781))+(((-1.0)*x10779))+(((-1.0)*r20*x10771*x10780))+x10770+(((-1.0)*r20*x10777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10786 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10786.valid){
continue;
}
IkReal x10784=((1.0)*(x10786.value));
IkReal x10785=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10784)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10784)));
IkReal gconst4=((1.0)*r21*x10785);
IkReal gconst5=((-1.0)*r20*x10785);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10789 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10789.valid){
continue;
}
IkReal x10787=((1.0)*(x10789.value));
IkReal x10788=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10787)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10787)));
IkReal gconst4=((1.0)*r21*x10788);
IkReal gconst5=((-1.0)*r20*x10788);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10792 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10792.valid){
continue;
}
IkReal x10790=((1.0)*(x10792.value));
IkReal x10791=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10790)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10790)));
IkReal gconst4=((1.0)*r21*x10791);
IkReal gconst5=((-1.0)*r20*x10791);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10795 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10795.valid){
continue;
}
IkReal x10793=((1.0)*(x10795.value));
IkReal x10794=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10793)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10793)));
IkReal gconst4=((1.0)*r21*x10794);
IkReal gconst5=((-1.0)*r20*x10794);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10798 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10798.valid){
continue;
}
IkReal x10796=((1.0)*(x10798.value));
IkReal x10797=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10796)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10796)));
IkReal gconst4=((1.0)*r21*x10797);
IkReal gconst5=((-1.0)*r20*x10797);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10801 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10801.valid){
continue;
}
IkReal x10799=((1.0)*(x10801.value));
IkReal x10800=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10799)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10799)));
IkReal gconst4=((1.0)*r21*x10800);
IkReal gconst5=((-1.0)*r20*x10800);
IkReal x10802=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10806=IKPowWithIntegerCheck(x10802,-1);
if(!x10806.valid){
continue;
}
IkReal x10803=x10806.value;
IkReal x10804=((1.0)*x10803);
IkReal x10805=((((-1.0)*(r02*r02)))+(((-1.0)*x10804*(r01*r01)*(r21*r21)))+(((-1.0)*x10804*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10803)));
j4eval[0]=x10805;
j4eval[1]=r02;
j4eval[2]=x10802;
j4eval[3]=IKsign(x10805);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10807=(gconst4*r01);
IkReal x10808=(gconst5*r00);
CheckValue<IkReal> x10809 = IKatan2WithCheck(IkReal(((((-1.0)*x10808))+x10807)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10809.valid){
continue;
}
CheckValue<IkReal> x10810=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10807*x10807)))+(((2.0)*x10807*x10808))+(((-1.0)*(x10808*x10808))))),-1);
if(!x10810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10809.value)+(((1.5707963267949)*(x10810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10811=IKsin(j4);
IkReal x10812=IKcos(j4);
IkReal x10813=(gconst4*r21);
IkReal x10814=(gconst5*r10);
IkReal x10815=((1.0)*cj2);
IkReal x10816=(gconst4*r11);
IkReal x10817=(gconst4*r01);
IkReal x10818=((1.0)*x10812);
IkReal x10819=((1.0)*x10811);
IkReal x10820=(gconst5*x10811);
evalcond[0]=((((-1.0)*x10813*x10819))+((r20*x10820))+(((-1.0)*r22*x10818)));
evalcond[1]=((((-1.0)*r12*x10818))+((x10811*x10814))+(((-1.0)*x10816*x10819)));
evalcond[2]=((((-1.0)*r02*x10819))+(((-1.0)*gconst5*r00*x10818))+((x10812*x10817)));
evalcond[3]=((-1.0)+(((-1.0)*x10817*x10819))+(((-1.0)*r02*x10818))+((r00*x10820)));
evalcond[4]=((((-1.0)*cj1*x10815))+(((-1.0)*gconst5*r20*x10818))+((x10812*x10813))+((sj1*sj2))+(((-1.0)*r22*x10819)));
evalcond[5]=((((-1.0)*x10814*x10818))+((x10812*x10816))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x10819))+(((-1.0)*sj1*x10815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10821=((1.0)*gconst4);
CheckValue<IkReal> x10822 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10821)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10822.valid){
continue;
}
CheckValue<IkReal> x10823=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10821))+(((-1.0)*gconst5*r21)))),-1);
if(!x10823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10822.value)+(((1.5707963267949)*(x10823.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10824=IKsin(j4);
IkReal x10825=IKcos(j4);
IkReal x10826=(gconst4*r21);
IkReal x10827=(gconst5*r10);
IkReal x10828=((1.0)*cj2);
IkReal x10829=(gconst4*r11);
IkReal x10830=(gconst4*r01);
IkReal x10831=((1.0)*x10825);
IkReal x10832=((1.0)*x10824);
IkReal x10833=(gconst5*x10824);
evalcond[0]=((((-1.0)*x10826*x10832))+((r20*x10833))+(((-1.0)*r22*x10831)));
evalcond[1]=((((-1.0)*x10829*x10832))+(((-1.0)*r12*x10831))+((x10824*x10827)));
evalcond[2]=(((x10825*x10830))+(((-1.0)*gconst5*r00*x10831))+(((-1.0)*r02*x10832)));
evalcond[3]=((-1.0)+(((-1.0)*x10830*x10832))+((r00*x10833))+(((-1.0)*r02*x10831)));
evalcond[4]=(((x10825*x10826))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10831))+(((-1.0)*r22*x10832))+(((-1.0)*cj1*x10828)));
evalcond[5]=(((x10825*x10829))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x10832))+(((-1.0)*x10827*x10831))+(((-1.0)*sj1*x10828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10834=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10834.valid){
continue;
}
CheckValue<IkReal> x10835 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10834.value)))+(x10835.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10836=IKsin(j4);
IkReal x10837=IKcos(j4);
IkReal x10838=(gconst4*r21);
IkReal x10839=(gconst5*r10);
IkReal x10840=((1.0)*cj2);
IkReal x10841=(gconst4*r11);
IkReal x10842=(gconst4*r01);
IkReal x10843=((1.0)*x10837);
IkReal x10844=((1.0)*x10836);
IkReal x10845=(gconst5*x10836);
evalcond[0]=((((-1.0)*r22*x10843))+((r20*x10845))+(((-1.0)*x10838*x10844)));
evalcond[1]=(((x10836*x10839))+(((-1.0)*r12*x10843))+(((-1.0)*x10841*x10844)));
evalcond[2]=((((-1.0)*r02*x10844))+(((-1.0)*gconst5*r00*x10843))+((x10837*x10842)));
evalcond[3]=((-1.0)+((r00*x10845))+(((-1.0)*r02*x10843))+(((-1.0)*x10842*x10844)));
evalcond[4]=((((-1.0)*cj1*x10840))+(((-1.0)*r22*x10844))+((sj1*sj2))+((x10837*x10838))+(((-1.0)*gconst5*r20*x10843)));
evalcond[5]=((((-1.0)*sj1*x10840))+(((-1.0)*x10839*x10843))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x10844))+((x10837*x10841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10848 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10848.valid){
continue;
}
IkReal x10846=((1.0)*(x10848.value));
IkReal x10847=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10846)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10846)));
IkReal gconst4=((1.0)*r21*x10847);
IkReal gconst5=((-1.0)*r20*x10847);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10851 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10851.valid){
continue;
}
IkReal x10849=((1.0)*(x10851.value));
IkReal x10850=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10849)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10849)));
IkReal gconst4=((1.0)*r21*x10850);
IkReal gconst5=((-1.0)*r20*x10850);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10854 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10854.valid){
continue;
}
IkReal x10852=((1.0)*(x10854.value));
IkReal x10853=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10852)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10852)));
IkReal gconst4=((1.0)*r21*x10853);
IkReal gconst5=((-1.0)*r20*x10853);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10855=(gconst5*r00);
IkReal x10856=(gconst4*r01);
CheckValue<IkReal> x10857=IKPowWithIntegerCheck(IKsign(((x10855*x10855)+(x10856*x10856)+(((-2.0)*x10855*x10856))+(r02*r02))),-1);
if(!x10857.valid){
continue;
}
CheckValue<IkReal> x10858 = IKatan2WithCheck(IkReal(((((-1.0)*x10856))+x10855)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10857.value)))+(x10858.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10859=IKcos(j4);
IkReal x10860=IKsin(j4);
IkReal x10861=((1.0)*cj2);
IkReal x10862=((1.0)*x10859);
IkReal x10863=(gconst5*x10859);
IkReal x10864=(gconst5*x10860);
IkReal x10865=((1.0)*gconst4*x10860);
evalcond[0]=((((-1.0)*gconst4*r01*x10862))+((r00*x10863))+((r02*x10860)));
evalcond[1]=((((-1.0)*r22*x10862))+(((-1.0)*r21*x10865))+((r20*x10864)));
evalcond[2]=((((-1.0)*r12*x10862))+(((-1.0)*r11*x10865))+((r10*x10864)));
evalcond[3]=((-1.0)+((r00*x10864))+(((-1.0)*r01*x10865))+(((-1.0)*r02*x10862)));
evalcond[4]=(((sj1*sj2))+((r20*x10863))+((r22*x10860))+(((-1.0)*cj1*x10861))+(((-1.0)*gconst4*r21*x10862)));
evalcond[5]=(((r12*x10860))+((r10*x10863))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10861))+(((-1.0)*gconst4*r11*x10862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10866=((1.0)*gconst4);
CheckValue<IkReal> x10867 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x10866))+((gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10867.valid){
continue;
}
CheckValue<IkReal> x10868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10866))+(((-1.0)*gconst5*r21)))),-1);
if(!x10868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10867.value)+(((1.5707963267949)*(x10868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10869=IKcos(j4);
IkReal x10870=IKsin(j4);
IkReal x10871=((1.0)*cj2);
IkReal x10872=((1.0)*x10869);
IkReal x10873=(gconst5*x10869);
IkReal x10874=(gconst5*x10870);
IkReal x10875=((1.0)*gconst4*x10870);
evalcond[0]=(((r02*x10870))+(((-1.0)*gconst4*r01*x10872))+((r00*x10873)));
evalcond[1]=((((-1.0)*r22*x10872))+(((-1.0)*r21*x10875))+((r20*x10874)));
evalcond[2]=((((-1.0)*r11*x10875))+(((-1.0)*r12*x10872))+((r10*x10874)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x10875))+(((-1.0)*r02*x10872))+((r00*x10874)));
evalcond[4]=(((sj1*sj2))+((r20*x10873))+(((-1.0)*cj1*x10871))+(((-1.0)*gconst4*r21*x10872))+((r22*x10870)));
evalcond[5]=(((r12*x10870))+((r10*x10873))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r11*x10872))+(((-1.0)*sj1*x10871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10876=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10876.valid){
continue;
}
CheckValue<IkReal> x10877 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10876.value)))+(x10877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10878=IKcos(j4);
IkReal x10879=IKsin(j4);
IkReal x10880=((1.0)*cj2);
IkReal x10881=((1.0)*x10878);
IkReal x10882=(gconst5*x10878);
IkReal x10883=(gconst5*x10879);
IkReal x10884=((1.0)*gconst4*x10879);
evalcond[0]=((((-1.0)*gconst4*r01*x10881))+((r02*x10879))+((r00*x10882)));
evalcond[1]=((((-1.0)*r22*x10881))+(((-1.0)*r21*x10884))+((r20*x10883)));
evalcond[2]=((((-1.0)*r11*x10884))+((r10*x10883))+(((-1.0)*r12*x10881)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x10884))+((r00*x10883))+(((-1.0)*r02*x10881)));
evalcond[4]=((((-1.0)*cj1*x10880))+(((-1.0)*gconst4*r21*x10881))+((sj1*sj2))+((r22*x10879))+((r20*x10882)));
evalcond[5]=((((-1.0)*sj1*x10880))+((r12*x10879))+(((-1.0)*gconst4*r11*x10881))+(((-1.0)*cj1*sj2))+((r10*x10882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10887 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10887.valid){
continue;
}
IkReal x10885=((1.0)*(x10887.value));
IkReal x10886=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10885)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10885)));
IkReal gconst4=((1.0)*r21*x10886);
IkReal gconst5=((-1.0)*r20*x10886);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10890 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10890.valid){
continue;
}
IkReal x10888=((1.0)*(x10890.value));
IkReal x10889=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10888)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10888)));
IkReal gconst4=((1.0)*r21*x10889);
IkReal gconst5=((-1.0)*r20*x10889);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10893 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10893.valid){
continue;
}
IkReal x10891=((1.0)*(x10893.value));
IkReal x10892=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10891)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10891)));
IkReal gconst4=((1.0)*r21*x10892);
IkReal gconst5=((-1.0)*r20*x10892);
IkReal x10894=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10898=IKPowWithIntegerCheck(x10894,-1);
if(!x10898.valid){
continue;
}
IkReal x10895=x10898.value;
IkReal x10896=((1.0)*x10895);
IkReal x10897=((((-1.0)*x10896*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10896*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10895)));
j4eval[0]=x10897;
j4eval[1]=r02;
j4eval[2]=x10894;
j4eval[3]=IKsign(x10897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10899=(gconst4*r01);
IkReal x10900=(gconst5*r00);
CheckValue<IkReal> x10901=IKPowWithIntegerCheck(IKsign(((((2.0)*x10899*x10900))+(((-1.0)*(x10899*x10899)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10900*x10900))))),-1);
if(!x10901.valid){
continue;
}
CheckValue<IkReal> x10902 = IKatan2WithCheck(IkReal(((((-1.0)*x10900))+x10899)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10901.value)))+(x10902.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10903=IKsin(j4);
IkReal x10904=IKcos(j4);
IkReal x10905=(gconst4*r21);
IkReal x10906=(gconst5*r10);
IkReal x10907=((1.0)*sj1);
IkReal x10908=(gconst4*r11);
IkReal x10909=(gconst4*r01);
IkReal x10910=((1.0)*x10904);
IkReal x10911=((1.0)*x10903);
IkReal x10912=(gconst5*x10903);
evalcond[0]=((((-1.0)*r22*x10910))+(((-1.0)*x10905*x10911))+((r20*x10912)));
evalcond[1]=((((-1.0)*x10908*x10911))+(((-1.0)*r12*x10910))+((x10903*x10906)));
evalcond[2]=((((-1.0)*r02*x10911))+((x10904*x10909))+(((-1.0)*gconst5*r00*x10910)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10910))+((r00*x10912))+(((-1.0)*x10909*x10911)));
evalcond[4]=((((-1.0)*r12*x10911))+(((-1.0)*x10906*x10910))+((x10904*x10908))+(((-1.0)*sj2*x10907))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x10911))+(((-1.0)*cj1*sj2))+((x10904*x10905))+(((-1.0)*gconst5*r20*x10910))+(((-1.0)*cj2*x10907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10913=((1.0)*gconst4);
CheckValue<IkReal> x10914 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x10913))+((gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10914.valid){
continue;
}
CheckValue<IkReal> x10915=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10913))+(((-1.0)*gconst5*r21)))),-1);
if(!x10915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10914.value)+(((1.5707963267949)*(x10915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10916=IKsin(j4);
IkReal x10917=IKcos(j4);
IkReal x10918=(gconst4*r21);
IkReal x10919=(gconst5*r10);
IkReal x10920=((1.0)*sj1);
IkReal x10921=(gconst4*r11);
IkReal x10922=(gconst4*r01);
IkReal x10923=((1.0)*x10917);
IkReal x10924=((1.0)*x10916);
IkReal x10925=(gconst5*x10916);
evalcond[0]=((((-1.0)*r22*x10923))+(((-1.0)*x10918*x10924))+((r20*x10925)));
evalcond[1]=((((-1.0)*r12*x10923))+(((-1.0)*x10921*x10924))+((x10916*x10919)));
evalcond[2]=((((-1.0)*gconst5*r00*x10923))+((x10917*x10922))+(((-1.0)*r02*x10924)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10923))+((r00*x10925))+(((-1.0)*x10922*x10924)));
evalcond[4]=((((-1.0)*sj2*x10920))+((x10917*x10921))+(((-1.0)*r12*x10924))+(((-1.0)*x10919*x10923))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x10924))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst5*r20*x10923))+(((-1.0)*cj2*x10920))+((x10917*x10918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10926=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10926.valid){
continue;
}
CheckValue<IkReal> x10927 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10926.value)))+(x10927.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10928=IKsin(j4);
IkReal x10929=IKcos(j4);
IkReal x10930=(gconst4*r21);
IkReal x10931=(gconst5*r10);
IkReal x10932=((1.0)*sj1);
IkReal x10933=(gconst4*r11);
IkReal x10934=(gconst4*r01);
IkReal x10935=((1.0)*x10929);
IkReal x10936=((1.0)*x10928);
IkReal x10937=(gconst5*x10928);
evalcond[0]=((((-1.0)*r22*x10935))+(((-1.0)*x10930*x10936))+((r20*x10937)));
evalcond[1]=((((-1.0)*r12*x10935))+((x10928*x10931))+(((-1.0)*x10933*x10936)));
evalcond[2]=(((x10929*x10934))+(((-1.0)*r02*x10936))+(((-1.0)*gconst5*r00*x10935)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10935))+(((-1.0)*x10934*x10936))+((r00*x10937)));
evalcond[4]=((((-1.0)*r12*x10936))+(((-1.0)*x10931*x10935))+((x10929*x10933))+((cj1*cj2))+(((-1.0)*sj2*x10932)));
evalcond[5]=((((-1.0)*r22*x10936))+((x10929*x10930))+(((-1.0)*gconst5*r20*x10935))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x10932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10940 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10940.valid){
continue;
}
IkReal x10938=((1.0)*(x10940.value));
IkReal x10939=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10938)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10938)));
IkReal gconst4=((1.0)*r21*x10939);
IkReal gconst5=((-1.0)*r20*x10939);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10943 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10943.valid){
continue;
}
IkReal x10941=((1.0)*(x10943.value));
IkReal x10942=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10941)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10941)));
IkReal gconst4=((1.0)*r21*x10942);
IkReal gconst5=((-1.0)*r20*x10942);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10946 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10946.valid){
continue;
}
IkReal x10944=((1.0)*(x10946.value));
IkReal x10945=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10944)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10944)));
IkReal gconst4=((1.0)*r21*x10945);
IkReal gconst5=((-1.0)*r20*x10945);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10947=(gconst5*r00);
IkReal x10948=(gconst4*r01);
CheckValue<IkReal> x10949=IKPowWithIntegerCheck(IKsign(((x10948*x10948)+(x10947*x10947)+(r02*r02)+(((-2.0)*x10947*x10948)))),-1);
if(!x10949.valid){
continue;
}
CheckValue<IkReal> x10950 = IKatan2WithCheck(IkReal(((((-1.0)*x10948))+x10947)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10949.value)))+(x10950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10951=IKcos(j4);
IkReal x10952=IKsin(j4);
IkReal x10953=((1.0)*sj1);
IkReal x10954=((1.0)*x10951);
IkReal x10955=(gconst5*x10951);
IkReal x10956=(gconst5*x10952);
IkReal x10957=((1.0)*gconst4*x10952);
evalcond[0]=(((r02*x10952))+((r00*x10955))+(((-1.0)*gconst4*r01*x10954)));
evalcond[1]=((((-1.0)*r21*x10957))+(((-1.0)*r22*x10954))+((r20*x10956)));
evalcond[2]=(((r10*x10956))+(((-1.0)*r12*x10954))+(((-1.0)*r11*x10957)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x10957))+((r00*x10956))+(((-1.0)*r02*x10954)));
evalcond[4]=((((-1.0)*gconst4*r11*x10954))+((r10*x10955))+(((-1.0)*sj2*x10953))+((cj1*cj2))+((r12*x10952)));
evalcond[5]=((((-1.0)*gconst4*r21*x10954))+(((-1.0)*cj2*x10953))+((r22*x10952))+(((-1.0)*cj1*sj2))+((r20*x10955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10958=((1.0)*gconst4);
CheckValue<IkReal> x10959 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10959.valid){
continue;
}
CheckValue<IkReal> x10960=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10958))+(((-1.0)*gconst5*r21)))),-1);
if(!x10960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10959.value)+(((1.5707963267949)*(x10960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10961=IKcos(j4);
IkReal x10962=IKsin(j4);
IkReal x10963=((1.0)*sj1);
IkReal x10964=((1.0)*x10961);
IkReal x10965=(gconst5*x10961);
IkReal x10966=(gconst5*x10962);
IkReal x10967=((1.0)*gconst4*x10962);
evalcond[0]=(((r02*x10962))+((r00*x10965))+(((-1.0)*gconst4*r01*x10964)));
evalcond[1]=((((-1.0)*r21*x10967))+(((-1.0)*r22*x10964))+((r20*x10966)));
evalcond[2]=(((r10*x10966))+(((-1.0)*r11*x10967))+(((-1.0)*r12*x10964)));
evalcond[3]=((-1.0)+((r00*x10966))+(((-1.0)*r02*x10964))+(((-1.0)*r01*x10967)));
evalcond[4]=((((-1.0)*gconst4*r11*x10964))+((r10*x10965))+((cj1*cj2))+(((-1.0)*sj2*x10963))+((r12*x10962)));
evalcond[5]=((((-1.0)*gconst4*r21*x10964))+((r22*x10962))+(((-1.0)*cj1*sj2))+((r20*x10965))+(((-1.0)*cj2*x10963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10968=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10968.valid){
continue;
}
CheckValue<IkReal> x10969 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10968.value)))+(x10969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10970=IKcos(j4);
IkReal x10971=IKsin(j4);
IkReal x10972=((1.0)*sj1);
IkReal x10973=((1.0)*x10970);
IkReal x10974=(gconst5*x10970);
IkReal x10975=(gconst5*x10971);
IkReal x10976=((1.0)*gconst4*x10971);
evalcond[0]=(((r02*x10971))+((r00*x10974))+(((-1.0)*gconst4*r01*x10973)));
evalcond[1]=((((-1.0)*r21*x10976))+(((-1.0)*r22*x10973))+((r20*x10975)));
evalcond[2]=(((r10*x10975))+(((-1.0)*r11*x10976))+(((-1.0)*r12*x10973)));
evalcond[3]=((-1.0)+((r00*x10975))+(((-1.0)*r02*x10973))+(((-1.0)*r01*x10976)));
evalcond[4]=((((-1.0)*gconst4*r11*x10973))+((r10*x10974))+((cj1*cj2))+(((-1.0)*sj2*x10972))+((r12*x10971)));
evalcond[5]=((((-1.0)*cj2*x10972))+(((-1.0)*gconst4*r21*x10973))+((r22*x10971))+(((-1.0)*cj1*sj2))+((r20*x10974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x10979 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10979.valid){
continue;
}
IkReal x10977=((1.0)*(x10979.value));
IkReal x10978=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10977)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10978);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10977)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10978;
IkReal x10980=((1.0)*r01*r21);
IkReal x10981=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10980))+(((-1.0)*x10981)));
j4eval[1]=(((sj3*x10980))+((sj3*x10981)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10984 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10984.valid){
continue;
}
IkReal x10982=((1.0)*(x10984.value));
IkReal x10983=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10982)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10983);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10982)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10983;
IkReal x10985=((1.0)*r01*r21);
IkReal x10986=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10985))+(((-1.0)*x10986)));
j4eval[1]=(((cj3*x10986))+((cj3*x10985)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10989 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10989.valid){
continue;
}
IkReal x10987=((1.0)*(x10989.value));
IkReal x10988=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10987)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10988);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10987)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10988;
IkReal x10990=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((r00*r20*x10990))+((r01*r21*x10990)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10991=((1.0)*gconst5);
CheckValue<IkReal> x10992=IKPowWithIntegerCheck(cj3,-1);
if(!x10992.valid){
continue;
}
CheckValue<IkReal> x10993=IKPowWithIntegerCheck(r12,-1);
if(!x10993.valid){
continue;
}
CheckValue<IkReal> x10994=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x10991))+((cj3*gconst4*r01))),-1);
if(!x10994.valid){
continue;
}
if( IKabs(((x10992.value)*(x10993.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10994.value)*(((((-1.0)*r01*sj3*x10991))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10992.value)*(x10993.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x10994.value)*(((((-1.0)*r01*sj3*x10991))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10992.value)*(x10993.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x10994.value)*(((((-1.0)*r01*sj3*x10991))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10995=IKsin(j4);
IkReal x10996=IKcos(j4);
IkReal x10997=((1.0)*sj3);
IkReal x10998=((1.0)*r21);
IkReal x10999=(cj3*gconst5);
IkReal x11000=(gconst5*r20);
IkReal x11001=(sj1*sj2);
IkReal x11002=((1.0)*cj2);
IkReal x11003=(gconst5*r00);
IkReal x11004=(gconst5*sj3);
IkReal x11005=(gconst4*r00);
IkReal x11006=((1.0)*cj3);
IkReal x11007=((1.0)*r01);
IkReal x11008=(gconst4*r20);
IkReal x11009=((1.0)*cj1*sj2);
IkReal x11010=(sj1*x11002);
IkReal x11011=(r12*x10995);
IkReal x11012=(gconst4*x10995);
IkReal x11013=((1.0)*x10996);
IkReal x11014=(gconst4*sj3*x10996);
IkReal x11015=(cj3*gconst4*x10996);
IkReal x11016=(x11009+x11010);
evalcond[0]=((-1.0)*r12*x10996);
evalcond[1]=(((x10995*x11000))+(((-1.0)*x10998*x11012)));
evalcond[2]=((-1.0)+(((-1.0)*x11007*x11012))+((x10995*x11003)));
evalcond[3]=((((-1.0)*x11006*x11011))+((cj1*cj2))+(((-1.0)*x11001)));
evalcond[4]=((((-1.0)*x11016))+(((-1.0)*x10997*x11011)));
evalcond[5]=(((r01*x11004))+((r01*x11015))+((sj3*x11005))+(((-1.0)*r00*x10999*x11013)));
evalcond[6]=((((-1.0)*x10999*x11007))+(((-1.0)*x11005*x11006))+(((-1.0)*x10996*x10997*x11003))+((r01*x11014)));
evalcond[7]=((((-1.0)*r20*x10999*x11013))+(((-1.0)*x11016))+((r21*x11004))+((r21*x11015))+((sj3*x11008)));
evalcond[8]=((((-1.0)*x10998*x10999))+x11001+(((-1.0)*x10996*x10997*x11000))+((r21*x11014))+(((-1.0)*cj1*x11002))+(((-1.0)*x11006*x11008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11017=((1.0)*gconst5);
IkReal x11018=(gconst4*r01);
CheckValue<IkReal> x11019=IKPowWithIntegerCheck((((gconst5*r00))+(((-1.0)*x11018))),-1);
if(!x11019.valid){
continue;
}
CheckValue<IkReal> x11020=IKPowWithIntegerCheck((((cj3*x11018))+(((-1.0)*cj3*r00*x11017))),-1);
if(!x11020.valid){
continue;
}
if( IKabs(x11019.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11020.value)*(((((-1.0)*r01*sj3*x11017))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x11019.value)+IKsqr(((x11020.value)*(((((-1.0)*r01*sj3*x11017))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x11019.value, ((x11020.value)*(((((-1.0)*r01*sj3*x11017))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11021=IKsin(j4);
IkReal x11022=IKcos(j4);
IkReal x11023=((1.0)*sj3);
IkReal x11024=((1.0)*r21);
IkReal x11025=(cj3*gconst5);
IkReal x11026=(gconst5*r20);
IkReal x11027=(sj1*sj2);
IkReal x11028=((1.0)*cj2);
IkReal x11029=(gconst5*r00);
IkReal x11030=(gconst5*sj3);
IkReal x11031=(gconst4*r00);
IkReal x11032=((1.0)*cj3);
IkReal x11033=((1.0)*r01);
IkReal x11034=(gconst4*r20);
IkReal x11035=((1.0)*cj1*sj2);
IkReal x11036=(sj1*x11028);
IkReal x11037=(r12*x11021);
IkReal x11038=(gconst4*x11021);
IkReal x11039=((1.0)*x11022);
IkReal x11040=(gconst4*sj3*x11022);
IkReal x11041=(cj3*gconst4*x11022);
IkReal x11042=(x11035+x11036);
evalcond[0]=((-1.0)*r12*x11022);
evalcond[1]=(((x11021*x11026))+(((-1.0)*x11024*x11038)));
evalcond[2]=((-1.0)+((x11021*x11029))+(((-1.0)*x11033*x11038)));
evalcond[3]=((((-1.0)*x11027))+(((-1.0)*x11032*x11037))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x11042))+(((-1.0)*x11023*x11037)));
evalcond[5]=(((r01*x11030))+((r01*x11041))+((sj3*x11031))+(((-1.0)*r00*x11025*x11039)));
evalcond[6]=((((-1.0)*x11022*x11023*x11029))+((r01*x11040))+(((-1.0)*x11031*x11032))+(((-1.0)*x11025*x11033)));
evalcond[7]=((((-1.0)*x11042))+((r21*x11030))+((sj3*x11034))+((r21*x11041))+(((-1.0)*r20*x11025*x11039)));
evalcond[8]=((((-1.0)*x11022*x11023*x11026))+x11027+((r21*x11040))+(((-1.0)*x11032*x11034))+(((-1.0)*x11024*x11025))+(((-1.0)*cj1*x11028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11043=(gconst5*r00);
IkReal x11044=(gconst4*r01);
CheckValue<IkReal> x11045=IKPowWithIntegerCheck((x11043+(((-1.0)*x11044))),-1);
if(!x11045.valid){
continue;
}
CheckValue<IkReal> x11046=IKPowWithIntegerCheck(((((-1.0)*sj3*x11043))+((sj3*x11044))),-1);
if(!x11046.valid){
continue;
}
if( IKabs(x11045.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11046.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x11045.value)+IKsqr(((x11046.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x11045.value, ((x11046.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11047=IKsin(j4);
IkReal x11048=IKcos(j4);
IkReal x11049=((1.0)*sj3);
IkReal x11050=((1.0)*r21);
IkReal x11051=(cj3*gconst5);
IkReal x11052=(gconst5*r20);
IkReal x11053=(sj1*sj2);
IkReal x11054=((1.0)*cj2);
IkReal x11055=(gconst5*r00);
IkReal x11056=(gconst5*sj3);
IkReal x11057=(gconst4*r00);
IkReal x11058=((1.0)*cj3);
IkReal x11059=((1.0)*r01);
IkReal x11060=(gconst4*r20);
IkReal x11061=((1.0)*cj1*sj2);
IkReal x11062=(sj1*x11054);
IkReal x11063=(r12*x11047);
IkReal x11064=(gconst4*x11047);
IkReal x11065=((1.0)*x11048);
IkReal x11066=(gconst4*sj3*x11048);
IkReal x11067=(cj3*gconst4*x11048);
IkReal x11068=(x11062+x11061);
evalcond[0]=((-1.0)*r12*x11048);
evalcond[1]=((((-1.0)*x11050*x11064))+((x11047*x11052)));
evalcond[2]=((-1.0)+((x11047*x11055))+(((-1.0)*x11059*x11064)));
evalcond[3]=((((-1.0)*x11058*x11063))+(((-1.0)*x11053))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x11068))+(((-1.0)*x11049*x11063)));
evalcond[5]=(((sj3*x11057))+((r01*x11056))+(((-1.0)*r00*x11051*x11065))+((r01*x11067)));
evalcond[6]=((((-1.0)*x11051*x11059))+((r01*x11066))+(((-1.0)*x11048*x11049*x11055))+(((-1.0)*x11057*x11058)));
evalcond[7]=((((-1.0)*x11068))+(((-1.0)*r20*x11051*x11065))+((r21*x11067))+((sj3*x11060))+((r21*x11056)));
evalcond[8]=((((-1.0)*x11058*x11060))+x11053+((r21*x11066))+(((-1.0)*x11048*x11049*x11052))+(((-1.0)*x11050*x11051))+(((-1.0)*cj1*x11054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11069=gconst4*gconst4;
IkReal x11070=gconst5*gconst5;
IkReal x11071=(cj3*r20);
IkReal x11072=(r00*sj3);
IkReal x11073=(r01*sj3);
IkReal x11074=(gconst4*gconst5);
IkReal x11075=(r21*x11069);
IkReal x11076=((1.0)*r01*x11074);
CheckValue<IkReal> x11077=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*r00*r21*x11074))+(((-1.0)*x11071*x11076))+((cj3*r01*x11075))+((cj3*r02*r22))+((r00*x11070*x11071)))),-1);
if(!x11077.valid){
continue;
}
CheckValue<IkReal> x11078 = IKatan2WithCheck(IkReal((((gconst4*r22*x11072))+((gconst5*r22*x11073)))),IkReal(((((-1.0)*x11072*x11075))+((r20*x11072*x11074))+(((-1.0)*r21*x11073*x11074))+((r20*x11070*x11073)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11077.value)))+(x11078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11079=IKsin(j4);
IkReal x11080=IKcos(j4);
IkReal x11081=(gconst5*sj3);
IkReal x11082=((1.0)*r21);
IkReal x11083=(cj3*gconst5);
IkReal x11084=((1.0)*sj2);
IkReal x11085=((1.0)*r11);
IkReal x11086=((1.0)*cj2);
IkReal x11087=((1.0)*cj3);
IkReal x11088=(gconst4*r10);
IkReal x11089=(gconst4*r00);
IkReal x11090=((1.0)*r01);
IkReal x11091=((1.0)*sj3);
IkReal x11092=(gconst4*r20);
IkReal x11093=(cj1*x11084);
IkReal x11094=(sj1*x11086);
IkReal x11095=((1.0)*x11080);
IkReal x11096=(gconst4*x11079);
IkReal x11097=(r22*x11079);
IkReal x11098=(gconst5*x11079);
IkReal x11099=(r02*x11079);
IkReal x11100=(r12*x11079);
IkReal x11101=(gconst4*sj3*x11080);
IkReal x11102=(cj3*gconst4*x11080);
IkReal x11103=(x11094+x11093);
evalcond[0]=((((-1.0)*r22*x11095))+((r20*x11098))+(((-1.0)*x11082*x11096)));
evalcond[1]=((((-1.0)*r12*x11095))+(((-1.0)*x11085*x11096))+((r10*x11098)));
evalcond[2]=((-1.0)+((r00*x11098))+(((-1.0)*r02*x11095))+(((-1.0)*x11090*x11096)));
evalcond[3]=(((r01*x11081))+(((-1.0)*r00*x11083*x11095))+((sj3*x11089))+(((-1.0)*x11087*x11099))+((r01*x11102)));
evalcond[4]=((((-1.0)*x11091*x11099))+(((-1.0)*x11083*x11090))+(((-1.0)*r00*x11081*x11095))+(((-1.0)*x11087*x11089))+((r01*x11101)));
evalcond[5]=((((-1.0)*sj1*x11084))+((sj3*x11088))+(((-1.0)*r10*x11083*x11095))+(((-1.0)*x11087*x11100))+((r11*x11081))+((r11*x11102))+((cj1*cj2)));
evalcond[6]=(((r21*x11081))+((r21*x11102))+(((-1.0)*x11103))+((sj3*x11092))+(((-1.0)*r20*x11083*x11095))+(((-1.0)*x11087*x11097)));
evalcond[7]=((((-1.0)*cj1*x11086))+(((-1.0)*x11082*x11083))+((sj1*sj2))+(((-1.0)*x11091*x11097))+((r21*x11101))+(((-1.0)*r20*x11081*x11095))+(((-1.0)*x11087*x11092)));
evalcond[8]=((((-1.0)*r10*x11081*x11095))+(((-1.0)*x11091*x11100))+(((-1.0)*x11087*x11088))+((r11*x11101))+(((-1.0)*x11103))+(((-1.0)*x11083*x11085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11104=((1.0)*gconst4);
CheckValue<IkReal> x11105 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x11104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11105.valid){
continue;
}
CheckValue<IkReal> x11106=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x11104)))),-1);
if(!x11106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11105.value)+(((1.5707963267949)*(x11106.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11107=IKsin(j4);
IkReal x11108=IKcos(j4);
IkReal x11109=(gconst5*sj3);
IkReal x11110=((1.0)*r21);
IkReal x11111=(cj3*gconst5);
IkReal x11112=((1.0)*sj2);
IkReal x11113=((1.0)*r11);
IkReal x11114=((1.0)*cj2);
IkReal x11115=((1.0)*cj3);
IkReal x11116=(gconst4*r10);
IkReal x11117=(gconst4*r00);
IkReal x11118=((1.0)*r01);
IkReal x11119=((1.0)*sj3);
IkReal x11120=(gconst4*r20);
IkReal x11121=(cj1*x11112);
IkReal x11122=(sj1*x11114);
IkReal x11123=((1.0)*x11108);
IkReal x11124=(gconst4*x11107);
IkReal x11125=(r22*x11107);
IkReal x11126=(gconst5*x11107);
IkReal x11127=(r02*x11107);
IkReal x11128=(r12*x11107);
IkReal x11129=(gconst4*sj3*x11108);
IkReal x11130=(cj3*gconst4*x11108);
IkReal x11131=(x11122+x11121);
evalcond[0]=((((-1.0)*x11110*x11124))+(((-1.0)*r22*x11123))+((r20*x11126)));
evalcond[1]=((((-1.0)*r12*x11123))+(((-1.0)*x11113*x11124))+((r10*x11126)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11123))+(((-1.0)*x11118*x11124))+((r00*x11126)));
evalcond[3]=((((-1.0)*r00*x11111*x11123))+((sj3*x11117))+(((-1.0)*x11115*x11127))+((r01*x11130))+((r01*x11109)));
evalcond[4]=((((-1.0)*x11119*x11127))+(((-1.0)*x11111*x11118))+(((-1.0)*r00*x11109*x11123))+(((-1.0)*x11115*x11117))+((r01*x11129)));
evalcond[5]=((((-1.0)*r10*x11111*x11123))+((sj3*x11116))+(((-1.0)*x11115*x11128))+((r11*x11109))+((r11*x11130))+((cj1*cj2))+(((-1.0)*sj1*x11112)));
evalcond[6]=(((r21*x11130))+((r21*x11109))+(((-1.0)*x11115*x11125))+(((-1.0)*r20*x11111*x11123))+(((-1.0)*x11131))+((sj3*x11120)));
evalcond[7]=(((r21*x11129))+(((-1.0)*x11119*x11125))+(((-1.0)*cj1*x11114))+((sj1*sj2))+(((-1.0)*x11110*x11111))+(((-1.0)*x11115*x11120))+(((-1.0)*r20*x11109*x11123)));
evalcond[8]=((((-1.0)*x11119*x11128))+(((-1.0)*x11111*x11113))+(((-1.0)*x11115*x11116))+((r11*x11129))+(((-1.0)*r10*x11109*x11123))+(((-1.0)*x11131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11132=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11132.valid){
continue;
}
CheckValue<IkReal> x11133 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11132.value)))+(x11133.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11134=IKsin(j4);
IkReal x11135=IKcos(j4);
IkReal x11136=(gconst5*sj3);
IkReal x11137=((1.0)*r21);
IkReal x11138=(cj3*gconst5);
IkReal x11139=((1.0)*sj2);
IkReal x11140=((1.0)*r11);
IkReal x11141=((1.0)*cj2);
IkReal x11142=((1.0)*cj3);
IkReal x11143=(gconst4*r10);
IkReal x11144=(gconst4*r00);
IkReal x11145=((1.0)*r01);
IkReal x11146=((1.0)*sj3);
IkReal x11147=(gconst4*r20);
IkReal x11148=(cj1*x11139);
IkReal x11149=(sj1*x11141);
IkReal x11150=((1.0)*x11135);
IkReal x11151=(gconst4*x11134);
IkReal x11152=(r22*x11134);
IkReal x11153=(gconst5*x11134);
IkReal x11154=(r02*x11134);
IkReal x11155=(r12*x11134);
IkReal x11156=(gconst4*sj3*x11135);
IkReal x11157=(cj3*gconst4*x11135);
IkReal x11158=(x11148+x11149);
evalcond[0]=((((-1.0)*r22*x11150))+(((-1.0)*x11137*x11151))+((r20*x11153)));
evalcond[1]=((((-1.0)*x11140*x11151))+((r10*x11153))+(((-1.0)*r12*x11150)));
evalcond[2]=((-1.0)+((r00*x11153))+(((-1.0)*r02*x11150))+(((-1.0)*x11145*x11151)));
evalcond[3]=(((r01*x11157))+(((-1.0)*x11142*x11154))+((sj3*x11144))+(((-1.0)*r00*x11138*x11150))+((r01*x11136)));
evalcond[4]=(((r01*x11156))+(((-1.0)*x11142*x11144))+(((-1.0)*r00*x11136*x11150))+(((-1.0)*x11146*x11154))+(((-1.0)*x11138*x11145)));
evalcond[5]=((((-1.0)*x11142*x11155))+((r11*x11157))+(((-1.0)*sj1*x11139))+((r11*x11136))+((cj1*cj2))+((sj3*x11143))+(((-1.0)*r10*x11138*x11150)));
evalcond[6]=(((r21*x11157))+(((-1.0)*x11142*x11152))+(((-1.0)*r20*x11138*x11150))+((r21*x11136))+((sj3*x11147))+(((-1.0)*x11158)));
evalcond[7]=((((-1.0)*r20*x11136*x11150))+((r21*x11156))+(((-1.0)*cj1*x11141))+(((-1.0)*x11142*x11147))+((sj1*sj2))+(((-1.0)*x11146*x11152))+(((-1.0)*x11137*x11138)));
evalcond[8]=((((-1.0)*r10*x11136*x11150))+(((-1.0)*x11142*x11143))+((r11*x11156))+(((-1.0)*x11146*x11155))+(((-1.0)*x11158))+(((-1.0)*x11138*x11140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11161 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11161.valid){
continue;
}
IkReal x11159=((1.0)*(x11161.value));
IkReal x11160=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11159)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11159)));
IkReal gconst4=((1.0)*r21*x11160);
IkReal gconst5=((-1.0)*r20*x11160);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11164 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11164.valid){
continue;
}
IkReal x11162=((1.0)*(x11164.value));
IkReal x11163=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11162)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11162)));
IkReal gconst4=((1.0)*r21*x11163);
IkReal gconst5=((-1.0)*r20*x11163);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11167 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11167.valid){
continue;
}
IkReal x11165=((1.0)*(x11167.value));
IkReal x11166=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11165)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11165)));
IkReal gconst4=((1.0)*r21*x11166);
IkReal gconst5=((-1.0)*r20*x11166);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11170 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11170.valid){
continue;
}
IkReal x11168=((1.0)*(x11170.value));
IkReal x11169=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11168)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11168)));
IkReal gconst4=((1.0)*r21*x11169);
IkReal gconst5=((-1.0)*r20*x11169);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11173 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11173.valid){
continue;
}
IkReal x11171=((1.0)*(x11173.value));
IkReal x11172=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11171)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11171)));
IkReal gconst4=((1.0)*r21*x11172);
IkReal gconst5=((-1.0)*r20*x11172);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11176 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11176.valid){
continue;
}
IkReal x11174=((1.0)*(x11176.value));
IkReal x11175=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11174)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11174)));
IkReal gconst4=((1.0)*r21*x11175);
IkReal gconst5=((-1.0)*r20*x11175);
IkReal x11177=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11181=IKPowWithIntegerCheck(x11177,-1);
if(!x11181.valid){
continue;
}
IkReal x11178=x11181.value;
IkReal x11179=((1.0)*x11178);
IkReal x11180=((((-1.0)*(r12*r12)))+(((-1.0)*x11179*(r11*r11)*(r21*r21)))+(((-1.0)*x11179*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x11178)));
j4eval[0]=x11180;
j4eval[1]=r12;
j4eval[2]=x11177;
j4eval[3]=IKsign(x11180);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11182=(gconst5*r10);
IkReal x11183=(gconst4*r11);
CheckValue<IkReal> x11184 = IKatan2WithCheck(IkReal((x11183+(((-1.0)*x11182)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11184.valid){
continue;
}
CheckValue<IkReal> x11185=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11183*x11183)))+(((2.0)*x11182*x11183))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11182*x11182))))),-1);
if(!x11185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11184.value)+(((1.5707963267949)*(x11185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11186=IKsin(j4);
IkReal x11187=IKcos(j4);
IkReal x11188=(gconst4*r21);
IkReal x11189=(gconst5*r10);
IkReal x11190=(gconst4*r11);
IkReal x11191=(gconst4*r01);
IkReal x11192=((1.0)*x11187);
IkReal x11193=((1.0)*x11186);
IkReal x11194=(gconst5*x11186);
evalcond[0]=(((r20*x11194))+(((-1.0)*r22*x11192))+(((-1.0)*x11188*x11193)));
evalcond[1]=((((-1.0)*r02*x11192))+((r00*x11194))+(((-1.0)*x11191*x11193)));
evalcond[2]=((((-1.0)*r12*x11193))+(((-1.0)*x11189*x11192))+((x11187*x11190)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x11192))+((x11186*x11189))+(((-1.0)*x11190*x11193)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x11193))+((cj1*sj2))+(((-1.0)*gconst5*r00*x11192))+((x11187*x11191)));
evalcond[5]=((((-1.0)*r22*x11193))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x11192))+((x11187*x11188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11195=((1.0)*gconst4);
CheckValue<IkReal> x11196 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11195))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11196.valid){
continue;
}
CheckValue<IkReal> x11197=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11195))+(((-1.0)*gconst5*r01)))),-1);
if(!x11197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11196.value)+(((1.5707963267949)*(x11197.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11198=IKsin(j4);
IkReal x11199=IKcos(j4);
IkReal x11200=(gconst4*r21);
IkReal x11201=(gconst5*r10);
IkReal x11202=(gconst4*r11);
IkReal x11203=(gconst4*r01);
IkReal x11204=((1.0)*x11199);
IkReal x11205=((1.0)*x11198);
IkReal x11206=(gconst5*x11198);
evalcond[0]=((((-1.0)*r22*x11204))+((r20*x11206))+(((-1.0)*x11200*x11205)));
evalcond[1]=((((-1.0)*x11203*x11205))+((r00*x11206))+(((-1.0)*r02*x11204)));
evalcond[2]=((((-1.0)*r12*x11205))+((x11199*x11202))+(((-1.0)*x11201*x11204)));
evalcond[3]=((-1.0)+((x11198*x11201))+(((-1.0)*r12*x11204))+(((-1.0)*x11202*x11205)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11199*x11203))+(((-1.0)*r02*x11205))+(((-1.0)*gconst5*r00*x11204)));
evalcond[5]=((((-1.0)*r22*x11205))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x11204))+((x11199*x11200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11207 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11207.valid){
continue;
}
CheckValue<IkReal> x11208=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11207.value)+(((1.5707963267949)*(x11208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11209=IKsin(j4);
IkReal x11210=IKcos(j4);
IkReal x11211=(gconst4*r21);
IkReal x11212=(gconst5*r10);
IkReal x11213=(gconst4*r11);
IkReal x11214=(gconst4*r01);
IkReal x11215=((1.0)*x11210);
IkReal x11216=((1.0)*x11209);
IkReal x11217=(gconst5*x11209);
evalcond[0]=(((r20*x11217))+(((-1.0)*x11211*x11216))+(((-1.0)*r22*x11215)));
evalcond[1]=(((r00*x11217))+(((-1.0)*r02*x11215))+(((-1.0)*x11214*x11216)));
evalcond[2]=(((x11210*x11213))+(((-1.0)*r12*x11216))+(((-1.0)*x11212*x11215)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x11215))+((x11209*x11212))+(((-1.0)*x11213*x11216)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst5*r00*x11215))+((cj1*sj2))+((x11210*x11214))+(((-1.0)*r02*x11216)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x11215))+((x11210*x11211))+(((-1.0)*r22*x11216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11220 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11220.valid){
continue;
}
IkReal x11218=((1.0)*(x11220.value));
IkReal x11219=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11218)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11218)));
IkReal gconst4=((1.0)*r21*x11219);
IkReal gconst5=((-1.0)*r20*x11219);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11223 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11223.valid){
continue;
}
IkReal x11221=((1.0)*(x11223.value));
IkReal x11222=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11221)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11221)));
IkReal gconst4=((1.0)*r21*x11222);
IkReal gconst5=((-1.0)*r20*x11222);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11226 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11226.valid){
continue;
}
IkReal x11224=((1.0)*(x11226.value));
IkReal x11225=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11224)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11224)));
IkReal gconst4=((1.0)*r21*x11225);
IkReal gconst5=((-1.0)*r20*x11225);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11227=(gconst5*r10);
IkReal x11228=(gconst4*r11);
CheckValue<IkReal> x11229=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11228*x11228)+(x11227*x11227)+(((-2.0)*x11227*x11228)))),-1);
if(!x11229.valid){
continue;
}
CheckValue<IkReal> x11230 = IKatan2WithCheck(IkReal((x11227+(((-1.0)*x11228)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11229.value)))+(x11230.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11231=IKcos(j4);
IkReal x11232=IKsin(j4);
IkReal x11233=((1.0)*x11231);
IkReal x11234=(gconst5*x11232);
IkReal x11235=(gconst5*x11231);
IkReal x11236=((1.0)*gconst4*x11232);
evalcond[0]=(((r12*x11232))+(((-1.0)*gconst4*r11*x11233))+((r10*x11235)));
evalcond[1]=(((r20*x11234))+(((-1.0)*r21*x11236))+(((-1.0)*r22*x11233)));
evalcond[2]=((((-1.0)*r02*x11233))+(((-1.0)*r01*x11236))+((r00*x11234)));
evalcond[3]=((-1.0)+((r10*x11234))+(((-1.0)*r12*x11233))+(((-1.0)*r11*x11236)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x11232))+((r00*x11235))+(((-1.0)*gconst4*r01*x11233)));
evalcond[5]=(((r22*x11232))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11235))+(((-1.0)*gconst4*r21*x11233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11237=((1.0)*gconst4);
CheckValue<IkReal> x11238 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11237))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11238.valid){
continue;
}
CheckValue<IkReal> x11239=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11237))+(((-1.0)*gconst5*r01)))),-1);
if(!x11239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11238.value)+(((1.5707963267949)*(x11239.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11240=IKcos(j4);
IkReal x11241=IKsin(j4);
IkReal x11242=((1.0)*x11240);
IkReal x11243=(gconst5*x11241);
IkReal x11244=(gconst5*x11240);
IkReal x11245=((1.0)*gconst4*x11241);
evalcond[0]=(((r12*x11241))+(((-1.0)*gconst4*r11*x11242))+((r10*x11244)));
evalcond[1]=(((r20*x11243))+(((-1.0)*r21*x11245))+(((-1.0)*r22*x11242)));
evalcond[2]=((((-1.0)*r02*x11242))+(((-1.0)*r01*x11245))+((r00*x11243)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x11245))+((r10*x11243))+(((-1.0)*r12*x11242)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x11241))+((r00*x11244))+(((-1.0)*gconst4*r01*x11242)));
evalcond[5]=(((r22*x11241))+((r20*x11244))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11246 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11246.valid){
continue;
}
CheckValue<IkReal> x11247=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11246.value)+(((1.5707963267949)*(x11247.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11248=IKcos(j4);
IkReal x11249=IKsin(j4);
IkReal x11250=((1.0)*x11248);
IkReal x11251=(gconst5*x11249);
IkReal x11252=(gconst5*x11248);
IkReal x11253=((1.0)*gconst4*x11249);
evalcond[0]=(((r12*x11249))+(((-1.0)*gconst4*r11*x11250))+((r10*x11252)));
evalcond[1]=(((r20*x11251))+(((-1.0)*r21*x11253))+(((-1.0)*r22*x11250)));
evalcond[2]=((((-1.0)*r02*x11250))+(((-1.0)*r01*x11253))+((r00*x11251)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x11253))+((r10*x11251))+(((-1.0)*r12*x11250)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x11249))+((r00*x11252))+(((-1.0)*gconst4*r01*x11250)));
evalcond[5]=(((r22*x11249))+((r20*x11252))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11256 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11256.valid){
continue;
}
IkReal x11254=((1.0)*(x11256.value));
IkReal x11255=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11254)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11254)));
IkReal gconst4=((1.0)*r21*x11255);
IkReal gconst5=((-1.0)*r20*x11255);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11259 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11259.valid){
continue;
}
IkReal x11257=((1.0)*(x11259.value));
IkReal x11258=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11257)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11257)));
IkReal gconst4=((1.0)*r21*x11258);
IkReal gconst5=((-1.0)*r20*x11258);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11262 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11262.valid){
continue;
}
IkReal x11260=((1.0)*(x11262.value));
IkReal x11261=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11260)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11260)));
IkReal gconst4=((1.0)*r21*x11261);
IkReal gconst5=((-1.0)*r20*x11261);
IkReal x11263=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11267=IKPowWithIntegerCheck(x11263,-1);
if(!x11267.valid){
continue;
}
IkReal x11264=x11267.value;
IkReal x11265=((1.0)*x11264);
IkReal x11266=((((-1.0)*x11265*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x11264))+(((-1.0)*x11265*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x11266;
j4eval[1]=r12;
j4eval[2]=x11263;
j4eval[3]=IKsign(x11266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11268=(gconst5*r10);
IkReal x11269=(gconst4*r11);
CheckValue<IkReal> x11270=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11269*x11269)))+(((-1.0)*(x11268*x11268)))+(((-1.0)*(r12*r12)))+(((2.0)*x11268*x11269)))),-1);
if(!x11270.valid){
continue;
}
CheckValue<IkReal> x11271 = IKatan2WithCheck(IkReal(((((-1.0)*x11268))+x11269)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11270.value)))+(x11271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11272=IKsin(j4);
IkReal x11273=IKcos(j4);
IkReal x11274=(gconst4*r21);
IkReal x11275=(gconst5*r10);
IkReal x11276=((1.0)*cj2);
IkReal x11277=(gconst4*r11);
IkReal x11278=(gconst4*r01);
IkReal x11279=((1.0)*x11273);
IkReal x11280=((1.0)*x11272);
IkReal x11281=(gconst5*x11272);
evalcond[0]=((((-1.0)*x11274*x11280))+(((-1.0)*r22*x11279))+((r20*x11281)));
evalcond[1]=((((-1.0)*x11278*x11280))+(((-1.0)*r02*x11279))+((r00*x11281)));
evalcond[2]=((((-1.0)*r12*x11280))+((x11273*x11277))+(((-1.0)*x11275*x11279)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x11279))+(((-1.0)*x11277*x11280))+((x11272*x11275)));
evalcond[4]=((((-1.0)*r02*x11280))+((x11273*x11278))+(((-1.0)*gconst5*r00*x11279))+((sj1*sj2))+(((-1.0)*cj1*x11276)));
evalcond[5]=(((x11273*x11274))+(((-1.0)*gconst5*r20*x11279))+(((-1.0)*r22*x11280))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11282=((1.0)*gconst4);
CheckValue<IkReal> x11283=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11282))+(((-1.0)*gconst5*r01)))),-1);
if(!x11283.valid){
continue;
}
CheckValue<IkReal> x11284 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11282))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11283.value)))+(x11284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11285=IKsin(j4);
IkReal x11286=IKcos(j4);
IkReal x11287=(gconst4*r21);
IkReal x11288=(gconst5*r10);
IkReal x11289=((1.0)*cj2);
IkReal x11290=(gconst4*r11);
IkReal x11291=(gconst4*r01);
IkReal x11292=((1.0)*x11286);
IkReal x11293=((1.0)*x11285);
IkReal x11294=(gconst5*x11285);
evalcond[0]=((((-1.0)*r22*x11292))+((r20*x11294))+(((-1.0)*x11287*x11293)));
evalcond[1]=((((-1.0)*x11291*x11293))+(((-1.0)*r02*x11292))+((r00*x11294)));
evalcond[2]=((((-1.0)*x11288*x11292))+(((-1.0)*r12*x11293))+((x11286*x11290)));
evalcond[3]=((-1.0)+(((-1.0)*x11290*x11293))+(((-1.0)*r12*x11292))+((x11285*x11288)));
evalcond[4]=((((-1.0)*r02*x11293))+(((-1.0)*cj1*x11289))+((sj1*sj2))+(((-1.0)*gconst5*r00*x11292))+((x11286*x11291)));
evalcond[5]=((((-1.0)*r22*x11293))+(((-1.0)*cj1*sj2))+((x11286*x11287))+(((-1.0)*sj1*x11289))+(((-1.0)*gconst5*r20*x11292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11295 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11295.valid){
continue;
}
CheckValue<IkReal> x11296=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11295.value)+(((1.5707963267949)*(x11296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11297=IKsin(j4);
IkReal x11298=IKcos(j4);
IkReal x11299=(gconst4*r21);
IkReal x11300=(gconst5*r10);
IkReal x11301=((1.0)*cj2);
IkReal x11302=(gconst4*r11);
IkReal x11303=(gconst4*r01);
IkReal x11304=((1.0)*x11298);
IkReal x11305=((1.0)*x11297);
IkReal x11306=(gconst5*x11297);
evalcond[0]=((((-1.0)*x11299*x11305))+((r20*x11306))+(((-1.0)*r22*x11304)));
evalcond[1]=(((r00*x11306))+(((-1.0)*x11303*x11305))+(((-1.0)*r02*x11304)));
evalcond[2]=((((-1.0)*r12*x11305))+((x11298*x11302))+(((-1.0)*x11300*x11304)));
evalcond[3]=((-1.0)+((x11297*x11300))+(((-1.0)*x11302*x11305))+(((-1.0)*r12*x11304)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r02*x11305))+(((-1.0)*gconst5*r00*x11304))+((x11298*x11303))+(((-1.0)*cj1*x11301)));
evalcond[5]=((((-1.0)*gconst5*r20*x11304))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11301))+(((-1.0)*r22*x11305))+((x11298*x11299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11309 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11309.valid){
continue;
}
IkReal x11307=((1.0)*(x11309.value));
IkReal x11308=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11307)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11307)));
IkReal gconst4=((1.0)*r21*x11308);
IkReal gconst5=((-1.0)*r20*x11308);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11312 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11312.valid){
continue;
}
IkReal x11310=((1.0)*(x11312.value));
IkReal x11311=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11310)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11310)));
IkReal gconst4=((1.0)*r21*x11311);
IkReal gconst5=((-1.0)*r20*x11311);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11315 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11315.valid){
continue;
}
IkReal x11313=((1.0)*(x11315.value));
IkReal x11314=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11313)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11313)));
IkReal gconst4=((1.0)*r21*x11314);
IkReal gconst5=((-1.0)*r20*x11314);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11316=(gconst5*r10);
IkReal x11317=(gconst4*r11);
CheckValue<IkReal> x11318=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11316*x11316)+(((-2.0)*x11316*x11317))+(x11317*x11317))),-1);
if(!x11318.valid){
continue;
}
CheckValue<IkReal> x11319 = IKatan2WithCheck(IkReal((x11316+(((-1.0)*x11317)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11318.value)))+(x11319.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11320=IKcos(j4);
IkReal x11321=IKsin(j4);
IkReal x11322=((1.0)*cj2);
IkReal x11323=((1.0)*x11320);
IkReal x11324=(gconst5*x11321);
IkReal x11325=(gconst5*x11320);
IkReal x11326=((1.0)*gconst4*x11321);
evalcond[0]=(((r10*x11325))+(((-1.0)*gconst4*r11*x11323))+((r12*x11321)));
evalcond[1]=((((-1.0)*r22*x11323))+(((-1.0)*r21*x11326))+((r20*x11324)));
evalcond[2]=((((-1.0)*r02*x11323))+(((-1.0)*r01*x11326))+((r00*x11324)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x11323))+((r10*x11324))+(((-1.0)*r11*x11326)));
evalcond[4]=((((-1.0)*gconst4*r01*x11323))+((sj1*sj2))+((r02*x11321))+(((-1.0)*cj1*x11322))+((r00*x11325)));
evalcond[5]=(((r22*x11321))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r21*x11323))+((r20*x11325))+(((-1.0)*sj1*x11322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11327=((1.0)*gconst4);
CheckValue<IkReal> x11328 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11327))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11328.valid){
continue;
}
CheckValue<IkReal> x11329=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11327))+(((-1.0)*gconst5*r01)))),-1);
if(!x11329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11328.value)+(((1.5707963267949)*(x11329.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11330=IKcos(j4);
IkReal x11331=IKsin(j4);
IkReal x11332=((1.0)*cj2);
IkReal x11333=((1.0)*x11330);
IkReal x11334=(gconst5*x11331);
IkReal x11335=(gconst5*x11330);
IkReal x11336=((1.0)*gconst4*x11331);
evalcond[0]=(((r12*x11331))+((r10*x11335))+(((-1.0)*gconst4*r11*x11333)));
evalcond[1]=((((-1.0)*r21*x11336))+(((-1.0)*r22*x11333))+((r20*x11334)));
evalcond[2]=((((-1.0)*r01*x11336))+((r00*x11334))+(((-1.0)*r02*x11333)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x11333))+((r10*x11334))+(((-1.0)*r11*x11336)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x11332))+((r00*x11335))+(((-1.0)*gconst4*r01*x11333))+((r02*x11331)));
evalcond[5]=(((r20*x11335))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11332))+(((-1.0)*gconst4*r21*x11333))+((r22*x11331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11337 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11337.valid){
continue;
}
CheckValue<IkReal> x11338=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11337.value)+(((1.5707963267949)*(x11338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11339=IKcos(j4);
IkReal x11340=IKsin(j4);
IkReal x11341=((1.0)*cj2);
IkReal x11342=((1.0)*x11339);
IkReal x11343=(gconst5*x11340);
IkReal x11344=(gconst5*x11339);
IkReal x11345=((1.0)*gconst4*x11340);
evalcond[0]=(((r10*x11344))+((r12*x11340))+(((-1.0)*gconst4*r11*x11342)));
evalcond[1]=((((-1.0)*r21*x11345))+((r20*x11343))+(((-1.0)*r22*x11342)));
evalcond[2]=((((-1.0)*r01*x11345))+((r00*x11343))+(((-1.0)*r02*x11342)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x11345))+((r10*x11343))+(((-1.0)*r12*x11342)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x11341))+((r00*x11344))+(((-1.0)*gconst4*r01*x11342))+((r02*x11340)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r20*x11344))+(((-1.0)*sj1*x11341))+(((-1.0)*gconst4*r21*x11342))+((r22*x11340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)+r12);
op[1]=((((-2.0)*gconst4*r11))+(((2.0)*gconst5*r10)));
op[2]=((-1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11346=gconst5*gconst5;
IkReal x11347=gconst4*gconst4;
IkReal x11348=(cj3*r10);
IkReal x11349=(r11*sj3);
IkReal x11350=(r10*sj3);
IkReal x11351=(cj3*r11);
IkReal x11352=(r21*x11347);
IkReal x11353=(gconst4*gconst5*r20);
IkReal x11354=(r20*x11346);
IkReal x11355=((1.0)*gconst4*gconst5*r21);
CheckValue<IkReal> x11356 = IKatan2WithCheck(IkReal((((gconst4*r22*x11350))+((gconst5*r22*x11349)))),IkReal((((x11349*x11354))+(((-1.0)*x11349*x11355))+((x11350*x11353))+(((-1.0)*x11350*x11352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11356.valid){
continue;
}
CheckValue<IkReal> x11357=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x11348*x11355))+((x11351*x11352))+(((-1.0)*x11351*x11353))+((x11348*x11354)))),-1);
if(!x11357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11356.value)+(((1.5707963267949)*(x11357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11358=IKsin(j4);
IkReal x11359=IKcos(j4);
IkReal x11360=(sj1*sj2);
IkReal x11361=(cj3*gconst5);
IkReal x11362=((1.0)*cj1);
IkReal x11363=(gconst5*sj3);
IkReal x11364=(gconst4*r21);
IkReal x11365=(gconst4*r11);
IkReal x11366=(gconst4*r01);
IkReal x11367=(cj2*sj1);
IkReal x11368=(gconst4*r10);
IkReal x11369=((1.0)*cj3);
IkReal x11370=(gconst4*r00);
IkReal x11371=(gconst4*r20);
IkReal x11372=(cj2*x11362);
IkReal x11373=((1.0)*x11359);
IkReal x11374=((1.0)*x11358);
IkReal x11375=(sj3*x11359);
IkReal x11376=(gconst5*x11358);
IkReal x11377=(cj3*x11359);
evalcond[0]=(((r20*x11376))+(((-1.0)*r22*x11373))+(((-1.0)*x11364*x11374)));
evalcond[1]=(((r00*x11376))+(((-1.0)*r02*x11373))+(((-1.0)*x11366*x11374)));
evalcond[2]=((-1.0)+((r10*x11376))+(((-1.0)*r12*x11373))+(((-1.0)*x11365*x11374)));
evalcond[3]=((((-1.0)*r10*x11361*x11373))+(((-1.0)*r12*x11358*x11369))+((r11*x11363))+((x11365*x11377))+((sj3*x11368)));
evalcond[4]=((((-1.0)*r12*sj3*x11374))+(((-1.0)*r10*x11363*x11373))+(((-1.0)*r11*x11361))+(((-1.0)*x11368*x11369))+((x11365*x11375)));
evalcond[5]=(((r01*x11363))+(((-1.0)*x11372))+x11360+((x11366*x11377))+(((-1.0)*r00*x11361*x11373))+((sj3*x11370))+(((-1.0)*r02*x11358*x11369)));
evalcond[6]=((((-1.0)*r22*x11358*x11369))+((r21*x11363))+(((-1.0)*sj2*x11362))+(((-1.0)*x11367))+(((-1.0)*r20*x11361*x11373))+((x11364*x11377))+((sj3*x11371)));
evalcond[7]=((((-1.0)*x11369*x11370))+((cj1*sj2))+x11367+((x11366*x11375))+(((-1.0)*r00*x11363*x11373))+(((-1.0)*r01*x11361))+(((-1.0)*r02*sj3*x11374)));
evalcond[8]=((((-1.0)*x11372))+(((-1.0)*r21*x11361))+(((-1.0)*x11369*x11371))+(((-1.0)*r22*sj3*x11374))+x11360+((x11364*x11375))+(((-1.0)*r20*x11363*x11373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11378=((1.0)*gconst4);
CheckValue<IkReal> x11379 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11378))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11379.valid){
continue;
}
CheckValue<IkReal> x11380=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11378))+(((-1.0)*gconst5*r01)))),-1);
if(!x11380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11379.value)+(((1.5707963267949)*(x11380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11381=IKsin(j4);
IkReal x11382=IKcos(j4);
IkReal x11383=(sj1*sj2);
IkReal x11384=(cj3*gconst5);
IkReal x11385=((1.0)*cj1);
IkReal x11386=(gconst5*sj3);
IkReal x11387=(gconst4*r21);
IkReal x11388=(gconst4*r11);
IkReal x11389=(gconst4*r01);
IkReal x11390=(cj2*sj1);
IkReal x11391=(gconst4*r10);
IkReal x11392=((1.0)*cj3);
IkReal x11393=(gconst4*r00);
IkReal x11394=(gconst4*r20);
IkReal x11395=(cj2*x11385);
IkReal x11396=((1.0)*x11382);
IkReal x11397=((1.0)*x11381);
IkReal x11398=(sj3*x11382);
IkReal x11399=(gconst5*x11381);
IkReal x11400=(cj3*x11382);
evalcond[0]=(((r20*x11399))+(((-1.0)*r22*x11396))+(((-1.0)*x11387*x11397)));
evalcond[1]=(((r00*x11399))+(((-1.0)*r02*x11396))+(((-1.0)*x11389*x11397)));
evalcond[2]=((-1.0)+((r10*x11399))+(((-1.0)*r12*x11396))+(((-1.0)*x11388*x11397)));
evalcond[3]=(((sj3*x11391))+((r11*x11386))+((x11388*x11400))+(((-1.0)*r12*x11381*x11392))+(((-1.0)*r10*x11384*x11396)));
evalcond[4]=((((-1.0)*r11*x11384))+(((-1.0)*r12*sj3*x11397))+(((-1.0)*x11391*x11392))+(((-1.0)*r10*x11386*x11396))+((x11388*x11398)));
evalcond[5]=(((sj3*x11393))+((x11389*x11400))+(((-1.0)*r00*x11384*x11396))+(((-1.0)*x11395))+x11383+((r01*x11386))+(((-1.0)*r02*x11381*x11392)));
evalcond[6]=(((sj3*x11394))+((x11387*x11400))+(((-1.0)*sj2*x11385))+(((-1.0)*x11390))+(((-1.0)*r20*x11384*x11396))+((r21*x11386))+(((-1.0)*r22*x11381*x11392)));
evalcond[7]=((((-1.0)*x11392*x11393))+((cj1*sj2))+x11390+(((-1.0)*r01*x11384))+(((-1.0)*r00*x11386*x11396))+((x11389*x11398))+(((-1.0)*r02*sj3*x11397)));
evalcond[8]=((((-1.0)*x11392*x11394))+(((-1.0)*x11395))+x11383+(((-1.0)*r21*x11384))+((x11387*x11398))+(((-1.0)*r22*sj3*x11397))+(((-1.0)*r20*x11386*x11396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11401 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11401.valid){
continue;
}
CheckValue<IkReal> x11402=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11401.value)+(((1.5707963267949)*(x11402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11403=IKsin(j4);
IkReal x11404=IKcos(j4);
IkReal x11405=(sj1*sj2);
IkReal x11406=(cj3*gconst5);
IkReal x11407=((1.0)*cj1);
IkReal x11408=(gconst5*sj3);
IkReal x11409=(gconst4*r21);
IkReal x11410=(gconst4*r11);
IkReal x11411=(gconst4*r01);
IkReal x11412=(cj2*sj1);
IkReal x11413=(gconst4*r10);
IkReal x11414=((1.0)*cj3);
IkReal x11415=(gconst4*r00);
IkReal x11416=(gconst4*r20);
IkReal x11417=(cj2*x11407);
IkReal x11418=((1.0)*x11404);
IkReal x11419=((1.0)*x11403);
IkReal x11420=(sj3*x11404);
IkReal x11421=(gconst5*x11403);
IkReal x11422=(cj3*x11404);
evalcond[0]=(((r20*x11421))+(((-1.0)*x11409*x11419))+(((-1.0)*r22*x11418)));
evalcond[1]=(((r00*x11421))+(((-1.0)*r02*x11418))+(((-1.0)*x11411*x11419)));
evalcond[2]=((-1.0)+(((-1.0)*x11410*x11419))+((r10*x11421))+(((-1.0)*r12*x11418)));
evalcond[3]=(((r11*x11408))+((sj3*x11413))+((x11410*x11422))+(((-1.0)*r12*x11403*x11414))+(((-1.0)*r10*x11406*x11418)));
evalcond[4]=((((-1.0)*x11413*x11414))+(((-1.0)*r10*x11408*x11418))+(((-1.0)*r12*sj3*x11419))+((x11410*x11420))+(((-1.0)*r11*x11406)));
evalcond[5]=((((-1.0)*r00*x11406*x11418))+x11405+(((-1.0)*r02*x11403*x11414))+(((-1.0)*x11417))+((x11411*x11422))+((sj3*x11415))+((r01*x11408)));
evalcond[6]=(((r21*x11408))+(((-1.0)*r22*x11403*x11414))+(((-1.0)*sj2*x11407))+(((-1.0)*r20*x11406*x11418))+(((-1.0)*x11412))+((x11409*x11422))+((sj3*x11416)));
evalcond[7]=((((-1.0)*r02*sj3*x11419))+(((-1.0)*r01*x11406))+x11412+((cj1*sj2))+(((-1.0)*r00*x11408*x11418))+(((-1.0)*x11414*x11415))+((x11411*x11420)));
evalcond[8]=((((-1.0)*r20*x11408*x11418))+(((-1.0)*r22*sj3*x11419))+x11405+(((-1.0)*r21*x11406))+(((-1.0)*x11414*x11416))+(((-1.0)*x11417))+((x11409*x11420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11425 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11425.valid){
continue;
}
IkReal x11423=((1.0)*(x11425.value));
IkReal x11424=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11423)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11423)));
IkReal gconst4=((1.0)*r21*x11424);
IkReal gconst5=((-1.0)*r20*x11424);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11428 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11428.valid){
continue;
}
IkReal x11426=((1.0)*(x11428.value));
IkReal x11427=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11426)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11426)));
IkReal gconst4=((1.0)*r21*x11427);
IkReal gconst5=((-1.0)*r20*x11427);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11431 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11431.valid){
continue;
}
IkReal x11429=((1.0)*(x11431.value));
IkReal x11430=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11429)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11429)));
IkReal gconst4=((1.0)*r21*x11430);
IkReal gconst5=((-1.0)*r20*x11430);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11434 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11434.valid){
continue;
}
IkReal x11432=((1.0)*(x11434.value));
IkReal x11433=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11432)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11432)));
IkReal gconst4=((1.0)*r21*x11433);
IkReal gconst5=((-1.0)*r20*x11433);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11437 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11437.valid){
continue;
}
IkReal x11435=((1.0)*(x11437.value));
IkReal x11436=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11435)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11435)));
IkReal gconst4=((1.0)*r21*x11436);
IkReal gconst5=((-1.0)*r20*x11436);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11440 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11440.valid){
continue;
}
IkReal x11438=((1.0)*(x11440.value));
IkReal x11439=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11438)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11438)));
IkReal gconst4=((1.0)*r21*x11439);
IkReal gconst5=((-1.0)*r20*x11439);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11441=(gconst5*r10);
IkReal x11442=(gconst4*r11);
CheckValue<IkReal> x11443 = IKatan2WithCheck(IkReal(((((-1.0)*x11441))+x11442)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11443.valid){
continue;
}
CheckValue<IkReal> x11444=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x11441*x11442))+(x11441*x11441)+(x11442*x11442))),-1);
if(!x11444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11443.value)+(((1.5707963267949)*(x11444.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11445=IKsin(j4);
IkReal x11446=IKcos(j4);
IkReal x11447=(gconst4*r21);
IkReal x11448=(gconst5*r10);
IkReal x11449=((1.0)*cj2);
IkReal x11450=(gconst4*r11);
IkReal x11451=(gconst4*r01);
IkReal x11452=((1.0)*x11446);
IkReal x11453=((1.0)*x11445);
IkReal x11454=(gconst5*x11445);
evalcond[0]=(((r20*x11454))+(((-1.0)*x11447*x11453))+(((-1.0)*r22*x11452)));
evalcond[1]=((((-1.0)*r02*x11452))+((r00*x11454))+(((-1.0)*x11451*x11453)));
evalcond[2]=((((-1.0)*x11448*x11452))+((x11446*x11450))+(((-1.0)*r12*x11453)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11452))+((x11445*x11448))+(((-1.0)*x11450*x11453)));
evalcond[4]=((((-1.0)*cj1*x11449))+((sj1*sj2))+((x11446*x11447))+(((-1.0)*gconst5*r20*x11452))+(((-1.0)*r22*x11453)));
evalcond[5]=((((-1.0)*r02*x11453))+((x11446*x11451))+(((-1.0)*sj1*x11449))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst5*r00*x11452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11455=((1.0)*gconst4);
CheckValue<IkReal> x11456=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11455))+(((-1.0)*gconst5*r21)))),-1);
if(!x11456.valid){
continue;
}
CheckValue<IkReal> x11457 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x11455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11456.value)))+(x11457.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11458=IKsin(j4);
IkReal x11459=IKcos(j4);
IkReal x11460=(gconst4*r21);
IkReal x11461=(gconst5*r10);
IkReal x11462=((1.0)*cj2);
IkReal x11463=(gconst4*r11);
IkReal x11464=(gconst4*r01);
IkReal x11465=((1.0)*x11459);
IkReal x11466=((1.0)*x11458);
IkReal x11467=(gconst5*x11458);
evalcond[0]=((((-1.0)*x11460*x11466))+(((-1.0)*r22*x11465))+((r20*x11467)));
evalcond[1]=((((-1.0)*x11464*x11466))+(((-1.0)*r02*x11465))+((r00*x11467)));
evalcond[2]=((((-1.0)*r12*x11466))+(((-1.0)*x11461*x11465))+((x11459*x11463)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11465))+(((-1.0)*x11463*x11466))+((x11458*x11461)));
evalcond[4]=((((-1.0)*cj1*x11462))+((sj1*sj2))+(((-1.0)*gconst5*r20*x11465))+(((-1.0)*r22*x11466))+((x11459*x11460)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11462))+(((-1.0)*r02*x11466))+((x11459*x11464))+(((-1.0)*gconst5*r00*x11465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11468 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11468.valid){
continue;
}
CheckValue<IkReal> x11469=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11468.value)+(((1.5707963267949)*(x11469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11470=IKsin(j4);
IkReal x11471=IKcos(j4);
IkReal x11472=(gconst4*r21);
IkReal x11473=(gconst5*r10);
IkReal x11474=((1.0)*cj2);
IkReal x11475=(gconst4*r11);
IkReal x11476=(gconst4*r01);
IkReal x11477=((1.0)*x11471);
IkReal x11478=((1.0)*x11470);
IkReal x11479=(gconst5*x11470);
evalcond[0]=((((-1.0)*r22*x11477))+((r20*x11479))+(((-1.0)*x11472*x11478)));
evalcond[1]=(((r00*x11479))+(((-1.0)*x11476*x11478))+(((-1.0)*r02*x11477)));
evalcond[2]=(((x11471*x11475))+(((-1.0)*r12*x11478))+(((-1.0)*x11473*x11477)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11477))+(((-1.0)*x11475*x11478))+((x11470*x11473)));
evalcond[4]=(((x11471*x11472))+((sj1*sj2))+(((-1.0)*cj1*x11474))+(((-1.0)*gconst5*r20*x11477))+(((-1.0)*r22*x11478)));
evalcond[5]=((((-1.0)*gconst5*r00*x11477))+((x11471*x11476))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11474))+(((-1.0)*r02*x11478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11482 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11482.valid){
continue;
}
IkReal x11480=((1.0)*(x11482.value));
IkReal x11481=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11480)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11480)));
IkReal gconst4=((1.0)*r21*x11481);
IkReal gconst5=((-1.0)*r20*x11481);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11485 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11485.valid){
continue;
}
IkReal x11483=((1.0)*(x11485.value));
IkReal x11484=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11483)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11483)));
IkReal gconst4=((1.0)*r21*x11484);
IkReal gconst5=((-1.0)*r20*x11484);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11488 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11488.valid){
continue;
}
IkReal x11486=((1.0)*(x11488.value));
IkReal x11487=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11486)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11486)));
IkReal gconst4=((1.0)*r21*x11487);
IkReal gconst5=((-1.0)*r20*x11487);
IkReal x11489=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11493=IKPowWithIntegerCheck(x11489,-1);
if(!x11493.valid){
continue;
}
IkReal x11490=x11493.value;
IkReal x11491=((1.0)*x11490);
IkReal x11492=((((-2.0)*r10*r11*r20*r21*x11490))+(((-1.0)*x11491*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x11491*(r10*r10)*(r20*r20))));
j4eval[0]=x11492;
j4eval[1]=r12;
j4eval[2]=x11489;
j4eval[3]=IKsign(x11492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11494=(gconst5*r10);
IkReal x11495=(gconst4*r11);
CheckValue<IkReal> x11496=IKPowWithIntegerCheck(IKsign(((((2.0)*x11494*x11495))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11494*x11494)))+(((-1.0)*(x11495*x11495))))),-1);
if(!x11496.valid){
continue;
}
CheckValue<IkReal> x11497 = IKatan2WithCheck(IkReal((x11494+(((-1.0)*x11495)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11496.value)))+(x11497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11498=IKcos(j4);
IkReal x11499=IKsin(j4);
IkReal x11500=((1.0)*cj2);
IkReal x11501=((1.0)*x11498);
IkReal x11502=(gconst5*x11499);
IkReal x11503=(gconst5*x11498);
IkReal x11504=((1.0)*gconst4*x11499);
evalcond[0]=(((r12*x11499))+((r10*x11503))+(((-1.0)*gconst4*r11*x11501)));
evalcond[1]=((((-1.0)*r22*x11501))+((r20*x11502))+(((-1.0)*r21*x11504)));
evalcond[2]=((((-1.0)*r02*x11501))+((r00*x11502))+(((-1.0)*r01*x11504)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11501))+(((-1.0)*r11*x11504))+((r10*x11502)));
evalcond[4]=(((r22*x11499))+(((-1.0)*gconst4*r21*x11501))+((sj1*sj2))+((r20*x11503))+(((-1.0)*cj1*x11500)));
evalcond[5]=((((-1.0)*sj1*x11500))+(((-1.0)*cj1*sj2))+((r02*x11499))+((r00*x11503))+(((-1.0)*gconst4*r01*x11501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11505=((1.0)*gconst4);
CheckValue<IkReal> x11506=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x11505)))),-1);
if(!x11506.valid){
continue;
}
CheckValue<IkReal> x11507 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x11505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11506.value)))+(x11507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11508=IKcos(j4);
IkReal x11509=IKsin(j4);
IkReal x11510=((1.0)*cj2);
IkReal x11511=((1.0)*x11508);
IkReal x11512=(gconst5*x11509);
IkReal x11513=(gconst5*x11508);
IkReal x11514=((1.0)*gconst4*x11509);
evalcond[0]=(((r12*x11509))+(((-1.0)*gconst4*r11*x11511))+((r10*x11513)));
evalcond[1]=(((r20*x11512))+(((-1.0)*r22*x11511))+(((-1.0)*r21*x11514)));
evalcond[2]=((((-1.0)*r01*x11514))+(((-1.0)*r02*x11511))+((r00*x11512)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11511))+(((-1.0)*r11*x11514))+((r10*x11512)));
evalcond[4]=(((r20*x11513))+((sj1*sj2))+(((-1.0)*cj1*x11510))+(((-1.0)*gconst4*r21*x11511))+((r22*x11509)));
evalcond[5]=((((-1.0)*gconst4*r01*x11511))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11510))+((r00*x11513))+((r02*x11509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11515 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11515.valid){
continue;
}
CheckValue<IkReal> x11516=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11515.value)+(((1.5707963267949)*(x11516.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11517=IKcos(j4);
IkReal x11518=IKsin(j4);
IkReal x11519=((1.0)*cj2);
IkReal x11520=((1.0)*x11517);
IkReal x11521=(gconst5*x11518);
IkReal x11522=(gconst5*x11517);
IkReal x11523=((1.0)*gconst4*x11518);
evalcond[0]=(((r10*x11522))+((r12*x11518))+(((-1.0)*gconst4*r11*x11520)));
evalcond[1]=((((-1.0)*r22*x11520))+((r20*x11521))+(((-1.0)*r21*x11523)));
evalcond[2]=((((-1.0)*r02*x11520))+((r00*x11521))+(((-1.0)*r01*x11523)));
evalcond[3]=((1.0)+((r10*x11521))+(((-1.0)*r11*x11523))+(((-1.0)*r12*x11520)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x11519))+((r20*x11522))+((r22*x11518))+(((-1.0)*gconst4*r21*x11520)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11519))+((r02*x11518))+((r00*x11522))+(((-1.0)*gconst4*r01*x11520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11526 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11526.valid){
continue;
}
IkReal x11524=((1.0)*(x11526.value));
IkReal x11525=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11524)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11524)));
IkReal gconst4=((1.0)*r21*x11525);
IkReal gconst5=((-1.0)*r20*x11525);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11529 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11529.valid){
continue;
}
IkReal x11527=((1.0)*(x11529.value));
IkReal x11528=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11527)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11527)));
IkReal gconst4=((1.0)*r21*x11528);
IkReal gconst5=((-1.0)*r20*x11528);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11532 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11532.valid){
continue;
}
IkReal x11530=((1.0)*(x11532.value));
IkReal x11531=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11530)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11530)));
IkReal gconst4=((1.0)*r21*x11531);
IkReal gconst5=((-1.0)*r20*x11531);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11533=(gconst5*r10);
IkReal x11534=(gconst4*r11);
CheckValue<IkReal> x11535=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x11533*x11534))+(x11533*x11533)+(x11534*x11534))),-1);
if(!x11535.valid){
continue;
}
CheckValue<IkReal> x11536 = IKatan2WithCheck(IkReal((x11534+(((-1.0)*x11533)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11535.value)))+(x11536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11537=IKsin(j4);
IkReal x11538=IKcos(j4);
IkReal x11539=(gconst4*r21);
IkReal x11540=(gconst5*r10);
IkReal x11541=((1.0)*sj1);
IkReal x11542=(gconst4*r11);
IkReal x11543=(gconst4*r01);
IkReal x11544=((1.0)*x11538);
IkReal x11545=((1.0)*x11537);
IkReal x11546=(gconst5*x11537);
evalcond[0]=(((r20*x11546))+(((-1.0)*x11539*x11545))+(((-1.0)*r22*x11544)));
evalcond[1]=(((r00*x11546))+(((-1.0)*r02*x11544))+(((-1.0)*x11543*x11545)));
evalcond[2]=((((-1.0)*x11540*x11544))+((x11538*x11542))+(((-1.0)*r12*x11545)));
evalcond[3]=((1.0)+(((-1.0)*x11542*x11545))+(((-1.0)*r12*x11544))+((x11537*x11540)));
evalcond[4]=(((x11538*x11543))+(((-1.0)*sj2*x11541))+(((-1.0)*r02*x11545))+((cj1*cj2))+(((-1.0)*gconst5*r00*x11544)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst5*r20*x11544))+(((-1.0)*cj2*x11541))+((x11538*x11539))+(((-1.0)*r22*x11545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11547=((1.0)*gconst4);
CheckValue<IkReal> x11548 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x11547))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11548.valid){
continue;
}
CheckValue<IkReal> x11549=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11547))+(((-1.0)*gconst5*r21)))),-1);
if(!x11549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11548.value)+(((1.5707963267949)*(x11549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11550=IKsin(j4);
IkReal x11551=IKcos(j4);
IkReal x11552=(gconst4*r21);
IkReal x11553=(gconst5*r10);
IkReal x11554=((1.0)*sj1);
IkReal x11555=(gconst4*r11);
IkReal x11556=(gconst4*r01);
IkReal x11557=((1.0)*x11551);
IkReal x11558=((1.0)*x11550);
IkReal x11559=(gconst5*x11550);
evalcond[0]=((((-1.0)*r22*x11557))+(((-1.0)*x11552*x11558))+((r20*x11559)));
evalcond[1]=((((-1.0)*r02*x11557))+((r00*x11559))+(((-1.0)*x11556*x11558)));
evalcond[2]=(((x11551*x11555))+(((-1.0)*r12*x11558))+(((-1.0)*x11553*x11557)));
evalcond[3]=((1.0)+(((-1.0)*x11555*x11558))+((x11550*x11553))+(((-1.0)*r12*x11557)));
evalcond[4]=((((-1.0)*sj2*x11554))+((x11551*x11556))+(((-1.0)*r02*x11558))+(((-1.0)*gconst5*r00*x11557))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst5*r20*x11557))+(((-1.0)*cj2*x11554))+((x11551*x11552))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x11558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11560 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11560.valid){
continue;
}
CheckValue<IkReal> x11561=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11560.value)+(((1.5707963267949)*(x11561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11562=IKsin(j4);
IkReal x11563=IKcos(j4);
IkReal x11564=(gconst4*r21);
IkReal x11565=(gconst5*r10);
IkReal x11566=((1.0)*sj1);
IkReal x11567=(gconst4*r11);
IkReal x11568=(gconst4*r01);
IkReal x11569=((1.0)*x11563);
IkReal x11570=((1.0)*x11562);
IkReal x11571=(gconst5*x11562);
evalcond[0]=(((r20*x11571))+(((-1.0)*x11564*x11570))+(((-1.0)*r22*x11569)));
evalcond[1]=(((r00*x11571))+(((-1.0)*x11568*x11570))+(((-1.0)*r02*x11569)));
evalcond[2]=(((x11563*x11567))+(((-1.0)*x11565*x11569))+(((-1.0)*r12*x11570)));
evalcond[3]=((1.0)+((x11562*x11565))+(((-1.0)*x11567*x11570))+(((-1.0)*r12*x11569)));
evalcond[4]=(((x11563*x11568))+(((-1.0)*sj2*x11566))+(((-1.0)*r02*x11570))+((cj1*cj2))+(((-1.0)*gconst5*r00*x11569)));
evalcond[5]=(((x11563*x11564))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst5*r20*x11569))+(((-1.0)*cj2*x11566))+(((-1.0)*r22*x11570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11574 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11574.valid){
continue;
}
IkReal x11572=((1.0)*(x11574.value));
IkReal x11573=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11572)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11572)));
IkReal gconst4=((1.0)*r21*x11573);
IkReal gconst5=((-1.0)*r20*x11573);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11577 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11577.valid){
continue;
}
IkReal x11575=((1.0)*(x11577.value));
IkReal x11576=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11575)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11575)));
IkReal gconst4=((1.0)*r21*x11576);
IkReal gconst5=((-1.0)*r20*x11576);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11580 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11580.valid){
continue;
}
IkReal x11578=((1.0)*(x11580.value));
IkReal x11579=x10502;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11578)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11578)));
IkReal gconst4=((1.0)*r21*x11579);
IkReal gconst5=((-1.0)*r20*x11579);
IkReal x11581=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11585=IKPowWithIntegerCheck(x11581,-1);
if(!x11585.valid){
continue;
}
IkReal x11582=x11585.value;
IkReal x11583=((1.0)*x11582);
IkReal x11584=((((-1.0)*(r12*r12)))+(((-1.0)*x11583*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x11582))+(((-1.0)*x11583*(r11*r11)*(r21*r21))));
j4eval[0]=x11584;
j4eval[1]=r12;
j4eval[2]=x11581;
j4eval[3]=IKsign(x11584);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11586=(gconst5*r10);
IkReal x11587=(gconst4*r11);
CheckValue<IkReal> x11588 = IKatan2WithCheck(IkReal((x11586+(((-1.0)*x11587)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11588.valid){
continue;
}
CheckValue<IkReal> x11589=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11586*x11586)))+(((-1.0)*(x11587*x11587)))+(((2.0)*x11586*x11587))+(((-1.0)*(r12*r12))))),-1);
if(!x11589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11588.value)+(((1.5707963267949)*(x11589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11590=IKcos(j4);
IkReal x11591=IKsin(j4);
IkReal x11592=((1.0)*sj1);
IkReal x11593=((1.0)*x11590);
IkReal x11594=(gconst5*x11591);
IkReal x11595=(gconst5*x11590);
IkReal x11596=((1.0)*gconst4*x11591);
evalcond[0]=(((r10*x11595))+(((-1.0)*gconst4*r11*x11593))+((r12*x11591)));
evalcond[1]=(((r20*x11594))+(((-1.0)*r21*x11596))+(((-1.0)*r22*x11593)));
evalcond[2]=((((-1.0)*r01*x11596))+((r00*x11594))+(((-1.0)*r02*x11593)));
evalcond[3]=((1.0)+((r10*x11594))+(((-1.0)*r11*x11596))+(((-1.0)*r12*x11593)));
evalcond[4]=((((-1.0)*gconst4*r01*x11593))+((r00*x11595))+((r02*x11591))+(((-1.0)*sj2*x11592))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst4*r21*x11593))+((r20*x11595))+(((-1.0)*cj2*x11592))+(((-1.0)*cj1*sj2))+((r22*x11591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11597=((1.0)*gconst4);
CheckValue<IkReal> x11598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11597))+(((-1.0)*gconst5*r21)))),-1);
if(!x11598.valid){
continue;
}
CheckValue<IkReal> x11599 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x11597))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11598.value)))+(x11599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11600=IKcos(j4);
IkReal x11601=IKsin(j4);
IkReal x11602=((1.0)*sj1);
IkReal x11603=((1.0)*x11600);
IkReal x11604=(gconst5*x11601);
IkReal x11605=(gconst5*x11600);
IkReal x11606=((1.0)*gconst4*x11601);
evalcond[0]=((((-1.0)*gconst4*r11*x11603))+((r10*x11605))+((r12*x11601)));
evalcond[1]=((((-1.0)*r21*x11606))+(((-1.0)*r22*x11603))+((r20*x11604)));
evalcond[2]=((((-1.0)*r01*x11606))+(((-1.0)*r02*x11603))+((r00*x11604)));
evalcond[3]=((1.0)+(((-1.0)*r11*x11606))+(((-1.0)*r12*x11603))+((r10*x11604)));
evalcond[4]=((((-1.0)*sj2*x11602))+(((-1.0)*gconst4*r01*x11603))+((r00*x11605))+((r02*x11601))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst4*r21*x11603))+((r22*x11601))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11602))+((r20*x11605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11607 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11607.valid){
continue;
}
CheckValue<IkReal> x11608=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11607.value)+(((1.5707963267949)*(x11608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11609=IKcos(j4);
IkReal x11610=IKsin(j4);
IkReal x11611=((1.0)*sj1);
IkReal x11612=((1.0)*x11609);
IkReal x11613=(gconst5*x11610);
IkReal x11614=(gconst5*x11609);
IkReal x11615=((1.0)*gconst4*x11610);
evalcond[0]=(((r12*x11610))+(((-1.0)*gconst4*r11*x11612))+((r10*x11614)));
evalcond[1]=((((-1.0)*r22*x11612))+(((-1.0)*r21*x11615))+((r20*x11613)));
evalcond[2]=((((-1.0)*r01*x11615))+((r00*x11613))+(((-1.0)*r02*x11612)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11612))+(((-1.0)*r11*x11615))+((r10*x11613)));
evalcond[4]=((((-1.0)*sj2*x11611))+(((-1.0)*gconst4*r01*x11612))+((r02*x11610))+((r00*x11614))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst4*r21*x11612))+(((-1.0)*cj2*x11611))+(((-1.0)*cj1*sj2))+((r22*x11610))+((r20*x11614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x11618 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11618.valid){
continue;
}
IkReal x11616=((1.0)*(x11618.value));
IkReal x11617=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11616)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11617);
rxp1_1=(px*r21);
rxp1_2=(r11*x11617);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11616)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x11619=((1.0)*r11*r21);
IkReal x11620=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x11619))+(((-1.0)*x11620)));
j4eval[1]=(((sj3*x11620))+((sj3*x11619)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11623 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11623.valid){
continue;
}
IkReal x11621=((1.0)*(x11623.value));
IkReal x11622=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11621)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11622);
rxp1_1=(px*r21);
rxp1_2=(r11*x11622);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11621)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x11624=((1.0)*cj3);
IkReal x11625=(r10*r20);
IkReal x11626=(r11*r21);
j4eval[0]=((((-1.0)*x11626))+(((-1.0)*x11625)));
j4eval[1]=(((x11624*x11625))+((x11624*x11626)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11629 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11629.valid){
continue;
}
IkReal x11627=((1.0)*(x11629.value));
IkReal x11628=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11627)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11628);
rxp1_1=(px*r21);
rxp1_2=(r11*x11628);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11627)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x11630=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r20*x11630))+((r11*r21*x11630)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11631=((1.0)*r10);
CheckValue<IkReal> x11632=IKPowWithIntegerCheck(cj3,-1);
if(!x11632.valid){
continue;
}
CheckValue<IkReal> x11633=IKPowWithIntegerCheck(r02,-1);
if(!x11633.valid){
continue;
}
CheckValue<IkReal> x11634=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst5*x11631))+((cj3*gconst4*r11))),-1);
if(!x11634.valid){
continue;
}
if( IKabs(((x11632.value)*(x11633.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11634.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x11631)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11632.value)*(x11633.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x11634.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x11631))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11632.value)*(x11633.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x11634.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x11631))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11635=IKsin(j4);
IkReal x11636=IKcos(j4);
IkReal x11637=(gconst5*sj3);
IkReal x11638=((1.0)*r21);
IkReal x11639=(cj3*gconst5);
IkReal x11640=(sj1*sj2);
IkReal x11641=((1.0)*r11);
IkReal x11642=((1.0)*cj2);
IkReal x11643=(cj3*gconst4);
IkReal x11644=(gconst4*sj3);
IkReal x11645=((1.0)*cj1*sj2);
IkReal x11646=(sj1*x11642);
IkReal x11647=((1.0)*x11636);
IkReal x11648=(gconst4*x11635);
IkReal x11649=(gconst5*x11635);
IkReal x11650=(x11636*x11644);
IkReal x11651=((1.0)*r02*x11635);
IkReal x11652=(x11646+x11645);
evalcond[0]=((-1.0)*r02*x11636);
evalcond[1]=((((-1.0)*x11638*x11648))+((r20*x11649)));
evalcond[2]=((1.0)+(((-1.0)*x11641*x11648))+((r10*x11649)));
evalcond[3]=((((-1.0)*cj3*x11651))+(((-1.0)*x11640))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x11652))+(((-1.0)*sj3*x11651)));
evalcond[5]=(((r11*x11637))+((r10*x11644))+(((-1.0)*r10*x11639*x11647))+((r11*x11636*x11643)));
evalcond[6]=(((r11*x11650))+(((-1.0)*x11639*x11641))+(((-1.0)*r10*x11637*x11647))+(((-1.0)*r10*x11643)));
evalcond[7]=((((-1.0)*x11652))+((r21*x11636*x11643))+(((-1.0)*r20*x11639*x11647))+((r21*x11637))+((r20*x11644)));
evalcond[8]=(x11640+(((-1.0)*r20*x11637*x11647))+(((-1.0)*r20*x11643))+(((-1.0)*x11638*x11639))+((r21*x11650))+(((-1.0)*cj1*x11642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11653=(gconst5*r10);
IkReal x11654=((1.0)*sj3);
IkReal x11655=(gconst4*r11);
CheckValue<IkReal> x11656=IKPowWithIntegerCheck((x11653+(((-1.0)*x11655))),-1);
if(!x11656.valid){
continue;
}
CheckValue<IkReal> x11657=IKPowWithIntegerCheck(((((-1.0)*cj3*x11653))+((cj3*x11655))),-1);
if(!x11657.valid){
continue;
}
if( IKabs(((-1.0)*(x11656.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11657.value)*(((((-1.0)*gconst4*r10*x11654))+(((-1.0)*gconst5*r11*x11654)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11656.value)))+IKsqr(((x11657.value)*(((((-1.0)*gconst4*r10*x11654))+(((-1.0)*gconst5*r11*x11654))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11656.value)), ((x11657.value)*(((((-1.0)*gconst4*r10*x11654))+(((-1.0)*gconst5*r11*x11654))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11658=IKsin(j4);
IkReal x11659=IKcos(j4);
IkReal x11660=(gconst5*sj3);
IkReal x11661=((1.0)*r21);
IkReal x11662=(cj3*gconst5);
IkReal x11663=(sj1*sj2);
IkReal x11664=((1.0)*r11);
IkReal x11665=((1.0)*cj2);
IkReal x11666=(cj3*gconst4);
IkReal x11667=(gconst4*sj3);
IkReal x11668=((1.0)*cj1*sj2);
IkReal x11669=(sj1*x11665);
IkReal x11670=((1.0)*x11659);
IkReal x11671=(gconst4*x11658);
IkReal x11672=(gconst5*x11658);
IkReal x11673=(x11659*x11667);
IkReal x11674=((1.0)*r02*x11658);
IkReal x11675=(x11669+x11668);
evalcond[0]=((-1.0)*r02*x11659);
evalcond[1]=(((r20*x11672))+(((-1.0)*x11661*x11671)));
evalcond[2]=((1.0)+(((-1.0)*x11664*x11671))+((r10*x11672)));
evalcond[3]=((((-1.0)*cj3*x11674))+((cj1*cj2))+(((-1.0)*x11663)));
evalcond[4]=((((-1.0)*sj3*x11674))+(((-1.0)*x11675)));
evalcond[5]=(((r11*x11659*x11666))+((r11*x11660))+((r10*x11667))+(((-1.0)*r10*x11662*x11670)));
evalcond[6]=((((-1.0)*r10*x11660*x11670))+(((-1.0)*r10*x11666))+((r11*x11673))+(((-1.0)*x11662*x11664)));
evalcond[7]=(((r21*x11660))+((r20*x11667))+((r21*x11659*x11666))+(((-1.0)*r20*x11662*x11670))+(((-1.0)*x11675)));
evalcond[8]=(x11663+(((-1.0)*cj1*x11665))+((r21*x11673))+(((-1.0)*r20*x11666))+(((-1.0)*r20*x11660*x11670))+(((-1.0)*x11661*x11662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11676=(gconst5*r10);
IkReal x11677=(gconst4*r11);
CheckValue<IkReal> x11678=IKPowWithIntegerCheck((x11676+(((-1.0)*x11677))),-1);
if(!x11678.valid){
continue;
}
CheckValue<IkReal> x11679=IKPowWithIntegerCheck(((((-1.0)*sj3*x11676))+((sj3*x11677))),-1);
if(!x11679.valid){
continue;
}
if( IKabs(((-1.0)*(x11678.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11679.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11678.value)))+IKsqr(((x11679.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11678.value)), ((x11679.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11680=IKsin(j4);
IkReal x11681=IKcos(j4);
IkReal x11682=(gconst5*sj3);
IkReal x11683=((1.0)*r21);
IkReal x11684=(cj3*gconst5);
IkReal x11685=(sj1*sj2);
IkReal x11686=((1.0)*r11);
IkReal x11687=((1.0)*cj2);
IkReal x11688=(cj3*gconst4);
IkReal x11689=(gconst4*sj3);
IkReal x11690=((1.0)*cj1*sj2);
IkReal x11691=(sj1*x11687);
IkReal x11692=((1.0)*x11681);
IkReal x11693=(gconst4*x11680);
IkReal x11694=(gconst5*x11680);
IkReal x11695=(x11681*x11689);
IkReal x11696=((1.0)*r02*x11680);
IkReal x11697=(x11690+x11691);
evalcond[0]=((-1.0)*r02*x11681);
evalcond[1]=(((r20*x11694))+(((-1.0)*x11683*x11693)));
evalcond[2]=((1.0)+(((-1.0)*x11686*x11693))+((r10*x11694)));
evalcond[3]=((((-1.0)*x11685))+(((-1.0)*cj3*x11696))+((cj1*cj2)));
evalcond[4]=((((-1.0)*sj3*x11696))+(((-1.0)*x11697)));
evalcond[5]=(((r11*x11682))+(((-1.0)*r10*x11684*x11692))+((r10*x11689))+((r11*x11681*x11688)));
evalcond[6]=((((-1.0)*x11684*x11686))+((r11*x11695))+(((-1.0)*r10*x11688))+(((-1.0)*r10*x11682*x11692)));
evalcond[7]=(((r21*x11682))+(((-1.0)*r20*x11684*x11692))+(((-1.0)*x11697))+((r20*x11689))+((r21*x11681*x11688)));
evalcond[8]=(x11685+(((-1.0)*cj1*x11687))+(((-1.0)*r20*x11688))+(((-1.0)*x11683*x11684))+(((-1.0)*r20*x11682*x11692))+((r21*x11695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11698=gconst5*gconst5;
IkReal x11699=gconst4*gconst4;
IkReal x11700=(cj3*r10);
IkReal x11701=(r11*sj3);
IkReal x11702=(r10*sj3);
IkReal x11703=(cj3*r11);
IkReal x11704=(r21*x11699);
IkReal x11705=(gconst4*gconst5*r20);
IkReal x11706=(r20*x11698);
IkReal x11707=((1.0)*gconst4*gconst5*r21);
CheckValue<IkReal> x11708 = IKatan2WithCheck(IkReal((((gconst4*r22*x11702))+((gconst5*r22*x11701)))),IkReal(((((-1.0)*x11701*x11707))+((x11702*x11705))+((x11701*x11706))+(((-1.0)*x11702*x11704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11708.valid){
continue;
}
CheckValue<IkReal> x11709=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x11703*x11704))+(((-1.0)*x11703*x11705))+((x11700*x11706))+(((-1.0)*x11700*x11707)))),-1);
if(!x11709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11708.value)+(((1.5707963267949)*(x11709.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11710=IKsin(j4);
IkReal x11711=IKcos(j4);
IkReal x11712=((1.0)*sj2);
IkReal x11713=(gconst5*sj3);
IkReal x11714=(gconst4*r21);
IkReal x11715=(cj3*r10);
IkReal x11716=(gconst4*r11);
IkReal x11717=((1.0)*cj2);
IkReal x11718=((1.0)*gconst4);
IkReal x11719=(cj3*r00);
IkReal x11720=(gconst4*r01);
IkReal x11721=(gconst4*sj3);
IkReal x11722=(cj3*r20);
IkReal x11723=(cj1*x11712);
IkReal x11724=(sj1*x11717);
IkReal x11725=((1.0)*x11711);
IkReal x11726=((1.0)*x11710);
IkReal x11727=(sj3*x11711);
IkReal x11728=(gconst5*x11710);
IkReal x11729=(cj3*x11711);
IkReal x11730=((1.0)*cj3*gconst5);
IkReal x11731=(x11724+x11723);
evalcond[0]=((((-1.0)*x11714*x11726))+(((-1.0)*r22*x11725))+((r20*x11728)));
evalcond[1]=(((r00*x11728))+(((-1.0)*r01*x11710*x11718))+(((-1.0)*r02*x11725)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11725))+((r10*x11728))+(((-1.0)*x11716*x11726)));
evalcond[3]=(((x11716*x11729))+((r10*x11721))+(((-1.0)*cj3*r12*x11726))+(((-1.0)*gconst5*x11715*x11725))+((r11*x11713)));
evalcond[4]=(((x11716*x11727))+(((-1.0)*r12*sj3*x11726))+(((-1.0)*x11715*x11718))+(((-1.0)*r10*x11713*x11725))+(((-1.0)*r11*x11730)));
evalcond[5]=((((-1.0)*cj3*r02*x11726))+(((-1.0)*gconst5*x11719*x11725))+((r01*x11713))+((r00*x11721))+(((-1.0)*sj1*x11712))+((cj1*cj2))+((x11720*x11729)));
evalcond[6]=((((-1.0)*x11731))+((r20*x11721))+(((-1.0)*gconst5*x11722*x11725))+(((-1.0)*cj3*r22*x11726))+((r21*x11713))+((x11714*x11729)));
evalcond[7]=((((-1.0)*r21*x11730))+((sj1*sj2))+(((-1.0)*cj1*x11717))+(((-1.0)*x11718*x11722))+(((-1.0)*r22*sj3*x11726))+((x11714*x11727))+(((-1.0)*r20*x11713*x11725)));
evalcond[8]=((((-1.0)*r00*x11713*x11725))+(((-1.0)*r01*x11730))+(((-1.0)*x11731))+(((-1.0)*r02*sj3*x11726))+(((-1.0)*x11718*x11719))+((x11720*x11727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11732=((1.0)*gconst4);
CheckValue<IkReal> x11733=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11732))+(((-1.0)*gconst5*r21)))),-1);
if(!x11733.valid){
continue;
}
CheckValue<IkReal> x11734 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x11732))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11733.value)))+(x11734.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11735=IKsin(j4);
IkReal x11736=IKcos(j4);
IkReal x11737=((1.0)*sj2);
IkReal x11738=(gconst5*sj3);
IkReal x11739=(gconst4*r21);
IkReal x11740=(cj3*r10);
IkReal x11741=(gconst4*r11);
IkReal x11742=((1.0)*cj2);
IkReal x11743=((1.0)*gconst4);
IkReal x11744=(cj3*r00);
IkReal x11745=(gconst4*r01);
IkReal x11746=(gconst4*sj3);
IkReal x11747=(cj3*r20);
IkReal x11748=(cj1*x11737);
IkReal x11749=(sj1*x11742);
IkReal x11750=((1.0)*x11736);
IkReal x11751=((1.0)*x11735);
IkReal x11752=(sj3*x11736);
IkReal x11753=(gconst5*x11735);
IkReal x11754=(cj3*x11736);
IkReal x11755=((1.0)*cj3*gconst5);
IkReal x11756=(x11748+x11749);
evalcond[0]=((((-1.0)*r22*x11750))+(((-1.0)*x11739*x11751))+((r20*x11753)));
evalcond[1]=((((-1.0)*r01*x11735*x11743))+(((-1.0)*r02*x11750))+((r00*x11753)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11750))+((r10*x11753))+(((-1.0)*x11741*x11751)));
evalcond[3]=(((r11*x11738))+((x11741*x11754))+((r10*x11746))+(((-1.0)*cj3*r12*x11751))+(((-1.0)*gconst5*x11740*x11750)));
evalcond[4]=((((-1.0)*r11*x11755))+((x11741*x11752))+(((-1.0)*x11740*x11743))+(((-1.0)*r12*sj3*x11751))+(((-1.0)*r10*x11738*x11750)));
evalcond[5]=(((r01*x11738))+((r00*x11746))+(((-1.0)*cj3*r02*x11751))+(((-1.0)*gconst5*x11744*x11750))+(((-1.0)*sj1*x11737))+((x11745*x11754))+((cj1*cj2)));
evalcond[6]=(((x11739*x11754))+((r20*x11746))+(((-1.0)*gconst5*x11747*x11750))+((r21*x11738))+(((-1.0)*x11756))+(((-1.0)*cj3*r22*x11751)));
evalcond[7]=(((x11739*x11752))+((sj1*sj2))+(((-1.0)*cj1*x11742))+(((-1.0)*x11743*x11747))+(((-1.0)*r20*x11738*x11750))+(((-1.0)*r22*sj3*x11751))+(((-1.0)*r21*x11755)));
evalcond[8]=((((-1.0)*x11743*x11744))+(((-1.0)*x11756))+((x11745*x11752))+(((-1.0)*r00*x11738*x11750))+(((-1.0)*r02*sj3*x11751))+(((-1.0)*r01*x11755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11757 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11757.valid){
continue;
}
CheckValue<IkReal> x11758=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11757.value)+(((1.5707963267949)*(x11758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11759=IKsin(j4);
IkReal x11760=IKcos(j4);
IkReal x11761=((1.0)*sj2);
IkReal x11762=(gconst5*sj3);
IkReal x11763=(gconst4*r21);
IkReal x11764=(cj3*r10);
IkReal x11765=(gconst4*r11);
IkReal x11766=((1.0)*cj2);
IkReal x11767=((1.0)*gconst4);
IkReal x11768=(cj3*r00);
IkReal x11769=(gconst4*r01);
IkReal x11770=(gconst4*sj3);
IkReal x11771=(cj3*r20);
IkReal x11772=(cj1*x11761);
IkReal x11773=(sj1*x11766);
IkReal x11774=((1.0)*x11760);
IkReal x11775=((1.0)*x11759);
IkReal x11776=(sj3*x11760);
IkReal x11777=(gconst5*x11759);
IkReal x11778=(cj3*x11760);
IkReal x11779=((1.0)*cj3*gconst5);
IkReal x11780=(x11773+x11772);
evalcond[0]=(((r20*x11777))+(((-1.0)*r22*x11774))+(((-1.0)*x11763*x11775)));
evalcond[1]=((((-1.0)*r02*x11774))+(((-1.0)*r01*x11759*x11767))+((r00*x11777)));
evalcond[2]=((1.0)+((r10*x11777))+(((-1.0)*r12*x11774))+(((-1.0)*x11765*x11775)));
evalcond[3]=(((r11*x11762))+((r10*x11770))+((x11765*x11778))+(((-1.0)*cj3*r12*x11775))+(((-1.0)*gconst5*x11764*x11774)));
evalcond[4]=((((-1.0)*r11*x11779))+((x11765*x11776))+(((-1.0)*r12*sj3*x11775))+(((-1.0)*r10*x11762*x11774))+(((-1.0)*x11764*x11767)));
evalcond[5]=((((-1.0)*gconst5*x11768*x11774))+(((-1.0)*sj1*x11761))+(((-1.0)*cj3*r02*x11775))+((x11769*x11778))+((r00*x11770))+((cj1*cj2))+((r01*x11762)));
evalcond[6]=(((r20*x11770))+((x11763*x11778))+(((-1.0)*gconst5*x11771*x11774))+(((-1.0)*x11780))+((r21*x11762))+(((-1.0)*cj3*r22*x11775)));
evalcond[7]=((((-1.0)*cj1*x11766))+(((-1.0)*x11767*x11771))+((x11763*x11776))+((sj1*sj2))+(((-1.0)*r22*sj3*x11775))+(((-1.0)*r21*x11779))+(((-1.0)*r20*x11762*x11774)));
evalcond[8]=((((-1.0)*r00*x11762*x11774))+((x11769*x11776))+(((-1.0)*r02*sj3*x11775))+(((-1.0)*r01*x11779))+(((-1.0)*x11780))+(((-1.0)*x11767*x11768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x11783 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11783.valid){
continue;
}
IkReal x11781=((1.0)*(x11783.value));
IkReal x11782=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11781)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11782);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11781)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11782;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11786 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11786.valid){
continue;
}
IkReal x11784=((1.0)*(x11786.value));
IkReal x11785=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11784)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11785);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11784)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11785;
IkReal x11787=((1.0)*cj3);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=(x11787+((x11787*(r21*r21)))+(((-1.0)*x11787*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11790 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11790.valid){
continue;
}
IkReal x11788=((1.0)*(x11790.value));
IkReal x11789=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11788)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11789);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11788)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11789;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11793 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11793.valid){
continue;
}
IkReal x11791=((1.0)*(x11793.value));
IkReal x11792=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11791)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11792);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11791)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11792;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11796 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11796.valid){
continue;
}
IkReal x11794=((1.0)*(x11796.value));
IkReal x11795=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11794)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11795);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11794)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11795;
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11799 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11799.valid){
continue;
}
IkReal x11797=((1.0)*(x11799.value));
IkReal x11798=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11797)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11798);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11797)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11798;
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11802=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11802.valid){
continue;
}
IkReal x11800=x11802.value;
IkReal x11801=(cj0*x11800);
cj4array[0]=((((-1.0)*sj1*sj2*x11801))+((cj1*cj2*x11801)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11803=IKsin(j4);
IkReal x11804=IKcos(j4);
IkReal x11805=(gconst4*r21);
IkReal x11806=(gconst5*x11803);
IkReal x11807=((1.0)*x11803);
IkReal x11808=((1.0)*x11804);
evalcond[0]=((-1.0)*r12*x11803);
evalcond[1]=((((-1.0)*r12*x11808))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11805*x11807))+((r20*x11806)));
evalcond[3]=(((r00*x11806))+(((-1.0)*gconst4*r01*x11807)));
evalcond[4]=(((x11804*x11805))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst5*r20*x11808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11810=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11810.valid){
continue;
}
IkReal x11809=x11810.value;
cj4array[0]=(((cj1*sj2*x11809))+((cj2*sj1*x11809)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11811=IKsin(j4);
IkReal x11812=IKcos(j4);
IkReal x11813=((1.0)*cj0);
IkReal x11814=(gconst5*x11811);
IkReal x11815=((1.0)*x11812);
IkReal x11816=((1.0)*gconst4*x11811);
evalcond[0]=((-1.0)*r12*x11811);
evalcond[1]=((((-1.0)*r12*x11815))+(((-1.0)*x11813)));
evalcond[2]=((((-1.0)*r21*x11816))+((r20*x11814)));
evalcond[3]=((((-1.0)*r01*x11816))+((r00*x11814)));
evalcond[4]=((((-1.0)*gconst5*r00*x11815))+((gconst4*r01*x11812))+((cj0*sj1*sj2))+(((-1.0)*cj1*cj2*x11813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11817=IKPowWithIntegerCheck(r12,-1);
if(!x11817.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11817.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11818=IKsin(j4);
IkReal x11819=IKcos(j4);
IkReal x11820=((1.0)*cj1);
IkReal x11821=(gconst4*r21);
IkReal x11822=(gconst4*r01);
IkReal x11823=(gconst5*x11818);
IkReal x11824=((1.0)*x11818);
IkReal x11825=((1.0)*gconst5*x11819);
evalcond[0]=((-1.0)*r12*x11818);
evalcond[1]=((((-1.0)*x11821*x11824))+((r20*x11823)));
evalcond[2]=((((-1.0)*x11822*x11824))+((r00*x11823)));
evalcond[3]=((((-1.0)*r20*x11825))+(((-1.0)*cj2*sj1))+((x11819*x11821))+(((-1.0)*sj2*x11820)));
evalcond[4]=(((x11819*x11822))+(((-1.0)*cj0*cj2*x11820))+(((-1.0)*r00*x11825))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11828 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11828.valid){
continue;
}
IkReal x11826=((1.0)*(x11828.value));
IkReal x11827=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11826)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11827);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11826)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11827;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11831 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11831.valid){
continue;
}
IkReal x11829=((1.0)*(x11831.value));
IkReal x11830=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11829)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11830);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11829)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11830;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11834 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11834.valid){
continue;
}
IkReal x11832=((1.0)*(x11834.value));
IkReal x11833=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11832)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11833);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11832)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11833;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11837=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11837.valid){
continue;
}
IkReal x11835=x11837.value;
IkReal x11836=(cj0*x11835);
cj4array[0]=(((cj1*cj2*x11836))+(((-1.0)*sj1*sj2*x11836)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11838=IKsin(j4);
IkReal x11839=IKcos(j4);
IkReal x11840=(gconst5*r20);
IkReal x11841=((1.0)*gconst4*r21);
evalcond[0]=(r12*x11838);
evalcond[1]=((((-1.0)*r12*x11839))+(((-1.0)*cj0)));
evalcond[2]=(((x11838*x11840))+(((-1.0)*x11838*x11841)));
evalcond[3]=(((gconst5*r00*x11838))+(((-1.0)*gconst4*r01*x11838)));
evalcond[4]=(((x11839*x11840))+(((-1.0)*cj2*sj1))+(((-1.0)*x11839*x11841))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11843=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11843.valid){
continue;
}
IkReal x11842=x11843.value;
cj4array[0]=(((cj2*sj1*x11842))+((cj1*sj2*x11842)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11844=IKsin(j4);
IkReal x11845=IKcos(j4);
IkReal x11846=((1.0)*cj0);
IkReal x11847=((1.0)*gconst4);
IkReal x11848=(gconst5*x11844);
evalcond[0]=(r12*x11844);
evalcond[1]=((((-1.0)*x11846))+(((-1.0)*r12*x11845)));
evalcond[2]=(((r20*x11848))+(((-1.0)*r21*x11844*x11847)));
evalcond[3]=(((r00*x11848))+(((-1.0)*r01*x11844*x11847)));
evalcond[4]=((((-1.0)*cj1*cj2*x11846))+(((-1.0)*r01*x11845*x11847))+((cj0*sj1*sj2))+((gconst5*r00*x11845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11849=IKPowWithIntegerCheck(r12,-1);
if(!x11849.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11849.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11850=IKsin(j4);
IkReal x11851=IKcos(j4);
IkReal x11852=(gconst5*r20);
IkReal x11853=((1.0)*cj1);
IkReal x11854=((1.0)*gconst4);
IkReal x11855=(gconst5*r00);
evalcond[0]=(r12*x11850);
evalcond[1]=((((-1.0)*r21*x11850*x11854))+((x11850*x11852)));
evalcond[2]=((((-1.0)*r01*x11850*x11854))+((x11850*x11855)));
evalcond[3]=((((-1.0)*sj2*x11853))+(((-1.0)*r21*x11851*x11854))+(((-1.0)*cj2*sj1))+((x11851*x11852)));
evalcond[4]=((((-1.0)*cj0*cj2*x11853))+(((-1.0)*r01*x11851*x11854))+((cj0*sj1*sj2))+((x11851*x11855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11858 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11858.valid){
continue;
}
IkReal x11856=((1.0)*(x11858.value));
IkReal x11857=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11856)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11857);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11856)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11857;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11861 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11861.valid){
continue;
}
IkReal x11859=((1.0)*(x11861.value));
IkReal x11860=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11859)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11860);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11859)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11860;
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11864 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11864.valid){
continue;
}
IkReal x11862=((1.0)*(x11864.value));
IkReal x11863=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11862)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11863);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11862)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11863;
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11867=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11867.valid){
continue;
}
IkReal x11865=x11867.value;
IkReal x11866=((1.0)*cj0*x11865);
cj4array[0]=((((-1.0)*cj1*sj2*x11866))+(((-1.0)*cj2*sj1*x11866)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11868=IKsin(j4);
IkReal x11869=IKcos(j4);
IkReal x11870=(gconst4*r21);
IkReal x11871=(gconst5*x11868);
IkReal x11872=((1.0)*x11868);
IkReal x11873=((1.0)*x11869);
evalcond[0]=((-1.0)*r12*x11868);
evalcond[1]=((((-1.0)*r12*x11873))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x11871))+(((-1.0)*x11870*x11872)));
evalcond[3]=(((r00*x11871))+(((-1.0)*gconst4*r01*x11872)));
evalcond[4]=((((-1.0)*gconst5*r20*x11873))+((x11869*x11870))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11875=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11875.valid){
continue;
}
IkReal x11874=x11875.value;
cj4array[0]=(((cj1*cj2*x11874))+(((-1.0)*sj1*sj2*x11874)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11876=IKsin(j4);
IkReal x11877=IKcos(j4);
IkReal x11878=(gconst5*x11876);
IkReal x11879=((1.0)*x11877);
IkReal x11880=((1.0)*gconst4*x11876);
evalcond[0]=((-1.0)*r12*x11876);
evalcond[1]=((((-1.0)*r12*x11879))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x11878))+(((-1.0)*r21*x11880)));
evalcond[3]=(((r00*x11878))+(((-1.0)*r01*x11880)));
evalcond[4]=((((-1.0)*gconst5*r00*x11879))+((cj0*cj2*sj1))+((gconst4*r01*x11877))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11881=IKPowWithIntegerCheck(r12,-1);
if(!x11881.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11881.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11882=IKsin(j4);
IkReal x11883=IKcos(j4);
IkReal x11884=(gconst4*r21);
IkReal x11885=(gconst4*r01);
IkReal x11886=(gconst5*x11882);
IkReal x11887=((1.0)*x11882);
IkReal x11888=((1.0)*gconst5*x11883);
evalcond[0]=((-1.0)*r12*x11882);
evalcond[1]=((((-1.0)*x11884*x11887))+((r20*x11886)));
evalcond[2]=(((r00*x11886))+(((-1.0)*x11885*x11887)));
evalcond[3]=(((x11883*x11884))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x11888)));
evalcond[4]=(((x11883*x11885))+(((-1.0)*r00*x11888))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11891 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11891.valid){
continue;
}
IkReal x11889=((1.0)*(x11891.value));
IkReal x11890=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11889)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11890);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11889)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11890;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11894 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11894.valid){
continue;
}
IkReal x11892=((1.0)*(x11894.value));
IkReal x11893=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11892)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11893);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11892)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11893;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11897 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11897.valid){
continue;
}
IkReal x11895=((1.0)*(x11897.value));
IkReal x11896=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11895)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11896);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11895)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11896;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11900=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11900.valid){
continue;
}
IkReal x11898=x11900.value;
IkReal x11899=((1.0)*cj0*x11898);
cj4array[0]=((((-1.0)*cj2*sj1*x11899))+(((-1.0)*cj1*sj2*x11899)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11901=IKsin(j4);
IkReal x11902=IKcos(j4);
IkReal x11903=(gconst5*r20);
IkReal x11904=((1.0)*gconst4*r21);
evalcond[0]=(r12*x11901);
evalcond[1]=((((-1.0)*r12*x11902))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11901*x11904))+((x11901*x11903)));
evalcond[3]=(((gconst5*r00*x11901))+(((-1.0)*gconst4*r01*x11901)));
evalcond[4]=(((x11902*x11903))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11902*x11904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11906=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11906.valid){
continue;
}
IkReal x11905=x11906.value;
cj4array[0]=(((cj1*cj2*x11905))+(((-1.0)*sj1*sj2*x11905)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11907=IKsin(j4);
IkReal x11908=IKcos(j4);
IkReal x11909=((1.0)*gconst4);
IkReal x11910=(gconst5*x11907);
evalcond[0]=(r12*x11907);
evalcond[1]=((((-1.0)*r12*x11908))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x11907*x11909))+((r20*x11910)));
evalcond[3]=(((r00*x11910))+(((-1.0)*r01*x11907*x11909)));
evalcond[4]=(((gconst5*r00*x11908))+((cj0*cj2*sj1))+(((-1.0)*r01*x11908*x11909))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11911=IKPowWithIntegerCheck(r12,-1);
if(!x11911.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11911.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11912=IKsin(j4);
IkReal x11913=IKcos(j4);
IkReal x11914=(gconst5*r20);
IkReal x11915=((1.0)*gconst4);
IkReal x11916=(gconst5*r00);
evalcond[0]=(r12*x11912);
evalcond[1]=(((x11912*x11914))+(((-1.0)*r21*x11912*x11915)));
evalcond[2]=(((x11912*x11916))+(((-1.0)*r01*x11912*x11915)));
evalcond[3]=(((x11913*x11914))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11913*x11915)));
evalcond[4]=(((x11913*x11916))+((cj0*cj2*sj1))+(((-1.0)*r01*x11913*x11915))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11918=IKPowWithIntegerCheck(r12,-1);
if(!x11918.valid){
continue;
}
IkReal x11917=x11918.value;
CheckValue<IkReal> x11919=IKPowWithIntegerCheck(sj3,-1);
if(!x11919.valid){
continue;
}
if( IKabs((x11917*(x11919.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11917)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11917*(x11919.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x11917))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11917*(x11919.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x11917));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11920=IKsin(j4);
IkReal x11921=IKcos(j4);
IkReal x11922=((1.0)*sj3);
IkReal x11923=((1.0)*r21);
IkReal x11924=(cj3*gconst5);
IkReal x11925=(cj0*sj2);
IkReal x11926=(gconst5*r20);
IkReal x11927=(cj2*sj0);
IkReal x11928=(sj1*sj2);
IkReal x11929=((1.0)*cj1);
IkReal x11930=(cj3*gconst4);
IkReal x11931=((1.0)*r20);
IkReal x11932=((1.0)*r01);
IkReal x11933=(cj0*cj2);
IkReal x11934=(gconst5*r00);
IkReal x11935=(gconst5*sj3);
IkReal x11936=(gconst4*sj3);
IkReal x11937=(r12*x11920);
IkReal x11938=(gconst4*x11920);
IkReal x11939=((1.0)*x11921);
IkReal x11940=(x11921*x11936);
evalcond[0]=((((-1.0)*r12*x11939))+(((-1.0)*cj0)));
evalcond[1]=(((x11920*x11926))+(((-1.0)*x11923*x11938)));
evalcond[2]=(sj0+(((-1.0)*x11932*x11938))+((x11920*x11934)));
evalcond[3]=(((cj1*sj0*sj2))+((sj1*x11927))+(((-1.0)*x11922*x11937)));
evalcond[4]=((((-1.0)*cj3*x11937))+((sj0*x11928))+(((-1.0)*x11927*x11929)));
evalcond[5]=((((-1.0)*sj2*x11929))+((r21*x11935))+(((-1.0)*cj2*sj1))+((r20*x11936))+((r21*x11921*x11930))+(((-1.0)*x11921*x11924*x11931)));
evalcond[6]=(x11928+(((-1.0)*x11930*x11931))+((r21*x11940))+(((-1.0)*x11923*x11924))+(((-1.0)*cj2*x11929))+(((-1.0)*x11921*x11922*x11926)));
evalcond[7]=(((r01*x11921*x11930))+(((-1.0)*x11929*x11933))+((sj1*x11925))+((r00*x11936))+(((-1.0)*r00*x11924*x11939))+((r01*x11935)));
evalcond[8]=((((-1.0)*r00*x11930))+(((-1.0)*x11924*x11932))+((cj1*x11925))+((sj1*x11933))+((r01*x11940))+(((-1.0)*x11921*x11922*x11934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11941=((1.0)*gconst5);
IkReal x11942=((1.0)*gconst4);
CheckValue<IkReal> x11943=IKPowWithIntegerCheck((((gconst5*r00))+(((-1.0)*r01*x11942))),-1);
if(!x11943.valid){
continue;
}
CheckValue<IkReal> x11944=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11941))),-1);
if(!x11944.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11943.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11944.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj3*x11941))+(((-1.0)*r20*sj3*x11942)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11943.value)))+IKsqr(((x11944.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj3*x11941))+(((-1.0)*r20*sj3*x11942))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11943.value)), ((x11944.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj3*x11941))+(((-1.0)*r20*sj3*x11942))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11945=IKsin(j4);
IkReal x11946=IKcos(j4);
IkReal x11947=((1.0)*sj3);
IkReal x11948=((1.0)*r21);
IkReal x11949=(cj3*gconst5);
IkReal x11950=(cj0*sj2);
IkReal x11951=(gconst5*r20);
IkReal x11952=(cj2*sj0);
IkReal x11953=(sj1*sj2);
IkReal x11954=((1.0)*cj1);
IkReal x11955=(cj3*gconst4);
IkReal x11956=((1.0)*r20);
IkReal x11957=((1.0)*r01);
IkReal x11958=(cj0*cj2);
IkReal x11959=(gconst5*r00);
IkReal x11960=(gconst5*sj3);
IkReal x11961=(gconst4*sj3);
IkReal x11962=(r12*x11945);
IkReal x11963=(gconst4*x11945);
IkReal x11964=((1.0)*x11946);
IkReal x11965=(x11946*x11961);
evalcond[0]=((((-1.0)*r12*x11964))+(((-1.0)*cj0)));
evalcond[1]=(((x11945*x11951))+(((-1.0)*x11948*x11963)));
evalcond[2]=((((-1.0)*x11957*x11963))+sj0+((x11945*x11959)));
evalcond[3]=(((sj1*x11952))+((cj1*sj0*sj2))+(((-1.0)*x11947*x11962)));
evalcond[4]=((((-1.0)*x11952*x11954))+(((-1.0)*cj3*x11962))+((sj0*x11953)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r20*x11961))+(((-1.0)*sj2*x11954))+((r21*x11946*x11955))+((r21*x11960))+(((-1.0)*x11946*x11949*x11956)));
evalcond[6]=(x11953+(((-1.0)*x11948*x11949))+(((-1.0)*x11955*x11956))+(((-1.0)*cj2*x11954))+((r21*x11965))+(((-1.0)*x11946*x11947*x11951)));
evalcond[7]=(((sj1*x11950))+((r01*x11960))+((r00*x11961))+(((-1.0)*r00*x11949*x11964))+((r01*x11946*x11955))+(((-1.0)*x11954*x11958)));
evalcond[8]=(((sj1*x11958))+((r01*x11965))+(((-1.0)*x11949*x11957))+(((-1.0)*r00*x11955))+(((-1.0)*x11946*x11947*x11959))+((cj1*x11950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11966=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11966.valid){
continue;
}
CheckValue<IkReal> x11967=IKPowWithIntegerCheck(r12,-1);
if(!x11967.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11966.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11967.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11966.value)))+IKsqr(((-1.0)*cj0*(x11967.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11966.value)), ((-1.0)*cj0*(x11967.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11968=IKsin(j4);
IkReal x11969=IKcos(j4);
IkReal x11970=((1.0)*sj3);
IkReal x11971=((1.0)*r21);
IkReal x11972=(cj3*gconst5);
IkReal x11973=(cj0*sj2);
IkReal x11974=(gconst5*r20);
IkReal x11975=(cj2*sj0);
IkReal x11976=(sj1*sj2);
IkReal x11977=((1.0)*cj1);
IkReal x11978=(cj3*gconst4);
IkReal x11979=((1.0)*r20);
IkReal x11980=((1.0)*r01);
IkReal x11981=(cj0*cj2);
IkReal x11982=(gconst5*r00);
IkReal x11983=(gconst5*sj3);
IkReal x11984=(gconst4*sj3);
IkReal x11985=(r12*x11968);
IkReal x11986=(gconst4*x11968);
IkReal x11987=((1.0)*x11969);
IkReal x11988=(x11969*x11984);
evalcond[0]=((((-1.0)*r12*x11987))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x11971*x11986))+((x11968*x11974)));
evalcond[2]=((((-1.0)*x11980*x11986))+sj0+((x11968*x11982)));
evalcond[3]=((((-1.0)*x11970*x11985))+((cj1*sj0*sj2))+((sj1*x11975)));
evalcond[4]=(((sj0*x11976))+(((-1.0)*cj3*x11985))+(((-1.0)*x11975*x11977)));
evalcond[5]=(((r21*x11983))+(((-1.0)*sj2*x11977))+(((-1.0)*cj2*sj1))+((r20*x11984))+((r21*x11969*x11978))+(((-1.0)*x11969*x11972*x11979)));
evalcond[6]=(x11976+((r21*x11988))+(((-1.0)*x11969*x11970*x11974))+(((-1.0)*x11971*x11972))+(((-1.0)*x11978*x11979))+(((-1.0)*cj2*x11977)));
evalcond[7]=((((-1.0)*x11977*x11981))+(((-1.0)*r00*x11972*x11987))+((r01*x11969*x11978))+((sj1*x11973))+((r00*x11984))+((r01*x11983)));
evalcond[8]=((((-1.0)*r00*x11978))+((sj1*x11981))+((cj1*x11973))+(((-1.0)*x11972*x11980))+((r01*x11988))+(((-1.0)*x11969*x11970*x11982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11989=((1.0)*gconst4);
CheckValue<IkReal> x11990 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x11989))+(((-1.0)*cj0*r01*x11989))+((cj0*gconst5*r00))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11990.valid){
continue;
}
CheckValue<IkReal> x11991=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11990.value)+(((1.5707963267949)*(x11991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11992=IKsin(j4);
IkReal x11993=IKcos(j4);
IkReal x11994=(gconst5*sj3);
IkReal x11995=((1.0)*r21);
IkReal x11996=(cj3*gconst5);
IkReal x11997=(cj0*sj2);
IkReal x11998=(cj2*sj0);
IkReal x11999=(sj1*sj2);
IkReal x12000=((1.0)*cj1);
IkReal x12001=((1.0)*r11);
IkReal x12002=((1.0)*cj3);
IkReal x12003=(gconst4*r20);
IkReal x12004=(cj0*cj2);
IkReal x12005=(gconst4*sj3);
IkReal x12006=((1.0)*r01);
IkReal x12007=((1.0)*sj3);
IkReal x12008=((1.0)*x11993);
IkReal x12009=(gconst4*x11992);
IkReal x12010=(r22*x11992);
IkReal x12011=(gconst5*x11992);
IkReal x12012=(r02*x11992);
IkReal x12013=(r12*x11992);
IkReal x12014=(x11993*x12005);
IkReal x12015=(cj3*gconst4*x11993);
evalcond[0]=(((r20*x12011))+(((-1.0)*x11995*x12009))+(((-1.0)*r22*x12008)));
evalcond[1]=((((-1.0)*x12006*x12009))+sj0+(((-1.0)*r02*x12008))+((r00*x12011)));
evalcond[2]=((((-1.0)*x12001*x12009))+((r10*x12011))+(((-1.0)*r12*x12008))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x12002*x12010))+((r21*x12015))+(((-1.0)*cj2*sj1))+((r21*x11994))+(((-1.0)*sj2*x12000))+((sj3*x12003))+(((-1.0)*r20*x11996*x12008)));
evalcond[4]=(x11999+((r21*x12014))+(((-1.0)*cj2*x12000))+(((-1.0)*x11995*x11996))+(((-1.0)*r20*x11994*x12008))+(((-1.0)*x12007*x12010))+(((-1.0)*x12002*x12003)));
evalcond[5]=(((sj1*x11997))+(((-1.0)*x12002*x12012))+((r00*x12005))+(((-1.0)*r00*x11996*x12008))+(((-1.0)*x12000*x12004))+((r01*x11994))+((r01*x12015)));
evalcond[6]=(((sj0*x11999))+(((-1.0)*x11998*x12000))+(((-1.0)*x12002*x12013))+((r11*x12015))+((r11*x11994))+((r10*x12005))+(((-1.0)*r10*x11996*x12008)));
evalcond[7]=((((-1.0)*gconst4*r00*x12002))+((cj1*x11997))+((sj1*x12004))+(((-1.0)*x12007*x12012))+((r01*x12014))+(((-1.0)*r00*x11994*x12008))+(((-1.0)*x11996*x12006)));
evalcond[8]=(((sj1*x11998))+((r11*x12014))+(((-1.0)*gconst4*r10*x12002))+((cj1*sj0*sj2))+(((-1.0)*x12007*x12013))+(((-1.0)*r10*x11994*x12008))+(((-1.0)*x11996*x12001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12016=((1.0)*gconst4);
CheckValue<IkReal> x12017 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x12016))+((cj0*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12017.valid){
continue;
}
CheckValue<IkReal> x12018=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r01))+(((-1.0)*r00*x12016)))),-1);
if(!x12018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12017.value)+(((1.5707963267949)*(x12018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12019=IKsin(j4);
IkReal x12020=IKcos(j4);
IkReal x12021=(gconst5*sj3);
IkReal x12022=((1.0)*r21);
IkReal x12023=(cj3*gconst5);
IkReal x12024=(cj0*sj2);
IkReal x12025=(cj2*sj0);
IkReal x12026=(sj1*sj2);
IkReal x12027=((1.0)*cj1);
IkReal x12028=((1.0)*r11);
IkReal x12029=((1.0)*cj3);
IkReal x12030=(gconst4*r20);
IkReal x12031=(cj0*cj2);
IkReal x12032=(gconst4*sj3);
IkReal x12033=((1.0)*r01);
IkReal x12034=((1.0)*sj3);
IkReal x12035=((1.0)*x12020);
IkReal x12036=(gconst4*x12019);
IkReal x12037=(r22*x12019);
IkReal x12038=(gconst5*x12019);
IkReal x12039=(r02*x12019);
IkReal x12040=(r12*x12019);
IkReal x12041=(x12020*x12032);
IkReal x12042=(cj3*gconst4*x12020);
evalcond[0]=(((r20*x12038))+(((-1.0)*r22*x12035))+(((-1.0)*x12022*x12036)));
evalcond[1]=((((-1.0)*x12033*x12036))+sj0+((r00*x12038))+(((-1.0)*r02*x12035)));
evalcond[2]=((((-1.0)*x12028*x12036))+(((-1.0)*r12*x12035))+((r10*x12038))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x12029*x12037))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*x12023*x12035))+(((-1.0)*sj2*x12027))+((r21*x12042))+((r21*x12021))+((sj3*x12030)));
evalcond[4]=((((-1.0)*x12029*x12030))+(((-1.0)*cj2*x12027))+(((-1.0)*x12034*x12037))+x12026+((r21*x12041))+(((-1.0)*r20*x12021*x12035))+(((-1.0)*x12022*x12023)));
evalcond[5]=((((-1.0)*x12029*x12039))+(((-1.0)*r00*x12023*x12035))+((r01*x12021))+((r00*x12032))+((r01*x12042))+((sj1*x12024))+(((-1.0)*x12027*x12031)));
evalcond[6]=((((-1.0)*x12029*x12040))+(((-1.0)*x12025*x12027))+((sj0*x12026))+(((-1.0)*r10*x12023*x12035))+((r11*x12042))+((r11*x12021))+((r10*x12032)));
evalcond[7]=((((-1.0)*gconst4*r00*x12029))+(((-1.0)*x12034*x12039))+((cj1*x12024))+(((-1.0)*x12023*x12033))+((sj1*x12031))+((r01*x12041))+(((-1.0)*r00*x12021*x12035)));
evalcond[8]=((((-1.0)*x12034*x12040))+(((-1.0)*gconst4*r10*x12029))+(((-1.0)*r10*x12021*x12035))+((cj1*sj0*sj2))+(((-1.0)*x12023*x12028))+((sj1*x12025))+((r11*x12041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12043=((1.0)*gconst4);
CheckValue<IkReal> x12044=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12043))+(((-1.0)*gconst5*r11)))),-1);
if(!x12044.valid){
continue;
}
CheckValue<IkReal> x12045 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst5*r20*sj0))+(((-1.0)*r21*sj0*x12043)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12044.value)))+(x12045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12046=IKsin(j4);
IkReal x12047=IKcos(j4);
IkReal x12048=(gconst5*sj3);
IkReal x12049=((1.0)*r21);
IkReal x12050=(cj3*gconst5);
IkReal x12051=(cj0*sj2);
IkReal x12052=(cj2*sj0);
IkReal x12053=(sj1*sj2);
IkReal x12054=((1.0)*cj1);
IkReal x12055=((1.0)*r11);
IkReal x12056=((1.0)*cj3);
IkReal x12057=(gconst4*r20);
IkReal x12058=(cj0*cj2);
IkReal x12059=(gconst4*sj3);
IkReal x12060=((1.0)*r01);
IkReal x12061=((1.0)*sj3);
IkReal x12062=((1.0)*x12047);
IkReal x12063=(gconst4*x12046);
IkReal x12064=(r22*x12046);
IkReal x12065=(gconst5*x12046);
IkReal x12066=(r02*x12046);
IkReal x12067=(r12*x12046);
IkReal x12068=(x12047*x12059);
IkReal x12069=(cj3*gconst4*x12047);
evalcond[0]=((((-1.0)*x12049*x12063))+((r20*x12065))+(((-1.0)*r22*x12062)));
evalcond[1]=(((r00*x12065))+sj0+(((-1.0)*r02*x12062))+(((-1.0)*x12060*x12063)));
evalcond[2]=((((-1.0)*x12055*x12063))+((r10*x12065))+(((-1.0)*r12*x12062))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x12069))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12054))+((r21*x12048))+(((-1.0)*r20*x12050*x12062))+(((-1.0)*x12056*x12064))+((sj3*x12057)));
evalcond[4]=(((r21*x12068))+(((-1.0)*x12061*x12064))+(((-1.0)*r20*x12048*x12062))+(((-1.0)*cj2*x12054))+(((-1.0)*x12049*x12050))+x12053+(((-1.0)*x12056*x12057)));
evalcond[5]=(((r01*x12069))+(((-1.0)*x12054*x12058))+(((-1.0)*r00*x12050*x12062))+((r00*x12059))+((r01*x12048))+((sj1*x12051))+(((-1.0)*x12056*x12066)));
evalcond[6]=(((r10*x12059))+(((-1.0)*r10*x12050*x12062))+((r11*x12048))+((sj0*x12053))+(((-1.0)*x12052*x12054))+(((-1.0)*x12056*x12067))+((r11*x12069)));
evalcond[7]=((((-1.0)*x12061*x12066))+((r01*x12068))+(((-1.0)*r00*x12048*x12062))+((cj1*x12051))+(((-1.0)*x12050*x12060))+((sj1*x12058))+(((-1.0)*gconst4*r00*x12056)));
evalcond[8]=((((-1.0)*x12061*x12067))+(((-1.0)*gconst4*r10*x12056))+((cj1*sj0*sj2))+((sj1*x12052))+(((-1.0)*r10*x12048*x12062))+(((-1.0)*x12050*x12055))+((r11*x12068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12070=((-1.0)*r00);
IkReal x12072 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12072)==0){
continue;
}
IkReal x12071=pow(x12072,-0.5);
CheckValue<IkReal> x12073 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12070),IKFAST_ATAN2_MAGTHRESH);
if(!x12073.valid){
continue;
}
IkReal gconst6=((-1.0)*(x12073.value));
IkReal gconst7=(r01*x12071);
IkReal gconst8=(x12070*x12071);
CheckValue<IkReal> x12074 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12074.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12074.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12075=((-1.0)*r00);
IkReal x12076=x12071;
CheckValue<IkReal> x12078 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12075),IKFAST_ATAN2_MAGTHRESH);
if(!x12078.valid){
continue;
}
IkReal x12077=((-1.0)*(x12078.value));
sj5=gconst7;
cj5=gconst8;
j5=x12077;
IkReal gconst6=x12077;
IkReal gconst7=(r01*x12076);
IkReal gconst8=(x12075*x12076);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12079=((1.0)*gconst7);
CheckValue<IkReal> x12080 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*r11*sj0*x12079))+(((-1.0)*cj0*r01*x12079))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12080.valid){
continue;
}
CheckValue<IkReal> x12081=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x12081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12080.value)+(((1.5707963267949)*(x12081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12082=IKsin(j4);
IkReal x12083=IKcos(j4);
IkReal x12084=(gconst7*sj3);
IkReal x12085=(cj0*cj1);
IkReal x12086=((1.0)*cj2);
IkReal x12087=(cj3*gconst7);
IkReal x12088=(cj2*sj1);
IkReal x12089=(sj1*sj2);
IkReal x12090=(gconst8*sj3);
IkReal x12091=(cj3*gconst8);
IkReal x12092=(cj1*sj2);
IkReal x12093=((1.0)*x12083);
IkReal x12094=(gconst8*x12082);
IkReal x12095=(r01*x12083);
IkReal x12096=(r11*x12083);
IkReal x12097=((1.0)*x12082);
IkReal x12098=(r21*x12083);
evalcond[0]=((((-1.0)*gconst7*r21*x12097))+((r20*x12094))+(((-1.0)*r22*x12093)));
evalcond[1]=(sj0+((r00*x12094))+(((-1.0)*r02*x12093))+(((-1.0)*gconst7*r01*x12097)));
evalcond[2]=(((r10*x12094))+(((-1.0)*gconst7*r11*x12097))+(((-1.0)*r12*x12093))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x12084))+(((-1.0)*x12092))+(((-1.0)*r20*x12091*x12093))+((x12087*x12098))+(((-1.0)*cj3*r22*x12097))+(((-1.0)*sj1*x12086))+((r21*x12090)));
evalcond[4]=((((-1.0)*r20*x12090*x12093))+x12089+((x12084*x12098))+(((-1.0)*r21*x12091))+(((-1.0)*cj1*x12086))+(((-1.0)*r20*x12087))+(((-1.0)*r22*sj3*x12097)));
evalcond[5]=(((r01*x12090))+((r00*x12084))+((x12087*x12095))+(((-1.0)*r00*x12091*x12093))+(((-1.0)*cj3*r02*x12097))+(((-1.0)*x12085*x12086))+((cj0*x12089)));
evalcond[6]=(((r11*x12090))+(((-1.0)*r10*x12091*x12093))+(((-1.0)*cj1*sj0*x12086))+(((-1.0)*cj3*r12*x12097))+((x12087*x12096))+((sj0*x12089))+((r10*x12084)));
evalcond[7]=((((-1.0)*r01*x12091))+(((-1.0)*r02*sj3*x12097))+(((-1.0)*r00*x12087))+((x12084*x12095))+((cj0*x12088))+((sj2*x12085))+(((-1.0)*r00*x12090*x12093)));
evalcond[8]=((((-1.0)*r10*x12087))+(((-1.0)*r10*x12090*x12093))+(((-1.0)*r12*sj3*x12097))+((sj0*x12088))+(((-1.0)*r11*x12091))+((x12084*x12096))+((sj0*x12092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12099=((1.0)*gconst7);
CheckValue<IkReal> x12100 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x12099))+((gconst8*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12100.valid){
continue;
}
CheckValue<IkReal> x12101=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12099))+(((-1.0)*gconst8*r11)))),-1);
if(!x12101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12100.value)+(((1.5707963267949)*(x12101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12102=IKsin(j4);
IkReal x12103=IKcos(j4);
IkReal x12104=(gconst7*sj3);
IkReal x12105=(cj0*cj1);
IkReal x12106=((1.0)*cj2);
IkReal x12107=(cj3*gconst7);
IkReal x12108=(cj2*sj1);
IkReal x12109=(sj1*sj2);
IkReal x12110=(gconst8*sj3);
IkReal x12111=(cj3*gconst8);
IkReal x12112=(cj1*sj2);
IkReal x12113=((1.0)*x12103);
IkReal x12114=(gconst8*x12102);
IkReal x12115=(r01*x12103);
IkReal x12116=(r11*x12103);
IkReal x12117=((1.0)*x12102);
IkReal x12118=(r21*x12103);
evalcond[0]=((((-1.0)*gconst7*r21*x12117))+(((-1.0)*r22*x12113))+((r20*x12114)));
evalcond[1]=(sj0+(((-1.0)*gconst7*r01*x12117))+((r00*x12114))+(((-1.0)*r02*x12113)));
evalcond[2]=(((r10*x12114))+(((-1.0)*gconst7*r11*x12117))+(((-1.0)*r12*x12113))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x12112))+(((-1.0)*r20*x12111*x12113))+((x12107*x12118))+((r20*x12104))+(((-1.0)*sj1*x12106))+(((-1.0)*cj3*r22*x12117))+((r21*x12110)));
evalcond[4]=((((-1.0)*r22*sj3*x12117))+x12109+(((-1.0)*cj1*x12106))+(((-1.0)*r20*x12107))+((x12104*x12118))+(((-1.0)*r20*x12110*x12113))+(((-1.0)*r21*x12111)));
evalcond[5]=((((-1.0)*r00*x12111*x12113))+((x12107*x12115))+((cj0*x12109))+((r00*x12104))+((r01*x12110))+(((-1.0)*x12105*x12106))+(((-1.0)*cj3*r02*x12117)));
evalcond[6]=(((r10*x12104))+((sj0*x12109))+((x12107*x12116))+(((-1.0)*r10*x12111*x12113))+(((-1.0)*cj3*r12*x12117))+(((-1.0)*cj1*sj0*x12106))+((r11*x12110)));
evalcond[7]=((((-1.0)*r00*x12107))+((cj0*x12108))+(((-1.0)*r00*x12110*x12113))+(((-1.0)*r01*x12111))+((x12104*x12115))+((sj2*x12105))+(((-1.0)*r02*sj3*x12117)));
evalcond[8]=((((-1.0)*r10*x12107))+((sj0*x12112))+((sj0*x12108))+(((-1.0)*r10*x12110*x12113))+((x12104*x12116))+(((-1.0)*r11*x12111))+(((-1.0)*r12*sj3*x12117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12119=((-1.0)*r01);
IkReal x12121 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12121)==0){
continue;
}
IkReal x12120=pow(x12121,-0.5);
CheckValue<IkReal> x12122 = IKatan2WithCheck(IkReal(x12119),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12122.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x12122.value))));
IkReal gconst10=(x12119*x12120);
IkReal gconst11=((1.0)*r00*x12120);
CheckValue<IkReal> x12123 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12123.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12123.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12124=((-1.0)*r01);
CheckValue<IkReal> x12127 = IKatan2WithCheck(IkReal(x12124),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12127.valid){
continue;
}
IkReal x12125=((1.0)*(x12127.value));
IkReal x12126=x12120;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12125)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12125)));
IkReal gconst10=(x12124*x12126);
IkReal gconst11=((1.0)*r00*x12126);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x12128=((-1.0)*r01);
CheckValue<IkReal> x12131 = IKatan2WithCheck(IkReal(x12128),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12131.valid){
continue;
}
IkReal x12129=((1.0)*(x12131.value));
IkReal x12130=x12120;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12129)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12129)));
IkReal gconst10=(x12128*x12130);
IkReal gconst11=((1.0)*r00*x12130);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12132=((-1.0)*r01);
CheckValue<IkReal> x12135 = IKatan2WithCheck(IkReal(x12132),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12135.valid){
continue;
}
IkReal x12133=((1.0)*(x12135.value));
IkReal x12134=x12120;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12133)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12133)));
IkReal gconst10=(x12132*x12134);
IkReal gconst11=((1.0)*r00*x12134);
IkReal x12136=r02*r02;
IkReal x12137=(r12*sj0);
IkReal x12138=x12120;
IkReal x12139=(cj0*x12138);
j4eval[0]=((IKabs((((r02*x12137*x12138))+((x12136*x12139))+(((-1.0)*x12139)))))+(IKabs((x12137+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12140=((-1.0)*r01);
CheckValue<IkReal> x12143 = IKatan2WithCheck(IkReal(x12140),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12143.valid){
continue;
}
IkReal x12141=((1.0)*(x12143.value));
IkReal x12142=x12120;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12141)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12141)));
IkReal gconst10=(x12140*x12142);
IkReal gconst11=((1.0)*r00*x12142);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12144=((-1.0)*r01);
CheckValue<IkReal> x12147 = IKatan2WithCheck(IkReal(x12144),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12147.valid){
continue;
}
IkReal x12145=((1.0)*(x12147.value));
IkReal x12146=x12120;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12145)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12145)));
IkReal gconst10=(x12144*x12146);
IkReal gconst11=((1.0)*r00*x12146);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12148=gconst11*gconst11;
IkReal x12149=gconst10*gconst10;
IkReal x12150=(cj3*r10);
IkReal x12151=(cj3*r11);
IkReal x12152=(r10*sj3);
IkReal x12153=(gconst11*r11*sj3);
IkReal x12154=((1.0)*gconst10*r21);
IkReal x12155=(r21*x12149);
IkReal x12156=(r20*x12148);
IkReal x12157=(gconst10*gconst11*r20);
CheckValue<IkReal> x12158=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x12150*x12156))+(((-1.0)*gconst11*x12150*x12154))+((x12151*x12155))+(((-1.0)*x12151*x12157)))),-1);
if(!x12158.valid){
continue;
}
CheckValue<IkReal> x12159 = IKatan2WithCheck(IkReal((((r22*x12153))+((gconst10*r22*x12152)))),IkReal((((r11*sj3*x12156))+(((-1.0)*x12152*x12155))+(((-1.0)*x12153*x12154))+((x12152*x12157)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12158.value)))+(x12159.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12160=IKsin(j4);
IkReal x12161=IKcos(j4);
IkReal x12162=(sj1*sj2);
IkReal x12163=(cj3*r10);
IkReal x12164=(r21*sj3);
IkReal x12165=((1.0)*gconst10);
IkReal x12166=(cj3*gconst11);
IkReal x12167=(r01*sj3);
IkReal x12168=((1.0)*cj1);
IkReal x12169=(gconst11*sj3);
IkReal x12170=(gconst10*sj3);
IkReal x12171=(cj2*sj1);
IkReal x12172=(cj2*x12168);
IkReal x12173=((1.0)*x12161);
IkReal x12174=((1.0)*x12160);
IkReal x12175=(gconst10*x12161);
IkReal x12176=(gconst11*x12160);
evalcond[0]=((((-1.0)*r22*x12173))+((r20*x12176))+(((-1.0)*r21*x12160*x12165)));
evalcond[1]=((((-1.0)*r01*x12160*x12165))+((r00*x12176))+(((-1.0)*r02*x12173)));
evalcond[2]=((-1.0)+((r10*x12176))+(((-1.0)*r11*x12160*x12165))+(((-1.0)*r12*x12173)));
evalcond[3]=(((cj3*r11*x12175))+((r10*x12170))+(((-1.0)*cj3*r12*x12174))+((r11*x12169))+(((-1.0)*gconst11*x12163*x12173)));
evalcond[4]=((((-1.0)*r12*sj3*x12174))+(((-1.0)*r11*x12166))+((r11*x12161*x12170))+(((-1.0)*r10*x12169*x12173))+(((-1.0)*x12163*x12165)));
evalcond[5]=((((-1.0)*x12172))+x12162+((gconst11*x12167))+((cj3*r01*x12175))+((r00*x12170))+(((-1.0)*r00*x12166*x12173))+(((-1.0)*cj3*r02*x12174)));
evalcond[6]=((((-1.0)*x12171))+((r20*x12170))+(((-1.0)*sj2*x12168))+((gconst11*x12164))+(((-1.0)*r20*x12166*x12173))+(((-1.0)*cj3*r22*x12174))+((cj3*r21*x12175)));
evalcond[7]=(((x12167*x12175))+(((-1.0)*r02*sj3*x12174))+(((-1.0)*r01*x12166))+((cj1*sj2))+x12171+(((-1.0)*r00*x12169*x12173))+(((-1.0)*cj3*r00*x12165)));
evalcond[8]=((((-1.0)*cj3*r20*x12165))+(((-1.0)*r20*x12169*x12173))+(((-1.0)*r22*sj3*x12174))+(((-1.0)*x12172))+((x12164*x12175))+x12162+(((-1.0)*r21*x12166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12177=((1.0)*gconst10);
CheckValue<IkReal> x12178 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst11*r20))+(((-1.0)*r21*x12177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12178.valid){
continue;
}
CheckValue<IkReal> x12179=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12177))+(((-1.0)*gconst11*r01)))),-1);
if(!x12179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12178.value)+(((1.5707963267949)*(x12179.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12180=IKsin(j4);
IkReal x12181=IKcos(j4);
IkReal x12182=(sj1*sj2);
IkReal x12183=(cj3*r10);
IkReal x12184=(r21*sj3);
IkReal x12185=((1.0)*gconst10);
IkReal x12186=(cj3*gconst11);
IkReal x12187=(r01*sj3);
IkReal x12188=((1.0)*cj1);
IkReal x12189=(gconst11*sj3);
IkReal x12190=(gconst10*sj3);
IkReal x12191=(cj2*sj1);
IkReal x12192=(cj2*x12188);
IkReal x12193=((1.0)*x12181);
IkReal x12194=((1.0)*x12180);
IkReal x12195=(gconst10*x12181);
IkReal x12196=(gconst11*x12180);
evalcond[0]=(((r20*x12196))+(((-1.0)*r22*x12193))+(((-1.0)*r21*x12180*x12185)));
evalcond[1]=((((-1.0)*r01*x12180*x12185))+(((-1.0)*r02*x12193))+((r00*x12196)));
evalcond[2]=((-1.0)+(((-1.0)*r11*x12180*x12185))+((r10*x12196))+(((-1.0)*r12*x12193)));
evalcond[3]=(((r11*x12189))+((cj3*r11*x12195))+((r10*x12190))+(((-1.0)*cj3*r12*x12194))+(((-1.0)*gconst11*x12183*x12193)));
evalcond[4]=((((-1.0)*x12183*x12185))+((r11*x12181*x12190))+(((-1.0)*r10*x12189*x12193))+(((-1.0)*r11*x12186))+(((-1.0)*r12*sj3*x12194)));
evalcond[5]=((((-1.0)*r00*x12186*x12193))+((cj3*r01*x12195))+(((-1.0)*x12192))+x12182+(((-1.0)*cj3*r02*x12194))+((r00*x12190))+((gconst11*x12187)));
evalcond[6]=(((cj3*r21*x12195))+(((-1.0)*r20*x12186*x12193))+(((-1.0)*cj3*r22*x12194))+(((-1.0)*x12191))+((r20*x12190))+(((-1.0)*sj2*x12188))+((gconst11*x12184)));
evalcond[7]=((((-1.0)*cj3*r00*x12185))+((x12187*x12195))+(((-1.0)*r02*sj3*x12194))+((cj1*sj2))+x12191+(((-1.0)*r01*x12186))+(((-1.0)*r00*x12189*x12193)));
evalcond[8]=((((-1.0)*x12192))+x12182+(((-1.0)*r21*x12186))+((x12184*x12195))+(((-1.0)*cj3*r20*x12185))+(((-1.0)*r22*sj3*x12194))+(((-1.0)*r20*x12189*x12193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12197 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst10*r01))+((gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12197.valid){
continue;
}
CheckValue<IkReal> x12198=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12197.value)+(((1.5707963267949)*(x12198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12199=IKsin(j4);
IkReal x12200=IKcos(j4);
IkReal x12201=(sj1*sj2);
IkReal x12202=(cj3*r10);
IkReal x12203=(r21*sj3);
IkReal x12204=((1.0)*gconst10);
IkReal x12205=(cj3*gconst11);
IkReal x12206=(r01*sj3);
IkReal x12207=((1.0)*cj1);
IkReal x12208=(gconst11*sj3);
IkReal x12209=(gconst10*sj3);
IkReal x12210=(cj2*sj1);
IkReal x12211=(cj2*x12207);
IkReal x12212=((1.0)*x12200);
IkReal x12213=((1.0)*x12199);
IkReal x12214=(gconst10*x12200);
IkReal x12215=(gconst11*x12199);
evalcond[0]=((((-1.0)*r22*x12212))+(((-1.0)*r21*x12199*x12204))+((r20*x12215)));
evalcond[1]=((((-1.0)*r02*x12212))+((r00*x12215))+(((-1.0)*r01*x12199*x12204)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x12212))+(((-1.0)*r11*x12199*x12204))+((r10*x12215)));
evalcond[3]=((((-1.0)*cj3*r12*x12213))+((cj3*r11*x12214))+(((-1.0)*gconst11*x12202*x12212))+((r10*x12209))+((r11*x12208)));
evalcond[4]=((((-1.0)*x12202*x12204))+(((-1.0)*r11*x12205))+(((-1.0)*r12*sj3*x12213))+(((-1.0)*r10*x12208*x12212))+((r11*x12200*x12209)));
evalcond[5]=(((gconst11*x12206))+(((-1.0)*x12211))+(((-1.0)*r00*x12205*x12212))+x12201+(((-1.0)*cj3*r02*x12213))+((cj3*r01*x12214))+((r00*x12209)));
evalcond[6]=(((gconst11*x12203))+(((-1.0)*sj2*x12207))+(((-1.0)*cj3*r22*x12213))+((cj3*r21*x12214))+((r20*x12209))+(((-1.0)*r20*x12205*x12212))+(((-1.0)*x12210)));
evalcond[7]=((((-1.0)*r00*x12208*x12212))+((cj1*sj2))+(((-1.0)*cj3*r00*x12204))+x12210+((x12206*x12214))+(((-1.0)*r01*x12205))+(((-1.0)*r02*sj3*x12213)));
evalcond[8]=((((-1.0)*x12211))+(((-1.0)*cj3*r20*x12204))+(((-1.0)*r20*x12208*x12212))+((x12203*x12214))+x12201+(((-1.0)*r21*x12205))+(((-1.0)*r22*sj3*x12213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x12216=((-1.0)*r01);
CheckValue<IkReal> x12219 = IKatan2WithCheck(IkReal(x12216),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12219.valid){
continue;
}
IkReal x12217=((1.0)*(x12219.value));
IkReal x12218=x12120;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12217)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12217)));
IkReal gconst10=(x12216*x12218);
IkReal gconst11=((1.0)*r00*x12218);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12220=((-1.0)*r01);
CheckValue<IkReal> x12223 = IKatan2WithCheck(IkReal(x12220),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12223.valid){
continue;
}
IkReal x12221=((1.0)*(x12223.value));
IkReal x12222=x12120;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12221)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12221)));
IkReal gconst10=(x12220*x12222);
IkReal gconst11=((1.0)*r00*x12222);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12224=gconst11*gconst11;
IkReal x12225=gconst10*gconst10;
IkReal x12226=(cj3*r10);
IkReal x12227=(cj3*r11);
IkReal x12228=(r10*sj3);
IkReal x12229=(gconst11*r11*sj3);
IkReal x12230=((1.0)*gconst10*r21);
IkReal x12231=(r21*x12225);
IkReal x12232=(r20*x12224);
IkReal x12233=(gconst10*gconst11*r20);
CheckValue<IkReal> x12234 = IKatan2WithCheck(IkReal((((r22*x12229))+((gconst10*r22*x12228)))),IkReal(((((-1.0)*x12229*x12230))+((r11*sj3*x12232))+((x12228*x12233))+(((-1.0)*x12228*x12231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12234.valid){
continue;
}
CheckValue<IkReal> x12235=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x12227*x12233))+((x12227*x12231))+(((-1.0)*gconst11*x12226*x12230))+((x12226*x12232)))),-1);
if(!x12235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12234.value)+(((1.5707963267949)*(x12235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12236=IKsin(j4);
IkReal x12237=IKcos(j4);
IkReal x12238=(cj3*r10);
IkReal x12239=(r21*sj3);
IkReal x12240=((1.0)*gconst10);
IkReal x12241=(cj3*gconst11);
IkReal x12242=(r01*sj3);
IkReal x12243=((1.0)*sj2);
IkReal x12244=(r20*sj3);
IkReal x12245=(r11*sj3);
IkReal x12246=((1.0)*cj2);
IkReal x12247=(gconst10*sj3);
IkReal x12248=(gconst11*sj3);
IkReal x12249=(cj1*x12243);
IkReal x12250=(sj1*x12246);
IkReal x12251=((1.0)*x12237);
IkReal x12252=((1.0)*x12236);
IkReal x12253=(gconst10*x12237);
IkReal x12254=(gconst11*x12236);
IkReal x12255=(x12250+x12249);
evalcond[0]=(((r20*x12254))+(((-1.0)*r22*x12251))+(((-1.0)*r21*x12236*x12240)));
evalcond[1]=(((r00*x12254))+(((-1.0)*r01*x12236*x12240))+(((-1.0)*r02*x12251)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12251))+((r10*x12254))+(((-1.0)*r11*x12236*x12240)));
evalcond[3]=(((cj3*r11*x12253))+((r10*x12247))+(((-1.0)*gconst11*x12238*x12251))+(((-1.0)*cj3*r12*x12252))+((gconst11*x12245)));
evalcond[4]=(((x12245*x12253))+(((-1.0)*r11*x12241))+(((-1.0)*r10*x12248*x12251))+(((-1.0)*x12238*x12240))+(((-1.0)*r12*sj3*x12252)));
evalcond[5]=(((cj3*r01*x12253))+(((-1.0)*cj3*r02*x12252))+((r00*x12247))+((gconst11*x12242))+((cj1*cj2))+(((-1.0)*sj1*x12243))+(((-1.0)*r00*x12241*x12251)));
evalcond[6]=(((gconst10*x12244))+((gconst11*x12239))+(((-1.0)*r20*x12241*x12251))+(((-1.0)*x12255))+((cj3*r21*x12253))+(((-1.0)*cj3*r22*x12252)));
evalcond[7]=((((-1.0)*r21*x12241))+(((-1.0)*cj1*x12246))+(((-1.0)*gconst11*x12244*x12251))+(((-1.0)*cj3*r20*x12240))+((sj1*sj2))+((x12239*x12253))+(((-1.0)*r22*sj3*x12252)));
evalcond[8]=((((-1.0)*r01*x12241))+(((-1.0)*cj3*r00*x12240))+(((-1.0)*r00*x12248*x12251))+(((-1.0)*x12255))+((x12242*x12253))+(((-1.0)*r02*sj3*x12252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12256=((1.0)*gconst10);
CheckValue<IkReal> x12257=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12256))+(((-1.0)*gconst11*r21)))),-1);
if(!x12257.valid){
continue;
}
CheckValue<IkReal> x12258 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x12256))+((gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12257.value)))+(x12258.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12259=IKsin(j4);
IkReal x12260=IKcos(j4);
IkReal x12261=(cj3*r10);
IkReal x12262=(r21*sj3);
IkReal x12263=((1.0)*gconst10);
IkReal x12264=(cj3*gconst11);
IkReal x12265=(r01*sj3);
IkReal x12266=((1.0)*sj2);
IkReal x12267=(r20*sj3);
IkReal x12268=(r11*sj3);
IkReal x12269=((1.0)*cj2);
IkReal x12270=(gconst10*sj3);
IkReal x12271=(gconst11*sj3);
IkReal x12272=(cj1*x12266);
IkReal x12273=(sj1*x12269);
IkReal x12274=((1.0)*x12260);
IkReal x12275=((1.0)*x12259);
IkReal x12276=(gconst10*x12260);
IkReal x12277=(gconst11*x12259);
IkReal x12278=(x12273+x12272);
evalcond[0]=(((r20*x12277))+(((-1.0)*r22*x12274))+(((-1.0)*r21*x12259*x12263)));
evalcond[1]=((((-1.0)*r02*x12274))+(((-1.0)*r01*x12259*x12263))+((r00*x12277)));
evalcond[2]=((1.0)+(((-1.0)*r11*x12259*x12263))+(((-1.0)*r12*x12274))+((r10*x12277)));
evalcond[3]=((((-1.0)*gconst11*x12261*x12274))+((gconst11*x12268))+((cj3*r11*x12276))+((r10*x12270))+(((-1.0)*cj3*r12*x12275)));
evalcond[4]=(((x12268*x12276))+(((-1.0)*r12*sj3*x12275))+(((-1.0)*r10*x12271*x12274))+(((-1.0)*r11*x12264))+(((-1.0)*x12261*x12263)));
evalcond[5]=((((-1.0)*cj3*r02*x12275))+((gconst11*x12265))+((cj3*r01*x12276))+((cj1*cj2))+(((-1.0)*r00*x12264*x12274))+((r00*x12270))+(((-1.0)*sj1*x12266)));
evalcond[6]=((((-1.0)*r20*x12264*x12274))+((gconst10*x12267))+(((-1.0)*x12278))+((cj3*r21*x12276))+(((-1.0)*cj3*r22*x12275))+((gconst11*x12262)));
evalcond[7]=((((-1.0)*gconst11*x12267*x12274))+((x12262*x12276))+(((-1.0)*r21*x12264))+((sj1*sj2))+(((-1.0)*cj3*r20*x12263))+(((-1.0)*r22*sj3*x12275))+(((-1.0)*cj1*x12269)));
evalcond[8]=((((-1.0)*x12278))+(((-1.0)*r02*sj3*x12275))+(((-1.0)*cj3*r00*x12263))+(((-1.0)*r01*x12264))+(((-1.0)*r00*x12271*x12274))+((x12265*x12276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12279=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x12279.valid){
continue;
}
CheckValue<IkReal> x12280 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst11*r20))+(((-1.0)*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12279.value)))+(x12280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12281=IKsin(j4);
IkReal x12282=IKcos(j4);
IkReal x12283=(cj3*r10);
IkReal x12284=(r21*sj3);
IkReal x12285=((1.0)*gconst10);
IkReal x12286=(cj3*gconst11);
IkReal x12287=(r01*sj3);
IkReal x12288=((1.0)*sj2);
IkReal x12289=(r20*sj3);
IkReal x12290=(r11*sj3);
IkReal x12291=((1.0)*cj2);
IkReal x12292=(gconst10*sj3);
IkReal x12293=(gconst11*sj3);
IkReal x12294=(cj1*x12288);
IkReal x12295=(sj1*x12291);
IkReal x12296=((1.0)*x12282);
IkReal x12297=((1.0)*x12281);
IkReal x12298=(gconst10*x12282);
IkReal x12299=(gconst11*x12281);
IkReal x12300=(x12295+x12294);
evalcond[0]=(((r20*x12299))+(((-1.0)*r21*x12281*x12285))+(((-1.0)*r22*x12296)));
evalcond[1]=((((-1.0)*r01*x12281*x12285))+((r00*x12299))+(((-1.0)*r02*x12296)));
evalcond[2]=((1.0)+(((-1.0)*r11*x12281*x12285))+((r10*x12299))+(((-1.0)*r12*x12296)));
evalcond[3]=(((cj3*r11*x12298))+((r10*x12292))+((gconst11*x12290))+(((-1.0)*cj3*r12*x12297))+(((-1.0)*gconst11*x12283*x12296)));
evalcond[4]=((((-1.0)*r10*x12293*x12296))+((x12290*x12298))+(((-1.0)*r11*x12286))+(((-1.0)*r12*sj3*x12297))+(((-1.0)*x12283*x12285)));
evalcond[5]=(((gconst11*x12287))+(((-1.0)*cj3*r02*x12297))+((r00*x12292))+(((-1.0)*sj1*x12288))+((cj3*r01*x12298))+(((-1.0)*r00*x12286*x12296))+((cj1*cj2)));
evalcond[6]=((((-1.0)*cj3*r22*x12297))+((gconst11*x12284))+((gconst10*x12289))+(((-1.0)*x12300))+((cj3*r21*x12298))+(((-1.0)*r20*x12286*x12296)));
evalcond[7]=((((-1.0)*r22*sj3*x12297))+((sj1*sj2))+(((-1.0)*gconst11*x12289*x12296))+((x12284*x12298))+(((-1.0)*cj3*r20*x12285))+(((-1.0)*cj1*x12291))+(((-1.0)*r21*x12286)));
evalcond[8]=((((-1.0)*r02*sj3*x12297))+(((-1.0)*r00*x12293*x12296))+(((-1.0)*cj3*r00*x12285))+(((-1.0)*x12300))+((x12287*x12298))+(((-1.0)*r01*x12286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12301=((-1.0)*r01);
IkReal x12302=((-1.0)*py);
CheckValue<IkReal> x12304 = IKatan2WithCheck(IkReal(x12301),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12304.valid){
continue;
}
IkReal x12303=((1.0)*(x12304.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12303)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12302);
rxp0_2=(py*r00);
rxp1_0=(r21*x12302);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12303)));
IkReal gconst10=x12301;
IkReal gconst11=((1.0)*r00);
j4eval[0]=1.0;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12305=((-1.0)*r01);
IkReal x12306=((-1.0)*py);
CheckValue<IkReal> x12308 = IKatan2WithCheck(IkReal(x12305),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12308.valid){
continue;
}
IkReal x12307=((1.0)*(x12308.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12307)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12306);
rxp0_2=(py*r00);
rxp1_0=(r21*x12306);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12307)));
IkReal gconst10=x12305;
IkReal gconst11=((1.0)*r00);
IkReal x12309=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=((((-1.0)*r00*r20*x12309))+(((-1.0)*r01*r21*x12309)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12310=((-1.0)*r01);
IkReal x12311=((-1.0)*py);
CheckValue<IkReal> x12313 = IKatan2WithCheck(IkReal(x12310),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12313.valid){
continue;
}
IkReal x12312=((1.0)*(x12313.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12312)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12311);
rxp0_2=(py*r00);
rxp1_0=(r21*x12311);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12312)));
IkReal gconst10=x12310;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12314=((-1.0)*r01);
IkReal x12315=((-1.0)*py);
CheckValue<IkReal> x12317 = IKatan2WithCheck(IkReal(x12314),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12317.valid){
continue;
}
IkReal x12316=((1.0)*(x12317.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12316)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12315);
rxp0_2=(py*r00);
rxp1_0=(r21*x12315);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12316)));
IkReal gconst10=x12314;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12318=((-1.0)*r01);
IkReal x12319=((-1.0)*py);
CheckValue<IkReal> x12321 = IKatan2WithCheck(IkReal(x12318),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12321.valid){
continue;
}
IkReal x12320=((1.0)*(x12321.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12320)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12319);
rxp0_2=(py*r00);
rxp1_0=(r21*x12319);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12320)));
IkReal gconst10=x12318;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12322=((-1.0)*r01);
IkReal x12323=((-1.0)*py);
CheckValue<IkReal> x12325 = IKatan2WithCheck(IkReal(x12322),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12325.valid){
continue;
}
IkReal x12324=((1.0)*(x12325.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12324)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12323);
rxp0_2=(py*r00);
rxp1_0=(r21*x12323);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12324)));
IkReal gconst10=x12322;
IkReal gconst11=((1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12328=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x12328.valid){
continue;
}
IkReal x12326=x12328.value;
IkReal x12327=(cj0*x12326);
cj4array[0]=((((-1.0)*sj1*sj2*x12327))+((cj1*cj2*x12327)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12329=IKsin(j4);
IkReal x12330=IKcos(j4);
IkReal x12331=(gconst10*r21);
IkReal x12332=(gconst11*r20);
IkReal x12333=((1.0)*x12330);
IkReal x12334=((1.0)*x12329);
evalcond[0]=((-1.0)*r12*x12329);
evalcond[1]=((((-1.0)*r12*x12333))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x12331*x12334))+((x12329*x12332)));
evalcond[3]=(((gconst11*r00*x12329))+(((-1.0)*gconst10*r01*x12334)));
evalcond[4]=(((x12330*x12331))+(((-1.0)*cj2*sj1))+(((-1.0)*x12332*x12333))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12336=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12336.valid){
continue;
}
IkReal x12335=x12336.value;
cj4array[0]=(((cj1*sj2*x12335))+((cj2*sj1*x12335)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12337=IKsin(j4);
IkReal x12338=IKcos(j4);
IkReal x12339=(gconst10*r01);
IkReal x12340=((1.0)*cj0);
IkReal x12341=(gconst11*x12337);
IkReal x12342=((1.0)*x12338);
IkReal x12343=((1.0)*x12337);
evalcond[0]=((-1.0)*r12*x12337);
evalcond[1]=((((-1.0)*x12340))+(((-1.0)*r12*x12342)));
evalcond[2]=(((r20*x12341))+(((-1.0)*gconst10*r21*x12343)));
evalcond[3]=(((r00*x12341))+(((-1.0)*x12339*x12343)));
evalcond[4]=((((-1.0)*gconst11*r00*x12342))+((x12338*x12339))+(((-1.0)*cj1*cj2*x12340))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12344=IKPowWithIntegerCheck(r12,-1);
if(!x12344.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12344.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12345=IKsin(j4);
IkReal x12346=IKcos(j4);
IkReal x12347=((1.0)*cj2);
IkReal x12348=(gconst11*r20);
IkReal x12349=(gconst11*r00);
IkReal x12350=(gconst10*x12346);
IkReal x12351=((1.0)*x12346);
IkReal x12352=((1.0)*gconst10*x12345);
evalcond[0]=((-1.0)*r12*x12345);
evalcond[1]=(((x12345*x12348))+(((-1.0)*r21*x12352)));
evalcond[2]=(((x12345*x12349))+(((-1.0)*r01*x12352)));
evalcond[3]=((((-1.0)*x12348*x12351))+(((-1.0)*cj1*sj2))+((r21*x12350))+(((-1.0)*sj1*x12347)));
evalcond[4]=((((-1.0)*x12349*x12351))+((r01*x12350))+(((-1.0)*cj0*cj1*x12347))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12353=((-1.0)*r01);
IkReal x12354=((-1.0)*py);
CheckValue<IkReal> x12356 = IKatan2WithCheck(IkReal(x12353),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12356.valid){
continue;
}
IkReal x12355=((1.0)*(x12356.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12355)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12354);
rxp0_2=(py*r00);
rxp1_0=(r21*x12354);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12355)));
IkReal gconst10=x12353;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12357=((-1.0)*r01);
IkReal x12358=((-1.0)*py);
CheckValue<IkReal> x12360 = IKatan2WithCheck(IkReal(x12357),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12360.valid){
continue;
}
IkReal x12359=((1.0)*(x12360.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12359)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12358);
rxp0_2=(py*r00);
rxp1_0=(r21*x12358);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12359)));
IkReal gconst10=x12357;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12361=((-1.0)*r01);
IkReal x12362=((-1.0)*py);
CheckValue<IkReal> x12364 = IKatan2WithCheck(IkReal(x12361),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12364.valid){
continue;
}
IkReal x12363=((1.0)*(x12364.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12363)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12362);
rxp0_2=(py*r00);
rxp1_0=(r21*x12362);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12363)));
IkReal gconst10=x12361;
IkReal gconst11=((1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12367=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x12367.valid){
continue;
}
IkReal x12365=x12367.value;
IkReal x12366=(cj0*x12365);
cj4array[0]=((((-1.0)*sj1*sj2*x12366))+((cj1*cj2*x12366)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12368=IKsin(j4);
IkReal x12369=IKcos(j4);
IkReal x12370=(gconst11*r20);
IkReal x12371=((1.0)*x12369);
IkReal x12372=((1.0)*gconst10*x12368);
evalcond[0]=(r12*x12368);
evalcond[1]=((((-1.0)*r12*x12371))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x12372))+((x12368*x12370)));
evalcond[3]=((((-1.0)*r01*x12372))+((gconst11*r00*x12368)));
evalcond[4]=((((-1.0)*gconst10*r21*x12371))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x12369*x12370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12374=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12374.valid){
continue;
}
IkReal x12373=x12374.value;
cj4array[0]=(((cj2*sj1*x12373))+((cj1*sj2*x12373)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12375=IKsin(j4);
IkReal x12376=IKcos(j4);
IkReal x12377=((1.0)*cj0);
IkReal x12378=((1.0)*gconst10*r01);
IkReal x12379=(gconst11*x12375);
evalcond[0]=(r12*x12375);
evalcond[1]=((((-1.0)*x12377))+(((-1.0)*r12*x12376)));
evalcond[2]=((((-1.0)*gconst10*r21*x12375))+((r20*x12379)));
evalcond[3]=((((-1.0)*x12375*x12378))+((r00*x12379)));
evalcond[4]=((((-1.0)*cj1*cj2*x12377))+(((-1.0)*x12376*x12378))+((cj0*sj1*sj2))+((gconst11*r00*x12376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12380=IKPowWithIntegerCheck(r12,-1);
if(!x12380.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12380.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12381=IKsin(j4);
IkReal x12382=IKcos(j4);
IkReal x12383=((1.0)*cj2);
IkReal x12384=(gconst11*r20);
IkReal x12385=(gconst11*r00);
IkReal x12386=((1.0)*gconst10*r01);
IkReal x12387=((1.0)*gconst10*r21);
evalcond[0]=(r12*x12381);
evalcond[1]=(((x12381*x12384))+(((-1.0)*x12381*x12387)));
evalcond[2]=(((x12381*x12385))+(((-1.0)*x12381*x12386)));
evalcond[3]=((((-1.0)*x12382*x12387))+(((-1.0)*sj1*x12383))+(((-1.0)*cj1*sj2))+((x12382*x12384)));
evalcond[4]=((((-1.0)*x12382*x12386))+(((-1.0)*cj0*cj1*x12383))+((x12382*x12385))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12388=((-1.0)*r01);
IkReal x12389=((-1.0)*py);
CheckValue<IkReal> x12391 = IKatan2WithCheck(IkReal(x12388),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12391.valid){
continue;
}
IkReal x12390=((1.0)*(x12391.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12390)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12389);
rxp0_2=(py*r00);
rxp1_0=(r21*x12389);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12390)));
IkReal gconst10=x12388;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12392=((-1.0)*r01);
IkReal x12393=((-1.0)*py);
CheckValue<IkReal> x12395 = IKatan2WithCheck(IkReal(x12392),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12395.valid){
continue;
}
IkReal x12394=((1.0)*(x12395.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12394)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12393);
rxp0_2=(py*r00);
rxp1_0=(r21*x12393);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12394)));
IkReal gconst10=x12392;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12396=((-1.0)*r01);
IkReal x12397=((-1.0)*py);
CheckValue<IkReal> x12399 = IKatan2WithCheck(IkReal(x12396),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12399.valid){
continue;
}
IkReal x12398=((1.0)*(x12399.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12398)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12397);
rxp0_2=(py*r00);
rxp1_0=(r21*x12397);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12398)));
IkReal gconst10=x12396;
IkReal gconst11=((1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12402=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x12402.valid){
continue;
}
IkReal x12400=x12402.value;
IkReal x12401=((1.0)*cj0*x12400);
cj4array[0]=((((-1.0)*cj1*sj2*x12401))+(((-1.0)*cj2*sj1*x12401)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12403=IKsin(j4);
IkReal x12404=IKcos(j4);
IkReal x12405=(gconst10*r21);
IkReal x12406=(gconst11*r20);
IkReal x12407=((1.0)*x12404);
IkReal x12408=((1.0)*x12403);
evalcond[0]=((-1.0)*r12*x12403);
evalcond[1]=((((-1.0)*r12*x12407))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x12405*x12408))+((x12403*x12406)));
evalcond[3]=(((gconst11*r00*x12403))+(((-1.0)*gconst10*r01*x12408)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12404*x12405))+(((-1.0)*x12406*x12407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12410=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12410.valid){
continue;
}
IkReal x12409=x12410.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12409))+((cj1*cj2*x12409)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12411=IKsin(j4);
IkReal x12412=IKcos(j4);
IkReal x12413=(gconst10*r01);
IkReal x12414=(gconst11*x12411);
IkReal x12415=((1.0)*x12412);
IkReal x12416=((1.0)*x12411);
evalcond[0]=((-1.0)*r12*x12411);
evalcond[1]=((((-1.0)*r12*x12415))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst10*r21*x12416))+((r20*x12414)));
evalcond[3]=(((r00*x12414))+(((-1.0)*x12413*x12416)));
evalcond[4]=(((cj0*cj2*sj1))+((cj0*cj1*sj2))+((x12412*x12413))+(((-1.0)*gconst11*r00*x12415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12417=IKPowWithIntegerCheck(r12,-1);
if(!x12417.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12417.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12418=IKsin(j4);
IkReal x12419=IKcos(j4);
IkReal x12420=(gconst11*r20);
IkReal x12421=(gconst11*r00);
IkReal x12422=(gconst10*x12419);
IkReal x12423=((1.0)*x12419);
IkReal x12424=((1.0)*gconst10*x12418);
evalcond[0]=((-1.0)*r12*x12418);
evalcond[1]=(((x12418*x12420))+(((-1.0)*r21*x12424)));
evalcond[2]=((((-1.0)*r01*x12424))+((x12418*x12421)));
evalcond[3]=(((r21*x12422))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12420*x12423)));
evalcond[4]=((((-1.0)*x12421*x12423))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((r01*x12422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12425=((-1.0)*r01);
IkReal x12426=((-1.0)*py);
CheckValue<IkReal> x12428 = IKatan2WithCheck(IkReal(x12425),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12428.valid){
continue;
}
IkReal x12427=((1.0)*(x12428.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12427)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12426);
rxp0_2=(py*r00);
rxp1_0=(r21*x12426);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12427)));
IkReal gconst10=x12425;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12429=((-1.0)*r01);
IkReal x12430=((-1.0)*py);
CheckValue<IkReal> x12432 = IKatan2WithCheck(IkReal(x12429),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12432.valid){
continue;
}
IkReal x12431=((1.0)*(x12432.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12431)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12430);
rxp0_2=(py*r00);
rxp1_0=(r21*x12430);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12431)));
IkReal gconst10=x12429;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12433=((-1.0)*r01);
IkReal x12434=((-1.0)*py);
CheckValue<IkReal> x12436 = IKatan2WithCheck(IkReal(x12433),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12436.valid){
continue;
}
IkReal x12435=((1.0)*(x12436.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12435)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12434);
rxp0_2=(py*r00);
rxp1_0=(r21*x12434);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12435)));
IkReal gconst10=x12433;
IkReal gconst11=((1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12439=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x12439.valid){
continue;
}
IkReal x12437=x12439.value;
IkReal x12438=((1.0)*cj0*x12437);
cj4array[0]=((((-1.0)*cj1*sj2*x12438))+(((-1.0)*cj2*sj1*x12438)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12440=IKsin(j4);
IkReal x12441=IKcos(j4);
IkReal x12442=(gconst11*r20);
IkReal x12443=((1.0)*x12441);
IkReal x12444=((1.0)*gconst10*x12440);
evalcond[0]=(r12*x12440);
evalcond[1]=((((-1.0)*r12*x12443))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x12444))+((x12440*x12442)));
evalcond[3]=(((gconst11*r00*x12440))+(((-1.0)*r01*x12444)));
evalcond[4]=(((x12441*x12442))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12446=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12446.valid){
continue;
}
IkReal x12445=x12446.value;
cj4array[0]=(((cj1*cj2*x12445))+(((-1.0)*sj1*sj2*x12445)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12447=IKsin(j4);
IkReal x12448=IKcos(j4);
IkReal x12449=((1.0)*gconst10*r01);
IkReal x12450=(gconst11*x12447);
evalcond[0]=(r12*x12447);
evalcond[1]=((((-1.0)*r12*x12448))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst10*r21*x12447))+((r20*x12450)));
evalcond[3]=(((r00*x12450))+(((-1.0)*x12447*x12449)));
evalcond[4]=((((-1.0)*x12448*x12449))+((gconst11*r00*x12448))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12451=IKPowWithIntegerCheck(r12,-1);
if(!x12451.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12451.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12452=IKsin(j4);
IkReal x12453=IKcos(j4);
IkReal x12454=(gconst11*r20);
IkReal x12455=(gconst11*r00);
IkReal x12456=((1.0)*gconst10*r01);
IkReal x12457=((1.0)*gconst10*r21);
evalcond[0]=(r12*x12452);
evalcond[1]=((((-1.0)*x12452*x12457))+((x12452*x12454)));
evalcond[2]=((((-1.0)*x12452*x12456))+((x12452*x12455)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12453*x12454))+(((-1.0)*x12453*x12457)));
evalcond[4]=(((x12453*x12455))+((cj0*cj2*sj1))+(((-1.0)*x12453*x12456))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12459=IKPowWithIntegerCheck(r12,-1);
if(!x12459.valid){
continue;
}
IkReal x12458=x12459.value;
CheckValue<IkReal> x12460=IKPowWithIntegerCheck(sj3,-1);
if(!x12460.valid){
continue;
}
if( IKabs((x12458*(x12460.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x12458)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12458*(x12460.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x12458))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12458*(x12460.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x12458));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12461=IKsin(j4);
IkReal x12462=IKcos(j4);
IkReal x12463=((1.0)*sj3);
IkReal x12464=(cj0*cj1);
IkReal x12465=((1.0)*cj2);
IkReal x12466=(cj2*sj1);
IkReal x12467=(sj1*sj2);
IkReal x12468=(gconst11*sj3);
IkReal x12469=(cj3*r01);
IkReal x12470=((1.0)*gconst11);
IkReal x12471=(gconst10*sj3);
IkReal x12472=(cj1*sj2);
IkReal x12473=(cj3*r21);
IkReal x12474=((1.0)*cj3);
IkReal x12475=(r12*x12461);
IkReal x12476=(gconst11*x12462);
IkReal x12477=(gconst10*x12462);
IkReal x12478=(gconst11*x12461);
IkReal x12479=(x12462*x12471);
IkReal x12480=((1.0)*gconst10*x12461);
evalcond[0]=((((-1.0)*r12*x12462))+(((-1.0)*cj0)));
evalcond[1]=(((r20*x12478))+(((-1.0)*r21*x12480)));
evalcond[2]=(sj0+((r00*x12478))+(((-1.0)*r01*x12480)));
evalcond[3]=((((-1.0)*x12463*x12475))+((sj0*x12466))+((sj0*x12472)));
evalcond[4]=((((-1.0)*cj1*sj0*x12465))+((sj0*x12467))+(((-1.0)*x12474*x12475)));
evalcond[5]=((((-1.0)*cj3*r20*x12462*x12470))+(((-1.0)*x12472))+((x12473*x12477))+((r20*x12471))+((r21*x12468))+(((-1.0)*sj1*x12465)));
evalcond[6]=((((-1.0)*gconst10*r20*x12474))+(((-1.0)*r20*x12463*x12476))+(((-1.0)*x12470*x12473))+x12467+(((-1.0)*cj1*x12465))+((r21*x12479)));
evalcond[7]=((((-1.0)*x12464*x12465))+((r00*x12471))+((r01*x12468))+((cj0*x12467))+(((-1.0)*cj3*r00*x12462*x12470))+((x12469*x12477)));
evalcond[8]=(((sj2*x12464))+((r01*x12479))+((cj0*x12466))+(((-1.0)*r00*x12463*x12476))+(((-1.0)*x12469*x12470))+(((-1.0)*gconst10*r00*x12474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12481=((1.0)*r20);
CheckValue<IkReal> x12482=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x12482.valid){
continue;
}
CheckValue<IkReal> x12483=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12481))+((cj3*gconst10*r21))),-1);
if(!x12483.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x12482.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12483.value)*((((cj2*sj1))+(((-1.0)*gconst10*sj3*x12481))+((cj1*sj2))+(((-1.0)*gconst11*r21*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x12482.value)))+IKsqr(((x12483.value)*((((cj2*sj1))+(((-1.0)*gconst10*sj3*x12481))+((cj1*sj2))+(((-1.0)*gconst11*r21*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x12482.value)), ((x12483.value)*((((cj2*sj1))+(((-1.0)*gconst10*sj3*x12481))+((cj1*sj2))+(((-1.0)*gconst11*r21*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12484=IKsin(j4);
IkReal x12485=IKcos(j4);
IkReal x12486=((1.0)*sj3);
IkReal x12487=(cj0*cj1);
IkReal x12488=((1.0)*cj2);
IkReal x12489=(cj2*sj1);
IkReal x12490=(sj1*sj2);
IkReal x12491=(gconst11*sj3);
IkReal x12492=(cj3*r01);
IkReal x12493=((1.0)*gconst11);
IkReal x12494=(gconst10*sj3);
IkReal x12495=(cj1*sj2);
IkReal x12496=(cj3*r21);
IkReal x12497=((1.0)*cj3);
IkReal x12498=(r12*x12484);
IkReal x12499=(gconst11*x12485);
IkReal x12500=(gconst10*x12485);
IkReal x12501=(gconst11*x12484);
IkReal x12502=(x12485*x12494);
IkReal x12503=((1.0)*gconst10*x12484);
evalcond[0]=((((-1.0)*r12*x12485))+(((-1.0)*cj0)));
evalcond[1]=(((r20*x12501))+(((-1.0)*r21*x12503)));
evalcond[2]=(sj0+(((-1.0)*r01*x12503))+((r00*x12501)));
evalcond[3]=(((sj0*x12495))+(((-1.0)*x12486*x12498))+((sj0*x12489)));
evalcond[4]=(((sj0*x12490))+(((-1.0)*cj1*sj0*x12488))+(((-1.0)*x12497*x12498)));
evalcond[5]=(((r20*x12494))+((r21*x12491))+(((-1.0)*cj3*r20*x12485*x12493))+((x12496*x12500))+(((-1.0)*sj1*x12488))+(((-1.0)*x12495)));
evalcond[6]=((((-1.0)*r20*x12486*x12499))+((r21*x12502))+(((-1.0)*cj1*x12488))+(((-1.0)*gconst10*r20*x12497))+(((-1.0)*x12493*x12496))+x12490);
evalcond[7]=((((-1.0)*x12487*x12488))+((r00*x12494))+((r01*x12491))+((x12492*x12500))+(((-1.0)*cj3*r00*x12485*x12493))+((cj0*x12490)));
evalcond[8]=(((cj0*x12489))+((r01*x12502))+(((-1.0)*gconst10*r00*x12497))+((sj2*x12487))+(((-1.0)*r00*x12486*x12499))+(((-1.0)*x12492*x12493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12504=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x12504.valid){
continue;
}
CheckValue<IkReal> x12505=IKPowWithIntegerCheck(r12,-1);
if(!x12505.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x12504.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x12505.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x12504.value)))+IKsqr(((-1.0)*cj0*(x12505.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x12504.value)), ((-1.0)*cj0*(x12505.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12506=IKsin(j4);
IkReal x12507=IKcos(j4);
IkReal x12508=((1.0)*sj3);
IkReal x12509=(cj0*cj1);
IkReal x12510=((1.0)*cj2);
IkReal x12511=(cj2*sj1);
IkReal x12512=(sj1*sj2);
IkReal x12513=(gconst11*sj3);
IkReal x12514=(cj3*r01);
IkReal x12515=((1.0)*gconst11);
IkReal x12516=(gconst10*sj3);
IkReal x12517=(cj1*sj2);
IkReal x12518=(cj3*r21);
IkReal x12519=((1.0)*cj3);
IkReal x12520=(r12*x12506);
IkReal x12521=(gconst11*x12507);
IkReal x12522=(gconst10*x12507);
IkReal x12523=(gconst11*x12506);
IkReal x12524=(x12507*x12516);
IkReal x12525=((1.0)*gconst10*x12506);
evalcond[0]=((((-1.0)*r12*x12507))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*r21*x12525))+((r20*x12523)));
evalcond[2]=(sj0+((r00*x12523))+(((-1.0)*r01*x12525)));
evalcond[3]=((((-1.0)*x12508*x12520))+((sj0*x12511))+((sj0*x12517)));
evalcond[4]=((((-1.0)*x12519*x12520))+((sj0*x12512))+(((-1.0)*cj1*sj0*x12510)));
evalcond[5]=(((r20*x12516))+(((-1.0)*x12517))+((r21*x12513))+(((-1.0)*sj1*x12510))+(((-1.0)*cj3*r20*x12507*x12515))+((x12518*x12522)));
evalcond[6]=((((-1.0)*gconst10*r20*x12519))+((r21*x12524))+(((-1.0)*r20*x12508*x12521))+x12512+(((-1.0)*cj1*x12510))+(((-1.0)*x12515*x12518)));
evalcond[7]=((((-1.0)*cj3*r00*x12507*x12515))+((x12514*x12522))+((r00*x12516))+((r01*x12513))+(((-1.0)*x12509*x12510))+((cj0*x12512)));
evalcond[8]=(((sj2*x12509))+(((-1.0)*x12514*x12515))+(((-1.0)*r00*x12508*x12521))+(((-1.0)*gconst10*r00*x12519))+((r01*x12524))+((cj0*x12511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12526=((-1.0)*r01);
CheckValue<IkReal> x12529 = IKatan2WithCheck(IkReal(x12526),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12529.valid){
continue;
}
IkReal x12527=((1.0)*(x12529.value));
IkReal x12528=x12120;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12527)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12527)));
IkReal gconst10=(x12526*x12528);
IkReal gconst11=((1.0)*r00*x12528);
IkReal x12530=r02*r02;
IkReal x12531=(r12*sj0);
IkReal x12532=x12120;
IkReal x12533=(cj0*x12532);
j4eval[0]=((IKabs((((r02*x12531*x12532))+(((-1.0)*x12533))+((x12530*x12533)))))+(IKabs((x12531+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12534=((1.0)*sj3);
IkReal x12535=(gconst11*r20);
IkReal x12536=(gconst10*r21);
IkReal x12537=(cj1*cj2);
IkReal x12538=((1.0)*sj1*sj2);
IkReal x12539=(cj3*gconst10*r20);
IkReal x12540=(cj3*gconst11*r21);
CheckValue<IkReal> x12541=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01*x12534*x12536))+(((-1.0)*gconst11*r00*x12534*x12535))+((gconst11*r00*sj3*x12536))+((gconst10*r01*sj3*x12535))),-1);
if(!x12541.valid){
continue;
}
CheckValue<IkReal> x12542=IKPowWithIntegerCheck(((((-1.0)*x12534*x12535))+((sj3*x12536))),-1);
if(!x12542.valid){
continue;
}
if( IKabs(((x12541.value)*(((((-1.0)*r02*x12538))+((sj0*sj3*x12535))+((r02*x12540))+((r02*x12537))+((r02*x12539))+(((-1.0)*sj0*x12534*x12536)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12542.value)*((x12540+x12537+x12539+(((-1.0)*x12538)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12541.value)*(((((-1.0)*r02*x12538))+((sj0*sj3*x12535))+((r02*x12540))+((r02*x12537))+((r02*x12539))+(((-1.0)*sj0*x12534*x12536))))))+IKsqr(((x12542.value)*((x12540+x12537+x12539+(((-1.0)*x12538))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12541.value)*(((((-1.0)*r02*x12538))+((sj0*sj3*x12535))+((r02*x12540))+((r02*x12537))+((r02*x12539))+(((-1.0)*sj0*x12534*x12536))))), ((x12542.value)*((x12540+x12537+x12539+(((-1.0)*x12538))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12543=IKsin(j4);
IkReal x12544=IKcos(j4);
IkReal x12545=((1.0)*sj3);
IkReal x12546=(cj0*cj1);
IkReal x12547=((1.0)*cj2);
IkReal x12548=((1.0)*r10);
IkReal x12549=(gconst10*r01);
IkReal x12550=(cj3*gconst10);
IkReal x12551=(gconst10*r21);
IkReal x12552=(cj1*sj2);
IkReal x12553=(sj1*sj2);
IkReal x12554=(gconst11*r10);
IkReal x12555=(gconst11*sj3);
IkReal x12556=(gconst10*r11);
IkReal x12557=(gconst10*sj3);
IkReal x12558=(cj2*sj1);
IkReal x12559=((1.0)*cj3);
IkReal x12560=(gconst11*r00);
IkReal x12561=((1.0)*r20);
IkReal x12562=(r12*x12543);
IkReal x12563=(cj3*x12544);
IkReal x12564=(sj3*x12544);
IkReal x12565=(gconst11*x12544);
IkReal x12566=(gconst11*x12559);
IkReal x12567=((1.0)*x12544);
IkReal x12568=(r02*x12543);
IkReal x12569=((1.0)*x12543);
evalcond[0]=((((-1.0)*x12551*x12569))+((gconst11*r20*x12543)));
evalcond[1]=(sj0+(((-1.0)*r02*x12567))+((x12543*x12560))+(((-1.0)*x12549*x12569)));
evalcond[2]=((((-1.0)*r12*x12567))+(((-1.0)*x12556*x12569))+((x12543*x12554))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x12552))+((r21*x12544*x12550))+((r20*x12557))+(((-1.0)*r20*x12559*x12565))+(((-1.0)*sj1*x12547))+((r21*x12555)));
evalcond[4]=((((-1.0)*r20*x12545*x12565))+(((-1.0)*cj1*x12547))+x12553+(((-1.0)*r21*x12566))+((x12551*x12564))+(((-1.0)*x12550*x12561)));
evalcond[5]=(((x12549*x12563))+((r01*x12555))+((r00*x12557))+(((-1.0)*x12546*x12547))+((cj0*x12553))+(((-1.0)*x12559*x12568))+(((-1.0)*x12544*x12559*x12560)));
evalcond[6]=(((sj0*x12553))+(((-1.0)*gconst11*x12548*x12563))+((r10*x12557))+((r11*x12555))+((r11*x12544*x12550))+(((-1.0)*x12559*x12562))+(((-1.0)*cj1*sj0*x12547)));
evalcond[7]=(((x12549*x12564))+(((-1.0)*r01*x12566))+((cj0*x12558))+(((-1.0)*x12544*x12545*x12560))+(((-1.0)*r00*x12550))+(((-1.0)*x12545*x12568))+((sj2*x12546)));
evalcond[8]=((((-1.0)*x12548*x12550))+(((-1.0)*r11*x12566))+((x12556*x12564))+((sj0*x12558))+((sj0*x12552))+(((-1.0)*x12545*x12562))+(((-1.0)*x12544*x12545*x12554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12570=((1.0)*gconst10);
CheckValue<IkReal> x12571 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12570))+(((-1.0)*r11*sj0*x12570))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12571.valid){
continue;
}
CheckValue<IkReal> x12572=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12571.value)+(((1.5707963267949)*(x12572.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12573=IKsin(j4);
IkReal x12574=IKcos(j4);
IkReal x12575=((1.0)*sj3);
IkReal x12576=(cj0*cj1);
IkReal x12577=((1.0)*cj2);
IkReal x12578=((1.0)*r10);
IkReal x12579=(gconst10*r01);
IkReal x12580=(cj3*gconst10);
IkReal x12581=(gconst10*r21);
IkReal x12582=(cj1*sj2);
IkReal x12583=(sj1*sj2);
IkReal x12584=(gconst11*r10);
IkReal x12585=(gconst11*sj3);
IkReal x12586=(gconst10*r11);
IkReal x12587=(gconst10*sj3);
IkReal x12588=(cj2*sj1);
IkReal x12589=((1.0)*cj3);
IkReal x12590=(gconst11*r00);
IkReal x12591=((1.0)*r20);
IkReal x12592=(r12*x12573);
IkReal x12593=(cj3*x12574);
IkReal x12594=(sj3*x12574);
IkReal x12595=(gconst11*x12574);
IkReal x12596=(gconst11*x12589);
IkReal x12597=((1.0)*x12574);
IkReal x12598=(r02*x12573);
IkReal x12599=((1.0)*x12573);
evalcond[0]=(((gconst11*r20*x12573))+(((-1.0)*x12581*x12599)));
evalcond[1]=((((-1.0)*x12579*x12599))+sj0+((x12573*x12590))+(((-1.0)*r02*x12597)));
evalcond[2]=(((x12573*x12584))+(((-1.0)*r12*x12597))+(((-1.0)*x12586*x12599))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x12587))+(((-1.0)*r20*x12589*x12595))+(((-1.0)*sj1*x12577))+((r21*x12585))+((r21*x12574*x12580))+(((-1.0)*x12582)));
evalcond[4]=((((-1.0)*x12580*x12591))+(((-1.0)*r21*x12596))+(((-1.0)*r20*x12575*x12595))+x12583+(((-1.0)*cj1*x12577))+((x12581*x12594)));
evalcond[5]=(((r00*x12587))+((r01*x12585))+((cj0*x12583))+(((-1.0)*x12574*x12589*x12590))+(((-1.0)*x12576*x12577))+(((-1.0)*x12589*x12598))+((x12579*x12593)));
evalcond[6]=(((sj0*x12583))+(((-1.0)*gconst11*x12578*x12593))+(((-1.0)*cj1*sj0*x12577))+(((-1.0)*x12589*x12592))+((r11*x12585))+((r10*x12587))+((r11*x12574*x12580)));
evalcond[7]=((((-1.0)*r01*x12596))+(((-1.0)*x12575*x12598))+((cj0*x12588))+((sj2*x12576))+(((-1.0)*x12574*x12575*x12590))+(((-1.0)*r00*x12580))+((x12579*x12594)));
evalcond[8]=((((-1.0)*x12578*x12580))+((sj0*x12582))+((sj0*x12588))+(((-1.0)*x12575*x12592))+(((-1.0)*r11*x12596))+(((-1.0)*x12574*x12575*x12584))+((x12586*x12594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12600=((1.0)*gconst10);
CheckValue<IkReal> x12601 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x12600))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12600))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12601.valid){
continue;
}
CheckValue<IkReal> x12602=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12601.value)+(((1.5707963267949)*(x12602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12603=IKsin(j4);
IkReal x12604=IKcos(j4);
IkReal x12605=(cj0*cj1);
IkReal x12606=((1.0)*cj2);
IkReal x12607=(cj3*r10);
IkReal x12608=(cj3*r01);
IkReal x12609=((1.0)*gconst10);
IkReal x12610=(r21*sj3);
IkReal x12611=(cj1*sj2);
IkReal x12612=(cj0*sj1);
IkReal x12613=(r01*sj3);
IkReal x12614=(gconst11*sj3);
IkReal x12615=((1.0)*gconst11);
IkReal x12616=(cj3*r11);
IkReal x12617=(gconst10*sj3);
IkReal x12618=(sj0*sj1);
IkReal x12619=(cj3*r21);
IkReal x12620=(cj3*gconst11);
IkReal x12621=((1.0)*x12604);
IkReal x12622=((1.0)*x12603);
IkReal x12623=(gconst10*x12604);
IkReal x12624=(gconst11*x12603);
evalcond[0]=((((-1.0)*r22*x12621))+(((-1.0)*r21*x12603*x12609))+((r20*x12624)));
evalcond[1]=((((-1.0)*r02*x12621))+sj0+((r00*x12624))+(((-1.0)*r01*x12603*x12609)));
evalcond[2]=((((-1.0)*r12*x12621))+(((-1.0)*r11*x12603*x12609))+((r10*x12624))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj3*r22*x12622))+((gconst11*x12610))+((x12619*x12623))+(((-1.0)*sj1*x12606))+(((-1.0)*cj3*r20*x12604*x12615))+(((-1.0)*x12611))+((r20*x12617)));
evalcond[4]=((((-1.0)*cj1*x12606))+(((-1.0)*r20*x12614*x12621))+((sj1*sj2))+(((-1.0)*x12615*x12619))+(((-1.0)*cj3*r20*x12609))+((x12610*x12623))+(((-1.0)*r22*sj3*x12622)));
evalcond[5]=(((gconst11*x12613))+(((-1.0)*cj3*r02*x12622))+((sj2*x12612))+(((-1.0)*cj3*r00*x12604*x12615))+((x12608*x12623))+((r00*x12617))+(((-1.0)*x12605*x12606)));
evalcond[6]=((((-1.0)*cj3*r12*x12622))+((x12616*x12623))+(((-1.0)*x12604*x12607*x12615))+((sj2*x12618))+(((-1.0)*cj1*sj0*x12606))+((r11*x12614))+((r10*x12617)));
evalcond[7]=((((-1.0)*r00*x12614*x12621))+((cj2*x12612))+(((-1.0)*r02*sj3*x12622))+((x12613*x12623))+(((-1.0)*x12608*x12615))+(((-1.0)*cj3*r00*x12609))+((sj2*x12605)));
evalcond[8]=((((-1.0)*x12607*x12609))+((sj0*x12611))+(((-1.0)*x12615*x12616))+((cj2*x12618))+((r11*x12604*x12617))+(((-1.0)*r12*sj3*x12622))+(((-1.0)*r10*x12614*x12621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12625=((1.0)*gconst10);
CheckValue<IkReal> x12626=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r01))+(((-1.0)*r00*x12625)))),-1);
if(!x12626.valid){
continue;
}
CheckValue<IkReal> x12627 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x12625))+((cj0*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12626.value)))+(x12627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12628=IKsin(j4);
IkReal x12629=IKcos(j4);
IkReal x12630=(cj0*cj1);
IkReal x12631=((1.0)*cj2);
IkReal x12632=(cj3*r10);
IkReal x12633=(cj3*r01);
IkReal x12634=((1.0)*gconst10);
IkReal x12635=(r21*sj3);
IkReal x12636=(cj1*sj2);
IkReal x12637=(cj0*sj1);
IkReal x12638=(r01*sj3);
IkReal x12639=(gconst11*sj3);
IkReal x12640=((1.0)*gconst11);
IkReal x12641=(cj3*r11);
IkReal x12642=(gconst10*sj3);
IkReal x12643=(sj0*sj1);
IkReal x12644=(cj3*r21);
IkReal x12645=(cj3*gconst11);
IkReal x12646=((1.0)*x12629);
IkReal x12647=((1.0)*x12628);
IkReal x12648=(gconst10*x12629);
IkReal x12649=(gconst11*x12628);
evalcond[0]=((((-1.0)*r22*x12646))+((r20*x12649))+(((-1.0)*r21*x12628*x12634)));
evalcond[1]=((((-1.0)*r02*x12646))+sj0+((r00*x12649))+(((-1.0)*r01*x12628*x12634)));
evalcond[2]=(((r10*x12649))+(((-1.0)*r11*x12628*x12634))+(((-1.0)*r12*x12646))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj3*r22*x12647))+(((-1.0)*sj1*x12631))+(((-1.0)*x12636))+((r20*x12642))+(((-1.0)*cj3*r20*x12629*x12640))+((x12644*x12648))+((gconst11*x12635)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x12640*x12644))+(((-1.0)*cj3*r20*x12634))+(((-1.0)*cj1*x12631))+((x12635*x12648))+(((-1.0)*r22*sj3*x12647))+(((-1.0)*r20*x12639*x12646)));
evalcond[5]=(((sj2*x12637))+(((-1.0)*cj3*r00*x12629*x12640))+((x12633*x12648))+((r00*x12642))+(((-1.0)*cj3*r02*x12647))+(((-1.0)*x12630*x12631))+((gconst11*x12638)));
evalcond[6]=(((r11*x12639))+(((-1.0)*cj1*sj0*x12631))+((sj2*x12643))+(((-1.0)*x12629*x12632*x12640))+(((-1.0)*cj3*r12*x12647))+((x12641*x12648))+((r10*x12642)));
evalcond[7]=(((sj2*x12630))+(((-1.0)*cj3*r00*x12634))+(((-1.0)*r00*x12639*x12646))+(((-1.0)*x12633*x12640))+((x12638*x12648))+((cj2*x12637))+(((-1.0)*r02*sj3*x12647)));
evalcond[8]=((((-1.0)*r10*x12639*x12646))+(((-1.0)*x12632*x12634))+(((-1.0)*r12*sj3*x12647))+((sj0*x12636))+(((-1.0)*x12640*x12641))+((cj2*x12643))+((r11*x12629*x12642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12650=((1.0)*gconst10);
CheckValue<IkReal> x12651 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x12650))+((gconst11*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12651.valid){
continue;
}
CheckValue<IkReal> x12652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12650))+(((-1.0)*gconst11*r11)))),-1);
if(!x12652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12651.value)+(((1.5707963267949)*(x12652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12653=IKsin(j4);
IkReal x12654=IKcos(j4);
IkReal x12655=(cj0*cj1);
IkReal x12656=((1.0)*cj2);
IkReal x12657=(cj3*r10);
IkReal x12658=(cj3*r01);
IkReal x12659=((1.0)*gconst10);
IkReal x12660=(r21*sj3);
IkReal x12661=(cj1*sj2);
IkReal x12662=(cj0*sj1);
IkReal x12663=(r01*sj3);
IkReal x12664=(gconst11*sj3);
IkReal x12665=((1.0)*gconst11);
IkReal x12666=(cj3*r11);
IkReal x12667=(gconst10*sj3);
IkReal x12668=(sj0*sj1);
IkReal x12669=(cj3*r21);
IkReal x12670=(cj3*gconst11);
IkReal x12671=((1.0)*x12654);
IkReal x12672=((1.0)*x12653);
IkReal x12673=(gconst10*x12654);
IkReal x12674=(gconst11*x12653);
evalcond[0]=(((r20*x12674))+(((-1.0)*r22*x12671))+(((-1.0)*r21*x12653*x12659)));
evalcond[1]=(sj0+(((-1.0)*r02*x12671))+(((-1.0)*r01*x12653*x12659))+((r00*x12674)));
evalcond[2]=(((r10*x12674))+(((-1.0)*r11*x12653*x12659))+(((-1.0)*r12*x12671))+(((-1.0)*cj0)));
evalcond[3]=(((x12669*x12673))+((gconst11*x12660))+(((-1.0)*cj3*r20*x12654*x12665))+(((-1.0)*x12661))+(((-1.0)*sj1*x12656))+(((-1.0)*cj3*r22*x12672))+((r20*x12667)));
evalcond[4]=((((-1.0)*cj3*r20*x12659))+(((-1.0)*cj1*x12656))+(((-1.0)*r20*x12664*x12671))+(((-1.0)*x12665*x12669))+(((-1.0)*r22*sj3*x12672))+((sj1*sj2))+((x12660*x12673)));
evalcond[5]=(((x12658*x12673))+((gconst11*x12663))+(((-1.0)*cj3*r02*x12672))+((r00*x12667))+((sj2*x12662))+(((-1.0)*x12655*x12656))+(((-1.0)*cj3*r00*x12654*x12665)));
evalcond[6]=(((r10*x12667))+((r11*x12664))+(((-1.0)*cj3*r12*x12672))+(((-1.0)*cj1*sj0*x12656))+((x12666*x12673))+(((-1.0)*x12654*x12657*x12665))+((sj2*x12668)));
evalcond[7]=((((-1.0)*r02*sj3*x12672))+((cj2*x12662))+(((-1.0)*r00*x12664*x12671))+((x12663*x12673))+(((-1.0)*cj3*r00*x12659))+(((-1.0)*x12658*x12665))+((sj2*x12655)));
evalcond[8]=(((r11*x12654*x12667))+((sj0*x12661))+(((-1.0)*r10*x12664*x12671))+((cj2*x12668))+(((-1.0)*x12665*x12666))+(((-1.0)*r12*sj3*x12672))+(((-1.0)*x12657*x12659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12675=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12675;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x12675);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12676=((1.0)*sj5);
IkReal x12677=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12676)));
j4eval[0]=x12677;
j4eval[1]=IKsign(x12677);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x12676))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12678=cj5*cj5;
IkReal x12679=(cj3*r00);
IkReal x12680=(cj3*r01);
IkReal x12681=((1.0)*cj5*sj5);
IkReal x12682=(((r21*x12680))+(((-1.0)*r21*x12679*x12681))+(((-1.0)*r20*x12680*x12681))+(((-1.0)*r21*x12678*x12680))+((r20*x12678*x12679))+((cj3*r02*r22)));
j4eval[0]=x12682;
j4eval[1]=IKsign(x12682);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12683=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12683;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x12683);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12684=((1.0)*sj5);
IkReal x12685=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12684)));
j4eval[0]=x12685;
j4eval[1]=IKsign(x12685);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x12684))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12686=cj5*cj5;
IkReal x12687=r01*r01;
IkReal x12688=(cj5*r00);
IkReal x12689=(r01*sj5);
IkReal x12690=((((-2.0)*x12688*x12689))+(((-1.0)*x12686*x12687))+x12687+(r02*r02)+((x12686*(r00*r00))));
j4eval[0]=x12690;
j4eval[1]=((IKabs(r02))+(IKabs((x12689+(((-1.0)*x12688))))));
j4eval[2]=IKsign(x12690);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12691=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12691);
rxp0_2=(py*r00);
rxp1_0=(r21*x12691);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12692=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12692);
rxp0_2=(py*r00);
rxp1_0=(r21*x12692);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12693=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12693.valid){
continue;
}
CheckValue<IkReal> x12694=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12694.valid){
continue;
}
if( IKabs(((-1.0)*(x12693.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12694.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12693.value)))+IKsqr(((x12694.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12693.value)), ((x12694.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12695=IKsin(j4);
IkReal x12696=IKcos(j4);
IkReal x12697=(r01*sj5);
IkReal x12698=(r21*sj5);
IkReal x12699=((1.0)*x12695);
IkReal x12700=(cj5*x12695);
IkReal x12701=((1.0)*cj5*x12696);
evalcond[0]=((-1.0)*r12*x12696);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r12*x12699))+((cj1*sj2)));
evalcond[2]=((((-1.0)*x12698*x12699))+((r20*x12700)));
evalcond[3]=(((x12696*x12697))+(((-1.0)*r00*x12701)));
evalcond[4]=((1.0)+((r00*x12700))+(((-1.0)*x12697*x12699)));
evalcond[5]=(((x12696*x12698))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x12701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12702=IKPowWithIntegerCheck(r12,-1);
if(!x12702.valid){
continue;
}
CheckValue<IkReal> x12703=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12703.valid){
continue;
}
if( IKabs(((x12702.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12703.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12702.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12703.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12702.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12703.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12704=IKsin(j4);
IkReal x12705=IKcos(j4);
IkReal x12706=(r01*sj5);
IkReal x12707=(r21*sj5);
IkReal x12708=((1.0)*x12704);
IkReal x12709=(cj5*x12704);
IkReal x12710=((1.0)*cj5*x12705);
evalcond[0]=((-1.0)*r12*x12705);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12708)));
evalcond[2]=((((-1.0)*x12707*x12708))+((r20*x12709)));
evalcond[3]=((((-1.0)*r00*x12710))+((x12705*x12706)));
evalcond[4]=((1.0)+(((-1.0)*x12706*x12708))+((r00*x12709)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x12710))+((x12705*x12707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12711=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12711);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12711);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12712=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12712);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12712);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12713=((1.0)*cj2);
CheckValue<IkReal> x12714=IKPowWithIntegerCheck(r22,-1);
if(!x12714.valid){
continue;
}
CheckValue<IkReal> x12715=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12715.valid){
continue;
}
if( IKabs(((x12714.value)*((((sj1*sj2))+(((-1.0)*cj1*x12713)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12715.value)*(((((-1.0)*sj1*x12713))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12714.value)*((((sj1*sj2))+(((-1.0)*cj1*x12713))))))+IKsqr(((x12715.value)*(((((-1.0)*sj1*x12713))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12714.value)*((((sj1*sj2))+(((-1.0)*cj1*x12713))))), ((x12715.value)*(((((-1.0)*sj1*x12713))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12716=IKsin(j4);
IkReal x12717=IKcos(j4);
IkReal x12718=(sj5*x12717);
IkReal x12719=(cj5*x12716);
IkReal x12720=((1.0)*sj5*x12716);
IkReal x12721=((1.0)*cj5*x12717);
evalcond[0]=((-1.0)*r22*x12717);
evalcond[1]=(((r10*x12719))+(((-1.0)*r11*x12720)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12716)));
evalcond[3]=((((-1.0)*r00*x12721))+((r01*x12718)));
evalcond[4]=((1.0)+(((-1.0)*r01*x12720))+((r00*x12719)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r10*x12721))+((r11*x12718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12722=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12722.valid){
continue;
}
CheckValue<IkReal> x12723=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12723.valid){
continue;
}
if( IKabs(((-1.0)*(x12722.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12723.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12722.value)))+IKsqr(((x12723.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12722.value)), ((x12723.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12724=IKsin(j4);
IkReal x12725=IKcos(j4);
IkReal x12726=(sj5*x12725);
IkReal x12727=(cj5*x12724);
IkReal x12728=((1.0)*sj5*x12724);
IkReal x12729=((1.0)*cj5*x12725);
evalcond[0]=((-1.0)*r22*x12725);
evalcond[1]=(((r10*x12727))+(((-1.0)*r11*x12728)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12724)));
evalcond[3]=((((-1.0)*r00*x12729))+((r01*x12726)));
evalcond[4]=((1.0)+(((-1.0)*r01*x12728))+((r00*x12727)));
evalcond[5]=(((cj2*sj1))+((r11*x12726))+((cj1*sj2))+(((-1.0)*r10*x12729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12730=cj5*cj5;
IkReal x12731=r01*r01;
IkReal x12732=(r01*sj5);
IkReal x12733=(cj5*r00);
CheckValue<IkReal> x12734 = IKatan2WithCheck(IkReal(((((-1.0)*x12733))+x12732)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12734.valid){
continue;
}
CheckValue<IkReal> x12735=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12730*x12731))+((x12730*(r00*r00)))+x12731+(((-2.0)*x12732*x12733))+(r02*r02))),-1);
if(!x12735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12734.value)+(((1.5707963267949)*(x12735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12736=IKsin(j4);
IkReal x12737=IKcos(j4);
IkReal x12738=(cj5*r00);
IkReal x12739=(cj5*r20);
IkReal x12740=(cj5*r10);
IkReal x12741=((1.0)*x12737);
IkReal x12742=(sj5*x12737);
IkReal x12743=((1.0)*x12736);
IkReal x12744=(sj5*x12743);
evalcond[0]=((((-1.0)*r22*x12741))+((x12736*x12739))+(((-1.0)*r21*x12744)));
evalcond[1]=((((-1.0)*r12*x12741))+(((-1.0)*r11*x12744))+((x12736*x12740)));
evalcond[2]=((((-1.0)*r02*x12743))+(((-1.0)*x12738*x12741))+((r01*x12742)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12741))+((x12736*x12738))+(((-1.0)*r01*x12744)));
evalcond[4]=(((cj2*sj1))+((r11*x12742))+(((-1.0)*r12*x12743))+((cj1*sj2))+(((-1.0)*x12740*x12741)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12743))+(((-1.0)*x12739*x12741))+((r21*x12742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12745=((1.0)*sj5);
CheckValue<IkReal> x12746 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x12745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12746.valid){
continue;
}
CheckValue<IkReal> x12747=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12745)))),-1);
if(!x12747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12746.value)+(((1.5707963267949)*(x12747.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12748=IKsin(j4);
IkReal x12749=IKcos(j4);
IkReal x12750=(cj5*r00);
IkReal x12751=(cj5*r20);
IkReal x12752=(cj5*r10);
IkReal x12753=((1.0)*x12749);
IkReal x12754=(sj5*x12749);
IkReal x12755=((1.0)*x12748);
IkReal x12756=(sj5*x12755);
evalcond[0]=((((-1.0)*r22*x12753))+((x12748*x12751))+(((-1.0)*r21*x12756)));
evalcond[1]=((((-1.0)*r11*x12756))+(((-1.0)*r12*x12753))+((x12748*x12752)));
evalcond[2]=((((-1.0)*r02*x12755))+((r01*x12754))+(((-1.0)*x12750*x12753)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12753))+((x12748*x12750))+(((-1.0)*r01*x12756)));
evalcond[4]=(((cj2*sj1))+((r11*x12754))+(((-1.0)*x12752*x12753))+((cj1*sj2))+(((-1.0)*r12*x12755)));
evalcond[5]=((((-1.0)*r22*x12755))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12754))+(((-1.0)*x12751*x12753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12757 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12757.valid){
continue;
}
CheckValue<IkReal> x12758=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12757.value)+(((1.5707963267949)*(x12758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12759=IKsin(j4);
IkReal x12760=IKcos(j4);
IkReal x12761=(cj5*r00);
IkReal x12762=(cj5*r20);
IkReal x12763=(cj5*r10);
IkReal x12764=((1.0)*x12760);
IkReal x12765=(sj5*x12760);
IkReal x12766=((1.0)*x12759);
IkReal x12767=(sj5*x12766);
evalcond[0]=((((-1.0)*r21*x12767))+(((-1.0)*r22*x12764))+((x12759*x12762)));
evalcond[1]=((((-1.0)*r12*x12764))+(((-1.0)*r11*x12767))+((x12759*x12763)));
evalcond[2]=((((-1.0)*r02*x12766))+((r01*x12765))+(((-1.0)*x12761*x12764)));
evalcond[3]=((1.0)+(((-1.0)*r01*x12767))+((x12759*x12761))+(((-1.0)*r02*x12764)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x12763*x12764))+(((-1.0)*r12*x12766))+((cj1*sj2))+((r11*x12765)));
evalcond[5]=(((r21*x12765))+(((-1.0)*x12762*x12764))+(((-1.0)*r22*x12766))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12768=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12768;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x12768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12769=((1.0)*sj5);
IkReal x12770=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12769)));
j4eval[0]=x12770;
j4eval[1]=IKsign(x12770);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x12769)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12771=(cj1*sj2);
IkReal x12772=(cj5*r00);
IkReal x12773=((1.0)*r02);
IkReal x12774=(cj2*sj1);
IkReal x12775=((1.0)*r01*sj5);
IkReal x12776=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12776;
j4eval[1]=((IKabs((((x12772*x12774))+(((-1.0)*x12771*x12775))+(((-1.0)*x12774*x12775))+((x12771*x12772)))))+(IKabs(((((-1.0)*x12771*x12773))+(((-1.0)*x12773*x12774))))));
j4eval[2]=IKsign(x12776);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12777=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12777);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12777);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12778=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12778);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12778);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12779=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x12779))+((cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x12779)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12780=((1.0)*sj5);
CheckValue<IkReal> x12781=IKPowWithIntegerCheck(((((-1.0)*r01*x12780))+((cj5*r00))),-1);
if(!x12781.valid){
continue;
}
CheckValue<IkReal> x12782=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x12780))),-1);
if(!x12782.valid){
continue;
}
if( IKabs(((-1.0)*(x12781.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12782.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12781.value)))+IKsqr(((x12782.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12781.value)), ((x12782.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12783=IKsin(j4);
IkReal x12784=IKcos(j4);
IkReal x12785=(cj5*r00);
IkReal x12786=(cj5*r10);
IkReal x12787=((1.0)*sj5*x12783);
IkReal x12788=((1.0)*sj5*x12784);
evalcond[0]=((-1.0)*r22*x12784);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12783)));
evalcond[2]=(((x12783*x12786))+(((-1.0)*r11*x12787)));
evalcond[3]=(((x12784*x12785))+(((-1.0)*r01*x12788)));
evalcond[4]=((1.0)+((x12783*x12785))+(((-1.0)*r01*x12787)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((x12784*x12786))+(((-1.0)*r11*x12788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12789=((1.0)*sj1);
CheckValue<IkReal> x12790=IKPowWithIntegerCheck(r22,-1);
if(!x12790.valid){
continue;
}
CheckValue<IkReal> x12791=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12791.valid){
continue;
}
if( IKabs(((x12790.value)*((((cj1*cj2))+(((-1.0)*sj2*x12789)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12791.value)*(((((-1.0)*cj2*x12789))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12790.value)*((((cj1*cj2))+(((-1.0)*sj2*x12789))))))+IKsqr(((x12791.value)*(((((-1.0)*cj2*x12789))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12790.value)*((((cj1*cj2))+(((-1.0)*sj2*x12789))))), ((x12791.value)*(((((-1.0)*cj2*x12789))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12792=IKsin(j4);
IkReal x12793=IKcos(j4);
IkReal x12794=(cj5*r00);
IkReal x12795=(cj5*r10);
IkReal x12796=((1.0)*sj5*x12792);
IkReal x12797=((1.0)*sj5*x12793);
evalcond[0]=((-1.0)*r22*x12793);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12792)));
evalcond[2]=(((x12792*x12795))+(((-1.0)*r11*x12796)));
evalcond[3]=(((x12793*x12794))+(((-1.0)*r01*x12797)));
evalcond[4]=((1.0)+((x12792*x12794))+(((-1.0)*r01*x12796)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((x12793*x12795))+(((-1.0)*r11*x12797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12798=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12798;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x12798);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12799=((1.0)*sj5);
IkReal x12800=((((-1.0)*r00*x12799))+(((-1.0)*cj5*r01)));
j4eval[0]=x12800;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x12799))))));
j4eval[2]=IKsign(x12800);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12801=cj5*cj5;
IkReal x12802=r01*r01;
IkReal x12803=(r01*sj5);
IkReal x12804=(cj5*r00);
IkReal x12805=(((x12801*x12802))+(((-1.0)*(r02*r02)))+(((2.0)*x12803*x12804))+(((-1.0)*x12802))+(((-1.0)*x12801*(r00*r00))));
j4eval[0]=x12805;
j4eval[1]=IKsign(x12805);
j4eval[2]=((IKabs(r02))+(IKabs((x12804+(((-1.0)*x12803))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12806=cj5*cj5;
IkReal x12807=r01*r01;
IkReal x12808=(r01*sj5);
IkReal x12809=(cj5*r00);
CheckValue<IkReal> x12810 = IKatan2WithCheck(IkReal((x12809+(((-1.0)*x12808)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12810.valid){
continue;
}
CheckValue<IkReal> x12811=IKPowWithIntegerCheck(IKsign((((x12806*x12807))+(((-1.0)*(r02*r02)))+(((2.0)*x12808*x12809))+(((-1.0)*x12807))+(((-1.0)*x12806*(r00*r00))))),-1);
if(!x12811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12810.value)+(((1.5707963267949)*(x12811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12812=IKcos(j4);
IkReal x12813=IKsin(j4);
IkReal x12814=(r11*sj5);
IkReal x12815=(cj5*r20);
IkReal x12816=(r21*sj5);
IkReal x12817=(r01*sj5);
IkReal x12818=((1.0)*x12812);
IkReal x12819=((1.0)*x12813);
IkReal x12820=(cj5*x12813);
IkReal x12821=(cj5*x12812);
evalcond[0]=(((r00*x12821))+((r02*x12813))+(((-1.0)*x12817*x12818)));
evalcond[1]=((((-1.0)*x12814*x12818))+((r10*x12821))+((r12*x12813)));
evalcond[2]=(((x12813*x12815))+(((-1.0)*x12816*x12819))+(((-1.0)*r22*x12818)));
evalcond[3]=((((-1.0)*x12814*x12819))+((r10*x12820))+(((-1.0)*r12*x12818)));
evalcond[4]=((-1.0)+((x12812*x12815))+(((-1.0)*x12816*x12818))+((r22*x12813)));
evalcond[5]=((1.0)+((r00*x12820))+(((-1.0)*r02*x12818))+(((-1.0)*x12817*x12819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12822=((1.0)*sj5);
CheckValue<IkReal> x12823=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12822))+(((-1.0)*cj5*r01)))),-1);
if(!x12823.valid){
continue;
}
CheckValue<IkReal> x12824 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x12822)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12823.value)))+(x12824.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12825=IKcos(j4);
IkReal x12826=IKsin(j4);
IkReal x12827=(r11*sj5);
IkReal x12828=(cj5*r20);
IkReal x12829=(r21*sj5);
IkReal x12830=(r01*sj5);
IkReal x12831=((1.0)*x12825);
IkReal x12832=((1.0)*x12826);
IkReal x12833=(cj5*x12826);
IkReal x12834=(cj5*x12825);
evalcond[0]=(((r00*x12834))+((r02*x12826))+(((-1.0)*x12830*x12831)));
evalcond[1]=(((r10*x12834))+((r12*x12826))+(((-1.0)*x12827*x12831)));
evalcond[2]=((((-1.0)*x12829*x12832))+(((-1.0)*r22*x12831))+((x12826*x12828)));
evalcond[3]=(((r10*x12833))+(((-1.0)*r12*x12831))+(((-1.0)*x12827*x12832)));
evalcond[4]=((-1.0)+(((-1.0)*x12829*x12831))+((r22*x12826))+((x12825*x12828)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12831))+((r00*x12833))+(((-1.0)*x12830*x12832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12835 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12835.valid){
continue;
}
CheckValue<IkReal> x12836=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12835.value)+(((1.5707963267949)*(x12836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12837=IKcos(j4);
IkReal x12838=IKsin(j4);
IkReal x12839=(r11*sj5);
IkReal x12840=(cj5*r20);
IkReal x12841=(r21*sj5);
IkReal x12842=(r01*sj5);
IkReal x12843=((1.0)*x12837);
IkReal x12844=((1.0)*x12838);
IkReal x12845=(cj5*x12838);
IkReal x12846=(cj5*x12837);
evalcond[0]=(((r00*x12846))+((r02*x12838))+(((-1.0)*x12842*x12843)));
evalcond[1]=(((r12*x12838))+((r10*x12846))+(((-1.0)*x12839*x12843)));
evalcond[2]=((((-1.0)*r22*x12843))+(((-1.0)*x12841*x12844))+((x12838*x12840)));
evalcond[3]=((((-1.0)*r12*x12843))+((r10*x12845))+(((-1.0)*x12839*x12844)));
evalcond[4]=((-1.0)+((x12837*x12840))+((r22*x12838))+(((-1.0)*x12841*x12843)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12843))+((r00*x12845))+(((-1.0)*x12842*x12844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12847=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12847;
j4eval[1]=IKsign(x12847);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12848=((1.0)*sj5);
IkReal x12849=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12848)));
j4eval[0]=x12849;
j4eval[1]=((IKabs(((((-1.0)*r01*x12848))+((cj5*r00)))))+(IKabs(r02)));
j4eval[2]=IKsign(x12849);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12850=cj5*cj5;
IkReal x12851=r01*r01;
IkReal x12852=(r01*sj5);
IkReal x12853=(cj5*r00);
IkReal x12854=((((-1.0)*(r02*r02)))+(((-1.0)*x12850*(r00*r00)))+(((-1.0)*x12851))+(((2.0)*x12852*x12853))+((x12850*x12851)));
j4eval[0]=x12854;
j4eval[1]=IKsign(x12854);
j4eval[2]=((IKabs(r02))+(IKabs((x12853+(((-1.0)*x12852))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12855=cj5*cj5;
IkReal x12856=r01*r01;
IkReal x12857=(r01*sj5);
IkReal x12858=(cj5*r00);
CheckValue<IkReal> x12859 = IKatan2WithCheck(IkReal((x12858+(((-1.0)*x12857)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12859.valid){
continue;
}
CheckValue<IkReal> x12860=IKPowWithIntegerCheck(IKsign((((x12855*x12856))+(((2.0)*x12857*x12858))+(((-1.0)*(r02*r02)))+(((-1.0)*x12855*(r00*r00)))+(((-1.0)*x12856)))),-1);
if(!x12860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12859.value)+(((1.5707963267949)*(x12860.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12861=IKcos(j4);
IkReal x12862=IKsin(j4);
IkReal x12863=(r11*sj5);
IkReal x12864=(cj5*r20);
IkReal x12865=(r21*sj5);
IkReal x12866=(r01*sj5);
IkReal x12867=((1.0)*x12861);
IkReal x12868=((1.0)*x12862);
IkReal x12869=(cj5*x12862);
IkReal x12870=(cj5*x12861);
evalcond[0]=(((r00*x12870))+(((-1.0)*x12866*x12867))+((r02*x12862)));
evalcond[1]=(((r12*x12862))+((r10*x12870))+(((-1.0)*x12863*x12867)));
evalcond[2]=((((-1.0)*x12865*x12868))+(((-1.0)*r22*x12867))+((x12862*x12864)));
evalcond[3]=((((-1.0)*x12863*x12868))+(((-1.0)*r12*x12867))+((r10*x12869)));
evalcond[4]=((1.0)+(((-1.0)*x12865*x12867))+((r22*x12862))+((x12861*x12864)));
evalcond[5]=((1.0)+(((-1.0)*x12866*x12868))+(((-1.0)*r02*x12867))+((r00*x12869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12871=((1.0)*sj5);
CheckValue<IkReal> x12872 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12871))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12872.valid){
continue;
}
CheckValue<IkReal> x12873=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12871)))),-1);
if(!x12873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12872.value)+(((1.5707963267949)*(x12873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12874=IKcos(j4);
IkReal x12875=IKsin(j4);
IkReal x12876=(r11*sj5);
IkReal x12877=(cj5*r20);
IkReal x12878=(r21*sj5);
IkReal x12879=(r01*sj5);
IkReal x12880=((1.0)*x12874);
IkReal x12881=((1.0)*x12875);
IkReal x12882=(cj5*x12875);
IkReal x12883=(cj5*x12874);
evalcond[0]=((((-1.0)*x12879*x12880))+((r00*x12883))+((r02*x12875)));
evalcond[1]=((((-1.0)*x12876*x12880))+((r12*x12875))+((r10*x12883)));
evalcond[2]=((((-1.0)*r22*x12880))+(((-1.0)*x12878*x12881))+((x12875*x12877)));
evalcond[3]=((((-1.0)*r12*x12880))+(((-1.0)*x12876*x12881))+((r10*x12882)));
evalcond[4]=((1.0)+((r22*x12875))+(((-1.0)*x12878*x12880))+((x12874*x12877)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12880))+(((-1.0)*x12879*x12881))+((r00*x12882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12884 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12884.valid){
continue;
}
CheckValue<IkReal> x12885=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12884.value)+(((1.5707963267949)*(x12885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12886=IKcos(j4);
IkReal x12887=IKsin(j4);
IkReal x12888=(r11*sj5);
IkReal x12889=(cj5*r20);
IkReal x12890=(r21*sj5);
IkReal x12891=(r01*sj5);
IkReal x12892=((1.0)*x12886);
IkReal x12893=((1.0)*x12887);
IkReal x12894=(cj5*x12887);
IkReal x12895=(cj5*x12886);
evalcond[0]=((((-1.0)*x12891*x12892))+((r00*x12895))+((r02*x12887)));
evalcond[1]=((((-1.0)*x12888*x12892))+((r10*x12895))+((r12*x12887)));
evalcond[2]=(((x12887*x12889))+(((-1.0)*r22*x12892))+(((-1.0)*x12890*x12893)));
evalcond[3]=((((-1.0)*x12888*x12893))+((r10*x12894))+(((-1.0)*r12*x12892)));
evalcond[4]=((1.0)+(((-1.0)*x12890*x12892))+((r22*x12887))+((x12886*x12889)));
evalcond[5]=((1.0)+(((-1.0)*x12891*x12893))+((r00*x12894))+(((-1.0)*r02*x12892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12896=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12896;
j4eval[1]=IKsign(x12896);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12897=((1.0)*sj5);
IkReal x12898=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12897)));
j4eval[0]=x12898;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x12897))+((cj5*r00))))));
j4eval[2]=IKsign(x12898);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12899=cj5*cj5;
IkReal x12900=r01*r01;
IkReal x12901=(r01*sj5);
IkReal x12902=(cj5*r00);
IkReal x12903=((((-1.0)*x12900))+(((-1.0)*(r02*r02)))+((x12899*x12900))+(((2.0)*x12901*x12902))+(((-1.0)*x12899*(r00*r00))));
j4eval[0]=x12903;
j4eval[1]=IKsign(x12903);
j4eval[2]=((IKabs(r02))+(IKabs((x12902+(((-1.0)*x12901))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12904=cj5*cj5;
IkReal x12905=r01*r01;
IkReal x12906=(r01*sj5);
IkReal x12907=(cj5*r00);
CheckValue<IkReal> x12908=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12904*(r00*r00)))+(((-1.0)*x12905))+(((-1.0)*(r02*r02)))+(((2.0)*x12906*x12907))+((x12904*x12905)))),-1);
if(!x12908.valid){
continue;
}
CheckValue<IkReal> x12909 = IKatan2WithCheck(IkReal((x12907+(((-1.0)*x12906)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12908.value)))+(x12909.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12910=IKcos(j4);
IkReal x12911=IKsin(j4);
IkReal x12912=(r11*sj5);
IkReal x12913=(cj5*r20);
IkReal x12914=(r21*sj5);
IkReal x12915=(r01*sj5);
IkReal x12916=((1.0)*x12910);
IkReal x12917=((1.0)*x12911);
IkReal x12918=(cj5*x12911);
IkReal x12919=(cj5*x12910);
evalcond[0]=(((r00*x12919))+(((-1.0)*x12915*x12916))+((r02*x12911)));
evalcond[1]=((((-1.0)*x12912*x12916))+((r12*x12911))+((r10*x12919)));
evalcond[2]=(((x12911*x12913))+(((-1.0)*x12914*x12917))+(((-1.0)*r22*x12916)));
evalcond[3]=((((-1.0)*x12912*x12917))+(((-1.0)*r12*x12916))+((r10*x12918)));
evalcond[4]=((1.0)+((x12910*x12913))+(((-1.0)*x12914*x12916))+((r22*x12911)));
evalcond[5]=((1.0)+((r00*x12918))+(((-1.0)*r02*x12916))+(((-1.0)*x12915*x12917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12920=((1.0)*sj5);
CheckValue<IkReal> x12921 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12920))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12921.valid){
continue;
}
CheckValue<IkReal> x12922=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12920)))),-1);
if(!x12922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12921.value)+(((1.5707963267949)*(x12922.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12923=IKcos(j4);
IkReal x12924=IKsin(j4);
IkReal x12925=(r11*sj5);
IkReal x12926=(cj5*r20);
IkReal x12927=(r21*sj5);
IkReal x12928=(r01*sj5);
IkReal x12929=((1.0)*x12923);
IkReal x12930=((1.0)*x12924);
IkReal x12931=(cj5*x12924);
IkReal x12932=(cj5*x12923);
evalcond[0]=(((r02*x12924))+((r00*x12932))+(((-1.0)*x12928*x12929)));
evalcond[1]=((((-1.0)*x12925*x12929))+((r10*x12932))+((r12*x12924)));
evalcond[2]=((((-1.0)*x12927*x12930))+((x12924*x12926))+(((-1.0)*r22*x12929)));
evalcond[3]=((((-1.0)*x12925*x12930))+(((-1.0)*r12*x12929))+((r10*x12931)));
evalcond[4]=((1.0)+((x12923*x12926))+(((-1.0)*x12927*x12929))+((r22*x12924)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12929))+(((-1.0)*x12928*x12930))+((r00*x12931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12933 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12933.valid){
continue;
}
CheckValue<IkReal> x12934=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12933.value)+(((1.5707963267949)*(x12934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12935=IKcos(j4);
IkReal x12936=IKsin(j4);
IkReal x12937=(r11*sj5);
IkReal x12938=(cj5*r20);
IkReal x12939=(r21*sj5);
IkReal x12940=(r01*sj5);
IkReal x12941=((1.0)*x12935);
IkReal x12942=((1.0)*x12936);
IkReal x12943=(cj5*x12936);
IkReal x12944=(cj5*x12935);
evalcond[0]=(((r02*x12936))+((r00*x12944))+(((-1.0)*x12940*x12941)));
evalcond[1]=(((r10*x12944))+(((-1.0)*x12937*x12941))+((r12*x12936)));
evalcond[2]=((((-1.0)*x12939*x12942))+(((-1.0)*r22*x12941))+((x12936*x12938)));
evalcond[3]=(((r10*x12943))+(((-1.0)*x12937*x12942))+(((-1.0)*r12*x12941)));
evalcond[4]=((1.0)+(((-1.0)*x12939*x12941))+((x12935*x12938))+((r22*x12936)));
evalcond[5]=((1.0)+((r00*x12943))+(((-1.0)*r02*x12941))+(((-1.0)*x12940*x12942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12945=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12945;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x12945);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12946=((1.0)*sj5);
IkReal x12947=((((-1.0)*r00*x12946))+(((-1.0)*cj5*r01)));
j4eval[0]=x12947;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r11*x12946))+((cj5*r10))))));
j4eval[2]=IKsign(x12947);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12948=cj5*cj5;
IkReal x12949=r01*r01;
IkReal x12950=(r01*sj5);
IkReal x12951=(cj5*r00);
IkReal x12952=((((2.0)*x12950*x12951))+(((-1.0)*x12948*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x12949))+((x12948*x12949)));
j4eval[0]=x12952;
j4eval[1]=IKsign(x12952);
j4eval[2]=((IKabs((x12951+(((-1.0)*x12950)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12953=cj5*cj5;
IkReal x12954=r01*r01;
IkReal x12955=(r01*sj5);
IkReal x12956=(cj5*r00);
CheckValue<IkReal> x12957 = IKatan2WithCheck(IkReal((x12956+(((-1.0)*x12955)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12957.valid){
continue;
}
CheckValue<IkReal> x12958=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12953*(r00*r00)))+(((-1.0)*(r02*r02)))+((x12953*x12954))+(((2.0)*x12955*x12956))+(((-1.0)*x12954)))),-1);
if(!x12958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12957.value)+(((1.5707963267949)*(x12958.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12959=IKcos(j4);
IkReal x12960=IKsin(j4);
IkReal x12961=(r11*sj5);
IkReal x12962=(cj5*r20);
IkReal x12963=(r21*sj5);
IkReal x12964=(r01*sj5);
IkReal x12965=((1.0)*x12959);
IkReal x12966=((1.0)*x12960);
IkReal x12967=(cj5*x12960);
IkReal x12968=(cj5*x12959);
evalcond[0]=(((r00*x12968))+((r02*x12960))+(((-1.0)*x12964*x12965)));
evalcond[1]=((((-1.0)*x12961*x12965))+((r12*x12960))+((r10*x12968)));
evalcond[2]=(((x12960*x12962))+(((-1.0)*r22*x12965))+(((-1.0)*x12963*x12966)));
evalcond[3]=((((-1.0)*x12961*x12966))+(((-1.0)*r12*x12965))+((r10*x12967)));
evalcond[4]=((-1.0)+((x12959*x12962))+((r22*x12960))+(((-1.0)*x12963*x12965)));
evalcond[5]=((1.0)+((r00*x12967))+(((-1.0)*r02*x12965))+(((-1.0)*x12964*x12966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12969=((1.0)*sj5);
CheckValue<IkReal> x12970=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12969))+(((-1.0)*cj5*r01)))),-1);
if(!x12970.valid){
continue;
}
CheckValue<IkReal> x12971 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x12969)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12970.value)))+(x12971.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12972=IKcos(j4);
IkReal x12973=IKsin(j4);
IkReal x12974=(r11*sj5);
IkReal x12975=(cj5*r20);
IkReal x12976=(r21*sj5);
IkReal x12977=(r01*sj5);
IkReal x12978=((1.0)*x12972);
IkReal x12979=((1.0)*x12973);
IkReal x12980=(cj5*x12973);
IkReal x12981=(cj5*x12972);
evalcond[0]=(((r02*x12973))+((r00*x12981))+(((-1.0)*x12977*x12978)));
evalcond[1]=(((r10*x12981))+(((-1.0)*x12974*x12978))+((r12*x12973)));
evalcond[2]=((((-1.0)*x12976*x12979))+((x12973*x12975))+(((-1.0)*r22*x12978)));
evalcond[3]=(((r10*x12980))+(((-1.0)*x12974*x12979))+(((-1.0)*r12*x12978)));
evalcond[4]=((-1.0)+(((-1.0)*x12976*x12978))+((x12972*x12975))+((r22*x12973)));
evalcond[5]=((1.0)+((r00*x12980))+(((-1.0)*r02*x12978))+(((-1.0)*x12977*x12979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12982 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12982.valid){
continue;
}
CheckValue<IkReal> x12983=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12982.value)+(((1.5707963267949)*(x12983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12984=IKcos(j4);
IkReal x12985=IKsin(j4);
IkReal x12986=(r11*sj5);
IkReal x12987=(cj5*r20);
IkReal x12988=(r21*sj5);
IkReal x12989=(r01*sj5);
IkReal x12990=((1.0)*x12984);
IkReal x12991=((1.0)*x12985);
IkReal x12992=(cj5*x12985);
IkReal x12993=(cj5*x12984);
evalcond[0]=(((r00*x12993))+(((-1.0)*x12989*x12990))+((r02*x12985)));
evalcond[1]=(((r10*x12993))+((r12*x12985))+(((-1.0)*x12986*x12990)));
evalcond[2]=((((-1.0)*r22*x12990))+(((-1.0)*x12988*x12991))+((x12985*x12987)));
evalcond[3]=(((r10*x12992))+(((-1.0)*r12*x12990))+(((-1.0)*x12986*x12991)));
evalcond[4]=((-1.0)+((r22*x12985))+((x12984*x12987))+(((-1.0)*x12988*x12990)));
evalcond[5]=((1.0)+((r00*x12992))+(((-1.0)*x12989*x12991))+(((-1.0)*r02*x12990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12994=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12994;
j4eval[1]=IKsign(x12994);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12995=((1.0)*sj5);
IkReal x12996=((((-1.0)*r10*x12995))+(((-1.0)*cj5*r11)));
j4eval[0]=x12996;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x12995))+((cj5*r00))))));
j4eval[2]=IKsign(x12996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12997=cj5*cj5;
IkReal x12998=r01*r01;
IkReal x12999=(r01*sj5);
IkReal x13000=(cj5*r00);
IkReal x13001=((((-1.0)*(r02*r02)))+(((2.0)*x12999*x13000))+((x12997*x12998))+(((-1.0)*x12997*(r00*r00)))+(((-1.0)*x12998)));
j4eval[0]=x13001;
j4eval[1]=IKsign(x13001);
j4eval[2]=((IKabs((x13000+(((-1.0)*x12999)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13002=cj5*cj5;
IkReal x13003=r01*r01;
IkReal x13004=(r01*sj5);
IkReal x13005=(cj5*r00);
CheckValue<IkReal> x13006 = IKatan2WithCheck(IkReal(((((-1.0)*x13004))+x13005)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13006.valid){
continue;
}
CheckValue<IkReal> x13007=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x13002*(r00*r00)))+(((-1.0)*x13003))+(((2.0)*x13004*x13005))+((x13002*x13003)))),-1);
if(!x13007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13006.value)+(((1.5707963267949)*(x13007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13008=IKcos(j4);
IkReal x13009=IKsin(j4);
IkReal x13010=(r11*sj5);
IkReal x13011=(cj5*r20);
IkReal x13012=(r21*sj5);
IkReal x13013=(r01*sj5);
IkReal x13014=((1.0)*x13008);
IkReal x13015=((1.0)*x13009);
IkReal x13016=(cj5*x13009);
IkReal x13017=(cj5*x13008);
evalcond[0]=((((-1.0)*x13013*x13014))+((r00*x13017))+((r02*x13009)));
evalcond[1]=(((r12*x13009))+(((-1.0)*x13010*x13014))+((r10*x13017)));
evalcond[2]=((((-1.0)*x13012*x13015))+(((-1.0)*r22*x13014))+((x13009*x13011)));
evalcond[3]=((((-1.0)*x13010*x13015))+((r10*x13016))+(((-1.0)*r12*x13014)));
evalcond[4]=((1.0)+(((-1.0)*x13012*x13014))+((x13008*x13011))+((r22*x13009)));
evalcond[5]=((1.0)+(((-1.0)*x13013*x13015))+((r00*x13016))+(((-1.0)*r02*x13014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13018=((1.0)*sj5);
CheckValue<IkReal> x13019=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13018)))),-1);
if(!x13019.valid){
continue;
}
CheckValue<IkReal> x13020 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x13018))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13019.value)))+(x13020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13021=IKcos(j4);
IkReal x13022=IKsin(j4);
IkReal x13023=(r11*sj5);
IkReal x13024=(cj5*r20);
IkReal x13025=(r21*sj5);
IkReal x13026=(r01*sj5);
IkReal x13027=((1.0)*x13021);
IkReal x13028=((1.0)*x13022);
IkReal x13029=(cj5*x13022);
IkReal x13030=(cj5*x13021);
evalcond[0]=(((r02*x13022))+((r00*x13030))+(((-1.0)*x13026*x13027)));
evalcond[1]=(((r10*x13030))+((r12*x13022))+(((-1.0)*x13023*x13027)));
evalcond[2]=((((-1.0)*r22*x13027))+((x13022*x13024))+(((-1.0)*x13025*x13028)));
evalcond[3]=((((-1.0)*x13023*x13028))+(((-1.0)*r12*x13027))+((r10*x13029)));
evalcond[4]=((1.0)+(((-1.0)*x13025*x13027))+((x13021*x13024))+((r22*x13022)));
evalcond[5]=((1.0)+((r00*x13029))+(((-1.0)*x13026*x13028))+(((-1.0)*r02*x13027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13031 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13031.valid){
continue;
}
CheckValue<IkReal> x13032=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13031.value)+(((1.5707963267949)*(x13032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13033=IKcos(j4);
IkReal x13034=IKsin(j4);
IkReal x13035=(r11*sj5);
IkReal x13036=(cj5*r20);
IkReal x13037=(r21*sj5);
IkReal x13038=(r01*sj5);
IkReal x13039=((1.0)*x13033);
IkReal x13040=((1.0)*x13034);
IkReal x13041=(cj5*x13034);
IkReal x13042=(cj5*x13033);
evalcond[0]=((((-1.0)*x13038*x13039))+((r00*x13042))+((r02*x13034)));
evalcond[1]=((((-1.0)*x13035*x13039))+((r12*x13034))+((r10*x13042)));
evalcond[2]=(((x13034*x13036))+(((-1.0)*r22*x13039))+(((-1.0)*x13037*x13040)));
evalcond[3]=((((-1.0)*r12*x13039))+((r10*x13041))+(((-1.0)*x13035*x13040)));
evalcond[4]=((1.0)+((r22*x13034))+(((-1.0)*x13037*x13039))+((x13033*x13036)));
evalcond[5]=((1.0)+(((-1.0)*x13038*x13040))+(((-1.0)*r02*x13039))+((r00*x13041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13043=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13043;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x13043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13044=((1.0)*sj5);
IkReal x13045=((((-1.0)*cj5*r01))+(((-1.0)*r00*x13044)));
j4eval[0]=x13045;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x13044))))));
j4eval[2]=IKsign(x13045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13046=cj5*cj5;
IkReal x13047=r01*r01;
IkReal x13048=(r01*sj5);
IkReal x13049=(cj5*r00);
IkReal x13050=((((2.0)*x13048*x13049))+(((-1.0)*x13047))+(((-1.0)*(r02*r02)))+((x13046*x13047))+(((-1.0)*x13046*(r00*r00))));
j4eval[0]=x13050;
j4eval[1]=IKsign(x13050);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x13048))+x13049))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13051=cj5*cj5;
IkReal x13052=r01*r01;
IkReal x13053=(r01*sj5);
IkReal x13054=(cj5*r00);
CheckValue<IkReal> x13055=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13052))+(((-1.0)*(r02*r02)))+(((2.0)*x13053*x13054))+((x13051*x13052))+(((-1.0)*x13051*(r00*r00))))),-1);
if(!x13055.valid){
continue;
}
CheckValue<IkReal> x13056 = IKatan2WithCheck(IkReal(((((-1.0)*x13053))+x13054)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13055.value)))+(x13056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13057=IKcos(j4);
IkReal x13058=IKsin(j4);
IkReal x13059=(r11*sj5);
IkReal x13060=(cj5*r20);
IkReal x13061=(r21*sj5);
IkReal x13062=(r01*sj5);
IkReal x13063=((1.0)*x13057);
IkReal x13064=((1.0)*x13058);
IkReal x13065=(cj5*x13058);
IkReal x13066=(cj5*x13057);
evalcond[0]=((((-1.0)*x13062*x13063))+((r02*x13058))+((r00*x13066)));
evalcond[1]=(((r12*x13058))+(((-1.0)*x13059*x13063))+((r10*x13066)));
evalcond[2]=((((-1.0)*x13061*x13064))+(((-1.0)*r22*x13063))+((x13058*x13060)));
evalcond[3]=((((-1.0)*x13059*x13064))+(((-1.0)*r12*x13063))+((r10*x13065)));
evalcond[4]=((-1.0)+(((-1.0)*x13061*x13063))+((r22*x13058))+((x13057*x13060)));
evalcond[5]=((1.0)+(((-1.0)*x13062*x13064))+(((-1.0)*r02*x13063))+((r00*x13065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13067=((1.0)*sj5);
CheckValue<IkReal> x13068 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x13067)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13068.valid){
continue;
}
CheckValue<IkReal> x13069=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x13067))+(((-1.0)*cj5*r01)))),-1);
if(!x13069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13068.value)+(((1.5707963267949)*(x13069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13070=IKcos(j4);
IkReal x13071=IKsin(j4);
IkReal x13072=(r11*sj5);
IkReal x13073=(cj5*r20);
IkReal x13074=(r21*sj5);
IkReal x13075=(r01*sj5);
IkReal x13076=((1.0)*x13070);
IkReal x13077=((1.0)*x13071);
IkReal x13078=(cj5*x13071);
IkReal x13079=(cj5*x13070);
evalcond[0]=(((r00*x13079))+((r02*x13071))+(((-1.0)*x13075*x13076)));
evalcond[1]=((((-1.0)*x13072*x13076))+((r10*x13079))+((r12*x13071)));
evalcond[2]=((((-1.0)*x13074*x13077))+((x13071*x13073))+(((-1.0)*r22*x13076)));
evalcond[3]=((((-1.0)*r12*x13076))+(((-1.0)*x13072*x13077))+((r10*x13078)));
evalcond[4]=((-1.0)+(((-1.0)*x13074*x13076))+((x13070*x13073))+((r22*x13071)));
evalcond[5]=((1.0)+(((-1.0)*r02*x13076))+((r00*x13078))+(((-1.0)*x13075*x13077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13080 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13080.valid){
continue;
}
CheckValue<IkReal> x13081=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13080.value)+(((1.5707963267949)*(x13081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13082=IKcos(j4);
IkReal x13083=IKsin(j4);
IkReal x13084=(r11*sj5);
IkReal x13085=(cj5*r20);
IkReal x13086=(r21*sj5);
IkReal x13087=(r01*sj5);
IkReal x13088=((1.0)*x13082);
IkReal x13089=((1.0)*x13083);
IkReal x13090=(cj5*x13083);
IkReal x13091=(cj5*x13082);
evalcond[0]=(((r02*x13083))+(((-1.0)*x13087*x13088))+((r00*x13091)));
evalcond[1]=((((-1.0)*x13084*x13088))+((r12*x13083))+((r10*x13091)));
evalcond[2]=(((x13083*x13085))+(((-1.0)*x13086*x13089))+(((-1.0)*r22*x13088)));
evalcond[3]=((((-1.0)*x13084*x13089))+((r10*x13090))+(((-1.0)*r12*x13088)));
evalcond[4]=((-1.0)+(((-1.0)*x13086*x13088))+((r22*x13083))+((x13082*x13085)));
evalcond[5]=((1.0)+(((-1.0)*r02*x13088))+(((-1.0)*x13087*x13089))+((r00*x13090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x13092=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13092;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x13092);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x13093=((1.0)*sj5);
IkReal x13094=((((-1.0)*r00*x13093))+(((-1.0)*cj5*r01)));
j4eval[0]=x13094;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x13093))))));
j4eval[2]=IKsign(x13094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x13095=cj5*cj5;
IkReal x13096=r01*r01;
IkReal x13097=(r01*sj5);
IkReal x13098=(cj5*r00);
IkReal x13099=((((2.0)*x13097*x13098))+(((-1.0)*(r02*r02)))+((x13095*x13096))+(((-1.0)*x13095*(r00*r00)))+(((-1.0)*x13096)));
j4eval[0]=x13099;
j4eval[1]=IKsign(x13099);
j4eval[2]=((IKabs((x13098+(((-1.0)*x13097)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13100=cj5*cj5;
IkReal x13101=r01*r01;
IkReal x13102=(r01*sj5);
IkReal x13103=(cj5*r00);
CheckValue<IkReal> x13104 = IKatan2WithCheck(IkReal(((((-1.0)*x13102))+x13103)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13104.valid){
continue;
}
CheckValue<IkReal> x13105=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13100*(r00*r00)))+((x13100*x13101))+(((-1.0)*(r02*r02)))+(((2.0)*x13102*x13103))+(((-1.0)*x13101)))),-1);
if(!x13105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13104.value)+(((1.5707963267949)*(x13105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13106=IKcos(j4);
IkReal x13107=IKsin(j4);
IkReal x13108=(r11*sj5);
IkReal x13109=(cj5*r20);
IkReal x13110=(r21*sj5);
IkReal x13111=(r01*sj5);
IkReal x13112=((1.0)*x13106);
IkReal x13113=((1.0)*x13107);
IkReal x13114=(cj5*x13107);
IkReal x13115=(cj5*x13106);
evalcond[0]=(((r02*x13107))+(((-1.0)*x13111*x13112))+((r00*x13115)));
evalcond[1]=((((-1.0)*x13108*x13112))+((r10*x13115))+((r12*x13107)));
evalcond[2]=(((x13107*x13109))+(((-1.0)*x13110*x13113))+(((-1.0)*r22*x13112)));
evalcond[3]=((((-1.0)*x13108*x13113))+(((-1.0)*r12*x13112))+((r10*x13114)));
evalcond[4]=((-1.0)+((r22*x13107))+((x13106*x13109))+(((-1.0)*x13110*x13112)));
evalcond[5]=((1.0)+(((-1.0)*r02*x13112))+(((-1.0)*x13111*x13113))+((r00*x13114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13116=((1.0)*sj5);
CheckValue<IkReal> x13117 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x13116)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13117.valid){
continue;
}
CheckValue<IkReal> x13118=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x13116))+(((-1.0)*cj5*r01)))),-1);
if(!x13118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13117.value)+(((1.5707963267949)*(x13118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13119=IKcos(j4);
IkReal x13120=IKsin(j4);
IkReal x13121=(r11*sj5);
IkReal x13122=(cj5*r20);
IkReal x13123=(r21*sj5);
IkReal x13124=(r01*sj5);
IkReal x13125=((1.0)*x13119);
IkReal x13126=((1.0)*x13120);
IkReal x13127=(cj5*x13120);
IkReal x13128=(cj5*x13119);
evalcond[0]=((((-1.0)*x13124*x13125))+((r00*x13128))+((r02*x13120)));
evalcond[1]=(((r10*x13128))+(((-1.0)*x13121*x13125))+((r12*x13120)));
evalcond[2]=((((-1.0)*x13123*x13126))+(((-1.0)*r22*x13125))+((x13120*x13122)));
evalcond[3]=(((r10*x13127))+(((-1.0)*x13121*x13126))+(((-1.0)*r12*x13125)));
evalcond[4]=((-1.0)+(((-1.0)*x13123*x13125))+((x13119*x13122))+((r22*x13120)));
evalcond[5]=((1.0)+(((-1.0)*r02*x13125))+(((-1.0)*x13124*x13126))+((r00*x13127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13129 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13129.valid){
continue;
}
CheckValue<IkReal> x13130=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13129.value)+(((1.5707963267949)*(x13130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13131=IKcos(j4);
IkReal x13132=IKsin(j4);
IkReal x13133=(r11*sj5);
IkReal x13134=(cj5*r20);
IkReal x13135=(r21*sj5);
IkReal x13136=(r01*sj5);
IkReal x13137=((1.0)*x13131);
IkReal x13138=((1.0)*x13132);
IkReal x13139=(cj5*x13132);
IkReal x13140=(cj5*x13131);
evalcond[0]=((((-1.0)*x13136*x13137))+((r00*x13140))+((r02*x13132)));
evalcond[1]=((((-1.0)*x13133*x13137))+((r12*x13132))+((r10*x13140)));
evalcond[2]=((((-1.0)*x13135*x13138))+((x13132*x13134))+(((-1.0)*r22*x13137)));
evalcond[3]=(((r10*x13139))+(((-1.0)*x13133*x13138))+(((-1.0)*r12*x13137)));
evalcond[4]=((-1.0)+((x13131*x13134))+(((-1.0)*x13135*x13137))+((r22*x13132)));
evalcond[5]=((1.0)+((r00*x13139))+(((-1.0)*x13136*x13138))+(((-1.0)*r02*x13137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13141=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13141;
j4eval[1]=IKsign(x13141);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13142=((1.0)*sj5);
IkReal x13143=((((-1.0)*cj5*r11))+(((-1.0)*r10*x13142)));
j4eval[0]=x13143;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x13142))+((cj5*r00))))));
j4eval[2]=IKsign(x13143);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13144=cj5*cj5;
IkReal x13145=r01*r01;
IkReal x13146=(r01*sj5);
IkReal x13147=(cj5*r00);
IkReal x13148=(((x13144*x13145))+(((-1.0)*(r02*r02)))+(((2.0)*x13146*x13147))+(((-1.0)*x13145))+(((-1.0)*x13144*(r00*r00))));
j4eval[0]=x13148;
j4eval[1]=IKsign(x13148);
j4eval[2]=((IKabs(r02))+(IKabs((x13147+(((-1.0)*x13146))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13149=cj5*cj5;
IkReal x13150=r01*r01;
IkReal x13151=(r01*sj5);
IkReal x13152=(cj5*r00);
CheckValue<IkReal> x13153=IKPowWithIntegerCheck(IKsign((((x13149*x13150))+(((-1.0)*(r02*r02)))+(((2.0)*x13151*x13152))+(((-1.0)*x13150))+(((-1.0)*x13149*(r00*r00))))),-1);
if(!x13153.valid){
continue;
}
CheckValue<IkReal> x13154 = IKatan2WithCheck(IkReal((x13152+(((-1.0)*x13151)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13153.value)))+(x13154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13155=IKcos(j4);
IkReal x13156=IKsin(j4);
IkReal x13157=(r11*sj5);
IkReal x13158=(cj5*r20);
IkReal x13159=(r21*sj5);
IkReal x13160=(r01*sj5);
IkReal x13161=((1.0)*x13155);
IkReal x13162=((1.0)*x13156);
IkReal x13163=(cj5*x13156);
IkReal x13164=(cj5*x13155);
evalcond[0]=(((r02*x13156))+((r00*x13164))+(((-1.0)*x13160*x13161)));
evalcond[1]=((((-1.0)*x13157*x13161))+((r12*x13156))+((r10*x13164)));
evalcond[2]=((((-1.0)*r22*x13161))+((x13156*x13158))+(((-1.0)*x13159*x13162)));
evalcond[3]=((((-1.0)*x13157*x13162))+(((-1.0)*r12*x13161))+((r10*x13163)));
evalcond[4]=((1.0)+((x13155*x13158))+((r22*x13156))+(((-1.0)*x13159*x13161)));
evalcond[5]=((1.0)+((r00*x13163))+(((-1.0)*x13160*x13162))+(((-1.0)*r02*x13161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13165=((1.0)*sj5);
CheckValue<IkReal> x13166 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x13165))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13166.valid){
continue;
}
CheckValue<IkReal> x13167=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13165)))),-1);
if(!x13167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13166.value)+(((1.5707963267949)*(x13167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13168=IKcos(j4);
IkReal x13169=IKsin(j4);
IkReal x13170=(r11*sj5);
IkReal x13171=(cj5*r20);
IkReal x13172=(r21*sj5);
IkReal x13173=(r01*sj5);
IkReal x13174=((1.0)*x13168);
IkReal x13175=((1.0)*x13169);
IkReal x13176=(cj5*x13169);
IkReal x13177=(cj5*x13168);
evalcond[0]=((((-1.0)*x13173*x13174))+((r00*x13177))+((r02*x13169)));
evalcond[1]=((((-1.0)*x13170*x13174))+((r12*x13169))+((r10*x13177)));
evalcond[2]=((((-1.0)*x13172*x13175))+(((-1.0)*r22*x13174))+((x13169*x13171)));
evalcond[3]=((((-1.0)*x13170*x13175))+(((-1.0)*r12*x13174))+((r10*x13176)));
evalcond[4]=((1.0)+(((-1.0)*x13172*x13174))+((r22*x13169))+((x13168*x13171)));
evalcond[5]=((1.0)+(((-1.0)*x13173*x13175))+((r00*x13176))+(((-1.0)*r02*x13174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13178 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13178.valid){
continue;
}
CheckValue<IkReal> x13179=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13178.value)+(((1.5707963267949)*(x13179.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13180=IKcos(j4);
IkReal x13181=IKsin(j4);
IkReal x13182=(r11*sj5);
IkReal x13183=(cj5*r20);
IkReal x13184=(r21*sj5);
IkReal x13185=(r01*sj5);
IkReal x13186=((1.0)*x13180);
IkReal x13187=((1.0)*x13181);
IkReal x13188=(cj5*x13181);
IkReal x13189=(cj5*x13180);
evalcond[0]=(((r02*x13181))+(((-1.0)*x13185*x13186))+((r00*x13189)));
evalcond[1]=(((r12*x13181))+(((-1.0)*x13182*x13186))+((r10*x13189)));
evalcond[2]=((((-1.0)*r22*x13186))+(((-1.0)*x13184*x13187))+((x13181*x13183)));
evalcond[3]=((((-1.0)*r12*x13186))+(((-1.0)*x13182*x13187))+((r10*x13188)));
evalcond[4]=((1.0)+((r22*x13181))+((x13180*x13183))+(((-1.0)*x13184*x13186)));
evalcond[5]=((1.0)+(((-1.0)*r02*x13186))+(((-1.0)*x13185*x13187))+((r00*x13188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13190=(cj1*sj2);
IkReal x13191=(cj5*r00);
IkReal x13192=((1.0)*r02);
IkReal x13193=(cj2*sj1);
IkReal x13194=((1.0)*r01*sj5);
CheckValue<IkReal> x13195=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13195.valid){
continue;
}
CheckValue<IkReal> x13196 = IKatan2WithCheck(IkReal(((((-1.0)*x13193*x13194))+(((-1.0)*x13190*x13194))+((x13191*x13193))+((x13190*x13191)))),IkReal(((((-1.0)*x13190*x13192))+(((-1.0)*x13192*x13193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13195.value)))+(x13196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13197=IKcos(j4);
IkReal x13198=IKsin(j4);
IkReal x13199=((1.0)*x13197);
IkReal x13200=(cj5*x13197);
IkReal x13201=(cj5*x13198);
IkReal x13202=((1.0)*sj5*x13198);
evalcond[0]=(((r00*x13200))+((r02*x13198))+(((-1.0)*r01*sj5*x13199)));
evalcond[1]=((((-1.0)*r22*x13199))+(((-1.0)*r21*x13202))+((r20*x13201)));
evalcond[2]=((((-1.0)*r12*x13199))+((r10*x13201))+(((-1.0)*r11*x13202)));
evalcond[3]=((1.0)+((r00*x13201))+(((-1.0)*r02*x13199))+(((-1.0)*r01*x13202)));
evalcond[4]=(((cj2*sj1))+((r12*x13198))+((r10*x13200))+((cj1*sj2))+(((-1.0)*r11*sj5*x13199)));
evalcond[5]=((((-1.0)*r21*sj5*x13199))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x13200))+((r22*x13198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13203=((1.0)*sj5);
CheckValue<IkReal> x13204=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13203)))),-1);
if(!x13204.valid){
continue;
}
CheckValue<IkReal> x13205 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x13203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13204.value)))+(x13205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13206=IKcos(j4);
IkReal x13207=IKsin(j4);
IkReal x13208=((1.0)*x13206);
IkReal x13209=(cj5*x13206);
IkReal x13210=(cj5*x13207);
IkReal x13211=((1.0)*sj5*x13207);
evalcond[0]=(((r00*x13209))+((r02*x13207))+(((-1.0)*r01*sj5*x13208)));
evalcond[1]=(((r20*x13210))+(((-1.0)*r22*x13208))+(((-1.0)*r21*x13211)));
evalcond[2]=(((r10*x13210))+(((-1.0)*r12*x13208))+(((-1.0)*r11*x13211)));
evalcond[3]=((1.0)+((r00*x13210))+(((-1.0)*r02*x13208))+(((-1.0)*r01*x13211)));
evalcond[4]=(((cj2*sj1))+((r10*x13209))+((cj1*sj2))+((r12*x13207))+(((-1.0)*r11*sj5*x13208)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13207))+(((-1.0)*r21*sj5*x13208))+((r20*x13209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13212 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13212.valid){
continue;
}
CheckValue<IkReal> x13213=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13212.value)+(((1.5707963267949)*(x13213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13214=IKcos(j4);
IkReal x13215=IKsin(j4);
IkReal x13216=((1.0)*x13214);
IkReal x13217=(cj5*x13214);
IkReal x13218=(cj5*x13215);
IkReal x13219=((1.0)*sj5*x13215);
evalcond[0]=(((r00*x13217))+(((-1.0)*r01*sj5*x13216))+((r02*x13215)));
evalcond[1]=(((r20*x13218))+(((-1.0)*r22*x13216))+(((-1.0)*r21*x13219)));
evalcond[2]=(((r10*x13218))+(((-1.0)*r12*x13216))+(((-1.0)*r11*x13219)));
evalcond[3]=((1.0)+((r00*x13218))+(((-1.0)*r02*x13216))+(((-1.0)*r01*x13219)));
evalcond[4]=(((cj2*sj1))+((r12*x13215))+((r10*x13217))+((cj1*sj2))+(((-1.0)*r11*sj5*x13216)));
evalcond[5]=((((-1.0)*r21*sj5*x13216))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x13217))+((r22*x13215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13220=((-1.0)*r10);
IkReal x13222 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13222)==0){
continue;
}
IkReal x13221=pow(x13222,-0.5);
CheckValue<IkReal> x13223 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13220),IKFAST_ATAN2_MAGTHRESH);
if(!x13223.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13223.value));
IkReal gconst19=(r11*x13221);
IkReal gconst20=(x13220*x13221);
CheckValue<IkReal> x13224 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13224.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13224.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13225=((-1.0)*r10);
IkReal x13226=x13221;
CheckValue<IkReal> x13228 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13225),IKFAST_ATAN2_MAGTHRESH);
if(!x13228.valid){
continue;
}
IkReal x13227=((-1.0)*(x13228.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13227;
IkReal gconst18=x13227;
IkReal gconst19=(r11*x13226);
IkReal gconst20=(x13225*x13226);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13229=((-1.0)*r10);
IkReal x13230=x13221;
CheckValue<IkReal> x13232 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13229),IKFAST_ATAN2_MAGTHRESH);
if(!x13232.valid){
continue;
}
IkReal x13231=((-1.0)*(x13232.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13231;
IkReal gconst18=x13231;
IkReal gconst19=(r11*x13230);
IkReal gconst20=(x13229*x13230);
CheckValue<IkReal> x13240=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x13240.valid){
continue;
}
IkReal x13233=x13240.value;
IkReal x13234=(cj3*x13233);
IkReal x13235=(r00*x13234);
IkReal x13236=(r21*x13234);
IkReal x13237=(r20*x13234);
IkReal x13238=(r01*x13234);
IkReal x13239=(r10*r11*x13234);
j4eval[0]=IKsign((((r01*r10*r11*x13237))+((r10*r11*r21*x13235))+((r01*x13236*(r11*r11)))+((r20*x13235*(r10*r10)))+((cj3*r02*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13241=((-1.0)*r10);
IkReal x13242=x13221;
CheckValue<IkReal> x13244 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13241),IKFAST_ATAN2_MAGTHRESH);
if(!x13244.valid){
continue;
}
IkReal x13243=((-1.0)*(x13244.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13243;
IkReal gconst18=x13243;
IkReal gconst19=(r11*x13242);
IkReal gconst20=(x13241*x13242);
CheckValue<IkReal> x13252=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x13252.valid){
continue;
}
IkReal x13245=x13252.value;
IkReal x13246=(sj3*x13245);
IkReal x13247=(r20*x13246);
IkReal x13248=(r00*x13246);
IkReal x13249=(r01*x13246);
IkReal x13250=(r21*x13246);
IkReal x13251=(r10*r11*x13246);
j4eval[0]=IKsign((((r01*r10*r11*x13247))+((r21*x13249*(r11*r11)))+((r00*x13247*(r10*r10)))+((r10*r11*r21*x13248))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13253=((-1.0)*r10);
IkReal x13254=x13221;
CheckValue<IkReal> x13256 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13253),IKFAST_ATAN2_MAGTHRESH);
if(!x13256.valid){
continue;
}
IkReal x13255=((-1.0)*(x13256.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13255;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x13255;
IkReal gconst19=(r11*x13254);
IkReal gconst20=(x13253*x13254);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13257=((-1.0)*r10);
IkReal x13258=x13221;
CheckValue<IkReal> x13260 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13257),IKFAST_ATAN2_MAGTHRESH);
if(!x13260.valid){
continue;
}
IkReal x13259=((-1.0)*(x13260.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13259;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x13259;
IkReal gconst19=(r11*x13258);
IkReal gconst20=(x13257*x13258);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13261=((-1.0)*r10);
IkReal x13262=x13221;
CheckValue<IkReal> x13264 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13261),IKFAST_ATAN2_MAGTHRESH);
if(!x13264.valid){
continue;
}
IkReal x13263=((-1.0)*(x13264.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13263;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x13263;
IkReal gconst19=(r11*x13262);
IkReal gconst20=(x13261*x13262);
IkReal x13265=r12*r12;
IkReal x13266=(r02*sj1*sj2);
CheckValue<IkReal> x13271=IKPowWithIntegerCheck(((-1.0)+x13265),-1);
if(!x13271.valid){
continue;
}
IkReal x13267=x13271.value;
IkReal x13268=((1.0)*cj1*cj2*r02);
if((((1.0)+(((-1.0)*x13265)))) < -0.00001)
continue;
IkReal x13269=IKsqrt(((1.0)+(((-1.0)*x13265))));
IkReal x13270=(r12*x13267*x13269);
j4eval[0]=((IKabs(((((-1.0)*x13268))+x13266)))+(IKabs(((((-1.0)*x13268*x13270))+((x13266*x13270))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13272=(gconst19*r01);
IkReal x13273=(sj1*sj2);
IkReal x13274=(gconst20*r00);
IkReal x13275=((1.0)*cj1*cj2);
CheckValue<IkReal> x13276 = IKatan2WithCheck(IkReal(((((-1.0)*x13273*x13274))+((x13272*x13273))+((cj1*cj2*x13274))+(((-1.0)*x13272*x13275)))),IkReal((((r02*x13273))+(((-1.0)*r02*x13275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13276.valid){
continue;
}
CheckValue<IkReal> x13277=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13276.value)+(((1.5707963267949)*(x13277.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13278=IKsin(j4);
IkReal x13279=IKcos(j4);
IkReal x13280=(gconst20*r20);
IkReal x13281=(gconst20*r00);
IkReal x13282=((1.0)*cj2);
IkReal x13283=(gconst20*r10);
IkReal x13284=((1.0)*x13279);
IkReal x13285=(gconst19*x13279);
IkReal x13286=((1.0)*x13278);
evalcond[0]=((((-1.0)*r22*x13284))+(((-1.0)*gconst19*r21*x13286))+((x13278*x13280)));
evalcond[1]=(((x13278*x13283))+(((-1.0)*gconst19*r11*x13286))+(((-1.0)*r12*x13284)));
evalcond[2]=((((-1.0)*r02*x13286))+(((-1.0)*x13281*x13284))+((r01*x13285)));
evalcond[3]=((1.0)+((x13278*x13281))+(((-1.0)*r02*x13284))+(((-1.0)*gconst19*r01*x13286)));
evalcond[4]=((((-1.0)*cj1*x13282))+((r11*x13285))+((sj1*sj2))+(((-1.0)*x13283*x13284))+(((-1.0)*r12*x13286)));
evalcond[5]=((((-1.0)*r22*x13286))+(((-1.0)*sj1*x13282))+(((-1.0)*x13280*x13284))+(((-1.0)*cj1*sj2))+((r21*x13285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13287=(gconst19*r01);
IkReal x13288=(gconst20*r00);
CheckValue<IkReal> x13289=IKPowWithIntegerCheck(IKsign(((x13287*x13287)+(((-2.0)*x13287*x13288))+(r02*r02)+(x13288*x13288))),-1);
if(!x13289.valid){
continue;
}
CheckValue<IkReal> x13290 = IKatan2WithCheck(IkReal(((((-1.0)*x13288))+x13287)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13289.value)))+(x13290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13291=IKsin(j4);
IkReal x13292=IKcos(j4);
IkReal x13293=(gconst20*r20);
IkReal x13294=(gconst20*r00);
IkReal x13295=((1.0)*cj2);
IkReal x13296=(gconst20*r10);
IkReal x13297=((1.0)*x13292);
IkReal x13298=(gconst19*x13292);
IkReal x13299=((1.0)*x13291);
evalcond[0]=((((-1.0)*gconst19*r21*x13299))+((x13291*x13293))+(((-1.0)*r22*x13297)));
evalcond[1]=((((-1.0)*gconst19*r11*x13299))+((x13291*x13296))+(((-1.0)*r12*x13297)));
evalcond[2]=((((-1.0)*x13294*x13297))+(((-1.0)*r02*x13299))+((r01*x13298)));
evalcond[3]=((1.0)+(((-1.0)*gconst19*r01*x13299))+((x13291*x13294))+(((-1.0)*r02*x13297)));
evalcond[4]=(((r11*x13298))+(((-1.0)*x13296*x13297))+(((-1.0)*cj1*x13295))+((sj1*sj2))+(((-1.0)*r12*x13299)));
evalcond[5]=((((-1.0)*x13293*x13297))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x13299))+(((-1.0)*sj1*x13295))+((r21*x13298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13300 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13300.valid){
continue;
}
CheckValue<IkReal> x13301=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13300.value)+(((1.5707963267949)*(x13301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13302=IKsin(j4);
IkReal x13303=IKcos(j4);
IkReal x13304=(gconst20*r20);
IkReal x13305=(gconst20*r00);
IkReal x13306=((1.0)*cj2);
IkReal x13307=(gconst20*r10);
IkReal x13308=((1.0)*x13303);
IkReal x13309=(gconst19*x13303);
IkReal x13310=((1.0)*x13302);
evalcond[0]=((((-1.0)*gconst19*r21*x13310))+((x13302*x13304))+(((-1.0)*r22*x13308)));
evalcond[1]=((((-1.0)*gconst19*r11*x13310))+((x13302*x13307))+(((-1.0)*r12*x13308)));
evalcond[2]=((((-1.0)*r02*x13310))+((r01*x13309))+(((-1.0)*x13305*x13308)));
evalcond[3]=((1.0)+(((-1.0)*gconst19*r01*x13310))+((x13302*x13305))+(((-1.0)*r02*x13308)));
evalcond[4]=((((-1.0)*cj1*x13306))+((sj1*sj2))+(((-1.0)*x13307*x13308))+(((-1.0)*r12*x13310))+((r11*x13309)));
evalcond[5]=((((-1.0)*sj1*x13306))+((r21*x13309))+(((-1.0)*x13304*x13308))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x13310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13311=((-1.0)*r10);
IkReal x13312=x13221;
CheckValue<IkReal> x13314 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13311),IKFAST_ATAN2_MAGTHRESH);
if(!x13314.valid){
continue;
}
IkReal x13313=((-1.0)*(x13314.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13313;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x13313;
IkReal gconst19=(r11*x13312);
IkReal gconst20=(x13311*x13312);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13315=((-1.0)*r10);
IkReal x13316=x13221;
CheckValue<IkReal> x13318 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13315),IKFAST_ATAN2_MAGTHRESH);
if(!x13318.valid){
continue;
}
IkReal x13317=((-1.0)*(x13318.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13317;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x13317;
IkReal gconst19=(r11*x13316);
IkReal gconst20=(x13315*x13316);
IkReal x13319=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x13323=IKPowWithIntegerCheck(x13319,-1);
if(!x13323.valid){
continue;
}
IkReal x13320=x13323.value;
IkReal x13321=((1.0)*x13320);
IkReal x13322=((((-2.0)*r00*r01*r10*r11*x13320))+(((-1.0)*(r02*r02)))+(((-1.0)*x13321*(r00*r00)*(r10*r10)))+(((-1.0)*x13321*(r01*r01)*(r11*r11))));
j4eval[0]=x13322;
j4eval[1]=r02;
j4eval[2]=x13319;
j4eval[3]=IKsign(x13322);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13324=((-1.0)*r10);
IkReal x13325=x13221;
CheckValue<IkReal> x13327 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13324),IKFAST_ATAN2_MAGTHRESH);
if(!x13327.valid){
continue;
}
IkReal x13326=((-1.0)*(x13327.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13326;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x13326;
IkReal gconst19=(r11*x13325);
IkReal gconst20=(x13324*x13325);
IkReal x13328=r12*r12;
IkReal x13329=(cj1*cj2*r02);
CheckValue<IkReal> x13334=IKPowWithIntegerCheck(((-1.0)+x13328),-1);
if(!x13334.valid){
continue;
}
IkReal x13330=x13334.value;
IkReal x13331=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x13328)))) < -0.00001)
continue;
IkReal x13332=IKsqrt(((1.0)+(((-1.0)*x13328))));
IkReal x13333=(r12*x13330*x13332);
j4eval[0]=((IKabs(((((-1.0)*x13331))+x13329)))+(IKabs((((x13329*x13333))+(((-1.0)*x13331*x13333))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13335=(sj1*sj2);
IkReal x13336=(cj1*cj2);
IkReal x13337=(gconst19*r01);
IkReal x13338=(gconst20*r00);
CheckValue<IkReal> x13339 = IKatan2WithCheck(IkReal(((((-1.0)*x13335*x13337))+((x13336*x13337))+(((-1.0)*x13336*x13338))+((x13335*x13338)))),IkReal((((r02*x13336))+(((-1.0)*r02*x13335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13339.valid){
continue;
}
CheckValue<IkReal> x13340=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13339.value)+(((1.5707963267949)*(x13340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13341=IKcos(j4);
IkReal x13342=IKsin(j4);
IkReal x13343=(gconst20*r00);
IkReal x13344=((1.0)*cj2);
IkReal x13345=(gconst19*r21);
IkReal x13346=(gconst20*r20);
IkReal x13347=(gconst19*r01);
IkReal x13348=(gconst20*r10);
IkReal x13349=(gconst19*r11);
IkReal x13350=((1.0)*x13341);
IkReal x13351=((1.0)*x13342);
evalcond[0]=(((x13341*x13343))+((r02*x13342))+(((-1.0)*x13347*x13350)));
evalcond[1]=((((-1.0)*r22*x13350))+(((-1.0)*x13345*x13351))+((x13342*x13346)));
evalcond[2]=((((-1.0)*r12*x13350))+((x13342*x13348))+(((-1.0)*x13349*x13351)));
evalcond[3]=((1.0)+(((-1.0)*r02*x13350))+((x13342*x13343))+(((-1.0)*x13347*x13351)));
evalcond[4]=(((x13341*x13348))+((sj1*sj2))+((r12*x13342))+(((-1.0)*x13349*x13350))+(((-1.0)*cj1*x13344)));
evalcond[5]=((((-1.0)*x13345*x13350))+((x13341*x13346))+((r22*x13342))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13352=(gconst20*r00);
IkReal x13353=(gconst19*r01);
CheckValue<IkReal> x13354=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13353*x13353)))+(((-1.0)*(r02*r02)))+(((2.0)*x13352*x13353))+(((-1.0)*(x13352*x13352))))),-1);
if(!x13354.valid){
continue;
}
CheckValue<IkReal> x13355 = IKatan2WithCheck(IkReal(((((-1.0)*x13353))+x13352)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13354.value)))+(x13355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13356=IKcos(j4);
IkReal x13357=IKsin(j4);
IkReal x13358=(gconst20*r00);
IkReal x13359=((1.0)*cj2);
IkReal x13360=(gconst19*r21);
IkReal x13361=(gconst20*r20);
IkReal x13362=(gconst19*r01);
IkReal x13363=(gconst20*r10);
IkReal x13364=(gconst19*r11);
IkReal x13365=((1.0)*x13356);
IkReal x13366=((1.0)*x13357);
evalcond[0]=(((r02*x13357))+(((-1.0)*x13362*x13365))+((x13356*x13358)));
evalcond[1]=((((-1.0)*x13360*x13366))+((x13357*x13361))+(((-1.0)*r22*x13365)));
evalcond[2]=((((-1.0)*r12*x13365))+((x13357*x13363))+(((-1.0)*x13364*x13366)));
evalcond[3]=((1.0)+((x13357*x13358))+(((-1.0)*x13362*x13366))+(((-1.0)*r02*x13365)));
evalcond[4]=(((x13356*x13363))+(((-1.0)*x13364*x13365))+((sj1*sj2))+(((-1.0)*cj1*x13359))+((r12*x13357)));
evalcond[5]=(((r22*x13357))+(((-1.0)*x13360*x13365))+((x13356*x13361))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13367 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13367.valid){
continue;
}
CheckValue<IkReal> x13368=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13367.value)+(((1.5707963267949)*(x13368.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13369=IKcos(j4);
IkReal x13370=IKsin(j4);
IkReal x13371=(gconst20*r00);
IkReal x13372=((1.0)*cj2);
IkReal x13373=(gconst19*r21);
IkReal x13374=(gconst20*r20);
IkReal x13375=(gconst19*r01);
IkReal x13376=(gconst20*r10);
IkReal x13377=(gconst19*r11);
IkReal x13378=((1.0)*x13369);
IkReal x13379=((1.0)*x13370);
evalcond[0]=(((r02*x13370))+((x13369*x13371))+(((-1.0)*x13375*x13378)));
evalcond[1]=(((x13370*x13374))+(((-1.0)*x13373*x13379))+(((-1.0)*r22*x13378)));
evalcond[2]=(((x13370*x13376))+(((-1.0)*x13377*x13379))+(((-1.0)*r12*x13378)));
evalcond[3]=((1.0)+((x13370*x13371))+(((-1.0)*r02*x13378))+(((-1.0)*x13375*x13379)));
evalcond[4]=((((-1.0)*x13377*x13378))+((r12*x13370))+((x13369*x13376))+((sj1*sj2))+(((-1.0)*cj1*x13372)));
evalcond[5]=((((-1.0)*sj1*x13372))+(((-1.0)*x13373*x13378))+((x13369*x13374))+(((-1.0)*cj1*sj2))+((r22*x13370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13380=((-1.0)*r10);
IkReal x13381=x13221;
CheckValue<IkReal> x13383 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13380),IKFAST_ATAN2_MAGTHRESH);
if(!x13383.valid){
continue;
}
IkReal x13382=((-1.0)*(x13383.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13382;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x13382;
IkReal gconst19=(r11*x13381);
IkReal gconst20=(x13380*x13381);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13384=((-1.0)*r10);
IkReal x13385=x13221;
CheckValue<IkReal> x13387 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13384),IKFAST_ATAN2_MAGTHRESH);
if(!x13387.valid){
continue;
}
IkReal x13386=((-1.0)*(x13387.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13386;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x13386;
IkReal gconst19=(r11*x13385);
IkReal gconst20=(x13384*x13385);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13388=((-1.0)*r10);
IkReal x13389=x13221;
CheckValue<IkReal> x13391 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13388),IKFAST_ATAN2_MAGTHRESH);
if(!x13391.valid){
continue;
}
IkReal x13390=((-1.0)*(x13391.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13390;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x13390;
IkReal gconst19=(r11*x13389);
IkReal gconst20=(x13388*x13389);
IkReal x13392=(cj1*r02*sj2);
IkReal x13393=(cj2*r02*sj1);
IkReal x13394=x13221;
IkReal x13395=(r12*x13394);
j4eval[0]=((IKabs((x13393+x13392)))+(IKabs((((x13393*x13395))+((x13392*x13395))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13396=(cj2*sj1);
IkReal x13397=(gconst19*r01);
IkReal x13398=(cj1*sj2);
IkReal x13399=((1.0)*gconst20*r00);
CheckValue<IkReal> x13400 = IKatan2WithCheck(IkReal(((((-1.0)*x13396*x13399))+((x13396*x13397))+(((-1.0)*x13398*x13399))+((x13397*x13398)))),IkReal((((r02*x13396))+((r02*x13398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13400.valid){
continue;
}
CheckValue<IkReal> x13401=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13400.value)+(((1.5707963267949)*(x13401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13402=IKsin(j4);
IkReal x13403=IKcos(j4);
IkReal x13404=(gconst20*r20);
IkReal x13405=(gconst20*r00);
IkReal x13406=(gconst20*r10);
IkReal x13407=((1.0)*x13403);
IkReal x13408=(gconst19*x13403);
IkReal x13409=((1.0)*x13402);
evalcond[0]=(((x13402*x13404))+(((-1.0)*gconst19*r21*x13409))+(((-1.0)*r22*x13407)));
evalcond[1]=(((x13402*x13406))+(((-1.0)*r12*x13407))+(((-1.0)*gconst19*r11*x13409)));
evalcond[2]=((((-1.0)*r02*x13409))+(((-1.0)*x13405*x13407))+((r01*x13408)));
evalcond[3]=((1.0)+((x13402*x13405))+(((-1.0)*r02*x13407))+(((-1.0)*gconst19*r01*x13409)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13406*x13407))+((r11*x13408))+((cj1*sj2))+(((-1.0)*r12*x13409)));
evalcond[5]=(((r21*x13408))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13409))+(((-1.0)*x13404*x13407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13410=(gconst19*r01);
IkReal x13411=(gconst20*r00);
CheckValue<IkReal> x13412 = IKatan2WithCheck(IkReal((x13410+(((-1.0)*x13411)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13412.valid){
continue;
}
CheckValue<IkReal> x13413=IKPowWithIntegerCheck(IKsign(((x13410*x13410)+(x13411*x13411)+(r02*r02)+(((-2.0)*x13410*x13411)))),-1);
if(!x13413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13412.value)+(((1.5707963267949)*(x13413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13414=IKsin(j4);
IkReal x13415=IKcos(j4);
IkReal x13416=(gconst20*r20);
IkReal x13417=(gconst20*r00);
IkReal x13418=(gconst20*r10);
IkReal x13419=((1.0)*x13415);
IkReal x13420=(gconst19*x13415);
IkReal x13421=((1.0)*x13414);
evalcond[0]=((((-1.0)*r22*x13419))+((x13414*x13416))+(((-1.0)*gconst19*r21*x13421)));
evalcond[1]=((((-1.0)*r12*x13419))+((x13414*x13418))+(((-1.0)*gconst19*r11*x13421)));
evalcond[2]=((((-1.0)*r02*x13421))+((r01*x13420))+(((-1.0)*x13417*x13419)));
evalcond[3]=((1.0)+((x13414*x13417))+(((-1.0)*gconst19*r01*x13421))+(((-1.0)*r02*x13419)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x13421))+((r11*x13420))+(((-1.0)*x13418*x13419)));
evalcond[5]=((((-1.0)*r22*x13421))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x13420))+(((-1.0)*x13416*x13419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13422 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13422.valid){
continue;
}
CheckValue<IkReal> x13423=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13422.value)+(((1.5707963267949)*(x13423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13424=IKsin(j4);
IkReal x13425=IKcos(j4);
IkReal x13426=(gconst20*r20);
IkReal x13427=(gconst20*r00);
IkReal x13428=(gconst20*r10);
IkReal x13429=((1.0)*x13425);
IkReal x13430=(gconst19*x13425);
IkReal x13431=((1.0)*x13424);
evalcond[0]=((((-1.0)*gconst19*r21*x13431))+(((-1.0)*r22*x13429))+((x13424*x13426)));
evalcond[1]=(((x13424*x13428))+(((-1.0)*gconst19*r11*x13431))+(((-1.0)*r12*x13429)));
evalcond[2]=(((r01*x13430))+(((-1.0)*x13427*x13429))+(((-1.0)*r02*x13431)));
evalcond[3]=((1.0)+((x13424*x13427))+(((-1.0)*gconst19*r01*x13431))+(((-1.0)*r02*x13429)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13428*x13429))+(((-1.0)*r12*x13431))+((r11*x13430)));
evalcond[5]=((((-1.0)*r22*x13431))+(((-1.0)*x13426*x13429))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x13430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13432=((-1.0)*r10);
IkReal x13433=x13221;
CheckValue<IkReal> x13435 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13432),IKFAST_ATAN2_MAGTHRESH);
if(!x13435.valid){
continue;
}
IkReal x13434=((-1.0)*(x13435.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13434;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x13434;
IkReal gconst19=(r11*x13433);
IkReal gconst20=(x13432*x13433);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13436=((-1.0)*r10);
IkReal x13437=x13221;
CheckValue<IkReal> x13439 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13436),IKFAST_ATAN2_MAGTHRESH);
if(!x13439.valid){
continue;
}
IkReal x13438=((-1.0)*(x13439.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13438;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x13438;
IkReal gconst19=(r11*x13437);
IkReal gconst20=(x13436*x13437);
IkReal x13440=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x13444=IKPowWithIntegerCheck(x13440,-1);
if(!x13444.valid){
continue;
}
IkReal x13441=x13444.value;
IkReal x13442=((1.0)*x13441);
IkReal x13443=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x13441))+(((-1.0)*x13442*(r00*r00)*(r10*r10)))+(((-1.0)*x13442*(r01*r01)*(r11*r11))));
j4eval[0]=x13443;
j4eval[1]=r02;
j4eval[2]=x13440;
j4eval[3]=IKsign(x13443);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13445=((-1.0)*r10);
IkReal x13446=x13221;
CheckValue<IkReal> x13448 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13445),IKFAST_ATAN2_MAGTHRESH);
if(!x13448.valid){
continue;
}
IkReal x13447=((-1.0)*(x13448.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13447;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x13447;
IkReal gconst19=(r11*x13446);
IkReal gconst20=(x13445*x13446);
IkReal x13449=r12*r12;
IkReal x13450=((1.0)*r02);
IkReal x13451=(cj1*sj2);
IkReal x13452=(cj2*sj1);
CheckValue<IkReal> x13456=IKPowWithIntegerCheck(((-1.0)+x13449),-1);
if(!x13456.valid){
continue;
}
IkReal x13453=x13456.value;
if((((1.0)+(((-1.0)*x13449)))) < -0.00001)
continue;
IkReal x13454=IKsqrt(((1.0)+(((-1.0)*x13449))));
IkReal x13455=(r12*x13453*x13454);
j4eval[0]=((IKabs(((((-1.0)*x13450*x13451))+(((-1.0)*x13450*x13452)))))+(IKabs(((((-1.0)*x13450*x13452*x13455))+(((-1.0)*x13450*x13451*x13455))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13457=(gconst19*r01);
IkReal x13458=(cj2*sj1);
IkReal x13459=(gconst20*r00);
IkReal x13460=((1.0)*cj1*sj2);
CheckValue<IkReal> x13461 = IKatan2WithCheck(IkReal((((cj1*sj2*x13459))+((x13458*x13459))+(((-1.0)*x13457*x13460))+(((-1.0)*x13457*x13458)))),IkReal(((((-1.0)*r02*x13458))+(((-1.0)*r02*x13460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13461.valid){
continue;
}
CheckValue<IkReal> x13462=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13461.value)+(((1.5707963267949)*(x13462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13463=IKcos(j4);
IkReal x13464=IKsin(j4);
IkReal x13465=(gconst20*r00);
IkReal x13466=(gconst19*r21);
IkReal x13467=(gconst20*r20);
IkReal x13468=(gconst19*r01);
IkReal x13469=(gconst20*r10);
IkReal x13470=(gconst19*r11);
IkReal x13471=((1.0)*x13463);
IkReal x13472=((1.0)*x13464);
evalcond[0]=(((x13463*x13465))+(((-1.0)*x13468*x13471))+((r02*x13464)));
evalcond[1]=(((x13464*x13467))+(((-1.0)*x13466*x13472))+(((-1.0)*r22*x13471)));
evalcond[2]=(((x13464*x13469))+(((-1.0)*r12*x13471))+(((-1.0)*x13470*x13472)));
evalcond[3]=((1.0)+(((-1.0)*r02*x13471))+((x13464*x13465))+(((-1.0)*x13468*x13472)));
evalcond[4]=(((cj2*sj1))+((r12*x13464))+((cj1*sj2))+((x13463*x13469))+(((-1.0)*x13470*x13471)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13463*x13467))+(((-1.0)*x13466*x13471))+((r22*x13464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13473=(gconst20*r00);
IkReal x13474=(gconst19*r01);
CheckValue<IkReal> x13475=IKPowWithIntegerCheck(IKsign(((((2.0)*x13473*x13474))+(((-1.0)*(r02*r02)))+(((-1.0)*(x13473*x13473)))+(((-1.0)*(x13474*x13474))))),-1);
if(!x13475.valid){
continue;
}
CheckValue<IkReal> x13476 = IKatan2WithCheck(IkReal((x13473+(((-1.0)*x13474)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13475.value)))+(x13476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13477=IKcos(j4);
IkReal x13478=IKsin(j4);
IkReal x13479=(gconst20*r00);
IkReal x13480=(gconst19*r21);
IkReal x13481=(gconst20*r20);
IkReal x13482=(gconst19*r01);
IkReal x13483=(gconst20*r10);
IkReal x13484=(gconst19*r11);
IkReal x13485=((1.0)*x13477);
IkReal x13486=((1.0)*x13478);
evalcond[0]=((((-1.0)*x13482*x13485))+((r02*x13478))+((x13477*x13479)));
evalcond[1]=((((-1.0)*r22*x13485))+((x13478*x13481))+(((-1.0)*x13480*x13486)));
evalcond[2]=((((-1.0)*r12*x13485))+((x13478*x13483))+(((-1.0)*x13484*x13486)));
evalcond[3]=((1.0)+(((-1.0)*x13482*x13486))+(((-1.0)*r02*x13485))+((x13478*x13479)));
evalcond[4]=(((cj2*sj1))+((x13477*x13483))+((cj1*sj2))+((r12*x13478))+(((-1.0)*x13484*x13485)));
evalcond[5]=(((x13477*x13481))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13478))+(((-1.0)*x13480*x13485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13487 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13487.valid){
continue;
}
CheckValue<IkReal> x13488=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13487.value)+(((1.5707963267949)*(x13488.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13489=IKcos(j4);
IkReal x13490=IKsin(j4);
IkReal x13491=(gconst20*r00);
IkReal x13492=(gconst19*r21);
IkReal x13493=(gconst20*r20);
IkReal x13494=(gconst19*r01);
IkReal x13495=(gconst20*r10);
IkReal x13496=(gconst19*r11);
IkReal x13497=((1.0)*x13489);
IkReal x13498=((1.0)*x13490);
evalcond[0]=(((r02*x13490))+(((-1.0)*x13494*x13497))+((x13489*x13491)));
evalcond[1]=(((x13490*x13493))+(((-1.0)*r22*x13497))+(((-1.0)*x13492*x13498)));
evalcond[2]=((((-1.0)*r12*x13497))+((x13490*x13495))+(((-1.0)*x13496*x13498)));
evalcond[3]=((1.0)+((x13490*x13491))+(((-1.0)*x13494*x13498))+(((-1.0)*r02*x13497)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13496*x13497))+((x13489*x13495))+((r12*x13490)));
evalcond[5]=(((r22*x13490))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13492*x13497))+((x13489*x13493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13499=((-1.0)*r10);
IkReal x13500=((-1.0)*pz);
CheckValue<IkReal> x13502 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13499),IKFAST_ATAN2_MAGTHRESH);
if(!x13502.valid){
continue;
}
IkReal x13501=((-1.0)*(x13502.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13501;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13500);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13500);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x13501;
IkReal gconst19=r11;
IkReal gconst20=x13499;
IkReal x13503=(r00*r10);
IkReal x13504=(r01*r11);
j4eval[0]=((((-1.0)*x13503))+(((-1.0)*x13504)));
j4eval[1]=(((sj3*x13503))+((sj3*x13504)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13505=((-1.0)*r10);
IkReal x13506=((-1.0)*pz);
CheckValue<IkReal> x13508 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13505),IKFAST_ATAN2_MAGTHRESH);
if(!x13508.valid){
continue;
}
IkReal x13507=((-1.0)*(x13508.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13507;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13506);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13506);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x13507;
IkReal gconst19=r11;
IkReal gconst20=x13505;
IkReal x13509=(r00*r10);
IkReal x13510=(r01*r11);
j4eval[0]=((((-1.0)*x13510))+(((-1.0)*x13509)));
j4eval[1]=(((cj3*x13510))+((cj3*x13509)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13511=((-1.0)*r10);
IkReal x13512=((-1.0)*pz);
CheckValue<IkReal> x13514 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13511),IKFAST_ATAN2_MAGTHRESH);
if(!x13514.valid){
continue;
}
IkReal x13513=((-1.0)*(x13514.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13513;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13512);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13512);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x13513;
IkReal gconst19=r11;
IkReal gconst20=x13511;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r01*r11))+((cj3*r00*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13515=((1.0)*r00);
CheckValue<IkReal> x13516=IKPowWithIntegerCheck(r22,-1);
if(!x13516.valid){
continue;
}
CheckValue<IkReal> x13517=IKPowWithIntegerCheck(sj3,-1);
if(!x13517.valid){
continue;
}
CheckValue<IkReal> x13518=IKPowWithIntegerCheck((((cj3*gconst19*r01))+(((-1.0)*cj3*gconst20*x13515))),-1);
if(!x13518.valid){
continue;
}
if( IKabs(((x13516.value)*(x13517.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13518.value)*(((((-1.0)*gconst19*sj3*x13515))+(((-1.0)*gconst20*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13516.value)*(x13517.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13518.value)*(((((-1.0)*gconst19*sj3*x13515))+(((-1.0)*gconst20*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13516.value)*(x13517.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13518.value)*(((((-1.0)*gconst19*sj3*x13515))+(((-1.0)*gconst20*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13519=IKsin(j4);
IkReal x13520=IKcos(j4);
IkReal x13521=(sj1*sj2);
IkReal x13522=(gconst20*r00);
IkReal x13523=(cj3*gconst19);
IkReal x13524=(gconst19*sj3);
IkReal x13525=((1.0)*cj1);
IkReal x13526=((1.0)*cj3);
IkReal x13527=(gconst20*r11);
IkReal x13528=(gconst20*sj3);
IkReal x13529=(cj2*sj1);
IkReal x13530=(gconst20*r10);
IkReal x13531=(cj2*x13525);
IkReal x13532=(r22*x13519);
IkReal x13533=((1.0)*x13520);
IkReal x13534=(x13520*x13524);
IkReal x13535=((1.0)*gconst19*x13519);
evalcond[0]=((-1.0)*r22*x13520);
evalcond[1]=(((x13519*x13530))+(((-1.0)*r11*x13535)));
evalcond[2]=((1.0)+((x13519*x13522))+(((-1.0)*r01*x13535)));
evalcond[3]=(x13521+(((-1.0)*sj3*x13532))+(((-1.0)*x13531)));
evalcond[4]=((((-1.0)*sj2*x13525))+(((-1.0)*x13529))+(((-1.0)*x13526*x13532)));
evalcond[5]=(((r01*x13528))+(((-1.0)*x13520*x13522*x13526))+((r01*x13520*x13523))+((r00*x13524)));
evalcond[6]=((((-1.0)*r00*x13523))+(((-1.0)*gconst20*r01*x13526))+((r01*x13534))+(((-1.0)*sj3*x13522*x13533)));
evalcond[7]=(x13521+(((-1.0)*x13520*x13526*x13530))+((r11*x13520*x13523))+(((-1.0)*x13531))+((sj3*x13527))+((r10*x13524)));
evalcond[8]=(x13529+((cj1*sj2))+(((-1.0)*r10*x13523))+(((-1.0)*r10*x13528*x13533))+(((-1.0)*x13526*x13527))+((r11*x13534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13536=((1.0)*r00);
IkReal x13537=(gconst19*r01);
CheckValue<IkReal> x13538=IKPowWithIntegerCheck((((gconst20*r00))+(((-1.0)*x13537))),-1);
if(!x13538.valid){
continue;
}
CheckValue<IkReal> x13539=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst20*x13536))+((cj3*x13537))),-1);
if(!x13539.valid){
continue;
}
if( IKabs(((-1.0)*(x13538.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13539.value)*(((((-1.0)*gconst19*sj3*x13536))+(((-1.0)*gconst20*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13538.value)))+IKsqr(((x13539.value)*(((((-1.0)*gconst19*sj3*x13536))+(((-1.0)*gconst20*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13538.value)), ((x13539.value)*(((((-1.0)*gconst19*sj3*x13536))+(((-1.0)*gconst20*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13540=IKsin(j4);
IkReal x13541=IKcos(j4);
IkReal x13542=(sj1*sj2);
IkReal x13543=(gconst20*r00);
IkReal x13544=(cj3*gconst19);
IkReal x13545=(gconst19*sj3);
IkReal x13546=((1.0)*cj1);
IkReal x13547=((1.0)*cj3);
IkReal x13548=(gconst20*r11);
IkReal x13549=(gconst20*sj3);
IkReal x13550=(cj2*sj1);
IkReal x13551=(gconst20*r10);
IkReal x13552=(cj2*x13546);
IkReal x13553=(r22*x13540);
IkReal x13554=((1.0)*x13541);
IkReal x13555=(x13541*x13545);
IkReal x13556=((1.0)*gconst19*x13540);
evalcond[0]=((-1.0)*r22*x13541);
evalcond[1]=(((x13540*x13551))+(((-1.0)*r11*x13556)));
evalcond[2]=((1.0)+(((-1.0)*r01*x13556))+((x13540*x13543)));
evalcond[3]=(x13542+(((-1.0)*x13552))+(((-1.0)*sj3*x13553)));
evalcond[4]=((((-1.0)*x13547*x13553))+(((-1.0)*sj2*x13546))+(((-1.0)*x13550)));
evalcond[5]=(((r01*x13549))+((r00*x13545))+((r01*x13541*x13544))+(((-1.0)*x13541*x13543*x13547)));
evalcond[6]=(((r01*x13555))+(((-1.0)*sj3*x13543*x13554))+(((-1.0)*r00*x13544))+(((-1.0)*gconst20*r01*x13547)));
evalcond[7]=(x13542+(((-1.0)*x13552))+((r10*x13545))+((sj3*x13548))+((r11*x13541*x13544))+(((-1.0)*x13541*x13547*x13551)));
evalcond[8]=(x13550+(((-1.0)*x13547*x13548))+((r11*x13555))+((cj1*sj2))+(((-1.0)*r10*x13549*x13554))+(((-1.0)*r10*x13544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13557=(gconst20*r00);
IkReal x13558=(gconst19*r01);
CheckValue<IkReal> x13559=IKPowWithIntegerCheck((x13557+(((-1.0)*x13558))),-1);
if(!x13559.valid){
continue;
}
CheckValue<IkReal> x13560=IKPowWithIntegerCheck((((sj3*x13558))+(((-1.0)*sj3*x13557))),-1);
if(!x13560.valid){
continue;
}
if( IKabs(((-1.0)*(x13559.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13560.value)*((((cj3*gconst19*r00))+((cj3*gconst20*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13559.value)))+IKsqr(((x13560.value)*((((cj3*gconst19*r00))+((cj3*gconst20*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13559.value)), ((x13560.value)*((((cj3*gconst19*r00))+((cj3*gconst20*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13561=IKsin(j4);
IkReal x13562=IKcos(j4);
IkReal x13563=(sj1*sj2);
IkReal x13564=(gconst20*r00);
IkReal x13565=(cj3*gconst19);
IkReal x13566=(gconst19*sj3);
IkReal x13567=((1.0)*cj1);
IkReal x13568=((1.0)*cj3);
IkReal x13569=(gconst20*r11);
IkReal x13570=(gconst20*sj3);
IkReal x13571=(cj2*sj1);
IkReal x13572=(gconst20*r10);
IkReal x13573=(cj2*x13567);
IkReal x13574=(r22*x13561);
IkReal x13575=((1.0)*x13562);
IkReal x13576=(x13562*x13566);
IkReal x13577=((1.0)*gconst19*x13561);
evalcond[0]=((-1.0)*r22*x13562);
evalcond[1]=(((x13561*x13572))+(((-1.0)*r11*x13577)));
evalcond[2]=((1.0)+((x13561*x13564))+(((-1.0)*r01*x13577)));
evalcond[3]=(x13563+(((-1.0)*sj3*x13574))+(((-1.0)*x13573)));
evalcond[4]=((((-1.0)*x13568*x13574))+(((-1.0)*sj2*x13567))+(((-1.0)*x13571)));
evalcond[5]=(((r00*x13566))+((r01*x13562*x13565))+(((-1.0)*x13562*x13564*x13568))+((r01*x13570)));
evalcond[6]=((((-1.0)*sj3*x13564*x13575))+(((-1.0)*r00*x13565))+(((-1.0)*gconst20*r01*x13568))+((r01*x13576)));
evalcond[7]=(x13563+((sj3*x13569))+((r10*x13566))+((r11*x13562*x13565))+(((-1.0)*x13573))+(((-1.0)*x13562*x13568*x13572)));
evalcond[8]=(x13571+(((-1.0)*r10*x13570*x13575))+(((-1.0)*x13568*x13569))+((cj1*sj2))+(((-1.0)*r10*x13565))+((r11*x13576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13578=gconst19*gconst19;
IkReal x13579=gconst20*gconst20;
IkReal x13580=(r20*sj3);
IkReal x13581=(cj3*r21);
IkReal x13582=(gconst19*r00);
IkReal x13583=((1.0)*gconst20);
IkReal x13584=(cj3*r20);
IkReal x13585=(r21*sj3);
IkReal x13586=(gconst19*gconst20*r01);
IkReal x13587=((1.0)*cj3*r22);
CheckValue<IkReal> x13588=IKPowWithIntegerCheck(IKsign((((r00*x13579*x13580))+(((-1.0)*x13582*x13583*x13585))+((r01*x13578*x13585))+(((-1.0)*gconst19*r01*x13580*x13583))+((r02*r22*sj3)))),-1);
if(!x13588.valid){
continue;
}
CheckValue<IkReal> x13589 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*r01*r22*x13583))+(((-1.0)*x13582*x13587)))),IkReal(((((-1.0)*x13582*x13583*x13584))+((r00*x13578*x13581))+((x13581*x13586))+(((-1.0)*r01*x13579*x13584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13588.value)))+(x13589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13590=IKsin(j4);
IkReal x13591=IKcos(j4);
IkReal x13592=(sj1*sj2);
IkReal x13593=(gconst20*sj3);
IkReal x13594=(cj3*gconst19);
IkReal x13595=(gconst19*sj3);
IkReal x13596=((1.0)*cj1);
IkReal x13597=(cj2*sj1);
IkReal x13598=(cj3*gconst20);
IkReal x13599=(cj2*x13596);
IkReal x13600=((1.0)*x13591);
IkReal x13601=((1.0)*x13590);
IkReal x13602=(gconst20*x13590);
IkReal x13603=((1.0)*x13598);
IkReal x13604=(x13591*x13595);
evalcond[0]=((((-1.0)*gconst19*r21*x13601))+(((-1.0)*r22*x13600))+((r20*x13602)));
evalcond[1]=(((r10*x13602))+(((-1.0)*r12*x13600))+(((-1.0)*gconst19*r11*x13601)));
evalcond[2]=((1.0)+(((-1.0)*r02*x13600))+(((-1.0)*gconst19*r01*x13601))+((r00*x13602)));
evalcond[3]=(((r01*x13593))+((r00*x13595))+(((-1.0)*cj3*r02*x13601))+((r01*x13591*x13594))+(((-1.0)*r00*x13598*x13600)));
evalcond[4]=((((-1.0)*r02*sj3*x13601))+(((-1.0)*r00*x13593*x13600))+(((-1.0)*r01*x13603))+(((-1.0)*r00*x13594))+((r01*x13604)));
evalcond[5]=(x13592+(((-1.0)*cj3*r12*x13601))+((r11*x13593))+((r10*x13595))+((r11*x13591*x13594))+(((-1.0)*x13599))+(((-1.0)*r10*x13598*x13600)));
evalcond[6]=((((-1.0)*cj3*r22*x13601))+((r21*x13593))+((r21*x13591*x13594))+(((-1.0)*x13597))+(((-1.0)*sj2*x13596))+(((-1.0)*r20*x13598*x13600))+((r20*x13595)));
evalcond[7]=(((r11*x13604))+x13597+((cj1*sj2))+(((-1.0)*r12*sj3*x13601))+(((-1.0)*r11*x13603))+(((-1.0)*r10*x13594))+(((-1.0)*r10*x13593*x13600)));
evalcond[8]=((((-1.0)*r21*x13603))+x13592+(((-1.0)*r22*sj3*x13601))+(((-1.0)*r20*x13594))+((r21*x13604))+(((-1.0)*r20*x13593*x13600))+(((-1.0)*x13599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13605=gconst20*gconst20;
IkReal x13606=gconst19*gconst19;
IkReal x13607=(cj3*r21);
IkReal x13608=((1.0)*r00);
IkReal x13609=(gconst19*gconst20);
IkReal x13610=(r21*sj3);
IkReal x13611=(r00*r20);
IkReal x13612=(r01*r20);
IkReal x13613=(r22*sj3);
CheckValue<IkReal> x13614=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13607*x13608*x13609))+((cj3*x13605*x13611))+(((-1.0)*cj3*x13609*x13612))+((cj3*r02*r22))+((r01*x13606*x13607)))),-1);
if(!x13614.valid){
continue;
}
CheckValue<IkReal> x13615 = IKatan2WithCheck(IkReal((((gconst20*r01*x13613))+((gconst19*r00*x13613)))),IkReal(((((-1.0)*x13606*x13608*x13610))+((sj3*x13605*x13612))+((sj3*x13609*x13611))+(((-1.0)*r01*x13609*x13610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13614.value)))+(x13615.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13616=IKsin(j4);
IkReal x13617=IKcos(j4);
IkReal x13618=(sj1*sj2);
IkReal x13619=(gconst20*sj3);
IkReal x13620=(cj3*gconst19);
IkReal x13621=(gconst19*sj3);
IkReal x13622=((1.0)*cj1);
IkReal x13623=(cj2*sj1);
IkReal x13624=(cj3*gconst20);
IkReal x13625=(cj2*x13622);
IkReal x13626=((1.0)*x13617);
IkReal x13627=((1.0)*x13616);
IkReal x13628=(gconst20*x13616);
IkReal x13629=((1.0)*x13624);
IkReal x13630=(x13617*x13621);
evalcond[0]=((((-1.0)*gconst19*r21*x13627))+(((-1.0)*r22*x13626))+((r20*x13628)));
evalcond[1]=(((r10*x13628))+(((-1.0)*gconst19*r11*x13627))+(((-1.0)*r12*x13626)));
evalcond[2]=((1.0)+(((-1.0)*gconst19*r01*x13627))+((r00*x13628))+(((-1.0)*r02*x13626)));
evalcond[3]=(((r01*x13617*x13620))+(((-1.0)*r00*x13624*x13626))+((r01*x13619))+(((-1.0)*cj3*r02*x13627))+((r00*x13621)));
evalcond[4]=((((-1.0)*r01*x13629))+(((-1.0)*r02*sj3*x13627))+(((-1.0)*r00*x13619*x13626))+(((-1.0)*r00*x13620))+((r01*x13630)));
evalcond[5]=(((r10*x13621))+(((-1.0)*cj3*r12*x13627))+x13618+(((-1.0)*r10*x13624*x13626))+((r11*x13617*x13620))+((r11*x13619))+(((-1.0)*x13625)));
evalcond[6]=(((r21*x13619))+((r21*x13617*x13620))+(((-1.0)*cj3*r22*x13627))+(((-1.0)*sj2*x13622))+((r20*x13621))+(((-1.0)*r20*x13624*x13626))+(((-1.0)*x13623)));
evalcond[7]=(((r11*x13630))+x13623+(((-1.0)*r10*x13620))+(((-1.0)*r12*sj3*x13627))+((cj1*sj2))+(((-1.0)*r11*x13629))+(((-1.0)*r10*x13619*x13626)));
evalcond[8]=(x13618+(((-1.0)*r20*x13619*x13626))+(((-1.0)*r22*sj3*x13627))+((r21*x13630))+(((-1.0)*x13625))+(((-1.0)*r21*x13629))+(((-1.0)*r20*x13620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13631 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13631.valid){
continue;
}
CheckValue<IkReal> x13632=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13631.value)+(((1.5707963267949)*(x13632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13633=IKsin(j4);
IkReal x13634=IKcos(j4);
IkReal x13635=(sj1*sj2);
IkReal x13636=(gconst20*sj3);
IkReal x13637=(cj3*gconst19);
IkReal x13638=(gconst19*sj3);
IkReal x13639=((1.0)*cj1);
IkReal x13640=(cj2*sj1);
IkReal x13641=(cj3*gconst20);
IkReal x13642=(cj2*x13639);
IkReal x13643=((1.0)*x13634);
IkReal x13644=((1.0)*x13633);
IkReal x13645=(gconst20*x13633);
IkReal x13646=((1.0)*x13641);
IkReal x13647=(x13634*x13638);
evalcond[0]=((((-1.0)*gconst19*r21*x13644))+((r20*x13645))+(((-1.0)*r22*x13643)));
evalcond[1]=((((-1.0)*r12*x13643))+(((-1.0)*gconst19*r11*x13644))+((r10*x13645)));
evalcond[2]=((1.0)+(((-1.0)*gconst19*r01*x13644))+((r00*x13645))+(((-1.0)*r02*x13643)));
evalcond[3]=((((-1.0)*cj3*r02*x13644))+((r01*x13634*x13637))+(((-1.0)*r00*x13641*x13643))+((r00*x13638))+((r01*x13636)));
evalcond[4]=((((-1.0)*r00*x13637))+(((-1.0)*r00*x13636*x13643))+(((-1.0)*r02*sj3*x13644))+((r01*x13647))+(((-1.0)*r01*x13646)));
evalcond[5]=(((r11*x13636))+((r10*x13638))+x13635+((r11*x13634*x13637))+(((-1.0)*x13642))+(((-1.0)*cj3*r12*x13644))+(((-1.0)*r10*x13641*x13643)));
evalcond[6]=((((-1.0)*sj2*x13639))+((r21*x13634*x13637))+(((-1.0)*cj3*r22*x13644))+((r21*x13636))+(((-1.0)*r20*x13641*x13643))+(((-1.0)*x13640))+((r20*x13638)));
evalcond[7]=(x13640+(((-1.0)*r10*x13636*x13643))+((cj1*sj2))+(((-1.0)*r11*x13646))+(((-1.0)*r10*x13637))+((r11*x13647))+(((-1.0)*r12*sj3*x13644)));
evalcond[8]=(x13635+(((-1.0)*r22*sj3*x13644))+(((-1.0)*r20*x13636*x13643))+(((-1.0)*x13642))+(((-1.0)*r20*x13637))+(((-1.0)*r21*x13646))+((r21*x13647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13648=((-1.0)*r11);
IkReal x13650 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13650)==0){
continue;
}
IkReal x13649=pow(x13650,-0.5);
CheckValue<IkReal> x13651 = IKatan2WithCheck(IkReal(x13648),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13651.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13651.value))));
IkReal gconst22=(x13648*x13649);
IkReal gconst23=((1.0)*r10*x13649);
CheckValue<IkReal> x13652 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13652.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13652.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13653=((-1.0)*r11);
CheckValue<IkReal> x13656 = IKatan2WithCheck(IkReal(x13653),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13656.valid){
continue;
}
IkReal x13654=((1.0)*(x13656.value));
IkReal x13655=x13649;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13654)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13654)));
IkReal gconst22=(x13653*x13655);
IkReal gconst23=((1.0)*r10*x13655);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13657=gconst23*gconst23;
IkReal x13658=gconst22*gconst22;
IkReal x13659=(r01*sj3);
IkReal x13660=(cj3*r00);
IkReal x13661=(cj3*r01);
IkReal x13662=(r00*sj3);
IkReal x13663=((1.0)*gconst22*gconst23);
IkReal x13664=(r20*x13657);
IkReal x13665=(r21*x13658);
CheckValue<IkReal> x13666 = IKatan2WithCheck(IkReal((((gconst22*r22*x13662))+((gconst23*r22*x13659)))),IkReal((((x13659*x13664))+(((-1.0)*x13662*x13665))+(((-1.0)*r21*x13659*x13663))+((gconst22*gconst23*r20*x13662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13666.valid){
continue;
}
CheckValue<IkReal> x13667=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13660*x13663))+((x13660*x13664))+(((-1.0)*r20*x13661*x13663))+((cj3*r02*r22))+((x13661*x13665)))),-1);
if(!x13667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13666.value)+(((1.5707963267949)*(x13667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13668=IKsin(j4);
IkReal x13669=IKcos(j4);
IkReal x13670=(sj1*sj2);
IkReal x13671=(gconst23*sj3);
IkReal x13672=(gconst22*r21);
IkReal x13673=(gconst22*sj3);
IkReal x13674=(gconst22*r01);
IkReal x13675=((1.0)*cj2);
IkReal x13676=((1.0)*cj3);
IkReal x13677=(cj1*sj2);
IkReal x13678=(cj3*gconst23);
IkReal x13679=(gconst22*r11);
IkReal x13680=(cj1*x13675);
IkReal x13681=((1.0)*x13669);
IkReal x13682=((1.0)*x13668);
IkReal x13683=(gconst23*x13668);
IkReal x13684=(cj3*x13669);
evalcond[0]=((((-1.0)*r22*x13681))+(((-1.0)*x13672*x13682))+((r20*x13683)));
evalcond[1]=((((-1.0)*x13679*x13682))+(((-1.0)*r12*x13681))+((r10*x13683)));
evalcond[2]=((1.0)+(((-1.0)*x13674*x13682))+((r00*x13683))+(((-1.0)*r02*x13681)));
evalcond[3]=((((-1.0)*gconst23*r00*x13669*x13676))+(((-1.0)*r02*x13668*x13676))+((r01*x13671))+((r00*x13673))+((x13674*x13684)));
evalcond[4]=(((r01*x13669*x13673))+(((-1.0)*r02*sj3*x13682))+(((-1.0)*gconst22*r00*x13676))+(((-1.0)*r00*x13671*x13681))+(((-1.0)*gconst23*r01*x13676)));
evalcond[5]=(((x13679*x13684))+x13670+(((-1.0)*gconst23*r10*x13669*x13676))+((r11*x13671))+(((-1.0)*x13680))+((r10*x13673))+(((-1.0)*r12*x13668*x13676)));
evalcond[6]=((((-1.0)*sj1*x13675))+(((-1.0)*r22*x13668*x13676))+((r20*x13673))+((r21*x13671))+(((-1.0)*x13677))+((x13672*x13684))+(((-1.0)*gconst23*r20*x13669*x13676)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r12*sj3*x13682))+x13677+(((-1.0)*gconst23*r11*x13676))+((r11*x13669*x13673))+(((-1.0)*gconst22*r10*x13676))+(((-1.0)*r10*x13671*x13681)));
evalcond[8]=(x13670+((sj3*x13669*x13672))+(((-1.0)*x13680))+(((-1.0)*gconst22*r20*x13676))+(((-1.0)*r20*x13671*x13681))+(((-1.0)*r22*sj3*x13682))+(((-1.0)*gconst23*r21*x13676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13685 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst22*r11))+((gconst23*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13685.valid){
continue;
}
CheckValue<IkReal> x13686=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13685.value)+(((1.5707963267949)*(x13686.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13687=IKsin(j4);
IkReal x13688=IKcos(j4);
IkReal x13689=(sj1*sj2);
IkReal x13690=(gconst23*sj3);
IkReal x13691=(gconst22*r21);
IkReal x13692=(gconst22*sj3);
IkReal x13693=(gconst22*r01);
IkReal x13694=((1.0)*cj2);
IkReal x13695=((1.0)*cj3);
IkReal x13696=(cj1*sj2);
IkReal x13697=(cj3*gconst23);
IkReal x13698=(gconst22*r11);
IkReal x13699=(cj1*x13694);
IkReal x13700=((1.0)*x13688);
IkReal x13701=((1.0)*x13687);
IkReal x13702=(gconst23*x13687);
IkReal x13703=(cj3*x13688);
evalcond[0]=((((-1.0)*r22*x13700))+(((-1.0)*x13691*x13701))+((r20*x13702)));
evalcond[1]=((((-1.0)*r12*x13700))+((r10*x13702))+(((-1.0)*x13698*x13701)));
evalcond[2]=((1.0)+((r00*x13702))+(((-1.0)*r02*x13700))+(((-1.0)*x13693*x13701)));
evalcond[3]=(((r00*x13692))+((r01*x13690))+((x13693*x13703))+(((-1.0)*r02*x13687*x13695))+(((-1.0)*gconst23*r00*x13688*x13695)));
evalcond[4]=(((r01*x13688*x13692))+(((-1.0)*gconst22*r00*x13695))+(((-1.0)*r00*x13690*x13700))+(((-1.0)*r02*sj3*x13701))+(((-1.0)*gconst23*r01*x13695)));
evalcond[5]=(x13689+(((-1.0)*x13699))+((r10*x13692))+(((-1.0)*r12*x13687*x13695))+((r11*x13690))+((x13698*x13703))+(((-1.0)*gconst23*r10*x13688*x13695)));
evalcond[6]=((((-1.0)*gconst23*r20*x13688*x13695))+(((-1.0)*r22*x13687*x13695))+((r20*x13692))+((r21*x13690))+(((-1.0)*sj1*x13694))+((x13691*x13703))+(((-1.0)*x13696)));
evalcond[7]=(((cj2*sj1))+x13696+((r11*x13688*x13692))+(((-1.0)*r10*x13690*x13700))+(((-1.0)*gconst22*r10*x13695))+(((-1.0)*gconst23*r11*x13695))+(((-1.0)*r12*sj3*x13701)));
evalcond[8]=(x13689+(((-1.0)*x13699))+(((-1.0)*r20*x13690*x13700))+(((-1.0)*gconst22*r20*x13695))+(((-1.0)*gconst23*r21*x13695))+((sj3*x13688*x13691))+(((-1.0)*r22*sj3*x13701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13704=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13704);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13704);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13705=(cj5*r00);
IkReal x13706=(r01*sj5);
j4eval[0]=(x13705+(((-1.0)*x13706)));
j4eval[1]=(((sj3*x13706))+(((-1.0)*sj3*x13705)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13707=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13707);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13707);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13708=(cj5*r00);
IkReal x13709=(r01*sj5);
j4eval[0]=(x13708+(((-1.0)*x13709)));
j4eval[1]=(((cj3*x13709))+(((-1.0)*cj3*x13708)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13710=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13710);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13710);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13711=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13711);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13711);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13712=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13712);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13712);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13713=((1.0)*sj1);
CheckValue<IkReal> x13714=IKPowWithIntegerCheck(r22,-1);
if(!x13714.valid){
continue;
}
CheckValue<IkReal> x13715=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13715.valid){
continue;
}
if( IKabs(((x13714.value)*(((((-1.0)*cj2*x13713))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13715.value)*(((((-1.0)*sj2*x13713))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13714.value)*(((((-1.0)*cj2*x13713))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13715.value)*(((((-1.0)*sj2*x13713))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13714.value)*(((((-1.0)*cj2*x13713))+(((-1.0)*cj1*sj2))))), ((x13715.value)*(((((-1.0)*sj2*x13713))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13716=IKsin(j4);
IkReal x13717=IKcos(j4);
IkReal x13718=(cj5*r00);
IkReal x13719=((1.0)*cj1);
IkReal x13720=(cj5*r10);
IkReal x13721=((1.0)*x13717);
IkReal x13722=(sj5*x13717);
IkReal x13723=((1.0)*sj5*x13716);
evalcond[0]=((-1.0)*r22*x13717);
evalcond[1]=(((x13716*x13720))+(((-1.0)*r11*x13723)));
evalcond[2]=(((r01*x13722))+(((-1.0)*x13718*x13721)));
evalcond[3]=((1.0)+(((-1.0)*r01*x13723))+((x13716*x13718)));
evalcond[4]=((((-1.0)*sj2*x13719))+(((-1.0)*r22*x13716))+(((-1.0)*cj2*sj1)));
evalcond[5]=(((r11*x13722))+(((-1.0)*cj2*x13719))+(((-1.0)*x13720*x13721))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13724=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13724.valid){
continue;
}
CheckValue<IkReal> x13725=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13725.valid){
continue;
}
if( IKabs(((-1.0)*(x13724.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13725.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13724.value)))+IKsqr(((x13725.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13724.value)), ((x13725.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13726=IKsin(j4);
IkReal x13727=IKcos(j4);
IkReal x13728=(cj5*r00);
IkReal x13729=((1.0)*cj1);
IkReal x13730=(cj5*r10);
IkReal x13731=((1.0)*x13727);
IkReal x13732=(sj5*x13727);
IkReal x13733=((1.0)*sj5*x13726);
evalcond[0]=((-1.0)*r22*x13727);
evalcond[1]=(((x13726*x13730))+(((-1.0)*r11*x13733)));
evalcond[2]=((((-1.0)*x13728*x13731))+((r01*x13732)));
evalcond[3]=((1.0)+((x13726*x13728))+(((-1.0)*r01*x13733)));
evalcond[4]=((((-1.0)*sj2*x13729))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x13726)));
evalcond[5]=((((-1.0)*cj2*x13729))+(((-1.0)*x13730*x13731))+((sj1*sj2))+((r11*x13732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13734=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13734);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13734);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13735=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13735);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13735);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13736=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x13736))+((cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x13736)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13737=((1.0)*sj5);
CheckValue<IkReal> x13738=IKPowWithIntegerCheck(((((-1.0)*r01*x13737))+((cj5*r00))),-1);
if(!x13738.valid){
continue;
}
CheckValue<IkReal> x13739=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x13737))),-1);
if(!x13739.valid){
continue;
}
if( IKabs(((-1.0)*(x13738.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13739.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13738.value)))+IKsqr(((x13739.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13738.value)), ((x13739.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13740=IKsin(j4);
IkReal x13741=IKcos(j4);
IkReal x13742=((1.0)*sj5);
IkReal x13743=(cj5*r00);
IkReal x13744=((1.0)*cj2);
IkReal x13745=(cj5*r10);
evalcond[0]=((-1.0)*r22*x13741);
evalcond[1]=((((-1.0)*r11*x13740*x13742))+((x13740*x13745)));
evalcond[2]=((((-1.0)*cj1*sj2))+((r22*x13740))+(((-1.0)*sj1*x13744)));
evalcond[3]=((((-1.0)*r01*x13741*x13742))+((x13741*x13743)));
evalcond[4]=((1.0)+(((-1.0)*r01*x13740*x13742))+((x13740*x13743)));
evalcond[5]=((((-1.0)*cj1*x13744))+(((-1.0)*r11*x13741*x13742))+((sj1*sj2))+((x13741*x13745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13746=IKPowWithIntegerCheck(r22,-1);
if(!x13746.valid){
continue;
}
CheckValue<IkReal> x13747=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x13747.valid){
continue;
}
if( IKabs(((x13746.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13747.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13746.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13747.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13746.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13747.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13748=IKsin(j4);
IkReal x13749=IKcos(j4);
IkReal x13750=((1.0)*sj5);
IkReal x13751=(cj5*r00);
IkReal x13752=((1.0)*cj2);
IkReal x13753=(cj5*r10);
evalcond[0]=((-1.0)*r22*x13749);
evalcond[1]=((((-1.0)*r11*x13748*x13750))+((x13748*x13753)));
evalcond[2]=((((-1.0)*sj1*x13752))+(((-1.0)*cj1*sj2))+((r22*x13748)));
evalcond[3]=(((x13749*x13751))+(((-1.0)*r01*x13749*x13750)));
evalcond[4]=((1.0)+(((-1.0)*r01*x13748*x13750))+((x13748*x13751)));
evalcond[5]=((((-1.0)*r11*x13749*x13750))+((sj1*sj2))+((x13749*x13753))+(((-1.0)*cj1*x13752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13754=((1.0)*r00);
CheckValue<IkReal> x13755=IKPowWithIntegerCheck(r22,-1);
if(!x13755.valid){
continue;
}
CheckValue<IkReal> x13756=IKPowWithIntegerCheck(sj3,-1);
if(!x13756.valid){
continue;
}
CheckValue<IkReal> x13757=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x13754))),-1);
if(!x13757.valid){
continue;
}
if( IKabs(((x13755.value)*(x13756.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13757.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x13754)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13755.value)*(x13756.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13757.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x13754))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13755.value)*(x13756.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13757.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x13754))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13758=IKsin(j4);
IkReal x13759=IKcos(j4);
IkReal x13760=(sj1*sj2);
IkReal x13761=(cj5*sj3);
IkReal x13762=((1.0)*r11);
IkReal x13763=(cj3*cj5);
IkReal x13764=((1.0)*r10);
IkReal x13765=(cj3*sj5);
IkReal x13766=((1.0)*cj1);
IkReal x13767=((1.0)*r01);
IkReal x13768=(sj3*sj5);
IkReal x13769=(cj2*sj1);
IkReal x13770=((1.0)*r00);
IkReal x13771=(cj2*x13766);
IkReal x13772=(sj5*x13758);
IkReal x13773=(r11*x13759);
IkReal x13774=(cj5*x13758);
IkReal x13775=(r01*x13759);
IkReal x13776=((1.0)*r22*x13758);
evalcond[0]=((-1.0)*r22*x13759);
evalcond[1]=(((r10*x13774))+(((-1.0)*x13762*x13772)));
evalcond[2]=((1.0)+((r00*x13774))+(((-1.0)*x13767*x13772)));
evalcond[3]=((((-1.0)*x13771))+x13760+(((-1.0)*sj3*x13776)));
evalcond[4]=((((-1.0)*x13769))+(((-1.0)*sj2*x13766))+(((-1.0)*cj3*x13776)));
evalcond[5]=((((-1.0)*x13759*x13763*x13770))+((r01*x13761))+((r00*x13768))+((x13765*x13775)));
evalcond[6]=(((x13768*x13775))+(((-1.0)*x13759*x13761*x13770))+(((-1.0)*x13765*x13770))+(((-1.0)*x13763*x13767)));
evalcond[7]=((((-1.0)*x13771))+((r11*x13761))+(((-1.0)*x13759*x13763*x13764))+x13760+((r10*x13768))+((x13765*x13773)));
evalcond[8]=(x13769+(((-1.0)*x13759*x13761*x13764))+((cj1*sj2))+((x13768*x13773))+(((-1.0)*x13764*x13765))+(((-1.0)*x13762*x13763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13777=((1.0)*sj5);
IkReal x13778=(cj5*r00);
CheckValue<IkReal> x13779=IKPowWithIntegerCheck(((((-1.0)*r01*x13777))+x13778),-1);
if(!x13779.valid){
continue;
}
CheckValue<IkReal> x13780=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*x13778))),-1);
if(!x13780.valid){
continue;
}
if( IKabs(((-1.0)*(x13779.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13780.value)*(((((-1.0)*r00*sj3*x13777))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13779.value)))+IKsqr(((x13780.value)*(((((-1.0)*r00*sj3*x13777))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13779.value)), ((x13780.value)*(((((-1.0)*r00*sj3*x13777))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13781=IKsin(j4);
IkReal x13782=IKcos(j4);
IkReal x13783=(sj1*sj2);
IkReal x13784=(cj5*sj3);
IkReal x13785=((1.0)*r11);
IkReal x13786=(cj3*cj5);
IkReal x13787=((1.0)*r10);
IkReal x13788=(cj3*sj5);
IkReal x13789=((1.0)*cj1);
IkReal x13790=((1.0)*r01);
IkReal x13791=(sj3*sj5);
IkReal x13792=(cj2*sj1);
IkReal x13793=((1.0)*r00);
IkReal x13794=(cj2*x13789);
IkReal x13795=(sj5*x13781);
IkReal x13796=(r11*x13782);
IkReal x13797=(cj5*x13781);
IkReal x13798=(r01*x13782);
IkReal x13799=((1.0)*r22*x13781);
evalcond[0]=((-1.0)*r22*x13782);
evalcond[1]=((((-1.0)*x13785*x13795))+((r10*x13797)));
evalcond[2]=((1.0)+(((-1.0)*x13790*x13795))+((r00*x13797)));
evalcond[3]=(x13783+(((-1.0)*sj3*x13799))+(((-1.0)*x13794)));
evalcond[4]=((((-1.0)*cj3*x13799))+(((-1.0)*sj2*x13789))+(((-1.0)*x13792)));
evalcond[5]=(((r01*x13784))+((r00*x13791))+(((-1.0)*x13782*x13786*x13793))+((x13788*x13798)));
evalcond[6]=(((x13791*x13798))+(((-1.0)*x13786*x13790))+(((-1.0)*x13782*x13784*x13793))+(((-1.0)*x13788*x13793)));
evalcond[7]=(x13783+(((-1.0)*x13794))+(((-1.0)*x13782*x13786*x13787))+((r11*x13784))+((r10*x13791))+((x13788*x13796)));
evalcond[8]=(((x13791*x13796))+x13792+((cj1*sj2))+(((-1.0)*x13785*x13786))+(((-1.0)*x13787*x13788))+(((-1.0)*x13782*x13784*x13787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13800=(r01*sj5);
IkReal x13801=(cj5*r00);
CheckValue<IkReal> x13802=IKPowWithIntegerCheck((x13801+(((-1.0)*x13800))),-1);
if(!x13802.valid){
continue;
}
CheckValue<IkReal> x13803=IKPowWithIntegerCheck((((sj3*x13800))+(((-1.0)*sj3*x13801))),-1);
if(!x13803.valid){
continue;
}
if( IKabs(((-1.0)*(x13802.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13803.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13802.value)))+IKsqr(((x13803.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13802.value)), ((x13803.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13804=IKsin(j4);
IkReal x13805=IKcos(j4);
IkReal x13806=(sj1*sj2);
IkReal x13807=(cj5*sj3);
IkReal x13808=((1.0)*r11);
IkReal x13809=(cj3*cj5);
IkReal x13810=((1.0)*r10);
IkReal x13811=(cj3*sj5);
IkReal x13812=((1.0)*cj1);
IkReal x13813=((1.0)*r01);
IkReal x13814=(sj3*sj5);
IkReal x13815=(cj2*sj1);
IkReal x13816=((1.0)*r00);
IkReal x13817=(cj2*x13812);
IkReal x13818=(sj5*x13804);
IkReal x13819=(r11*x13805);
IkReal x13820=(cj5*x13804);
IkReal x13821=(r01*x13805);
IkReal x13822=((1.0)*r22*x13804);
evalcond[0]=((-1.0)*r22*x13805);
evalcond[1]=(((r10*x13820))+(((-1.0)*x13808*x13818)));
evalcond[2]=((1.0)+((r00*x13820))+(((-1.0)*x13813*x13818)));
evalcond[3]=((((-1.0)*x13817))+x13806+(((-1.0)*sj3*x13822)));
evalcond[4]=((((-1.0)*sj2*x13812))+(((-1.0)*x13815))+(((-1.0)*cj3*x13822)));
evalcond[5]=(((r01*x13807))+((x13811*x13821))+((r00*x13814))+(((-1.0)*x13805*x13809*x13816)));
evalcond[6]=((((-1.0)*x13811*x13816))+((x13814*x13821))+(((-1.0)*x13809*x13813))+(((-1.0)*x13805*x13807*x13816)));
evalcond[7]=(((x13811*x13819))+((r10*x13814))+(((-1.0)*x13817))+((r11*x13807))+x13806+(((-1.0)*x13805*x13809*x13810)));
evalcond[8]=((((-1.0)*x13808*x13809))+x13815+(((-1.0)*x13810*x13811))+((cj1*sj2))+((x13814*x13819))+(((-1.0)*x13805*x13807*x13810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13823=cj5*cj5;
IkReal x13824=(cj3*r00);
IkReal x13825=(r01*sj3);
IkReal x13826=(r00*sj3);
IkReal x13827=(cj3*r01);
IkReal x13828=(cj5*r20*sj5);
IkReal x13829=(r21*x13823);
IkReal x13830=(r20*x13823);
IkReal x13831=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x13832 = IKatan2WithCheck(IkReal((((r22*sj5*x13826))+((cj5*r22*x13825)))),IkReal((((x13826*x13828))+((x13826*x13829))+((x13825*x13830))+(((-1.0)*x13825*x13831))+(((-1.0)*r21*x13826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13832.valid){
continue;
}
CheckValue<IkReal> x13833=IKPowWithIntegerCheck(IKsign((((r21*x13827))+(((-1.0)*x13824*x13831))+(((-1.0)*x13827*x13828))+(((-1.0)*x13827*x13829))+((x13824*x13830))+((cj3*r02*r22)))),-1);
if(!x13833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13832.value)+(((1.5707963267949)*(x13833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13834=IKsin(j4);
IkReal x13835=IKcos(j4);
IkReal x13836=(sj1*sj2);
IkReal x13837=(r11*sj5);
IkReal x13838=(cj5*sj3);
IkReal x13839=((1.0)*cj1);
IkReal x13840=(r21*sj5);
IkReal x13841=(r01*sj5);
IkReal x13842=(sj3*sj5);
IkReal x13843=(cj2*sj1);
IkReal x13844=(cj3*cj5);
IkReal x13845=(cj2*x13839);
IkReal x13846=((1.0)*x13835);
IkReal x13847=((1.0)*x13834);
IkReal x13848=(cj3*x13835);
IkReal x13849=((1.0)*x13844);
IkReal x13850=((1.0)*cj3*sj5);
IkReal x13851=(cj5*x13834);
IkReal x13852=(sj3*x13835);
evalcond[0]=((((-1.0)*r22*x13846))+((r20*x13851))+(((-1.0)*x13840*x13847)));
evalcond[1]=((((-1.0)*x13837*x13847))+(((-1.0)*r12*x13846))+((r10*x13851)));
evalcond[2]=((1.0)+((r00*x13851))+(((-1.0)*r02*x13846))+(((-1.0)*x13841*x13847)));
evalcond[3]=(((r01*x13838))+(((-1.0)*cj3*r02*x13847))+(((-1.0)*r00*x13844*x13846))+((x13841*x13848))+((r00*x13842)));
evalcond[4]=((((-1.0)*r00*x13838*x13846))+((x13841*x13852))+(((-1.0)*r02*sj3*x13847))+(((-1.0)*r01*x13849))+(((-1.0)*r00*x13850)));
evalcond[5]=(((x13837*x13848))+(((-1.0)*x13845))+x13836+(((-1.0)*cj3*r12*x13847))+((r11*x13838))+(((-1.0)*r10*x13844*x13846))+((r10*x13842)));
evalcond[6]=(((x13840*x13848))+(((-1.0)*cj3*r22*x13847))+(((-1.0)*sj2*x13839))+((r21*x13838))+(((-1.0)*r20*x13844*x13846))+((r20*x13842))+(((-1.0)*x13843)));
evalcond[7]=(x13843+((x13837*x13852))+(((-1.0)*r11*x13849))+((cj1*sj2))+(((-1.0)*r12*sj3*x13847))+(((-1.0)*r10*x13838*x13846))+(((-1.0)*r10*x13850)));
evalcond[8]=((((-1.0)*x13845))+((x13840*x13852))+x13836+(((-1.0)*r22*sj3*x13847))+(((-1.0)*r20*x13838*x13846))+(((-1.0)*r21*x13849))+(((-1.0)*r20*x13850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13853=((1.0)*sj5);
CheckValue<IkReal> x13854=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13853)))),-1);
if(!x13854.valid){
continue;
}
CheckValue<IkReal> x13855 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x13853)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13854.value)))+(x13855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13856=IKsin(j4);
IkReal x13857=IKcos(j4);
IkReal x13858=(sj1*sj2);
IkReal x13859=(r11*sj5);
IkReal x13860=(cj5*sj3);
IkReal x13861=((1.0)*cj1);
IkReal x13862=(r21*sj5);
IkReal x13863=(r01*sj5);
IkReal x13864=(sj3*sj5);
IkReal x13865=(cj2*sj1);
IkReal x13866=(cj3*cj5);
IkReal x13867=(cj2*x13861);
IkReal x13868=((1.0)*x13857);
IkReal x13869=((1.0)*x13856);
IkReal x13870=(cj3*x13857);
IkReal x13871=((1.0)*x13866);
IkReal x13872=((1.0)*cj3*sj5);
IkReal x13873=(cj5*x13856);
IkReal x13874=(sj3*x13857);
evalcond[0]=((((-1.0)*x13862*x13869))+(((-1.0)*r22*x13868))+((r20*x13873)));
evalcond[1]=((((-1.0)*r12*x13868))+(((-1.0)*x13859*x13869))+((r10*x13873)));
evalcond[2]=((1.0)+(((-1.0)*x13863*x13869))+(((-1.0)*r02*x13868))+((r00*x13873)));
evalcond[3]=(((r01*x13860))+((r00*x13864))+(((-1.0)*r00*x13866*x13868))+((x13863*x13870))+(((-1.0)*cj3*r02*x13869)));
evalcond[4]=((((-1.0)*r00*x13860*x13868))+(((-1.0)*r01*x13871))+(((-1.0)*r00*x13872))+(((-1.0)*r02*sj3*x13869))+((x13863*x13874)));
evalcond[5]=(((x13859*x13870))+x13858+((r11*x13860))+(((-1.0)*cj3*r12*x13869))+(((-1.0)*r10*x13866*x13868))+(((-1.0)*x13867))+((r10*x13864)));
evalcond[6]=((((-1.0)*cj3*r22*x13869))+(((-1.0)*x13865))+(((-1.0)*sj2*x13861))+((r21*x13860))+((r20*x13864))+((x13862*x13870))+(((-1.0)*r20*x13866*x13868)));
evalcond[7]=(((x13859*x13874))+x13865+((cj1*sj2))+(((-1.0)*r10*x13860*x13868))+(((-1.0)*r12*sj3*x13869))+(((-1.0)*r11*x13871))+(((-1.0)*r10*x13872)));
evalcond[8]=((((-1.0)*r20*x13872))+x13858+(((-1.0)*r20*x13860*x13868))+(((-1.0)*r22*sj3*x13869))+((x13862*x13874))+(((-1.0)*x13867))+(((-1.0)*r21*x13871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13875 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13875.valid){
continue;
}
CheckValue<IkReal> x13876=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13875.value)+(((1.5707963267949)*(x13876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13877=IKsin(j4);
IkReal x13878=IKcos(j4);
IkReal x13879=(sj1*sj2);
IkReal x13880=(r11*sj5);
IkReal x13881=(cj5*sj3);
IkReal x13882=((1.0)*cj1);
IkReal x13883=(r21*sj5);
IkReal x13884=(r01*sj5);
IkReal x13885=(sj3*sj5);
IkReal x13886=(cj2*sj1);
IkReal x13887=(cj3*cj5);
IkReal x13888=(cj2*x13882);
IkReal x13889=((1.0)*x13878);
IkReal x13890=((1.0)*x13877);
IkReal x13891=(cj3*x13878);
IkReal x13892=((1.0)*x13887);
IkReal x13893=((1.0)*cj3*sj5);
IkReal x13894=(cj5*x13877);
IkReal x13895=(sj3*x13878);
evalcond[0]=((((-1.0)*x13883*x13890))+((r20*x13894))+(((-1.0)*r22*x13889)));
evalcond[1]=((((-1.0)*x13880*x13890))+((r10*x13894))+(((-1.0)*r12*x13889)));
evalcond[2]=((1.0)+(((-1.0)*r02*x13889))+(((-1.0)*x13884*x13890))+((r00*x13894)));
evalcond[3]=((((-1.0)*r00*x13887*x13889))+((x13884*x13891))+((r00*x13885))+((r01*x13881))+(((-1.0)*cj3*r02*x13890)));
evalcond[4]=((((-1.0)*r02*sj3*x13890))+(((-1.0)*r01*x13892))+(((-1.0)*r00*x13893))+((x13884*x13895))+(((-1.0)*r00*x13881*x13889)));
evalcond[5]=(x13879+((x13880*x13891))+((r10*x13885))+(((-1.0)*cj3*r12*x13890))+((r11*x13881))+(((-1.0)*x13888))+(((-1.0)*r10*x13887*x13889)));
evalcond[6]=((((-1.0)*sj2*x13882))+((r20*x13885))+(((-1.0)*x13886))+(((-1.0)*cj3*r22*x13890))+((r21*x13881))+((x13883*x13891))+(((-1.0)*r20*x13887*x13889)));
evalcond[7]=((((-1.0)*r12*sj3*x13890))+x13886+((cj1*sj2))+(((-1.0)*r10*x13881*x13889))+((x13880*x13895))+(((-1.0)*r10*x13893))+(((-1.0)*r11*x13892)));
evalcond[8]=((((-1.0)*r22*sj3*x13890))+x13879+(((-1.0)*r21*x13892))+(((-1.0)*r20*x13893))+(((-1.0)*r20*x13881*x13889))+((x13883*x13895))+(((-1.0)*x13888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x13896=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13896;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x13896);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x13897=((1.0)*sj5);
IkReal x13898=((((-1.0)*r20*x13897))+(((-1.0)*cj5*r21)));
j4eval[0]=x13898;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x13897))))));
j4eval[2]=IKsign(x13898);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x13899=cj5*cj5;
IkReal x13900=(cj3*r00);
IkReal x13901=(cj3*r01);
IkReal x13902=((1.0)*cj5*sj5);
IkReal x13903=(((r20*x13899*x13900))+(((-1.0)*r20*x13901*x13902))+((r21*x13901))+(((-1.0)*r21*x13899*x13901))+(((-1.0)*r21*x13900*x13902))+((cj3*r02*r22)));
j4eval[0]=x13903;
j4eval[1]=IKsign(x13903);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13904=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13904;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x13904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13905=((1.0)*sj5);
IkReal x13906=((((-1.0)*cj5*r21))+(((-1.0)*r20*x13905)));
j4eval[0]=x13906;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x13905))))));
j4eval[2]=IKsign(x13906);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13907=cj5*cj5;
IkReal x13908=r01*r01;
IkReal x13909=(r01*sj5);
IkReal x13910=(cj5*r00);
IkReal x13911=((((2.0)*x13909*x13910))+(((-1.0)*x13907*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x13908))+((x13907*x13908)));
j4eval[0]=x13911;
j4eval[1]=IKsign(x13911);
j4eval[2]=((IKabs(((((-1.0)*x13910))+x13909)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13912=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13912);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13912);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13913=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13913);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13913);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13914=IKPowWithIntegerCheck(r22,-1);
if(!x13914.valid){
continue;
}
CheckValue<IkReal> x13915=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13915.valid){
continue;
}
if( IKabs(((x13914.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13915.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13914.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13915.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13914.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13915.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13916=IKsin(j4);
IkReal x13917=IKcos(j4);
IkReal x13918=((1.0)*cj1);
IkReal x13919=(sj5*x13917);
IkReal x13920=(cj5*x13916);
IkReal x13921=((1.0)*sj5*x13916);
IkReal x13922=((1.0)*cj5*x13917);
evalcond[0]=((-1.0)*r22*x13917);
evalcond[1]=(((r10*x13920))+(((-1.0)*r11*x13921)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x13916))+(((-1.0)*cj2*x13918)));
evalcond[3]=(((r01*x13919))+(((-1.0)*r00*x13922)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x13921))+((r00*x13920)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x13918))+(((-1.0)*r10*x13922))+((r11*x13919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13923=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13923.valid){
continue;
}
CheckValue<IkReal> x13924=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13924.valid){
continue;
}
if( IKabs(x13923.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13924.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13923.value)+IKsqr(((x13924.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13923.value, ((x13924.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13925=IKsin(j4);
IkReal x13926=IKcos(j4);
IkReal x13927=((1.0)*cj1);
IkReal x13928=(sj5*x13926);
IkReal x13929=(cj5*x13925);
IkReal x13930=((1.0)*sj5*x13925);
IkReal x13931=((1.0)*cj5*x13926);
evalcond[0]=((-1.0)*r22*x13926);
evalcond[1]=(((r10*x13929))+(((-1.0)*r11*x13930)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x13925))+(((-1.0)*cj2*x13927)));
evalcond[3]=(((r01*x13928))+(((-1.0)*r00*x13931)));
evalcond[4]=((-1.0)+((r00*x13929))+(((-1.0)*r01*x13930)));
evalcond[5]=((((-1.0)*sj2*x13927))+(((-1.0)*cj2*sj1))+(((-1.0)*r10*x13931))+((r11*x13928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13932=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13932);
rxp0_2=(py*r00);
rxp1_0=(r21*x13932);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13933=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13933);
rxp0_2=(py*r00);
rxp1_0=(r21*x13933);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13934=((1.0)*sj1);
CheckValue<IkReal> x13935=IKPowWithIntegerCheck(r12,-1);
if(!x13935.valid){
continue;
}
CheckValue<IkReal> x13936=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x13936.valid){
continue;
}
if( IKabs(((x13935.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13934)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13936.value)*(((((-1.0)*sj2*x13934))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13935.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13934))))))+IKsqr(((x13936.value)*(((((-1.0)*sj2*x13934))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13935.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13934))))), ((x13936.value)*(((((-1.0)*sj2*x13934))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13937=IKsin(j4);
IkReal x13938=IKcos(j4);
IkReal x13939=(r01*sj5);
IkReal x13940=((1.0)*cj1);
IkReal x13941=(r21*sj5);
IkReal x13942=((1.0)*x13937);
IkReal x13943=(cj5*x13937);
IkReal x13944=((1.0)*cj5*x13938);
evalcond[0]=((-1.0)*r12*x13938);
evalcond[1]=((((-1.0)*x13941*x13942))+((r20*x13943)));
evalcond[2]=(((x13938*x13939))+(((-1.0)*r00*x13944)));
evalcond[3]=((-1.0)+((r00*x13943))+(((-1.0)*x13939*x13942)));
evalcond[4]=((((-1.0)*r12*x13942))+(((-1.0)*sj2*x13940))+(((-1.0)*cj2*sj1)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r20*x13944))+((x13938*x13941))+(((-1.0)*cj2*x13940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13945=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13945.valid){
continue;
}
CheckValue<IkReal> x13946=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x13946.valid){
continue;
}
if( IKabs(x13945.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13946.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13945.value)+IKsqr(((x13946.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13945.value, ((x13946.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13947=IKsin(j4);
IkReal x13948=IKcos(j4);
IkReal x13949=(r01*sj5);
IkReal x13950=((1.0)*cj1);
IkReal x13951=(r21*sj5);
IkReal x13952=((1.0)*x13947);
IkReal x13953=(cj5*x13947);
IkReal x13954=((1.0)*cj5*x13948);
evalcond[0]=((-1.0)*r12*x13948);
evalcond[1]=((((-1.0)*x13951*x13952))+((r20*x13953)));
evalcond[2]=((((-1.0)*r00*x13954))+((x13948*x13949)));
evalcond[3]=((-1.0)+(((-1.0)*x13949*x13952))+((r00*x13953)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*r12*x13952))+(((-1.0)*sj2*x13950)));
evalcond[5]=(((x13948*x13951))+(((-1.0)*cj2*x13950))+((sj1*sj2))+(((-1.0)*r20*x13954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13955=cj5*cj5;
IkReal x13956=r01*r01;
IkReal x13957=(r01*sj5);
IkReal x13958=(cj5*r00);
CheckValue<IkReal> x13959=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x13955*(r00*r00)))+(((2.0)*x13957*x13958))+((x13955*x13956))+(((-1.0)*x13956)))),-1);
if(!x13959.valid){
continue;
}
CheckValue<IkReal> x13960 = IKatan2WithCheck(IkReal((x13957+(((-1.0)*x13958)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13959.value)))+(x13960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13961=IKsin(j4);
IkReal x13962=IKcos(j4);
IkReal x13963=(cj5*r00);
IkReal x13964=((1.0)*cj1);
IkReal x13965=(cj5*r20);
IkReal x13966=(cj5*r10);
IkReal x13967=((1.0)*x13962);
IkReal x13968=(sj5*x13962);
IkReal x13969=((1.0)*x13961);
IkReal x13970=(sj5*x13969);
evalcond[0]=((((-1.0)*r21*x13970))+(((-1.0)*r22*x13967))+((x13961*x13965)));
evalcond[1]=((((-1.0)*r12*x13967))+(((-1.0)*r11*x13970))+((x13961*x13966)));
evalcond[2]=((((-1.0)*r02*x13969))+(((-1.0)*x13963*x13967))+((r01*x13968)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13967))+((x13961*x13963))+(((-1.0)*r01*x13970)));
evalcond[4]=((((-1.0)*r22*x13969))+((sj1*sj2))+(((-1.0)*x13965*x13967))+(((-1.0)*cj2*x13964))+((r21*x13968)));
evalcond[5]=((((-1.0)*sj2*x13964))+(((-1.0)*r12*x13969))+(((-1.0)*cj2*sj1))+(((-1.0)*x13966*x13967))+((r11*x13968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13971=((1.0)*sj5);
CheckValue<IkReal> x13972=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13971))+(((-1.0)*cj5*r21)))),-1);
if(!x13972.valid){
continue;
}
CheckValue<IkReal> x13973 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x13971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13972.value)))+(x13973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13974=IKsin(j4);
IkReal x13975=IKcos(j4);
IkReal x13976=(cj5*r00);
IkReal x13977=((1.0)*cj1);
IkReal x13978=(cj5*r20);
IkReal x13979=(cj5*r10);
IkReal x13980=((1.0)*x13975);
IkReal x13981=(sj5*x13975);
IkReal x13982=((1.0)*x13974);
IkReal x13983=(sj5*x13982);
evalcond[0]=((((-1.0)*r21*x13983))+((x13974*x13978))+(((-1.0)*r22*x13980)));
evalcond[1]=(((x13974*x13979))+(((-1.0)*r12*x13980))+(((-1.0)*r11*x13983)));
evalcond[2]=(((r01*x13981))+(((-1.0)*x13976*x13980))+(((-1.0)*r02*x13982)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13980))+((x13974*x13976))+(((-1.0)*r01*x13983)));
evalcond[4]=((((-1.0)*x13978*x13980))+((r21*x13981))+((sj1*sj2))+(((-1.0)*cj2*x13977))+(((-1.0)*r22*x13982)));
evalcond[5]=((((-1.0)*x13979*x13980))+((r11*x13981))+(((-1.0)*sj2*x13977))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x13982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13984=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13984.valid){
continue;
}
CheckValue<IkReal> x13985 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13984.value)))+(x13985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13986=IKsin(j4);
IkReal x13987=IKcos(j4);
IkReal x13988=(cj5*r00);
IkReal x13989=((1.0)*cj1);
IkReal x13990=(cj5*r20);
IkReal x13991=(cj5*r10);
IkReal x13992=((1.0)*x13987);
IkReal x13993=(sj5*x13987);
IkReal x13994=((1.0)*x13986);
IkReal x13995=(sj5*x13994);
evalcond[0]=((((-1.0)*r21*x13995))+((x13986*x13990))+(((-1.0)*r22*x13992)));
evalcond[1]=((((-1.0)*r11*x13995))+(((-1.0)*r12*x13992))+((x13986*x13991)));
evalcond[2]=((((-1.0)*r02*x13994))+(((-1.0)*x13988*x13992))+((r01*x13993)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13992))+(((-1.0)*r01*x13995))+((x13986*x13988)));
evalcond[4]=((((-1.0)*cj2*x13989))+((sj1*sj2))+((r21*x13993))+(((-1.0)*x13990*x13992))+(((-1.0)*r22*x13994)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r11*x13993))+(((-1.0)*r12*x13994))+(((-1.0)*x13991*x13992))+(((-1.0)*sj2*x13989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13996=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13996;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x13996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13997=((1.0)*sj5);
IkReal x13998=((((-1.0)*r20*x13997))+(((-1.0)*cj5*r21)));
j4eval[0]=x13998;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x13997))))));
j4eval[2]=IKsign(x13998);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13999=cj5*cj5;
IkReal x14000=r01*r01;
IkReal x14001=(cj5*r00);
IkReal x14002=(r01*sj5);
IkReal x14003=((((-2.0)*x14001*x14002))+(r02*r02)+((x13999*(r00*r00)))+x14000+(((-1.0)*x13999*x14000)));
j4eval[0]=x14003;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x14002))+x14001))));
j4eval[2]=IKsign(x14003);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14004=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14004);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14004);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14005=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x14005))+((cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x14005)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14006=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14006);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14006);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14007=IKPowWithIntegerCheck(r22,-1);
if(!x14007.valid){
continue;
}
CheckValue<IkReal> x14008=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x14008.valid){
continue;
}
if( IKabs(((x14007.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14008.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14007.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14008.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14007.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14008.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14009=IKsin(j4);
IkReal x14010=IKcos(j4);
IkReal x14011=((1.0)*sj5);
IkReal x14012=(cj5*r00);
IkReal x14013=(cj5*r10);
IkReal x14014=((1.0)*cj1);
evalcond[0]=((-1.0)*r22*x14010);
evalcond[1]=((((-1.0)*cj2*x14014))+((sj1*sj2))+((r22*x14009)));
evalcond[2]=((((-1.0)*r11*x14009*x14011))+((x14009*x14013)));
evalcond[3]=(((x14010*x14012))+(((-1.0)*r01*x14010*x14011)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x14009*x14011))+((x14009*x14012)));
evalcond[5]=((((-1.0)*sj2*x14014))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*x14010*x14011))+((x14010*x14013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14015=((1.0)*sj5);
CheckValue<IkReal> x14016=IKPowWithIntegerCheck(((((-1.0)*r01*x14015))+((cj5*r00))),-1);
if(!x14016.valid){
continue;
}
CheckValue<IkReal> x14017=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x14015))),-1);
if(!x14017.valid){
continue;
}
if( IKabs(x14016.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14017.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14016.value)+IKsqr(((x14017.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14016.value, ((x14017.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14018=IKsin(j4);
IkReal x14019=IKcos(j4);
IkReal x14020=((1.0)*sj5);
IkReal x14021=(cj5*r00);
IkReal x14022=(cj5*r10);
IkReal x14023=((1.0)*cj1);
evalcond[0]=((-1.0)*r22*x14019);
evalcond[1]=(((r22*x14018))+((sj1*sj2))+(((-1.0)*cj2*x14023)));
evalcond[2]=((((-1.0)*r11*x14018*x14020))+((x14018*x14022)));
evalcond[3]=((((-1.0)*r01*x14019*x14020))+((x14019*x14021)));
evalcond[4]=((-1.0)+((x14018*x14021))+(((-1.0)*r01*x14018*x14020)));
evalcond[5]=((((-1.0)*r11*x14019*x14020))+(((-1.0)*cj2*sj1))+((x14019*x14022))+(((-1.0)*sj2*x14023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14024=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14024);
rxp0_2=(py*r00);
rxp1_0=(r21*x14024);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14025=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x14025))+((cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*x14025)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14026=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14026);
rxp0_2=(py*r00);
rxp1_0=(r21*x14026);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14027=IKPowWithIntegerCheck(r12,-1);
if(!x14027.valid){
continue;
}
CheckValue<IkReal> x14028=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14028.valid){
continue;
}
if( IKabs(((x14027.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14028.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14027.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x14028.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14027.value)*((((cj2*sj1))+((cj1*sj2))))), ((x14028.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14029=IKsin(j4);
IkReal x14030=IKcos(j4);
IkReal x14031=((1.0)*cj1);
IkReal x14032=(cj5*x14030);
IkReal x14033=((1.0)*r01*sj5);
IkReal x14034=(cj5*x14029);
IkReal x14035=((1.0)*r21*sj5);
evalcond[0]=((-1.0)*r12*x14030);
evalcond[1]=(((r20*x14034))+(((-1.0)*x14029*x14035)));
evalcond[2]=((((-1.0)*x14030*x14033))+((r00*x14032)));
evalcond[3]=((((-1.0)*cj2*sj1))+((r12*x14029))+(((-1.0)*sj2*x14031)));
evalcond[4]=((-1.0)+((r00*x14034))+(((-1.0)*x14029*x14033)));
evalcond[5]=((((-1.0)*cj2*x14031))+(((-1.0)*x14030*x14035))+((r20*x14032))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14036=((1.0)*sj5);
CheckValue<IkReal> x14037=IKPowWithIntegerCheck(((((-1.0)*r01*x14036))+((cj5*r00))),-1);
if(!x14037.valid){
continue;
}
CheckValue<IkReal> x14038=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*x14036))),-1);
if(!x14038.valid){
continue;
}
if( IKabs(x14037.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14038.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14037.value)+IKsqr(((x14038.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14037.value, ((x14038.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14039=IKsin(j4);
IkReal x14040=IKcos(j4);
IkReal x14041=((1.0)*cj1);
IkReal x14042=(cj5*x14040);
IkReal x14043=((1.0)*r01*sj5);
IkReal x14044=(cj5*x14039);
IkReal x14045=((1.0)*r21*sj5);
evalcond[0]=((-1.0)*r12*x14040);
evalcond[1]=(((r20*x14044))+(((-1.0)*x14039*x14045)));
evalcond[2]=(((r00*x14042))+(((-1.0)*x14040*x14043)));
evalcond[3]=((((-1.0)*cj2*sj1))+((r12*x14039))+(((-1.0)*sj2*x14041)));
evalcond[4]=((-1.0)+((r00*x14044))+(((-1.0)*x14039*x14043)));
evalcond[5]=((((-1.0)*cj2*x14041))+(((-1.0)*x14040*x14045))+((sj1*sj2))+((r20*x14042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14046=cj5*cj5;
IkReal x14047=r01*r01;
IkReal x14048=(r01*sj5);
IkReal x14049=(cj5*r00);
CheckValue<IkReal> x14050 = IKatan2WithCheck(IkReal(((((-1.0)*x14048))+x14049)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14050.valid){
continue;
}
CheckValue<IkReal> x14051=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14048*x14049))+(((-1.0)*x14046*x14047))+((x14046*(r00*r00)))+(r02*r02)+x14047)),-1);
if(!x14051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14050.value)+(((1.5707963267949)*(x14051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14052=IKcos(j4);
IkReal x14053=IKsin(j4);
IkReal x14054=((1.0)*cj1);
IkReal x14055=((1.0)*x14052);
IkReal x14056=(cj5*x14052);
IkReal x14057=(cj5*x14053);
IkReal x14058=((1.0)*sj5*x14053);
evalcond[0]=(((r00*x14056))+((r02*x14053))+(((-1.0)*r01*sj5*x14055)));
evalcond[1]=(((r20*x14057))+(((-1.0)*r21*x14058))+(((-1.0)*r22*x14055)));
evalcond[2]=((((-1.0)*r12*x14055))+((r10*x14057))+(((-1.0)*r11*x14058)));
evalcond[3]=((-1.0)+((r00*x14057))+(((-1.0)*r02*x14055))+(((-1.0)*r01*x14058)));
evalcond[4]=(((r20*x14056))+(((-1.0)*r21*sj5*x14055))+((sj1*sj2))+((r22*x14053))+(((-1.0)*cj2*x14054)));
evalcond[5]=((((-1.0)*r11*sj5*x14055))+((r12*x14053))+((r10*x14056))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x14054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14059=((1.0)*sj5);
CheckValue<IkReal> x14060 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x14059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14060.valid){
continue;
}
CheckValue<IkReal> x14061=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14059))+(((-1.0)*cj5*r21)))),-1);
if(!x14061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14060.value)+(((1.5707963267949)*(x14061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14062=IKcos(j4);
IkReal x14063=IKsin(j4);
IkReal x14064=((1.0)*cj1);
IkReal x14065=((1.0)*x14062);
IkReal x14066=(cj5*x14062);
IkReal x14067=(cj5*x14063);
IkReal x14068=((1.0)*sj5*x14063);
evalcond[0]=(((r02*x14063))+(((-1.0)*r01*sj5*x14065))+((r00*x14066)));
evalcond[1]=((((-1.0)*r22*x14065))+((r20*x14067))+(((-1.0)*r21*x14068)));
evalcond[2]=((((-1.0)*r11*x14068))+(((-1.0)*r12*x14065))+((r10*x14067)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x14068))+((r00*x14067))+(((-1.0)*r02*x14065)));
evalcond[4]=(((r22*x14063))+((sj1*sj2))+(((-1.0)*cj2*x14064))+((r20*x14066))+(((-1.0)*r21*sj5*x14065)));
evalcond[5]=((((-1.0)*sj2*x14064))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x14065))+((r10*x14066))+((r12*x14063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14069=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14069.valid){
continue;
}
CheckValue<IkReal> x14070 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14069.value)))+(x14070.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14071=IKcos(j4);
IkReal x14072=IKsin(j4);
IkReal x14073=((1.0)*cj1);
IkReal x14074=((1.0)*x14071);
IkReal x14075=(cj5*x14071);
IkReal x14076=(cj5*x14072);
IkReal x14077=((1.0)*sj5*x14072);
evalcond[0]=(((r02*x14072))+(((-1.0)*r01*sj5*x14074))+((r00*x14075)));
evalcond[1]=((((-1.0)*r22*x14074))+((r20*x14076))+(((-1.0)*r21*x14077)));
evalcond[2]=((((-1.0)*r12*x14074))+(((-1.0)*r11*x14077))+((r10*x14076)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x14077))+((r00*x14076))+(((-1.0)*r02*x14074)));
evalcond[4]=(((r22*x14072))+((sj1*sj2))+(((-1.0)*cj2*x14073))+((r20*x14075))+(((-1.0)*r21*sj5*x14074)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x14074))+((r10*x14075))+((r12*x14072))+(((-1.0)*sj2*x14073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14078=((-1.0)*r20);
IkReal x14080 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14080)==0){
continue;
}
IkReal x14079=pow(x14080,-0.5);
CheckValue<IkReal> x14081 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14078),IKFAST_ATAN2_MAGTHRESH);
if(!x14081.valid){
continue;
}
IkReal gconst30=((-1.0)*(x14081.value));
IkReal gconst31=(r21*x14079);
IkReal gconst32=(x14078*x14079);
CheckValue<IkReal> x14082 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14082.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14082.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14083=((-1.0)*r20);
IkReal x14084=x14079;
CheckValue<IkReal> x14086 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14083),IKFAST_ATAN2_MAGTHRESH);
if(!x14086.valid){
continue;
}
IkReal x14085=((-1.0)*(x14086.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14085;
IkReal gconst30=x14085;
IkReal gconst31=(r21*x14084);
IkReal gconst32=(x14083*x14084);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14087=((-1.0)*r20);
IkReal x14088=x14079;
CheckValue<IkReal> x14090 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14087),IKFAST_ATAN2_MAGTHRESH);
if(!x14090.valid){
continue;
}
IkReal x14089=((-1.0)*(x14090.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14089;
IkReal gconst30=x14089;
IkReal gconst31=(r21*x14088);
IkReal gconst32=(x14087*x14088);
CheckValue<IkReal> x14098=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14098.valid){
continue;
}
IkReal x14091=x14098.value;
IkReal x14092=(cj3*x14091);
IkReal x14093=(r11*x14092);
IkReal x14094=(r01*x14092);
IkReal x14095=(r00*x14092);
IkReal x14096=(r10*x14092);
IkReal x14097=(r20*r21*x14092);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*r20*r21*x14094))+((r00*r20*r21*x14093))+((r01*x14093*(r21*r21)))+((r10*x14095*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14099=((-1.0)*r20);
IkReal x14100=x14079;
CheckValue<IkReal> x14102 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14099),IKFAST_ATAN2_MAGTHRESH);
if(!x14102.valid){
continue;
}
IkReal x14101=((-1.0)*(x14102.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14101;
IkReal gconst30=x14101;
IkReal gconst31=(r21*x14100);
IkReal gconst32=(x14099*x14100);
CheckValue<IkReal> x14110=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14110.valid){
continue;
}
IkReal x14103=x14110.value;
IkReal x14104=(sj3*x14103);
IkReal x14105=(r11*x14104);
IkReal x14106=(r00*x14104);
IkReal x14107=(r01*x14104);
IkReal x14108=(r10*x14104);
IkReal x14109=(r20*r21*x14104);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x14107))+((r01*x14105*(r21*r21)))+((r10*x14106*(r20*r20)))+((r00*r20*r21*x14105))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14111=((-1.0)*r20);
IkReal x14112=x14079;
CheckValue<IkReal> x14114 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14111),IKFAST_ATAN2_MAGTHRESH);
if(!x14114.valid){
continue;
}
IkReal x14113=((-1.0)*(x14114.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14113;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst30=x14113;
IkReal gconst31=(r21*x14112);
IkReal gconst32=(x14111*x14112);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x14115=((-1.0)*r20);
IkReal x14116=x14079;
CheckValue<IkReal> x14118 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14115),IKFAST_ATAN2_MAGTHRESH);
if(!x14118.valid){
continue;
}
IkReal x14117=((-1.0)*(x14118.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14117;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst30=x14117;
IkReal gconst31=(r21*x14116);
IkReal gconst32=(x14115*x14116);
IkReal x14119=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x14123=IKPowWithIntegerCheck(x14119,-1);
if(!x14123.valid){
continue;
}
IkReal x14120=x14123.value;
IkReal x14121=((1.0)*x14120);
IkReal x14122=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x14120))+(((-1.0)*x14121*(r00*r00)*(r20*r20)))+(((-1.0)*x14121*(r01*r01)*(r21*r21))));
j4eval[0]=x14122;
j4eval[1]=IKsign(x14122);
j4eval[2]=r02;
j4eval[3]=x14119;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14124=((-1.0)*r20);
IkReal x14125=x14079;
CheckValue<IkReal> x14127 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14124),IKFAST_ATAN2_MAGTHRESH);
if(!x14127.valid){
continue;
}
IkReal x14126=((-1.0)*(x14127.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14126;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst30=x14126;
IkReal gconst31=(r21*x14125);
IkReal gconst32=(x14124*x14125);
IkReal x14128=r22*r22;
IkReal x14129=(cj1*cj2*r12);
IkReal x14130=(r12*sj1*sj2);
CheckValue<IkReal> x14134=IKPowWithIntegerCheck(((-1.0)+x14128),-1);
if(!x14134.valid){
continue;
}
IkReal x14131=x14134.value;
if((((1.0)+(((-1.0)*x14128)))) < -0.00001)
continue;
IkReal x14132=IKsqrt(((1.0)+(((-1.0)*x14128))));
IkReal x14133=(r22*x14131*x14132);
j4eval[0]=((IKabs(((((-1.0)*x14129*x14133))+((x14130*x14133)))))+(IKabs(((((-1.0)*x14130))+x14129))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14135=(gconst32*r10);
IkReal x14136=(cj1*cj2);
IkReal x14137=(gconst31*r11);
IkReal x14138=((1.0)*sj1*sj2);
CheckValue<IkReal> x14139 = IKatan2WithCheck(IkReal((((r12*x14136))+(((-1.0)*r12*x14138)))),IkReal(((((-1.0)*x14136*x14137))+(((-1.0)*x14135*x14138))+((x14135*x14136))+((sj1*sj2*x14137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14139.valid){
continue;
}
CheckValue<IkReal> x14140=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x14135*x14135)+(((-2.0)*x14135*x14137))+(x14137*x14137))),-1);
if(!x14140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14139.value)+(((1.5707963267949)*(x14140.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14141=IKsin(j4);
IkReal x14142=IKcos(j4);
IkReal x14143=(gconst32*r20);
IkReal x14144=((1.0)*sj1);
IkReal x14145=((1.0)*x14142);
IkReal x14146=(gconst31*x14142);
IkReal x14147=(gconst32*x14141);
IkReal x14148=((1.0)*x14141);
IkReal x14149=(gconst31*x14148);
evalcond[0]=((((-1.0)*r22*x14145))+(((-1.0)*r21*x14149))+((x14141*x14143)));
evalcond[1]=(((r10*x14147))+(((-1.0)*r11*x14149))+(((-1.0)*r12*x14145)));
evalcond[2]=(((r01*x14146))+(((-1.0)*gconst32*r00*x14145))+(((-1.0)*r02*x14148)));
evalcond[3]=((-1.0)+((r00*x14147))+(((-1.0)*r02*x14145))+(((-1.0)*r01*x14149)));
evalcond[4]=((((-1.0)*gconst32*r10*x14145))+(((-1.0)*r12*x14148))+((cj1*cj2))+((r11*x14146))+(((-1.0)*sj2*x14144)));
evalcond[5]=((((-1.0)*r22*x14148))+(((-1.0)*cj1*sj2))+((r21*x14146))+(((-1.0)*x14143*x14145))+(((-1.0)*cj2*x14144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14150=(gconst32*r00);
IkReal x14151=(gconst31*r01);
CheckValue<IkReal> x14152 = IKatan2WithCheck(IkReal((x14151+(((-1.0)*x14150)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14152.valid){
continue;
}
CheckValue<IkReal> x14153=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x14150*x14150)))+(((2.0)*x14150*x14151))+(((-1.0)*(x14151*x14151))))),-1);
if(!x14153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14152.value)+(((1.5707963267949)*(x14153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14154=IKsin(j4);
IkReal x14155=IKcos(j4);
IkReal x14156=(gconst32*r20);
IkReal x14157=((1.0)*sj1);
IkReal x14158=((1.0)*x14155);
IkReal x14159=(gconst31*x14155);
IkReal x14160=(gconst32*x14154);
IkReal x14161=((1.0)*x14154);
IkReal x14162=(gconst31*x14161);
evalcond[0]=((((-1.0)*r22*x14158))+((x14154*x14156))+(((-1.0)*r21*x14162)));
evalcond[1]=(((r10*x14160))+(((-1.0)*r12*x14158))+(((-1.0)*r11*x14162)));
evalcond[2]=((((-1.0)*r02*x14161))+((r01*x14159))+(((-1.0)*gconst32*r00*x14158)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x14162))+(((-1.0)*r02*x14158))+((r00*x14160)));
evalcond[4]=((((-1.0)*gconst32*r10*x14158))+(((-1.0)*r12*x14161))+((r11*x14159))+(((-1.0)*sj2*x14157))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x14156*x14158))+(((-1.0)*r22*x14161))+(((-1.0)*cj1*sj2))+((r21*x14159))+(((-1.0)*cj2*x14157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14163=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x14163.valid){
continue;
}
CheckValue<IkReal> x14164 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14163.value)))+(x14164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14165=IKsin(j4);
IkReal x14166=IKcos(j4);
IkReal x14167=(gconst32*r20);
IkReal x14168=((1.0)*sj1);
IkReal x14169=((1.0)*x14166);
IkReal x14170=(gconst31*x14166);
IkReal x14171=(gconst32*x14165);
IkReal x14172=((1.0)*x14165);
IkReal x14173=(gconst31*x14172);
evalcond[0]=((((-1.0)*r22*x14169))+((x14165*x14167))+(((-1.0)*r21*x14173)));
evalcond[1]=((((-1.0)*r12*x14169))+((r10*x14171))+(((-1.0)*r11*x14173)));
evalcond[2]=(((r01*x14170))+(((-1.0)*r02*x14172))+(((-1.0)*gconst32*r00*x14169)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14169))+((r00*x14171))+(((-1.0)*r01*x14173)));
evalcond[4]=(((r11*x14170))+(((-1.0)*gconst32*r10*x14169))+(((-1.0)*sj2*x14168))+((cj1*cj2))+(((-1.0)*r12*x14172)));
evalcond[5]=(((r21*x14170))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x14172))+(((-1.0)*x14167*x14169))+(((-1.0)*cj2*x14168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14174=((-1.0)*r20);
IkReal x14175=x14079;
CheckValue<IkReal> x14177 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14174),IKFAST_ATAN2_MAGTHRESH);
if(!x14177.valid){
continue;
}
IkReal x14176=((-1.0)*(x14177.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14176;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst30=x14176;
IkReal gconst31=(r21*x14175);
IkReal gconst32=(x14174*x14175);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14178=((-1.0)*r20);
IkReal x14179=x14079;
CheckValue<IkReal> x14181 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14178),IKFAST_ATAN2_MAGTHRESH);
if(!x14181.valid){
continue;
}
IkReal x14180=((-1.0)*(x14181.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14180;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst30=x14180;
IkReal gconst31=(r21*x14179);
IkReal gconst32=(x14178*x14179);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14182=((-1.0)*r20);
IkReal x14183=x14079;
CheckValue<IkReal> x14185 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14182),IKFAST_ATAN2_MAGTHRESH);
if(!x14185.valid){
continue;
}
IkReal x14184=((-1.0)*(x14185.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14184;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst30=x14184;
IkReal gconst31=(r21*x14183);
IkReal gconst32=(x14182*x14183);
IkReal x14186=r22*r22;
IkReal x14187=(cj1*r02*sj2);
IkReal x14188=(cj2*r02*sj1);
CheckValue<IkReal> x14192=IKPowWithIntegerCheck(((-1.0)+x14186),-1);
if(!x14192.valid){
continue;
}
IkReal x14189=x14192.value;
if((((1.0)+(((-1.0)*x14186)))) < -0.00001)
continue;
IkReal x14190=IKsqrt(((1.0)+(((-1.0)*x14186))));
IkReal x14191=(r22*x14189*x14190);
j4eval[0]=((IKabs((((x14187*x14191))+((x14188*x14191)))))+(IKabs((x14188+x14187))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14193=((1.0)*gconst32);
IkReal x14194=(gconst31*r01);
IkReal x14195=(cj1*sj2);
IkReal x14196=(cj2*sj1);
CheckValue<IkReal> x14197 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x14193*x14196))+(((-1.0)*r00*x14193*x14195))+((x14194*x14196))+((x14194*x14195)))),IkReal((((r02*x14195))+((r02*x14196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14197.valid){
continue;
}
CheckValue<IkReal> x14198=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*r10))+(((-1.0)*r11*x14193)))),-1);
if(!x14198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14197.value)+(((1.5707963267949)*(x14198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14199=IKcos(j4);
IkReal x14200=IKsin(j4);
IkReal x14201=(gconst31*r21);
IkReal x14202=((1.0)*sj1);
IkReal x14203=(gconst31*r01);
IkReal x14204=(gconst31*r11);
IkReal x14205=((1.0)*x14199);
IkReal x14206=((1.0)*x14200);
IkReal x14207=(gconst32*x14200);
IkReal x14208=(gconst32*x14199);
evalcond[0]=(((r02*x14200))+((r00*x14208))+(((-1.0)*x14203*x14205)));
evalcond[1]=(((r20*x14207))+(((-1.0)*x14201*x14206))+(((-1.0)*r22*x14205)));
evalcond[2]=(((r10*x14207))+(((-1.0)*x14204*x14206))+(((-1.0)*r12*x14205)));
evalcond[3]=((-1.0)+((r00*x14207))+(((-1.0)*r02*x14205))+(((-1.0)*x14203*x14206)));
evalcond[4]=((((-1.0)*sj2*x14202))+((r10*x14208))+(((-1.0)*x14204*x14205))+((cj1*cj2))+((r12*x14200)));
evalcond[5]=((((-1.0)*cj2*x14202))+((r20*x14208))+(((-1.0)*cj1*sj2))+(((-1.0)*x14201*x14205))+((r22*x14200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14209=(gconst32*r00);
IkReal x14210=(gconst31*r01);
CheckValue<IkReal> x14211 = IKatan2WithCheck(IkReal(((((-1.0)*x14210))+x14209)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14211.valid){
continue;
}
CheckValue<IkReal> x14212=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14209*x14210))+(r02*r02)+(x14209*x14209)+(x14210*x14210))),-1);
if(!x14212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14211.value)+(((1.5707963267949)*(x14212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14213=IKcos(j4);
IkReal x14214=IKsin(j4);
IkReal x14215=(gconst31*r21);
IkReal x14216=((1.0)*sj1);
IkReal x14217=(gconst31*r01);
IkReal x14218=(gconst31*r11);
IkReal x14219=((1.0)*x14213);
IkReal x14220=((1.0)*x14214);
IkReal x14221=(gconst32*x14214);
IkReal x14222=(gconst32*x14213);
evalcond[0]=((((-1.0)*x14217*x14219))+((r00*x14222))+((r02*x14214)));
evalcond[1]=(((r20*x14221))+(((-1.0)*x14215*x14220))+(((-1.0)*r22*x14219)));
evalcond[2]=((((-1.0)*r12*x14219))+((r10*x14221))+(((-1.0)*x14218*x14220)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14219))+((r00*x14221))+(((-1.0)*x14217*x14220)));
evalcond[4]=(((r12*x14214))+((r10*x14222))+(((-1.0)*x14218*x14219))+((cj1*cj2))+(((-1.0)*sj2*x14216)));
evalcond[5]=((((-1.0)*x14215*x14219))+((r20*x14222))+((r22*x14214))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x14216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14223=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x14223.valid){
continue;
}
CheckValue<IkReal> x14224 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14223.value)))+(x14224.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14225=IKcos(j4);
IkReal x14226=IKsin(j4);
IkReal x14227=(gconst31*r21);
IkReal x14228=((1.0)*sj1);
IkReal x14229=(gconst31*r01);
IkReal x14230=(gconst31*r11);
IkReal x14231=((1.0)*x14225);
IkReal x14232=((1.0)*x14226);
IkReal x14233=(gconst32*x14226);
IkReal x14234=(gconst32*x14225);
evalcond[0]=(((r02*x14226))+(((-1.0)*x14229*x14231))+((r00*x14234)));
evalcond[1]=((((-1.0)*x14227*x14232))+((r20*x14233))+(((-1.0)*r22*x14231)));
evalcond[2]=(((r10*x14233))+(((-1.0)*r12*x14231))+(((-1.0)*x14230*x14232)));
evalcond[3]=((-1.0)+(((-1.0)*x14229*x14232))+(((-1.0)*r02*x14231))+((r00*x14233)));
evalcond[4]=(((r10*x14234))+((cj1*cj2))+(((-1.0)*x14230*x14231))+((r12*x14226))+(((-1.0)*sj2*x14228)));
evalcond[5]=((((-1.0)*x14227*x14231))+((r20*x14234))+(((-1.0)*cj1*sj2))+((r22*x14226))+(((-1.0)*cj2*x14228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14235=((-1.0)*r20);
IkReal x14236=x14079;
CheckValue<IkReal> x14238 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14235),IKFAST_ATAN2_MAGTHRESH);
if(!x14238.valid){
continue;
}
IkReal x14237=((-1.0)*(x14238.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14237;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst30=x14237;
IkReal gconst31=(r21*x14236);
IkReal gconst32=(x14235*x14236);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x14239=((-1.0)*r20);
IkReal x14240=x14079;
CheckValue<IkReal> x14242 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14239),IKFAST_ATAN2_MAGTHRESH);
if(!x14242.valid){
continue;
}
IkReal x14241=((-1.0)*(x14242.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14241;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst30=x14241;
IkReal gconst31=(r21*x14240);
IkReal gconst32=(x14239*x14240);
IkReal x14243=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x14247=IKPowWithIntegerCheck(x14243,-1);
if(!x14247.valid){
continue;
}
IkReal x14244=x14247.value;
IkReal x14245=((1.0)*x14244);
IkReal x14246=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x14244))+(((-1.0)*x14245*(r01*r01)*(r21*r21)))+(((-1.0)*x14245*(r00*r00)*(r20*r20))));
j4eval[0]=x14246;
j4eval[1]=IKsign(x14246);
j4eval[2]=r02;
j4eval[3]=x14243;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14248=((-1.0)*r20);
IkReal x14249=x14079;
CheckValue<IkReal> x14251 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14248),IKFAST_ATAN2_MAGTHRESH);
if(!x14251.valid){
continue;
}
IkReal x14250=((-1.0)*(x14251.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14250;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst30=x14250;
IkReal gconst31=(r21*x14249);
IkReal gconst32=(x14248*x14249);
IkReal x14252=r22*r22;
IkReal x14253=(r02*sj1*sj2);
CheckValue<IkReal> x14258=IKPowWithIntegerCheck(((-1.0)+x14252),-1);
if(!x14258.valid){
continue;
}
IkReal x14254=x14258.value;
IkReal x14255=((1.0)*cj1*cj2*r02);
if((((1.0)+(((-1.0)*x14252)))) < -0.00001)
continue;
IkReal x14256=IKsqrt(((1.0)+(((-1.0)*x14252))));
IkReal x14257=(r22*x14254*x14256);
j4eval[0]=((IKabs(((((-1.0)*x14255*x14257))+((x14253*x14257)))))+(IKabs(((((-1.0)*x14255))+x14253))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14259=((1.0)*gconst32);
IkReal x14260=(sj1*sj2);
IkReal x14261=((1.0)*gconst31);
IkReal x14262=(cj1*cj2);
CheckValue<IkReal> x14263 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x14259*x14260))+(((-1.0)*r01*x14261*x14262))+((gconst31*r01*x14260))+((gconst32*r00*x14262)))),IkReal(((((-1.0)*r02*x14262))+((r02*x14260)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14263.valid){
continue;
}
CheckValue<IkReal> x14264=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x14261))+(((-1.0)*r11*x14259)))),-1);
if(!x14264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14263.value)+(((1.5707963267949)*(x14264.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14265=IKsin(j4);
IkReal x14266=IKcos(j4);
IkReal x14267=(gconst32*r20);
IkReal x14268=((1.0)*cj2);
IkReal x14269=((1.0)*x14266);
IkReal x14270=(gconst31*x14266);
IkReal x14271=(gconst32*x14265);
IkReal x14272=((1.0)*x14265);
IkReal x14273=(gconst31*x14272);
evalcond[0]=((((-1.0)*r22*x14269))+((x14265*x14267))+(((-1.0)*r21*x14273)));
evalcond[1]=((((-1.0)*r12*x14269))+(((-1.0)*r11*x14273))+((r10*x14271)));
evalcond[2]=((((-1.0)*r02*x14272))+((r01*x14270))+(((-1.0)*gconst32*r00*x14269)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14269))+(((-1.0)*r01*x14273))+((r00*x14271)));
evalcond[4]=(((r21*x14270))+((sj1*sj2))+(((-1.0)*r22*x14272))+(((-1.0)*cj1*x14268))+(((-1.0)*x14267*x14269)));
evalcond[5]=((((-1.0)*sj1*x14268))+(((-1.0)*cj1*sj2))+((r11*x14270))+(((-1.0)*r12*x14272))+(((-1.0)*gconst32*r10*x14269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14274=(gconst32*r00);
IkReal x14275=(gconst31*r01);
CheckValue<IkReal> x14276 = IKatan2WithCheck(IkReal(((((-1.0)*x14274))+x14275)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14276.valid){
continue;
}
CheckValue<IkReal> x14277=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x14275*x14275)))+(((2.0)*x14274*x14275))+(((-1.0)*(x14274*x14274))))),-1);
if(!x14277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14276.value)+(((1.5707963267949)*(x14277.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14278=IKsin(j4);
IkReal x14279=IKcos(j4);
IkReal x14280=(gconst32*r20);
IkReal x14281=((1.0)*cj2);
IkReal x14282=((1.0)*x14279);
IkReal x14283=(gconst31*x14279);
IkReal x14284=(gconst32*x14278);
IkReal x14285=((1.0)*x14278);
IkReal x14286=(gconst31*x14285);
evalcond[0]=((((-1.0)*r22*x14282))+((x14278*x14280))+(((-1.0)*r21*x14286)));
evalcond[1]=(((r10*x14284))+(((-1.0)*r11*x14286))+(((-1.0)*r12*x14282)));
evalcond[2]=((((-1.0)*gconst32*r00*x14282))+((r01*x14283))+(((-1.0)*r02*x14285)));
evalcond[3]=((-1.0)+((r00*x14284))+(((-1.0)*r02*x14282))+(((-1.0)*r01*x14286)));
evalcond[4]=((((-1.0)*r22*x14285))+((r21*x14283))+(((-1.0)*x14280*x14282))+((sj1*sj2))+(((-1.0)*cj1*x14281)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r12*x14285))+((r11*x14283))+(((-1.0)*sj1*x14281))+(((-1.0)*gconst32*r10*x14282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14287=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x14287.valid){
continue;
}
CheckValue<IkReal> x14288 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14287.value)))+(x14288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14289=IKsin(j4);
IkReal x14290=IKcos(j4);
IkReal x14291=(gconst32*r20);
IkReal x14292=((1.0)*cj2);
IkReal x14293=((1.0)*x14290);
IkReal x14294=(gconst31*x14290);
IkReal x14295=(gconst32*x14289);
IkReal x14296=((1.0)*x14289);
IkReal x14297=(gconst31*x14296);
evalcond[0]=(((x14289*x14291))+(((-1.0)*r22*x14293))+(((-1.0)*r21*x14297)));
evalcond[1]=(((r10*x14295))+(((-1.0)*r12*x14293))+(((-1.0)*r11*x14297)));
evalcond[2]=(((r01*x14294))+(((-1.0)*r02*x14296))+(((-1.0)*gconst32*r00*x14293)));
evalcond[3]=((-1.0)+((r00*x14295))+(((-1.0)*r02*x14293))+(((-1.0)*r01*x14297)));
evalcond[4]=((((-1.0)*r22*x14296))+((r21*x14294))+((sj1*sj2))+(((-1.0)*x14291*x14293))+(((-1.0)*cj1*x14292)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r12*x14296))+((r11*x14294))+(((-1.0)*gconst32*r10*x14293))+(((-1.0)*sj1*x14292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14298=((-1.0)*r20);
IkReal x14299=x14079;
CheckValue<IkReal> x14301 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14298),IKFAST_ATAN2_MAGTHRESH);
if(!x14301.valid){
continue;
}
IkReal x14300=((-1.0)*(x14301.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14300;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst30=x14300;
IkReal gconst31=(r21*x14299);
IkReal gconst32=(x14298*x14299);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14302=((-1.0)*r20);
IkReal x14303=x14079;
CheckValue<IkReal> x14305 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14302),IKFAST_ATAN2_MAGTHRESH);
if(!x14305.valid){
continue;
}
IkReal x14304=((-1.0)*(x14305.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14304;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst30=x14304;
IkReal gconst31=(r21*x14303);
IkReal gconst32=(x14302*x14303);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14306=((-1.0)*r20);
IkReal x14307=x14079;
CheckValue<IkReal> x14309 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14306),IKFAST_ATAN2_MAGTHRESH);
if(!x14309.valid){
continue;
}
IkReal x14308=((-1.0)*(x14309.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14308;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst30=x14308;
IkReal gconst31=(r21*x14307);
IkReal gconst32=(x14306*x14307);
IkReal x14310=r22*r22;
IkReal x14311=(cj1*cj2*r02);
CheckValue<IkReal> x14316=IKPowWithIntegerCheck(((-1.0)+x14310),-1);
if(!x14316.valid){
continue;
}
IkReal x14312=x14316.value;
IkReal x14313=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x14310)))) < -0.00001)
continue;
IkReal x14314=IKsqrt(((1.0)+(((-1.0)*x14310))));
IkReal x14315=(r22*x14312*x14314);
j4eval[0]=((IKabs((((x14311*x14315))+(((-1.0)*x14313*x14315)))))+(IKabs(((((-1.0)*x14313))+x14311))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14317=((1.0)*gconst32);
IkReal x14318=(gconst31*r01);
IkReal x14319=(cj1*cj2);
IkReal x14320=((1.0)*sj1*sj2);
CheckValue<IkReal> x14321=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*r10))+(((-1.0)*r11*x14317)))),-1);
if(!x14321.valid){
continue;
}
CheckValue<IkReal> x14322 = IKatan2WithCheck(IkReal((((x14318*x14319))+((gconst32*r00*sj1*sj2))+(((-1.0)*x14318*x14320))+(((-1.0)*r00*x14317*x14319)))),IkReal((((r02*x14319))+(((-1.0)*r02*x14320)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14321.value)))+(x14322.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14323=IKcos(j4);
IkReal x14324=IKsin(j4);
IkReal x14325=(gconst31*r21);
IkReal x14326=((1.0)*cj2);
IkReal x14327=(gconst31*r01);
IkReal x14328=(gconst31*r11);
IkReal x14329=((1.0)*x14323);
IkReal x14330=((1.0)*x14324);
IkReal x14331=(gconst32*x14324);
IkReal x14332=(gconst32*x14323);
evalcond[0]=(((r02*x14324))+((r00*x14332))+(((-1.0)*x14327*x14329)));
evalcond[1]=(((r20*x14331))+(((-1.0)*x14325*x14330))+(((-1.0)*r22*x14329)));
evalcond[2]=((((-1.0)*x14328*x14330))+((r10*x14331))+(((-1.0)*r12*x14329)));
evalcond[3]=((-1.0)+(((-1.0)*x14327*x14330))+((r00*x14331))+(((-1.0)*r02*x14329)));
evalcond[4]=((((-1.0)*x14325*x14329))+((r20*x14332))+((sj1*sj2))+(((-1.0)*cj1*x14326))+((r22*x14324)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14326))+((r10*x14332))+((r12*x14324))+(((-1.0)*x14328*x14329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14333=(gconst32*r00);
IkReal x14334=(gconst31*r01);
CheckValue<IkReal> x14335 = IKatan2WithCheck(IkReal(((((-1.0)*x14334))+x14333)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14335.valid){
continue;
}
CheckValue<IkReal> x14336=IKPowWithIntegerCheck(IKsign(((x14333*x14333)+(x14334*x14334)+(((-2.0)*x14333*x14334))+(r02*r02))),-1);
if(!x14336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14335.value)+(((1.5707963267949)*(x14336.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14337=IKcos(j4);
IkReal x14338=IKsin(j4);
IkReal x14339=(gconst31*r21);
IkReal x14340=((1.0)*cj2);
IkReal x14341=(gconst31*r01);
IkReal x14342=(gconst31*r11);
IkReal x14343=((1.0)*x14337);
IkReal x14344=((1.0)*x14338);
IkReal x14345=(gconst32*x14338);
IkReal x14346=(gconst32*x14337);
evalcond[0]=(((r02*x14338))+((r00*x14346))+(((-1.0)*x14341*x14343)));
evalcond[1]=((((-1.0)*x14339*x14344))+(((-1.0)*r22*x14343))+((r20*x14345)));
evalcond[2]=((((-1.0)*r12*x14343))+(((-1.0)*x14342*x14344))+((r10*x14345)));
evalcond[3]=((-1.0)+((r00*x14345))+(((-1.0)*x14341*x14344))+(((-1.0)*r02*x14343)));
evalcond[4]=((((-1.0)*x14339*x14343))+((sj1*sj2))+((r22*x14338))+(((-1.0)*cj1*x14340))+((r20*x14346)));
evalcond[5]=((((-1.0)*x14342*x14343))+(((-1.0)*cj1*sj2))+((r12*x14338))+((r10*x14346))+(((-1.0)*sj1*x14340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14347=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x14347.valid){
continue;
}
CheckValue<IkReal> x14348 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14347.value)))+(x14348.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14349=IKcos(j4);
IkReal x14350=IKsin(j4);
IkReal x14351=(gconst31*r21);
IkReal x14352=((1.0)*cj2);
IkReal x14353=(gconst31*r01);
IkReal x14354=(gconst31*r11);
IkReal x14355=((1.0)*x14349);
IkReal x14356=((1.0)*x14350);
IkReal x14357=(gconst32*x14350);
IkReal x14358=(gconst32*x14349);
evalcond[0]=(((r02*x14350))+((r00*x14358))+(((-1.0)*x14353*x14355)));
evalcond[1]=(((r20*x14357))+(((-1.0)*x14351*x14356))+(((-1.0)*r22*x14355)));
evalcond[2]=((((-1.0)*r12*x14355))+(((-1.0)*x14354*x14356))+((r10*x14357)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14355))+((r00*x14357))+(((-1.0)*x14353*x14356)));
evalcond[4]=(((r20*x14358))+(((-1.0)*x14351*x14355))+((sj1*sj2))+((r22*x14350))+(((-1.0)*cj1*x14352)));
evalcond[5]=((((-1.0)*sj1*x14352))+((r12*x14350))+(((-1.0)*cj1*sj2))+(((-1.0)*x14354*x14355))+((r10*x14358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14359=((-1.0)*r20);
IkReal x14360=((-1.0)*r21);
CheckValue<IkReal> x14362 = IKatan2WithCheck(IkReal(x14360),IkReal(x14359),IKFAST_ATAN2_MAGTHRESH);
if(!x14362.valid){
continue;
}
IkReal x14361=((-1.0)*(x14362.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14361;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x14359);
rxp0_2=(py*r00);
rxp1_0=(py*x14360);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst30=x14361;
IkReal gconst31=r21;
IkReal gconst32=x14359;
IkReal x14363=(r01*r21);
IkReal x14364=(r00*r20);
j4eval[0]=((((-1.0)*x14364))+(((-1.0)*x14363)));
j4eval[1]=(((sj3*x14364))+((sj3*x14363)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14365=((-1.0)*r20);
IkReal x14366=((-1.0)*r21);
CheckValue<IkReal> x14368 = IKatan2WithCheck(IkReal(x14366),IkReal(x14365),IKFAST_ATAN2_MAGTHRESH);
if(!x14368.valid){
continue;
}
IkReal x14367=((-1.0)*(x14368.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14367;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x14365);
rxp0_2=(py*r00);
rxp1_0=(py*x14366);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst30=x14367;
IkReal gconst31=r21;
IkReal gconst32=x14365;
IkReal x14369=(r01*r21);
IkReal x14370=(r00*r20);
j4eval[0]=((((-1.0)*x14370))+(((-1.0)*x14369)));
j4eval[1]=(((cj3*x14369))+((cj3*x14370)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14371=((-1.0)*r20);
IkReal x14372=((-1.0)*r21);
CheckValue<IkReal> x14374 = IKatan2WithCheck(IkReal(x14372),IkReal(x14371),IKFAST_ATAN2_MAGTHRESH);
if(!x14374.valid){
continue;
}
IkReal x14373=((-1.0)*(x14374.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14373;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x14371);
rxp0_2=(py*r00);
rxp1_0=(py*x14372);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst30=x14373;
IkReal gconst31=r21;
IkReal gconst32=x14371;
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*r21))+((cj3*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14375=((1.0)*r00);
CheckValue<IkReal> x14376=IKPowWithIntegerCheck(cj3,-1);
if(!x14376.valid){
continue;
}
CheckValue<IkReal> x14377=IKPowWithIntegerCheck(r12,-1);
if(!x14377.valid){
continue;
}
CheckValue<IkReal> x14378=IKPowWithIntegerCheck((((cj3*gconst31*r01))+(((-1.0)*cj3*gconst32*x14375))),-1);
if(!x14378.valid){
continue;
}
if( IKabs(((x14376.value)*(x14377.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14378.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*gconst31*sj3*x14375)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14376.value)*(x14377.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14378.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*gconst31*sj3*x14375))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14376.value)*(x14377.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14378.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*gconst31*sj3*x14375))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14379=IKsin(j4);
IkReal x14380=IKcos(j4);
IkReal x14381=(r21*sj3);
IkReal x14382=((1.0)*sj3);
IkReal x14383=(gconst31*sj3);
IkReal x14384=(sj1*sj2);
IkReal x14385=((1.0)*gconst31);
IkReal x14386=((1.0)*cj2);
IkReal x14387=(r01*sj3);
IkReal x14388=((1.0)*cj1*sj2);
IkReal x14389=(sj1*x14386);
IkReal x14390=(r12*x14379);
IkReal x14391=((1.0)*cj3*gconst32);
IkReal x14392=(gconst31*x14380);
IkReal x14393=(gconst32*x14380);
IkReal x14394=(gconst32*x14379);
IkReal x14395=(x14389+x14388);
evalcond[0]=((-1.0)*r12*x14380);
evalcond[1]=((((-1.0)*r21*x14379*x14385))+((r20*x14394)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x14379*x14385))+((r00*x14394)));
evalcond[3]=((((-1.0)*cj3*x14390))+(((-1.0)*x14384))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x14382*x14390))+(((-1.0)*x14395)));
evalcond[5]=(((r00*x14383))+(((-1.0)*r00*x14380*x14391))+((cj3*r01*x14392))+((gconst32*x14387)));
evalcond[6]=((((-1.0)*r00*x14382*x14393))+((r01*x14380*x14383))+(((-1.0)*r01*x14391))+(((-1.0)*cj3*r00*x14385)));
evalcond[7]=(((r20*x14383))+((cj3*r21*x14392))+((gconst32*x14381))+(((-1.0)*r20*x14380*x14391))+(((-1.0)*x14395)));
evalcond[8]=((((-1.0)*r21*x14391))+(((-1.0)*cj3*r20*x14385))+(((-1.0)*cj1*x14386))+x14384+((x14381*x14392))+(((-1.0)*r20*x14382*x14393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14396=(gconst32*r00);
IkReal x14397=((1.0)*gconst31);
CheckValue<IkReal> x14398=IKPowWithIntegerCheck(((((-1.0)*r01*x14397))+x14396),-1);
if(!x14398.valid){
continue;
}
CheckValue<IkReal> x14399=IKPowWithIntegerCheck(((((-1.0)*cj3*x14396))+((cj3*gconst31*r01))),-1);
if(!x14399.valid){
continue;
}
if( IKabs(x14398.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14399.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*r00*sj3*x14397)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14398.value)+IKsqr(((x14399.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*r00*sj3*x14397))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14398.value, ((x14399.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*r00*sj3*x14397))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14400=IKsin(j4);
IkReal x14401=IKcos(j4);
IkReal x14402=(r21*sj3);
IkReal x14403=((1.0)*sj3);
IkReal x14404=(gconst31*sj3);
IkReal x14405=(sj1*sj2);
IkReal x14406=((1.0)*gconst31);
IkReal x14407=((1.0)*cj2);
IkReal x14408=(r01*sj3);
IkReal x14409=((1.0)*cj1*sj2);
IkReal x14410=(sj1*x14407);
IkReal x14411=(r12*x14400);
IkReal x14412=((1.0)*cj3*gconst32);
IkReal x14413=(gconst31*x14401);
IkReal x14414=(gconst32*x14401);
IkReal x14415=(gconst32*x14400);
IkReal x14416=(x14410+x14409);
evalcond[0]=((-1.0)*r12*x14401);
evalcond[1]=((((-1.0)*r21*x14400*x14406))+((r20*x14415)));
evalcond[2]=((-1.0)+((r00*x14415))+(((-1.0)*r01*x14400*x14406)));
evalcond[3]=((((-1.0)*cj3*x14411))+(((-1.0)*x14405))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x14416))+(((-1.0)*x14403*x14411)));
evalcond[5]=((((-1.0)*r00*x14401*x14412))+((gconst32*x14408))+((r00*x14404))+((cj3*r01*x14413)));
evalcond[6]=((((-1.0)*cj3*r00*x14406))+(((-1.0)*r01*x14412))+(((-1.0)*r00*x14403*x14414))+((r01*x14401*x14404)));
evalcond[7]=((((-1.0)*x14416))+((gconst32*x14402))+(((-1.0)*r20*x14401*x14412))+((cj3*r21*x14413))+((r20*x14404)));
evalcond[8]=((((-1.0)*cj1*x14407))+((x14402*x14413))+x14405+(((-1.0)*cj3*r20*x14406))+(((-1.0)*r21*x14412))+(((-1.0)*r20*x14403*x14414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14417=(gconst32*r00);
IkReal x14418=(gconst31*r01);
CheckValue<IkReal> x14419=IKPowWithIntegerCheck(((((-1.0)*x14418))+x14417),-1);
if(!x14419.valid){
continue;
}
CheckValue<IkReal> x14420=IKPowWithIntegerCheck((((sj3*x14418))+(((-1.0)*sj3*x14417))),-1);
if(!x14420.valid){
continue;
}
if( IKabs(x14419.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14420.value)*((((cj3*gconst31*r00))+((cj3*gconst32*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14419.value)+IKsqr(((x14420.value)*((((cj3*gconst31*r00))+((cj3*gconst32*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14419.value, ((x14420.value)*((((cj3*gconst31*r00))+((cj3*gconst32*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14421=IKsin(j4);
IkReal x14422=IKcos(j4);
IkReal x14423=(r21*sj3);
IkReal x14424=((1.0)*sj3);
IkReal x14425=(gconst31*sj3);
IkReal x14426=(sj1*sj2);
IkReal x14427=((1.0)*gconst31);
IkReal x14428=((1.0)*cj2);
IkReal x14429=(r01*sj3);
IkReal x14430=((1.0)*cj1*sj2);
IkReal x14431=(sj1*x14428);
IkReal x14432=(r12*x14421);
IkReal x14433=((1.0)*cj3*gconst32);
IkReal x14434=(gconst31*x14422);
IkReal x14435=(gconst32*x14422);
IkReal x14436=(gconst32*x14421);
IkReal x14437=(x14431+x14430);
evalcond[0]=((-1.0)*r12*x14422);
evalcond[1]=((((-1.0)*r21*x14421*x14427))+((r20*x14436)));
evalcond[2]=((-1.0)+((r00*x14436))+(((-1.0)*r01*x14421*x14427)));
evalcond[3]=((((-1.0)*cj3*x14432))+(((-1.0)*x14426))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x14437))+(((-1.0)*x14424*x14432)));
evalcond[5]=(((cj3*r01*x14434))+((r00*x14425))+(((-1.0)*r00*x14422*x14433))+((gconst32*x14429)));
evalcond[6]=((((-1.0)*cj3*r00*x14427))+((r01*x14422*x14425))+(((-1.0)*r01*x14433))+(((-1.0)*r00*x14424*x14435)));
evalcond[7]=((((-1.0)*x14437))+((r20*x14425))+((cj3*r21*x14434))+((gconst32*x14423))+(((-1.0)*r20*x14422*x14433)));
evalcond[8]=((((-1.0)*r21*x14433))+((x14423*x14434))+(((-1.0)*cj1*x14428))+x14426+(((-1.0)*r20*x14424*x14435))+(((-1.0)*cj3*r20*x14427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14438=gconst32*gconst32;
IkReal x14439=gconst31*gconst31;
IkReal x14440=(gconst31*r00);
IkReal x14441=(gconst32*r01);
IkReal x14442=((1.0)*cj3);
IkReal x14443=(cj3*r11);
IkReal x14444=((1.0)*sj3);
IkReal x14445=(r12*x14442);
IkReal x14446=(r10*x14438);
CheckValue<IkReal> x14447=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*r11*sj3*x14439))+(((-1.0)*gconst32*r11*x14440*x14444))+(((-1.0)*gconst31*r10*x14441*x14444))+((r00*sj3*x14446)))),-1);
if(!x14447.valid){
continue;
}
CheckValue<IkReal> x14448 = IKatan2WithCheck(IkReal(((((-1.0)*x14440*x14445))+(((-1.0)*x14441*x14445)))),IkReal(((((-1.0)*gconst32*r10*x14440*x14442))+((r00*x14439*x14443))+(((-1.0)*r01*x14442*x14446))+((gconst31*x14441*x14443)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14447.value)))+(x14448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14449=IKsin(j4);
IkReal x14450=IKcos(j4);
IkReal x14451=(r21*sj3);
IkReal x14452=(cj3*gconst32);
IkReal x14453=((1.0)*r01);
IkReal x14454=(gconst32*sj3);
IkReal x14455=(gconst31*sj3);
IkReal x14456=(sj1*sj2);
IkReal x14457=((1.0)*cj2);
IkReal x14458=((1.0)*cj1*sj2);
IkReal x14459=(sj1*x14457);
IkReal x14460=((1.0)*x14450);
IkReal x14461=(gconst31*x14450);
IkReal x14462=((1.0)*x14449);
IkReal x14463=((1.0)*cj3*gconst31);
IkReal x14464=(gconst32*x14449);
IkReal x14465=(x14459+x14458);
evalcond[0]=((((-1.0)*gconst31*r21*x14462))+(((-1.0)*r22*x14460))+((r20*x14464)));
evalcond[1]=(((r10*x14464))+(((-1.0)*r12*x14460))+(((-1.0)*gconst31*r11*x14462)));
evalcond[2]=((-1.0)+(((-1.0)*gconst31*x14449*x14453))+((r00*x14464))+(((-1.0)*r02*x14460)));
evalcond[3]=(((r00*x14455))+((r01*x14454))+(((-1.0)*r00*x14452*x14460))+((cj3*r01*x14461))+(((-1.0)*cj3*r02*x14462)));
evalcond[4]=((((-1.0)*r00*x14463))+(((-1.0)*r02*sj3*x14462))+(((-1.0)*x14452*x14453))+((r01*x14450*x14455))+(((-1.0)*r00*x14454*x14460)));
evalcond[5]=((((-1.0)*r10*x14452*x14460))+(((-1.0)*cj3*r12*x14462))+((r10*x14455))+((r11*x14454))+(((-1.0)*x14456))+((cj3*r11*x14461))+((cj1*cj2)));
evalcond[6]=(((r20*x14455))+((gconst32*x14451))+(((-1.0)*r20*x14452*x14460))+(((-1.0)*x14465))+(((-1.0)*cj3*r22*x14462))+((cj3*r21*x14461)));
evalcond[7]=((((-1.0)*r21*x14452))+(((-1.0)*r22*sj3*x14462))+(((-1.0)*cj1*x14457))+((x14451*x14461))+x14456+(((-1.0)*r20*x14463))+(((-1.0)*r20*x14454*x14460)));
evalcond[8]=((((-1.0)*r12*sj3*x14462))+(((-1.0)*r10*x14463))+((r11*x14450*x14455))+(((-1.0)*x14465))+(((-1.0)*r10*x14454*x14460))+(((-1.0)*r11*x14452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14466=gconst31*gconst31;
IkReal x14467=gconst32*gconst32;
IkReal x14468=((1.0)*r11);
IkReal x14469=(r00*sj3);
IkReal x14470=(gconst31*gconst32);
IkReal x14471=(cj3*r01);
IkReal x14472=(cj3*r00);
IkReal x14473=(gconst32*r01*sj3);
IkReal x14474=(r10*x14467);
CheckValue<IkReal> x14475 = IKatan2WithCheck(IkReal((((gconst31*r12*x14469))+((r12*x14473)))),IkReal(((((-1.0)*r01*sj3*x14468*x14470))+((r01*sj3*x14474))+(((-1.0)*x14466*x14468*x14469))+((r10*x14469*x14470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14475.valid){
continue;
}
CheckValue<IkReal> x14476=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((x14472*x14474))+(((-1.0)*r10*x14470*x14471))+((r11*x14466*x14471))+(((-1.0)*x14468*x14470*x14472)))),-1);
if(!x14476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14475.value)+(((1.5707963267949)*(x14476.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14477=IKsin(j4);
IkReal x14478=IKcos(j4);
IkReal x14479=(r21*sj3);
IkReal x14480=(cj3*gconst32);
IkReal x14481=((1.0)*r01);
IkReal x14482=(gconst32*sj3);
IkReal x14483=(gconst31*sj3);
IkReal x14484=(sj1*sj2);
IkReal x14485=((1.0)*cj2);
IkReal x14486=((1.0)*cj1*sj2);
IkReal x14487=(sj1*x14485);
IkReal x14488=((1.0)*x14478);
IkReal x14489=(gconst31*x14478);
IkReal x14490=((1.0)*x14477);
IkReal x14491=((1.0)*cj3*gconst31);
IkReal x14492=(gconst32*x14477);
IkReal x14493=(x14486+x14487);
evalcond[0]=((((-1.0)*gconst31*r21*x14490))+(((-1.0)*r22*x14488))+((r20*x14492)));
evalcond[1]=(((r10*x14492))+(((-1.0)*gconst31*r11*x14490))+(((-1.0)*r12*x14488)));
evalcond[2]=((-1.0)+(((-1.0)*gconst31*x14477*x14481))+((r00*x14492))+(((-1.0)*r02*x14488)));
evalcond[3]=(((cj3*r01*x14489))+((r00*x14483))+((r01*x14482))+(((-1.0)*cj3*r02*x14490))+(((-1.0)*r00*x14480*x14488)));
evalcond[4]=((((-1.0)*r00*x14491))+(((-1.0)*x14480*x14481))+(((-1.0)*r00*x14482*x14488))+(((-1.0)*r02*sj3*x14490))+((r01*x14478*x14483)));
evalcond[5]=(((r10*x14483))+((r11*x14482))+(((-1.0)*x14484))+(((-1.0)*r10*x14480*x14488))+(((-1.0)*cj3*r12*x14490))+((cj3*r11*x14489))+((cj1*cj2)));
evalcond[6]=((((-1.0)*r20*x14480*x14488))+(((-1.0)*x14493))+((gconst32*x14479))+(((-1.0)*cj3*r22*x14490))+((r20*x14483))+((cj3*r21*x14489)));
evalcond[7]=((((-1.0)*cj1*x14485))+((x14479*x14489))+x14484+(((-1.0)*r20*x14491))+(((-1.0)*r20*x14482*x14488))+(((-1.0)*r21*x14480))+(((-1.0)*r22*sj3*x14490)));
evalcond[8]=((((-1.0)*r10*x14491))+(((-1.0)*x14493))+(((-1.0)*r11*x14480))+(((-1.0)*r10*x14482*x14488))+(((-1.0)*r12*sj3*x14490))+((r11*x14478*x14483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14494=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x14494.valid){
continue;
}
CheckValue<IkReal> x14495 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14494.value)))+(x14495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14496=IKsin(j4);
IkReal x14497=IKcos(j4);
IkReal x14498=(r21*sj3);
IkReal x14499=(cj3*gconst32);
IkReal x14500=((1.0)*r01);
IkReal x14501=(gconst32*sj3);
IkReal x14502=(gconst31*sj3);
IkReal x14503=(sj1*sj2);
IkReal x14504=((1.0)*cj2);
IkReal x14505=((1.0)*cj1*sj2);
IkReal x14506=(sj1*x14504);
IkReal x14507=((1.0)*x14497);
IkReal x14508=(gconst31*x14497);
IkReal x14509=((1.0)*x14496);
IkReal x14510=((1.0)*cj3*gconst31);
IkReal x14511=(gconst32*x14496);
IkReal x14512=(x14506+x14505);
evalcond[0]=(((r20*x14511))+(((-1.0)*r22*x14507))+(((-1.0)*gconst31*r21*x14509)));
evalcond[1]=((((-1.0)*gconst31*r11*x14509))+(((-1.0)*r12*x14507))+((r10*x14511)));
evalcond[2]=((-1.0)+((r00*x14511))+(((-1.0)*r02*x14507))+(((-1.0)*gconst31*x14496*x14500)));
evalcond[3]=((((-1.0)*r00*x14499*x14507))+((r00*x14502))+(((-1.0)*cj3*r02*x14509))+((r01*x14501))+((cj3*r01*x14508)));
evalcond[4]=((((-1.0)*x14499*x14500))+(((-1.0)*r00*x14510))+(((-1.0)*r00*x14501*x14507))+((r01*x14497*x14502))+(((-1.0)*r02*sj3*x14509)));
evalcond[5]=(((cj3*r11*x14508))+(((-1.0)*cj3*r12*x14509))+(((-1.0)*x14503))+((r10*x14502))+((cj1*cj2))+((r11*x14501))+(((-1.0)*r10*x14499*x14507)));
evalcond[6]=(((r20*x14502))+((gconst32*x14498))+(((-1.0)*cj3*r22*x14509))+(((-1.0)*r20*x14499*x14507))+(((-1.0)*x14512))+((cj3*r21*x14508)));
evalcond[7]=((((-1.0)*cj1*x14504))+(((-1.0)*r20*x14501*x14507))+(((-1.0)*r21*x14499))+x14503+((x14498*x14508))+(((-1.0)*r22*sj3*x14509))+(((-1.0)*r20*x14510)));
evalcond[8]=((((-1.0)*r11*x14499))+(((-1.0)*r10*x14501*x14507))+((r11*x14497*x14502))+(((-1.0)*x14512))+(((-1.0)*r10*x14510))+(((-1.0)*r12*sj3*x14509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14513=((-1.0)*r21);
IkReal x14515 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14515)==0){
continue;
}
IkReal x14514=pow(x14515,-0.5);
CheckValue<IkReal> x14516 = IKatan2WithCheck(IkReal(x14513),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14516.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x14516.value))));
IkReal gconst34=(x14513*x14514);
IkReal gconst35=((1.0)*r20*x14514);
CheckValue<IkReal> x14517 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14517.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14517.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14518=((-1.0)*r21);
CheckValue<IkReal> x14521 = IKatan2WithCheck(IkReal(x14518),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14521.valid){
continue;
}
IkReal x14519=((1.0)*(x14521.value));
IkReal x14520=x14514;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x14519)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x14519)));
IkReal gconst34=(x14518*x14520);
IkReal gconst35=((1.0)*r20*x14520);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x14522=((-1.0)*r21);
CheckValue<IkReal> x14525 = IKatan2WithCheck(IkReal(x14522),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14525.valid){
continue;
}
IkReal x14523=((1.0)*(x14525.value));
IkReal x14524=x14514;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x14523)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x14523)));
IkReal gconst34=(x14522*x14524);
IkReal gconst35=((1.0)*r20*x14524);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14526=((-1.0)*r21);
CheckValue<IkReal> x14529 = IKatan2WithCheck(IkReal(x14526),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14529.valid){
continue;
}
IkReal x14527=((1.0)*(x14529.value));
IkReal x14528=x14514;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x14527)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x14527)));
IkReal gconst34=(x14526*x14528);
IkReal gconst35=((1.0)*r20*x14528);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14530=gconst35*gconst35;
IkReal x14531=gconst34*gconst34;
IkReal x14532=(r20*sj3);
IkReal x14533=((1.0)*r21);
IkReal x14534=(gconst34*sj3);
IkReal x14535=(gconst35*r01);
IkReal x14536=(cj3*r20);
IkReal x14537=(gconst34*gconst35*r00);
CheckValue<IkReal> x14538 = IKatan2WithCheck(IkReal((((r22*sj3*x14535))+((r00*r22*x14534)))),IkReal(((((-1.0)*x14533*x14534*x14535))+(((-1.0)*r00*sj3*x14531*x14533))+((r01*x14530*x14532))+((x14532*x14537)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14538.valid){
continue;
}
CheckValue<IkReal> x14539=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*x14533*x14537))+((r00*x14530*x14536))+((cj3*r01*r21*x14531))+(((-1.0)*gconst34*x14535*x14536))+((cj3*r02*r22)))),-1);
if(!x14539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14538.value)+(((1.5707963267949)*(x14539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14540=IKsin(j4);
IkReal x14541=IKcos(j4);
IkReal x14542=(r21*sj3);
IkReal x14543=(gconst35*r20);
IkReal x14544=(gconst35*r00);
IkReal x14545=(sj1*sj2);
IkReal x14546=(cj3*r11);
IkReal x14547=((1.0)*cj2);
IkReal x14548=(cj3*r21);
IkReal x14549=((1.0)*gconst35);
IkReal x14550=(gconst35*r10);
IkReal x14551=(r01*sj3);
IkReal x14552=(cj3*r01);
IkReal x14553=(gconst34*r00);
IkReal x14554=((1.0)*cj3);
IkReal x14555=(r11*sj3);
IkReal x14556=(gconst34*r20);
IkReal x14557=(gconst34*r10);
IkReal x14558=((1.0)*cj1*sj2);
IkReal x14559=(sj1*x14547);
IkReal x14560=((1.0)*x14541);
IkReal x14561=((1.0)*x14540);
IkReal x14562=(gconst34*x14541);
IkReal x14563=(x14558+x14559);
evalcond[0]=((((-1.0)*r22*x14560))+(((-1.0)*gconst34*r21*x14561))+((x14540*x14543)));
evalcond[1]=((((-1.0)*gconst34*r11*x14561))+((x14540*x14550))+(((-1.0)*r12*x14560)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14560))+(((-1.0)*gconst34*r01*x14561))+((x14540*x14544)));
evalcond[3]=(((sj3*x14553))+(((-1.0)*x14541*x14544*x14554))+((x14552*x14562))+((gconst35*x14551))+(((-1.0)*r02*x14540*x14554)));
evalcond[4]=((((-1.0)*sj3*x14544*x14560))+(((-1.0)*x14553*x14554))+(((-1.0)*x14549*x14552))+((x14551*x14562))+(((-1.0)*r02*sj3*x14561)));
evalcond[5]=(((sj3*x14557))+((x14546*x14562))+(((-1.0)*x14545))+(((-1.0)*cj3*r10*x14541*x14549))+((cj1*cj2))+(((-1.0)*r12*x14540*x14554))+((gconst35*x14555)));
evalcond[6]=(((sj3*x14556))+(((-1.0)*x14563))+(((-1.0)*r22*x14540*x14554))+((gconst35*x14542))+((x14548*x14562))+(((-1.0)*x14541*x14543*x14554)));
evalcond[7]=((((-1.0)*x14554*x14556))+(((-1.0)*x14548*x14549))+(((-1.0)*cj1*x14547))+(((-1.0)*r22*sj3*x14561))+(((-1.0)*sj3*x14543*x14560))+x14545+((x14542*x14562)));
evalcond[8]=((((-1.0)*x14554*x14557))+(((-1.0)*x14563))+(((-1.0)*r10*sj3*x14541*x14549))+(((-1.0)*x14546*x14549))+((x14555*x14562))+(((-1.0)*r12*sj3*x14561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14564=((1.0)*gconst34);
CheckValue<IkReal> x14565 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst35*r10))+(((-1.0)*r11*x14564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14565.valid){
continue;
}
CheckValue<IkReal> x14566=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r21))+(((-1.0)*r20*x14564)))),-1);
if(!x14566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14565.value)+(((1.5707963267949)*(x14566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14567=IKsin(j4);
IkReal x14568=IKcos(j4);
IkReal x14569=(r21*sj3);
IkReal x14570=(gconst35*r20);
IkReal x14571=(gconst35*r00);
IkReal x14572=(sj1*sj2);
IkReal x14573=(cj3*r11);
IkReal x14574=((1.0)*cj2);
IkReal x14575=(cj3*r21);
IkReal x14576=((1.0)*gconst35);
IkReal x14577=(gconst35*r10);
IkReal x14578=(r01*sj3);
IkReal x14579=(cj3*r01);
IkReal x14580=(gconst34*r00);
IkReal x14581=((1.0)*cj3);
IkReal x14582=(r11*sj3);
IkReal x14583=(gconst34*r20);
IkReal x14584=(gconst34*r10);
IkReal x14585=((1.0)*cj1*sj2);
IkReal x14586=(sj1*x14574);
IkReal x14587=((1.0)*x14568);
IkReal x14588=((1.0)*x14567);
IkReal x14589=(gconst34*x14568);
IkReal x14590=(x14586+x14585);
evalcond[0]=(((x14567*x14570))+(((-1.0)*r22*x14587))+(((-1.0)*gconst34*r21*x14588)));
evalcond[1]=((((-1.0)*r12*x14587))+((x14567*x14577))+(((-1.0)*gconst34*r11*x14588)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14587))+((x14567*x14571))+(((-1.0)*gconst34*r01*x14588)));
evalcond[3]=((((-1.0)*x14568*x14571*x14581))+((sj3*x14580))+((gconst35*x14578))+(((-1.0)*r02*x14567*x14581))+((x14579*x14589)));
evalcond[4]=((((-1.0)*x14576*x14579))+((x14578*x14589))+(((-1.0)*sj3*x14571*x14587))+(((-1.0)*x14580*x14581))+(((-1.0)*r02*sj3*x14588)));
evalcond[5]=(((x14573*x14589))+((gconst35*x14582))+((sj3*x14584))+((cj1*cj2))+(((-1.0)*x14572))+(((-1.0)*r12*x14567*x14581))+(((-1.0)*cj3*r10*x14568*x14576)));
evalcond[6]=(((x14575*x14589))+(((-1.0)*x14568*x14570*x14581))+(((-1.0)*x14590))+((gconst35*x14569))+((sj3*x14583))+(((-1.0)*r22*x14567*x14581)));
evalcond[7]=((((-1.0)*cj1*x14574))+((x14569*x14589))+x14572+(((-1.0)*sj3*x14570*x14587))+(((-1.0)*x14575*x14576))+(((-1.0)*r22*sj3*x14588))+(((-1.0)*x14581*x14583)));
evalcond[8]=((((-1.0)*x14590))+(((-1.0)*x14573*x14576))+(((-1.0)*r10*sj3*x14568*x14576))+((x14582*x14589))+(((-1.0)*r12*sj3*x14588))+(((-1.0)*x14581*x14584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14591=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+((gconst34*r10)))),-1);
if(!x14591.valid){
continue;
}
CheckValue<IkReal> x14592 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst34*r21))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14591.value)))+(x14592.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14593=IKsin(j4);
IkReal x14594=IKcos(j4);
IkReal x14595=(r21*sj3);
IkReal x14596=(gconst35*r20);
IkReal x14597=(gconst35*r00);
IkReal x14598=(sj1*sj2);
IkReal x14599=(cj3*r11);
IkReal x14600=((1.0)*cj2);
IkReal x14601=(cj3*r21);
IkReal x14602=((1.0)*gconst35);
IkReal x14603=(gconst35*r10);
IkReal x14604=(r01*sj3);
IkReal x14605=(cj3*r01);
IkReal x14606=(gconst34*r00);
IkReal x14607=((1.0)*cj3);
IkReal x14608=(r11*sj3);
IkReal x14609=(gconst34*r20);
IkReal x14610=(gconst34*r10);
IkReal x14611=((1.0)*cj1*sj2);
IkReal x14612=(sj1*x14600);
IkReal x14613=((1.0)*x14594);
IkReal x14614=((1.0)*x14593);
IkReal x14615=(gconst34*x14594);
IkReal x14616=(x14612+x14611);
evalcond[0]=((((-1.0)*gconst34*r21*x14614))+(((-1.0)*r22*x14613))+((x14593*x14596)));
evalcond[1]=(((x14593*x14603))+(((-1.0)*r12*x14613))+(((-1.0)*gconst34*r11*x14614)));
evalcond[2]=((-1.0)+(((-1.0)*gconst34*r01*x14614))+((x14593*x14597))+(((-1.0)*r02*x14613)));
evalcond[3]=((((-1.0)*x14594*x14597*x14607))+(((-1.0)*r02*x14593*x14607))+((sj3*x14606))+((x14605*x14615))+((gconst35*x14604)));
evalcond[4]=((((-1.0)*sj3*x14597*x14613))+(((-1.0)*x14606*x14607))+(((-1.0)*x14602*x14605))+(((-1.0)*r02*sj3*x14614))+((x14604*x14615)));
evalcond[5]=((((-1.0)*x14598))+(((-1.0)*cj3*r10*x14594*x14602))+((x14599*x14615))+((cj1*cj2))+((gconst35*x14608))+((sj3*x14610))+(((-1.0)*r12*x14593*x14607)));
evalcond[6]=((((-1.0)*x14594*x14596*x14607))+((x14601*x14615))+((gconst35*x14595))+((sj3*x14609))+(((-1.0)*x14616))+(((-1.0)*r22*x14593*x14607)));
evalcond[7]=((((-1.0)*r22*sj3*x14614))+((x14595*x14615))+(((-1.0)*sj3*x14596*x14613))+(((-1.0)*cj1*x14600))+(((-1.0)*x14607*x14609))+x14598+(((-1.0)*x14601*x14602)));
evalcond[8]=(((x14608*x14615))+(((-1.0)*x14599*x14602))+(((-1.0)*r12*sj3*x14614))+(((-1.0)*r10*sj3*x14594*x14602))+(((-1.0)*x14607*x14610))+(((-1.0)*x14616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14618 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14618)==0){
continue;
}
IkReal x14617=pow(x14618,-0.5);
CheckValue<IkReal> x14619 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14619.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14619.value));
IkReal gconst37=((-1.0)*r11*x14617);
IkReal gconst38=(r10*x14617);
CheckValue<IkReal> x14620 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14620.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14620.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14623 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14623.valid){
continue;
}
IkReal x14621=((-1.0)*(x14623.value));
IkReal x14622=x14617;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x14621;
IkReal gconst36=x14621;
IkReal gconst37=((-1.0)*r11*x14622);
IkReal gconst38=(r10*x14622);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14626 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14626.valid){
continue;
}
IkReal x14624=((-1.0)*(x14626.value));
IkReal x14625=x14617;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x14624;
IkReal gconst36=x14624;
IkReal gconst37=((-1.0)*r11*x14625);
IkReal gconst38=(r10*x14625);
CheckValue<IkReal> x14634=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14634.valid){
continue;
}
IkReal x14627=x14634.value;
IkReal x14628=(cj3*x14627);
IkReal x14629=(r00*x14628);
IkReal x14630=(r21*x14628);
IkReal x14631=(r20*x14628);
IkReal x14632=(r01*x14628);
IkReal x14633=(r10*r11*x14628);
j4eval[0]=IKsign((((r20*x14629*(r10*r10)))+((r01*r10*r11*x14631))+((r01*x14630*(r11*r11)))+((cj3*r02*r22))+((r10*r11*r21*x14629))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14637 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14637.valid){
continue;
}
IkReal x14635=((-1.0)*(x14637.value));
IkReal x14636=x14617;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x14635;
IkReal gconst36=x14635;
IkReal gconst37=((-1.0)*r11*x14636);
IkReal gconst38=(r10*x14636);
CheckValue<IkReal> x14645=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14645.valid){
continue;
}
IkReal x14638=x14645.value;
IkReal x14639=(sj3*x14638);
IkReal x14640=(r20*x14639);
IkReal x14641=(r00*x14639);
IkReal x14642=(r01*x14639);
IkReal x14643=(r21*x14639);
IkReal x14644=(r10*r11*x14639);
j4eval[0]=IKsign((((r10*r11*r21*x14641))+((r00*x14640*(r10*r10)))+((r01*r10*r11*x14640))+((r21*x14642*(r11*r11)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14646=gconst37*gconst37;
IkReal x14647=gconst38*gconst38;
IkReal x14648=(cj3*r00);
IkReal x14649=(r01*sj3);
IkReal x14650=((1.0)*gconst37);
IkReal x14651=(gconst38*r20);
IkReal x14652=(r00*sj3);
IkReal x14653=(gconst38*r21);
IkReal x14654=((1.0)*cj3*r01);
IkReal x14655=(r21*x14646);
IkReal x14656=(r20*x14647);
CheckValue<IkReal> x14657 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x14648*x14650))+(((-1.0)*gconst38*r22*x14654)))),IkReal(((((-1.0)*x14654*x14656))+((cj3*gconst37*r01*x14653))+(((-1.0)*x14648*x14650*x14651))+((x14648*x14655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14657.valid){
continue;
}
CheckValue<IkReal> x14658=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14649*x14650*x14651))+(((-1.0)*x14650*x14652*x14653))+((x14649*x14655))+((x14652*x14656))+((r02*r22*sj3)))),-1);
if(!x14658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14657.value)+(((1.5707963267949)*(x14658.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14659=IKsin(j4);
IkReal x14660=IKcos(j4);
IkReal x14661=(gconst37*r21);
IkReal x14662=(gconst38*sj3);
IkReal x14663=(gconst38*r20);
IkReal x14664=((1.0)*sj1);
IkReal x14665=(gconst37*r01);
IkReal x14666=((1.0)*cj1);
IkReal x14667=(cj3*gconst38);
IkReal x14668=(gconst37*r00);
IkReal x14669=((1.0)*cj3);
IkReal x14670=(gconst37*sj3);
IkReal x14671=(gconst37*r11);
IkReal x14672=(sj2*x14666);
IkReal x14673=(cj2*x14664);
IkReal x14674=((1.0)*x14660);
IkReal x14675=((1.0)*x14659);
IkReal x14676=(gconst38*x14659);
IkReal x14677=(sj3*x14660);
IkReal x14678=(cj3*gconst37*x14660);
IkReal x14679=(x14673+x14672);
evalcond[0]=((((-1.0)*x14661*x14675))+(((-1.0)*r22*x14674))+((x14659*x14663)));
evalcond[1]=(((r10*x14676))+(((-1.0)*x14671*x14675))+(((-1.0)*r12*x14674)));
evalcond[2]=((-1.0)+(((-1.0)*x14665*x14675))+((r00*x14676))+(((-1.0)*r02*x14674)));
evalcond[3]=((((-1.0)*r02*x14659*x14669))+((cj3*x14660*x14665))+((r01*x14662))+((sj3*x14668))+(((-1.0)*r00*x14667*x14674)));
evalcond[4]=((((-1.0)*r00*x14662*x14674))+(((-1.0)*x14668*x14669))+(((-1.0)*r01*x14667))+(((-1.0)*r02*sj3*x14675))+((x14665*x14677)));
evalcond[5]=((((-1.0)*sj2*x14664))+((r10*x14670))+(((-1.0)*r10*x14667*x14674))+(((-1.0)*r12*x14659*x14669))+((cj3*x14660*x14671))+((r11*x14662))+((cj1*cj2)));
evalcond[6]=(((r20*x14670))+(((-1.0)*x14679))+(((-1.0)*r22*x14659*x14669))+((r21*x14662))+((cj3*x14660*x14661))+(((-1.0)*x14660*x14663*x14669)));
evalcond[7]=((((-1.0)*r22*sj3*x14675))+((x14661*x14677))+(((-1.0)*r21*x14667))+(((-1.0)*cj2*x14666))+(((-1.0)*r20*x14662*x14674))+((sj1*sj2))+(((-1.0)*gconst37*r20*x14669)));
evalcond[8]=((((-1.0)*x14679))+(((-1.0)*r12*sj3*x14675))+(((-1.0)*gconst37*r10*x14669))+(((-1.0)*r10*x14662*x14674))+(((-1.0)*r11*x14667))+((r11*x14660*x14670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14680=gconst38*gconst38;
IkReal x14681=gconst37*gconst37;
IkReal x14682=(r01*r20);
IkReal x14683=(gconst37*gconst38);
IkReal x14684=((1.0)*cj3);
IkReal x14685=(r00*sj3);
IkReal x14686=(r01*sj3);
IkReal x14687=(r21*x14681);
CheckValue<IkReal> x14688=IKPowWithIntegerCheck(IKsign((((cj3*r01*x14687))+(((-1.0)*x14682*x14683*x14684))+((cj3*r00*r20*x14680))+((cj3*r02*r22))+(((-1.0)*r00*r21*x14683*x14684)))),-1);
if(!x14688.valid){
continue;
}
CheckValue<IkReal> x14689 = IKatan2WithCheck(IkReal((((gconst38*r22*x14686))+((gconst37*r22*x14685)))),IkReal((((sj3*x14680*x14682))+(((-1.0)*r21*x14683*x14686))+((r20*x14683*x14685))+(((-1.0)*x14685*x14687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14688.value)))+(x14689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14690=IKsin(j4);
IkReal x14691=IKcos(j4);
IkReal x14692=(gconst37*r21);
IkReal x14693=(gconst38*sj3);
IkReal x14694=(gconst38*r20);
IkReal x14695=((1.0)*sj1);
IkReal x14696=(gconst37*r01);
IkReal x14697=((1.0)*cj1);
IkReal x14698=(cj3*gconst38);
IkReal x14699=(gconst37*r00);
IkReal x14700=((1.0)*cj3);
IkReal x14701=(gconst37*sj3);
IkReal x14702=(gconst37*r11);
IkReal x14703=(sj2*x14697);
IkReal x14704=(cj2*x14695);
IkReal x14705=((1.0)*x14691);
IkReal x14706=((1.0)*x14690);
IkReal x14707=(gconst38*x14690);
IkReal x14708=(sj3*x14691);
IkReal x14709=(cj3*gconst37*x14691);
IkReal x14710=(x14704+x14703);
evalcond[0]=((((-1.0)*x14692*x14706))+((x14690*x14694))+(((-1.0)*r22*x14705)));
evalcond[1]=((((-1.0)*r12*x14705))+(((-1.0)*x14702*x14706))+((r10*x14707)));
evalcond[2]=((-1.0)+((r00*x14707))+(((-1.0)*x14696*x14706))+(((-1.0)*r02*x14705)));
evalcond[3]=(((r01*x14693))+((sj3*x14699))+(((-1.0)*r00*x14698*x14705))+(((-1.0)*r02*x14690*x14700))+((cj3*x14691*x14696)));
evalcond[4]=((((-1.0)*r02*sj3*x14706))+(((-1.0)*r00*x14693*x14705))+(((-1.0)*x14699*x14700))+((x14696*x14708))+(((-1.0)*r01*x14698)));
evalcond[5]=((((-1.0)*r10*x14698*x14705))+((r11*x14693))+(((-1.0)*r12*x14690*x14700))+(((-1.0)*sj2*x14695))+((cj1*cj2))+((cj3*x14691*x14702))+((r10*x14701)));
evalcond[6]=((((-1.0)*x14691*x14694*x14700))+(((-1.0)*r22*x14690*x14700))+((r20*x14701))+(((-1.0)*x14710))+((r21*x14693))+((cj3*x14691*x14692)));
evalcond[7]=(((sj1*sj2))+(((-1.0)*r22*sj3*x14706))+(((-1.0)*r20*x14693*x14705))+((x14692*x14708))+(((-1.0)*cj2*x14697))+(((-1.0)*r21*x14698))+(((-1.0)*gconst37*r20*x14700)));
evalcond[8]=((((-1.0)*r12*sj3*x14706))+((r11*x14691*x14701))+(((-1.0)*r11*x14698))+(((-1.0)*gconst37*r10*x14700))+(((-1.0)*x14710))+(((-1.0)*r10*x14693*x14705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14711=((1.0)*gconst37);
CheckValue<IkReal> x14712 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst38*r10))+(((-1.0)*r11*x14711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14712.valid){
continue;
}
CheckValue<IkReal> x14713=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14711))+(((-1.0)*gconst38*r21)))),-1);
if(!x14713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14712.value)+(((1.5707963267949)*(x14713.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14714=IKsin(j4);
IkReal x14715=IKcos(j4);
IkReal x14716=(gconst37*r21);
IkReal x14717=(gconst38*sj3);
IkReal x14718=(gconst38*r20);
IkReal x14719=((1.0)*sj1);
IkReal x14720=(gconst37*r01);
IkReal x14721=((1.0)*cj1);
IkReal x14722=(cj3*gconst38);
IkReal x14723=(gconst37*r00);
IkReal x14724=((1.0)*cj3);
IkReal x14725=(gconst37*sj3);
IkReal x14726=(gconst37*r11);
IkReal x14727=(sj2*x14721);
IkReal x14728=(cj2*x14719);
IkReal x14729=((1.0)*x14715);
IkReal x14730=((1.0)*x14714);
IkReal x14731=(gconst38*x14714);
IkReal x14732=(sj3*x14715);
IkReal x14733=(cj3*gconst37*x14715);
IkReal x14734=(x14728+x14727);
evalcond[0]=((((-1.0)*x14716*x14730))+(((-1.0)*r22*x14729))+((x14714*x14718)));
evalcond[1]=(((r10*x14731))+(((-1.0)*r12*x14729))+(((-1.0)*x14726*x14730)));
evalcond[2]=((-1.0)+((r00*x14731))+(((-1.0)*r02*x14729))+(((-1.0)*x14720*x14730)));
evalcond[3]=((((-1.0)*r02*x14714*x14724))+(((-1.0)*r00*x14722*x14729))+((sj3*x14723))+((r01*x14717))+((cj3*x14715*x14720)));
evalcond[4]=((((-1.0)*x14723*x14724))+((x14720*x14732))+(((-1.0)*r02*sj3*x14730))+(((-1.0)*r01*x14722))+(((-1.0)*r00*x14717*x14729)));
evalcond[5]=(((r11*x14717))+((cj1*cj2))+(((-1.0)*r12*x14714*x14724))+((cj3*x14715*x14726))+(((-1.0)*r10*x14722*x14729))+(((-1.0)*sj2*x14719))+((r10*x14725)));
evalcond[6]=(((r21*x14717))+((r20*x14725))+(((-1.0)*x14715*x14718*x14724))+(((-1.0)*r22*x14714*x14724))+((cj3*x14715*x14716))+(((-1.0)*x14734)));
evalcond[7]=((((-1.0)*r22*sj3*x14730))+((sj1*sj2))+(((-1.0)*cj2*x14721))+(((-1.0)*r21*x14722))+(((-1.0)*r20*x14717*x14729))+(((-1.0)*gconst37*r20*x14724))+((x14716*x14732)));
evalcond[8]=(((r11*x14715*x14725))+(((-1.0)*gconst37*r10*x14724))+(((-1.0)*r12*sj3*x14730))+(((-1.0)*x14734))+(((-1.0)*r10*x14717*x14729))+(((-1.0)*r11*x14722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14736 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14736)==0){
continue;
}
IkReal x14735=pow(x14736,-0.5);
CheckValue<IkReal> x14737 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14737.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14737.value))));
IkReal gconst40=((1.0)*r11*x14735);
IkReal gconst41=((-1.0)*r10*x14735);
CheckValue<IkReal> x14738 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14738.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14738.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14741 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14741.valid){
continue;
}
IkReal x14739=((1.0)*(x14741.value));
IkReal x14740=x14735;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14739)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14739)));
IkReal gconst40=((1.0)*r11*x14740);
IkReal gconst41=((-1.0)*r10*x14740);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14742=gconst41*gconst41;
IkReal x14743=gconst40*gconst40;
IkReal x14744=(r01*r21);
IkReal x14745=(gconst41*sj3);
IkReal x14746=((1.0)*gconst40);
IkReal x14747=(gconst40*r00);
IkReal x14748=(r00*r21);
IkReal x14749=(cj3*gconst41);
IkReal x14750=(r20*x14742);
CheckValue<IkReal> x14751 = IKatan2WithCheck(IkReal((((r22*sj3*x14747))+((r01*r22*x14745)))),IkReal(((((-1.0)*x14744*x14745*x14746))+((r20*x14745*x14747))+((r01*sj3*x14750))+(((-1.0)*sj3*x14743*x14748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14751.valid){
continue;
}
CheckValue<IkReal> x14752=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x14746*x14749))+((cj3*x14743*x14744))+(((-1.0)*x14746*x14748*x14749))+((cj3*r02*r22))+((cj3*r00*x14750)))),-1);
if(!x14752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14751.value)+(((1.5707963267949)*(x14752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14753=IKsin(j4);
IkReal x14754=IKcos(j4);
IkReal x14755=(gconst40*r01);
IkReal x14756=(cj3*gconst41);
IkReal x14757=(gconst40*sj3);
IkReal x14758=(sj1*sj2);
IkReal x14759=(gconst41*sj3);
IkReal x14760=((1.0)*cj1);
IkReal x14761=(gconst40*r11);
IkReal x14762=(gconst40*r21);
IkReal x14763=(sj2*x14760);
IkReal x14764=((1.0)*cj2*sj1);
IkReal x14765=((1.0)*x14754);
IkReal x14766=((1.0)*x14753);
IkReal x14767=(cj3*x14754);
IkReal x14768=(gconst41*x14753);
IkReal x14769=((1.0)*cj3*gconst40);
IkReal x14770=(x14764+x14763);
evalcond[0]=(((r20*x14768))+(((-1.0)*r22*x14765))+(((-1.0)*x14762*x14766)));
evalcond[1]=(((r10*x14768))+(((-1.0)*r12*x14765))+(((-1.0)*x14761*x14766)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14765))+(((-1.0)*x14755*x14766))+((r00*x14768)));
evalcond[3]=(((x14755*x14767))+(((-1.0)*r00*x14756*x14765))+(((-1.0)*cj3*r02*x14766))+((r01*x14759))+((r00*x14757)));
evalcond[4]=((((-1.0)*r01*x14756))+(((-1.0)*r00*x14769))+(((-1.0)*r02*sj3*x14766))+(((-1.0)*r00*x14759*x14765))+((sj3*x14754*x14755)));
evalcond[5]=(((x14761*x14767))+(((-1.0)*cj3*r12*x14766))+((cj1*cj2))+((r10*x14757))+((r11*x14759))+(((-1.0)*r10*x14756*x14765))+(((-1.0)*x14758)));
evalcond[6]=(((x14762*x14767))+((r20*x14757))+(((-1.0)*x14770))+(((-1.0)*cj3*r22*x14766))+((r21*x14759))+(((-1.0)*r20*x14756*x14765)));
evalcond[7]=(((r21*x14754*x14757))+(((-1.0)*cj2*x14760))+(((-1.0)*r20*x14769))+(((-1.0)*r22*sj3*x14766))+x14758+(((-1.0)*r21*x14756))+(((-1.0)*r20*x14759*x14765)));
evalcond[8]=((((-1.0)*r10*x14769))+(((-1.0)*x14770))+(((-1.0)*r12*sj3*x14766))+((r11*x14754*x14757))+(((-1.0)*r11*x14756))+(((-1.0)*r10*x14759*x14765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14771=((1.0)*gconst40);
CheckValue<IkReal> x14772=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14771))+(((-1.0)*gconst41*r21)))),-1);
if(!x14772.valid){
continue;
}
CheckValue<IkReal> x14773 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst41*r10))+(((-1.0)*r11*x14771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14772.value)))+(x14773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14774=IKsin(j4);
IkReal x14775=IKcos(j4);
IkReal x14776=(gconst40*r01);
IkReal x14777=(cj3*gconst41);
IkReal x14778=(gconst40*sj3);
IkReal x14779=(sj1*sj2);
IkReal x14780=(gconst41*sj3);
IkReal x14781=((1.0)*cj1);
IkReal x14782=(gconst40*r11);
IkReal x14783=(gconst40*r21);
IkReal x14784=(sj2*x14781);
IkReal x14785=((1.0)*cj2*sj1);
IkReal x14786=((1.0)*x14775);
IkReal x14787=((1.0)*x14774);
IkReal x14788=(cj3*x14775);
IkReal x14789=(gconst41*x14774);
IkReal x14790=((1.0)*cj3*gconst40);
IkReal x14791=(x14785+x14784);
evalcond[0]=((((-1.0)*x14783*x14787))+((r20*x14789))+(((-1.0)*r22*x14786)));
evalcond[1]=(((r10*x14789))+(((-1.0)*x14782*x14787))+(((-1.0)*r12*x14786)));
evalcond[2]=((-1.0)+((r00*x14789))+(((-1.0)*x14776*x14787))+(((-1.0)*r02*x14786)));
evalcond[3]=(((r01*x14780))+(((-1.0)*r00*x14777*x14786))+((r00*x14778))+(((-1.0)*cj3*r02*x14787))+((x14776*x14788)));
evalcond[4]=((((-1.0)*r00*x14790))+(((-1.0)*r02*sj3*x14787))+(((-1.0)*r01*x14777))+(((-1.0)*r00*x14780*x14786))+((sj3*x14775*x14776)));
evalcond[5]=((((-1.0)*r10*x14777*x14786))+((x14782*x14788))+((r10*x14778))+(((-1.0)*cj3*r12*x14787))+(((-1.0)*x14779))+((r11*x14780))+((cj1*cj2)));
evalcond[6]=((((-1.0)*r20*x14777*x14786))+((x14783*x14788))+((r21*x14780))+((r20*x14778))+(((-1.0)*cj3*r22*x14787))+(((-1.0)*x14791)));
evalcond[7]=((((-1.0)*r20*x14780*x14786))+(((-1.0)*r21*x14777))+(((-1.0)*r22*sj3*x14787))+(((-1.0)*cj2*x14781))+(((-1.0)*r20*x14790))+((r21*x14775*x14778))+x14779);
evalcond[8]=((((-1.0)*r11*x14777))+(((-1.0)*r10*x14780*x14786))+(((-1.0)*r12*sj3*x14787))+((r11*x14775*x14778))+(((-1.0)*r10*x14790))+(((-1.0)*x14791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14792=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14792);
rxp0_2=(py*r00);
rxp1_0=(r21*x14792);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14793=(cj5*r00);
IkReal x14794=(r01*sj5);
j4eval[0]=((((-1.0)*x14794))+x14793);
j4eval[1]=((((-1.0)*sj3*x14793))+((sj3*x14794)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14795=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14795);
rxp0_2=(py*r00);
rxp1_0=(r21*x14795);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14796=(cj5*r00);
IkReal x14797=(r01*sj5);
j4eval[0]=((((-1.0)*x14797))+x14796);
j4eval[1]=(((cj3*x14797))+(((-1.0)*cj3*x14796)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14798=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14798);
rxp0_2=(py*r00);
rxp1_0=(r21*x14798);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14799=((1.0)*r00);
CheckValue<IkReal> x14800=IKPowWithIntegerCheck(cj3,-1);
if(!x14800.valid){
continue;
}
CheckValue<IkReal> x14801=IKPowWithIntegerCheck(r12,-1);
if(!x14801.valid){
continue;
}
CheckValue<IkReal> x14802=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14799))),-1);
if(!x14802.valid){
continue;
}
if( IKabs(((x14800.value)*(x14801.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14802.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14799)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14800.value)*(x14801.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14802.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14799))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14800.value)*(x14801.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14802.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14799))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14803=IKsin(j4);
IkReal x14804=IKcos(j4);
IkReal x14805=((1.0)*cj3);
IkReal x14806=(cj5*r21);
IkReal x14807=(sj1*sj2);
IkReal x14808=(cj5*r01);
IkReal x14809=(r20*sj5);
IkReal x14810=((1.0)*cj1);
IkReal x14811=(r01*sj5);
IkReal x14812=(r00*sj5);
IkReal x14813=((1.0)*sj3);
IkReal x14814=(sj2*x14810);
IkReal x14815=((1.0)*cj2*sj1);
IkReal x14816=((1.0)*x14803);
IkReal x14817=(cj5*x14804);
IkReal x14818=(cj5*x14803);
IkReal x14819=(r21*sj5*x14804);
IkReal x14820=(x14815+x14814);
evalcond[0]=((-1.0)*r12*x14804);
evalcond[1]=((((-1.0)*r21*sj5*x14816))+((r20*x14818)));
evalcond[2]=((-1.0)+((r00*x14818))+(((-1.0)*x14811*x14816)));
evalcond[3]=((((-1.0)*r12*x14803*x14805))+((cj1*cj2))+(((-1.0)*x14807)));
evalcond[4]=((((-1.0)*r12*x14803*x14813))+(((-1.0)*x14820)));
evalcond[5]=(((sj3*x14812))+((sj3*x14808))+(((-1.0)*r00*x14805*x14817))+((cj3*x14804*x14811)));
evalcond[6]=((((-1.0)*r00*x14813*x14817))+((sj3*x14804*x14811))+(((-1.0)*x14805*x14812))+(((-1.0)*x14805*x14808)));
evalcond[7]=(((sj3*x14809))+((sj3*x14806))+(((-1.0)*x14820))+(((-1.0)*r20*x14805*x14817))+((cj3*x14819)));
evalcond[8]=(((sj3*x14819))+x14807+(((-1.0)*cj2*x14810))+(((-1.0)*r20*x14813*x14817))+(((-1.0)*x14805*x14809))+(((-1.0)*x14805*x14806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14821=((1.0)*sj5);
IkReal x14822=(cj5*r00);
CheckValue<IkReal> x14823=IKPowWithIntegerCheck(((((-1.0)*r01*x14821))+x14822),-1);
if(!x14823.valid){
continue;
}
CheckValue<IkReal> x14824=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*x14822))),-1);
if(!x14824.valid){
continue;
}
if( IKabs(x14823.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14824.value)*(((((-1.0)*r00*sj3*x14821))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14823.value)+IKsqr(((x14824.value)*(((((-1.0)*r00*sj3*x14821))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14823.value, ((x14824.value)*(((((-1.0)*r00*sj3*x14821))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14825=IKsin(j4);
IkReal x14826=IKcos(j4);
IkReal x14827=((1.0)*cj3);
IkReal x14828=(cj5*r21);
IkReal x14829=(sj1*sj2);
IkReal x14830=(cj5*r01);
IkReal x14831=(r20*sj5);
IkReal x14832=((1.0)*cj1);
IkReal x14833=(r01*sj5);
IkReal x14834=(r00*sj5);
IkReal x14835=((1.0)*sj3);
IkReal x14836=(sj2*x14832);
IkReal x14837=((1.0)*cj2*sj1);
IkReal x14838=((1.0)*x14825);
IkReal x14839=(cj5*x14826);
IkReal x14840=(cj5*x14825);
IkReal x14841=(r21*sj5*x14826);
IkReal x14842=(x14837+x14836);
evalcond[0]=((-1.0)*r12*x14826);
evalcond[1]=(((r20*x14840))+(((-1.0)*r21*sj5*x14838)));
evalcond[2]=((-1.0)+(((-1.0)*x14833*x14838))+((r00*x14840)));
evalcond[3]=((((-1.0)*x14829))+(((-1.0)*r12*x14825*x14827))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r12*x14825*x14835))+(((-1.0)*x14842)));
evalcond[5]=(((cj3*x14826*x14833))+((sj3*x14830))+((sj3*x14834))+(((-1.0)*r00*x14827*x14839)));
evalcond[6]=((((-1.0)*x14827*x14830))+(((-1.0)*x14827*x14834))+(((-1.0)*r00*x14835*x14839))+((sj3*x14826*x14833)));
evalcond[7]=(((sj3*x14828))+(((-1.0)*r20*x14827*x14839))+(((-1.0)*x14842))+((cj3*x14841))+((sj3*x14831)));
evalcond[8]=((((-1.0)*cj2*x14832))+(((-1.0)*x14827*x14831))+x14829+((sj3*x14841))+(((-1.0)*r20*x14835*x14839))+(((-1.0)*x14827*x14828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14843=(r01*sj5);
IkReal x14844=(cj5*r00);
CheckValue<IkReal> x14845=IKPowWithIntegerCheck(((((-1.0)*x14843))+x14844),-1);
if(!x14845.valid){
continue;
}
CheckValue<IkReal> x14846=IKPowWithIntegerCheck(((((-1.0)*sj3*x14844))+((sj3*x14843))),-1);
if(!x14846.valid){
continue;
}
if( IKabs(x14845.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14846.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14845.value)+IKsqr(((x14846.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14845.value, ((x14846.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14847=IKsin(j4);
IkReal x14848=IKcos(j4);
IkReal x14849=((1.0)*cj3);
IkReal x14850=(cj5*r21);
IkReal x14851=(sj1*sj2);
IkReal x14852=(cj5*r01);
IkReal x14853=(r20*sj5);
IkReal x14854=((1.0)*cj1);
IkReal x14855=(r01*sj5);
IkReal x14856=(r00*sj5);
IkReal x14857=((1.0)*sj3);
IkReal x14858=(sj2*x14854);
IkReal x14859=((1.0)*cj2*sj1);
IkReal x14860=((1.0)*x14847);
IkReal x14861=(cj5*x14848);
IkReal x14862=(cj5*x14847);
IkReal x14863=(r21*sj5*x14848);
IkReal x14864=(x14859+x14858);
evalcond[0]=((-1.0)*r12*x14848);
evalcond[1]=(((r20*x14862))+(((-1.0)*r21*sj5*x14860)));
evalcond[2]=((-1.0)+(((-1.0)*x14855*x14860))+((r00*x14862)));
evalcond[3]=((((-1.0)*r12*x14847*x14849))+((cj1*cj2))+(((-1.0)*x14851)));
evalcond[4]=((((-1.0)*r12*x14847*x14857))+(((-1.0)*x14864)));
evalcond[5]=(((sj3*x14852))+((sj3*x14856))+((cj3*x14848*x14855))+(((-1.0)*r00*x14849*x14861)));
evalcond[6]=((((-1.0)*x14849*x14852))+(((-1.0)*x14849*x14856))+(((-1.0)*r00*x14857*x14861))+((sj3*x14848*x14855)));
evalcond[7]=((((-1.0)*r20*x14849*x14861))+((sj3*x14850))+((sj3*x14853))+(((-1.0)*x14864))+((cj3*x14863)));
evalcond[8]=((((-1.0)*cj2*x14854))+x14851+(((-1.0)*x14849*x14853))+(((-1.0)*x14849*x14850))+(((-1.0)*r20*x14857*x14861))+((sj3*x14863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14865=cj5*cj5;
IkReal x14866=(cj3*r00);
IkReal x14867=(r01*sj3);
IkReal x14868=(r00*sj3);
IkReal x14869=(cj3*r01);
IkReal x14870=(cj5*r20*sj5);
IkReal x14871=(r21*x14865);
IkReal x14872=(r20*x14865);
IkReal x14873=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x14874 = IKatan2WithCheck(IkReal((((r22*sj5*x14868))+((cj5*r22*x14867)))),IkReal((((x14868*x14870))+((x14868*x14871))+((x14867*x14872))+(((-1.0)*x14867*x14873))+(((-1.0)*r21*x14868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14874.valid){
continue;
}
CheckValue<IkReal> x14875=IKPowWithIntegerCheck(IKsign((((x14866*x14872))+(((-1.0)*x14866*x14873))+(((-1.0)*x14869*x14870))+(((-1.0)*x14869*x14871))+((cj3*r02*r22))+((r21*x14869)))),-1);
if(!x14875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14874.value)+(((1.5707963267949)*(x14875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14876=IKsin(j4);
IkReal x14877=IKcos(j4);
IkReal x14878=(r11*sj5);
IkReal x14879=(cj5*sj3);
IkReal x14880=(sj1*sj2);
IkReal x14881=(r21*sj5);
IkReal x14882=((1.0)*cj1);
IkReal x14883=(sj3*sj5);
IkReal x14884=(cj3*cj5);
IkReal x14885=(r01*sj5);
IkReal x14886=(sj2*x14882);
IkReal x14887=((1.0)*cj2*sj1);
IkReal x14888=((1.0)*x14877);
IkReal x14889=((1.0)*x14876);
IkReal x14890=(cj3*x14877);
IkReal x14891=((1.0)*x14884);
IkReal x14892=((1.0)*cj3*sj5);
IkReal x14893=(cj5*x14876);
IkReal x14894=(sj3*x14877);
IkReal x14895=(x14886+x14887);
evalcond[0]=((((-1.0)*r22*x14888))+((r20*x14893))+(((-1.0)*x14881*x14889)));
evalcond[1]=(((r10*x14893))+(((-1.0)*x14878*x14889))+(((-1.0)*r12*x14888)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14888))+((r00*x14893))+(((-1.0)*x14885*x14889)));
evalcond[3]=(((x14885*x14890))+((r00*x14883))+((r01*x14879))+(((-1.0)*r00*x14884*x14888))+(((-1.0)*cj3*r02*x14889)));
evalcond[4]=(((r01*x14877*x14883))+(((-1.0)*r01*x14891))+(((-1.0)*r00*x14892))+(((-1.0)*r02*sj3*x14889))+(((-1.0)*r00*x14879*x14888)));
evalcond[5]=(((r11*x14879))+((r10*x14883))+(((-1.0)*r10*x14884*x14888))+((x14878*x14890))+(((-1.0)*cj3*r12*x14889))+((cj1*cj2))+(((-1.0)*x14880)));
evalcond[6]=(((x14881*x14890))+((r21*x14879))+(((-1.0)*r20*x14884*x14888))+(((-1.0)*x14895))+((r20*x14883))+(((-1.0)*cj3*r22*x14889)));
evalcond[7]=(((x14881*x14894))+(((-1.0)*r22*sj3*x14889))+(((-1.0)*r21*x14891))+x14880+(((-1.0)*r20*x14892))+(((-1.0)*r20*x14879*x14888))+(((-1.0)*cj2*x14882)));
evalcond[8]=((((-1.0)*r10*x14879*x14888))+(((-1.0)*r12*sj3*x14889))+((x14878*x14894))+(((-1.0)*x14895))+(((-1.0)*r11*x14891))+(((-1.0)*r10*x14892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14896=((1.0)*sj5);
CheckValue<IkReal> x14897=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14896))+(((-1.0)*cj5*r21)))),-1);
if(!x14897.valid){
continue;
}
CheckValue<IkReal> x14898 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x14896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14897.value)))+(x14898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14899=IKsin(j4);
IkReal x14900=IKcos(j4);
IkReal x14901=(r11*sj5);
IkReal x14902=(cj5*sj3);
IkReal x14903=(sj1*sj2);
IkReal x14904=(r21*sj5);
IkReal x14905=((1.0)*cj1);
IkReal x14906=(sj3*sj5);
IkReal x14907=(cj3*cj5);
IkReal x14908=(r01*sj5);
IkReal x14909=(sj2*x14905);
IkReal x14910=((1.0)*cj2*sj1);
IkReal x14911=((1.0)*x14900);
IkReal x14912=((1.0)*x14899);
IkReal x14913=(cj3*x14900);
IkReal x14914=((1.0)*x14907);
IkReal x14915=((1.0)*cj3*sj5);
IkReal x14916=(cj5*x14899);
IkReal x14917=(sj3*x14900);
IkReal x14918=(x14909+x14910);
evalcond[0]=((((-1.0)*r22*x14911))+((r20*x14916))+(((-1.0)*x14904*x14912)));
evalcond[1]=(((r10*x14916))+(((-1.0)*r12*x14911))+(((-1.0)*x14901*x14912)));
evalcond[2]=((-1.0)+((r00*x14916))+(((-1.0)*r02*x14911))+(((-1.0)*x14908*x14912)));
evalcond[3]=((((-1.0)*r00*x14907*x14911))+((r00*x14906))+((r01*x14902))+(((-1.0)*cj3*r02*x14912))+((x14908*x14913)));
evalcond[4]=((((-1.0)*r00*x14902*x14911))+((r01*x14900*x14906))+(((-1.0)*r02*sj3*x14912))+(((-1.0)*r01*x14914))+(((-1.0)*r00*x14915)));
evalcond[5]=((((-1.0)*r10*x14907*x14911))+((r11*x14902))+(((-1.0)*x14903))+((x14901*x14913))+(((-1.0)*cj3*r12*x14912))+((cj1*cj2))+((r10*x14906)));
evalcond[6]=((((-1.0)*r20*x14907*x14911))+((r21*x14902))+(((-1.0)*x14918))+(((-1.0)*cj3*r22*x14912))+((x14904*x14913))+((r20*x14906)));
evalcond[7]=((((-1.0)*r20*x14902*x14911))+x14903+(((-1.0)*r22*sj3*x14912))+((x14904*x14917))+(((-1.0)*cj2*x14905))+(((-1.0)*r21*x14914))+(((-1.0)*r20*x14915)));
evalcond[8]=((((-1.0)*r12*sj3*x14912))+(((-1.0)*r11*x14914))+(((-1.0)*r10*x14915))+(((-1.0)*x14918))+((x14901*x14917))+(((-1.0)*r10*x14902*x14911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14919=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14919.valid){
continue;
}
CheckValue<IkReal> x14920 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14919.value)))+(x14920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14921=IKsin(j4);
IkReal x14922=IKcos(j4);
IkReal x14923=(r11*sj5);
IkReal x14924=(cj5*sj3);
IkReal x14925=(sj1*sj2);
IkReal x14926=(r21*sj5);
IkReal x14927=((1.0)*cj1);
IkReal x14928=(sj3*sj5);
IkReal x14929=(cj3*cj5);
IkReal x14930=(r01*sj5);
IkReal x14931=(sj2*x14927);
IkReal x14932=((1.0)*cj2*sj1);
IkReal x14933=((1.0)*x14922);
IkReal x14934=((1.0)*x14921);
IkReal x14935=(cj3*x14922);
IkReal x14936=((1.0)*x14929);
IkReal x14937=((1.0)*cj3*sj5);
IkReal x14938=(cj5*x14921);
IkReal x14939=(sj3*x14922);
IkReal x14940=(x14932+x14931);
evalcond[0]=((((-1.0)*r22*x14933))+((r20*x14938))+(((-1.0)*x14926*x14934)));
evalcond[1]=((((-1.0)*x14923*x14934))+((r10*x14938))+(((-1.0)*r12*x14933)));
evalcond[2]=((-1.0)+(((-1.0)*x14930*x14934))+((r00*x14938))+(((-1.0)*r02*x14933)));
evalcond[3]=((((-1.0)*cj3*r02*x14934))+((x14930*x14935))+((r01*x14924))+(((-1.0)*r00*x14929*x14933))+((r00*x14928)));
evalcond[4]=(((r01*x14922*x14928))+(((-1.0)*r00*x14924*x14933))+(((-1.0)*r02*sj3*x14934))+(((-1.0)*r01*x14936))+(((-1.0)*r00*x14937)));
evalcond[5]=((((-1.0)*x14925))+(((-1.0)*r10*x14929*x14933))+((r10*x14928))+(((-1.0)*cj3*r12*x14934))+((cj1*cj2))+((r11*x14924))+((x14923*x14935)));
evalcond[6]=(((r21*x14924))+(((-1.0)*x14940))+(((-1.0)*r20*x14929*x14933))+((x14926*x14935))+(((-1.0)*cj3*r22*x14934))+((r20*x14928)));
evalcond[7]=(x14925+(((-1.0)*cj2*x14927))+(((-1.0)*r22*sj3*x14934))+(((-1.0)*r21*x14936))+(((-1.0)*r20*x14937))+(((-1.0)*r20*x14924*x14933))+((x14926*x14939)));
evalcond[8]=((((-1.0)*r12*sj3*x14934))+(((-1.0)*r10*x14937))+(((-1.0)*r11*x14936))+(((-1.0)*x14940))+(((-1.0)*r10*x14924*x14933))+((x14923*x14939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14941=((-1.0)*r10);
IkReal x14943 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14943)==0){
continue;
}
IkReal x14942=pow(x14943,-0.5);
CheckValue<IkReal> x14944 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x14941),IKFAST_ATAN2_MAGTHRESH);
if(!x14944.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14944.value));
IkReal gconst13=(r11*x14942);
IkReal gconst14=(x14941*x14942);
CheckValue<IkReal> x14945 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14945.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14945.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14946=((-1.0)*r10);
IkReal x14947=x14942;
CheckValue<IkReal> x14949 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x14946),IKFAST_ATAN2_MAGTHRESH);
if(!x14949.valid){
continue;
}
IkReal x14948=((-1.0)*(x14949.value));
sj5=gconst13;
cj5=gconst14;
j5=x14948;
IkReal gconst12=x14948;
IkReal gconst13=(r11*x14947);
IkReal gconst14=(x14946*x14947);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14950=((1.0)*gconst13);
CheckValue<IkReal> x14951 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*r11*sj0*x14950))+(((-1.0)*cj0*r01*x14950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14951.valid){
continue;
}
CheckValue<IkReal> x14952=IKPowWithIntegerCheck(IKsign((((gconst14*r21))+((gconst13*r20)))),-1);
if(!x14952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14951.value)+(((1.5707963267949)*(x14952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14953=IKsin(j4);
IkReal x14954=IKcos(j4);
IkReal x14955=((1.0)*r22);
IkReal x14956=((1.0)*cj3);
IkReal x14957=(gconst13*r20);
IkReal x14958=(gconst13*sj3);
IkReal x14959=(gconst13*r11);
IkReal x14960=(sj1*sj2);
IkReal x14961=(gconst14*r21);
IkReal x14962=(gconst14*r20);
IkReal x14963=(cj2*sj1);
IkReal x14964=(cj1*sj2);
IkReal x14965=(gconst14*sj3);
IkReal x14966=(gconst14*r10);
IkReal x14967=(gconst14*r00);
IkReal x14968=((1.0)*x14953);
IkReal x14969=((1.0)*cj1*cj2);
IkReal x14970=((1.0)*x14954);
IkReal x14971=(cj3*gconst13*x14954);
evalcond[0]=((((-1.0)*gconst13*r21*x14968))+(((-1.0)*x14954*x14955))+((x14953*x14962)));
evalcond[1]=(sj0+(((-1.0)*gconst13*r01*x14968))+((x14953*x14967))+(((-1.0)*r02*x14970)));
evalcond[2]=((((-1.0)*r12*x14970))+((x14953*x14966))+(((-1.0)*cj0))+(((-1.0)*x14959*x14968)));
evalcond[3]=((((-1.0)*x14963))+(((-1.0)*x14964))+(((-1.0)*x14954*x14956*x14962))+(((-1.0)*cj3*x14953*x14955))+((sj3*x14961))+((sj3*x14957))+((r21*x14971)));
evalcond[4]=((((-1.0)*sj3*x14953*x14955))+x14960+((r21*x14954*x14958))+(((-1.0)*x14969))+(((-1.0)*x14956*x14957))+(((-1.0)*x14956*x14961))+(((-1.0)*sj3*x14962*x14970)));
evalcond[5]=(((r01*x14965))+(((-1.0)*x14954*x14956*x14967))+(((-1.0)*r02*x14953*x14956))+((r00*x14958))+(((-1.0)*cj0*x14969))+((cj0*x14960))+((r01*x14971)));
evalcond[6]=((((-1.0)*x14954*x14956*x14966))+(((-1.0)*sj0*x14969))+((r10*x14958))+((r11*x14965))+((sj0*x14960))+((cj3*x14954*x14959))+(((-1.0)*r12*x14953*x14956)));
evalcond[7]=(((r01*x14954*x14958))+(((-1.0)*r02*sj3*x14968))+(((-1.0)*gconst14*r01*x14956))+(((-1.0)*gconst13*r00*x14956))+(((-1.0)*r00*x14965*x14970))+((cj0*x14964))+((cj0*x14963)));
evalcond[8]=((((-1.0)*r10*x14965*x14970))+((sj0*x14963))+((sj0*x14964))+(((-1.0)*gconst14*r11*x14956))+(((-1.0)*r12*sj3*x14968))+(((-1.0)*gconst13*r10*x14956))+((r11*x14954*x14958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14972=((1.0)*gconst13);
CheckValue<IkReal> x14973=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14972))+(((-1.0)*gconst14*r01)))),-1);
if(!x14973.valid){
continue;
}
CheckValue<IkReal> x14974 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst14*r20))+(((-1.0)*cj0*r21*x14972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14973.value)))+(x14974.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14975=IKsin(j4);
IkReal x14976=IKcos(j4);
IkReal x14977=((1.0)*r22);
IkReal x14978=((1.0)*cj3);
IkReal x14979=(gconst13*r20);
IkReal x14980=(gconst13*sj3);
IkReal x14981=(gconst13*r11);
IkReal x14982=(sj1*sj2);
IkReal x14983=(gconst14*r21);
IkReal x14984=(gconst14*r20);
IkReal x14985=(cj2*sj1);
IkReal x14986=(cj1*sj2);
IkReal x14987=(gconst14*sj3);
IkReal x14988=(gconst14*r10);
IkReal x14989=(gconst14*r00);
IkReal x14990=((1.0)*x14975);
IkReal x14991=((1.0)*cj1*cj2);
IkReal x14992=((1.0)*x14976);
IkReal x14993=(cj3*gconst13*x14976);
evalcond[0]=((((-1.0)*x14976*x14977))+(((-1.0)*gconst13*r21*x14990))+((x14975*x14984)));
evalcond[1]=(sj0+((x14975*x14989))+(((-1.0)*gconst13*r01*x14990))+(((-1.0)*r02*x14992)));
evalcond[2]=((((-1.0)*x14981*x14990))+(((-1.0)*r12*x14992))+((x14975*x14988))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x14993))+(((-1.0)*x14976*x14978*x14984))+(((-1.0)*cj3*x14975*x14977))+((sj3*x14979))+((sj3*x14983))+(((-1.0)*x14986))+(((-1.0)*x14985)));
evalcond[4]=((((-1.0)*sj3*x14975*x14977))+(((-1.0)*x14991))+x14982+(((-1.0)*x14978*x14979))+((r21*x14976*x14980))+(((-1.0)*x14978*x14983))+(((-1.0)*sj3*x14984*x14992)));
evalcond[5]=((((-1.0)*x14976*x14978*x14989))+((cj0*x14982))+(((-1.0)*cj0*x14991))+((r00*x14980))+((r01*x14987))+(((-1.0)*r02*x14975*x14978))+((r01*x14993)));
evalcond[6]=((((-1.0)*x14976*x14978*x14988))+(((-1.0)*r12*x14975*x14978))+((sj0*x14982))+((cj3*x14976*x14981))+(((-1.0)*sj0*x14991))+((r10*x14980))+((r11*x14987)));
evalcond[7]=((((-1.0)*gconst13*r00*x14978))+(((-1.0)*gconst14*r01*x14978))+(((-1.0)*r02*sj3*x14990))+((cj0*x14985))+((cj0*x14986))+((r01*x14976*x14980))+(((-1.0)*r00*x14987*x14992)));
evalcond[8]=(((r11*x14976*x14980))+(((-1.0)*gconst14*r11*x14978))+((sj0*x14985))+((sj0*x14986))+(((-1.0)*r10*x14987*x14992))+(((-1.0)*gconst13*r10*x14978))+(((-1.0)*r12*sj3*x14990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14994=((-1.0)*r11);
IkReal x14996 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14996)==0){
continue;
}
IkReal x14995=pow(x14996,-0.5);
CheckValue<IkReal> x14997 = IKatan2WithCheck(IkReal(x14994),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14997.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14997.value))));
IkReal gconst16=(x14994*x14995);
IkReal gconst17=((1.0)*r10*x14995);
CheckValue<IkReal> x14998 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14998.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14998.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14999=((-1.0)*r11);
CheckValue<IkReal> x15002 = IKatan2WithCheck(IkReal(x14999),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15002.valid){
continue;
}
IkReal x15000=((1.0)*(x15002.value));
IkReal x15001=x14995;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15000)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15000)));
IkReal gconst16=(x14999*x15001);
IkReal gconst17=((1.0)*r10*x15001);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15003=((-1.0)*r11);
CheckValue<IkReal> x15006 = IKatan2WithCheck(IkReal(x15003),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15006.valid){
continue;
}
IkReal x15004=((1.0)*(x15006.value));
IkReal x15005=x14995;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15004)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15004)));
IkReal gconst16=(x15003*x15005);
IkReal gconst17=((1.0)*r10*x15005);
IkReal x15007=r12*r12;
IkReal x15008=(cj0*r02);
IkReal x15009=x14995;
IkReal x15010=(sj0*x15009);
j4eval[0]=((IKabs((x15008+((r12*sj0)))))+(IKabs(((((-1.0)*x15010))+((r12*x15008*x15009))+((x15007*x15010))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15011=((-1.0)*r11);
CheckValue<IkReal> x15014 = IKatan2WithCheck(IkReal(x15011),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15014.valid){
continue;
}
IkReal x15012=((1.0)*(x15014.value));
IkReal x15013=x14995;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15012)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15012)));
IkReal gconst16=(x15011*x15013);
IkReal gconst17=((1.0)*r10*x15013);
CheckValue<IkReal> x15018=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15018.valid){
continue;
}
IkReal x15015=x15018.value;
IkReal x15016=(cj3*x15015);
IkReal x15017=((1.0)*x15016);
j4eval[0]=IKsign(((((2.0)*r10*r11*r20*r21*x15016))+((x15017*(r10*r10)*(r20*r20)))+((cj3*(r22*r22)))+((x15017*(r11*r11)*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x15019=((-1.0)*r11);
CheckValue<IkReal> x15022 = IKatan2WithCheck(IkReal(x15019),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15022.valid){
continue;
}
IkReal x15020=((1.0)*(x15022.value));
IkReal x15021=x14995;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15020)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15020)));
IkReal gconst16=(x15019*x15021);
IkReal gconst17=((1.0)*r10*x15021);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15023=((-1.0)*r11);
CheckValue<IkReal> x15026 = IKatan2WithCheck(IkReal(x15023),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15026.valid){
continue;
}
IkReal x15024=((1.0)*(x15026.value));
IkReal x15025=x14995;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15024)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15024)));
IkReal gconst16=(x15023*x15025);
IkReal gconst17=((1.0)*r10*x15025);
IkReal x15027=r12*r12;
IkReal x15028=(cj0*r02);
IkReal x15029=x14995;
IkReal x15030=(sj0*x15029);
j4eval[0]=((IKabs(((((-1.0)*x15030))+((r12*x15028*x15029))+((x15027*x15030)))))+(IKabs((x15028+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15031=((-1.0)*r11);
CheckValue<IkReal> x15034 = IKatan2WithCheck(IkReal(x15031),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15034.valid){
continue;
}
IkReal x15032=((1.0)*(x15034.value));
IkReal x15033=x14995;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15032)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15032)));
IkReal gconst16=(x15031*x15033);
IkReal gconst17=((1.0)*r10*x15033);
IkReal x15035=r12*r12;
IkReal x15036=(sj1*sj2);
IkReal x15037=((1.0)*cj1*cj2);
CheckValue<IkReal> x15041=IKPowWithIntegerCheck(((-1.0)+x15035),-1);
if(!x15041.valid){
continue;
}
IkReal x15038=x15041.value;
if((((1.0)+(((-1.0)*x15035)))) < -0.00001)
continue;
IkReal x15039=IKsqrt(((1.0)+(((-1.0)*x15035))));
IkReal x15040=(r12*r22*x15038*x15039);
j4eval[0]=((IKabs(((((-1.0)*r22*x15037))+((r22*x15036)))))+(IKabs(((((-1.0)*x15037*x15040))+((x15036*x15040))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15042=(sj1*sj2);
IkReal x15043=(gconst16*r21);
IkReal x15044=(gconst17*r20);
IkReal x15045=(cj1*cj2);
CheckValue<IkReal> x15046 = IKatan2WithCheck(IkReal((((r22*x15042))+(((-1.0)*r22*x15045)))),IkReal((((x15043*x15045))+(((-1.0)*x15042*x15043))+((x15042*x15044))+(((-1.0)*x15044*x15045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15046.valid){
continue;
}
CheckValue<IkReal> x15047=IKPowWithIntegerCheck(IKsign(((((-2.0)*x15043*x15044))+(r22*r22)+(x15044*x15044)+(x15043*x15043))),-1);
if(!x15047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15046.value)+(((1.5707963267949)*(x15047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15048=IKsin(j4);
IkReal x15049=IKcos(j4);
IkReal x15050=(cj2*sj1);
IkReal x15051=(cj1*sj2);
IkReal x15052=((1.0)*x15049);
IkReal x15053=(gconst17*x15048);
IkReal x15054=(gconst16*x15049);
IkReal x15055=((1.0)*x15048);
IkReal x15056=(gconst16*x15055);
evalcond[0]=(((r20*x15053))+(((-1.0)*r21*x15056))+(((-1.0)*r22*x15052)));
evalcond[1]=(sj0+(((-1.0)*r02*x15052))+(((-1.0)*r01*x15056))+((r00*x15053)));
evalcond[2]=(((r10*x15053))+(((-1.0)*r12*x15052))+(((-1.0)*r11*x15056))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x15054))+(((-1.0)*gconst17*r20*x15052))+(((-1.0)*r22*x15055)));
evalcond[4]=(((r01*x15054))+(((-1.0)*r02*x15055))+(((-1.0)*gconst17*r00*x15052))+((cj0*x15051))+((cj0*x15050)));
evalcond[5]=((((-1.0)*gconst17*r10*x15052))+(((-1.0)*r12*x15055))+((sj0*x15051))+((sj0*x15050))+((r11*x15054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15057=((1.0)*gconst16);
CheckValue<IkReal> x15058 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x15057))+(((-1.0)*cj0*r01*x15057))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15058.valid){
continue;
}
CheckValue<IkReal> x15059=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x15059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15058.value)+(((1.5707963267949)*(x15059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15060=IKsin(j4);
IkReal x15061=IKcos(j4);
IkReal x15062=(cj2*sj1);
IkReal x15063=(cj1*sj2);
IkReal x15064=((1.0)*x15061);
IkReal x15065=(gconst17*x15060);
IkReal x15066=(gconst16*x15061);
IkReal x15067=((1.0)*x15060);
IkReal x15068=(gconst16*x15067);
evalcond[0]=(((r20*x15065))+(((-1.0)*r22*x15064))+(((-1.0)*r21*x15068)));
evalcond[1]=(sj0+(((-1.0)*r01*x15068))+((r00*x15065))+(((-1.0)*r02*x15064)));
evalcond[2]=((((-1.0)*r11*x15068))+((r10*x15065))+(((-1.0)*r12*x15064))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x15066))+(((-1.0)*gconst17*r20*x15064))+(((-1.0)*r22*x15067))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r01*x15066))+(((-1.0)*r02*x15067))+(((-1.0)*gconst17*r00*x15064))+((cj0*x15062))+((cj0*x15063)));
evalcond[5]=(((r11*x15066))+(((-1.0)*r12*x15067))+(((-1.0)*gconst17*r10*x15064))+((sj0*x15062))+((sj0*x15063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15069=((1.0)*gconst16);
CheckValue<IkReal> x15070 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x15069))+((cj0*gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15070.valid){
continue;
}
CheckValue<IkReal> x15071=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r01))+(((-1.0)*r00*x15069)))),-1);
if(!x15071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15070.value)+(((1.5707963267949)*(x15071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15072=IKsin(j4);
IkReal x15073=IKcos(j4);
IkReal x15074=(cj2*sj1);
IkReal x15075=(cj1*sj2);
IkReal x15076=((1.0)*x15073);
IkReal x15077=(gconst17*x15072);
IkReal x15078=(gconst16*x15073);
IkReal x15079=((1.0)*x15072);
IkReal x15080=(gconst16*x15079);
evalcond[0]=((((-1.0)*r22*x15076))+(((-1.0)*r21*x15080))+((r20*x15077)));
evalcond[1]=(sj0+((r00*x15077))+(((-1.0)*r02*x15076))+(((-1.0)*r01*x15080)));
evalcond[2]=((((-1.0)*r12*x15076))+(((-1.0)*r11*x15080))+((r10*x15077))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst17*r20*x15076))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15079))+((r21*x15078)));
evalcond[4]=((((-1.0)*gconst17*r00*x15076))+((r01*x15078))+(((-1.0)*r02*x15079))+((cj0*x15074))+((cj0*x15075)));
evalcond[5]=((((-1.0)*r12*x15079))+((r11*x15078))+((sj0*x15074))+((sj0*x15075))+(((-1.0)*gconst17*r10*x15076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x15081=((-1.0)*r11);
CheckValue<IkReal> x15084 = IKatan2WithCheck(IkReal(x15081),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15084.valid){
continue;
}
IkReal x15082=((1.0)*(x15084.value));
IkReal x15083=x14995;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15082)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15082)));
IkReal gconst16=(x15081*x15083);
IkReal gconst17=((1.0)*r10*x15083);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15085=((-1.0)*r11);
CheckValue<IkReal> x15088 = IKatan2WithCheck(IkReal(x15085),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15088.valid){
continue;
}
IkReal x15086=((1.0)*(x15088.value));
IkReal x15087=x14995;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15086)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15086)));
IkReal gconst16=(x15085*x15087);
IkReal gconst17=((1.0)*r10*x15087);
IkReal x15089=r12*r12;
IkReal x15090=(cj0*r02);
IkReal x15091=x14995;
IkReal x15092=(sj0*x15091);
j4eval[0]=((IKabs((x15090+((r12*sj0)))))+(IKabs(((((-1.0)*x15092))+((r12*x15090*x15091))+((x15089*x15092))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15093=((-1.0)*r11);
CheckValue<IkReal> x15096 = IKatan2WithCheck(IkReal(x15093),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15096.valid){
continue;
}
IkReal x15094=((1.0)*(x15096.value));
IkReal x15095=x14995;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15094)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15094)));
IkReal gconst16=(x15093*x15095);
IkReal gconst17=((1.0)*r10*x15095);
IkReal x15097=r12*r12;
IkReal x15098=(sj1*sj2);
IkReal x15099=((1.0)+(((-1.0)*x15097)));
IkReal x15100=((1.0)*cj1*cj2);
CheckValue<IkReal> x15107=IKPowWithIntegerCheck(x15099,-1);
if(!x15107.valid){
continue;
}
IkReal x15101=x15107.value;
CheckValue<IkReal> x15108=IKPowWithIntegerCheck(((-1.0)+x15097),-1);
if(!x15108.valid){
continue;
}
IkReal x15102=x15108.value;
IkReal x15103=((1.0)*x15101);
if((x15099) < -0.00001)
continue;
IkReal x15104=IKsqrt(x15099);
IkReal x15105=(r12*r22*x15102*x15104);
IkReal x15106=((((-2.0)*r10*r11*r20*r21*x15101))+(((-1.0)*x15103*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x15103*(r11*r11)*(r21*r21))));
j4eval[0]=x15106;
j4eval[1]=IKsign(x15106);
j4eval[2]=((IKabs(((((-1.0)*r22*x15100))+((r22*x15098)))))+(IKabs((((x15098*x15105))+(((-1.0)*x15100*x15105))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15109=(sj1*sj2);
IkReal x15110=(gconst16*r21);
IkReal x15111=(gconst17*r20);
IkReal x15112=(cj1*cj2);
CheckValue<IkReal> x15113=IKPowWithIntegerCheck(IKsign(((((2.0)*x15110*x15111))+(((-1.0)*(x15111*x15111)))+(((-1.0)*(x15110*x15110)))+(((-1.0)*(r22*r22))))),-1);
if(!x15113.valid){
continue;
}
CheckValue<IkReal> x15114 = IKatan2WithCheck(IkReal((((r22*x15109))+(((-1.0)*r22*x15112)))),IkReal((((x15109*x15111))+(((-1.0)*x15111*x15112))+((x15110*x15112))+(((-1.0)*x15109*x15110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15113.value)))+(x15114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15115=IKsin(j4);
IkReal x15116=IKcos(j4);
IkReal x15117=(gconst16*r11);
IkReal x15118=(cj2*sj1);
IkReal x15119=(gconst16*r21);
IkReal x15120=(gconst16*r01);
IkReal x15121=(gconst17*r00);
IkReal x15122=(cj1*sj2);
IkReal x15123=((1.0)*x15116);
IkReal x15124=((1.0)*x15115);
IkReal x15125=(gconst17*x15116);
IkReal x15126=(gconst17*x15115);
evalcond[0]=(((r20*x15126))+(((-1.0)*x15119*x15124))+(((-1.0)*r22*x15123)));
evalcond[1]=((((-1.0)*r02*x15123))+sj0+((x15115*x15121))+(((-1.0)*x15120*x15124)));
evalcond[2]=((((-1.0)*r12*x15123))+(((-1.0)*x15117*x15124))+((r10*x15126))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x15125))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15119*x15123))+((r22*x15115)));
evalcond[4]=(((cj0*x15122))+((x15116*x15121))+((cj0*x15118))+((r02*x15115))+(((-1.0)*x15120*x15123)));
evalcond[5]=(((sj0*x15118))+((sj0*x15122))+((r12*x15115))+(((-1.0)*x15117*x15123))+((r10*x15125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15127=((1.0)*gconst16);
CheckValue<IkReal> x15128 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x15127))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*cj0*r01*x15127)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15128.valid){
continue;
}
CheckValue<IkReal> x15129=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x15129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15128.value)+(((1.5707963267949)*(x15129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15130=IKsin(j4);
IkReal x15131=IKcos(j4);
IkReal x15132=(gconst16*r11);
IkReal x15133=(cj2*sj1);
IkReal x15134=(gconst16*r21);
IkReal x15135=(gconst16*r01);
IkReal x15136=(gconst17*r00);
IkReal x15137=(cj1*sj2);
IkReal x15138=((1.0)*x15131);
IkReal x15139=((1.0)*x15130);
IkReal x15140=(gconst17*x15131);
IkReal x15141=(gconst17*x15130);
evalcond[0]=((((-1.0)*x15134*x15139))+((r20*x15141))+(((-1.0)*r22*x15138)));
evalcond[1]=(((x15130*x15136))+(((-1.0)*r02*x15138))+sj0+(((-1.0)*x15135*x15139)));
evalcond[2]=(((r10*x15141))+(((-1.0)*x15132*x15139))+(((-1.0)*r12*x15138))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x15134*x15138))+((r20*x15140))+((r22*x15130))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x15135*x15138))+((cj0*x15133))+((cj0*x15137))+((x15131*x15136))+((r02*x15130)));
evalcond[5]=(((r10*x15140))+(((-1.0)*x15132*x15138))+((sj0*x15133))+((sj0*x15137))+((r12*x15130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15142=((1.0)*gconst16);
CheckValue<IkReal> x15143 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x15142))+((cj0*gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15143.valid){
continue;
}
CheckValue<IkReal> x15144=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r01))+(((-1.0)*r00*x15142)))),-1);
if(!x15144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15143.value)+(((1.5707963267949)*(x15144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15145=IKsin(j4);
IkReal x15146=IKcos(j4);
IkReal x15147=(gconst16*r11);
IkReal x15148=(cj2*sj1);
IkReal x15149=(gconst16*r21);
IkReal x15150=(gconst16*r01);
IkReal x15151=(gconst17*r00);
IkReal x15152=(cj1*sj2);
IkReal x15153=((1.0)*x15146);
IkReal x15154=((1.0)*x15145);
IkReal x15155=(gconst17*x15146);
IkReal x15156=(gconst17*x15145);
evalcond[0]=((((-1.0)*r22*x15153))+(((-1.0)*x15149*x15154))+((r20*x15156)));
evalcond[1]=((((-1.0)*r02*x15153))+sj0+((x15145*x15151))+(((-1.0)*x15150*x15154)));
evalcond[2]=((((-1.0)*x15147*x15154))+(((-1.0)*r12*x15153))+((r10*x15156))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x15145))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15149*x15153))+((r20*x15155)));
evalcond[4]=(((r02*x15145))+((cj0*x15152))+(((-1.0)*x15150*x15153))+((cj0*x15148))+((x15146*x15151)));
evalcond[5]=(((r12*x15145))+(((-1.0)*x15147*x15153))+((sj0*x15152))+((r10*x15155))+((sj0*x15148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15157=((-1.0)*r11);
CheckValue<IkReal> x15160 = IKatan2WithCheck(IkReal(x15157),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15160.valid){
continue;
}
IkReal x15158=((1.0)*(x15160.value));
IkReal x15159=x14995;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15158)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15158)));
IkReal gconst16=(x15157*x15159);
IkReal gconst17=((1.0)*r10*x15159);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15161=gconst17*gconst17;
IkReal x15162=gconst16*gconst16;
IkReal x15163=(cj3*r01);
IkReal x15164=(r01*sj3);
IkReal x15165=(cj3*r00);
IkReal x15166=(r00*sj3);
IkReal x15167=(gconst16*gconst17);
IkReal x15168=((1.0)*r21);
IkReal x15169=(r21*x15162);
IkReal x15170=(r20*x15161);
CheckValue<IkReal> x15171=IKPowWithIntegerCheck(IKsign((((x15163*x15169))+(((-1.0)*x15165*x15167*x15168))+((x15165*x15170))+((cj3*r02*r22))+(((-1.0)*r20*x15163*x15167)))),-1);
if(!x15171.valid){
continue;
}
CheckValue<IkReal> x15172 = IKatan2WithCheck(IkReal((((gconst17*r22*x15164))+((gconst16*r22*x15166)))),IkReal((((x15164*x15170))+(((-1.0)*x15164*x15167*x15168))+(((-1.0)*x15162*x15166*x15168))+((r20*x15166*x15167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15171.value)))+(x15172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15173=IKsin(j4);
IkReal x15174=IKcos(j4);
IkReal x15175=(cj3*gconst17);
IkReal x15176=((1.0)*sj2);
IkReal x15177=((1.0)*r21);
IkReal x15178=(gconst16*r11);
IkReal x15179=(gconst16*r01);
IkReal x15180=(r20*sj3);
IkReal x15181=(gconst17*sj3);
IkReal x15182=((1.0)*cj2);
IkReal x15183=(gconst16*r00);
IkReal x15184=((1.0)*cj3);
IkReal x15185=(gconst16*r10);
IkReal x15186=(cj1*x15176);
IkReal x15187=(sj1*x15182);
IkReal x15188=((1.0)*x15174);
IkReal x15189=((1.0)*x15173);
IkReal x15190=(gconst17*x15173);
IkReal x15191=(cj3*x15174);
IkReal x15192=(sj3*x15174);
IkReal x15193=(gconst16*r21*x15174);
IkReal x15194=(x15186+x15187);
evalcond[0]=((((-1.0)*gconst16*x15173*x15177))+((r20*x15190))+(((-1.0)*r22*x15188)));
evalcond[1]=(((r10*x15190))+(((-1.0)*x15178*x15189))+(((-1.0)*r12*x15188)));
evalcond[2]=((-1.0)+((r00*x15190))+(((-1.0)*r02*x15188))+(((-1.0)*x15179*x15189)));
evalcond[3]=((((-1.0)*r00*x15175*x15188))+((r01*x15181))+((sj3*x15183))+(((-1.0)*r02*x15173*x15184))+((x15179*x15191)));
evalcond[4]=((((-1.0)*r02*sj3*x15189))+(((-1.0)*r01*x15175))+(((-1.0)*r00*x15181*x15188))+((x15179*x15192))+(((-1.0)*x15183*x15184)));
evalcond[5]=((((-1.0)*r10*x15175*x15188))+(((-1.0)*sj1*x15176))+((sj3*x15185))+(((-1.0)*r12*x15173*x15184))+((r11*x15181))+((cj1*cj2))+((x15178*x15191)));
evalcond[6]=(((gconst16*x15180))+((gconst16*r21*x15191))+(((-1.0)*x15194))+((r21*x15181))+(((-1.0)*r20*x15175*x15188))+(((-1.0)*r22*x15173*x15184)));
evalcond[7]=((((-1.0)*gconst16*r20*x15184))+(((-1.0)*cj1*x15182))+((sj1*sj2))+(((-1.0)*x15175*x15177))+((gconst16*r21*x15192))+(((-1.0)*r22*sj3*x15189))+(((-1.0)*gconst17*x15180*x15188)));
evalcond[8]=((((-1.0)*x15184*x15185))+(((-1.0)*r12*sj3*x15189))+(((-1.0)*r10*x15181*x15188))+(((-1.0)*r11*x15175))+(((-1.0)*x15194))+((x15178*x15192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15195=((1.0)*gconst16);
CheckValue<IkReal> x15196 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x15195))+((gconst17*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15196.valid){
continue;
}
CheckValue<IkReal> x15197=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r21))+(((-1.0)*r20*x15195)))),-1);
if(!x15197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15196.value)+(((1.5707963267949)*(x15197.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15198=IKsin(j4);
IkReal x15199=IKcos(j4);
IkReal x15200=(cj3*gconst17);
IkReal x15201=((1.0)*sj2);
IkReal x15202=((1.0)*r21);
IkReal x15203=(gconst16*r11);
IkReal x15204=(gconst16*r01);
IkReal x15205=(r20*sj3);
IkReal x15206=(gconst17*sj3);
IkReal x15207=((1.0)*cj2);
IkReal x15208=(gconst16*r00);
IkReal x15209=((1.0)*cj3);
IkReal x15210=(gconst16*r10);
IkReal x15211=(cj1*x15201);
IkReal x15212=(sj1*x15207);
IkReal x15213=((1.0)*x15199);
IkReal x15214=((1.0)*x15198);
IkReal x15215=(gconst17*x15198);
IkReal x15216=(cj3*x15199);
IkReal x15217=(sj3*x15199);
IkReal x15218=(gconst16*r21*x15199);
IkReal x15219=(x15211+x15212);
evalcond[0]=(((r20*x15215))+(((-1.0)*r22*x15213))+(((-1.0)*gconst16*x15198*x15202)));
evalcond[1]=(((r10*x15215))+(((-1.0)*r12*x15213))+(((-1.0)*x15203*x15214)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15213))+((r00*x15215))+(((-1.0)*x15204*x15214)));
evalcond[3]=(((x15204*x15216))+((sj3*x15208))+(((-1.0)*r02*x15198*x15209))+((r01*x15206))+(((-1.0)*r00*x15200*x15213)));
evalcond[4]=((((-1.0)*x15208*x15209))+(((-1.0)*r01*x15200))+(((-1.0)*r02*sj3*x15214))+((x15204*x15217))+(((-1.0)*r00*x15206*x15213)));
evalcond[5]=((((-1.0)*sj1*x15201))+((x15203*x15216))+((sj3*x15210))+((r11*x15206))+((cj1*cj2))+(((-1.0)*r10*x15200*x15213))+(((-1.0)*r12*x15198*x15209)));
evalcond[6]=((((-1.0)*r22*x15198*x15209))+((gconst16*r21*x15216))+(((-1.0)*r20*x15200*x15213))+((gconst16*x15205))+((r21*x15206))+(((-1.0)*x15219)));
evalcond[7]=((((-1.0)*gconst16*r20*x15209))+((gconst16*r21*x15217))+(((-1.0)*cj1*x15207))+((sj1*sj2))+(((-1.0)*r22*sj3*x15214))+(((-1.0)*x15200*x15202))+(((-1.0)*gconst17*x15205*x15213)));
evalcond[8]=((((-1.0)*r11*x15200))+((x15203*x15217))+(((-1.0)*r10*x15206*x15213))+(((-1.0)*x15219))+(((-1.0)*r12*sj3*x15214))+(((-1.0)*x15209*x15210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15220=((-1.0)*r11);
IkReal x15221=((-1.0)*r10);
CheckValue<IkReal> x15223 = IKatan2WithCheck(IkReal(x15220),IkReal(x15221),IKFAST_ATAN2_MAGTHRESH);
if(!x15223.valid){
continue;
}
IkReal x15222=((1.0)*(x15223.value));
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15222)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15221);
rxp1_1=(px*r21);
rxp1_2=(px*x15220);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15222)));
IkReal gconst16=x15220;
IkReal gconst17=((1.0)*r10);
j4eval[0]=1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15224=((-1.0)*r11);
IkReal x15225=((-1.0)*r10);
CheckValue<IkReal> x15227 = IKatan2WithCheck(IkReal(x15224),IkReal(x15225),IKFAST_ATAN2_MAGTHRESH);
if(!x15227.valid){
continue;
}
IkReal x15226=((1.0)*(x15227.value));
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15226)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15225);
rxp1_1=(px*r21);
rxp1_2=(px*x15224);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15226)));
IkReal gconst16=x15224;
IkReal gconst17=((1.0)*r10);
IkReal x15228=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=((((-1.0)*r10*r20*x15228))+(((-1.0)*r11*r21*x15228)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15229=((-1.0)*r11);
IkReal x15230=((-1.0)*r10);
CheckValue<IkReal> x15232 = IKatan2WithCheck(IkReal(x15229),IkReal(x15230),IKFAST_ATAN2_MAGTHRESH);
if(!x15232.valid){
continue;
}
IkReal x15231=((1.0)*(x15232.value));
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15231)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15230);
rxp1_1=(px*r21);
rxp1_2=(px*x15229);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15231)));
IkReal gconst16=x15229;
IkReal gconst17=((1.0)*r10);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15234=IKPowWithIntegerCheck(r02,-1);
if(!x15234.valid){
continue;
}
IkReal x15233=x15234.value;
CheckValue<IkReal> x15235=IKPowWithIntegerCheck(sj3,-1);
if(!x15235.valid){
continue;
}
if( IKabs((x15233*(x15235.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x15233)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15233*(x15235.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr((sj0*x15233))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15233*(x15235.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), (sj0*x15233));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15236=IKsin(j4);
IkReal x15237=IKcos(j4);
IkReal x15238=((1.0)*cj1);
IkReal x15239=(cj3*r21);
IkReal x15240=((1.0)*gconst17);
IkReal x15241=(cj0*cj2);
IkReal x15242=(sj1*sj2);
IkReal x15243=(r21*sj3);
IkReal x15244=(cj2*sj0);
IkReal x15245=(r20*sj3);
IkReal x15246=(r11*sj3);
IkReal x15247=(cj3*r11);
IkReal x15248=(cj1*sj2);
IkReal x15249=(cj3*r20);
IkReal x15250=((1.0)*gconst16);
IkReal x15251=(gconst16*x15237);
IkReal x15252=((1.0)*x15236);
IkReal x15253=(r10*x15237);
IkReal x15254=(gconst17*x15236);
evalcond[0]=(sj0+(((-1.0)*r02*x15237)));
evalcond[1]=((((-1.0)*r21*x15236*x15250))+((r20*x15254)));
evalcond[2]=(((cj0*x15248))+(((-1.0)*r02*sj3*x15252))+((sj1*x15241)));
evalcond[3]=((((-1.0)*r11*x15236*x15250))+((r10*x15254))+(((-1.0)*cj0)));
evalcond[4]=(((cj0*x15242))+(((-1.0)*cj3*r02*x15252))+(((-1.0)*x15238*x15241)));
evalcond[5]=((((-1.0)*x15237*x15240*x15249))+(((-1.0)*sj2*x15238))+(((-1.0)*cj2*sj1))+((gconst17*x15243))+((x15239*x15251))+((gconst16*x15245)));
evalcond[6]=((((-1.0)*x15237*x15240*x15245))+((x15243*x15251))+(((-1.0)*cj2*x15238))+x15242+(((-1.0)*x15239*x15240))+(((-1.0)*x15249*x15250)));
evalcond[7]=(((x15247*x15251))+(((-1.0)*cj3*x15240*x15253))+((gconst17*x15246))+((sj0*x15242))+((gconst16*r10*sj3))+(((-1.0)*x15238*x15244)));
evalcond[8]=(((x15246*x15251))+(((-1.0)*x15240*x15247))+(((-1.0)*cj3*r10*x15250))+((sj0*x15248))+((sj1*x15244))+(((-1.0)*sj3*x15240*x15253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15255=((1.0)*gconst17);
IkReal x15256=((1.0)*gconst16);
CheckValue<IkReal> x15257=IKPowWithIntegerCheck(((((-1.0)*r11*x15256))+((gconst17*r10))),-1);
if(!x15257.valid){
continue;
}
CheckValue<IkReal> x15258=IKPowWithIntegerCheck((((cj3*gconst16*r21))+(((-1.0)*cj3*r20*x15255))),-1);
if(!x15258.valid){
continue;
}
if( IKabs((cj0*(x15257.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15258.value)*((((cj2*sj1))+(((-1.0)*r20*sj3*x15256))+((cj1*sj2))+(((-1.0)*r21*sj3*x15255)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x15257.value)))+IKsqr(((x15258.value)*((((cj2*sj1))+(((-1.0)*r20*sj3*x15256))+((cj1*sj2))+(((-1.0)*r21*sj3*x15255))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x15257.value)), ((x15258.value)*((((cj2*sj1))+(((-1.0)*r20*sj3*x15256))+((cj1*sj2))+(((-1.0)*r21*sj3*x15255))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15259=IKsin(j4);
IkReal x15260=IKcos(j4);
IkReal x15261=((1.0)*cj1);
IkReal x15262=(cj3*r21);
IkReal x15263=((1.0)*gconst17);
IkReal x15264=(cj0*cj2);
IkReal x15265=(sj1*sj2);
IkReal x15266=(r21*sj3);
IkReal x15267=(cj2*sj0);
IkReal x15268=(r20*sj3);
IkReal x15269=(r11*sj3);
IkReal x15270=(cj3*r11);
IkReal x15271=(cj1*sj2);
IkReal x15272=(cj3*r20);
IkReal x15273=((1.0)*gconst16);
IkReal x15274=(gconst16*x15260);
IkReal x15275=((1.0)*x15259);
IkReal x15276=(r10*x15260);
IkReal x15277=(gconst17*x15259);
evalcond[0]=(sj0+(((-1.0)*r02*x15260)));
evalcond[1]=((((-1.0)*r21*x15259*x15273))+((r20*x15277)));
evalcond[2]=(((cj0*x15271))+((sj1*x15264))+(((-1.0)*r02*sj3*x15275)));
evalcond[3]=(((r10*x15277))+(((-1.0)*r11*x15259*x15273))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*cj3*r02*x15275))+((cj0*x15265))+(((-1.0)*x15261*x15264)));
evalcond[5]=((((-1.0)*sj2*x15261))+(((-1.0)*cj2*sj1))+((x15262*x15274))+((gconst17*x15266))+((gconst16*x15268))+(((-1.0)*x15260*x15263*x15272)));
evalcond[6]=((((-1.0)*x15260*x15263*x15268))+(((-1.0)*cj2*x15261))+x15265+((x15266*x15274))+(((-1.0)*x15262*x15263))+(((-1.0)*x15272*x15273)));
evalcond[7]=(((x15270*x15274))+((sj0*x15265))+(((-1.0)*cj3*x15263*x15276))+(((-1.0)*x15261*x15267))+((gconst17*x15269))+((gconst16*r10*sj3)));
evalcond[8]=(((sj1*x15267))+(((-1.0)*x15263*x15270))+((x15269*x15274))+(((-1.0)*sj3*x15263*x15276))+(((-1.0)*cj3*r10*x15273))+((sj0*x15271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15278=IKPowWithIntegerCheck(((((-1.0)*gconst16*r11))+((gconst17*r10))),-1);
if(!x15278.valid){
continue;
}
CheckValue<IkReal> x15279=IKPowWithIntegerCheck(r02,-1);
if(!x15279.valid){
continue;
}
if( IKabs((cj0*(x15278.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*(x15279.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x15278.value)))+IKsqr((sj0*(x15279.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x15278.value)), (sj0*(x15279.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15280=IKsin(j4);
IkReal x15281=IKcos(j4);
IkReal x15282=((1.0)*cj1);
IkReal x15283=(cj3*r21);
IkReal x15284=((1.0)*gconst17);
IkReal x15285=(cj0*cj2);
IkReal x15286=(sj1*sj2);
IkReal x15287=(r21*sj3);
IkReal x15288=(cj2*sj0);
IkReal x15289=(r20*sj3);
IkReal x15290=(r11*sj3);
IkReal x15291=(cj3*r11);
IkReal x15292=(cj1*sj2);
IkReal x15293=(cj3*r20);
IkReal x15294=((1.0)*gconst16);
IkReal x15295=(gconst16*x15281);
IkReal x15296=((1.0)*x15280);
IkReal x15297=(r10*x15281);
IkReal x15298=(gconst17*x15280);
evalcond[0]=(sj0+(((-1.0)*r02*x15281)));
evalcond[1]=(((r20*x15298))+(((-1.0)*r21*x15280*x15294)));
evalcond[2]=((((-1.0)*r02*sj3*x15296))+((sj1*x15285))+((cj0*x15292)));
evalcond[3]=(((r10*x15298))+(((-1.0)*r11*x15280*x15294))+(((-1.0)*cj0)));
evalcond[4]=(((cj0*x15286))+(((-1.0)*x15282*x15285))+(((-1.0)*cj3*r02*x15296)));
evalcond[5]=(((gconst17*x15287))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x15282))+((x15283*x15295))+(((-1.0)*x15281*x15284*x15293))+((gconst16*x15289)));
evalcond[6]=((((-1.0)*x15281*x15284*x15289))+(((-1.0)*cj2*x15282))+x15286+(((-1.0)*x15283*x15284))+((x15287*x15295))+(((-1.0)*x15293*x15294)));
evalcond[7]=(((sj0*x15286))+(((-1.0)*x15282*x15288))+((x15291*x15295))+((gconst17*x15290))+((gconst16*r10*sj3))+(((-1.0)*cj3*x15284*x15297)));
evalcond[8]=((((-1.0)*sj3*x15284*x15297))+(((-1.0)*cj3*r10*x15294))+((sj1*x15288))+((sj0*x15292))+((x15290*x15295))+(((-1.0)*x15284*x15291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15299=((-1.0)*r11);
CheckValue<IkReal> x15302 = IKatan2WithCheck(IkReal(x15299),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15302.valid){
continue;
}
IkReal x15300=((1.0)*(x15302.value));
IkReal x15301=x14995;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15300)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15300)));
IkReal gconst16=(x15299*x15301);
IkReal gconst17=((1.0)*r10*x15301);
IkReal x15303=r12*r12;
IkReal x15304=(cj0*r02);
IkReal x15305=x14995;
IkReal x15306=(sj0*x15305);
j4eval[0]=((IKabs((x15304+((r12*sj0)))))+(IKabs(((((-1.0)*x15306))+((r12*x15304*x15305))+((x15303*x15306))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15307=(cj1*cj2);
IkReal x15308=(sj0*sj3);
IkReal x15309=(gconst16*r21);
IkReal x15310=(cj3*r02);
IkReal x15311=(gconst16*r20);
IkReal x15312=(gconst17*r20);
IkReal x15313=(gconst17*sj3);
IkReal x15314=(gconst17*r21);
IkReal x15315=((1.0)*sj3);
IkReal x15316=((1.0)*sj1*sj2);
CheckValue<IkReal> x15317=IKPowWithIntegerCheck(((((-1.0)*gconst16*r01*x15309*x15315))+((r01*x15311*x15313))+(((-1.0)*r00*x15312*x15313))+((r00*x15309*x15313))),-1);
if(!x15317.valid){
continue;
}
CheckValue<IkReal> x15318=IKPowWithIntegerCheck((((sj3*x15309))+(((-1.0)*x15312*x15315))),-1);
if(!x15318.valid){
continue;
}
if( IKabs(((x15317.value)*((((r02*x15307))+(((-1.0)*x15308*x15309))+((x15308*x15312))+(((-1.0)*r02*x15316))+((x15310*x15311))+((x15310*x15314)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15318.value)*(((((-1.0)*x15316))+x15307+((cj3*x15311))+((cj3*x15314)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15317.value)*((((r02*x15307))+(((-1.0)*x15308*x15309))+((x15308*x15312))+(((-1.0)*r02*x15316))+((x15310*x15311))+((x15310*x15314))))))+IKsqr(((x15318.value)*(((((-1.0)*x15316))+x15307+((cj3*x15311))+((cj3*x15314))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15317.value)*((((r02*x15307))+(((-1.0)*x15308*x15309))+((x15308*x15312))+(((-1.0)*r02*x15316))+((x15310*x15311))+((x15310*x15314))))), ((x15318.value)*(((((-1.0)*x15316))+x15307+((cj3*x15311))+((cj3*x15314))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15319=IKsin(j4);
IkReal x15320=IKcos(j4);
IkReal x15321=((1.0)*cj1);
IkReal x15322=(gconst17*sj3);
IkReal x15323=(sj1*sj2);
IkReal x15324=(cj2*sj1);
IkReal x15325=(cj1*sj2);
IkReal x15326=(gconst16*sj3);
IkReal x15327=((1.0)*cj3*gconst17);
IkReal x15328=(r00*x15320);
IkReal x15329=((1.0)*x15320);
IkReal x15330=(gconst17*x15319);
IkReal x15331=(r11*x15320);
IkReal x15332=((1.0)*cj3*gconst16);
IkReal x15333=(gconst16*r21*x15320);
IkReal x15334=((1.0)*gconst16*x15319);
IkReal x15335=(gconst16*r01*x15320);
IkReal x15336=((1.0)*cj3*x15319);
IkReal x15337=((1.0)*sj3*x15319);
evalcond[0]=(((r20*x15330))+(((-1.0)*r21*x15334)));
evalcond[1]=(sj0+((r00*x15330))+(((-1.0)*r01*x15334))+(((-1.0)*r02*x15329)));
evalcond[2]=((((-1.0)*r12*x15329))+((r10*x15330))+(((-1.0)*r11*x15334))+(((-1.0)*cj0)));
evalcond[3]=(((cj3*x15333))+(((-1.0)*x15324))+(((-1.0)*sj2*x15321))+(((-1.0)*r20*x15320*x15327))+((r21*x15322))+((r20*x15326)));
evalcond[4]=((((-1.0)*r20*x15332))+(((-1.0)*r21*x15327))+(((-1.0)*cj2*x15321))+x15323+((r21*x15320*x15326))+(((-1.0)*r20*x15322*x15329)));
evalcond[5]=(((cj3*x15335))+(((-1.0)*cj0*cj2*x15321))+((r00*x15326))+((r01*x15322))+((cj0*x15323))+(((-1.0)*r02*x15336))+(((-1.0)*x15327*x15328)));
evalcond[6]=((((-1.0)*r10*x15320*x15327))+((r11*x15322))+(((-1.0)*cj2*sj0*x15321))+((r10*x15326))+(((-1.0)*r12*x15336))+((cj3*gconst16*x15331))+((sj0*x15323)));
evalcond[7]=(((cj0*x15325))+((cj0*x15324))+(((-1.0)*r02*x15337))+(((-1.0)*x15322*x15328))+(((-1.0)*r00*x15332))+(((-1.0)*r01*x15327))+((r01*x15320*x15326)));
evalcond[8]=((((-1.0)*r11*x15327))+((x15326*x15331))+(((-1.0)*r12*x15337))+(((-1.0)*r10*x15332))+(((-1.0)*r10*x15322*x15329))+((sj0*x15325))+((sj0*x15324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15338=((1.0)*gconst16);
CheckValue<IkReal> x15339 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x15338))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*cj0*r01*x15338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15339.valid){
continue;
}
CheckValue<IkReal> x15340=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x15340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15339.value)+(((1.5707963267949)*(x15340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15341=IKsin(j4);
IkReal x15342=IKcos(j4);
IkReal x15343=((1.0)*cj1);
IkReal x15344=(gconst17*sj3);
IkReal x15345=(sj1*sj2);
IkReal x15346=(cj2*sj1);
IkReal x15347=(cj1*sj2);
IkReal x15348=(gconst16*sj3);
IkReal x15349=((1.0)*cj3*gconst17);
IkReal x15350=(r00*x15342);
IkReal x15351=((1.0)*x15342);
IkReal x15352=(gconst17*x15341);
IkReal x15353=(r11*x15342);
IkReal x15354=((1.0)*cj3*gconst16);
IkReal x15355=(gconst16*r21*x15342);
IkReal x15356=((1.0)*gconst16*x15341);
IkReal x15357=(gconst16*r01*x15342);
IkReal x15358=((1.0)*cj3*x15341);
IkReal x15359=((1.0)*sj3*x15341);
evalcond[0]=(((r20*x15352))+(((-1.0)*r21*x15356)));
evalcond[1]=(sj0+(((-1.0)*r02*x15351))+(((-1.0)*r01*x15356))+((r00*x15352)));
evalcond[2]=((((-1.0)*r11*x15356))+((r10*x15352))+(((-1.0)*r12*x15351))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x15344))+(((-1.0)*sj2*x15343))+((cj3*x15355))+((r20*x15348))+(((-1.0)*r20*x15342*x15349))+(((-1.0)*x15346)));
evalcond[4]=((((-1.0)*r21*x15349))+(((-1.0)*r20*x15344*x15351))+x15345+(((-1.0)*cj2*x15343))+((r21*x15342*x15348))+(((-1.0)*r20*x15354)));
evalcond[5]=(((r00*x15348))+((cj0*x15345))+((r01*x15344))+(((-1.0)*x15349*x15350))+(((-1.0)*r02*x15358))+((cj3*x15357))+(((-1.0)*cj0*cj2*x15343)));
evalcond[6]=(((cj3*gconst16*x15353))+((sj0*x15345))+((r11*x15344))+((r10*x15348))+(((-1.0)*r12*x15358))+(((-1.0)*r10*x15342*x15349))+(((-1.0)*cj2*sj0*x15343)));
evalcond[7]=((((-1.0)*r01*x15349))+((cj0*x15346))+((cj0*x15347))+(((-1.0)*x15344*x15350))+(((-1.0)*r02*x15359))+((r01*x15342*x15348))+(((-1.0)*r00*x15354)));
evalcond[8]=((((-1.0)*r10*x15354))+((sj0*x15346))+((sj0*x15347))+(((-1.0)*r11*x15349))+(((-1.0)*r10*x15344*x15351))+((x15348*x15353))+(((-1.0)*r12*x15359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15360=gconst16*gconst16;
IkReal x15361=r21*r21;
IkReal x15362=gconst17*gconst17;
IkReal x15363=r20*r20;
IkReal x15364=(cj1*sj2);
IkReal x15365=(gconst16*r21);
IkReal x15366=((1.0)*r22);
IkReal x15367=(r20*sj3);
IkReal x15368=(gconst17*r20);
IkReal x15369=(cj2*sj1);
IkReal x15370=(gconst17*sj3);
CheckValue<IkReal> x15371=IKPowWithIntegerCheck(IKsign((((cj3*x15360*x15361))+((cj3*x15362*x15363))+(((-2.0)*cj3*x15365*x15368))+((cj3*(r22*r22))))),-1);
if(!x15371.valid){
continue;
}
CheckValue<IkReal> x15372 = IKatan2WithCheck(IkReal((((gconst16*r22*x15367))+(((-1.0)*x15364*x15366))+(((-1.0)*x15366*x15369))+((r21*r22*x15370)))),IkReal((((gconst16*x15363*x15370))+(((-1.0)*r21*x15360*x15367))+((r21*x15362*x15367))+(((-1.0)*x15368*x15369))+(((-1.0)*x15364*x15368))+(((-1.0)*gconst16*x15361*x15370))+((x15364*x15365))+((x15365*x15369)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15371.value)))+(x15372.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15373=IKsin(j4);
IkReal x15374=IKcos(j4);
IkReal x15375=(cj3*gconst17);
IkReal x15376=((1.0)*cj1);
IkReal x15377=((1.0)*r21);
IkReal x15378=(gconst17*sj3);
IkReal x15379=(sj1*sj2);
IkReal x15380=(cj2*sj1);
IkReal x15381=(cj1*sj2);
IkReal x15382=(gconst16*sj3);
IkReal x15383=((1.0)*x15374);
IkReal x15384=(gconst17*x15373);
IkReal x15385=(r11*x15374);
IkReal x15386=((1.0)*cj3*gconst16);
IkReal x15387=(gconst16*r21*x15374);
IkReal x15388=((1.0)*gconst16*x15373);
IkReal x15389=((1.0)*cj3*x15373);
IkReal x15390=(gconst16*r01*x15374);
IkReal x15391=((1.0)*sj3*x15373);
evalcond[0]=((((-1.0)*gconst16*x15373*x15377))+(((-1.0)*r22*x15383))+((r20*x15384)));
evalcond[1]=(sj0+(((-1.0)*r02*x15383))+(((-1.0)*r01*x15388))+((r00*x15384)));
evalcond[2]=(((r10*x15384))+(((-1.0)*r12*x15383))+(((-1.0)*r11*x15388))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x15378))+((cj3*x15387))+(((-1.0)*r22*x15389))+(((-1.0)*x15380))+(((-1.0)*sj2*x15376))+((r20*x15382))+(((-1.0)*r20*x15375*x15383)));
evalcond[4]=((((-1.0)*r20*x15386))+((r21*x15374*x15382))+(((-1.0)*r22*x15391))+(((-1.0)*cj2*x15376))+x15379+(((-1.0)*x15375*x15377))+(((-1.0)*r20*x15378*x15383)));
evalcond[5]=((((-1.0)*cj0*cj2*x15376))+((r01*x15378))+((cj0*x15379))+((cj3*x15390))+(((-1.0)*r00*x15375*x15383))+(((-1.0)*r02*x15389))+((r00*x15382)));
evalcond[6]=((((-1.0)*r10*x15375*x15383))+(((-1.0)*cj2*sj0*x15376))+((r10*x15382))+(((-1.0)*r12*x15389))+((sj0*x15379))+((cj3*gconst16*x15385))+((r11*x15378)));
evalcond[7]=(((cj0*x15381))+((cj0*x15380))+((r01*x15374*x15382))+(((-1.0)*r00*x15378*x15383))+(((-1.0)*r02*x15391))+(((-1.0)*r01*x15375))+(((-1.0)*r00*x15386)));
evalcond[8]=((((-1.0)*r11*x15375))+(((-1.0)*r12*x15391))+((sj0*x15381))+((sj0*x15380))+(((-1.0)*r10*x15386))+((x15382*x15385))+(((-1.0)*r10*x15378*x15383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15392=((1.0)*gconst16);
CheckValue<IkReal> x15393=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x15393.valid){
continue;
}
CheckValue<IkReal> x15394 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x15392))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*r11*sj0*x15392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15393.value)))+(x15394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15395=IKsin(j4);
IkReal x15396=IKcos(j4);
IkReal x15397=(cj3*gconst17);
IkReal x15398=((1.0)*cj1);
IkReal x15399=((1.0)*r21);
IkReal x15400=(gconst17*sj3);
IkReal x15401=(sj1*sj2);
IkReal x15402=(cj2*sj1);
IkReal x15403=(cj1*sj2);
IkReal x15404=(gconst16*sj3);
IkReal x15405=((1.0)*x15396);
IkReal x15406=(gconst17*x15395);
IkReal x15407=(r11*x15396);
IkReal x15408=((1.0)*cj3*gconst16);
IkReal x15409=(gconst16*r21*x15396);
IkReal x15410=((1.0)*gconst16*x15395);
IkReal x15411=((1.0)*cj3*x15395);
IkReal x15412=(gconst16*r01*x15396);
IkReal x15413=((1.0)*sj3*x15395);
evalcond[0]=((((-1.0)*gconst16*x15395*x15399))+(((-1.0)*r22*x15405))+((r20*x15406)));
evalcond[1]=(sj0+(((-1.0)*r01*x15410))+((r00*x15406))+(((-1.0)*r02*x15405)));
evalcond[2]=((((-1.0)*r11*x15410))+(((-1.0)*r12*x15405))+((r10*x15406))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x15398))+(((-1.0)*x15402))+(((-1.0)*r20*x15397*x15405))+(((-1.0)*r22*x15411))+((r20*x15404))+((r21*x15400))+((cj3*x15409)));
evalcond[4]=((((-1.0)*r20*x15408))+(((-1.0)*r20*x15400*x15405))+(((-1.0)*r22*x15413))+((r21*x15396*x15404))+x15401+(((-1.0)*cj2*x15398))+(((-1.0)*x15397*x15399)));
evalcond[5]=(((cj3*x15412))+((r00*x15404))+((r01*x15400))+(((-1.0)*cj0*cj2*x15398))+(((-1.0)*r00*x15397*x15405))+(((-1.0)*r02*x15411))+((cj0*x15401)));
evalcond[6]=(((cj3*gconst16*x15407))+(((-1.0)*cj2*sj0*x15398))+(((-1.0)*r10*x15397*x15405))+(((-1.0)*r12*x15411))+((r10*x15404))+((r11*x15400))+((sj0*x15401)));
evalcond[7]=((((-1.0)*r00*x15408))+(((-1.0)*r01*x15397))+(((-1.0)*r02*x15413))+(((-1.0)*r00*x15400*x15405))+((cj0*x15403))+((cj0*x15402))+((r01*x15396*x15404)));
evalcond[8]=((((-1.0)*r12*x15413))+(((-1.0)*r10*x15408))+((x15404*x15407))+(((-1.0)*r11*x15397))+((sj0*x15402))+((sj0*x15403))+(((-1.0)*r10*x15400*x15405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15414=((1.0)*gconst16);
CheckValue<IkReal> x15415=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r01))+(((-1.0)*r00*x15414)))),-1);
if(!x15415.valid){
continue;
}
CheckValue<IkReal> x15416 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x15414))+((cj0*gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15415.value)))+(x15416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15417=IKsin(j4);
IkReal x15418=IKcos(j4);
IkReal x15419=(cj3*gconst17);
IkReal x15420=((1.0)*cj1);
IkReal x15421=((1.0)*r21);
IkReal x15422=(gconst17*sj3);
IkReal x15423=(sj1*sj2);
IkReal x15424=(cj2*sj1);
IkReal x15425=(cj1*sj2);
IkReal x15426=(gconst16*sj3);
IkReal x15427=((1.0)*x15418);
IkReal x15428=(gconst17*x15417);
IkReal x15429=(r11*x15418);
IkReal x15430=((1.0)*cj3*gconst16);
IkReal x15431=(gconst16*r21*x15418);
IkReal x15432=((1.0)*gconst16*x15417);
IkReal x15433=((1.0)*cj3*x15417);
IkReal x15434=(gconst16*r01*x15418);
IkReal x15435=((1.0)*sj3*x15417);
evalcond[0]=(((r20*x15428))+(((-1.0)*gconst16*x15417*x15421))+(((-1.0)*r22*x15427)));
evalcond[1]=(sj0+(((-1.0)*r02*x15427))+(((-1.0)*r01*x15432))+((r00*x15428)));
evalcond[2]=(((r10*x15428))+(((-1.0)*r11*x15432))+(((-1.0)*r12*x15427))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x15426))+(((-1.0)*r22*x15433))+((r21*x15422))+(((-1.0)*sj2*x15420))+(((-1.0)*r20*x15419*x15427))+(((-1.0)*x15424))+((cj3*x15431)));
evalcond[4]=((((-1.0)*x15419*x15421))+(((-1.0)*cj2*x15420))+(((-1.0)*r20*x15422*x15427))+(((-1.0)*r22*x15435))+x15423+((r21*x15418*x15426))+(((-1.0)*r20*x15430)));
evalcond[5]=(((cj0*x15423))+(((-1.0)*r02*x15433))+((cj3*x15434))+(((-1.0)*r00*x15419*x15427))+((r00*x15426))+(((-1.0)*cj0*cj2*x15420))+((r01*x15422)));
evalcond[6]=(((r10*x15426))+(((-1.0)*cj2*sj0*x15420))+(((-1.0)*r12*x15433))+((sj0*x15423))+((r11*x15422))+((cj3*gconst16*x15429))+(((-1.0)*r10*x15419*x15427)));
evalcond[7]=((((-1.0)*r01*x15419))+((cj0*x15424))+((cj0*x15425))+(((-1.0)*r02*x15435))+((r01*x15418*x15426))+(((-1.0)*r00*x15430))+(((-1.0)*r00*x15422*x15427)));
evalcond[8]=((((-1.0)*r12*x15435))+(((-1.0)*r11*x15419))+((sj0*x15424))+((sj0*x15425))+(((-1.0)*r10*x15422*x15427))+(((-1.0)*r10*x15430))+((x15426*x15429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x15436=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x15436;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x15436);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x15437=((1.0)*sj5);
IkReal x15438=((((-1.0)*r00*x15437))+(((-1.0)*cj5*r01)));
j4eval[0]=x15438;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x15437))))));
j4eval[2]=IKsign(x15438);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x15439=cj5*cj5;
IkReal x15440=(cj3*r11*r21);
IkReal x15441=((1.0)*cj3*cj5*sj5);
IkReal x15442=(((cj3*r12*r22))+((cj3*r10*r20*x15439))+(((-1.0)*x15439*x15440))+(((-1.0)*r11*r20*x15441))+(((-1.0)*r10*r21*x15441))+x15440);
j4eval[0]=x15442;
j4eval[1]=IKsign(x15442);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15443=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x15443;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x15443);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15444=((1.0)*sj5);
IkReal x15445=((((-1.0)*r00*x15444))+(((-1.0)*cj5*r01)));
j4eval[0]=x15445;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x15444))))));
j4eval[2]=IKsign(x15445);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15446=cj5*cj5;
IkReal x15447=r11*r11;
IkReal x15448=(cj5*r10);
IkReal x15449=(r11*sj5);
IkReal x15450=((((-1.0)*x15446*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x15448*x15449))+((x15446*x15447))+(((-1.0)*x15447)));
j4eval[0]=x15450;
j4eval[1]=((IKabs(r12))+(IKabs((x15449+(((-1.0)*x15448))))));
j4eval[2]=IKsign(x15450);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15451=cj5*cj5;
IkReal x15452=r11*r11;
IkReal x15453=(cj5*r10);
IkReal x15454=(r11*sj5);
CheckValue<IkReal> x15455=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15451*(r10*r10)))+(((2.0)*x15453*x15454))+((x15451*x15452))+(((-1.0)*(r12*r12)))+(((-1.0)*x15452)))),-1);
if(!x15455.valid){
continue;
}
CheckValue<IkReal> x15456 = IKatan2WithCheck(IkReal((x15454+(((-1.0)*x15453)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x15456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15455.value)))+(x15456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15457=IKsin(j4);
IkReal x15458=IKcos(j4);
IkReal x15459=(cj5*r00);
IkReal x15460=((1.0)*x15458);
IkReal x15461=(sj5*x15458);
IkReal x15462=(cj5*x15457);
IkReal x15463=((1.0)*x15457);
IkReal x15464=(sj5*x15463);
evalcond[0]=((((-1.0)*r22*x15460))+(((-1.0)*r21*x15464))+((r20*x15462)));
evalcond[1]=((((-1.0)*r01*x15464))+((x15457*x15459))+(((-1.0)*r02*x15460)));
evalcond[2]=((((-1.0)*cj5*r10*x15460))+((r11*x15461))+(((-1.0)*r12*x15463)));
evalcond[3]=((-1.0)+((r10*x15462))+(((-1.0)*r12*x15460))+(((-1.0)*r11*x15464)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x15461))+(((-1.0)*x15459*x15460))+(((-1.0)*r02*x15463)));
evalcond[5]=((((-1.0)*r22*x15463))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x15461))+(((-1.0)*cj5*r20*x15460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15465=((1.0)*sj5);
CheckValue<IkReal> x15466 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x15465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15466.valid){
continue;
}
CheckValue<IkReal> x15467=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15465))+(((-1.0)*cj5*r01)))),-1);
if(!x15467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15466.value)+(((1.5707963267949)*(x15467.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15468=IKsin(j4);
IkReal x15469=IKcos(j4);
IkReal x15470=(cj5*r00);
IkReal x15471=((1.0)*x15469);
IkReal x15472=(sj5*x15469);
IkReal x15473=(cj5*x15468);
IkReal x15474=((1.0)*x15468);
IkReal x15475=(sj5*x15474);
evalcond[0]=((((-1.0)*r22*x15471))+(((-1.0)*r21*x15475))+((r20*x15473)));
evalcond[1]=((((-1.0)*r01*x15475))+((x15468*x15470))+(((-1.0)*r02*x15471)));
evalcond[2]=((((-1.0)*cj5*r10*x15471))+((r11*x15472))+(((-1.0)*r12*x15474)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x15475))+(((-1.0)*r12*x15471))+((r10*x15473)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x15470*x15471))+((r01*x15472))+(((-1.0)*r02*x15474)));
evalcond[5]=((((-1.0)*r22*x15474))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x15472))+(((-1.0)*cj5*r20*x15471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15476=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15476.valid){
continue;
}
CheckValue<IkReal> x15477 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15476.value)))+(x15477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15478=IKsin(j4);
IkReal x15479=IKcos(j4);
IkReal x15480=(cj5*r00);
IkReal x15481=((1.0)*x15479);
IkReal x15482=(sj5*x15479);
IkReal x15483=(cj5*x15478);
IkReal x15484=((1.0)*x15478);
IkReal x15485=(sj5*x15484);
evalcond[0]=(((r20*x15483))+(((-1.0)*r21*x15485))+(((-1.0)*r22*x15481)));
evalcond[1]=((((-1.0)*r02*x15481))+((x15478*x15480))+(((-1.0)*r01*x15485)));
evalcond[2]=((((-1.0)*cj5*r10*x15481))+(((-1.0)*r12*x15484))+((r11*x15482)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x15481))+((r10*x15483))+(((-1.0)*r11*x15485)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x15484))+(((-1.0)*x15480*x15481))+((r01*x15482)));
evalcond[5]=((((-1.0)*cj5*r20*x15481))+((r21*x15482))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15486=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x15486;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x15486);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15487=((1.0)*sj5);
IkReal x15488=((((-1.0)*r00*x15487))+(((-1.0)*cj5*r01)));
j4eval[0]=x15488;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x15487))))));
j4eval[2]=IKsign(x15488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15489=cj5*cj5;
IkReal x15490=r11*r11;
IkReal x15491=(r11*sj5);
IkReal x15492=(cj5*r10);
IkReal x15493=((r12*r12)+((x15489*(r10*r10)))+(((-2.0)*x15491*x15492))+(((-1.0)*x15489*x15490))+x15490);
j4eval[0]=x15493;
j4eval[1]=IKsign(x15493);
j4eval[2]=((IKabs((x15492+(((-1.0)*x15491)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15494=cj5*cj5;
IkReal x15495=r11*r11;
IkReal x15496=(cj5*r10);
IkReal x15497=(r11*sj5);
CheckValue<IkReal> x15498 = IKatan2WithCheck(IkReal((x15496+(((-1.0)*x15497)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x15498.valid){
continue;
}
CheckValue<IkReal> x15499=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x15494*(r10*r10)))+(((-1.0)*x15494*x15495))+x15495+(((-2.0)*x15496*x15497)))),-1);
if(!x15499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15498.value)+(((1.5707963267949)*(x15499.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15500=IKcos(j4);
IkReal x15501=IKsin(j4);
IkReal x15502=(cj5*r10);
IkReal x15503=((1.0)*x15500);
IkReal x15504=(cj5*x15501);
IkReal x15505=(cj5*x15500);
IkReal x15506=((1.0)*sj5*x15501);
evalcond[0]=(((x15500*x15502))+((r12*x15501))+(((-1.0)*r11*sj5*x15503)));
evalcond[1]=((((-1.0)*r22*x15503))+(((-1.0)*r21*x15506))+((r20*x15504)));
evalcond[2]=(((r00*x15504))+(((-1.0)*r01*x15506))+(((-1.0)*r02*x15503)));
evalcond[3]=((-1.0)+((x15501*x15502))+(((-1.0)*r12*x15503))+(((-1.0)*r11*x15506)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*sj5*x15503))+((r00*x15505))+((cj1*sj2))+((r02*x15501)));
evalcond[5]=(((r22*x15501))+(((-1.0)*r21*sj5*x15503))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15507=((1.0)*sj5);
CheckValue<IkReal> x15508 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x15507)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15508.valid){
continue;
}
CheckValue<IkReal> x15509=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15507))+(((-1.0)*cj5*r01)))),-1);
if(!x15509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15508.value)+(((1.5707963267949)*(x15509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15510=IKcos(j4);
IkReal x15511=IKsin(j4);
IkReal x15512=(cj5*r10);
IkReal x15513=((1.0)*x15510);
IkReal x15514=(cj5*x15511);
IkReal x15515=(cj5*x15510);
IkReal x15516=((1.0)*sj5*x15511);
evalcond[0]=(((r12*x15511))+(((-1.0)*r11*sj5*x15513))+((x15510*x15512)));
evalcond[1]=((((-1.0)*r22*x15513))+(((-1.0)*r21*x15516))+((r20*x15514)));
evalcond[2]=((((-1.0)*r02*x15513))+(((-1.0)*r01*x15516))+((r00*x15514)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x15513))+(((-1.0)*r11*x15516))+((x15511*x15512)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x15511))+(((-1.0)*r01*sj5*x15513))+((r00*x15515)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15515))+(((-1.0)*r21*sj5*x15513))+((r22*x15511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15517=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15517.valid){
continue;
}
CheckValue<IkReal> x15518 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15517.value)))+(x15518.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15519=IKcos(j4);
IkReal x15520=IKsin(j4);
IkReal x15521=(cj5*r10);
IkReal x15522=((1.0)*x15519);
IkReal x15523=(cj5*x15520);
IkReal x15524=(cj5*x15519);
IkReal x15525=((1.0)*sj5*x15520);
evalcond[0]=((((-1.0)*r11*sj5*x15522))+((x15519*x15521))+((r12*x15520)));
evalcond[1]=((((-1.0)*r21*x15525))+((r20*x15523))+(((-1.0)*r22*x15522)));
evalcond[2]=(((r00*x15523))+(((-1.0)*r01*x15525))+(((-1.0)*r02*x15522)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x15525))+(((-1.0)*r12*x15522))+((x15520*x15521)));
evalcond[4]=(((cj2*sj1))+((r02*x15520))+(((-1.0)*r01*sj5*x15522))+((cj1*sj2))+((r00*x15524)));
evalcond[5]=(((r20*x15524))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x15522))+((r22*x15520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15526=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15526);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15526);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15527=(cj5*r10);
IkReal x15528=(r11*sj5);
j4eval[0]=((((-1.0)*x15528))+x15527);
j4eval[1]=((((-1.0)*sj3*x15527))+((sj3*x15528)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15529=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15529);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15529);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15530=(r11*sj5);
IkReal x15531=(cj5*r10);
j4eval[0]=((((-1.0)*x15530))+x15531);
j4eval[1]=((((-1.0)*cj3*x15531))+((cj3*x15530)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15532=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15532);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15532);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15533=((1.0)*sj3);
CheckValue<IkReal> x15534=IKPowWithIntegerCheck(r22,-1);
if(!x15534.valid){
continue;
}
CheckValue<IkReal> x15535=IKPowWithIntegerCheck(sj3,-1);
if(!x15535.valid){
continue;
}
CheckValue<IkReal> x15536=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10))),-1);
if(!x15536.valid){
continue;
}
if( IKabs(((x15534.value)*(x15535.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15536.value)*(((((-1.0)*r10*sj5*x15533))+(((-1.0)*cj5*r11*x15533)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15534.value)*(x15535.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15536.value)*(((((-1.0)*r10*sj5*x15533))+(((-1.0)*cj5*r11*x15533))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15534.value)*(x15535.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15536.value)*(((((-1.0)*r10*sj5*x15533))+(((-1.0)*cj5*r11*x15533))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15537=IKsin(j4);
IkReal x15538=IKcos(j4);
IkReal x15539=(sj1*sj2);
IkReal x15540=(r11*sj5);
IkReal x15541=(r00*sj5);
IkReal x15542=(cj5*r01);
IkReal x15543=((1.0)*cj3);
IkReal x15544=(r10*sj5);
IkReal x15545=((1.0)*cj1);
IkReal x15546=(cj5*r11);
IkReal x15547=((1.0)*cj5);
IkReal x15548=(cj2*sj1);
IkReal x15549=(r01*sj5);
IkReal x15550=(cj2*x15545);
IkReal x15551=(cj3*x15538);
IkReal x15552=((1.0)*x15537);
IkReal x15553=(sj3*x15538);
IkReal x15554=(cj5*x15537);
evalcond[0]=((-1.0)*r22*x15538);
evalcond[1]=(((r00*x15554))+(((-1.0)*x15549*x15552)));
evalcond[2]=((-1.0)+((r10*x15554))+(((-1.0)*x15540*x15552)));
evalcond[3]=((((-1.0)*r22*sj3*x15552))+x15539+(((-1.0)*x15550)));
evalcond[4]=((((-1.0)*sj2*x15545))+(((-1.0)*x15548))+(((-1.0)*r22*x15537*x15543)));
evalcond[5]=(((sj3*x15546))+((sj3*x15544))+((x15540*x15551))+(((-1.0)*cj5*r10*x15538*x15543)));
evalcond[6]=(((x15540*x15553))+(((-1.0)*x15543*x15546))+(((-1.0)*x15543*x15544))+(((-1.0)*r10*x15547*x15553)));
evalcond[7]=(((sj3*x15541))+((sj3*x15542))+(((-1.0)*cj5*r00*x15538*x15543))+((x15549*x15551))+x15539+(((-1.0)*x15550)));
evalcond[8]=((((-1.0)*x15542*x15543))+(((-1.0)*r00*x15547*x15553))+((cj1*sj2))+((x15549*x15553))+x15548+(((-1.0)*x15541*x15543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15555=(cj5*r10);
IkReal x15556=((1.0)*sj3);
IkReal x15557=(r11*sj5);
CheckValue<IkReal> x15558=IKPowWithIntegerCheck(((((-1.0)*x15557))+x15555),-1);
if(!x15558.valid){
continue;
}
CheckValue<IkReal> x15559=IKPowWithIntegerCheck((((cj3*x15557))+(((-1.0)*cj3*x15555))),-1);
if(!x15559.valid){
continue;
}
if( IKabs(x15558.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15559.value)*(((((-1.0)*cj5*r11*x15556))+(((-1.0)*r10*sj5*x15556)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15558.value)+IKsqr(((x15559.value)*(((((-1.0)*cj5*r11*x15556))+(((-1.0)*r10*sj5*x15556))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15558.value, ((x15559.value)*(((((-1.0)*cj5*r11*x15556))+(((-1.0)*r10*sj5*x15556))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15560=IKsin(j4);
IkReal x15561=IKcos(j4);
IkReal x15562=(sj1*sj2);
IkReal x15563=(r11*sj5);
IkReal x15564=(r00*sj5);
IkReal x15565=(cj5*r01);
IkReal x15566=((1.0)*cj3);
IkReal x15567=(r10*sj5);
IkReal x15568=((1.0)*cj1);
IkReal x15569=(cj5*r11);
IkReal x15570=((1.0)*cj5);
IkReal x15571=(cj2*sj1);
IkReal x15572=(r01*sj5);
IkReal x15573=(cj2*x15568);
IkReal x15574=(cj3*x15561);
IkReal x15575=((1.0)*x15560);
IkReal x15576=(sj3*x15561);
IkReal x15577=(cj5*x15560);
evalcond[0]=((-1.0)*r22*x15561);
evalcond[1]=((((-1.0)*x15572*x15575))+((r00*x15577)));
evalcond[2]=((-1.0)+((r10*x15577))+(((-1.0)*x15563*x15575)));
evalcond[3]=(x15562+(((-1.0)*x15573))+(((-1.0)*r22*sj3*x15575)));
evalcond[4]=((((-1.0)*sj2*x15568))+(((-1.0)*r22*x15560*x15566))+(((-1.0)*x15571)));
evalcond[5]=((((-1.0)*cj5*r10*x15561*x15566))+((x15563*x15574))+((sj3*x15569))+((sj3*x15567)));
evalcond[6]=((((-1.0)*r10*x15570*x15576))+(((-1.0)*x15566*x15569))+(((-1.0)*x15566*x15567))+((x15563*x15576)));
evalcond[7]=(((x15572*x15574))+((sj3*x15565))+((sj3*x15564))+(((-1.0)*cj5*r00*x15561*x15566))+x15562+(((-1.0)*x15573)));
evalcond[8]=(((x15572*x15576))+((cj1*sj2))+(((-1.0)*x15564*x15566))+(((-1.0)*x15565*x15566))+x15571+(((-1.0)*r00*x15570*x15576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15578=(cj5*r10);
IkReal x15579=(r11*sj5);
CheckValue<IkReal> x15580=IKPowWithIntegerCheck((x15578+(((-1.0)*x15579))),-1);
if(!x15580.valid){
continue;
}
CheckValue<IkReal> x15581=IKPowWithIntegerCheck((((sj3*x15579))+(((-1.0)*sj3*x15578))),-1);
if(!x15581.valid){
continue;
}
if( IKabs(x15580.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15581.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15580.value)+IKsqr(((x15581.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15580.value, ((x15581.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15582=IKsin(j4);
IkReal x15583=IKcos(j4);
IkReal x15584=(sj1*sj2);
IkReal x15585=(r11*sj5);
IkReal x15586=(r00*sj5);
IkReal x15587=(cj5*r01);
IkReal x15588=((1.0)*cj3);
IkReal x15589=(r10*sj5);
IkReal x15590=((1.0)*cj1);
IkReal x15591=(cj5*r11);
IkReal x15592=((1.0)*cj5);
IkReal x15593=(cj2*sj1);
IkReal x15594=(r01*sj5);
IkReal x15595=(cj2*x15590);
IkReal x15596=(cj3*x15583);
IkReal x15597=((1.0)*x15582);
IkReal x15598=(sj3*x15583);
IkReal x15599=(cj5*x15582);
evalcond[0]=((-1.0)*r22*x15583);
evalcond[1]=((((-1.0)*x15594*x15597))+((r00*x15599)));
evalcond[2]=((-1.0)+(((-1.0)*x15585*x15597))+((r10*x15599)));
evalcond[3]=((((-1.0)*r22*sj3*x15597))+(((-1.0)*x15595))+x15584);
evalcond[4]=((((-1.0)*x15593))+(((-1.0)*r22*x15582*x15588))+(((-1.0)*sj2*x15590)));
evalcond[5]=((((-1.0)*cj5*r10*x15583*x15588))+((sj3*x15591))+((x15585*x15596))+((sj3*x15589)));
evalcond[6]=((((-1.0)*x15588*x15589))+((x15585*x15598))+(((-1.0)*r10*x15592*x15598))+(((-1.0)*x15588*x15591)));
evalcond[7]=((((-1.0)*cj5*r00*x15583*x15588))+((x15594*x15596))+(((-1.0)*x15595))+((sj3*x15587))+((sj3*x15586))+x15584);
evalcond[8]=((((-1.0)*x15586*x15588))+(((-1.0)*x15587*x15588))+(((-1.0)*r00*x15592*x15598))+((cj1*sj2))+((x15594*x15598))+x15593);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15600=cj5*cj5;
IkReal x15601=(r11*sj3);
IkReal x15602=(cj3*r10);
IkReal x15603=(cj3*r11);
IkReal x15604=(r10*sj3);
IkReal x15605=(cj5*r20*sj5);
IkReal x15606=(r21*x15600);
IkReal x15607=(r20*x15600);
IkReal x15608=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x15609 = IKatan2WithCheck(IkReal((((cj5*r22*x15601))+((r22*sj5*x15604)))),IkReal(((((-1.0)*x15601*x15608))+(((-1.0)*r21*x15604))+((x15601*x15607))+((x15604*x15606))+((x15604*x15605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15609.valid){
continue;
}
CheckValue<IkReal> x15610=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x15603*x15606))+(((-1.0)*x15603*x15605))+(((-1.0)*x15602*x15608))+((x15602*x15607))+((r21*x15603)))),-1);
if(!x15610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15609.value)+(((1.5707963267949)*(x15610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15611=IKsin(j4);
IkReal x15612=IKcos(j4);
IkReal x15613=(sj1*sj2);
IkReal x15614=((1.0)*r22);
IkReal x15615=(r11*sj5);
IkReal x15616=((1.0)*cj3);
IkReal x15617=(cj5*r21);
IkReal x15618=(r00*sj5);
IkReal x15619=(cj5*r01);
IkReal x15620=(r10*sj5);
IkReal x15621=((1.0)*cj1);
IkReal x15622=(cj5*r10);
IkReal x15623=(r21*sj5);
IkReal x15624=(r01*sj5);
IkReal x15625=(cj2*sj1);
IkReal x15626=(cj5*r00);
IkReal x15627=(cj5*r20);
IkReal x15628=(r20*sj5);
IkReal x15629=(cj5*r11);
IkReal x15630=(cj2*x15621);
IkReal x15631=((1.0)*x15611);
IkReal x15632=(cj3*x15612);
IkReal x15633=((1.0)*x15612);
IkReal x15634=(sj3*x15612);
evalcond[0]=((((-1.0)*x15623*x15631))+(((-1.0)*x15612*x15614))+((x15611*x15627)));
evalcond[1]=((((-1.0)*x15624*x15631))+(((-1.0)*r02*x15633))+((x15611*x15626)));
evalcond[2]=((-1.0)+(((-1.0)*x15615*x15631))+(((-1.0)*r12*x15633))+((x15611*x15622)));
evalcond[3]=((((-1.0)*x15612*x15616*x15622))+(((-1.0)*r12*x15611*x15616))+((sj3*x15620))+((sj3*x15629))+((x15615*x15632)));
evalcond[4]=((((-1.0)*x15616*x15629))+(((-1.0)*x15616*x15620))+(((-1.0)*sj3*x15622*x15633))+((x15615*x15634))+(((-1.0)*r12*sj3*x15631)));
evalcond[5]=((((-1.0)*x15612*x15616*x15626))+(((-1.0)*r02*x15611*x15616))+((x15624*x15632))+x15613+((sj3*x15619))+((sj3*x15618))+(((-1.0)*x15630)));
evalcond[6]=((((-1.0)*x15612*x15616*x15627))+(((-1.0)*x15625))+((x15623*x15632))+((sj3*x15617))+((sj3*x15628))+(((-1.0)*cj3*x15611*x15614))+(((-1.0)*sj2*x15621)));
evalcond[7]=((((-1.0)*x15616*x15618))+(((-1.0)*x15616*x15619))+((x15624*x15634))+((cj1*sj2))+(((-1.0)*sj3*x15626*x15633))+x15625+(((-1.0)*r02*sj3*x15631)));
evalcond[8]=((((-1.0)*x15616*x15628))+(((-1.0)*x15616*x15617))+(((-1.0)*sj3*x15611*x15614))+(((-1.0)*sj3*x15627*x15633))+x15613+((x15623*x15634))+(((-1.0)*x15630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15635=((1.0)*sj5);
CheckValue<IkReal> x15636 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x15635))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15636.valid){
continue;
}
CheckValue<IkReal> x15637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15635))+(((-1.0)*cj5*r01)))),-1);
if(!x15637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15636.value)+(((1.5707963267949)*(x15637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15638=IKsin(j4);
IkReal x15639=IKcos(j4);
IkReal x15640=(sj1*sj2);
IkReal x15641=((1.0)*r22);
IkReal x15642=(r11*sj5);
IkReal x15643=((1.0)*cj3);
IkReal x15644=(cj5*r21);
IkReal x15645=(r00*sj5);
IkReal x15646=(cj5*r01);
IkReal x15647=(r10*sj5);
IkReal x15648=((1.0)*cj1);
IkReal x15649=(cj5*r10);
IkReal x15650=(r21*sj5);
IkReal x15651=(r01*sj5);
IkReal x15652=(cj2*sj1);
IkReal x15653=(cj5*r00);
IkReal x15654=(cj5*r20);
IkReal x15655=(r20*sj5);
IkReal x15656=(cj5*r11);
IkReal x15657=(cj2*x15648);
IkReal x15658=((1.0)*x15638);
IkReal x15659=(cj3*x15639);
IkReal x15660=((1.0)*x15639);
IkReal x15661=(sj3*x15639);
evalcond[0]=(((x15638*x15654))+(((-1.0)*x15639*x15641))+(((-1.0)*x15650*x15658)));
evalcond[1]=(((x15638*x15653))+(((-1.0)*x15651*x15658))+(((-1.0)*r02*x15660)));
evalcond[2]=((-1.0)+(((-1.0)*x15642*x15658))+(((-1.0)*r12*x15660))+((x15638*x15649)));
evalcond[3]=(((sj3*x15647))+(((-1.0)*r12*x15638*x15643))+((x15642*x15659))+(((-1.0)*x15639*x15643*x15649))+((sj3*x15656)));
evalcond[4]=((((-1.0)*sj3*x15649*x15660))+(((-1.0)*x15643*x15647))+(((-1.0)*r12*sj3*x15658))+(((-1.0)*x15643*x15656))+((x15642*x15661)));
evalcond[5]=((((-1.0)*r02*x15638*x15643))+((sj3*x15645))+((sj3*x15646))+(((-1.0)*x15639*x15643*x15653))+((x15651*x15659))+x15640+(((-1.0)*x15657)));
evalcond[6]=((((-1.0)*cj3*x15638*x15641))+((sj3*x15644))+(((-1.0)*sj2*x15648))+(((-1.0)*x15639*x15643*x15654))+((x15650*x15659))+(((-1.0)*x15652))+((sj3*x15655)));
evalcond[7]=(((x15651*x15661))+(((-1.0)*sj3*x15653*x15660))+(((-1.0)*x15643*x15645))+(((-1.0)*x15643*x15646))+((cj1*sj2))+x15652+(((-1.0)*r02*sj3*x15658)));
evalcond[8]=((((-1.0)*x15643*x15644))+(((-1.0)*x15643*x15655))+(((-1.0)*sj3*x15638*x15641))+x15640+(((-1.0)*x15657))+(((-1.0)*sj3*x15654*x15660))+((x15650*x15661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15662=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15662.valid){
continue;
}
CheckValue<IkReal> x15663 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15662.value)))+(x15663.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15664=IKsin(j4);
IkReal x15665=IKcos(j4);
IkReal x15666=(sj1*sj2);
IkReal x15667=((1.0)*r22);
IkReal x15668=(r11*sj5);
IkReal x15669=((1.0)*cj3);
IkReal x15670=(cj5*r21);
IkReal x15671=(r00*sj5);
IkReal x15672=(cj5*r01);
IkReal x15673=(r10*sj5);
IkReal x15674=((1.0)*cj1);
IkReal x15675=(cj5*r10);
IkReal x15676=(r21*sj5);
IkReal x15677=(r01*sj5);
IkReal x15678=(cj2*sj1);
IkReal x15679=(cj5*r00);
IkReal x15680=(cj5*r20);
IkReal x15681=(r20*sj5);
IkReal x15682=(cj5*r11);
IkReal x15683=(cj2*x15674);
IkReal x15684=((1.0)*x15664);
IkReal x15685=(cj3*x15665);
IkReal x15686=((1.0)*x15665);
IkReal x15687=(sj3*x15665);
evalcond[0]=(((x15664*x15680))+(((-1.0)*x15665*x15667))+(((-1.0)*x15676*x15684)));
evalcond[1]=((((-1.0)*r02*x15686))+((x15664*x15679))+(((-1.0)*x15677*x15684)));
evalcond[2]=((-1.0)+(((-1.0)*x15668*x15684))+(((-1.0)*r12*x15686))+((x15664*x15675)));
evalcond[3]=((((-1.0)*r12*x15664*x15669))+((sj3*x15673))+((x15668*x15685))+((sj3*x15682))+(((-1.0)*x15665*x15669*x15675)));
evalcond[4]=((((-1.0)*x15669*x15682))+((x15668*x15687))+(((-1.0)*sj3*x15675*x15686))+(((-1.0)*x15669*x15673))+(((-1.0)*r12*sj3*x15684)));
evalcond[5]=((((-1.0)*r02*x15664*x15669))+((sj3*x15672))+((sj3*x15671))+x15666+((x15677*x15685))+(((-1.0)*x15683))+(((-1.0)*x15665*x15669*x15679)));
evalcond[6]=((((-1.0)*cj3*x15664*x15667))+(((-1.0)*sj2*x15674))+((sj3*x15670))+(((-1.0)*x15665*x15669*x15680))+(((-1.0)*x15678))+((x15676*x15685))+((sj3*x15681)));
evalcond[7]=(((cj1*sj2))+(((-1.0)*sj3*x15679*x15686))+x15678+((x15677*x15687))+(((-1.0)*r02*sj3*x15684))+(((-1.0)*x15669*x15672))+(((-1.0)*x15669*x15671)));
evalcond[8]=((((-1.0)*x15669*x15681))+x15666+(((-1.0)*x15669*x15670))+(((-1.0)*sj3*x15664*x15667))+(((-1.0)*sj3*x15680*x15686))+((x15676*x15687))+(((-1.0)*x15683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x15688=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x15688;
j4eval[1]=IKsign(x15688);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x15689=((1.0)*sj5);
IkReal x15690=((((-1.0)*r20*x15689))+(((-1.0)*cj5*r21)));
j4eval[0]=x15690;
j4eval[1]=((IKabs(((((-1.0)*r01*x15689))+((cj5*r00)))))+(IKabs(r02)));
j4eval[2]=IKsign(x15690);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x15691=cj5*cj5;
IkReal x15692=(cj3*r11*r21);
IkReal x15693=((1.0)*cj3*cj5*sj5);
IkReal x15694=(((cj3*r12*r22))+(((-1.0)*r11*r20*x15693))+(((-1.0)*x15691*x15692))+x15692+(((-1.0)*r10*r21*x15693))+((cj3*r10*r20*x15691)));
j4eval[0]=x15694;
j4eval[1]=IKsign(x15694);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15695=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x15695;
j4eval[1]=IKsign(x15695);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15696=((1.0)*sj5);
IkReal x15697=((((-1.0)*r20*x15696))+(((-1.0)*cj5*r21)));
j4eval[0]=x15697;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x15696))+((cj5*r00))))));
j4eval[2]=IKsign(x15697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15698=cj5*cj5;
IkReal x15699=r11*r11;
IkReal x15700=(r11*sj5);
IkReal x15701=(cj5*r10);
IkReal x15702=((r12*r12)+(((-2.0)*x15700*x15701))+((x15698*(r10*r10)))+x15699+(((-1.0)*x15698*x15699)));
j4eval[0]=x15702;
j4eval[1]=IKsign(x15702);
j4eval[2]=((IKabs(r12))+(IKabs((x15700+(((-1.0)*x15701))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15703=cj5*cj5;
IkReal x15704=r11*r11;
IkReal x15705=(cj5*r10);
IkReal x15706=(r11*sj5);
CheckValue<IkReal> x15707=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x15703*(r10*r10)))+(((-2.0)*x15705*x15706))+x15704+(((-1.0)*x15703*x15704)))),-1);
if(!x15707.valid){
continue;
}
CheckValue<IkReal> x15708 = IKatan2WithCheck(IkReal((x15706+(((-1.0)*x15705)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x15708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15707.value)))+(x15708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15709=IKsin(j4);
IkReal x15710=IKcos(j4);
IkReal x15711=(cj5*r00);
IkReal x15712=((1.0)*cj1);
IkReal x15713=((1.0)*x15710);
IkReal x15714=(sj5*x15710);
IkReal x15715=(cj5*x15709);
IkReal x15716=((1.0)*x15709);
IkReal x15717=(sj5*x15716);
evalcond[0]=(((r20*x15715))+(((-1.0)*r21*x15717))+(((-1.0)*r22*x15713)));
evalcond[1]=((((-1.0)*r01*x15717))+(((-1.0)*r02*x15713))+((x15709*x15711)));
evalcond[2]=((((-1.0)*cj5*r10*x15713))+(((-1.0)*r12*x15716))+((r11*x15714)));
evalcond[3]=((1.0)+(((-1.0)*r12*x15713))+(((-1.0)*r11*x15717))+((r10*x15715)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x15716))+((r21*x15714))+(((-1.0)*cj2*x15712))+(((-1.0)*cj5*r20*x15713)));
evalcond[5]=((((-1.0)*sj2*x15712))+(((-1.0)*cj2*sj1))+((r01*x15714))+(((-1.0)*r02*x15716))+(((-1.0)*x15711*x15713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15718=((1.0)*sj5);
CheckValue<IkReal> x15719 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x15718))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15719.valid){
continue;
}
CheckValue<IkReal> x15720=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15718))+(((-1.0)*cj5*r21)))),-1);
if(!x15720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15719.value)+(((1.5707963267949)*(x15720.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15721=IKsin(j4);
IkReal x15722=IKcos(j4);
IkReal x15723=(cj5*r00);
IkReal x15724=((1.0)*cj1);
IkReal x15725=((1.0)*x15722);
IkReal x15726=(sj5*x15722);
IkReal x15727=(cj5*x15721);
IkReal x15728=((1.0)*x15721);
IkReal x15729=(sj5*x15728);
evalcond[0]=((((-1.0)*r21*x15729))+((r20*x15727))+(((-1.0)*r22*x15725)));
evalcond[1]=((((-1.0)*r02*x15725))+((x15721*x15723))+(((-1.0)*r01*x15729)));
evalcond[2]=(((r11*x15726))+(((-1.0)*cj5*r10*x15725))+(((-1.0)*r12*x15728)));
evalcond[3]=((1.0)+(((-1.0)*r11*x15729))+(((-1.0)*r12*x15725))+((r10*x15727)));
evalcond[4]=(((r21*x15726))+((sj1*sj2))+(((-1.0)*cj5*r20*x15725))+(((-1.0)*r22*x15728))+(((-1.0)*cj2*x15724)));
evalcond[5]=((((-1.0)*r02*x15728))+((r01*x15726))+(((-1.0)*x15723*x15725))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x15724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15730=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x15730.valid){
continue;
}
CheckValue<IkReal> x15731 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15730.value)))+(x15731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15732=IKsin(j4);
IkReal x15733=IKcos(j4);
IkReal x15734=(cj5*r00);
IkReal x15735=((1.0)*cj1);
IkReal x15736=((1.0)*x15733);
IkReal x15737=(sj5*x15733);
IkReal x15738=(cj5*x15732);
IkReal x15739=((1.0)*x15732);
IkReal x15740=(sj5*x15739);
evalcond[0]=((((-1.0)*r21*x15740))+((r20*x15738))+(((-1.0)*r22*x15736)));
evalcond[1]=((((-1.0)*r02*x15736))+((x15732*x15734))+(((-1.0)*r01*x15740)));
evalcond[2]=(((r11*x15737))+(((-1.0)*cj5*r10*x15736))+(((-1.0)*r12*x15739)));
evalcond[3]=((1.0)+(((-1.0)*r12*x15736))+(((-1.0)*r11*x15740))+((r10*x15738)));
evalcond[4]=(((sj1*sj2))+((r21*x15737))+(((-1.0)*cj5*r20*x15736))+(((-1.0)*r22*x15739))+(((-1.0)*cj2*x15735)));
evalcond[5]=((((-1.0)*r02*x15739))+((r01*x15737))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x15735))+(((-1.0)*x15734*x15736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15741=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x15741;
j4eval[1]=IKsign(x15741);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15742=((1.0)*sj5);
IkReal x15743=((((-1.0)*r20*x15742))+(((-1.0)*cj5*r21)));
j4eval[0]=x15743;
j4eval[1]=((IKabs(r02))+(IKabs((((cj5*r00))+(((-1.0)*r01*x15742))))));
j4eval[2]=IKsign(x15743);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15744=(sj1*sj2);
IkReal x15745=(cj1*cj2);
IkReal x15746=(r11*sj5);
IkReal x15747=(cj5*r10);
IkReal x15748=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x15748;
j4eval[1]=IKsign(x15748);
j4eval[2]=((IKabs(((((-1.0)*r12*x15744))+((r12*x15745)))))+(IKabs(((((-1.0)*x15745*x15747))+(((-1.0)*x15744*x15746))+((x15745*x15746))+((x15744*x15747))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15749=(sj1*sj2);
IkReal x15750=(cj1*cj2);
IkReal x15751=(cj5*r10);
IkReal x15752=(r11*sj5);
CheckValue<IkReal> x15753 = IKatan2WithCheck(IkReal((((x15750*x15752))+(((-1.0)*x15750*x15751))+((x15749*x15751))+(((-1.0)*x15749*x15752)))),IkReal(((((-1.0)*r12*x15749))+((r12*x15750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15753.valid){
continue;
}
CheckValue<IkReal> x15754=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x15754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15753.value)+(((1.5707963267949)*(x15754.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15755=IKcos(j4);
IkReal x15756=IKsin(j4);
IkReal x15757=(cj5*r10);
IkReal x15758=((1.0)*cj1);
IkReal x15759=((1.0)*x15755);
IkReal x15760=(cj5*x15756);
IkReal x15761=(cj5*x15755);
IkReal x15762=((1.0)*sj5*x15756);
evalcond[0]=(((x15755*x15757))+((r12*x15756))+(((-1.0)*r11*sj5*x15759)));
evalcond[1]=((((-1.0)*r22*x15759))+(((-1.0)*r21*x15762))+((r20*x15760)));
evalcond[2]=((((-1.0)*r01*x15762))+((r00*x15760))+(((-1.0)*r02*x15759)));
evalcond[3]=((1.0)+(((-1.0)*r12*x15759))+((x15756*x15757))+(((-1.0)*r11*x15762)));
evalcond[4]=(((r22*x15756))+(((-1.0)*cj2*x15758))+((sj1*sj2))+((r20*x15761))+(((-1.0)*r21*sj5*x15759)));
evalcond[5]=(((r02*x15756))+(((-1.0)*r01*sj5*x15759))+(((-1.0)*cj2*sj1))+((r00*x15761))+(((-1.0)*sj2*x15758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15763=((1.0)*sj5);
CheckValue<IkReal> x15764 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x15763))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15764.valid){
continue;
}
CheckValue<IkReal> x15765=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15763))+(((-1.0)*cj5*r21)))),-1);
if(!x15765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15764.value)+(((1.5707963267949)*(x15765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15766=IKcos(j4);
IkReal x15767=IKsin(j4);
IkReal x15768=(cj5*r10);
IkReal x15769=((1.0)*cj1);
IkReal x15770=((1.0)*x15766);
IkReal x15771=(cj5*x15767);
IkReal x15772=(cj5*x15766);
IkReal x15773=((1.0)*sj5*x15767);
evalcond[0]=((((-1.0)*r11*sj5*x15770))+((x15766*x15768))+((r12*x15767)));
evalcond[1]=((((-1.0)*r22*x15770))+(((-1.0)*r21*x15773))+((r20*x15771)));
evalcond[2]=(((r00*x15771))+(((-1.0)*r01*x15773))+(((-1.0)*r02*x15770)));
evalcond[3]=((1.0)+((x15767*x15768))+(((-1.0)*r12*x15770))+(((-1.0)*r11*x15773)));
evalcond[4]=(((r22*x15767))+(((-1.0)*cj2*x15769))+((sj1*sj2))+((r20*x15772))+(((-1.0)*r21*sj5*x15770)));
evalcond[5]=(((r02*x15767))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x15770))+((r00*x15772))+(((-1.0)*sj2*x15769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15774=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x15774.valid){
continue;
}
CheckValue<IkReal> x15775 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15774.value)))+(x15775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15776=IKcos(j4);
IkReal x15777=IKsin(j4);
IkReal x15778=(cj5*r10);
IkReal x15779=((1.0)*cj1);
IkReal x15780=((1.0)*x15776);
IkReal x15781=(cj5*x15777);
IkReal x15782=(cj5*x15776);
IkReal x15783=((1.0)*sj5*x15777);
evalcond[0]=((((-1.0)*r11*sj5*x15780))+((x15776*x15778))+((r12*x15777)));
evalcond[1]=((((-1.0)*r21*x15783))+(((-1.0)*r22*x15780))+((r20*x15781)));
evalcond[2]=(((r00*x15781))+(((-1.0)*r01*x15783))+(((-1.0)*r02*x15780)));
evalcond[3]=((1.0)+((x15777*x15778))+(((-1.0)*r11*x15783))+(((-1.0)*r12*x15780)));
evalcond[4]=((((-1.0)*r21*sj5*x15780))+((r22*x15777))+((sj1*sj2))+(((-1.0)*cj2*x15779))+((r20*x15782)));
evalcond[5]=(((r00*x15782))+((r02*x15777))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x15780))+(((-1.0)*sj2*x15779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15784=((-1.0)*r20);
IkReal x15786 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15786)==0){
continue;
}
IkReal x15785=pow(x15786,-0.5);
CheckValue<IkReal> x15787 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15784),IKFAST_ATAN2_MAGTHRESH);
if(!x15787.valid){
continue;
}
IkReal gconst54=((-1.0)*(x15787.value));
IkReal gconst55=(r21*x15785);
IkReal gconst56=(x15784*x15785);
CheckValue<IkReal> x15788 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15788.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15788.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15789=((-1.0)*r20);
IkReal x15790=x15785;
CheckValue<IkReal> x15792 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15789),IKFAST_ATAN2_MAGTHRESH);
if(!x15792.valid){
continue;
}
IkReal x15791=((-1.0)*(x15792.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x15791;
IkReal gconst54=x15791;
IkReal gconst55=(r21*x15790);
IkReal gconst56=(x15789*x15790);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15793=((-1.0)*r20);
IkReal x15794=x15785;
CheckValue<IkReal> x15796 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15793),IKFAST_ATAN2_MAGTHRESH);
if(!x15796.valid){
continue;
}
IkReal x15795=((-1.0)*(x15796.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x15795;
IkReal gconst54=x15795;
IkReal gconst55=(r21*x15794);
IkReal gconst56=(x15793*x15794);
CheckValue<IkReal> x15804=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x15804.valid){
continue;
}
IkReal x15797=x15804.value;
IkReal x15798=(cj3*x15797);
IkReal x15799=(r11*x15798);
IkReal x15800=(r01*x15798);
IkReal x15801=(r00*x15798);
IkReal x15802=(r10*x15798);
IkReal x15803=(r20*r21*x15798);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*x15801*(r20*r20)))+((r10*r20*r21*x15800))+((r01*x15799*(r21*r21)))+((r00*r20*r21*x15799))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15805=((-1.0)*r20);
IkReal x15806=x15785;
CheckValue<IkReal> x15808 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15805),IKFAST_ATAN2_MAGTHRESH);
if(!x15808.valid){
continue;
}
IkReal x15807=((-1.0)*(x15808.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x15807;
IkReal gconst54=x15807;
IkReal gconst55=(r21*x15806);
IkReal gconst56=(x15805*x15806);
CheckValue<IkReal> x15816=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x15816.valid){
continue;
}
IkReal x15809=x15816.value;
IkReal x15810=(sj3*x15809);
IkReal x15811=(r11*x15810);
IkReal x15812=(r00*x15810);
IkReal x15813=(r01*x15810);
IkReal x15814=(r10*x15810);
IkReal x15815=(r20*r21*x15810);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x15811))+((r10*r20*r21*x15813))+((r10*x15812*(r20*r20)))+((r01*x15811*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15817=gconst55*gconst55;
IkReal x15818=gconst56*gconst56;
IkReal x15819=(r11*sj3);
IkReal x15820=((1.0)*r00);
IkReal x15821=(gconst55*gconst56);
IkReal x15822=(cj3*r11);
IkReal x15823=(cj3*r10);
IkReal x15824=((1.0)*r02);
IkReal x15825=(r10*sj3);
IkReal x15826=(r01*x15817);
CheckValue<IkReal> x15827 = IKatan2WithCheck(IkReal(((((-1.0)*gconst55*x15823*x15824))+(((-1.0)*gconst56*x15822*x15824)))),IkReal(((((-1.0)*x15818*x15820*x15822))+((r01*x15821*x15822))+((x15823*x15826))+(((-1.0)*x15820*x15821*x15823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15827.valid){
continue;
}
CheckValue<IkReal> x15828=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x15819*x15826))+(((-1.0)*x15819*x15820*x15821))+((r00*x15818*x15825))+(((-1.0)*r01*x15821*x15825)))),-1);
if(!x15828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15827.value)+(((1.5707963267949)*(x15828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15829=IKsin(j4);
IkReal x15830=IKcos(j4);
IkReal x15831=((1.0)*sj2);
IkReal x15832=(r00*sj3);
IkReal x15833=(r01*sj3);
IkReal x15834=((1.0)*cj3);
IkReal x15835=(gconst56*sj3);
IkReal x15836=((1.0)*cj2);
IkReal x15837=(gconst55*sj3);
IkReal x15838=(cj3*gconst56);
IkReal x15839=(cj1*x15831);
IkReal x15840=(sj1*x15836);
IkReal x15841=((1.0)*x15830);
IkReal x15842=((1.0)*x15829);
IkReal x15843=(gconst55*x15830);
IkReal x15844=(gconst56*x15829);
IkReal x15845=(x15839+x15840);
evalcond[0]=(((r20*x15844))+(((-1.0)*r22*x15841))+(((-1.0)*gconst55*r21*x15842)));
evalcond[1]=((((-1.0)*gconst55*r01*x15842))+((r00*x15844))+(((-1.0)*r02*x15841)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15841))+((r10*x15844))+(((-1.0)*gconst55*r11*x15842)));
evalcond[3]=(((r10*x15837))+(((-1.0)*r12*x15829*x15834))+((cj3*r11*x15843))+((r11*x15835))+(((-1.0)*gconst56*r10*x15830*x15834)));
evalcond[4]=(((r11*x15830*x15837))+(((-1.0)*gconst55*r10*x15834))+(((-1.0)*r10*x15835*x15841))+(((-1.0)*r12*sj3*x15842))+(((-1.0)*gconst56*r11*x15834)));
evalcond[5]=((((-1.0)*sj1*x15831))+((cj3*r01*x15843))+(((-1.0)*r02*x15829*x15834))+((gconst55*x15832))+((gconst56*x15833))+((cj1*cj2))+(((-1.0)*gconst56*r00*x15830*x15834)));
evalcond[6]=((((-1.0)*gconst56*r20*x15830*x15834))+((cj3*r21*x15843))+(((-1.0)*r22*x15829*x15834))+((r20*x15837))+(((-1.0)*x15845))+((r21*x15835)));
evalcond[7]=((((-1.0)*gconst56*r21*x15834))+((r21*x15830*x15837))+((sj1*sj2))+(((-1.0)*r22*sj3*x15842))+(((-1.0)*r20*x15835*x15841))+(((-1.0)*cj1*x15836))+(((-1.0)*gconst55*r20*x15834)));
evalcond[8]=((((-1.0)*gconst56*x15832*x15841))+(((-1.0)*gconst56*r01*x15834))+(((-1.0)*gconst55*r00*x15834))+(((-1.0)*r02*sj3*x15842))+((x15833*x15843))+(((-1.0)*x15845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15846=gconst55*gconst55;
IkReal x15847=gconst56*gconst56;
IkReal x15848=(r11*sj3);
IkReal x15849=(cj3*r01);
IkReal x15850=(gconst55*r10);
IkReal x15851=((1.0)*gconst56);
IkReal x15852=(r00*x15847);
CheckValue<IkReal> x15853 = IKatan2WithCheck(IkReal((((r02*sj3*x15850))+((gconst56*r02*x15848)))),IkReal((((gconst56*r00*sj3*x15850))+(((-1.0)*gconst55*r01*x15848*x15851))+(((-1.0)*r01*r10*sj3*x15846))+((x15848*x15852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15853.valid){
continue;
}
CheckValue<IkReal> x15854=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((r11*x15846*x15849))+((cj3*r10*x15852))+(((-1.0)*x15849*x15850*x15851))+(((-1.0)*cj3*gconst55*r00*r11*x15851)))),-1);
if(!x15854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15853.value)+(((1.5707963267949)*(x15854.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15855=IKsin(j4);
IkReal x15856=IKcos(j4);
IkReal x15857=((1.0)*sj2);
IkReal x15858=(r00*sj3);
IkReal x15859=(r01*sj3);
IkReal x15860=((1.0)*cj3);
IkReal x15861=(gconst56*sj3);
IkReal x15862=((1.0)*cj2);
IkReal x15863=(gconst55*sj3);
IkReal x15864=(cj3*gconst56);
IkReal x15865=(cj1*x15857);
IkReal x15866=(sj1*x15862);
IkReal x15867=((1.0)*x15856);
IkReal x15868=((1.0)*x15855);
IkReal x15869=(gconst55*x15856);
IkReal x15870=(gconst56*x15855);
IkReal x15871=(x15866+x15865);
evalcond[0]=((((-1.0)*r22*x15867))+((r20*x15870))+(((-1.0)*gconst55*r21*x15868)));
evalcond[1]=(((r00*x15870))+(((-1.0)*gconst55*r01*x15868))+(((-1.0)*r02*x15867)));
evalcond[2]=((1.0)+(((-1.0)*gconst55*r11*x15868))+((r10*x15870))+(((-1.0)*r12*x15867)));
evalcond[3]=(((r11*x15861))+(((-1.0)*r12*x15855*x15860))+(((-1.0)*gconst56*r10*x15856*x15860))+((cj3*r11*x15869))+((r10*x15863)));
evalcond[4]=((((-1.0)*gconst56*r11*x15860))+((r11*x15856*x15863))+(((-1.0)*gconst55*r10*x15860))+(((-1.0)*r10*x15861*x15867))+(((-1.0)*r12*sj3*x15868)));
evalcond[5]=(((cj3*r01*x15869))+((gconst55*x15858))+((gconst56*x15859))+(((-1.0)*r02*x15855*x15860))+((cj1*cj2))+(((-1.0)*sj1*x15857))+(((-1.0)*gconst56*r00*x15856*x15860)));
evalcond[6]=(((r21*x15861))+(((-1.0)*r22*x15855*x15860))+(((-1.0)*x15871))+((cj3*r21*x15869))+((r20*x15863))+(((-1.0)*gconst56*r20*x15856*x15860)));
evalcond[7]=((((-1.0)*r22*sj3*x15868))+((r21*x15856*x15863))+((sj1*sj2))+(((-1.0)*r20*x15861*x15867))+(((-1.0)*gconst56*r21*x15860))+(((-1.0)*cj1*x15862))+(((-1.0)*gconst55*r20*x15860)));
evalcond[8]=((((-1.0)*gconst56*x15858*x15867))+(((-1.0)*r02*sj3*x15868))+(((-1.0)*gconst55*r00*x15860))+(((-1.0)*gconst56*r01*x15860))+(((-1.0)*x15871))+((x15859*x15869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15872=IKPowWithIntegerCheck(IKsign((((gconst56*r01))+((gconst55*r00)))),-1);
if(!x15872.valid){
continue;
}
CheckValue<IkReal> x15873 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst55*r21))+((gconst56*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15872.value)))+(x15873.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15874=IKsin(j4);
IkReal x15875=IKcos(j4);
IkReal x15876=((1.0)*sj2);
IkReal x15877=(r00*sj3);
IkReal x15878=(r01*sj3);
IkReal x15879=((1.0)*cj3);
IkReal x15880=(gconst56*sj3);
IkReal x15881=((1.0)*cj2);
IkReal x15882=(gconst55*sj3);
IkReal x15883=(cj3*gconst56);
IkReal x15884=(cj1*x15876);
IkReal x15885=(sj1*x15881);
IkReal x15886=((1.0)*x15875);
IkReal x15887=((1.0)*x15874);
IkReal x15888=(gconst55*x15875);
IkReal x15889=(gconst56*x15874);
IkReal x15890=(x15885+x15884);
evalcond[0]=(((r20*x15889))+(((-1.0)*r22*x15886))+(((-1.0)*gconst55*r21*x15887)));
evalcond[1]=((((-1.0)*r02*x15886))+((r00*x15889))+(((-1.0)*gconst55*r01*x15887)));
evalcond[2]=((1.0)+((r10*x15889))+(((-1.0)*gconst55*r11*x15887))+(((-1.0)*r12*x15886)));
evalcond[3]=(((r10*x15882))+(((-1.0)*gconst56*r10*x15875*x15879))+((cj3*r11*x15888))+((r11*x15880))+(((-1.0)*r12*x15874*x15879)));
evalcond[4]=((((-1.0)*gconst55*r10*x15879))+((r11*x15875*x15882))+(((-1.0)*r12*sj3*x15887))+(((-1.0)*r10*x15880*x15886))+(((-1.0)*gconst56*r11*x15879)));
evalcond[5]=(((gconst55*x15877))+(((-1.0)*gconst56*r00*x15875*x15879))+(((-1.0)*r02*x15874*x15879))+((gconst56*x15878))+((cj1*cj2))+((cj3*r01*x15888))+(((-1.0)*sj1*x15876)));
evalcond[6]=(((cj3*r21*x15888))+(((-1.0)*gconst56*r20*x15875*x15879))+((r20*x15882))+(((-1.0)*r22*x15874*x15879))+(((-1.0)*x15890))+((r21*x15880)));
evalcond[7]=((((-1.0)*r20*x15880*x15886))+(((-1.0)*gconst55*r20*x15879))+(((-1.0)*cj1*x15881))+((sj1*sj2))+(((-1.0)*r22*sj3*x15887))+(((-1.0)*gconst56*r21*x15879))+((r21*x15875*x15882)));
evalcond[8]=((((-1.0)*gconst56*r01*x15879))+(((-1.0)*gconst55*r00*x15879))+(((-1.0)*gconst56*x15877*x15886))+(((-1.0)*x15890))+((x15878*x15888))+(((-1.0)*r02*sj3*x15887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15891=((-1.0)*r21);
IkReal x15893 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15893)==0){
continue;
}
IkReal x15892=pow(x15893,-0.5);
CheckValue<IkReal> x15894 = IKatan2WithCheck(IkReal(x15891),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15894.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x15894.value))));
IkReal gconst58=(x15891*x15892);
IkReal gconst59=((1.0)*r20*x15892);
CheckValue<IkReal> x15895 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15895.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15895.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15896=((-1.0)*r21);
CheckValue<IkReal> x15899 = IKatan2WithCheck(IkReal(x15896),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15899.valid){
continue;
}
IkReal x15897=((1.0)*(x15899.value));
IkReal x15898=x15892;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15897)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15897)));
IkReal gconst58=(x15896*x15898);
IkReal gconst59=((1.0)*r20*x15898);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x15900=((-1.0)*r21);
CheckValue<IkReal> x15903 = IKatan2WithCheck(IkReal(x15900),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15903.valid){
continue;
}
IkReal x15901=((1.0)*(x15903.value));
IkReal x15902=x15892;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15901)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15901)));
IkReal gconst58=(x15900*x15902);
IkReal gconst59=((1.0)*r20*x15902);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15904=((-1.0)*r21);
CheckValue<IkReal> x15907 = IKatan2WithCheck(IkReal(x15904),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15907.valid){
continue;
}
IkReal x15905=((1.0)*(x15907.value));
IkReal x15906=x15892;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15905)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15905)));
IkReal gconst58=(x15904*x15906);
IkReal gconst59=((1.0)*r20*x15906);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15908=gconst59*gconst59;
IkReal x15909=gconst58*gconst58;
IkReal x15910=(r11*sj3);
IkReal x15911=(r10*sj3);
IkReal x15912=(cj3*r10);
IkReal x15913=((1.0)*r21);
IkReal x15914=(gconst58*gconst59);
IkReal x15915=(cj3*r11);
IkReal x15916=(r20*x15908);
CheckValue<IkReal> x15917=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((r21*x15909*x15915))+((x15912*x15916))+(((-1.0)*x15912*x15913*x15914))+(((-1.0)*r20*x15914*x15915)))),-1);
if(!x15917.valid){
continue;
}
CheckValue<IkReal> x15918 = IKatan2WithCheck(IkReal((((gconst59*r22*x15910))+((gconst58*r22*x15911)))),IkReal((((x15910*x15916))+(((-1.0)*x15910*x15913*x15914))+(((-1.0)*x15909*x15911*x15913))+((r20*x15911*x15914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15917.value)))+(x15918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15919=IKsin(j4);
IkReal x15920=IKcos(j4);
IkReal x15921=(cj3*gconst59);
IkReal x15922=(gconst58*sj3);
IkReal x15923=(cj3*gconst58);
IkReal x15924=((1.0)*sj1);
IkReal x15925=((1.0)*cj1);
IkReal x15926=(gconst59*sj3);
IkReal x15927=(sj2*x15925);
IkReal x15928=(cj2*x15924);
IkReal x15929=((1.0)*x15920);
IkReal x15930=((1.0)*x15919);
IkReal x15931=(r21*x15920);
IkReal x15932=(r01*x15920);
IkReal x15933=(r11*x15920);
IkReal x15934=(gconst59*x15919);
IkReal x15935=(x15928+x15927);
evalcond[0]=(((r20*x15934))+(((-1.0)*gconst58*r21*x15930))+(((-1.0)*r22*x15929)));
evalcond[1]=(((r00*x15934))+(((-1.0)*r02*x15929))+(((-1.0)*gconst58*r01*x15930)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15929))+(((-1.0)*gconst58*r11*x15930))+((r10*x15934)));
evalcond[3]=(((r10*x15922))+((r11*x15926))+((x15923*x15933))+(((-1.0)*r10*x15921*x15929))+(((-1.0)*cj3*r12*x15930)));
evalcond[4]=(((x15922*x15933))+(((-1.0)*r11*x15921))+(((-1.0)*r12*sj3*x15930))+(((-1.0)*r10*x15923))+(((-1.0)*r10*x15926*x15929)));
evalcond[5]=(((x15923*x15932))+((r00*x15922))+((r01*x15926))+((cj1*cj2))+(((-1.0)*sj2*x15924))+(((-1.0)*cj3*r02*x15930))+(((-1.0)*r00*x15921*x15929)));
evalcond[6]=(((r20*x15922))+((r21*x15926))+((x15923*x15931))+(((-1.0)*r20*x15921*x15929))+(((-1.0)*x15935))+(((-1.0)*cj3*r22*x15930)));
evalcond[7]=((((-1.0)*cj2*x15925))+(((-1.0)*r20*x15923))+((sj1*sj2))+((x15922*x15931))+(((-1.0)*r22*sj3*x15930))+(((-1.0)*r20*x15926*x15929))+(((-1.0)*r21*x15921)));
evalcond[8]=((((-1.0)*r02*sj3*x15930))+(((-1.0)*r00*x15926*x15929))+((x15922*x15932))+(((-1.0)*x15935))+(((-1.0)*r00*x15923))+(((-1.0)*r01*x15921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15936=((1.0)*gconst58);
CheckValue<IkReal> x15937 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x15936))+((gconst59*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15937.valid){
continue;
}
CheckValue<IkReal> x15938=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15936))+(((-1.0)*gconst59*r21)))),-1);
if(!x15938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15937.value)+(((1.5707963267949)*(x15938.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15939=IKsin(j4);
IkReal x15940=IKcos(j4);
IkReal x15941=(cj3*gconst59);
IkReal x15942=(gconst58*sj3);
IkReal x15943=(cj3*gconst58);
IkReal x15944=((1.0)*sj1);
IkReal x15945=((1.0)*cj1);
IkReal x15946=(gconst59*sj3);
IkReal x15947=(sj2*x15945);
IkReal x15948=(cj2*x15944);
IkReal x15949=((1.0)*x15940);
IkReal x15950=((1.0)*x15939);
IkReal x15951=(r21*x15940);
IkReal x15952=(r01*x15940);
IkReal x15953=(r11*x15940);
IkReal x15954=(gconst59*x15939);
IkReal x15955=(x15948+x15947);
evalcond[0]=((((-1.0)*r22*x15949))+(((-1.0)*gconst58*r21*x15950))+((r20*x15954)));
evalcond[1]=((((-1.0)*r02*x15949))+((r00*x15954))+(((-1.0)*gconst58*r01*x15950)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15949))+((r10*x15954))+(((-1.0)*gconst58*r11*x15950)));
evalcond[3]=(((x15943*x15953))+(((-1.0)*r10*x15941*x15949))+((r10*x15942))+((r11*x15946))+(((-1.0)*cj3*r12*x15950)));
evalcond[4]=(((x15942*x15953))+(((-1.0)*r10*x15946*x15949))+(((-1.0)*r12*sj3*x15950))+(((-1.0)*r11*x15941))+(((-1.0)*r10*x15943)));
evalcond[5]=(((r01*x15946))+((x15943*x15952))+((r00*x15942))+(((-1.0)*r00*x15941*x15949))+(((-1.0)*sj2*x15944))+(((-1.0)*cj3*r02*x15950))+((cj1*cj2)));
evalcond[6]=(((x15943*x15951))+(((-1.0)*cj3*r22*x15950))+(((-1.0)*r20*x15941*x15949))+((r20*x15942))+(((-1.0)*x15955))+((r21*x15946)));
evalcond[7]=((((-1.0)*r22*sj3*x15950))+(((-1.0)*r20*x15946*x15949))+((x15942*x15951))+(((-1.0)*r21*x15941))+((sj1*sj2))+(((-1.0)*cj2*x15945))+(((-1.0)*r20*x15943)));
evalcond[8]=(((x15942*x15952))+(((-1.0)*r00*x15943))+(((-1.0)*r01*x15941))+(((-1.0)*x15955))+(((-1.0)*r02*sj3*x15950))+(((-1.0)*r00*x15946*x15949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15956 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst58*r21))+((gconst59*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15956.valid){
continue;
}
CheckValue<IkReal> x15957=IKPowWithIntegerCheck(IKsign((((gconst58*r00))+((gconst59*r01)))),-1);
if(!x15957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15956.value)+(((1.5707963267949)*(x15957.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15958=IKsin(j4);
IkReal x15959=IKcos(j4);
IkReal x15960=(cj3*gconst59);
IkReal x15961=(gconst58*sj3);
IkReal x15962=(cj3*gconst58);
IkReal x15963=((1.0)*sj1);
IkReal x15964=((1.0)*cj1);
IkReal x15965=(gconst59*sj3);
IkReal x15966=(sj2*x15964);
IkReal x15967=(cj2*x15963);
IkReal x15968=((1.0)*x15959);
IkReal x15969=((1.0)*x15958);
IkReal x15970=(r21*x15959);
IkReal x15971=(r01*x15959);
IkReal x15972=(r11*x15959);
IkReal x15973=(gconst59*x15958);
IkReal x15974=(x15966+x15967);
evalcond[0]=((((-1.0)*gconst58*r21*x15969))+((r20*x15973))+(((-1.0)*r22*x15968)));
evalcond[1]=((((-1.0)*r02*x15968))+((r00*x15973))+(((-1.0)*gconst58*r01*x15969)));
evalcond[2]=((1.0)+(((-1.0)*gconst58*r11*x15969))+((r10*x15973))+(((-1.0)*r12*x15968)));
evalcond[3]=((((-1.0)*r10*x15960*x15968))+((r11*x15965))+((x15962*x15972))+((r10*x15961))+(((-1.0)*cj3*r12*x15969)));
evalcond[4]=((((-1.0)*r11*x15960))+((x15961*x15972))+(((-1.0)*r12*sj3*x15969))+(((-1.0)*r10*x15962))+(((-1.0)*r10*x15965*x15968)));
evalcond[5]=(((r01*x15965))+(((-1.0)*r00*x15960*x15968))+((r00*x15961))+(((-1.0)*sj2*x15963))+((x15962*x15971))+(((-1.0)*cj3*r02*x15969))+((cj1*cj2)));
evalcond[6]=((((-1.0)*cj3*r22*x15969))+((r20*x15961))+(((-1.0)*x15974))+(((-1.0)*r20*x15960*x15968))+((x15962*x15970))+((r21*x15965)));
evalcond[7]=((((-1.0)*r22*sj3*x15969))+(((-1.0)*r21*x15960))+((x15961*x15970))+((sj1*sj2))+(((-1.0)*cj2*x15964))+(((-1.0)*r20*x15965*x15968))+(((-1.0)*r20*x15962)));
evalcond[8]=((((-1.0)*r01*x15960))+(((-1.0)*x15974))+((x15961*x15971))+(((-1.0)*r00*x15962))+(((-1.0)*r00*x15965*x15968))+(((-1.0)*r02*sj3*x15969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15976 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x15976)==0){
continue;
}
IkReal x15975=pow(x15976,-0.5);
CheckValue<IkReal> x15977 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15977.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15977.value));
IkReal gconst61=((-1.0)*r01*x15975);
IkReal gconst62=(r00*x15975);
CheckValue<IkReal> x15978 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15978.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15978.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15981 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15981.valid){
continue;
}
IkReal x15979=((-1.0)*(x15981.value));
IkReal x15980=x15975;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x15979;
IkReal gconst60=x15979;
IkReal gconst61=((-1.0)*r01*x15980);
IkReal gconst62=(r00*x15980);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15984 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15984.valid){
continue;
}
IkReal x15982=((-1.0)*(x15984.value));
IkReal x15983=x15975;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x15982;
IkReal gconst60=x15982;
IkReal gconst61=((-1.0)*r01*x15983);
IkReal gconst62=(r00*x15983);
CheckValue<IkReal> x15992=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x15992.valid){
continue;
}
IkReal x15985=x15992.value;
IkReal x15986=(cj3*x15985);
IkReal x15987=(r21*x15986);
IkReal x15988=(r10*x15986);
IkReal x15989=(r11*x15986);
IkReal x15990=(r20*x15986);
IkReal x15991=(r00*r01*x15986);
j4eval[0]=IKsign((((cj3*r12*r22))+((r00*r01*r20*x15989))+((r20*x15988*(r00*r00)))+((r11*x15987*(r01*r01)))+((r00*r01*r10*x15987))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15995 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15995.valid){
continue;
}
IkReal x15993=((-1.0)*(x15995.value));
IkReal x15994=x15975;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x15993;
IkReal gconst60=x15993;
IkReal gconst61=((-1.0)*r01*x15994);
IkReal gconst62=(r00*x15994);
CheckValue<IkReal> x16003=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x16003.valid){
continue;
}
IkReal x15996=x16003.value;
IkReal x15997=(sj3*x15996);
IkReal x15998=(r11*x15997);
IkReal x15999=(r21*x15997);
IkReal x16000=(r20*x15997);
IkReal x16001=(r10*x15997);
IkReal x16002=(r00*r01*x15997);
j4eval[0]=IKsign((((r21*x15998*(r01*r01)))+((r00*r01*r20*x15998))+((r10*x16000*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r10*x15999))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16004=gconst61*gconst61;
IkReal x16005=gconst62*gconst62;
IkReal x16006=((1.0)*gconst62);
IkReal x16007=(r10*r21);
IkReal x16008=(gconst61*sj3);
IkReal x16009=(cj3*r11);
IkReal x16010=(cj3*gconst61*r10);
IkReal x16011=(r20*x16005);
CheckValue<IkReal> x16012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r20*x16006*x16008))+(((-1.0)*x16006*x16007*x16008))+((r12*r22*sj3))+((r11*r21*sj3*x16004))+((r10*sj3*x16011)))),-1);
if(!x16012.valid){
continue;
}
CheckValue<IkReal> x16013 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x16006*x16009))+(((-1.0)*r22*x16010)))),IkReal(((((-1.0)*x16009*x16011))+((cj3*x16004*x16007))+(((-1.0)*r20*x16006*x16010))+((gconst61*gconst62*r21*x16009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16012.value)))+(x16013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16014=IKsin(j4);
IkReal x16015=IKcos(j4);
IkReal x16016=(gconst62*sj3);
IkReal x16017=(gconst61*r11);
IkReal x16018=(gconst61*sj3);
IkReal x16019=((1.0)*cj3);
IkReal x16020=(sj1*sj2);
IkReal x16021=(gconst61*r21);
IkReal x16022=((1.0)*cj1);
IkReal x16023=(gconst61*r01);
IkReal x16024=(cj3*gconst62);
IkReal x16025=(sj2*x16022);
IkReal x16026=((1.0)*cj2*sj1);
IkReal x16027=((1.0)*x16015);
IkReal x16028=((1.0)*x16014);
IkReal x16029=(gconst62*x16014);
IkReal x16030=(cj3*x16015);
IkReal x16031=(x16026+x16025);
evalcond[0]=((((-1.0)*r22*x16027))+(((-1.0)*x16021*x16028))+((r20*x16029)));
evalcond[1]=((((-1.0)*r02*x16027))+(((-1.0)*x16023*x16028))+((r00*x16029)));
evalcond[2]=((1.0)+(((-1.0)*x16017*x16028))+(((-1.0)*r12*x16027))+((r10*x16029)));
evalcond[3]=((((-1.0)*r12*x16014*x16019))+((r11*x16016))+(((-1.0)*gconst62*r10*x16015*x16019))+((x16017*x16030))+((r10*x16018)));
evalcond[4]=((((-1.0)*r12*sj3*x16028))+(((-1.0)*gconst62*r11*x16019))+((sj3*x16015*x16017))+(((-1.0)*r10*x16016*x16027))+(((-1.0)*gconst61*r10*x16019)));
evalcond[5]=(((r00*x16018))+(((-1.0)*x16020))+(((-1.0)*gconst62*r00*x16015*x16019))+(((-1.0)*r02*x16014*x16019))+((r01*x16016))+((cj1*cj2))+((x16023*x16030)));
evalcond[6]=((((-1.0)*r22*x16014*x16019))+((r20*x16018))+((r21*x16016))+(((-1.0)*gconst62*r20*x16015*x16019))+((x16021*x16030))+(((-1.0)*x16031)));
evalcond[7]=((((-1.0)*r20*x16016*x16027))+(((-1.0)*cj2*x16022))+(((-1.0)*gconst61*r20*x16019))+(((-1.0)*gconst62*r21*x16019))+x16020+(((-1.0)*r22*sj3*x16028))+((r21*x16015*x16018)));
evalcond[8]=((((-1.0)*r00*x16016*x16027))+(((-1.0)*gconst61*r00*x16019))+(((-1.0)*gconst62*r01*x16019))+(((-1.0)*r02*sj3*x16028))+((r01*x16015*x16018))+(((-1.0)*x16031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16032=gconst62*gconst62;
IkReal x16033=gconst61*gconst61;
IkReal x16034=(r20*sj3);
IkReal x16035=(gconst61*r10);
IkReal x16036=(r22*sj3);
IkReal x16037=(gconst62*r11);
IkReal x16038=(cj3*r21);
IkReal x16039=(cj3*r20);
IkReal x16040=((1.0)*r21*sj3);
CheckValue<IkReal> x16041=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*gconst62*x16035*x16038))+((r11*x16033*x16038))+(((-1.0)*gconst61*x16037*x16039))+((r10*x16032*x16039)))),-1);
if(!x16041.valid){
continue;
}
CheckValue<IkReal> x16042 = IKatan2WithCheck(IkReal((((x16036*x16037))+((x16035*x16036)))),IkReal((((gconst62*x16034*x16035))+(((-1.0)*r10*x16033*x16040))+(((-1.0)*gconst61*x16037*x16040))+((r11*x16032*x16034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16041.value)))+(x16042.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16043=IKsin(j4);
IkReal x16044=IKcos(j4);
IkReal x16045=(gconst62*sj3);
IkReal x16046=(gconst61*r11);
IkReal x16047=(gconst61*sj3);
IkReal x16048=((1.0)*cj3);
IkReal x16049=(sj1*sj2);
IkReal x16050=(gconst61*r21);
IkReal x16051=((1.0)*cj1);
IkReal x16052=(gconst61*r01);
IkReal x16053=(cj3*gconst62);
IkReal x16054=(sj2*x16051);
IkReal x16055=((1.0)*cj2*sj1);
IkReal x16056=((1.0)*x16044);
IkReal x16057=((1.0)*x16043);
IkReal x16058=(gconst62*x16043);
IkReal x16059=(cj3*x16044);
IkReal x16060=(x16055+x16054);
evalcond[0]=((((-1.0)*x16050*x16057))+(((-1.0)*r22*x16056))+((r20*x16058)));
evalcond[1]=(((r00*x16058))+(((-1.0)*r02*x16056))+(((-1.0)*x16052*x16057)));
evalcond[2]=((1.0)+((r10*x16058))+(((-1.0)*x16046*x16057))+(((-1.0)*r12*x16056)));
evalcond[3]=(((x16046*x16059))+((r11*x16045))+(((-1.0)*r12*x16043*x16048))+((r10*x16047))+(((-1.0)*gconst62*r10*x16044*x16048)));
evalcond[4]=(((sj3*x16044*x16046))+(((-1.0)*r12*sj3*x16057))+(((-1.0)*gconst61*r10*x16048))+(((-1.0)*r10*x16045*x16056))+(((-1.0)*gconst62*r11*x16048)));
evalcond[5]=(((x16052*x16059))+(((-1.0)*x16049))+(((-1.0)*r02*x16043*x16048))+((cj1*cj2))+((r01*x16045))+(((-1.0)*gconst62*r00*x16044*x16048))+((r00*x16047)));
evalcond[6]=((((-1.0)*r22*x16043*x16048))+((r21*x16045))+(((-1.0)*x16060))+(((-1.0)*gconst62*r20*x16044*x16048))+((r20*x16047))+((x16050*x16059)));
evalcond[7]=((((-1.0)*r22*sj3*x16057))+((r21*x16044*x16047))+(((-1.0)*r20*x16045*x16056))+x16049+(((-1.0)*gconst61*r20*x16048))+(((-1.0)*gconst62*r21*x16048))+(((-1.0)*cj2*x16051)));
evalcond[8]=((((-1.0)*gconst62*r01*x16048))+(((-1.0)*r00*x16045*x16056))+((r01*x16044*x16047))+(((-1.0)*gconst61*r00*x16048))+(((-1.0)*r02*sj3*x16057))+(((-1.0)*x16060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16061=((1.0)*gconst61);
CheckValue<IkReal> x16062 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x16061))+((gconst62*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16062.valid){
continue;
}
CheckValue<IkReal> x16063=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst62*r21))+(((-1.0)*r20*x16061)))),-1);
if(!x16063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16062.value)+(((1.5707963267949)*(x16063.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16064=IKsin(j4);
IkReal x16065=IKcos(j4);
IkReal x16066=(gconst62*sj3);
IkReal x16067=(gconst61*r11);
IkReal x16068=(gconst61*sj3);
IkReal x16069=((1.0)*cj3);
IkReal x16070=(sj1*sj2);
IkReal x16071=(gconst61*r21);
IkReal x16072=((1.0)*cj1);
IkReal x16073=(gconst61*r01);
IkReal x16074=(cj3*gconst62);
IkReal x16075=(sj2*x16072);
IkReal x16076=((1.0)*cj2*sj1);
IkReal x16077=((1.0)*x16065);
IkReal x16078=((1.0)*x16064);
IkReal x16079=(gconst62*x16064);
IkReal x16080=(cj3*x16065);
IkReal x16081=(x16075+x16076);
evalcond[0]=((((-1.0)*r22*x16077))+((r20*x16079))+(((-1.0)*x16071*x16078)));
evalcond[1]=((((-1.0)*x16073*x16078))+((r00*x16079))+(((-1.0)*r02*x16077)));
evalcond[2]=((1.0)+((r10*x16079))+(((-1.0)*x16067*x16078))+(((-1.0)*r12*x16077)));
evalcond[3]=(((r10*x16068))+(((-1.0)*gconst62*r10*x16065*x16069))+((x16067*x16080))+(((-1.0)*r12*x16064*x16069))+((r11*x16066)));
evalcond[4]=((((-1.0)*r12*sj3*x16078))+(((-1.0)*gconst62*r11*x16069))+((sj3*x16065*x16067))+(((-1.0)*r10*x16066*x16077))+(((-1.0)*gconst61*r10*x16069)));
evalcond[5]=(((x16073*x16080))+(((-1.0)*x16070))+((r00*x16068))+((r01*x16066))+(((-1.0)*r02*x16064*x16069))+((cj1*cj2))+(((-1.0)*gconst62*r00*x16065*x16069)));
evalcond[6]=((((-1.0)*gconst62*r20*x16065*x16069))+((x16071*x16080))+((r21*x16066))+(((-1.0)*r22*x16064*x16069))+((r20*x16068))+(((-1.0)*x16081)));
evalcond[7]=((((-1.0)*r22*sj3*x16078))+x16070+(((-1.0)*gconst62*r21*x16069))+(((-1.0)*gconst61*r20*x16069))+(((-1.0)*r20*x16066*x16077))+((r21*x16065*x16068))+(((-1.0)*cj2*x16072)));
evalcond[8]=((((-1.0)*gconst61*r00*x16069))+(((-1.0)*r00*x16066*x16077))+(((-1.0)*r02*sj3*x16078))+((r01*x16065*x16068))+(((-1.0)*gconst62*r01*x16069))+(((-1.0)*x16081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16083 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x16083)==0){
continue;
}
IkReal x16082=pow(x16083,-0.5);
CheckValue<IkReal> x16084 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16084.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x16084.value))));
IkReal gconst64=((1.0)*r01*x16082);
IkReal gconst65=((-1.0)*r00*x16082);
CheckValue<IkReal> x16085 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16085.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x16085.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x16088 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16088.valid){
continue;
}
IkReal x16086=((1.0)*(x16088.value));
IkReal x16087=x16082;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x16086)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x16086)));
IkReal gconst64=((1.0)*r01*x16087);
IkReal gconst65=((-1.0)*r00*x16087);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x16091 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16091.valid){
continue;
}
IkReal x16089=((1.0)*(x16091.value));
IkReal x16090=x16082;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x16089)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x16089)));
IkReal gconst64=((1.0)*r01*x16090);
IkReal gconst65=((-1.0)*r00*x16090);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16092=gconst65*gconst65;
IkReal x16093=gconst64*gconst64;
IkReal x16094=(r11*r20);
IkReal x16095=(r22*sj3);
IkReal x16096=(gconst64*r10);
IkReal x16097=(gconst65*r11);
IkReal x16098=((1.0)*sj3);
IkReal x16099=((1.0)*cj3*gconst65);
IkReal x16100=(r21*x16093);
CheckValue<IkReal> x16101=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((cj3*r10*r20*x16092))+(((-1.0)*gconst64*x16094*x16099))+(((-1.0)*r21*x16096*x16099))+((cj3*r11*x16100)))),-1);
if(!x16101.valid){
continue;
}
CheckValue<IkReal> x16102 = IKatan2WithCheck(IkReal((((x16095*x16097))+((x16095*x16096)))),IkReal(((((-1.0)*gconst64*r21*x16097*x16098))+(((-1.0)*r10*x16098*x16100))+((sj3*x16092*x16094))+((gconst65*r20*sj3*x16096)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16101.value)))+(x16102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16103=IKsin(j4);
IkReal x16104=IKcos(j4);
IkReal x16105=(gconst65*r10);
IkReal x16106=((1.0)*cj3);
IkReal x16107=(gconst65*r21);
IkReal x16108=(sj1*sj2);
IkReal x16109=(gconst64*r00);
IkReal x16110=(gconst65*sj3);
IkReal x16111=((1.0)*cj2);
IkReal x16112=(cj3*gconst65);
IkReal x16113=(gconst64*sj3);
IkReal x16114=((1.0)*cj1*sj2);
IkReal x16115=(sj1*x16111);
IkReal x16116=((1.0)*x16104);
IkReal x16117=((1.0)*x16103);
IkReal x16118=(gconst65*x16103);
IkReal x16119=(cj3*gconst64*x16104);
IkReal x16120=(x16114+x16115);
evalcond[0]=(((r20*x16118))+(((-1.0)*gconst64*r21*x16117))+(((-1.0)*r22*x16116)));
evalcond[1]=(((r00*x16118))+(((-1.0)*r02*x16116))+(((-1.0)*gconst64*r01*x16117)));
evalcond[2]=((1.0)+((x16103*x16105))+(((-1.0)*r12*x16116))+(((-1.0)*gconst64*r11*x16117)));
evalcond[3]=((((-1.0)*x16104*x16105*x16106))+((r11*x16119))+((r11*x16110))+((r10*x16113))+(((-1.0)*r12*x16103*x16106)));
evalcond[4]=(((r11*x16104*x16113))+(((-1.0)*gconst65*r11*x16106))+(((-1.0)*gconst64*r10*x16106))+(((-1.0)*sj3*x16105*x16116))+(((-1.0)*r12*sj3*x16117)));
evalcond[5]=((((-1.0)*x16108))+(((-1.0)*gconst65*r00*x16104*x16106))+(((-1.0)*r02*x16103*x16106))+((cj1*cj2))+((sj3*x16109))+((r01*x16119))+((r01*x16110)));
evalcond[6]=((((-1.0)*x16120))+(((-1.0)*gconst65*r20*x16104*x16106))+((r21*x16119))+(((-1.0)*r22*x16103*x16106))+((r20*x16113))+((sj3*x16107)));
evalcond[7]=((((-1.0)*r22*sj3*x16117))+(((-1.0)*r20*x16110*x16116))+x16108+(((-1.0)*x16106*x16107))+((r21*x16104*x16113))+(((-1.0)*cj1*x16111))+(((-1.0)*gconst64*r20*x16106)));
evalcond[8]=((((-1.0)*x16120))+((r01*x16104*x16113))+(((-1.0)*r02*sj3*x16117))+(((-1.0)*gconst65*r01*x16106))+(((-1.0)*r00*x16110*x16116))+(((-1.0)*x16106*x16109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16121=((1.0)*gconst64);
CheckValue<IkReal> x16122=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst65*r21))+(((-1.0)*r20*x16121)))),-1);
if(!x16122.valid){
continue;
}
CheckValue<IkReal> x16123 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst65*r00))+(((-1.0)*r01*x16121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16122.value)))+(x16123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16124=IKsin(j4);
IkReal x16125=IKcos(j4);
IkReal x16126=(gconst65*r10);
IkReal x16127=((1.0)*cj3);
IkReal x16128=(gconst65*r21);
IkReal x16129=(sj1*sj2);
IkReal x16130=(gconst64*r00);
IkReal x16131=(gconst65*sj3);
IkReal x16132=((1.0)*cj2);
IkReal x16133=(cj3*gconst65);
IkReal x16134=(gconst64*sj3);
IkReal x16135=((1.0)*cj1*sj2);
IkReal x16136=(sj1*x16132);
IkReal x16137=((1.0)*x16125);
IkReal x16138=((1.0)*x16124);
IkReal x16139=(gconst65*x16124);
IkReal x16140=(cj3*gconst64*x16125);
IkReal x16141=(x16135+x16136);
evalcond[0]=((((-1.0)*r22*x16137))+((r20*x16139))+(((-1.0)*gconst64*r21*x16138)));
evalcond[1]=((((-1.0)*r02*x16137))+(((-1.0)*gconst64*r01*x16138))+((r00*x16139)));
evalcond[2]=((1.0)+(((-1.0)*r12*x16137))+((x16124*x16126))+(((-1.0)*gconst64*r11*x16138)));
evalcond[3]=(((r11*x16140))+(((-1.0)*r12*x16124*x16127))+((r10*x16134))+((r11*x16131))+(((-1.0)*x16125*x16126*x16127)));
evalcond[4]=((((-1.0)*sj3*x16126*x16137))+((r11*x16125*x16134))+(((-1.0)*gconst65*r11*x16127))+(((-1.0)*r12*sj3*x16138))+(((-1.0)*gconst64*r10*x16127)));
evalcond[5]=((((-1.0)*x16129))+(((-1.0)*gconst65*r00*x16125*x16127))+((sj3*x16130))+((r01*x16140))+((cj1*cj2))+(((-1.0)*r02*x16124*x16127))+((r01*x16131)));
evalcond[6]=(((r21*x16140))+(((-1.0)*r22*x16124*x16127))+((r20*x16134))+((sj3*x16128))+(((-1.0)*x16141))+(((-1.0)*gconst65*r20*x16125*x16127)));
evalcond[7]=((((-1.0)*r20*x16131*x16137))+x16129+(((-1.0)*x16127*x16128))+(((-1.0)*gconst64*r20*x16127))+(((-1.0)*r22*sj3*x16138))+(((-1.0)*cj1*x16132))+((r21*x16125*x16134)));
evalcond[8]=((((-1.0)*r02*sj3*x16138))+(((-1.0)*x16127*x16130))+(((-1.0)*gconst65*r01*x16127))+((r01*x16125*x16134))+(((-1.0)*r00*x16131*x16137))+(((-1.0)*x16141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16142=IKPowWithIntegerCheck(IKsign((((gconst64*r00))+((gconst65*r01)))),-1);
if(!x16142.valid){
continue;
}
CheckValue<IkReal> x16143 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst64*r21))+((gconst65*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16142.value)))+(x16143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16144=IKsin(j4);
IkReal x16145=IKcos(j4);
IkReal x16146=(gconst65*r10);
IkReal x16147=((1.0)*cj3);
IkReal x16148=(gconst65*r21);
IkReal x16149=(sj1*sj2);
IkReal x16150=(gconst64*r00);
IkReal x16151=(gconst65*sj3);
IkReal x16152=((1.0)*cj2);
IkReal x16153=(cj3*gconst65);
IkReal x16154=(gconst64*sj3);
IkReal x16155=((1.0)*cj1*sj2);
IkReal x16156=(sj1*x16152);
IkReal x16157=((1.0)*x16145);
IkReal x16158=((1.0)*x16144);
IkReal x16159=(gconst65*x16144);
IkReal x16160=(cj3*gconst64*x16145);
IkReal x16161=(x16156+x16155);
evalcond[0]=((((-1.0)*gconst64*r21*x16158))+((r20*x16159))+(((-1.0)*r22*x16157)));
evalcond[1]=((((-1.0)*r02*x16157))+((r00*x16159))+(((-1.0)*gconst64*r01*x16158)));
evalcond[2]=((1.0)+((x16144*x16146))+(((-1.0)*gconst64*r11*x16158))+(((-1.0)*r12*x16157)));
evalcond[3]=((((-1.0)*x16145*x16146*x16147))+((r11*x16151))+((r11*x16160))+((r10*x16154))+(((-1.0)*r12*x16144*x16147)));
evalcond[4]=((((-1.0)*r12*sj3*x16158))+(((-1.0)*gconst64*r10*x16147))+(((-1.0)*sj3*x16146*x16157))+((r11*x16145*x16154))+(((-1.0)*gconst65*r11*x16147)));
evalcond[5]=((((-1.0)*x16149))+(((-1.0)*r02*x16144*x16147))+((sj3*x16150))+(((-1.0)*gconst65*r00*x16145*x16147))+((r01*x16160))+((r01*x16151))+((cj1*cj2)));
evalcond[6]=(((r21*x16160))+((r20*x16154))+((sj3*x16148))+(((-1.0)*r22*x16144*x16147))+(((-1.0)*x16161))+(((-1.0)*gconst65*r20*x16145*x16147)));
evalcond[7]=((((-1.0)*r22*sj3*x16158))+(((-1.0)*x16147*x16148))+(((-1.0)*gconst64*r20*x16147))+((r21*x16145*x16154))+(((-1.0)*cj1*x16152))+x16149+(((-1.0)*r20*x16151*x16157)));
evalcond[8]=((((-1.0)*x16147*x16150))+(((-1.0)*r00*x16151*x16157))+((r01*x16145*x16154))+(((-1.0)*r02*sj3*x16158))+(((-1.0)*x16161))+(((-1.0)*gconst65*r01*x16147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16162=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16162);
rxp1_1=(px*r21);
rxp1_2=(r11*x16162);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x16163=(cj5*r10);
IkReal x16164=(r11*sj5);
j4eval[0]=(x16163+(((-1.0)*x16164)));
j4eval[1]=(((sj3*x16164))+(((-1.0)*sj3*x16163)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16165=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16165);
rxp1_1=(px*r21);
rxp1_2=(r11*x16165);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x16166=(r11*sj5);
IkReal x16167=(cj5*r10);
j4eval[0]=(x16167+(((-1.0)*x16166)));
j4eval[1]=(((cj3*x16166))+(((-1.0)*cj3*x16167)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16168=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16168);
rxp1_1=(px*r21);
rxp1_2=(r11*x16168);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16169=((1.0)*r10);
CheckValue<IkReal> x16170=IKPowWithIntegerCheck(cj3,-1);
if(!x16170.valid){
continue;
}
CheckValue<IkReal> x16171=IKPowWithIntegerCheck(r02,-1);
if(!x16171.valid){
continue;
}
CheckValue<IkReal> x16172=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x16169))+((cj3*r11*sj5))),-1);
if(!x16172.valid){
continue;
}
if( IKabs(((x16170.value)*(x16171.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16172.value)*(((((-1.0)*sj3*sj5*x16169))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16170.value)*(x16171.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x16172.value)*(((((-1.0)*sj3*sj5*x16169))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16170.value)*(x16171.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x16172.value)*(((((-1.0)*sj3*sj5*x16169))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16173=IKsin(j4);
IkReal x16174=IKcos(j4);
IkReal x16175=(r11*sj5);
IkReal x16176=(sj1*sj2);
IkReal x16177=((1.0)*cj3);
IkReal x16178=(r10*sj5);
IkReal x16179=(cj5*r10);
IkReal x16180=(r21*sj5);
IkReal x16181=((1.0)*cj1);
IkReal x16182=(cj5*r11);
IkReal x16183=(cj5*r20);
IkReal x16184=(r20*sj5);
IkReal x16185=(cj5*r21);
IkReal x16186=(sj2*x16181);
IkReal x16187=((1.0)*cj2*sj1);
IkReal x16188=((1.0)*x16173);
IkReal x16189=(cj3*x16174);
IkReal x16190=(sj3*x16174);
IkReal x16191=(x16187+x16186);
evalcond[0]=((-1.0)*r02*x16174);
evalcond[1]=((((-1.0)*x16180*x16188))+((x16173*x16183)));
evalcond[2]=((1.0)+((x16173*x16179))+(((-1.0)*x16175*x16188)));
evalcond[3]=((((-1.0)*r02*x16173*x16177))+((cj1*cj2))+(((-1.0)*x16176)));
evalcond[4]=((((-1.0)*x16191))+(((-1.0)*r02*sj3*x16188)));
evalcond[5]=((((-1.0)*x16174*x16177*x16179))+((sj3*x16182))+((sj3*x16178))+((x16175*x16189)));
evalcond[6]=((((-1.0)*x16179*x16190))+(((-1.0)*x16177*x16182))+((x16175*x16190))+(((-1.0)*x16177*x16178)));
evalcond[7]=(((sj3*x16184))+((sj3*x16185))+(((-1.0)*x16191))+(((-1.0)*x16174*x16177*x16183))+((x16180*x16189)));
evalcond[8]=(x16176+(((-1.0)*x16177*x16185))+(((-1.0)*x16177*x16184))+((x16180*x16190))+(((-1.0)*x16183*x16190))+(((-1.0)*cj2*x16181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16192=(cj5*r10);
IkReal x16193=((1.0)*sj3);
IkReal x16194=(r11*sj5);
CheckValue<IkReal> x16195=IKPowWithIntegerCheck((x16192+(((-1.0)*x16194))),-1);
if(!x16195.valid){
continue;
}
CheckValue<IkReal> x16196=IKPowWithIntegerCheck((((cj3*x16194))+(((-1.0)*cj3*x16192))),-1);
if(!x16196.valid){
continue;
}
if( IKabs(((-1.0)*(x16195.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16196.value)*(((((-1.0)*cj5*r11*x16193))+(((-1.0)*r10*sj5*x16193)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x16195.value)))+IKsqr(((x16196.value)*(((((-1.0)*cj5*r11*x16193))+(((-1.0)*r10*sj5*x16193))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x16195.value)), ((x16196.value)*(((((-1.0)*cj5*r11*x16193))+(((-1.0)*r10*sj5*x16193))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16197=IKsin(j4);
IkReal x16198=IKcos(j4);
IkReal x16199=(r11*sj5);
IkReal x16200=(sj1*sj2);
IkReal x16201=((1.0)*cj3);
IkReal x16202=(r10*sj5);
IkReal x16203=(cj5*r10);
IkReal x16204=(r21*sj5);
IkReal x16205=((1.0)*cj1);
IkReal x16206=(cj5*r11);
IkReal x16207=(cj5*r20);
IkReal x16208=(r20*sj5);
IkReal x16209=(cj5*r21);
IkReal x16210=(sj2*x16205);
IkReal x16211=((1.0)*cj2*sj1);
IkReal x16212=((1.0)*x16197);
IkReal x16213=(cj3*x16198);
IkReal x16214=(sj3*x16198);
IkReal x16215=(x16211+x16210);
evalcond[0]=((-1.0)*r02*x16198);
evalcond[1]=(((x16197*x16207))+(((-1.0)*x16204*x16212)));
evalcond[2]=((1.0)+((x16197*x16203))+(((-1.0)*x16199*x16212)));
evalcond[3]=((((-1.0)*r02*x16197*x16201))+(((-1.0)*x16200))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*sj3*x16212))+(((-1.0)*x16215)));
evalcond[5]=(((x16199*x16213))+(((-1.0)*x16198*x16201*x16203))+((sj3*x16202))+((sj3*x16206)));
evalcond[6]=(((x16199*x16214))+(((-1.0)*x16203*x16214))+(((-1.0)*x16201*x16206))+(((-1.0)*x16201*x16202)));
evalcond[7]=((((-1.0)*x16198*x16201*x16207))+((x16204*x16213))+(((-1.0)*x16215))+((sj3*x16208))+((sj3*x16209)));
evalcond[8]=(x16200+(((-1.0)*x16201*x16209))+(((-1.0)*x16201*x16208))+((x16204*x16214))+(((-1.0)*cj2*x16205))+(((-1.0)*x16207*x16214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16216=(cj5*r10);
IkReal x16217=(r11*sj5);
CheckValue<IkReal> x16218=IKPowWithIntegerCheck(((((-1.0)*x16217))+x16216),-1);
if(!x16218.valid){
continue;
}
CheckValue<IkReal> x16219=IKPowWithIntegerCheck((((sj3*x16217))+(((-1.0)*sj3*x16216))),-1);
if(!x16219.valid){
continue;
}
if( IKabs(((-1.0)*(x16218.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16219.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x16218.value)))+IKsqr(((x16219.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x16218.value)), ((x16219.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16220=IKsin(j4);
IkReal x16221=IKcos(j4);
IkReal x16222=(r11*sj5);
IkReal x16223=(sj1*sj2);
IkReal x16224=((1.0)*cj3);
IkReal x16225=(r10*sj5);
IkReal x16226=(cj5*r10);
IkReal x16227=(r21*sj5);
IkReal x16228=((1.0)*cj1);
IkReal x16229=(cj5*r11);
IkReal x16230=(cj5*r20);
IkReal x16231=(r20*sj5);
IkReal x16232=(cj5*r21);
IkReal x16233=(sj2*x16228);
IkReal x16234=((1.0)*cj2*sj1);
IkReal x16235=((1.0)*x16220);
IkReal x16236=(cj3*x16221);
IkReal x16237=(sj3*x16221);
IkReal x16238=(x16233+x16234);
evalcond[0]=((-1.0)*r02*x16221);
evalcond[1]=((((-1.0)*x16227*x16235))+((x16220*x16230)));
evalcond[2]=((1.0)+(((-1.0)*x16222*x16235))+((x16220*x16226)));
evalcond[3]=((((-1.0)*x16223))+((cj1*cj2))+(((-1.0)*r02*x16220*x16224)));
evalcond[4]=((((-1.0)*r02*sj3*x16235))+(((-1.0)*x16238)));
evalcond[5]=(((x16222*x16236))+((sj3*x16229))+((sj3*x16225))+(((-1.0)*x16221*x16224*x16226)));
evalcond[6]=(((x16222*x16237))+(((-1.0)*x16226*x16237))+(((-1.0)*x16224*x16229))+(((-1.0)*x16224*x16225)));
evalcond[7]=(((x16227*x16236))+((sj3*x16232))+((sj3*x16231))+(((-1.0)*x16238))+(((-1.0)*x16221*x16224*x16230)));
evalcond[8]=((((-1.0)*x16224*x16232))+(((-1.0)*x16224*x16231))+((x16227*x16237))+x16223+(((-1.0)*cj2*x16228))+(((-1.0)*x16230*x16237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16239=cj5*cj5;
IkReal x16240=(r11*sj3);
IkReal x16241=(cj3*r10);
IkReal x16242=(cj3*r11);
IkReal x16243=(r10*sj3);
IkReal x16244=(cj5*r20*sj5);
IkReal x16245=(r21*x16239);
IkReal x16246=(r20*x16239);
IkReal x16247=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x16248 = IKatan2WithCheck(IkReal((((r22*sj5*x16243))+((cj5*r22*x16240)))),IkReal(((((-1.0)*r21*x16243))+(((-1.0)*x16240*x16247))+((x16240*x16246))+((x16243*x16245))+((x16243*x16244)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16248.valid){
continue;
}
CheckValue<IkReal> x16249=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16242*x16244))+(((-1.0)*x16242*x16245))+((cj3*r12*r22))+(((-1.0)*x16241*x16247))+((r21*x16242))+((x16241*x16246)))),-1);
if(!x16249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16248.value)+(((1.5707963267949)*(x16249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16250=IKsin(j4);
IkReal x16251=IKcos(j4);
IkReal x16252=((1.0)*r22);
IkReal x16253=(cj1*cj2);
IkReal x16254=(r11*sj5);
IkReal x16255=((1.0)*cj3);
IkReal x16256=(cj5*r21);
IkReal x16257=(r00*sj5);
IkReal x16258=(sj1*sj2);
IkReal x16259=(cj5*r01);
IkReal x16260=(r10*sj5);
IkReal x16261=(cj5*r10);
IkReal x16262=(r21*sj5);
IkReal x16263=(r01*sj5);
IkReal x16264=(cj5*r00);
IkReal x16265=(cj5*r20);
IkReal x16266=(r20*sj5);
IkReal x16267=(cj5*r11);
IkReal x16268=((1.0)*cj1*sj2);
IkReal x16269=((1.0)*cj2*sj1);
IkReal x16270=((1.0)*x16250);
IkReal x16271=(cj3*x16251);
IkReal x16272=((1.0)*x16251);
IkReal x16273=(sj3*x16251);
IkReal x16274=(x16268+x16269);
evalcond[0]=(((x16250*x16265))+(((-1.0)*x16262*x16270))+(((-1.0)*x16251*x16252)));
evalcond[1]=((((-1.0)*x16263*x16270))+((x16250*x16264))+(((-1.0)*r02*x16272)));
evalcond[2]=((1.0)+(((-1.0)*r12*x16272))+((x16250*x16261))+(((-1.0)*x16254*x16270)));
evalcond[3]=(((x16254*x16271))+((sj3*x16260))+((sj3*x16267))+(((-1.0)*x16251*x16255*x16261))+(((-1.0)*r12*x16250*x16255)));
evalcond[4]=(((x16254*x16273))+(((-1.0)*sj3*x16261*x16272))+(((-1.0)*x16255*x16260))+(((-1.0)*x16255*x16267))+(((-1.0)*r12*sj3*x16270)));
evalcond[5]=(((x16263*x16271))+(((-1.0)*r02*x16250*x16255))+x16253+(((-1.0)*x16258))+(((-1.0)*x16251*x16255*x16264))+((sj3*x16257))+((sj3*x16259)));
evalcond[6]=((((-1.0)*x16274))+((sj3*x16266))+(((-1.0)*x16251*x16255*x16265))+((sj3*x16256))+((x16262*x16271))+(((-1.0)*cj3*x16250*x16252)));
evalcond[7]=(x16258+(((-1.0)*x16253))+(((-1.0)*sj3*x16250*x16252))+(((-1.0)*x16255*x16256))+((x16262*x16273))+(((-1.0)*sj3*x16265*x16272))+(((-1.0)*x16255*x16266)));
evalcond[8]=((((-1.0)*x16274))+(((-1.0)*r02*sj3*x16270))+((x16263*x16273))+(((-1.0)*sj3*x16264*x16272))+(((-1.0)*x16255*x16257))+(((-1.0)*x16255*x16259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16275=((1.0)*sj5);
CheckValue<IkReal> x16276 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x16275))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16276.valid){
continue;
}
CheckValue<IkReal> x16277=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x16275))+(((-1.0)*cj5*r21)))),-1);
if(!x16277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16276.value)+(((1.5707963267949)*(x16277.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16278=IKsin(j4);
IkReal x16279=IKcos(j4);
IkReal x16280=((1.0)*r22);
IkReal x16281=(cj1*cj2);
IkReal x16282=(r11*sj5);
IkReal x16283=((1.0)*cj3);
IkReal x16284=(cj5*r21);
IkReal x16285=(r00*sj5);
IkReal x16286=(sj1*sj2);
IkReal x16287=(cj5*r01);
IkReal x16288=(r10*sj5);
IkReal x16289=(cj5*r10);
IkReal x16290=(r21*sj5);
IkReal x16291=(r01*sj5);
IkReal x16292=(cj5*r00);
IkReal x16293=(cj5*r20);
IkReal x16294=(r20*sj5);
IkReal x16295=(cj5*r11);
IkReal x16296=((1.0)*cj1*sj2);
IkReal x16297=((1.0)*cj2*sj1);
IkReal x16298=((1.0)*x16278);
IkReal x16299=(cj3*x16279);
IkReal x16300=((1.0)*x16279);
IkReal x16301=(sj3*x16279);
IkReal x16302=(x16297+x16296);
evalcond[0]=(((x16278*x16293))+(((-1.0)*x16290*x16298))+(((-1.0)*x16279*x16280)));
evalcond[1]=((((-1.0)*r02*x16300))+((x16278*x16292))+(((-1.0)*x16291*x16298)));
evalcond[2]=((1.0)+((x16278*x16289))+(((-1.0)*r12*x16300))+(((-1.0)*x16282*x16298)));
evalcond[3]=(((sj3*x16295))+(((-1.0)*x16279*x16283*x16289))+((x16282*x16299))+((sj3*x16288))+(((-1.0)*r12*x16278*x16283)));
evalcond[4]=((((-1.0)*x16283*x16288))+(((-1.0)*x16283*x16295))+(((-1.0)*sj3*x16289*x16300))+((x16282*x16301))+(((-1.0)*r12*sj3*x16298)));
evalcond[5]=((((-1.0)*x16279*x16283*x16292))+(((-1.0)*x16286))+x16281+((x16291*x16299))+(((-1.0)*r02*x16278*x16283))+((sj3*x16287))+((sj3*x16285)));
evalcond[6]=((((-1.0)*x16279*x16283*x16293))+((sj3*x16294))+(((-1.0)*cj3*x16278*x16280))+(((-1.0)*x16302))+((x16290*x16299))+((sj3*x16284)));
evalcond[7]=((((-1.0)*x16283*x16284))+(((-1.0)*sj3*x16293*x16300))+(((-1.0)*x16281))+x16286+(((-1.0)*x16283*x16294))+((x16290*x16301))+(((-1.0)*sj3*x16278*x16280)));
evalcond[8]=((((-1.0)*x16283*x16287))+(((-1.0)*x16283*x16285))+(((-1.0)*sj3*x16292*x16300))+(((-1.0)*r02*sj3*x16298))+((x16291*x16301))+(((-1.0)*x16302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16303=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x16303.valid){
continue;
}
CheckValue<IkReal> x16304 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16303.value)))+(x16304.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16305=IKsin(j4);
IkReal x16306=IKcos(j4);
IkReal x16307=((1.0)*r22);
IkReal x16308=(cj1*cj2);
IkReal x16309=(r11*sj5);
IkReal x16310=((1.0)*cj3);
IkReal x16311=(cj5*r21);
IkReal x16312=(r00*sj5);
IkReal x16313=(sj1*sj2);
IkReal x16314=(cj5*r01);
IkReal x16315=(r10*sj5);
IkReal x16316=(cj5*r10);
IkReal x16317=(r21*sj5);
IkReal x16318=(r01*sj5);
IkReal x16319=(cj5*r00);
IkReal x16320=(cj5*r20);
IkReal x16321=(r20*sj5);
IkReal x16322=(cj5*r11);
IkReal x16323=((1.0)*cj1*sj2);
IkReal x16324=((1.0)*cj2*sj1);
IkReal x16325=((1.0)*x16305);
IkReal x16326=(cj3*x16306);
IkReal x16327=((1.0)*x16306);
IkReal x16328=(sj3*x16306);
IkReal x16329=(x16324+x16323);
evalcond[0]=((((-1.0)*x16317*x16325))+((x16305*x16320))+(((-1.0)*x16306*x16307)));
evalcond[1]=((((-1.0)*x16318*x16325))+(((-1.0)*r02*x16327))+((x16305*x16319)));
evalcond[2]=((1.0)+(((-1.0)*r12*x16327))+((x16305*x16316))+(((-1.0)*x16309*x16325)));
evalcond[3]=(((x16309*x16326))+(((-1.0)*r12*x16305*x16310))+(((-1.0)*x16306*x16310*x16316))+((sj3*x16322))+((sj3*x16315)));
evalcond[4]=(((x16309*x16328))+(((-1.0)*r12*sj3*x16325))+(((-1.0)*x16310*x16315))+(((-1.0)*x16310*x16322))+(((-1.0)*sj3*x16316*x16327)));
evalcond[5]=(x16308+(((-1.0)*x16306*x16310*x16319))+(((-1.0)*r02*x16305*x16310))+((sj3*x16314))+((sj3*x16312))+((x16318*x16326))+(((-1.0)*x16313)));
evalcond[6]=((((-1.0)*cj3*x16305*x16307))+((x16317*x16326))+(((-1.0)*x16306*x16310*x16320))+(((-1.0)*x16329))+((sj3*x16321))+((sj3*x16311)));
evalcond[7]=(((x16317*x16328))+x16313+(((-1.0)*x16310*x16311))+(((-1.0)*x16310*x16321))+(((-1.0)*sj3*x16305*x16307))+(((-1.0)*sj3*x16320*x16327))+(((-1.0)*x16308)));
evalcond[8]=((((-1.0)*sj3*x16319*x16327))+(((-1.0)*r02*sj3*x16325))+(((-1.0)*x16310*x16314))+(((-1.0)*x16310*x16312))+(((-1.0)*x16329))+((x16318*x16328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16330=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16330);
rxp0_2=(py*r00);
rxp1_0=(r21*x16330);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16331=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16331);
rxp0_2=(py*r00);
rxp1_0=(r21*x16331);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16332=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16332);
rxp0_2=(py*r00);
rxp1_0=(r21*x16332);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16333=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16333);
rxp0_2=(py*r00);
rxp1_0=(r21*x16333);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16334=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16334);
rxp0_2=(py*r00);
rxp1_0=(r21*x16334);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16335=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16335);
rxp0_2=(py*r00);
rxp1_0=(r21*x16335);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16338=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x16338.valid){
continue;
}
IkReal x16336=x16338.value;
IkReal x16337=(cj0*x16336);
cj4array[0]=(((cj1*cj2*x16337))+(((-1.0)*sj1*sj2*x16337)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16339=IKsin(j4);
IkReal x16340=IKcos(j4);
IkReal x16341=(cj5*r20);
IkReal x16342=((1.0)*x16340);
IkReal x16343=((1.0)*sj5*x16339);
evalcond[0]=((-1.0)*r12*x16339);
evalcond[1]=((((-1.0)*r12*x16342))+(((-1.0)*cj0)));
evalcond[2]=(((x16339*x16341))+(((-1.0)*r21*x16343)));
evalcond[3]=(((cj5*r00*x16339))+(((-1.0)*r01*x16343)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x16341*x16342))+((r21*sj5*x16340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16345=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x16345.valid){
continue;
}
IkReal x16344=x16345.value;
cj4array[0]=(((cj1*sj2*x16344))+((cj2*sj1*x16344)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16346=IKsin(j4);
IkReal x16347=IKcos(j4);
IkReal x16348=(cj5*r00);
IkReal x16349=(r01*sj5);
IkReal x16350=((1.0)*cj0);
IkReal x16351=((1.0)*x16347);
IkReal x16352=((1.0)*x16346);
evalcond[0]=((-1.0)*r12*x16346);
evalcond[1]=((((-1.0)*x16350))+(((-1.0)*r12*x16351)));
evalcond[2]=(((cj5*r20*x16346))+(((-1.0)*r21*sj5*x16352)));
evalcond[3]=((((-1.0)*x16349*x16352))+((x16346*x16348)));
evalcond[4]=((((-1.0)*x16348*x16351))+(((-1.0)*cj1*cj2*x16350))+((x16347*x16349))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16353=IKPowWithIntegerCheck(r12,-1);
if(!x16353.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16353.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16354=IKsin(j4);
IkReal x16355=IKcos(j4);
IkReal x16356=(r01*sj5);
IkReal x16357=((1.0)*cj1);
IkReal x16358=(r21*sj5);
IkReal x16359=((1.0)*x16354);
IkReal x16360=(cj5*x16354);
IkReal x16361=((1.0)*cj5*x16355);
evalcond[0]=((-1.0)*r12*x16354);
evalcond[1]=(((r20*x16360))+(((-1.0)*x16358*x16359)));
evalcond[2]=(((r00*x16360))+(((-1.0)*x16356*x16359)));
evalcond[3]=((((-1.0)*sj2*x16357))+(((-1.0)*cj2*sj1))+((x16355*x16358))+(((-1.0)*r20*x16361)));
evalcond[4]=((((-1.0)*r00*x16361))+((x16355*x16356))+((cj0*sj1*sj2))+(((-1.0)*cj0*cj2*x16357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16362=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16362);
rxp0_2=(py*r00);
rxp1_0=(r21*x16362);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16363=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16363);
rxp0_2=(py*r00);
rxp1_0=(r21*x16363);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16364=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16364);
rxp0_2=(py*r00);
rxp1_0=(r21*x16364);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16367=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x16367.valid){
continue;
}
IkReal x16365=x16367.value;
IkReal x16366=(cj0*x16365);
cj4array[0]=(((cj1*cj2*x16366))+(((-1.0)*sj1*sj2*x16366)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16368=IKsin(j4);
IkReal x16369=IKcos(j4);
IkReal x16370=(cj5*r20);
IkReal x16371=((1.0)*sj5);
evalcond[0]=(r12*x16368);
evalcond[1]=((((-1.0)*r12*x16369))+(((-1.0)*cj0)));
evalcond[2]=(((x16368*x16370))+(((-1.0)*r21*x16368*x16371)));
evalcond[3]=((((-1.0)*r01*x16368*x16371))+((cj5*r00*x16368)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*r21*x16369*x16371))+(((-1.0)*cj1*sj2))+((x16369*x16370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16373=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x16373.valid){
continue;
}
IkReal x16372=x16373.value;
cj4array[0]=(((cj2*sj1*x16372))+((cj1*sj2*x16372)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16374=IKsin(j4);
IkReal x16375=IKcos(j4);
IkReal x16376=(cj5*r00);
IkReal x16377=((1.0)*cj0);
IkReal x16378=((1.0)*r01*sj5);
evalcond[0]=(r12*x16374);
evalcond[1]=((((-1.0)*x16377))+(((-1.0)*r12*x16375)));
evalcond[2]=((((-1.0)*r21*sj5*x16374))+((cj5*r20*x16374)));
evalcond[3]=((((-1.0)*x16374*x16378))+((x16374*x16376)));
evalcond[4]=((((-1.0)*x16375*x16378))+((x16375*x16376))+(((-1.0)*cj1*cj2*x16377))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16379=IKPowWithIntegerCheck(r12,-1);
if(!x16379.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16379.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16380=IKsin(j4);
IkReal x16381=IKcos(j4);
IkReal x16382=((1.0)*cj1);
IkReal x16383=((1.0)*sj5);
IkReal x16384=(cj5*x16381);
IkReal x16385=(cj5*x16380);
evalcond[0]=(r12*x16380);
evalcond[1]=((((-1.0)*r21*x16380*x16383))+((r20*x16385)));
evalcond[2]=(((r00*x16385))+(((-1.0)*r01*x16380*x16383)));
evalcond[3]=((((-1.0)*r21*x16381*x16383))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x16382))+((r20*x16384)));
evalcond[4]=(((r00*x16384))+(((-1.0)*cj0*cj2*x16382))+((cj0*sj1*sj2))+(((-1.0)*r01*x16381*x16383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16386=((-1.0)*r01);
CheckValue<IkReal> x16387 = IKatan2WithCheck(IkReal(r00),IkReal(x16386),IKFAST_ATAN2_MAGTHRESH);
if(!x16387.valid){
continue;
}
IkReal gconst66=((-1.0)*(x16387.value));
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x16386;
CheckValue<IkReal> x16388 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16388.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x16388.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16389=((-1.0)*r01);
IkReal x16390=((-1.0)*py);
CheckValue<IkReal> x16392 = IKatan2WithCheck(IkReal(r00),IkReal(x16389),IKFAST_ATAN2_MAGTHRESH);
if(!x16392.valid){
continue;
}
IkReal x16391=((-1.0)*(x16392.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16390);
rxp0_2=(py*r00);
rxp1_0=(r21*x16390);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x16391;
IkReal gconst66=x16391;
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x16389;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16393=((-1.0)*r01);
IkReal x16394=((-1.0)*py);
CheckValue<IkReal> x16396 = IKatan2WithCheck(IkReal(r00),IkReal(x16393),IKFAST_ATAN2_MAGTHRESH);
if(!x16396.valid){
continue;
}
IkReal x16395=((-1.0)*(x16396.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16394);
rxp0_2=(py*r00);
rxp1_0=(r21*x16394);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x16395;
IkReal gconst66=x16395;
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x16393;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16397=((-1.0)*r01);
IkReal x16398=((-1.0)*py);
CheckValue<IkReal> x16400 = IKatan2WithCheck(IkReal(r00),IkReal(x16397),IKFAST_ATAN2_MAGTHRESH);
if(!x16400.valid){
continue;
}
IkReal x16399=((-1.0)*(x16400.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16398);
rxp0_2=(py*r00);
rxp1_0=(r21*x16398);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x16399;
IkReal gconst66=x16399;
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x16397;
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r00*r21*sj3))+((r01*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16401=IKPowWithIntegerCheck(r12,-1);
if(!x16401.valid){
continue;
}
CheckValue<IkReal> x16402=IKPowWithIntegerCheck(sj3,-1);
if(!x16402.valid){
continue;
}
CheckValue<IkReal> x16403=IKPowWithIntegerCheck((((gconst67*r21*sj3))+(((-1.0)*gconst68*r20*sj3))),-1);
if(!x16403.valid){
continue;
}
if( IKabs(((x16401.value)*(x16402.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16403.value)*((((cj3*gconst67*r20))+(((-1.0)*sj1*sj2))+((cj3*gconst68*r21))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16401.value)*(x16402.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((x16403.value)*((((cj3*gconst67*r20))+(((-1.0)*sj1*sj2))+((cj3*gconst68*r21))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16401.value)*(x16402.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((x16403.value)*((((cj3*gconst67*r20))+(((-1.0)*sj1*sj2))+((cj3*gconst68*r21))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16404=IKsin(j4);
IkReal x16405=IKcos(j4);
IkReal x16406=(gconst67*r21);
IkReal x16407=(r01*sj3);
IkReal x16408=(cj2*sj1);
IkReal x16409=(sj1*sj2);
IkReal x16410=(gconst68*r00);
IkReal x16411=(cj1*sj2);
IkReal x16412=((1.0)*gconst68);
IkReal x16413=(gconst67*sj3);
IkReal x16414=(cj3*r01);
IkReal x16415=((1.0)*x16404);
IkReal x16416=((1.0)*cj1*cj2);
IkReal x16417=(gconst67*x16405);
IkReal x16418=(sj3*x16405);
IkReal x16419=((1.0)*cj3*r20);
IkReal x16420=(gconst68*x16405);
IkReal x16421=((1.0)*cj3*r00);
evalcond[0]=((((-1.0)*r12*x16405))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x16406*x16415))+((gconst68*r20*x16404)));
evalcond[2]=(sj0+(((-1.0)*gconst67*r01*x16415))+((x16404*x16410)));
evalcond[3]=(((sj0*x16408))+((sj0*x16411))+(((-1.0)*r12*sj3*x16415)));
evalcond[4]=((((-1.0)*cj3*r12*x16415))+((sj0*x16409))+(((-1.0)*sj0*x16416)));
evalcond[5]=((((-1.0)*cj3*r20*x16405*x16412))+((cj3*x16405*x16406))+((gconst68*r21*sj3))+(((-1.0)*x16411))+(((-1.0)*x16408))+((r20*x16413)));
evalcond[6]=(x16409+((x16406*x16418))+(((-1.0)*cj3*r21*x16412))+(((-1.0)*gconst67*x16419))+(((-1.0)*x16416))+(((-1.0)*r20*x16412*x16418)));
evalcond[7]=(((cj0*x16409))+((gconst68*x16407))+((x16414*x16417))+((r00*x16413))+(((-1.0)*cj3*x16405*x16410))+(((-1.0)*cj0*x16416)));
evalcond[8]=(((cj0*x16408))+(((-1.0)*gconst67*x16421))+((cj0*x16411))+(((-1.0)*x16412*x16414))+((x16407*x16417))+(((-1.0)*x16410*x16418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16423=IKPowWithIntegerCheck(r12,-1);
if(!x16423.valid){
continue;
}
IkReal x16422=x16423.value;
CheckValue<IkReal> x16424=IKPowWithIntegerCheck(cj3,-1);
if(!x16424.valid){
continue;
}
if( IKabs((x16422*(x16424.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16422)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16422*(x16424.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x16422))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16422*(x16424.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x16422));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16425=IKsin(j4);
IkReal x16426=IKcos(j4);
IkReal x16427=(gconst67*r21);
IkReal x16428=(r01*sj3);
IkReal x16429=(cj2*sj1);
IkReal x16430=(sj1*sj2);
IkReal x16431=(gconst68*r00);
IkReal x16432=(cj1*sj2);
IkReal x16433=((1.0)*gconst68);
IkReal x16434=(gconst67*sj3);
IkReal x16435=(cj3*r01);
IkReal x16436=((1.0)*x16425);
IkReal x16437=((1.0)*cj1*cj2);
IkReal x16438=(gconst67*x16426);
IkReal x16439=(sj3*x16426);
IkReal x16440=((1.0)*cj3*r20);
IkReal x16441=(gconst68*x16426);
IkReal x16442=((1.0)*cj3*r00);
evalcond[0]=((((-1.0)*r12*x16426))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x16427*x16436))+((gconst68*r20*x16425)));
evalcond[2]=(sj0+(((-1.0)*gconst67*r01*x16436))+((x16425*x16431)));
evalcond[3]=(((sj0*x16432))+((sj0*x16429))+(((-1.0)*r12*sj3*x16436)));
evalcond[4]=(((sj0*x16430))+(((-1.0)*sj0*x16437))+(((-1.0)*cj3*r12*x16436)));
evalcond[5]=((((-1.0)*cj3*r20*x16426*x16433))+((r20*x16434))+((cj3*x16426*x16427))+((gconst68*r21*sj3))+(((-1.0)*x16432))+(((-1.0)*x16429)));
evalcond[6]=((((-1.0)*x16437))+x16430+((x16427*x16439))+(((-1.0)*r20*x16433*x16439))+(((-1.0)*cj3*r21*x16433))+(((-1.0)*gconst67*x16440)));
evalcond[7]=(((r00*x16434))+(((-1.0)*cj0*x16437))+((cj0*x16430))+((gconst68*x16428))+(((-1.0)*cj3*x16426*x16431))+((x16435*x16438)));
evalcond[8]=(((cj0*x16432))+(((-1.0)*x16431*x16439))+((cj0*x16429))+(((-1.0)*x16433*x16435))+((x16428*x16438))+(((-1.0)*gconst67*x16442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16444=IKPowWithIntegerCheck(r12,-1);
if(!x16444.valid){
continue;
}
IkReal x16443=x16444.value;
CheckValue<IkReal> x16445=IKPowWithIntegerCheck(sj3,-1);
if(!x16445.valid){
continue;
}
if( IKabs((x16443*(x16445.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16443)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16443*(x16445.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x16443))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16443*(x16445.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x16443));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16446=IKsin(j4);
IkReal x16447=IKcos(j4);
IkReal x16448=(gconst67*r21);
IkReal x16449=(r01*sj3);
IkReal x16450=(cj2*sj1);
IkReal x16451=(sj1*sj2);
IkReal x16452=(gconst68*r00);
IkReal x16453=(cj1*sj2);
IkReal x16454=((1.0)*gconst68);
IkReal x16455=(gconst67*sj3);
IkReal x16456=(cj3*r01);
IkReal x16457=((1.0)*x16446);
IkReal x16458=((1.0)*cj1*cj2);
IkReal x16459=(gconst67*x16447);
IkReal x16460=(sj3*x16447);
IkReal x16461=((1.0)*cj3*r20);
IkReal x16462=(gconst68*x16447);
IkReal x16463=((1.0)*cj3*r00);
evalcond[0]=((((-1.0)*r12*x16447))+(((-1.0)*cj0)));
evalcond[1]=(((gconst68*r20*x16446))+(((-1.0)*x16448*x16457)));
evalcond[2]=(sj0+((x16446*x16452))+(((-1.0)*gconst67*r01*x16457)));
evalcond[3]=(((sj0*x16453))+((sj0*x16450))+(((-1.0)*r12*sj3*x16457)));
evalcond[4]=(((sj0*x16451))+(((-1.0)*sj0*x16458))+(((-1.0)*cj3*r12*x16457)));
evalcond[5]=((((-1.0)*cj3*r20*x16447*x16454))+((gconst68*r21*sj3))+((cj3*x16447*x16448))+((r20*x16455))+(((-1.0)*x16450))+(((-1.0)*x16453)));
evalcond[6]=((((-1.0)*gconst67*x16461))+(((-1.0)*cj3*r21*x16454))+(((-1.0)*x16458))+(((-1.0)*r20*x16454*x16460))+x16451+((x16448*x16460)));
evalcond[7]=(((x16456*x16459))+((r00*x16455))+(((-1.0)*cj0*x16458))+((cj0*x16451))+((gconst68*x16449))+(((-1.0)*cj3*x16447*x16452)));
evalcond[8]=((((-1.0)*gconst67*x16463))+((cj0*x16453))+((cj0*x16450))+(((-1.0)*x16452*x16460))+((x16449*x16459))+(((-1.0)*x16454*x16456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x16464 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16464.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x16464.value))));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
CheckValue<IkReal> x16465 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16465.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x16465.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16466=((-1.0)*py);
CheckValue<IkReal> x16468 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16468.valid){
continue;
}
IkReal x16467=((1.0)*(x16468.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16466);
rxp0_2=(py*r00);
rxp1_0=(r21*x16466);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16467)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16467)));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16469=((-1.0)*py);
CheckValue<IkReal> x16471 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16471.valid){
continue;
}
IkReal x16470=((1.0)*(x16471.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16469);
rxp0_2=(py*r00);
rxp1_0=(r21*x16469);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16470)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16470)));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16472=((-1.0)*py);
CheckValue<IkReal> x16474 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16474.valid){
continue;
}
IkReal x16473=((1.0)*(x16474.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16472);
rxp0_2=(py*r00);
rxp1_0=(r21*x16472);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16473)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16473)));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
IkReal x16475=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r01*r20*x16475))+((r00*r21*x16475)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16476=IKPowWithIntegerCheck(r12,-1);
if(!x16476.valid){
continue;
}
CheckValue<IkReal> x16477=IKPowWithIntegerCheck(sj3,-1);
if(!x16477.valid){
continue;
}
CheckValue<IkReal> x16478=IKPowWithIntegerCheck(((((-1.0)*gconst71*r20*sj3))+((gconst70*r21*sj3))),-1);
if(!x16478.valid){
continue;
}
if( IKabs(((x16476.value)*(x16477.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16478.value)*(((((-1.0)*sj1*sj2))+((cj3*gconst70*r20))+((cj1*cj2))+((cj3*gconst71*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16476.value)*(x16477.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((x16478.value)*(((((-1.0)*sj1*sj2))+((cj3*gconst70*r20))+((cj1*cj2))+((cj3*gconst71*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16476.value)*(x16477.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((x16478.value)*(((((-1.0)*sj1*sj2))+((cj3*gconst70*r20))+((cj1*cj2))+((cj3*gconst71*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16479=IKsin(j4);
IkReal x16480=IKcos(j4);
IkReal x16481=(gconst70*r21);
IkReal x16482=(gconst70*r01);
IkReal x16483=(sj1*sj2);
IkReal x16484=((1.0)*cj2);
IkReal x16485=(gconst71*sj3);
IkReal x16486=(cj1*sj2);
IkReal x16487=(gconst70*r00);
IkReal x16488=((1.0)*cj3);
IkReal x16489=(cj2*sj1);
IkReal x16490=(gconst70*r20);
IkReal x16491=((1.0)*x16479);
IkReal x16492=(gconst71*x16488);
IkReal x16493=(r00*x16480);
IkReal x16494=(cj3*x16480);
IkReal x16495=(sj3*x16480);
IkReal x16496=(gconst71*x16479);
evalcond[0]=((((-1.0)*r12*x16480))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x16481*x16491))+((r20*x16496)));
evalcond[2]=(sj0+(((-1.0)*x16482*x16491))+((r00*x16496)));
evalcond[3]=(((sj0*x16486))+((sj0*x16489))+(((-1.0)*r12*sj3*x16491)));
evalcond[4]=((((-1.0)*cj1*sj0*x16484))+((sj0*x16483))+(((-1.0)*r12*x16479*x16488)));
evalcond[5]=(((sj3*x16490))+(((-1.0)*r20*x16480*x16492))+(((-1.0)*sj1*x16484))+((r21*x16485))+(((-1.0)*x16486))+((x16481*x16494)));
evalcond[6]=((((-1.0)*r21*x16492))+x16483+(((-1.0)*r20*x16480*x16485))+(((-1.0)*cj1*x16484))+(((-1.0)*x16488*x16490))+((x16481*x16495)));
evalcond[7]=(((x16482*x16494))+((sj3*x16487))+(((-1.0)*cj0*cj1*x16484))+(((-1.0)*x16492*x16493))+((cj0*x16483))+((r01*x16485)));
evalcond[8]=(((x16482*x16495))+(((-1.0)*x16487*x16488))+(((-1.0)*x16485*x16493))+(((-1.0)*r01*x16492))+((cj0*x16489))+((cj0*x16486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16498=IKPowWithIntegerCheck(r12,-1);
if(!x16498.valid){
continue;
}
IkReal x16497=x16498.value;
CheckValue<IkReal> x16499=IKPowWithIntegerCheck(cj3,-1);
if(!x16499.valid){
continue;
}
if( IKabs((x16497*(x16499.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16497)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16497*(x16499.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x16497))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16497*(x16499.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x16497));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16500=IKsin(j4);
IkReal x16501=IKcos(j4);
IkReal x16502=(gconst70*r21);
IkReal x16503=(gconst70*r01);
IkReal x16504=(sj1*sj2);
IkReal x16505=((1.0)*cj2);
IkReal x16506=(gconst71*sj3);
IkReal x16507=(cj1*sj2);
IkReal x16508=(gconst70*r00);
IkReal x16509=((1.0)*cj3);
IkReal x16510=(cj2*sj1);
IkReal x16511=(gconst70*r20);
IkReal x16512=((1.0)*x16500);
IkReal x16513=(gconst71*x16509);
IkReal x16514=(r00*x16501);
IkReal x16515=(cj3*x16501);
IkReal x16516=(sj3*x16501);
IkReal x16517=(gconst71*x16500);
evalcond[0]=((((-1.0)*r12*x16501))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x16502*x16512))+((r20*x16517)));
evalcond[2]=(sj0+((r00*x16517))+(((-1.0)*x16503*x16512)));
evalcond[3]=(((sj0*x16510))+(((-1.0)*r12*sj3*x16512))+((sj0*x16507)));
evalcond[4]=((((-1.0)*cj1*sj0*x16505))+(((-1.0)*r12*x16500*x16509))+((sj0*x16504)));
evalcond[5]=((((-1.0)*r20*x16501*x16513))+(((-1.0)*sj1*x16505))+((sj3*x16511))+((r21*x16506))+((x16502*x16515))+(((-1.0)*x16507)));
evalcond[6]=(x16504+(((-1.0)*r21*x16513))+((x16502*x16516))+(((-1.0)*r20*x16501*x16506))+(((-1.0)*cj1*x16505))+(((-1.0)*x16509*x16511)));
evalcond[7]=((((-1.0)*cj0*cj1*x16505))+((sj3*x16508))+((r01*x16506))+((cj0*x16504))+((x16503*x16515))+(((-1.0)*x16513*x16514)));
evalcond[8]=((((-1.0)*x16508*x16509))+((cj0*x16507))+((x16503*x16516))+(((-1.0)*x16506*x16514))+((cj0*x16510))+(((-1.0)*r01*x16513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16519=IKPowWithIntegerCheck(r12,-1);
if(!x16519.valid){
continue;
}
IkReal x16518=x16519.value;
CheckValue<IkReal> x16520=IKPowWithIntegerCheck(sj3,-1);
if(!x16520.valid){
continue;
}
if( IKabs((x16518*(x16520.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16518)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16518*(x16520.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x16518))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16518*(x16520.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x16518));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16521=IKsin(j4);
IkReal x16522=IKcos(j4);
IkReal x16523=(gconst70*r21);
IkReal x16524=(gconst70*r01);
IkReal x16525=(sj1*sj2);
IkReal x16526=((1.0)*cj2);
IkReal x16527=(gconst71*sj3);
IkReal x16528=(cj1*sj2);
IkReal x16529=(gconst70*r00);
IkReal x16530=((1.0)*cj3);
IkReal x16531=(cj2*sj1);
IkReal x16532=(gconst70*r20);
IkReal x16533=((1.0)*x16521);
IkReal x16534=(gconst71*x16530);
IkReal x16535=(r00*x16522);
IkReal x16536=(cj3*x16522);
IkReal x16537=(sj3*x16522);
IkReal x16538=(gconst71*x16521);
evalcond[0]=((((-1.0)*r12*x16522))+(((-1.0)*cj0)));
evalcond[1]=(((r20*x16538))+(((-1.0)*x16523*x16533)));
evalcond[2]=(sj0+(((-1.0)*x16524*x16533))+((r00*x16538)));
evalcond[3]=(((sj0*x16528))+(((-1.0)*r12*sj3*x16533))+((sj0*x16531)));
evalcond[4]=(((sj0*x16525))+(((-1.0)*r12*x16521*x16530))+(((-1.0)*cj1*sj0*x16526)));
evalcond[5]=(((r21*x16527))+((x16523*x16536))+(((-1.0)*x16528))+((sj3*x16532))+(((-1.0)*sj1*x16526))+(((-1.0)*r20*x16522*x16534)));
evalcond[6]=(((x16523*x16537))+(((-1.0)*cj1*x16526))+x16525+(((-1.0)*r20*x16522*x16527))+(((-1.0)*x16530*x16532))+(((-1.0)*r21*x16534)));
evalcond[7]=((((-1.0)*x16534*x16535))+(((-1.0)*cj0*cj1*x16526))+((x16524*x16536))+((sj3*x16529))+((r01*x16527))+((cj0*x16525)));
evalcond[8]=((((-1.0)*x16529*x16530))+((x16524*x16537))+(((-1.0)*x16527*x16535))+((cj0*x16531))+(((-1.0)*r01*x16534))+((cj0*x16528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16539=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16539);
rxp0_2=(py*r00);
rxp1_0=(r21*x16539);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16540=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16540);
rxp0_2=(py*r00);
rxp1_0=(r21*x16540);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16541=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16541);
rxp0_2=(py*r00);
rxp1_0=(r21*x16541);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16544=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x16544.valid){
continue;
}
IkReal x16542=x16544.value;
IkReal x16543=((1.0)*cj0*x16542);
cj4array[0]=((((-1.0)*cj2*sj1*x16543))+(((-1.0)*cj1*sj2*x16543)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16545=IKsin(j4);
IkReal x16546=IKcos(j4);
IkReal x16547=(cj5*r20);
IkReal x16548=((1.0)*x16546);
IkReal x16549=((1.0)*sj5*x16545);
evalcond[0]=((-1.0)*r12*x16545);
evalcond[1]=((((-1.0)*r12*x16548))+(((-1.0)*cj0)));
evalcond[2]=(((x16545*x16547))+(((-1.0)*r21*x16549)));
evalcond[3]=(((cj5*r00*x16545))+(((-1.0)*r01*x16549)));
evalcond[4]=(((r21*sj5*x16546))+(((-1.0)*x16547*x16548))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16551=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x16551.valid){
continue;
}
IkReal x16550=x16551.value;
cj4array[0]=((((-1.0)*sj1*sj2*x16550))+((cj1*cj2*x16550)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16552=IKsin(j4);
IkReal x16553=IKcos(j4);
IkReal x16554=(cj5*r00);
IkReal x16555=(r01*sj5);
IkReal x16556=((1.0)*x16553);
IkReal x16557=((1.0)*x16552);
evalcond[0]=((-1.0)*r12*x16552);
evalcond[1]=((((-1.0)*r12*x16556))+(((-1.0)*cj0)));
evalcond[2]=(((cj5*r20*x16552))+(((-1.0)*r21*sj5*x16557)));
evalcond[3]=(((x16552*x16554))+(((-1.0)*x16555*x16557)));
evalcond[4]=(((cj0*cj2*sj1))+((cj0*cj1*sj2))+((x16553*x16555))+(((-1.0)*x16554*x16556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16558=IKPowWithIntegerCheck(r12,-1);
if(!x16558.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16558.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16559=IKsin(j4);
IkReal x16560=IKcos(j4);
IkReal x16561=(sj5*x16560);
IkReal x16562=(cj5*x16559);
IkReal x16563=((1.0)*sj5*x16559);
IkReal x16564=((1.0)*cj5*x16560);
evalcond[0]=((-1.0)*r12*x16559);
evalcond[1]=((((-1.0)*r21*x16563))+((r20*x16562)));
evalcond[2]=((((-1.0)*r01*x16563))+((r00*x16562)));
evalcond[3]=((((-1.0)*r20*x16564))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x16561)));
evalcond[4]=(((r01*x16561))+(((-1.0)*r00*x16564))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16565=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16565);
rxp0_2=(py*r00);
rxp1_0=(r21*x16565);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16566=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16566);
rxp0_2=(py*r00);
rxp1_0=(r21*x16566);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16567=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16567);
rxp0_2=(py*r00);
rxp1_0=(r21*x16567);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16570=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x16570.valid){
continue;
}
IkReal x16568=x16570.value;
IkReal x16569=((1.0)*cj0*x16568);
cj4array[0]=((((-1.0)*cj2*sj1*x16569))+(((-1.0)*cj1*sj2*x16569)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16571=IKsin(j4);
IkReal x16572=IKcos(j4);
IkReal x16573=(cj5*r20);
IkReal x16574=((1.0)*sj5);
evalcond[0]=(r12*x16571);
evalcond[1]=((((-1.0)*r12*x16572))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x16571*x16574))+((x16571*x16573)));
evalcond[3]=((((-1.0)*r01*x16571*x16574))+((cj5*r00*x16571)));
evalcond[4]=((((-1.0)*cj1*cj2))+(((-1.0)*r21*x16572*x16574))+((sj1*sj2))+((x16572*x16573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16576=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x16576.valid){
continue;
}
IkReal x16575=x16576.value;
cj4array[0]=((((-1.0)*sj1*sj2*x16575))+((cj1*cj2*x16575)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16577=IKsin(j4);
IkReal x16578=IKcos(j4);
IkReal x16579=(cj5*r00);
IkReal x16580=((1.0)*r01*sj5);
evalcond[0]=(r12*x16577);
evalcond[1]=((((-1.0)*r12*x16578))+(((-1.0)*cj0)));
evalcond[2]=(((cj5*r20*x16577))+(((-1.0)*r21*sj5*x16577)));
evalcond[3]=(((x16577*x16579))+(((-1.0)*x16577*x16580)));
evalcond[4]=(((x16578*x16579))+((cj0*cj2*sj1))+(((-1.0)*x16578*x16580))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16581=IKPowWithIntegerCheck(r12,-1);
if(!x16581.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16581.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16582=IKsin(j4);
IkReal x16583=IKcos(j4);
IkReal x16584=(cj5*x16583);
IkReal x16585=((1.0)*r21*sj5);
IkReal x16586=((1.0)*r01*sj5);
IkReal x16587=(cj5*x16582);
evalcond[0]=(r12*x16582);
evalcond[1]=((((-1.0)*x16582*x16585))+((r20*x16587)));
evalcond[2]=((((-1.0)*x16582*x16586))+((r00*x16587)));
evalcond[3]=((((-1.0)*x16583*x16585))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x16584)));
evalcond[4]=((((-1.0)*x16583*x16586))+((cj0*cj2*sj1))+((r00*x16584))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16589=IKPowWithIntegerCheck(r12,-1);
if(!x16589.valid){
continue;
}
IkReal x16588=x16589.value;
CheckValue<IkReal> x16590=IKPowWithIntegerCheck(sj3,-1);
if(!x16590.valid){
continue;
}
if( IKabs((x16588*(x16590.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16588)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16588*(x16590.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x16588))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16588*(x16590.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x16588));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16591=IKsin(j4);
IkReal x16592=IKcos(j4);
IkReal x16593=(cj0*cj1);
IkReal x16594=((1.0)*cj2);
IkReal x16595=(cj2*sj1);
IkReal x16596=((1.0)*cj3);
IkReal x16597=(cj5*r21);
IkReal x16598=(sj1*sj2);
IkReal x16599=(cj5*r01);
IkReal x16600=(r20*sj5);
IkReal x16601=(r01*sj5);
IkReal x16602=(cj1*sj2);
IkReal x16603=(r00*sj5);
IkReal x16604=(cj5*r00);
IkReal x16605=(cj5*r20);
IkReal x16606=((1.0)*x16591);
IkReal x16607=((1.0)*x16592);
IkReal x16608=(r21*sj5*x16592);
evalcond[0]=((((-1.0)*r12*x16607))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*r21*sj5*x16606))+((x16591*x16605)));
evalcond[2]=(sj0+(((-1.0)*x16601*x16606))+((x16591*x16604)));
evalcond[3]=(((sj0*x16602))+((sj0*x16595))+(((-1.0)*r12*sj3*x16606)));
evalcond[4]=(((sj0*x16598))+(((-1.0)*cj1*sj0*x16594))+(((-1.0)*r12*x16591*x16596)));
evalcond[5]=(((sj3*x16600))+(((-1.0)*x16592*x16596*x16605))+(((-1.0)*sj1*x16594))+((sj3*x16597))+(((-1.0)*x16602))+((cj3*x16608)));
evalcond[6]=((((-1.0)*cj1*x16594))+((sj3*x16608))+x16598+(((-1.0)*x16596*x16600))+(((-1.0)*x16596*x16597))+(((-1.0)*sj3*x16605*x16607)));
evalcond[7]=((((-1.0)*x16593*x16594))+((sj3*x16603))+(((-1.0)*x16592*x16596*x16604))+((cj0*x16598))+((sj3*x16599))+((cj3*x16592*x16601)));
evalcond[8]=((((-1.0)*sj3*x16604*x16607))+((sj3*x16592*x16601))+(((-1.0)*x16596*x16603))+((cj0*x16595))+((sj2*x16593))+(((-1.0)*x16596*x16599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16609=((1.0)*sj5);
IkReal x16610=((1.0)*cj5);
CheckValue<IkReal> x16611=IKPowWithIntegerCheck(((((-1.0)*r01*x16609))+((cj5*r00))),-1);
if(!x16611.valid){
continue;
}
CheckValue<IkReal> x16612=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x16610))),-1);
if(!x16612.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x16611.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16612.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*sj3*x16609))+(((-1.0)*r21*sj3*x16610)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x16611.value)))+IKsqr(((x16612.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*sj3*x16609))+(((-1.0)*r21*sj3*x16610))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x16611.value)), ((x16612.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*sj3*x16609))+(((-1.0)*r21*sj3*x16610))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16613=IKsin(j4);
IkReal x16614=IKcos(j4);
IkReal x16615=(cj0*cj1);
IkReal x16616=((1.0)*cj2);
IkReal x16617=(cj2*sj1);
IkReal x16618=((1.0)*cj3);
IkReal x16619=(cj5*r21);
IkReal x16620=(sj1*sj2);
IkReal x16621=(cj5*r01);
IkReal x16622=(r20*sj5);
IkReal x16623=(r01*sj5);
IkReal x16624=(cj1*sj2);
IkReal x16625=(r00*sj5);
IkReal x16626=(cj5*r00);
IkReal x16627=(cj5*r20);
IkReal x16628=((1.0)*x16613);
IkReal x16629=((1.0)*x16614);
IkReal x16630=(r21*sj5*x16614);
evalcond[0]=((((-1.0)*r12*x16629))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*r21*sj5*x16628))+((x16613*x16627)));
evalcond[2]=((((-1.0)*x16623*x16628))+sj0+((x16613*x16626)));
evalcond[3]=(((sj0*x16617))+(((-1.0)*r12*sj3*x16628))+((sj0*x16624)));
evalcond[4]=(((sj0*x16620))+(((-1.0)*r12*x16613*x16618))+(((-1.0)*cj1*sj0*x16616)));
evalcond[5]=(((cj3*x16630))+(((-1.0)*x16614*x16618*x16627))+(((-1.0)*sj1*x16616))+((sj3*x16622))+(((-1.0)*x16624))+((sj3*x16619)));
evalcond[6]=((((-1.0)*cj1*x16616))+x16620+(((-1.0)*x16618*x16622))+((sj3*x16630))+(((-1.0)*x16618*x16619))+(((-1.0)*sj3*x16627*x16629)));
evalcond[7]=((((-1.0)*x16615*x16616))+((cj3*x16614*x16623))+((cj0*x16620))+(((-1.0)*x16614*x16618*x16626))+((sj3*x16625))+((sj3*x16621)));
evalcond[8]=(((sj3*x16614*x16623))+((cj0*x16617))+(((-1.0)*x16618*x16625))+(((-1.0)*x16618*x16621))+(((-1.0)*sj3*x16626*x16629))+((sj2*x16615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16631=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x16631.valid){
continue;
}
CheckValue<IkReal> x16632=IKPowWithIntegerCheck(r12,-1);
if(!x16632.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x16631.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x16632.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x16631.value)))+IKsqr(((-1.0)*cj0*(x16632.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x16631.value)), ((-1.0)*cj0*(x16632.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16633=IKsin(j4);
IkReal x16634=IKcos(j4);
IkReal x16635=(cj0*cj1);
IkReal x16636=((1.0)*cj2);
IkReal x16637=(cj2*sj1);
IkReal x16638=((1.0)*cj3);
IkReal x16639=(cj5*r21);
IkReal x16640=(sj1*sj2);
IkReal x16641=(cj5*r01);
IkReal x16642=(r20*sj5);
IkReal x16643=(r01*sj5);
IkReal x16644=(cj1*sj2);
IkReal x16645=(r00*sj5);
IkReal x16646=(cj5*r00);
IkReal x16647=(cj5*r20);
IkReal x16648=((1.0)*x16633);
IkReal x16649=((1.0)*x16634);
IkReal x16650=(r21*sj5*x16634);
evalcond[0]=((((-1.0)*r12*x16649))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*r21*sj5*x16648))+((x16633*x16647)));
evalcond[2]=(sj0+((x16633*x16646))+(((-1.0)*x16643*x16648)));
evalcond[3]=(((sj0*x16644))+(((-1.0)*r12*sj3*x16648))+((sj0*x16637)));
evalcond[4]=((((-1.0)*cj1*sj0*x16636))+((sj0*x16640))+(((-1.0)*r12*x16633*x16638)));
evalcond[5]=(((sj3*x16642))+(((-1.0)*x16644))+(((-1.0)*sj1*x16636))+((cj3*x16650))+((sj3*x16639))+(((-1.0)*x16634*x16638*x16647)));
evalcond[6]=(x16640+(((-1.0)*x16638*x16642))+(((-1.0)*x16638*x16639))+((sj3*x16650))+(((-1.0)*sj3*x16647*x16649))+(((-1.0)*cj1*x16636)));
evalcond[7]=(((sj3*x16641))+((sj3*x16645))+(((-1.0)*x16635*x16636))+(((-1.0)*x16634*x16638*x16646))+((cj3*x16634*x16643))+((cj0*x16640)));
evalcond[8]=(((cj0*x16637))+(((-1.0)*x16638*x16645))+(((-1.0)*x16638*x16641))+((sj2*x16635))+((sj3*x16634*x16643))+(((-1.0)*sj3*x16646*x16649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16651=((1.0)*sj5);
CheckValue<IkReal> x16652=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x16652.valid){
continue;
}
CheckValue<IkReal> x16653 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x16651))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x16651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16652.value)))+(x16653.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16654=IKsin(j4);
IkReal x16655=IKcos(j4);
IkReal x16656=(cj5*sj3);
IkReal x16657=(r11*sj5);
IkReal x16658=(cj2*sj1);
IkReal x16659=(sj1*sj2);
IkReal x16660=(r21*sj5);
IkReal x16661=(r01*sj5);
IkReal x16662=(cj1*sj2);
IkReal x16663=(sj3*sj5);
IkReal x16664=(cj3*cj5);
IkReal x16665=((1.0)*x16655);
IkReal x16666=((1.0)*x16654);
IkReal x16667=(cj3*x16655);
IkReal x16668=((1.0)*cj1*cj2);
IkReal x16669=((1.0)*x16664);
IkReal x16670=((1.0)*cj3*sj5);
IkReal x16671=(cj5*x16654);
IkReal x16672=(sj3*x16655);
evalcond[0]=((((-1.0)*x16660*x16666))+(((-1.0)*r22*x16665))+((r20*x16671)));
evalcond[1]=(sj0+(((-1.0)*x16661*x16666))+((r00*x16671))+(((-1.0)*r02*x16665)));
evalcond[2]=((((-1.0)*x16657*x16666))+(((-1.0)*r12*x16665))+((r10*x16671))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj3*r22*x16666))+(((-1.0)*r20*x16664*x16665))+((r21*x16656))+(((-1.0)*x16658))+((x16660*x16667))+(((-1.0)*x16662))+((r20*x16663)));
evalcond[4]=(x16659+(((-1.0)*r20*x16656*x16665))+((x16660*x16672))+(((-1.0)*r22*sj3*x16666))+(((-1.0)*x16668))+(((-1.0)*r20*x16670))+(((-1.0)*r21*x16669)));
evalcond[5]=(((cj0*x16659))+((x16661*x16667))+((r01*x16656))+(((-1.0)*cj3*r02*x16666))+(((-1.0)*r00*x16664*x16665))+(((-1.0)*cj0*x16668))+((r00*x16663)));
evalcond[6]=((((-1.0)*sj0*x16668))+((r11*x16656))+((x16657*x16667))+((sj0*x16659))+(((-1.0)*r10*x16664*x16665))+(((-1.0)*cj3*r12*x16666))+((r10*x16663)));
evalcond[7]=(((cj0*x16658))+((x16661*x16672))+((cj0*x16662))+(((-1.0)*r02*sj3*x16666))+(((-1.0)*r01*x16669))+(((-1.0)*r00*x16670))+(((-1.0)*r00*x16656*x16665)));
evalcond[8]=(((sj0*x16662))+(((-1.0)*r11*x16669))+(((-1.0)*r10*x16656*x16665))+((x16657*x16672))+(((-1.0)*r10*x16670))+((sj0*x16658))+(((-1.0)*r12*sj3*x16666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16673=((1.0)*sj5);
CheckValue<IkReal> x16674 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x16673))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16674.valid){
continue;
}
CheckValue<IkReal> x16675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x16673))+(((-1.0)*cj5*r01)))),-1);
if(!x16675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16674.value)+(((1.5707963267949)*(x16675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16676=IKsin(j4);
IkReal x16677=IKcos(j4);
IkReal x16678=(cj5*sj3);
IkReal x16679=(r11*sj5);
IkReal x16680=(cj2*sj1);
IkReal x16681=(sj1*sj2);
IkReal x16682=(r21*sj5);
IkReal x16683=(r01*sj5);
IkReal x16684=(cj1*sj2);
IkReal x16685=(sj3*sj5);
IkReal x16686=(cj3*cj5);
IkReal x16687=((1.0)*x16677);
IkReal x16688=((1.0)*x16676);
IkReal x16689=(cj3*x16677);
IkReal x16690=((1.0)*cj1*cj2);
IkReal x16691=((1.0)*x16686);
IkReal x16692=((1.0)*cj3*sj5);
IkReal x16693=(cj5*x16676);
IkReal x16694=(sj3*x16677);
evalcond[0]=(((r20*x16693))+(((-1.0)*r22*x16687))+(((-1.0)*x16682*x16688)));
evalcond[1]=(sj0+(((-1.0)*x16683*x16688))+(((-1.0)*r02*x16687))+((r00*x16693)));
evalcond[2]=((((-1.0)*r12*x16687))+(((-1.0)*x16679*x16688))+((r10*x16693))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj3*r22*x16688))+(((-1.0)*x16684))+(((-1.0)*x16680))+((r20*x16685))+((r21*x16678))+(((-1.0)*r20*x16686*x16687))+((x16682*x16689)));
evalcond[4]=((((-1.0)*x16690))+(((-1.0)*r22*sj3*x16688))+x16681+(((-1.0)*r20*x16678*x16687))+((x16682*x16694))+(((-1.0)*r20*x16692))+(((-1.0)*r21*x16691)));
evalcond[5]=((((-1.0)*cj3*r02*x16688))+((r00*x16685))+(((-1.0)*cj0*x16690))+((cj0*x16681))+((x16683*x16689))+((r01*x16678))+(((-1.0)*r00*x16686*x16687)));
evalcond[6]=(((r11*x16678))+(((-1.0)*cj3*r12*x16688))+((r10*x16685))+(((-1.0)*sj0*x16690))+((sj0*x16681))+((x16679*x16689))+(((-1.0)*r10*x16686*x16687)));
evalcond[7]=((((-1.0)*r00*x16678*x16687))+(((-1.0)*r00*x16692))+((x16683*x16694))+(((-1.0)*r01*x16691))+(((-1.0)*r02*sj3*x16688))+((cj0*x16680))+((cj0*x16684)));
evalcond[8]=((((-1.0)*r12*sj3*x16688))+((sj0*x16680))+((sj0*x16684))+(((-1.0)*r10*x16678*x16687))+(((-1.0)*r10*x16692))+(((-1.0)*r11*x16691))+((x16679*x16694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16695=((1.0)*sj5);
CheckValue<IkReal> x16696 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x16695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16696.valid){
continue;
}
CheckValue<IkReal> x16697=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x16695)))),-1);
if(!x16697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16696.value)+(((1.5707963267949)*(x16697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16698=IKsin(j4);
IkReal x16699=IKcos(j4);
IkReal x16700=(cj5*sj3);
IkReal x16701=(r11*sj5);
IkReal x16702=(cj2*sj1);
IkReal x16703=(sj1*sj2);
IkReal x16704=(r21*sj5);
IkReal x16705=(r01*sj5);
IkReal x16706=(cj1*sj2);
IkReal x16707=(sj3*sj5);
IkReal x16708=(cj3*cj5);
IkReal x16709=((1.0)*x16699);
IkReal x16710=((1.0)*x16698);
IkReal x16711=(cj3*x16699);
IkReal x16712=((1.0)*cj1*cj2);
IkReal x16713=((1.0)*x16708);
IkReal x16714=((1.0)*cj3*sj5);
IkReal x16715=(cj5*x16698);
IkReal x16716=(sj3*x16699);
evalcond[0]=((((-1.0)*r22*x16709))+(((-1.0)*x16704*x16710))+((r20*x16715)));
evalcond[1]=(sj0+(((-1.0)*r02*x16709))+((r00*x16715))+(((-1.0)*x16705*x16710)));
evalcond[2]=((((-1.0)*x16701*x16710))+(((-1.0)*r12*x16709))+((r10*x16715))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x16707))+(((-1.0)*r20*x16708*x16709))+(((-1.0)*x16702))+(((-1.0)*x16706))+(((-1.0)*cj3*r22*x16710))+((x16704*x16711))+((r21*x16700)));
evalcond[4]=(x16703+(((-1.0)*r20*x16700*x16709))+(((-1.0)*r22*sj3*x16710))+(((-1.0)*x16712))+(((-1.0)*r21*x16713))+((x16704*x16716))+(((-1.0)*r20*x16714)));
evalcond[5]=(((x16705*x16711))+((cj0*x16703))+(((-1.0)*cj3*r02*x16710))+(((-1.0)*r00*x16708*x16709))+((r00*x16707))+((r01*x16700))+(((-1.0)*cj0*x16712)));
evalcond[6]=(((x16701*x16711))+(((-1.0)*r10*x16708*x16709))+(((-1.0)*cj3*r12*x16710))+((sj0*x16703))+((r11*x16700))+((r10*x16707))+(((-1.0)*sj0*x16712)));
evalcond[7]=(((x16705*x16716))+((cj0*x16706))+((cj0*x16702))+(((-1.0)*r01*x16713))+(((-1.0)*r00*x16714))+(((-1.0)*r00*x16700*x16709))+(((-1.0)*r02*sj3*x16710)));
evalcond[8]=((((-1.0)*r10*x16714))+(((-1.0)*r12*sj3*x16710))+(((-1.0)*r10*x16700*x16709))+((x16701*x16716))+(((-1.0)*r11*x16713))+((sj0*x16706))+((sj0*x16702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16717=r21*r21;
IkReal x16718=cj5*cj5;
IkReal x16719=r20*r20;
IkReal x16720=(cj5*r21);
IkReal x16721=(r20*sj5);
IkReal x16722=((1.0)*sj5);
IkReal x16723=(sj1*sj2);
IkReal x16724=(cj3*cj5);
IkReal x16725=(cj1*cj2);
IkReal x16726=(cj5*r20);
IkReal x16727=((1.0)*cj3*r22);
IkReal x16728=(cj3*r20*r21);
IkReal x16729=(sj3*x16717);
CheckValue<IkReal> x16730 = IKatan2WithCheck(IkReal(((((-1.0)*x16720*x16727))+(((-1.0)*x16721*x16727))+(((-1.0)*r22*x16725))+((r22*x16723)))),IkReal(((((-2.0)*x16718*x16728))+x16728+(((-1.0)*x16725*x16726))+(((-1.0)*r21*x16722*x16723))+((r21*sj5*x16725))+((sj5*x16717*x16724))+((x16723*x16726))+(((-1.0)*x16719*x16722*x16724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16730.valid){
continue;
}
CheckValue<IkReal> x16731=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+x16729+(((-2.0)*sj3*x16720*x16721))+((sj3*x16718*x16719))+(((-1.0)*x16718*x16729)))),-1);
if(!x16731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16730.value)+(((1.5707963267949)*(x16731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16732=IKsin(j4);
IkReal x16733=IKcos(j4);
IkReal x16734=((1.0)*r22);
IkReal x16735=((1.0)*cj2);
IkReal x16736=(cj5*sj3);
IkReal x16737=((1.0)*r21);
IkReal x16738=(r20*sj5);
IkReal x16739=(cj3*cj5);
IkReal x16740=(r21*sj5*x16733);
IkReal x16741=((1.0)*r20*x16733);
evalcond[0]=((((-1.0)*x16733*x16734))+(((-1.0)*sj5*x16732*x16737))+((cj5*r20*x16732)));
evalcond[1]=(((cj3*x16740))+((sj3*x16738))+(((-1.0)*sj1*x16735))+(((-1.0)*cj3*x16732*x16734))+(((-1.0)*cj1*sj2))+((r21*x16736))+(((-1.0)*x16739*x16741)));
evalcond[2]=((((-1.0)*x16736*x16741))+(((-1.0)*cj1*x16735))+((sj1*sj2))+(((-1.0)*x16737*x16739))+(((-1.0)*sj3*x16732*x16734))+((sj3*x16740))+(((-1.0)*cj3*x16738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16742=(cj5*sj4);
IkReal x16743=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x16742))+((r01*x16743))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x16743))+((r10*x16742))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x16742))+((r01*x16743))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x16743))+((r10*x16742))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x16742))+((r01*x16743))+((cj4*r02))), ((((-1.0)*r11*x16743))+((r10*x16742))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16744=IKsin(j0);
IkReal x16745=IKcos(j0);
IkReal x16746=((1.0)*cj3);
IkReal x16747=(r02*sj4);
IkReal x16748=(cj5*r11);
IkReal x16749=((0.353)*cj2);
IkReal x16750=(cj5*r00);
IkReal x16751=(r12*sj4);
IkReal x16752=(r01*sj5);
IkReal x16753=((1.0)*sj4);
IkReal x16754=(cj5*r10);
IkReal x16755=(cj5*r01);
IkReal x16756=((1.0)*sj3);
IkReal x16757=(r10*sj5);
IkReal x16758=(cj4*sj3);
IkReal x16759=(cj3*cj4);
IkReal x16760=(r00*sj5);
IkReal x16761=(r11*sj5);
IkReal x16762=((1.0)*cj4);
IkReal x16763=((1.0)*cj2);
IkReal x16764=((0.353)*sj2);
IkReal x16765=(cj1*x16745);
IkReal x16766=(cj1*x16744);
IkReal x16767=(sj1*x16745);
IkReal x16768=(sj1*x16744);
evalcond[0]=(x16744+(((-1.0)*r02*x16762))+(((-1.0)*x16752*x16753))+((sj4*x16750)));
evalcond[1]=((((-1.0)*x16745))+(((-1.0)*r12*x16762))+(((-1.0)*x16753*x16761))+((sj4*x16754)));
evalcond[2]=((((0.139)*x16744))+(((-1.0)*x16749*x16765))+(((0.117)*x16760))+(((-1.0)*px))+(((0.117)*x16755))+((x16764*x16767))+(((-0.43)*x16765)));
evalcond[3]=((((-1.0)*x16749*x16766))+(((0.117)*x16748))+(((-0.139)*x16745))+(((-1.0)*py))+(((0.117)*x16757))+((x16764*x16768))+(((-0.43)*x16766)));
evalcond[4]=((((-1.0)*x16763*x16765))+((sj3*x16755))+((sj2*x16767))+((sj3*x16760))+((x16752*x16759))+(((-1.0)*cj4*x16746*x16750))+(((-1.0)*x16746*x16747)));
evalcond[5]=((((-1.0)*x16763*x16766))+((x16759*x16761))+((sj3*x16757))+((sj2*x16768))+(((-1.0)*cj4*x16746*x16754))+((sj3*x16748))+(((-1.0)*x16746*x16751)));
evalcond[6]=((((-1.0)*x16747*x16756))+((sj2*x16765))+(((-1.0)*cj4*x16750*x16756))+((x16752*x16758))+(((-1.0)*x16746*x16755))+((cj2*x16767))+(((-1.0)*x16746*x16760)));
evalcond[7]=((((-1.0)*cj4*x16754*x16756))+(((-1.0)*x16751*x16756))+((x16758*x16761))+((sj2*x16766))+(((-1.0)*x16746*x16748))+(((-1.0)*x16746*x16757))+((cj2*x16768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16769=r21*r21;
IkReal x16770=cj5*cj5;
IkReal x16771=r20*r20;
IkReal x16772=(cj2*sj1);
IkReal x16773=(cj1*sj2);
IkReal x16774=((1.0)*r22);
IkReal x16775=(r20*r21);
IkReal x16776=((1.0)*sj3);
IkReal x16777=(cj5*sj5);
IkReal x16778=(r22*sj3);
IkReal x16779=(r21*sj5);
IkReal x16780=((1.0)*cj5*r20);
IkReal x16781=(cj3*x16770);
CheckValue<IkReal> x16782=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj3*x16775*x16777))+((cj3*x16769))+((cj3*(r22*r22)))+((x16771*x16781))+(((-1.0)*x16769*x16781)))),-1);
if(!x16782.valid){
continue;
}
CheckValue<IkReal> x16783 = IKatan2WithCheck(IkReal((((cj5*r21*x16778))+((r20*sj5*x16778))+(((-1.0)*x16772*x16774))+(((-1.0)*x16773*x16774)))),IkReal(((((-1.0)*x16772*x16780))+((x16773*x16779))+((x16772*x16779))+(((-1.0)*x16773*x16780))+((sj3*x16771*x16777))+(((-1.0)*x16775*x16776))+(((2.0)*sj3*x16770*x16775))+(((-1.0)*x16769*x16776*x16777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16782.value)))+(x16783.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16784=IKsin(j4);
IkReal x16785=IKcos(j4);
IkReal x16786=((1.0)*r22);
IkReal x16787=((1.0)*cj2);
IkReal x16788=(cj5*sj3);
IkReal x16789=((1.0)*r21);
IkReal x16790=(r20*sj5);
IkReal x16791=(cj3*cj5);
IkReal x16792=(r21*sj5*x16785);
IkReal x16793=((1.0)*r20*x16785);
evalcond[0]=((((-1.0)*x16785*x16786))+(((-1.0)*sj5*x16784*x16789))+((cj5*r20*x16784)));
evalcond[1]=((((-1.0)*cj3*x16784*x16786))+(((-1.0)*x16791*x16793))+((cj3*x16792))+((sj3*x16790))+((r21*x16788))+(((-1.0)*sj1*x16787))+(((-1.0)*cj1*sj2)));
evalcond[2]=((((-1.0)*x16789*x16791))+((sj3*x16792))+(((-1.0)*x16788*x16793))+((sj1*sj2))+(((-1.0)*cj3*x16790))+(((-1.0)*cj1*x16787))+(((-1.0)*sj3*x16784*x16786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16794=(cj5*sj4);
IkReal x16795=(sj4*sj5);
if( IKabs((((r01*x16795))+(((-1.0)*r00*x16794))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x16794))+(((-1.0)*r11*x16795))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x16795))+(((-1.0)*r00*x16794))+((cj4*r02))))+IKsqr((((r10*x16794))+(((-1.0)*r11*x16795))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x16795))+(((-1.0)*r00*x16794))+((cj4*r02))), (((r10*x16794))+(((-1.0)*r11*x16795))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16796=IKsin(j0);
IkReal x16797=IKcos(j0);
IkReal x16798=((1.0)*cj3);
IkReal x16799=(r02*sj4);
IkReal x16800=(cj5*r11);
IkReal x16801=((0.353)*cj2);
IkReal x16802=(cj5*r00);
IkReal x16803=(r12*sj4);
IkReal x16804=(r01*sj5);
IkReal x16805=((1.0)*sj4);
IkReal x16806=(cj5*r10);
IkReal x16807=(cj5*r01);
IkReal x16808=((1.0)*sj3);
IkReal x16809=(r10*sj5);
IkReal x16810=(cj4*sj3);
IkReal x16811=(cj3*cj4);
IkReal x16812=(r00*sj5);
IkReal x16813=(r11*sj5);
IkReal x16814=((1.0)*cj4);
IkReal x16815=((1.0)*cj2);
IkReal x16816=((0.353)*sj2);
IkReal x16817=(cj1*x16797);
IkReal x16818=(cj1*x16796);
IkReal x16819=(sj1*x16797);
IkReal x16820=(sj1*x16796);
evalcond[0]=(x16796+(((-1.0)*x16804*x16805))+((sj4*x16802))+(((-1.0)*r02*x16814)));
evalcond[1]=((((-1.0)*x16797))+(((-1.0)*r12*x16814))+(((-1.0)*x16805*x16813))+((sj4*x16806)));
evalcond[2]=((((0.117)*x16812))+((x16816*x16819))+(((-1.0)*x16801*x16817))+(((-1.0)*px))+(((-0.43)*x16817))+(((0.117)*x16807))+(((0.139)*x16796)));
evalcond[3]=((((-1.0)*x16801*x16818))+(((-1.0)*py))+(((-0.43)*x16818))+(((0.117)*x16809))+(((0.117)*x16800))+(((-0.139)*x16797))+((x16816*x16820)));
evalcond[4]=(((sj3*x16807))+(((-1.0)*x16798*x16799))+(((-1.0)*cj4*x16798*x16802))+((x16804*x16811))+((sj2*x16819))+((sj3*x16812))+(((-1.0)*x16815*x16817)));
evalcond[5]=(((sj3*x16800))+((sj3*x16809))+(((-1.0)*cj4*x16798*x16806))+(((-1.0)*x16815*x16818))+((x16811*x16813))+((sj2*x16820))+(((-1.0)*x16798*x16803)));
evalcond[6]=((((-1.0)*x16798*x16812))+(((-1.0)*x16799*x16808))+((x16804*x16810))+((sj2*x16817))+(((-1.0)*cj4*x16802*x16808))+((cj2*x16819))+(((-1.0)*x16798*x16807)));
evalcond[7]=(((cj2*x16820))+(((-1.0)*cj4*x16806*x16808))+((sj2*x16818))+((x16810*x16813))+(((-1.0)*x16798*x16809))+(((-1.0)*x16798*x16800))+(((-1.0)*x16803*x16808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - S05 (114906cddebbbdc2a958fac69f41b2a1)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
