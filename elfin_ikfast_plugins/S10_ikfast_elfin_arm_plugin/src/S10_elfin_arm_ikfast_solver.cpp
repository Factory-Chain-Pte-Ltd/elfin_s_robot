/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2023-07-10 17:12:41.630231
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.116)*x5);
x13=((0.566)*x4);
x14=((0.127)*x1);
x15=((0.607)*x1);
x16=((1.0)*x10);
x17=((1.0)*x6);
x18=((1.0)*x5);
x19=((1.0)*x9);
x20=((0.127)*x0);
x21=((1.0)*x4);
x22=(x11*x2);
x23=(x1*x2);
x24=(x11*x9);
x25=(x2*x4);
x26=(x0*x9);
x27=(x11*x3);
x28=(x11*x16);
x29=((1.0)*x1*x3);
x30=((0.127)*x3*x4);
x31=(x0*x1*x3);
x32=(x0*x29);
x33=((1.0)*x1*x27);
x34=((((-1.0)*x29))+x25);
x35=(((x21*x3))+(((1.0)*x23)));
x36=((-1.0)*x35);
x37=(x34*x6);
x38=(x0*((x23+((x3*x4)))));
x39=((((-1.0)*x32))+((x0*x25)));
x40=(((x27*x4))+((x1*x22)));
x41=((((-1.0)*x33))+((x22*x4)));
x42=(x39*x5);
x43=(x38*x6);
x44=(x40*x6);
x45=(x37+((x36*x5)));
x46=(x42+x43);
x47=(((x41*x5))+x44);
x48=(x47*x9);
x49=(x46*x9);
x50=((((-1.0)*x18*x38))+((x17*(((((-1.0)*x32))+((x0*x2*x21)))))));
x51=(((x17*(((((-1.0)*x33))+((x21*x22))))))+(((-1.0)*x18*x40)));
eerot[0]=(((x50*x8))+((x7*(((((-1.0)*x19*x46))+x28)))));
eerot[1]=(((x50*x7))+((x8*(((((-1.0)*x28))+x49)))));
eerot[2]=(((x10*x46))+x24);
IkReal x52=(x0*x14);
eetrans[0]=(((x6*((((x3*x52))+(((-1.0)*x20*x25))))))+(((-1.0)*x0*x15))+(((-0.566)*x31))+(((0.188)*x11))+((x10*(((((0.116)*x43))+((x12*x39))))))+((x0*x13*x2))+(((0.116)*x24))+((x5*((((x20*x3*x4))+((x2*x52)))))));
eerot[3]=(((x51*x8))+((x7*(((((-1.0)*x0*x16))+(((-1.0)*x19*x47)))))));
eerot[4]=(((x8*((((x0*x10))+x48))))+((x51*x7)));
eerot[5]=(((x10*x47))+(((-1.0)*x0*x19)));
IkReal x53=((0.127)*x4);
eetrans[1]=((((-0.116)*x26))+(((-0.566)*x1*x27))+((x5*((((x27*x53))+((x14*x22))))))+((x6*((((x14*x27))+(((-1.0)*x22*x53))))))+(((-0.188)*x0))+(((-1.0)*x11*x15))+((x13*x22))+((x10*((((x12*x41))+(((0.116)*x44)))))));
IkReal x54=((1.0)*x34);
eerot[6]=(((x8*(((((-1.0)*x5*x54))+(((-1.0)*x35*x6))))))+((x7*x9*(((((-1.0)*x18*x36))+(((-1.0)*x17*x54)))))));
eerot[7]=(((x45*x8*x9))+((x7*(((((-1.0)*x18*x34))+(((-1.0)*x17*x35)))))));
eerot[8]=(x10*x45);
IkReal x55=((1.0)*x3);
eetrans[2]=((0.147)+(((-1.0)*x13*x55))+((x6*((((x14*x2))+x30))))+((x5*(((((-1.0)*x14*x55))+(((0.127)*x25))))))+(((-0.566)*x23))+(((-0.607)*x4))+((x10*((((x12*x36))+(((0.116)*x37)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=r02;
new_px=((((-0.116)*r02))+px);
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=r12;
new_py=((((-0.116)*r12))+py);
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r21);
new_r22=r22;
new_pz=((-0.147)+(((-0.116)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x56=((1.0)*px);
IkReal x57=((1.0)*pz);
IkReal x58=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x58))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x57)));
rxp0_2=((((-1.0)*r10*x56))+((py*r00)));
rxp1_0=((((-1.0)*r21*x58))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x57)));
rxp1_2=((((-1.0)*r11*x56))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x58)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x57)));
rxp2_2=((((-1.0)*r12*x56))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x59=((0.127)*r20);
IkReal x60=((0.127)*r21);
IkReal x61=((0.127)*r22);
IkReal x62=((-0.254)*npx);
IkReal x63=((-0.254)*npy);
IkReal x64=((-1.0)*npz);
IkReal x65=((-1.0)*r21);
IkReal x66=((-1.0)*npy);
IkReal x67=((-0.127)*r21);
IkReal x68=((-1.0)*rxp0_2);
IkReal x69=((-1.0)*r22);
IkReal x70=((-0.127)*r22);
IkReal x71=((-1.0)*rxp1_2);
IkReal x72=((-1.0)*npx);
matrixinvcoeffs[0]=x59;
matrixinvcoeffs[1]=x62;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=r20;
matrixinvcoeffs[9]=0;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=x72;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=rxp0_2;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x59;
matrixinvcoeffs[19]=x62;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=0;
matrixinvcoeffs[25]=npx;
matrixinvcoeffs[26]=((-1.0)*r20);
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x68;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x60;
matrixinvcoeffs[33]=x63;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=r21;
matrixinvcoeffs[41]=0;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=x66;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=rxp1_2;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x60;
matrixinvcoeffs[51]=x63;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=0;
matrixinvcoeffs[57]=npy;
matrixinvcoeffs[58]=x65;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x71;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=x64;
matrixinvcoeffs[74]=r22;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x61;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=rxp2_2;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=r22;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=x64;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x61;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=x65;
matrixinvcoeffs[101]=x66;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=rxp1_2;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x67;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=x65;
matrixinvcoeffs[119]=x66;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=rxp1_2;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x67;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=r20;
matrixinvcoeffs[133]=npx;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x68;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x59;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=r20;
matrixinvcoeffs[151]=npx;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x68;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x59;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x69;
matrixinvcoeffs[165]=x64;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x70;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x69;
matrixinvcoeffs[183]=x64;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x70;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=npy;
matrixinvcoeffs[202]=x65;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x67;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x71;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=x65;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=npy;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x67;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x71;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=x72;
matrixinvcoeffs[234]=r20;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x59;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=r20;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=x72;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x59;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=rxp0_2;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_9=matrixinvcoeffs[148], gclwh4_10=matrixinvcoeffs[164], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_8=matrixinvcoeffs[133], gclwh5_11=matrixinvcoeffs[181], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_10=matrixinvcoeffs[166], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_8=matrixinvcoeffs[135], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_10=matrixinvcoeffs[168], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_8=matrixinvcoeffs[137], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_10=matrixinvcoeffs[170], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_8=matrixinvcoeffs[139], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_9=matrixinvcoeffs[156], gclwh12_10=matrixinvcoeffs[172], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_8=matrixinvcoeffs[141], gclwh13_11=matrixinvcoeffs[189], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_9=matrixinvcoeffs[158], gclwh14_10=matrixinvcoeffs[174], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_8=matrixinvcoeffs[143], gclwh15_11=matrixinvcoeffs[191], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x73=pz*pz;
IkReal x74=pp*pp;
IkReal x75=((0.254)*pz);
IkReal x76=((0.022502277576)*r21);
IkReal x77=(gclwh15_1*rxp0_2);
IkReal x78=(gclwh5_1*r22);
IkReal x79=((0.595884)*rxp2_2);
IkReal x80=(gclwh0_0*r20);
IkReal x81=(pp*r20);
IkReal x82=(pp*r22);
IkReal x83=(gclwh11_13*r22);
IkReal x84=(npy*pz);
IkReal x85=((2.0)*gclwh6_10);
IkReal x86=((0.022502277576)*r20);
IkReal x87=(gclwh13_11*r21);
IkReal x88=((1.132)*pp);
IkReal x89=(gclwh6_2*r21);
IkReal x90=((1.016)*rxp0_2);
IkReal x91=(pp*pz);
IkReal x92=((0.032258)*r20);
IkReal x93=(npz*pz);
IkReal x94=(gclwh5_15*rxp2_2);
IkReal x95=((0.005307584)*rxp2_2);
IkReal x96=(npx*pz);
IkReal x97=(gclwh5_15*r22);
IkReal x98=(gclwh14_2*pz);
IkReal x99=(pp*r21);
IkReal x100=(gclwh4_14*rxp2_2);
IkReal x101=((0.000337031584)*r21);
IkReal x102=(gclwh5_0*rxp2_2);
IkReal x103=((0.016129)*r20);
IkReal x104=((0.010414)*rxp0_2);
IkReal x105=((0.000661289)*r21);
IkReal x106=(gclwh9_0*r20);
IkReal x107=((0.037838634)*r20);
IkReal x108=((2.0)*npz);
IkReal x109=((0.000661289)*r22);
IkReal x110=((4.0)*gclwh8_10);
IkReal x111=((0.016129)*r22);
IkReal x112=(gclwh5_11*rxp2_2);
IkReal x113=(gclwh14_9*rxp0_2);
IkReal x114=(gclwh11_0*r22);
IkReal x115=((0.508)*rxp0_2);
IkReal x116=((0.287528)*rxp1_2);
IkReal x117=(gclwh6_12*rxp1_2);
IkReal x118=((2.0)*gclwh8_10);
IkReal x119=(gclwh14_14*rxp0_2);
IkReal x120=((2.0)*gclwh4_10);
IkReal x121=((0.095504)*rxp1_2);
IkReal x122=(gclwh7_0*r21);
IkReal x123=(gclwh13_11*rxp1_2);
IkReal x124=(gclwh15_0*rxp0_2);
IkReal x125=((0.287528)*rxp0_2);
IkReal x126=((0.018258028)*r21);
IkReal x127=(gclwh11_0*rxp2_2);
IkReal x128=((4.0)*gclwh11_8);
IkReal x129=(gclwh10_10*r22);
IkReal x130=(gclwh4_9*r22);
IkReal x131=(gclwh13_0*rxp1_2);
IkReal x132=((4.0)*gclwh9_8);
IkReal x133=((0.010414)*rxp2_2);
IkReal x134=(gclwh14_14*r20);
IkReal x135=(gclwh7_13*r21);
IkReal x136=((0.508)*rxp1_2);
IkReal x137=((2.0)*pp);
IkReal x138=((0.376)*gclwh13_15);
IkReal x139=((0.297942)*rxp1_2);
IkReal x140=((0.064516)*r21);
IkReal x141=(gclwh15_11*rxp0_2);
IkReal x142=((0.376)*gclwh15_15);
IkReal x143=((0.000337031584)*r20);
IkReal x144=((1.0)*r21);
IkReal x145=((2.0)*gclwh7_8);
IkReal x146=((0.064516)*r20);
IkReal x147=((2.0)*gclwh5_8);
IkReal x148=(gclwh8_2*rxp0_2);
IkReal x149=(gclwh11_8*r22);
IkReal x150=((1.0)*pz);
IkReal x151=((1.016)*rxp1_2);
IkReal x152=((2.0)*gclwh13_8);
IkReal x153=((2.0)*gclwh11_8);
IkReal x154=(gclwh10_2*rxp2_2);
IkReal x155=((0.003032252)*r20);
IkReal x156=((0.002048383)*r20);
IkReal x157=((2.0)*gclwh10_10);
IkReal x158=((0.254)*rxp2_2);
IkReal x159=(gclwh10_2*pz);
IkReal x160=(gclwh13_8*r21);
IkReal x161=((0.047752)*rxp1_2);
IkReal x162=(gclwh11_0*pz);
IkReal x163=((0.018258028)*r20);
IkReal x164=((0.191008)*rxp1_2);
IkReal x165=((0.018919317)*r22);
IkReal x166=((2.0)*gclwh9_8);
IkReal x167=((0.000661289)*r20);
IkReal x168=((0.047752)*rxp2_2);
IkReal x169=((0.508)*rxp2_2);
IkReal x170=((0.254)*rxp0_2);
IkReal x171=((2.0)*gclwh14_10);
IkReal x172=((1.016)*rxp2_2);
IkReal x173=(gclwh14_3*rxp0_2);
IkReal x174=((0.354366576)*rxp2_2);
IkReal x175=((0.003032252)*r22);
IkReal x176=((0.036516056)*r20);
IkReal x177=((4.0)*gclwh10_10);
IkReal x178=((0.047752)*rxp0_2);
IkReal x179=((2.0)*gclwh15_8);
IkReal x180=(gclwh12_9*rxp1_2);
IkReal x181=(gclwh10_2*r22);
IkReal x182=(gclwh12_10*r21);
IkReal x183=((0.376)*gclwh12_14);
IkReal x184=(gclwh4_9*rxp2_2);
IkReal x185=((0.005307584)*rxp1_2);
IkReal x186=(gclwh2_0*r21);
IkReal x187=(gclwh14_2*rxp0_2);
IkReal x188=((0.016129)*pz);
IkReal x189=(gclwh4_3*r22);
IkReal x190=((2.0)*npx);
IkReal x191=((0.032258)*r22);
IkReal x192=(gclwh12_9*r21);
IkReal x193=(gclwh12_2*r21);
IkReal x194=(gclwh15_0*pz);
IkReal x195=(gclwh12_2*rxp1_2);
IkReal x196=((0.003032252)*r21);
IkReal x197=((4.0)*gclwh6_10);
IkReal x198=(gclwh3_2*r21);
IkReal x199=((0.018919317)*r20);
IkReal x200=((0.376)*gclwh14_14);
IkReal x201=(gclwh5_0*pz);
IkReal x202=(gclwh15_15*rxp0_2);
IkReal x203=((2.0)*gclwh12_10);
IkReal x204=((0.016129)*r21);
IkReal x205=((0.019580606)*r20);
IkReal x206=(gclwh5_11*r22);
IkReal x207=((0.254)*rxp1_2);
IkReal x208=((0.006064504)*r21);
IkReal x209=((0.297942)*rxp2_2);
IkReal x210=((0.354366576)*rxp1_2);
IkReal x211=(gclwh6_2*rxp1_2);
IkReal x212=((0.032258)*r21);
IkReal x213=(gclwh13_0*r21);
IkReal x214=(gclwh6_12*r21);
IkReal x215=((0.297942)*rxp0_2);
IkReal x216=((4.0)*gclwh7_8);
IkReal x217=(gclwh8_5*x155);
IkReal x218=((0.047752)*x100);
IkReal x219=((0.047752)*x119);
IkReal x220=(gclwh10_5*x175);
IkReal x221=(gclwh6_5*x196);
IkReal x222=(gclwh12_14*x161);
IkReal x223=(gclwh10_10*x111);
IkReal x224=(gclwh12_10*x207);
IkReal x225=((0.032258)*x180);
IkReal x226=(gclwh6_10*x204);
IkReal x227=(gclwh4_10*x158);
IkReal x228=(gclwh14_10*x170);
IkReal x229=(gclwh8_10*x103);
IkReal x230=((0.032258)*x113);
IkReal x231=((0.032258)*x184);
IkReal x232=((0.032258)*x141);
IkReal x233=(gclwh11_8*x111);
IkReal x234=(gclwh7_8*x204);
IkReal x235=(gclwh13_8*x207);
IkReal x236=((0.032258)*x112);
IkReal x237=(gclwh15_8*x170);
IkReal x238=((0.032258)*x123);
IkReal x239=(gclwh9_8*x103);
IkReal x240=(gclwh5_8*x158);
IkReal x241=(gclwh9_7*x155);
IkReal x242=(gclwh13_15*x161);
IkReal x243=(gclwh7_7*x196);
IkReal x244=(gclwh11_7*x175);
IkReal x245=((0.047752)*x94);
IkReal x246=(gclwh15_15*x178);
IkReal x247=(gclwh12_14*x196);
IkReal x248=(gclwh8_5*x178);
IkReal x249=(gclwh6_5*x161);
IkReal x250=(gclwh10_5*x168);
IkReal x251=((0.003032252)*x134);
IkReal x252=(gclwh4_14*x175);
IkReal x253=(gclwh14_9*x156);
IkReal x254=((0.002048383)*x130);
IkReal x255=(gclwh4_10*x111);
IkReal x256=(gclwh6_10*x207);
IkReal x257=(gclwh10_10*x158);
IkReal x258=(gclwh14_10*x103);
IkReal x259=(gclwh8_10*x170);
IkReal x260=((0.016129)*x182);
IkReal x261=((0.002048383)*x192);
IkReal x262=(gclwh7_8*x207);
IkReal x263=(gclwh11_8*x158);
IkReal x264=(gclwh15_8*x103);
IkReal x265=((0.002048383)*x87);
IkReal x266=(gclwh5_8*x111);
IkReal x267=((0.002048383)*x206);
IkReal x268=(gclwh15_11*x156);
IkReal x269=(gclwh9_8*x170);
IkReal x270=((0.016129)*x160);
IkReal x271=((0.003032252)*x97);
IkReal x272=(gclwh15_15*x155);
IkReal x273=(gclwh9_7*x178);
IkReal x274=(gclwh13_15*x196);
IkReal x275=(gclwh11_7*x168);
IkReal x276=(gclwh7_7*x161);
IkReal x277=(gclwh8_10*x92);
IkReal x278=(gclwh4_10*x169);
IkReal x279=(gclwh14_10*x115);
IkReal x280=((0.095504)*x119);
IkReal x281=((0.095504)*x100);
IkReal x282=(gclwh12_14*x121);
IkReal x283=(gclwh6_10*x212);
IkReal x284=((0.032258)*x129);
IkReal x285=(gclwh12_10*x136);
IkReal x286=((0.095504)*x202);
IkReal x287=((0.095504)*x94);
IkReal x288=(gclwh13_15*x121);
IkReal x289=((0.032258)*x149);
IkReal x290=(gclwh7_8*x212);
IkReal x291=(gclwh13_8*x136);
IkReal x292=(gclwh15_8*x115);
IkReal x293=(gclwh9_8*x92);
IkReal x294=(gclwh5_8*x169);
IkReal x295=(gclwh8_10*x115);
IkReal x296=((0.032258)*x182);
IkReal x297=(gclwh12_14*x208);
IkReal x298=((0.006064504)*x134);
IkReal x299=((0.006064504)*gclwh4_14*r22);
IkReal x300=((0.376)*x93);
IkReal x301=(r20*x74);
IkReal x302=((2.0)*x73);
IkReal x303=((1.0)*x74);
IkReal x304=(r21*x74);
IkReal x305=(gclwh10_5*x300);
IkReal x306=((0.188)*gclwh8_5*x81);
IkReal x307=((0.376)*gclwh6_5*x84);
IkReal x308=((0.188)*gclwh6_5*x99);
IkReal x309=((0.188)*gclwh10_5*x82);
IkReal x310=((0.376)*gclwh8_5*x96);
IkReal x311=(gclwh14_3*pp*x170);
IkReal x312=(x89*x91);
IkReal x313=(x118*x96);
IkReal x314=(gclwh4_3*pp*x158);
IkReal x315=(x159*x82);
IkReal x316=(x195*x75);
IkReal x317=(x188*x89);
IkReal x318=(x111*x159);
IkReal x319=(x187*x75);
IkReal x320=(x84*x85);
IkReal x321=(x157*x93);
IkReal x322=(gclwh8_2*pz*x103);
IkReal x323=(gclwh12_3*pp*x207);
IkReal x324=(gclwh5_1*pp*x158);
IkReal x325=(x122*x188);
IkReal x326=(x122*x91);
IkReal x327=((0.254)*pp*x77);
IkReal x328=(x131*x75);
IkReal x329=(x162*x82);
IkReal x330=(x111*x162);
IkReal x331=(x166*x96);
IkReal x332=(x153*x93);
IkReal x333=(x145*x84);
IkReal x334=(x102*x75);
IkReal x335=(x124*x75);
IkReal x336=(gclwh9_0*pz*x103);
IkReal x337=(gclwh13_1*pp*x207);
IkReal x338=((0.376)*gclwh7_7*x84);
IkReal x339=(gclwh11_7*x300);
IkReal x340=((0.188)*gclwh9_7*x81);
IkReal x341=((0.376)*gclwh9_7*x96);
IkReal x342=((0.188)*gclwh11_7*x82);
IkReal x343=((0.188)*gclwh7_7*x99);
IkReal x344=(x200*x96);
IkReal x345=((0.188)*gclwh12_14*x99);
IkReal x346=(gclwh4_14*x300);
IkReal x347=((0.188)*gclwh14_14*x81);
IkReal x348=((0.188)*gclwh4_14*x82);
IkReal x349=(x183*x84);
IkReal x350=((0.127)*gclwh14_9*x81);
IkReal x351=(x203*x84);
IkReal x352=(x81*x98);
IkReal x353=(gclwh12_3*x304);
IkReal x354=(gclwh12_9*npy*x75);
IkReal x355=(gclwh1_2*pz*x103);
IkReal x356=(x103*x98);
IkReal x357=(gclwh3_3*x304);
IkReal x358=(gclwh1_3*x301);
IkReal x359=(x154*x75);
IkReal x360=((0.127)*gclwh4_9*x82);
IkReal x361=(x211*x75);
IkReal x362=(x188*x198);
IkReal x363=(gclwh14_9*npx*x75);
IkReal x364=(x188*x193);
IkReal x365=(x171*x96);
IkReal x366=(gclwh4_9*npz*x75);
IkReal x367=((0.127)*gclwh12_9*x99);
IkReal x368=(x148*x75);
IkReal x369=(x120*x93);
IkReal x370=(x194*x81);
IkReal x371=(gclwh13_1*x304);
IkReal x372=(x127*x75);
IkReal x373=(gclwh7_0*rxp1_2*x75);
IkReal x374=(x152*x84);
IkReal x375=(x201*x82);
IkReal x376=(x186*x91);
IkReal x377=(x111*x201);
IkReal x378=(x80*x91);
IkReal x379=(gclwh5_11*npz*x75);
IkReal x380=(x103*x194);
IkReal x381=(gclwh15_11*npx*x75);
IkReal x382=((0.127)*pp*x87);
IkReal x383=(x186*x188);
IkReal x384=(x188*x80);
IkReal x385=(x188*x213);
IkReal x386=(x147*x93);
IkReal x387=((0.127)*gclwh5_11*x82);
IkReal x388=(gclwh13_11*npy*x75);
IkReal x389=(gclwh9_0*rxp0_2*x75);
IkReal x390=((0.127)*gclwh15_11*x81);
IkReal x391=(x179*x96);
IkReal x392=(x138*x84);
IkReal x393=((0.188)*gclwh15_15*x81);
IkReal x394=((0.188)*gclwh5_15*x82);
IkReal x395=(gclwh5_15*x300);
IkReal x396=(x142*x96);
IkReal x397=((0.188)*gclwh13_15*x99);
IkReal x398=(x197*x84);
IkReal x399=(x177*x93);
IkReal x400=(x118*x81);
IkReal x401=(x85*x99);
IkReal x402=(x110*x96);
IkReal x403=(x157*x82);
IkReal x404=(x132*x96);
IkReal x405=(x145*x99);
IkReal x406=(x153*x82);
IkReal x407=(x216*x84);
IkReal x408=(x128*x93);
IkReal x409=(x166*x81);
IkReal x410=(x203*x99);
IkReal x411=((4.0)*gclwh14_10*x96);
IkReal x412=((4.0)*gclwh4_10*x93);
IkReal x413=((0.752)*gclwh4_14*x93);
IkReal x414=(x183*x99);
IkReal x415=((0.752)*gclwh14_14*x96);
IkReal x416=((0.376)*gclwh4_14*x82);
IkReal x417=(x200*x81);
IkReal x418=((0.752)*gclwh12_14*x84);
IkReal x419=(gclwh8_2*x190*x73);
IkReal x420=(gclwh6_2*npy*x302);
IkReal x421=(gclwh8_2*x150*x81);
IkReal x422=(gclwh10_2*x108*x73);
IkReal x423=(gclwh9_0*x190*x73);
IkReal x424=(gclwh9_0*x150*x81);
IkReal x425=(gclwh11_0*x108*x73);
IkReal x426=(gclwh7_0*npy*x302);
IkReal x427=(gclwh12_2*npy*x302);
IkReal x428=(gclwh3_2*npy*x302);
IkReal x429=(gclwh4_3*x108*x91);
IkReal x430=(gclwh1_2*x190*x73);
IkReal x431=(gclwh14_3*x190*x91);
IkReal x432=(gclwh12_2*x144*x91);
IkReal x433=(gclwh1_2*x150*x81);
IkReal x434=(gclwh3_3*x137*x84);
IkReal x435=(gclwh1_3*x190*x91);
IkReal x436=(gclwh3_2*x144*x91);
IkReal x437=(x189*x303);
IkReal x438=(gclwh12_3*x137*x84);
IkReal x439=(gclwh14_2*x190*x73);
IkReal x440=((1.0)*gclwh14_3*x301);
IkReal x441=(gclwh2_1*x137*x84);
IkReal x442=(gclwh0_1*x190*x91);
IkReal x443=(gclwh13_0*npy*x302);
IkReal x444=(gclwh5_1*x108*x91);
IkReal x445=(gclwh15_1*x190*x91);
IkReal x446=(gclwh5_0*x108*x73);
IkReal x447=(gclwh0_0*x190*x73);
IkReal x448=(gclwh2_0*npy*x302);
IkReal x449=((1.0)*gclwh0_1*x301);
IkReal x450=(gclwh13_1*x137*x84);
IkReal x451=(gclwh2_1*x144*x74);
IkReal x452=((1.0)*gclwh15_1*x301);
IkReal x453=(gclwh15_0*x190*x73);
IkReal x454=(x303*x78);
IkReal x455=(gclwh13_0*x144*x91);
IkReal x456=(x287+x286);
IkReal x457=(x276+x275);
IkReal x458=(x250+x249);
IkReal x459=(x218+x219);
IkReal x460=(x281+x280);
IkReal x461=(x246+x245);
IkReal x462=(x313+x223+x224+x226);
IkReal x463=(x331+x233+x234+x235);
IkReal x464=(x369+x365+x259+x260);
IkReal x465=(x386+x391+x269+x270);
IkReal x466=(x395+x397+x396+x274);
IkReal x467=(x297+x413+x414+x415);
IkReal x468=(x339+x338+x340+x241);
IkReal x469=(x306+x307+x305+x217);
IkReal x470=(x346+x344+x345+x247);
IkReal x471=(x351+x258+x255+x256+x257);
IkReal x472=(x374+x264+x266+x263+x262);
IkReal x473=(x333+x332+x239+x237+x240);
IkReal x474=(x320+x321+x229+x228+x227);
IkReal x475=(x295+x296+x412+x410+x411);
IkReal x476=(x347+x348+x349+x251+x252);
IkReal x477=(x308+x309+x310+x221+x220);
IkReal x478=(x394+x393+x392+x272+x271);
IkReal x479=(x298+x299+x416+x417+x418);
IkReal x480=(x342+x343+x341+x243+x244);
IkReal x481=(x285+x284+x283+x401+x403+x402);
IkReal x482=(x292+x293+x294+x407+x409+x408);
IkReal x483=(x290+x291+x289+x405+x404+x406);
IkReal x484=(x399+x398+x277+x278+x279+x400);
IkReal x485=(((gclwh10_10*x169))+(((4.0)*gclwh12_10*x84))+((gclwh6_10*x136))+((gclwh14_10*x92))+((x171*x81))+((gclwh4_10*x191))+((x120*x82)));
IkReal x486=(x322+x323+x319+x230+x231+x422+x421+x420);
IkReal x487=(x337+x336+x335+x334+x238+x426+x425+x424);
IkReal x488=(x318+x315+x314+x317+x316+x311+x312+x225+x419);
IkReal x489=(x330+x324+x325+x326+x327+x328+x329+x232+x236+x423);
IkReal x490=(x368+x363+x364+x366+x367+x261+x438+x439+x432+x433+x434+x435+x436+x437+x440+x75);
IkReal x491=(x382+x380+x381+x379+x378+x377+x376+x375+x373+x372+x371+x370+x265+x445+x444+x441+x443+x442+x75);
IkReal x492=(x350+x353+x352+x355+x354+x357+x356+x359+x358+x360+x361+x362+x254+x253+x429+x428+x427+x430+x431);
IkReal x493=(x387+x384+x385+x383+x388+x389+x390+x267+x268+x449+x448+x447+x446+x454+x455+x452+x453+x450+x451);
op[0]=((((-1.173)*gclwh6_12*x99))+(((-1.0)*gclwh12_9*x139))+(((2.346)*gclwh6_12*x84))+(((-1.0)*x477))+(((-1.173)*gclwh10_12*x82))+(((-1.0)*x459))+x222+x469+((gclwh8_12*x199))+(((0.297942)*x184))+(((-2.346)*gclwh8_12*x96))+(((-1.0)*gclwh10_12*x165))+(((2.346)*gclwh10_12*x93))+(((0.297942)*x113))+(((-0.018919317)*x214))+(((1.173)*gclwh8_12*x81)));
op[1]=((((-1.0)*x486))+((gclwh8_10*x81))+(((-1.0)*gclwh6_10*x99))+(((-0.354366576)*x173))+(((-1.0)*x462))+(((-1.0)*gclwh10_10*x82))+x488+x474+(((-1.0)*gclwh4_3*x174))+((gclwh12_3*x210)));
op[2]=((-0.425632)+(((-1.0)*x481))+x484);
op[3]=((((-2.264)*gclwh6_2*x84))+(((-1.0)*gclwh14_2*x125))+(((-1.132)*gclwh8_2*x81))+((gclwh12_2*x116))+(((0.308356)*x180))+(((0.018258028)*x181))+(((2.264)*gclwh8_2*x96))+(((-0.308356)*x113))+(((-2.264)*gclwh10_2*x93))+(((0.018258028)*x89))+x460+(((1.132)*gclwh10_2*x82))+((x88*x89))+(((-1.0)*x282))+(((-0.308356)*x184))+(((-1.0)*gclwh8_2*x163)));
op[4]=((((0.082)*gclwh6_12*x84))+(((-1.0)*gclwh10_12*x109))+(((-0.041)*gclwh10_12*x82))+(((-1.0)*gclwh14_9*x104))+(((-1.0)*x477))+(((-1.0)*gclwh6_12*x105))+(((-1.0)*gclwh4_9*x133))+x459+x469+(((0.010414)*x180))+((gclwh8_12*x167))+(((-0.082)*gclwh8_12*x96))+(((0.041)*gclwh8_12*x81))+(((-0.041)*gclwh6_12*x99))+(((0.082)*gclwh10_12*x93))+(((-1.0)*x222)));
op[5]=((((-1.0)*gclwh4_3*x95))+(((-1.0)*gclwh8_10*x81))+(((-1.0)*x486))+(((-0.005307584)*x173))+(((-1.0)*x474))+((gclwh6_10*x99))+x488+x462+((gclwh12_3*x185))+((gclwh10_10*x82)));
op[6]=((((-1.0)*gclwh5_1*x174))+(((-1.0)*gclwh7_8*x99))+(((-1.0)*x487))+(((-1.0)*gclwh11_8*x82))+(((-1.0)*x463))+x489+x473+((gclwh13_1*x210))+((gclwh9_8*x81))+(((-0.354366576)*x77)));
op[7]=((((2.346)*gclwh7_13*x84))+(((-2.346)*gclwh9_13*x96))+(((-1.0)*x480))+(((-0.018919317)*x83))+(((-1.173)*gclwh7_13*x99))+(((-0.297942)*x112))+(((2.346)*gclwh11_13*x93))+x468+x461+(((1.173)*gclwh9_13*x81))+(((-1.0)*x242))+(((-0.297942)*x141))+(((0.297942)*x123))+(((-0.018919317)*x135))+((gclwh9_13*x199))+(((-1.173)*gclwh11_13*x82)));
op[8]=((((-0.287528)*x102))+(((-2.264)*gclwh7_0*x84))+(((-2.264)*gclwh11_0*x93))+((gclwh13_0*x116))+(((1.132)*gclwh11_0*x82))+(((2.264)*gclwh9_0*x96))+(((-0.308356)*x112))+x456+(((0.018258028)*x114))+(((0.308356)*x123))+(((0.018258028)*x122))+(((-0.018258028)*x106))+((x122*x88))+(((-1.132)*gclwh9_0*x81))+(((-1.0)*x288))+(((-0.308356)*x141))+(((-0.287528)*x124)));
op[9]=((-0.425632)+(((-1.0)*x482))+x483);
op[10]=((((-1.0)*gclwh9_8*x81))+(((-0.005307584)*x77))+(((-1.0)*x487))+((gclwh7_8*x99))+(((-1.0)*x473))+x489+x463+(((-1.0)*gclwh5_1*x95))+((gclwh11_8*x82))+((gclwh13_1*x185)));
op[11]=((((0.041)*gclwh9_13*x81))+(((-1.0)*x480))+(((-0.000661289)*x83))+(((-0.041)*gclwh7_13*x99))+((gclwh15_11*x104))+(((-1.0)*x461))+(((-0.010414)*x123))+x242+(((-0.041)*gclwh11_13*x82))+x468+(((-1.0)*gclwh7_13*x105))+(((0.082)*gclwh11_13*x93))+(((0.082)*gclwh7_13*x84))+((gclwh9_13*x167))+(((-0.082)*gclwh9_13*x96))+(((0.010414)*x112)));
op[12]=((((1.173)*gclwh12_9*x99))+(((-1.173)*gclwh4_9*x82))+(((-1.0)*x470))+(((-0.297942)*x117))+(((-2.346)*gclwh12_9*x84))+(((0.018919317)*x192))+(((-1.0)*x458))+(((-1.0)*gclwh14_9*x199))+x248+(((-1.173)*gclwh14_9*x81))+(((2.346)*gclwh14_9*x96))+x476+(((-1.0)*gclwh10_12*x209))+(((2.346)*gclwh4_9*x93))+(((-0.018919317)*x130))+((gclwh8_12*x215)));
op[13]=((1.411273)+((gclwh3_3*x76))+(((1.379015)*gclwh14_3*x81))+(((-1.0)*x490))+(((-2.790288)*gclwh4_3*x93))+(((1.379015)*gclwh4_3*x82))+(((-1.0)*gclwh14_10*x81))+(((-1.0)*x471))+(((-1.0)*gclwh4_10*x82))+(((2.790288)*gclwh1_3*x96))+x492+x464+(((-1.379015)*gclwh12_3*x99))+((gclwh1_3*x86))+((gclwh14_3*x86))+(((-2.790288)*gclwh14_3*x96))+(((-1.411273)*gclwh1_3*x81))+(((2.790288)*gclwh12_3*x84))+(((2.790288)*gclwh3_3*x84))+(((-1.0)*gclwh12_3*x76))+(((-1.411273)*gclwh3_3*x99))+((gclwh12_10*x99))+(((0.022502277576)*x189)));
op[14]=((0.166874)+(((-1.0)*x485))+x475);
op[15]=((((1.214)*gclwh4_9*x82))+(((2.428)*gclwh12_9*x84))+(((1.214)*gclwh14_9*x81))+((gclwh6_2*x116))+((gclwh1_2*x163))+((gclwh3_2*x126))+(((-2.428)*gclwh14_9*x96))+(((0.019580606)*x130))+(((-1.214)*gclwh12_9*x99))+(((-1.132)*gclwh1_2*x81))+(((-1.0)*gclwh8_2*x125))+(((-1.0)*x479))+(((-1.0)*gclwh12_2*x126))+((gclwh14_9*x205))+(((2.264)*gclwh12_2*x84))+(((2.264)*gclwh3_2*x84))+(((-2.428)*gclwh4_9*x93))+(((-1.0)*x193*x88))+x467+(((-2.264)*gclwh14_2*x96))+((gclwh14_2*x163))+(((2.264)*gclwh1_2*x96))+(((0.287528)*x154))+(((-0.019580606)*x192))+(((-1.0)*x198*x88))+(((1.132)*gclwh14_2*x81)));
op[16]=((((0.041)*gclwh14_9*x81))+(((-1.0)*gclwh10_12*x133))+(((0.082)*gclwh12_9*x84))+((gclwh8_12*x104))+(((0.041)*gclwh4_9*x82))+(((-0.010414)*x117))+(((-1.0)*x476))+(((-1.0)*gclwh12_9*x105))+((gclwh14_9*x167))+(((-0.082)*gclwh4_9*x93))+(((-1.0)*x458))+x248+x470+(((-0.082)*gclwh14_9*x96))+(((-0.041)*gclwh12_9*x99))+((gclwh4_9*x109)));
op[17]=((-0.037025)+(((0.004767)*gclwh14_3*x81))+(((-1.0)*x490))+(((0.000337031584)*x189))+(((0.041792)*gclwh1_3*x96))+(((-1.0)*gclwh12_10*x99))+(((0.004767)*gclwh4_3*x82))+(((-1.0)*x464))+(((0.041792)*gclwh12_3*x84))+((gclwh3_3*x101))+((gclwh4_10*x82))+(((0.041792)*gclwh3_3*x84))+x492+x471+((gclwh14_10*x81))+(((-1.0)*gclwh12_3*x101))+((gclwh14_3*x143))+(((-0.041792)*gclwh14_3*x96))+(((-0.037025)*gclwh3_3*x99))+(((-0.004767)*gclwh12_3*x99))+(((-0.037025)*gclwh1_3*x81))+((gclwh1_3*x143))+(((-0.041792)*gclwh4_3*x93)));
op[18]=((1.411273)+(((1.411273)*gclwh2_1*x99))+(((-1.0)*gclwh2_1*x76))+(((1.379015)*pp*x78))+(((1.379015)*gclwh15_1*x81))+(((-1.379015)*gclwh13_1*x99))+(((-1.0)*x493))+(((-2.790288)*gclwh2_1*x84))+(((2.790288)*gclwh13_1*x84))+((gclwh15_1*x86))+(((-1.0)*x472))+(((0.022502277576)*x78))+((gclwh13_8*x99))+x491+x465+(((-1.0)*gclwh13_1*x76))+(((-1.0)*gclwh5_8*x82))+(((-1.0)*gclwh0_1*x86))+(((-2.790288)*gclwh5_1*x93))+(((-2.790288)*gclwh0_1*x96))+(((1.411273)*gclwh0_1*x81))+(((-1.0)*gclwh15_8*x81))+(((-2.790288)*gclwh15_1*x96)));
op[19]=((((-2.346)*gclwh15_11*x96))+(((-0.018919317)*x87))+(((-1.0)*x478))+((gclwh15_11*x199))+(((-1.0)*x457))+x273+x466+(((-1.0)*gclwh11_13*x209))+((gclwh5_11*x165))+(((-1.173)*pp*x87))+(((1.173)*gclwh15_11*x81))+(((2.346)*gclwh13_11*x84))+((gclwh9_13*x215))+(((-1.0)*gclwh7_13*x139))+(((-2.346)*gclwh5_11*x93))+(((1.173)*gclwh5_11*x82)));
op[20]=((((-0.376)*gclwh5_15*x82))+(((-1.0)*gclwh2_0*x126))+((x186*x88))+(((1.132)*gclwh15_0*x81))+(((-1.214)*pp*x87))+((gclwh15_11*x205))+((x138*x99))+(((0.287528)*x127))+(((-1.0)*gclwh13_0*x126))+(((-2.264)*gclwh0_0*x96))+(((-2.264)*gclwh5_0*x93))+(((-0.019580606)*x87))+(((-2.428)*gclwh5_11*x93))+(((-0.752)*gclwh13_15*x84))+(((-2.264)*gclwh2_0*x84))+((gclwh7_0*x116))+(((2.428)*gclwh13_11*x84))+((gclwh13_15*x208))+(((-0.006064504)*gclwh15_15*r20))+(((0.018258028)*gclwh5_0*r22))+(((-1.0)*x142*x81))+(((0.752)*gclwh5_15*x93))+((gclwh15_0*x163))+(((2.264)*gclwh13_0*x84))+(((-1.0)*x213*x88))+(((1.214)*gclwh15_11*x81))+(((0.019580606)*x206))+(((-2.428)*gclwh15_11*x96))+(((-0.006064504)*x97))+((x80*x88))+(((0.752)*gclwh15_15*x96))+(((1.214)*gclwh5_11*x82))+(((-0.018258028)*x80))+(((1.132)*gclwh5_0*x82))+(((-2.264)*gclwh15_0*x96))+(((-1.0)*gclwh9_0*x125)));
op[21]=((-0.166874)+(((-4.0)*gclwh15_8*x96))+((gclwh11_8*x169))+(((-0.032258)*x160))+((x147*x82))+(((4.0)*gclwh13_8*x84))+(((-1.0)*gclwh9_8*x115))+((gclwh15_8*x92))+(((-1.0)*x152*x99))+((gclwh5_8*x191))+((gclwh7_8*x136))+(((-4.0)*gclwh5_8*x93))+((x179*x81)));
op[22]=((-0.037025)+(((-0.004767)*gclwh13_1*x99))+(((-1.0)*x493))+(((-1.0)*gclwh13_1*x101))+(((0.041792)*gclwh13_1*x84))+(((0.004767)*gclwh15_1*x81))+(((-1.0)*x465))+x491+x472+(((-1.0)*gclwh0_1*x143))+(((0.004767)*pp*x78))+((gclwh15_1*x143))+((gclwh5_8*x82))+((gclwh15_8*x81))+(((-0.041792)*gclwh0_1*x96))+(((-0.041792)*gclwh5_1*x93))+(((-0.041792)*gclwh15_1*x96))+(((0.037025)*gclwh0_1*x81))+(((0.000337031584)*x78))+(((-0.041792)*gclwh2_1*x84))+(((-1.0)*gclwh13_8*x99))+(((0.037025)*gclwh2_1*x99))+(((-1.0)*gclwh2_1*x101)));
op[23]=((((-1.0)*gclwh11_13*x133))+(((-0.082)*gclwh13_11*x84))+(((0.082)*gclwh15_11*x96))+(((0.041)*pp*x87))+((gclwh9_13*x104))+(((-0.010414)*gclwh7_13*rxp1_2))+(((-0.041)*gclwh5_11*x82))+(((-1.0)*x466))+(((-1.0)*x457))+(((-0.041)*gclwh15_11*x81))+x273+x478+(((0.082)*gclwh5_11*x93))+(((0.000661289)*x87))+(((-1.0)*gclwh15_11*x167))+(((-1.0)*gclwh5_11*x109)));
op[24]=((-0.882096)+(((-1.0)*x481))+x484);
op[25]=((((-1.0)*gclwh8_2*x107))+(((-0.595884)*x187))+(((4.692)*gclwh8_2*x96))+(((-2.346)*gclwh8_2*x81))+(((0.037838634)*x181))+(((2.346)*gclwh10_2*x82))+(((-4.692)*gclwh6_2*x84))+(((-4.692)*gclwh10_2*x93))+x460+(((0.037838634)*x89))+(((-1.0)*x282))+(((0.595884)*x195))+(((2.346)*pp*x89)));
op[26]=((((-2.264)*gclwh8_12*x81))+(((0.191008)*x100))+(((0.191008)*x119))+(((2.264)*gclwh6_12*x99))+(((-4.528)*gclwh6_12*x84))+(((-4.528)*gclwh10_12*x93))+(((-1.0)*gclwh8_12*x176))+(((-1.0)*gclwh12_14*x164))+(((2.264)*gclwh10_12*x82))+(((0.036516056)*x214))+(((4.528)*gclwh8_12*x96))+(((0.036516056)*gclwh10_12*r22)));
op[27]=(((x197*x99))+((gclwh6_10*x140))+((x177*x82))+(((-1.0)*gclwh8_10*x146))+(((-1.0)*gclwh14_10*x90))+(((-8.0)*gclwh6_10*x84))+(((-8.0)*gclwh10_10*x93))+(((-1.0)*x110*x81))+(((-1.0)*gclwh4_10*x172))+(((8.0)*gclwh8_10*x96))+((gclwh12_10*x151))+(((0.064516)*x129)));
op[28]=((-0.030832)+(((-1.0)*x484))+x481);
op[29]=((((0.082)*gclwh10_2*x82))+(((-0.001322578)*gclwh8_2*r20))+(((0.082)*pp*x89))+(((-0.020828)*x187))+(((-1.0)*x460))+(((-0.164)*gclwh6_2*x84))+(((0.164)*gclwh8_2*x96))+x282+(((-0.082)*gclwh8_2*x81))+(((-0.164)*gclwh10_2*x93))+(((0.020828)*x195))+(((0.001322578)*x181))+(((0.001322578)*x89)));
op[30]=((((-0.037838634)*x106))+(((-1.0)*gclwh5_0*x79))+(((2.346)*gclwh7_0*x99))+(((0.595884)*x131))+(((4.692)*gclwh9_0*x96))+x456+(((2.346)*gclwh11_0*x82))+(((-2.346)*gclwh9_0*x81))+(((0.037838634)*x122))+(((-1.0)*x288))+(((-0.595884)*x124))+(((0.037838634)*x114))+(((-4.692)*gclwh11_0*x93))+(((-4.692)*gclwh7_0*x84)));
op[31]=((-0.882096)+(((-1.0)*x482))+x483);
op[32]=((((-1.0)*gclwh9_8*x146))+((gclwh13_8*x151))+(((-1.0)*gclwh15_8*x90))+(((-8.0)*gclwh11_8*x93))+((x216*x99))+((gclwh7_8*x140))+(((-1.0)*x132*x81))+((x128*x82))+(((0.064516)*x149))+(((-1.0)*gclwh5_8*x172))+(((8.0)*gclwh9_8*x96))+(((-8.0)*gclwh7_8*x84)));
op[33]=((((0.036516056)*x83))+(((-2.264)*gclwh9_13*x81))+(((-4.528)*gclwh11_13*x93))+(((2.264)*gclwh11_13*x82))+(((0.036516056)*x135))+(((-1.0)*gclwh9_13*x176))+(((2.264)*gclwh7_13*x99))+(((-4.528)*gclwh7_13*x84))+(((-0.191008)*x94))+((gclwh13_15*x164))+(((-0.191008)*x202))+(((4.528)*gclwh9_13*x96)));
op[34]=((((0.001322578)*x114))+(((-0.001322578)*x106))+(((-0.020828)*x124))+(((0.020828)*x131))+(((0.001322578)*x122))+(((-0.020828)*x102))+(((0.082)*gclwh11_0*x82))+(((-0.164)*gclwh11_0*x93))+(((0.164)*gclwh9_0*x96))+(((-1.0)*x456))+x288+(((-0.082)*gclwh9_0*x81))+(((0.082)*gclwh7_0*x99))+(((-0.164)*gclwh7_0*x84)));
op[35]=((-0.030832)+(((-1.0)*x483))+x482);
op[36]=((-2.68117)+(((-1.0)*x485))+x475);
op[37]=((((-2.346)*gclwh3_2*x99))+(((2.346)*gclwh14_2*x81))+(((4.692)*gclwh3_2*x84))+(((-0.595884)*x148))+((gclwh14_2*x107))+(((-1.0)*x479))+(((0.037838634)*x198))+((gclwh10_2*x79))+x467+(((4.692)*gclwh12_2*x84))+(((-2.346)*gclwh1_2*x81))+(((0.595884)*x211))+((gclwh1_2*x107))+(((-2.346)*gclwh12_2*x99))+(((4.692)*gclwh1_2*x96))+(((-0.037838634)*x193))+(((-4.692)*gclwh14_2*x96)));
IkReal x494=pz*pz;
IkReal x495=pp*pp;
IkReal x496=((0.254)*pz);
IkReal x497=((0.022502277576)*r21);
IkReal x498=(gclwh15_1*rxp0_2);
IkReal x499=(gclwh5_1*r22);
IkReal x500=(gclwh0_0*r20);
IkReal x501=(pp*r20);
IkReal x502=((1.132)*pp);
IkReal x503=(npy*pz);
IkReal x504=((2.0)*gclwh6_10);
IkReal x505=((0.022502277576)*r20);
IkReal x506=(npz*pz);
IkReal x507=((0.376)*gclwh5_15);
IkReal x508=(gclwh13_11*r21);
IkReal x509=(gclwh6_2*r21);
IkReal x510=(pp*pz);
IkReal x511=(gclwh10_10*rxp2_2);
IkReal x512=((0.032258)*r20);
IkReal x513=((0.047752)*rxp2_2);
IkReal x514=(pp*r21);
IkReal x515=((4.0)*gclwh13_8);
IkReal x516=(gclwh9_0*rxp0_2);
IkReal x517=(gclwh4_3*rxp2_2);
IkReal x518=(npx*pz);
IkReal x519=(gclwh5_15*r22);
IkReal x520=(gclwh14_14*r20);
IkReal x521=((0.004767)*pp);
IkReal x522=(gclwh14_2*r20);
IkReal x523=((0.095504)*rxp2_2);
IkReal x524=((0.000337031584)*r21);
IkReal x525=((0.016129)*pz);
IkReal x526=((4.0)*gclwh4_10);
IkReal x527=((0.010414)*rxp0_2);
IkReal x528=((0.010414)*rxp1_2);
IkReal x529=((0.018258028)*r20);
IkReal x530=((0.000661289)*r22);
IkReal x531=((0.001322578)*r20);
IkReal x532=(gclwh11_8*r22);
IkReal x533=((0.297942)*rxp2_2);
IkReal x534=(gclwh14_9*rxp0_2);
IkReal x535=(gclwh11_0*r22);
IkReal x536=(gclwh9_8*rxp0_2);
IkReal x537=((0.287528)*rxp1_2);
IkReal x538=((0.254)*pp);
IkReal x539=((2.0)*gclwh8_10);
IkReal x540=((0.020828)*rxp1_2);
IkReal x541=((0.188)*pp);
IkReal x542=(gclwh14_14*rxp0_2);
IkReal x543=(pp*r22);
IkReal x544=((2.0)*gclwh4_10);
IkReal x545=((0.095504)*rxp1_2);
IkReal x546=(gclwh7_0*r21);
IkReal x547=(gclwh15_0*rxp0_2);
IkReal x548=((0.287528)*rxp0_2);
IkReal x549=((0.752)*gclwh14_14);
IkReal x550=(gclwh12_2*r21);
IkReal x551=(gclwh11_0*rxp2_2);
IkReal x552=(gclwh10_10*r22);
IkReal x553=(gclwh4_9*r22);
IkReal x554=(gclwh11_13*rxp2_2);
IkReal x555=(gclwh13_8*r21);
IkReal x556=((2.0)*pp);
IkReal x557=(gclwh7_8*rxp1_2);
IkReal x558=((0.308356)*rxp1_2);
IkReal x559=(gclwh5_1*rxp2_2);
IkReal x560=((0.376)*gclwh13_15);
IkReal x561=((0.297942)*rxp1_2);
IkReal x562=(gclwh2_0*r21);
IkReal x563=(gclwh15_11*rxp0_2);
IkReal x564=((0.376)*gclwh15_15);
IkReal x565=(gclwh1_3*r20);
IkReal x566=((1.0)*r21);
IkReal x567=((2.0)*gclwh7_8);
IkReal x568=(gclwh7_0*rxp1_2);
IkReal x569=(gclwh5_0*r22);
IkReal x570=((2.0)*gclwh5_8);
IkReal x571=((0.752)*gclwh4_14);
IkReal x572=((0.018919317)*r22);
IkReal x573=((1.0)*pz);
IkReal x574=((2.0)*gclwh13_8);
IkReal x575=((0.003032252)*r20);
IkReal x576=((0.002048383)*r20);
IkReal x577=(gclwh4_10*r22);
IkReal x578=(gclwh10_2*rxp2_2);
IkReal x579=(gclwh10_2*r22);
IkReal x580=((0.047752)*rxp1_2);
IkReal x581=((0.575056)*rxp1_2);
IkReal x582=((0.752)*gclwh12_14);
IkReal x583=((2.0)*gclwh9_8);
IkReal x584=(gclwh10_12*rxp2_2);
IkReal x585=(gclwh5_11*rxp2_2);
IkReal x586=((0.000661289)*r20);
IkReal x587=((2.0)*gclwh15_8);
IkReal x588=(gclwh5_0*rxp2_2);
IkReal x589=(gclwh11_8*rxp2_2);
IkReal x590=((0.000661289)*r21);
IkReal x591=((4.0)*gclwh14_10);
IkReal x592=((2.0)*gclwh14_10);
IkReal x593=((0.575056)*rxp0_2);
IkReal x594=((0.254)*rxp0_2);
IkReal x595=((0.752)*gclwh13_15);
IkReal x596=((0.016129)*r20);
IkReal x597=(gclwh14_3*rxp0_2);
IkReal x598=(gclwh8_2*rxp0_2);
IkReal x599=((0.003032252)*r22);
IkReal x600=((0.047752)*rxp0_2);
IkReal x601=((0.000337031584)*r20);
IkReal x602=(gclwh12_10*r21);
IkReal x603=((0.376)*gclwh12_14);
IkReal x604=((0.005307584)*rxp1_2);
IkReal x605=((4.0)*gclwh12_10);
IkReal x606=(gclwh5_8*r22);
IkReal x607=((0.752)*gclwh15_15);
IkReal x608=((0.018919317)*r20);
IkReal x609=(gclwh4_3*r22);
IkReal x610=(gclwh13_0*r21);
IkReal x611=(gclwh15_0*r20);
IkReal x612=((2.0)*npx);
IkReal x613=((0.032258)*rxp1_2);
IkReal x614=((0.508)*rxp0_2);
IkReal x615=(gclwh13_15*r21);
IkReal x616=(gclwh12_9*r21);
IkReal x617=((4.0)*gclwh5_8);
IkReal x618=(gclwh4_10*rxp2_2);
IkReal x619=((0.508)*rxp1_2);
IkReal x620=(gclwh12_14*r21);
IkReal x621=(gclwh4_14*r22);
IkReal x622=((0.376)*gclwh14_14);
IkReal x623=((0.018919317)*r21);
IkReal x624=(gclwh4_9*rxp2_2);
IkReal x625=((2.0)*gclwh12_10);
IkReal x626=((2.0)*gclwh10_10);
IkReal x627=(gclwh15_15*r20);
IkReal x628=((0.016129)*r21);
IkReal x629=((0.019580606)*r20);
IkReal x630=(gclwh5_11*r22);
IkReal x631=((0.064516)*r20);
IkReal x632=((4.0)*gclwh15_8);
IkReal x633=((0.254)*rxp1_2);
IkReal x634=(gclwh13_1*rxp1_2);
IkReal x635=(gclwh3_2*r21);
IkReal x636=(gclwh12_3*rxp1_2);
IkReal x637=((0.376)*gclwh4_14);
IkReal x638=((0.003032252)*r21);
IkReal x639=((0.297942)*rxp0_2);
IkReal x640=((0.032258)*r21);
IkReal x641=(gclwh5_8*rxp2_2);
IkReal x642=((0.006064504)*x627);
IkReal x643=((0.006064504)*x519);
IkReal x644=((0.006064504)*x615);
IkReal x645=((0.032258)*x555);
IkReal x646=((0.508)*x536);
IkReal x647=(gclwh15_8*x512);
IkReal x648=((0.508)*x557);
IkReal x649=((0.508)*x589);
IkReal x650=((0.032258)*x606);
IkReal x651=(gclwh8_5*x575);
IkReal x652=(gclwh12_14*x580);
IkReal x653=(gclwh10_5*x599);
IkReal x654=(gclwh6_5*x638);
IkReal x655=(gclwh4_14*x513);
IkReal x656=((0.047752)*x542);
IkReal x657=((0.254)*x618);
IkReal x658=(gclwh14_10*x594);
IkReal x659=(gclwh8_10*x596);
IkReal x660=(gclwh12_9*x613);
IkReal x661=((0.016129)*x552);
IkReal x662=(gclwh12_10*x633);
IkReal x663=((0.032258)*x534);
IkReal x664=(gclwh6_10*x628);
IkReal x665=((0.032258)*x624);
IkReal x666=((0.032258)*x563);
IkReal x667=(gclwh15_8*x594);
IkReal x668=(gclwh9_8*x596);
IkReal x669=((0.254)*x641);
IkReal x670=((0.032258)*x585);
IkReal x671=((0.016129)*x532);
IkReal x672=(gclwh7_8*x628);
IkReal x673=(gclwh13_8*x633);
IkReal x674=(gclwh13_11*x613);
IkReal x675=(gclwh9_7*x575);
IkReal x676=(gclwh5_15*x513);
IkReal x677=(gclwh15_15*x600);
IkReal x678=(gclwh7_7*x638);
IkReal x679=(gclwh11_7*x599);
IkReal x680=(gclwh13_15*x580);
IkReal x681=((0.508)*x511);
IkReal x682=(gclwh14_10*x512);
IkReal x683=(gclwh6_10*x619);
IkReal x684=((0.032258)*x577);
IkReal x685=((0.006064504)*x520);
IkReal x686=((0.006064504)*x621);
IkReal x687=((0.006064504)*x620);
IkReal x688=((0.003032252)*x520);
IkReal x689=(gclwh4_14*x599);
IkReal x690=(gclwh8_5*x600);
IkReal x691=(gclwh6_5*x580);
IkReal x692=((0.003032252)*x620);
IkReal x693=(gclwh10_5*x513);
IkReal x694=(gclwh14_9*x576);
IkReal x695=((0.002048383)*x553);
IkReal x696=(gclwh8_10*x594);
IkReal x697=((0.016129)*x602);
IkReal x698=((0.016129)*x577);
IkReal x699=(gclwh6_10*x633);
IkReal x700=((0.254)*x511);
IkReal x701=((0.002048383)*x616);
IkReal x702=(gclwh14_10*x596);
IkReal x703=((0.002048383)*x508);
IkReal x704=((0.254)*x536);
IkReal x705=((0.016129)*x555);
IkReal x706=((0.002048383)*x630);
IkReal x707=((0.254)*x557);
IkReal x708=(gclwh15_11*x576);
IkReal x709=((0.254)*x589);
IkReal x710=(gclwh15_8*x596);
IkReal x711=((0.016129)*x606);
IkReal x712=((0.003032252)*x615);
IkReal x713=(gclwh9_7*x600);
IkReal x714=((0.003032252)*x519);
IkReal x715=(gclwh11_7*x513);
IkReal x716=(gclwh15_15*x575);
IkReal x717=(gclwh7_7*x580);
IkReal x718=((2.0)*x494);
IkReal x719=(r21*x495);
IkReal x720=((1.0)*x495);
IkReal x721=(x507*x543);
IkReal x722=(x501*x564);
IkReal x723=(x503*x595);
IkReal x724=((0.752)*gclwh5_15*x506);
IkReal x725=(x518*x607);
IkReal x726=(x514*x560);
IkReal x727=(x514*x574);
IkReal x728=(x518*x632);
IkReal x729=(x506*x617);
IkReal x730=(x503*x515);
IkReal x731=(x501*x587);
IkReal x732=(x543*x570);
IkReal x733=((0.376)*gclwh10_5*x506);
IkReal x734=((0.188)*gclwh8_5*x501);
IkReal x735=((0.376)*gclwh6_5*x503);
IkReal x736=((0.188)*gclwh6_5*x514);
IkReal x737=(gclwh10_5*r22*x541);
IkReal x738=((0.376)*gclwh8_5*x518);
IkReal x739=(x538*x597);
IkReal x740=(x503*x504);
IkReal x741=(x509*x510);
IkReal x742=(x517*x538);
IkReal x743=(x506*x626);
IkReal x744=(x510*x579);
IkReal x745=(gclwh12_2*rxp1_2*x496);
IkReal x746=(x509*x525);
IkReal x747=(x525*x579);
IkReal x748=(gclwh14_2*rxp0_2*x496);
IkReal x749=(x518*x539);
IkReal x750=(gclwh8_2*r20*x525);
IkReal x751=(x538*x636);
IkReal x752=(x538*x559);
IkReal x753=((2.0)*gclwh11_8*x506);
IkReal x754=(x525*x546);
IkReal x755=(x503*x567);
IkReal x756=(x510*x546);
IkReal x757=(x498*x538);
IkReal x758=(gclwh13_0*rxp1_2*x496);
IkReal x759=(x510*x535);
IkReal x760=(x525*x535);
IkReal x761=(x496*x588);
IkReal x762=(x496*x547);
IkReal x763=(gclwh9_0*r20*x525);
IkReal x764=(x518*x583);
IkReal x765=(x538*x634);
IkReal x766=((0.376)*gclwh7_7*x503);
IkReal x767=((0.376)*gclwh11_7*x506);
IkReal x768=((0.188)*gclwh9_7*x501);
IkReal x769=((0.376)*gclwh9_7*x518);
IkReal x770=(gclwh11_7*r22*x541);
IkReal x771=((0.188)*gclwh7_7*x514);
IkReal x772=(x501*x592);
IkReal x773=(x543*x544);
IkReal x774=(x503*x605);
IkReal x775=(x543*x637);
IkReal x776=(x501*x622);
IkReal x777=(x503*x582);
IkReal x778=(x506*x571);
IkReal x779=(x514*x603);
IkReal x780=(x518*x549);
IkReal x781=((0.188)*gclwh14_14*x501);
IkReal x782=(x541*x621);
IkReal x783=(x503*x603);
IkReal x784=(x518*x622);
IkReal x785=((0.188)*gclwh12_14*x514);
IkReal x786=(x506*x637);
IkReal x787=((0.127)*gclwh14_9*x501);
IkReal x788=(gclwh14_2*pz*x501);
IkReal x789=(gclwh12_3*x719);
IkReal x790=(x518*x592);
IkReal x791=(gclwh12_9*npy*x496);
IkReal x792=(gclwh1_2*r20*x525);
IkReal x793=(x522*x525);
IkReal x794=(gclwh3_3*x719);
IkReal x795=(x495*x565);
IkReal x796=(x496*x578);
IkReal x797=((0.127)*gclwh4_9*x543);
IkReal x798=(gclwh6_2*rxp1_2*x496);
IkReal x799=(x525*x635);
IkReal x800=(x506*x544);
IkReal x801=(x503*x625);
IkReal x802=(gclwh14_9*npx*x496);
IkReal x803=(x525*x550);
IkReal x804=(gclwh4_9*npz*x496);
IkReal x805=((0.127)*gclwh12_9*x514);
IkReal x806=(x496*x598);
IkReal x807=(gclwh15_0*pz*x501);
IkReal x808=(gclwh13_1*x719);
IkReal x809=(x496*x551);
IkReal x810=(x496*x568);
IkReal x811=(x510*x569);
IkReal x812=(x510*x562);
IkReal x813=(x525*x569);
IkReal x814=(x500*x510);
IkReal x815=(gclwh5_11*npz*x496);
IkReal x816=(x525*x611);
IkReal x817=(x506*x570);
IkReal x818=(gclwh15_11*npx*x496);
IkReal x819=((0.127)*pp*x508);
IkReal x820=(x518*x587);
IkReal x821=(x503*x574);
IkReal x822=(x525*x562);
IkReal x823=(x500*x525);
IkReal x824=(x525*x610);
IkReal x825=((0.127)*gclwh5_11*x543);
IkReal x826=(gclwh13_11*npy*x496);
IkReal x827=(x496*x516);
IkReal x828=((0.127)*gclwh15_11*x501);
IkReal x829=(x506*x507);
IkReal x830=(x518*x564);
IkReal x831=((0.188)*gclwh13_15*x514);
IkReal x832=(x503*x560);
IkReal x833=((0.188)*gclwh15_15*x501);
IkReal x834=(x519*x541);
IkReal x835=(r20*x720);
IkReal x836=(gclwh8_2*x494*x612);
IkReal x837=(gclwh6_2*npy*x718);
IkReal x838=(gclwh8_2*x501*x573);
IkReal x839=(gclwh10_2*npz*x718);
IkReal x840=(gclwh9_0*x494*x612);
IkReal x841=(gclwh9_0*x501*x573);
IkReal x842=(gclwh11_0*npz*x718);
IkReal x843=(gclwh7_0*npy*x718);
IkReal x844=(gclwh12_2*npy*x718);
IkReal x845=(gclwh3_2*npy*x718);
IkReal x846=(gclwh4_3*x506*x556);
IkReal x847=(gclwh1_2*x494*x612);
IkReal x848=(gclwh14_3*x510*x612);
IkReal x849=((1.0)*x510*x550);
IkReal x850=(gclwh1_2*x501*x573);
IkReal x851=(gclwh3_3*x503*x556);
IkReal x852=(gclwh1_3*x510*x612);
IkReal x853=(gclwh3_2*x510*x566);
IkReal x854=(x609*x720);
IkReal x855=(gclwh12_3*x503*x556);
IkReal x856=(gclwh14_2*x494*x612);
IkReal x857=(gclwh14_3*x835);
IkReal x858=(gclwh2_1*x503*x556);
IkReal x859=(gclwh0_1*x510*x612);
IkReal x860=(gclwh13_0*npy*x718);
IkReal x861=(gclwh5_1*x506*x556);
IkReal x862=(gclwh15_1*x510*x612);
IkReal x863=(gclwh5_0*npz*x718);
IkReal x864=(gclwh0_0*x494*x612);
IkReal x865=(gclwh2_0*npy*x718);
IkReal x866=(gclwh0_1*x835);
IkReal x867=(gclwh13_1*x503*x556);
IkReal x868=(gclwh2_1*x495*x566);
IkReal x869=(gclwh15_1*x835);
IkReal x870=(gclwh15_0*x494*x612);
IkReal x871=(x499*x720);
IkReal x872=(gclwh13_0*x510*x566);
IkReal x873=(x691+x693);
IkReal x874=(x655+x656);
IkReal x875=(x715+x717);
IkReal x876=(x676+x677);
IkReal x877=(x661+x662+x664+x749);
IkReal x878=(x672+x673+x671+x764);
IkReal x879=(x696+x697+x790+x800);
IkReal x880=(x704+x705+x817+x820);
IkReal x881=(x692+x786+x784+x785);
IkReal x882=(x687+x779+x778+x780);
IkReal x883=(x651+x735+x734+x733);
IkReal x884=(x644+x724+x725+x726);
IkReal x885=(x712+x829+x830+x831);
IkReal x886=(x675+x768+x766+x767);
IkReal x887=(x698+x699+x702+x700+x801);
IkReal x888=(x711+x710+x709+x707+x821);
IkReal x889=(x669+x668+x667+x755+x753);
IkReal x890=(x657+x658+x659+x743+x740);
IkReal x891=(((x518*x591))+(((0.032258)*x602))+((gclwh8_10*x614))+((x514*x625))+((x506*x526)));
IkReal x892=(x686+x685+x777+x776+x775);
IkReal x893=(x653+x654+x737+x736+x738);
IkReal x894=(x714+x716+x834+x832+x833);
IkReal x895=(x689+x688+x782+x783+x781);
IkReal x896=(x646+x645+x727+x728+x729);
IkReal x897=(x678+x679+x771+x770+x769);
IkReal x898=(x643+x642+x721+x722+x723);
IkReal x899=(x647+x649+x648+x650+x732+x731+x730);
IkReal x900=(x683+x682+x681+x684+x773+x772+x774);
IkReal x901=(x663+x665+x751+x750+x748+x837+x838+x839);
IkReal x902=(x674+x765+x761+x762+x763+x841+x843+x842);
IkReal x903=(x660+x739+x746+x747+x744+x745+x742+x741+x836);
IkReal x904=(x666+x670+x754+x757+x756+x752+x759+x758+x760+x840);
IkReal x905=(x496+x701+x852+x853+x850+x851+x856+x857+x854+x855+x849+x805+x804+x806+x803+x802);
IkReal x906=(x496+x703+x858+x859+x862+x861+x860+x818+x819+x816+x814+x815+x812+x813+x810+x811+x809+x808+x807);
IkReal x907=(x694+x695+x791+x793+x792+x795+x794+x797+x796+x799+x798+x787+x788+x789+x845+x844+x847+x846+x848);
IkReal x908=(x708+x706+x869+x868+x867+x866+x865+x864+x863+x870+x871+x872+x828+x823+x822+x827+x826+x825+x824);
op[38]=(((x514*x582))+(((-0.012129008)*x520))+(((0.575056)*x584))+(((-1.504)*gclwh12_14*x503))+(((-1.0)*gclwh8_12*x593))+(((1.504)*gclwh4_14*x506))+(((-1.0)*x501*x549))+((gclwh6_12*x581))+(((-0.012129008)*x621))+(((-1.0)*x543*x571))+(((0.012129008)*x620))+(((1.504)*gclwh14_14*x518)));
op[39]=((0.050996)+(((0.064516)*x577))+((gclwh14_10*x631))+(((-1.016)*gclwh8_10*rxp0_2))+(((1.016)*gclwh6_10*rxp1_2))+(((8.0)*gclwh12_10*x503))+((x526*x543))+(((-0.064516)*x602))+(((-1.0)*x514*x605))+(((-8.0)*gclwh14_10*x518))+((x501*x591))+(((-8.0)*gclwh4_10*x506))+(((1.016)*x511)));
op[40]=((-0.067326)+(((-1.0)*x891))+x900);
op[41]=((((-0.020828)*x598))+(((0.001322578)*x522))+(((0.082)*gclwh14_2*x501))+(((-0.082)*gclwh12_2*x514))+(((0.164)*gclwh12_2*x503))+(((-0.001322578)*x550))+(((0.164)*gclwh3_2*x503))+(((-1.0)*x882))+((gclwh6_2*x540))+((gclwh1_2*x531))+(((0.020828)*x578))+(((-0.082)*gclwh1_2*x501))+x892+(((-0.164)*gclwh14_2*x518))+(((-0.082)*gclwh3_2*x514))+(((0.001322578)*x635))+(((0.164)*gclwh1_2*x518)));
op[42]=((((4.692)*gclwh13_0*x503))+(((0.595884)*x551))+(((0.037838634)*x569))+(((2.346)*gclwh15_0*x501))+(((-0.037838634)*x610))+(((-0.037838634)*x562))+(((-1.0)*x898))+(((2.346)*gclwh5_0*x543))+(((0.037838634)*x611))+(((2.346)*pp*x500))+(((-0.595884)*x516))+(((-2.346)*gclwh13_0*x514))+(((-4.692)*gclwh2_0*x503))+(((-0.037838634)*x500))+(((0.595884)*x568))+(((-4.692)*gclwh0_0*x518))+(((-4.692)*gclwh5_0*x506))+x884+(((2.346)*gclwh2_0*x514))+(((-4.692)*gclwh15_0*x518)));
op[43]=((2.68117)+(((-1.0)*x896))+x899);
op[44]=((0.050996)+((x543*x617))+(((-1.0)*x514*x515))+(((0.064516)*x606))+((x501*x632))+((gclwh15_8*x631))+(((-8.0)*gclwh15_8*x518))+(((-8.0)*gclwh5_8*x506))+(((1.016)*x589))+(((8.0)*gclwh13_8*x503))+(((1.016)*x557))+(((-1.016)*x536))+(((-0.064516)*x555)));
op[45]=(((x501*x607))+(((1.504)*gclwh13_15*x503))+(((0.752)*pp*x519))+(((0.575056)*x554))+(((-0.012129008)*x615))+(((-1.504)*gclwh5_15*x506))+(((-1.0)*gclwh9_13*x593))+(((0.012129008)*x519))+(((-1.0)*x514*x595))+((gclwh7_13*x581))+(((-1.504)*gclwh15_15*x518))+(((0.012129008)*x627)));
op[46]=((((-0.164)*gclwh5_0*x506))+((gclwh15_0*x531))+(((-0.001322578)*x500))+(((-0.020828)*x516))+(((-0.164)*gclwh0_0*x518))+(((0.082)*gclwh15_0*x501))+(((0.082)*gclwh2_0*x514))+(((-1.0)*x884))+(((0.082)*pp*x500))+(((-0.164)*gclwh2_0*x503))+((gclwh7_0*x540))+(((0.020828)*x551))+(((-0.082)*gclwh13_0*x514))+(((0.164)*gclwh13_0*x503))+(((0.001322578)*x569))+(((0.082)*gclwh5_0*x543))+(((-0.164)*gclwh15_0*x518))+x898+(((-0.001322578)*x610))+(((-0.001322578)*x562)));
op[47]=((0.067326)+(((-1.0)*x899))+x896);
op[48]=((((-2.346)*gclwh10_12*x506))+(((1.173)*gclwh10_12*x543))+(((-1.0)*x893))+(((2.346)*gclwh8_12*x518))+(((1.173)*gclwh6_12*x514))+(((-1.0)*x652))+(((-1.173)*gclwh8_12*x501))+(((-2.346)*gclwh6_12*x503))+(((0.297942)*x534))+(((-1.0)*gclwh12_9*x561))+((gclwh10_12*x572))+x874+x883+(((-1.0)*gclwh8_12*x608))+((gclwh6_12*x623))+((gclwh4_9*x533)));
op[49]=((((-1.0)*gclwh8_10*x501))+(((-0.354366576)*x517))+((gclwh6_10*x514))+(((-1.0)*x901))+(((-1.0)*x890))+((gclwh10_10*x543))+(((-0.354366576)*x597))+x877+x903+(((0.354366576)*x636)));
op[50]=((0.425632)+(((-4.0)*gclwh6_10*x503))+((gclwh6_10*x640))+(((-0.508)*x618))+((x504*x514))+(((4.0)*gclwh8_10*x518))+(((-1.0)*gclwh14_10*x614))+(((-1.0)*x501*x539))+((x543*x626))+(((0.032258)*x552))+((gclwh12_10*x619))+(((-4.0)*gclwh10_10*x506))+(((-1.0)*gclwh8_10*x512)));
op[51]=((((-0.095504)*x542))+(((2.264)*gclwh10_2*x506))+(((-1.0)*gclwh4_14*x523))+(((1.132)*gclwh8_2*x501))+((gclwh12_9*x558))+(((-0.308356)*x534))+((gclwh12_14*x545))+(((-1.0)*x502*x509))+(((2.264)*gclwh6_2*x503))+(((-0.308356)*x624))+((gclwh14_2*x548))+(((-0.018258028)*x579))+(((-2.264)*gclwh8_2*x518))+((gclwh8_2*x529))+(((-1.0)*x502*x579))+(((-1.0)*gclwh12_2*x537))+(((-0.018258028)*x509)));
op[52]=(((gclwh6_12*x590))+((gclwh12_9*x528))+((gclwh10_12*x530))+(((-0.082)*gclwh6_12*x503))+(((-0.010414)*x624))+(((-0.041)*gclwh8_12*x501))+(((0.041)*gclwh10_12*x543))+(((-1.0)*x893))+(((0.041)*gclwh6_12*x514))+(((-0.082)*gclwh10_12*x506))+(((0.082)*gclwh8_12*x518))+(((-1.0)*gclwh8_12*x586))+x652+x883+(((-1.0)*gclwh14_9*x527))+(((-1.0)*x874)));
op[53]=((((-1.0)*x901))+((gclwh8_10*x501))+((gclwh12_3*x604))+(((-0.005307584)*x597))+(((-0.005307584)*x517))+(((-1.0)*gclwh10_10*x543))+x890+(((-1.0)*gclwh6_10*x514))+x903+(((-1.0)*x877)));
op[54]=(((gclwh7_8*x514))+((pp*x532))+(((-1.0)*x902))+(((-1.0)*x889))+(((-1.0)*gclwh9_8*x501))+(((-0.354366576)*x498))+x878+x904+(((0.354366576)*x634))+(((-0.354366576)*x559)));
op[55]=((((-1.0)*gclwh5_11*x533))+(((-2.346)*gclwh11_13*x506))+(((1.173)*gclwh7_13*x514))+(((-1.0)*gclwh9_13*x608))+((gclwh13_11*x561))+(((-1.0)*x897))+(((-0.297942)*x563))+((gclwh11_13*x572))+(((1.173)*gclwh11_13*x543))+x680+(((2.346)*gclwh9_13*x518))+(((-2.346)*gclwh7_13*x503))+x886+((gclwh7_13*x623))+(((-1.173)*gclwh9_13*x501))+(((-1.0)*x876)));
op[56]=((((-2.264)*gclwh9_0*x518))+(((-1.0)*gclwh5_15*x523))+(((1.132)*gclwh9_0*x501))+(((-0.018258028)*x535))+(((-0.018258028)*x546))+(((-1.0)*x502*x535))+(((-1.0)*x502*x546))+((gclwh9_0*x529))+(((-0.308356)*x585))+((gclwh13_15*x545))+((gclwh13_11*x558))+(((-0.095504)*gclwh15_15*rxp0_2))+(((0.287528)*x547))+(((0.287528)*x588))+(((-1.0)*gclwh13_0*x537))+(((-0.308356)*x563))+(((2.264)*gclwh7_0*x503))+(((2.264)*gclwh11_0*x506)));
op[57]=((0.425632)+(((4.0)*gclwh11_8*x506))+((gclwh15_8*x614))+(((-1.0)*x532*x556))+((x501*x583))+(((-1.0)*x514*x567))+(((-1.0)*gclwh7_8*x640))+(((0.508)*x641))+((gclwh9_8*x512))+(((-0.032258)*x532))+(((4.0)*gclwh7_8*x503))+(((-4.0)*gclwh9_8*x518))+(((-1.0)*gclwh13_8*x619)));
op[58]=(((gclwh9_8*x501))+(((-1.0)*pp*x532))+(((-1.0)*x902))+(((-0.005307584)*x498))+((gclwh13_1*x604))+x889+x904+(((-0.005307584)*x559))+(((-1.0)*gclwh7_8*x514))+(((-1.0)*x878)));
op[59]=((((0.041)*gclwh11_13*x543))+(((0.082)*gclwh9_13*x518))+((gclwh7_13*x590))+(((-1.0)*x680))+(((-1.0)*x897))+(((0.010414)*x585))+(((0.041)*gclwh7_13*x514))+(((-0.082)*gclwh7_13*x503))+((gclwh11_13*x530))+(((-1.0)*gclwh13_11*x528))+(((-1.0)*gclwh9_13*x586))+(((-0.041)*gclwh9_13*x501))+x876+x886+(((-0.082)*gclwh11_13*x506))+((gclwh15_11*x527)));
op[60]=((((0.018919317)*x616))+((gclwh10_12*x533))+(((2.346)*gclwh14_9*x518))+(((2.346)*gclwh4_9*x506))+(((1.173)*gclwh12_9*x514))+(((-1.0)*x895))+((gclwh6_12*x561))+(((-1.0)*gclwh8_12*x639))+x690+(((-2.346)*gclwh12_9*x503))+x881+(((-1.173)*gclwh14_9*x501))+(((-1.0)*gclwh14_9*x608))+(((-1.173)*gclwh4_9*x543))+(((-0.018919317)*x553))+(((-1.0)*x873)));
op[61]=((-1.411273)+(((-1.0)*gclwh12_3*x497))+((gclwh14_10*x501))+(((1.379015)*gclwh4_3*x543))+(((1.379015)*gclwh14_3*x501))+(((-1.411273)*gclwh1_3*x501))+(((-1.0)*x905))+(((2.790288)*gclwh12_3*x503))+(((2.790288)*gclwh1_3*x518))+(((-1.411273)*gclwh3_3*x514))+(((-1.0)*gclwh12_10*x514))+((gclwh1_3*x505))+(((0.022502277576)*x609))+x887+((gclwh4_10*x543))+x907+(((-2.790288)*gclwh4_3*x506))+(((2.790288)*gclwh3_3*x503))+((gclwh3_3*x497))+(((-2.790288)*gclwh14_3*x518))+(((-1.379015)*gclwh12_3*x514))+((gclwh14_3*x505))+(((-1.0)*x879)));
op[62]=((-0.166874)+(((-1.0)*x891))+x900);
op[63]=((((1.132)*gclwh1_2*x501))+(((-1.0)*gclwh6_2*x537))+(((-2.428)*gclwh14_9*x518))+(((-2.264)*gclwh3_2*x503))+(((-1.0)*gclwh1_2*x529))+(((-2.428)*gclwh4_9*x506))+(((2.264)*gclwh14_2*x518))+(((-2.264)*gclwh12_2*x503))+(((-0.019580606)*x616))+(((-1.0)*x882))+((x502*x550))+(((-0.018258028)*x522))+(((1.214)*gclwh14_9*x501))+((x502*x635))+((gclwh14_9*x629))+(((-0.287528)*x578))+(((2.428)*gclwh12_9*x503))+(((0.019580606)*x553))+((gclwh8_2*x548))+(((-0.018258028)*x635))+x892+(((-1.132)*gclwh14_2*x501))+(((-1.214)*gclwh12_9*x514))+(((1.214)*gclwh4_9*x543))+(((0.018258028)*x550))+(((-2.264)*gclwh1_2*x518)));
op[64]=((((0.041)*gclwh14_9*x501))+((gclwh14_9*x586))+(((0.010414)*x584))+(((-1.0)*x881))+(((0.082)*gclwh12_9*x503))+(((-0.082)*gclwh14_9*x518))+(((-0.082)*gclwh4_9*x506))+(((-0.041)*gclwh12_9*x514))+x690+(((-1.0)*gclwh8_12*x527))+(((-1.0)*gclwh12_9*x590))+x895+(((0.041)*gclwh4_9*x543))+((gclwh6_12*x528))+(((-1.0)*x873))+((gclwh4_9*x530)));
op[65]=((0.037025)+(((-0.037025)*gclwh3_3*x514))+(((0.004767)*gclwh14_3*x501))+(((0.041792)*gclwh3_3*x503))+(((-0.041792)*gclwh4_3*x506))+(((-1.0)*x905))+((gclwh14_3*x601))+(((0.041792)*gclwh12_3*x503))+(((0.000337031584)*x609))+(((-1.0)*x887))+(((-1.0)*gclwh14_10*x501))+(((-0.041792)*gclwh14_3*x518))+(((-0.037025)*gclwh1_3*x501))+((x521*x609))+(((-0.004767)*gclwh12_3*x514))+(((0.000337031584)*x565))+(((-1.0)*gclwh4_10*x543))+x879+((gclwh12_10*x514))+(((-1.0)*gclwh12_3*x524))+x907+(((0.041792)*gclwh1_3*x518))+((gclwh3_3*x524)));
op[66]=((-1.411273)+(((-1.0)*gclwh13_1*x497))+((gclwh15_1*x505))+(((1.379015)*pp*x499))+(((-1.379015)*gclwh13_1*x514))+(((-2.790288)*gclwh2_1*x503))+(((-1.0)*gclwh13_8*x514))+(((-2.790288)*gclwh15_1*x518))+(((-1.0)*x908))+(((1.379015)*gclwh15_1*x501))+(((2.790288)*gclwh13_1*x503))+(((1.411273)*gclwh2_1*x514))+(((0.022502277576)*x499))+((gclwh15_8*x501))+(((-1.0)*gclwh2_1*x497))+(((-1.0)*x880))+(((-1.0)*gclwh0_1*x505))+(((-2.790288)*gclwh5_1*x506))+(((-2.790288)*gclwh0_1*x518))+(((1.411273)*gclwh0_1*x501))+x888+((gclwh5_8*x543))+x906);
op[67]=(((gclwh5_11*x572))+(((1.173)*gclwh15_11*x501))+(((1.173)*gclwh5_11*x543))+((gclwh7_13*x561))+(((-1.0)*x885))+(((-2.346)*gclwh15_11*x518))+((gclwh11_13*x533))+(((-0.018919317)*x508))+(((-2.346)*gclwh5_11*x506))+(((2.346)*gclwh13_11*x503))+x713+(((-1.173)*pp*x508))+x894+(((-1.0)*gclwh9_13*x639))+((gclwh15_11*x608))+(((-1.0)*x875)));
op[68]=((((0.019580606)*x630))+(((0.287528)*x516))+(((1.214)*gclwh15_11*x501))+(((-1.0)*gclwh7_0*x537))+(((2.264)*gclwh2_0*x503))+(((-2.428)*gclwh15_11*x518))+(((-0.287528)*x551))+(((-1.0)*x502*x569))+(((-1.0)*x502*x562))+((gclwh15_11*x629))+(((-2.428)*gclwh5_11*x506))+((x502*x610))+(((-1.0)*gclwh15_0*x529))+(((-1.0)*x884))+(((-1.214)*pp*x508))+(((2.264)*gclwh5_0*x506))+(((0.018258028)*x562))+(((-0.018258028)*x569))+(((0.018258028)*x500))+(((2.264)*gclwh0_0*x518))+(((0.018258028)*x610))+x898+(((2.428)*gclwh13_11*x503))+(((-2.264)*gclwh13_0*x503))+(((2.264)*gclwh15_0*x518))+(((-0.019580606)*x508))+(((-1.132)*gclwh15_0*x501))+(((-1.0)*x500*x502))+(((1.214)*gclwh5_11*x543)));
op[69]=((0.166874)+(((-1.0)*x899))+x896);
op[70]=((0.037025)+(((-0.041792)*gclwh5_1*x506))+(((-1.0)*gclwh5_8*x543))+(((0.037025)*gclwh2_1*x514))+(((-0.041792)*gclwh2_1*x503))+(((-1.0)*x908))+(((-0.041792)*gclwh15_1*x518))+(((-0.004767)*gclwh13_1*x514))+(((0.037025)*gclwh0_1*x501))+(((-1.0)*gclwh15_8*x501))+(((-1.0)*x888))+(((-1.0)*gclwh2_1*x524))+((gclwh13_8*x514))+(((0.004767)*gclwh15_1*x501))+(((-1.0)*gclwh0_1*x601))+((x499*x521))+(((-0.041792)*gclwh0_1*x518))+x880+(((0.041792)*gclwh13_1*x503))+(((-1.0)*gclwh13_1*x524))+((gclwh15_1*x601))+x906+(((0.000337031584)*x499)));
op[71]=((((0.082)*gclwh5_11*x506))+(((-1.0)*gclwh5_11*x530))+(((0.010414)*x554))+(((-1.0)*gclwh15_11*x586))+(((0.041)*pp*x508))+(((-1.0)*x894))+(((0.082)*gclwh15_11*x518))+(((-0.082)*gclwh13_11*x503))+(((-0.041)*gclwh5_11*x543))+(((-1.0)*gclwh9_13*x527))+x713+x885+((gclwh7_13*x528))+(((0.000661289)*x508))+(((-0.041)*gclwh15_11*x501))+(((-1.0)*x875)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x909=htj1*htj1;
CheckValue<IkReal> x910=IKPowWithIntegerCheck(((1.0)+x909),-1);
if(!x910.valid){
continue;
}
cj1array[numsolutions]=((x910.value)*(((1.0)+(((-1.0)*x909)))));
CheckValue<IkReal> x911=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x911.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x911.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x912=htj2*htj2;
CheckValue<IkReal> x913=IKPowWithIntegerCheck(((1.0)+x912),-1);
if(!x913.valid){
continue;
}
cj2array[numsolutions]=((x913.value)*(((1.0)+(((-1.0)*x912)))));
CheckValue<IkReal> x914=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x914.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x914.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x915=htj3*htj3;
CheckValue<IkReal> x916=IKPowWithIntegerCheck(((1.0)+x915),-1);
if(!x916.valid){
continue;
}
cj3array[numsolutions]=((x916.value)*(((1.0)+(((-1.0)*x915)))));
CheckValue<IkReal> x917=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x917.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x917.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x918=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x918);
rxp1_0=(pz*r11);
rxp1_1=(r01*x918);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x919=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x919);
rxp1_0=(pz*r11);
rxp1_1=(r01*x919);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x920=IKPowWithIntegerCheck(cj3,-1);
if(!x920.valid){
continue;
}
CheckValue<IkReal> x921=IKPowWithIntegerCheck(r22,-1);
if(!x921.valid){
continue;
}
sj4array[0]=((x920.value)*(x921.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x922=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x922);
rxp1_0=(pz*r11);
rxp1_1=(r01*x922);
IkReal x923=(r10*sj3);
IkReal x924=((4.0)*cj4);
IkReal x925=(r11*sj3);
IkReal x926=((16.0)*cj4);
IkReal x927=(sj1*sj2);
IkReal x928=(r01*sj4);
IkReal x929=(cj3*r11);
IkReal x930=(cj1*sj2);
IkReal x931=((8.0)*cj2);
IkReal x932=((8.0)*cj4);
IkReal x933=((4.0)*sj4);
IkReal x934=(r12*sj3);
IkReal x935=(cj2*sj1);
IkReal x936=(cj1*cj2);
IkReal x937=(cj3*r12);
IkReal x938=((12.0)*sj4);
IkReal x939=(cj3*r10);
IkReal x940=((4.0)*x925);
IkReal x941=((4.0)*x929);
IkReal x942=((12.0)*cj4*r02);
IkReal x943=(x924*x939);
IkReal x944=(x937*x938);
IkReal x945=(x923*x924);
IkReal x946=(x934*x938);
IkReal x947=(r00*x927*x933);
IkReal x948=(x936*x942);
IkReal x949=(r00*x933*x936);
IkReal x950=(x927*x942);
IkReal x951=(r00*x930*x933);
IkReal x952=(r00*x933*x935);
IkReal x953=(x935*x942);
IkReal x954=(x930*x942);
IkReal x955=(x949+x940);
IkReal x956=(x948+x944);
IkReal x957=(x943+x947);
IkReal x958=(x954+x953);
IkReal x959=(x952+x951+x941+x945);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x957))+(((-1.0)*x950))+x956+x955)))))+(((0.5)*(IKabs(((((-1.0)*x925*x926))+(((16.0)*x939))+(((-16.0)*x928*x930))+(((-16.0)*x928*x935)))))))+(IKabs(((((-8.0)*x923))+((cj1*x928*x931))+(((-1.0)*x929*x932))+(((-8.0)*x927*x928)))))+(((0.5)*(IKabs(((((-1.0)*x958))+x959+x946)))))+(((0.5)*(IKabs(((((16.0)*x928*x936))+(((-1.0)*x926*x929))+(((-16.0)*x923))+(((-16.0)*x927*x928)))))))+(((0.5)*(IKabs(((((-1.0)*x955))+(((-1.0)*x950))+x957+x956)))))+(((0.5)*(IKabs(((((-1.0)*r02*x924*x930))+(((-1.0)*r02*x924*x935))+(((-1.0)*x959))+((x933*x934)))))))+(IKabs(((((-1.0)*x925*x932))+(((8.0)*x939))+(((-8.0)*x928*x930))+(((-1.0)*sj1*x928*x931)))))+(((0.5)*(IKabs((((r02*x924*x936))+(((-1.0)*r02*x924*x927))+(((-1.0)*x957))+x955+((x933*x937)))))))+(((0.5)*(IKabs(((((-1.0)*x958))+(((-1.0)*x959))+x946))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x960=(r10*sj3);
IkReal x961=(r01*sj4);
IkReal x962=(cj1*cj2);
IkReal x963=(cj3*cj4);
IkReal x964=(sj1*sj2);
IkReal x965=(cj4*r02);
IkReal x966=((4.0)*r11*sj3);
IkReal x967=(cj3*r12*sj4);
IkReal x968=((4.0)*r00*sj4);
IkReal x969=((4.0)*r10*x963);
IkReal x970=((12.0)*x967);
IkReal x971=((4.0)*x967);
IkReal x972=(x962*x968);
IkReal x973=(x964*x968);
IkReal x974=((12.0)*x962*x965);
IkReal x975=((12.0)*x964*x965);
IkReal x976=((4.0)*x962*x965);
IkReal x977=((4.0)*x964*x965);
IkReal x978=(x972+x966);
IkReal x979=(x971+x976);
IkReal x980=(x973+x969);
IkReal x981=(x970+x974);
IkReal x982=((((-8.0)*x960))+(((-8.0)*r11*x963))+(((-8.0)*x961*x964))+(((8.0)*x961*x962)));
op[0]=((((-1.0)*x980))+x979+x978+(((-1.0)*x977)));
op[1]=x982;
op[2]=((((-1.0)*x980))+x981+x978+(((-1.0)*x975)));
op[3]=((((16.0)*x961*x962))+(((-16.0)*r11*x963))+(((-16.0)*x960))+(((-16.0)*x961*x964)));
op[4]=(x980+x981+(((-1.0)*x975))+(((-1.0)*x978)));
op[5]=x982;
op[6]=(x980+x979+(((-1.0)*x978))+(((-1.0)*x977)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x983=(cj4*sj3);
IkReal x984=(cj1*sj2);
IkReal x985=(r01*sj4);
IkReal x986=((4.0)*sj4);
IkReal x987=(r12*sj3);
IkReal x988=(cj4*r02);
IkReal x989=(cj2*sj1);
IkReal x990=(cj3*r10);
IkReal x991=((4.0)*cj3*r11);
IkReal x992=((4.0)*r10*x983);
IkReal x993=(x986*x987);
IkReal x994=((12.0)*sj4*x987);
IkReal x995=(r00*x984*x986);
IkReal x996=(r00*x986*x989);
IkReal x997=((12.0)*x988*x989);
IkReal x998=((12.0)*x984*x988);
IkReal x999=((4.0)*x988*x989);
IkReal x1000=((4.0)*x984*x988);
IkReal x1001=(x1000+x999);
IkReal x1002=(x997+x998);
IkReal x1003=((((8.0)*x990))+(((-8.0)*x984*x985))+(((-8.0)*x985*x989))+(((-8.0)*r11*x983)));
IkReal x1004=(x992+x991+x996+x995);
j5evalpoly[0]=(((x1003*(htj5*htj5*htj5*htj5*htj5)))+x1004+(((-1.0)*x1001))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1002))+(((-1.0)*x1004))+x994))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1001))+(((-1.0)*x1004))+x993))))+(((htj5*htj5*htj5)*(((((16.0)*x990))+(((-16.0)*r11*x983))+(((-16.0)*x985*x989))+(((-16.0)*x984*x985))))))+(((htj5*htj5)*((x1004+(((-1.0)*x1002))+x994))))+((htj5*x1003))+x993);
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1005=(cj5*sj4);
IkReal x1006=(sj4*sj5);
if( IKabs((((r01*x1006))+(((-1.0)*r00*x1005))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1006))+(((-1.0)*cj4*r12))+((r10*x1005)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1006))+(((-1.0)*r00*x1005))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x1006))+(((-1.0)*cj4*r12))+((r10*x1005))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1006))+(((-1.0)*r00*x1005))+((cj4*r02))), ((((-1.0)*r11*x1006))+(((-1.0)*cj4*r12))+((r10*x1005))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1007=IKcos(j0);
IkReal x1008=IKsin(j0);
IkReal x1009=((1.0)*cj3);
IkReal x1010=(r02*sj4);
IkReal x1011=(cj5*r11);
IkReal x1012=(cj4*cj5);
IkReal x1013=((1.0)*sj3);
IkReal x1014=(cj5*sj4);
IkReal x1015=(r01*sj5);
IkReal x1016=((1.0)*sj4);
IkReal x1017=(cj5*r01);
IkReal x1018=((1.0)*cj4);
IkReal x1019=((1.0)*cj2);
IkReal x1020=(cj4*sj3);
IkReal x1021=(cj3*cj4);
IkReal x1022=(r00*sj5);
IkReal x1023=((0.566)*sj2);
IkReal x1024=(r12*sj4);
IkReal x1025=(r11*sj5);
IkReal x1026=(r10*sj5);
IkReal x1027=((0.566)*cj2);
IkReal x1028=(cj1*x1007);
IkReal x1029=(cj1*x1008);
IkReal x1030=(sj1*x1007);
IkReal x1031=(sj1*x1008);
evalcond[0]=(x1008+(((-1.0)*r02*x1018))+(((-1.0)*x1015*x1016))+((r00*x1014)));
evalcond[1]=((((-1.0)*x1007))+(((-1.0)*x1016*x1025))+(((-1.0)*r12*x1018))+((r10*x1014)));
evalcond[2]=((((-0.607)*x1028))+(((-1.0)*px))+((x1023*x1030))+(((0.127)*x1022))+(((-1.0)*x1027*x1028))+(((0.127)*x1017))+(((0.188)*x1008)));
evalcond[3]=((((-0.188)*x1007))+(((-0.607)*x1029))+(((-1.0)*py))+((x1023*x1031))+(((0.127)*x1026))+(((-1.0)*x1027*x1029))+(((0.127)*x1011)));
evalcond[4]=((((-1.0)*r00*x1009*x1012))+(((-1.0)*x1009*x1010))+((x1015*x1021))+(((-1.0)*x1019*x1028))+((sj2*x1030))+((sj3*x1017))+((sj3*x1022)));
evalcond[5]=((((-1.0)*r10*x1009*x1012))+(((-1.0)*x1019*x1029))+((sj2*x1031))+(((-1.0)*x1009*x1024))+((x1021*x1025))+((sj3*x1011))+((sj3*x1026)));
evalcond[6]=((((-1.0)*r00*x1012*x1013))+((cj2*x1030))+(((-1.0)*x1010*x1013))+(((-1.0)*x1009*x1017))+((x1015*x1020))+(((-1.0)*x1009*x1022))+((sj2*x1028)));
evalcond[7]=(((cj2*x1031))+(((-1.0)*x1009*x1011))+(((-1.0)*x1009*x1026))+((x1020*x1025))+(((-1.0)*r10*x1012*x1013))+(((-1.0)*x1013*x1024))+((sj2*x1029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1032=IKPowWithIntegerCheck(r22,-1);
if(!x1032.valid){
continue;
}
CheckValue<IkReal> x1033=IKPowWithIntegerCheck(sj3,-1);
if(!x1033.valid){
continue;
}
sj4array[0]=((x1032.value)*(x1033.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1034=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1034);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1034);
IkReal x1035=(r10*sj3);
IkReal x1036=((4.0)*cj4);
IkReal x1037=(r11*sj3);
IkReal x1038=((16.0)*cj4);
IkReal x1039=(sj1*sj2);
IkReal x1040=(r01*sj4);
IkReal x1041=(cj3*r11);
IkReal x1042=(cj1*sj2);
IkReal x1043=((8.0)*cj2);
IkReal x1044=((8.0)*cj4);
IkReal x1045=((4.0)*sj4);
IkReal x1046=(r12*sj3);
IkReal x1047=(cj2*sj1);
IkReal x1048=(cj1*cj2);
IkReal x1049=(cj3*r12);
IkReal x1050=((12.0)*sj4);
IkReal x1051=(cj3*r10);
IkReal x1052=((4.0)*x1037);
IkReal x1053=((4.0)*x1041);
IkReal x1054=((12.0)*cj4*r02);
IkReal x1055=(x1036*x1051);
IkReal x1056=(x1049*x1050);
IkReal x1057=(x1035*x1036);
IkReal x1058=(x1046*x1050);
IkReal x1059=(r00*x1039*x1045);
IkReal x1060=(x1048*x1054);
IkReal x1061=(r00*x1045*x1048);
IkReal x1062=(x1039*x1054);
IkReal x1063=(r00*x1042*x1045);
IkReal x1064=(r00*x1045*x1047);
IkReal x1065=(x1047*x1054);
IkReal x1066=(x1042*x1054);
IkReal x1067=(x1052+x1061);
IkReal x1068=(x1056+x1060);
IkReal x1069=(x1055+x1059);
IkReal x1070=(x1065+x1066);
IkReal x1071=(x1053+x1057+x1063+x1064);
j5eval[0]=((((0.5)*(IKabs((x1067+(((-1.0)*r02*x1036*x1039))+((r02*x1036*x1048))+(((-1.0)*x1069))+((x1045*x1049)))))))+(((0.5)*(IKabs((x1069+x1068+(((-1.0)*x1067))+(((-1.0)*x1062)))))))+(((0.5)*(IKabs((x1058+x1071+(((-1.0)*x1070)))))))+(IKabs(((((-8.0)*x1035))+(((-1.0)*x1041*x1044))+((cj1*x1040*x1043))+(((-8.0)*x1039*x1040)))))+(((0.5)*(IKabs((x1068+x1067+(((-1.0)*x1069))+(((-1.0)*x1062)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x1036*x1042))+(((-1.0)*r02*x1036*x1047))+((x1045*x1046))+(((-1.0)*x1071)))))))+(((0.5)*(IKabs(((((-16.0)*x1035))+(((-1.0)*x1038*x1041))+(((-16.0)*x1039*x1040))+(((16.0)*x1040*x1048)))))))+(((0.5)*(IKabs((x1058+(((-1.0)*x1071))+(((-1.0)*x1070)))))))+(((0.5)*(IKabs(((((-1.0)*x1037*x1038))+(((16.0)*x1051))+(((-16.0)*x1040*x1042))+(((-16.0)*x1040*x1047)))))))+(IKabs(((((-1.0)*sj1*x1040*x1043))+(((-1.0)*x1037*x1044))+(((-8.0)*x1040*x1042))+(((8.0)*x1051))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1072=(r10*sj3);
IkReal x1073=(r01*sj4);
IkReal x1074=(cj1*cj2);
IkReal x1075=(cj3*cj4);
IkReal x1076=(sj1*sj2);
IkReal x1077=(cj4*r02);
IkReal x1078=((4.0)*r11*sj3);
IkReal x1079=(cj3*r12*sj4);
IkReal x1080=((4.0)*r00*sj4);
IkReal x1081=((4.0)*r10*x1075);
IkReal x1082=((12.0)*x1079);
IkReal x1083=((4.0)*x1079);
IkReal x1084=(x1074*x1080);
IkReal x1085=(x1076*x1080);
IkReal x1086=((12.0)*x1074*x1077);
IkReal x1087=((12.0)*x1076*x1077);
IkReal x1088=((4.0)*x1074*x1077);
IkReal x1089=((4.0)*x1076*x1077);
IkReal x1090=(x1078+x1084);
IkReal x1091=(x1083+x1088);
IkReal x1092=(x1085+x1081);
IkReal x1093=(x1086+x1082);
IkReal x1094=((((-8.0)*x1072))+(((8.0)*x1073*x1074))+(((-8.0)*x1073*x1076))+(((-8.0)*r11*x1075)));
op[0]=(x1090+x1091+(((-1.0)*x1092))+(((-1.0)*x1089)));
op[1]=x1094;
op[2]=(x1090+x1093+(((-1.0)*x1092))+(((-1.0)*x1087)));
op[3]=((((16.0)*x1073*x1074))+(((-16.0)*r11*x1075))+(((-16.0)*x1072))+(((-16.0)*x1073*x1076)));
op[4]=(x1092+x1093+(((-1.0)*x1090))+(((-1.0)*x1087)));
op[5]=x1094;
op[6]=(x1091+x1092+(((-1.0)*x1090))+(((-1.0)*x1089)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1095=(cj4*sj3);
IkReal x1096=(cj1*sj2);
IkReal x1097=(r01*sj4);
IkReal x1098=((4.0)*sj4);
IkReal x1099=(r12*sj3);
IkReal x1100=(cj4*r02);
IkReal x1101=(cj2*sj1);
IkReal x1102=(cj3*r10);
IkReal x1103=((4.0)*cj3*r11);
IkReal x1104=((4.0)*r10*x1095);
IkReal x1105=(x1098*x1099);
IkReal x1106=((12.0)*sj4*x1099);
IkReal x1107=(r00*x1096*x1098);
IkReal x1108=(r00*x1098*x1101);
IkReal x1109=((12.0)*x1100*x1101);
IkReal x1110=((12.0)*x1096*x1100);
IkReal x1111=((4.0)*x1100*x1101);
IkReal x1112=((4.0)*x1096*x1100);
IkReal x1113=(x1111+x1112);
IkReal x1114=(x1109+x1110);
IkReal x1115=((((-8.0)*x1096*x1097))+(((-8.0)*r11*x1095))+(((-8.0)*x1097*x1101))+(((8.0)*x1102)));
IkReal x1116=(x1107+x1104+x1103+x1108);
j5evalpoly[0]=((((htj5*htj5*htj5)*(((((-16.0)*x1096*x1097))+(((-16.0)*x1097*x1101))+(((16.0)*x1102))+(((-16.0)*r11*x1095))))))+x1105+x1116+(((htj5*htj5*htj5*htj5)*((x1106+(((-1.0)*x1116))+(((-1.0)*x1114))))))+(((htj5*htj5)*((x1106+x1116+(((-1.0)*x1114))))))+((x1115*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1113))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1105+(((-1.0)*x1116))+(((-1.0)*x1113))))))+((htj5*x1115)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1117=(cj5*sj4);
IkReal x1118=(sj4*sj5);
if( IKabs((((r01*x1118))+(((-1.0)*r00*x1117))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1118))+((r10*x1117))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1118))+(((-1.0)*r00*x1117))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x1118))+((r10*x1117))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1118))+(((-1.0)*r00*x1117))+((cj4*r02))), ((((-1.0)*r11*x1118))+((r10*x1117))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1119=IKcos(j0);
IkReal x1120=IKsin(j0);
IkReal x1121=((1.0)*cj3);
IkReal x1122=(r02*sj4);
IkReal x1123=(cj5*r11);
IkReal x1124=(cj4*cj5);
IkReal x1125=((1.0)*sj3);
IkReal x1126=(cj5*sj4);
IkReal x1127=(r01*sj5);
IkReal x1128=((1.0)*sj4);
IkReal x1129=(cj5*r01);
IkReal x1130=((1.0)*cj4);
IkReal x1131=((1.0)*cj2);
IkReal x1132=(cj4*sj3);
IkReal x1133=(cj3*cj4);
IkReal x1134=(r00*sj5);
IkReal x1135=((0.566)*sj2);
IkReal x1136=(r12*sj4);
IkReal x1137=(r11*sj5);
IkReal x1138=(r10*sj5);
IkReal x1139=((0.566)*cj2);
IkReal x1140=(cj1*x1119);
IkReal x1141=(cj1*x1120);
IkReal x1142=(sj1*x1119);
IkReal x1143=(sj1*x1120);
evalcond[0]=(x1120+((r00*x1126))+(((-1.0)*x1127*x1128))+(((-1.0)*r02*x1130)));
evalcond[1]=(((r10*x1126))+(((-1.0)*r12*x1130))+(((-1.0)*x1119))+(((-1.0)*x1128*x1137)));
evalcond[2]=((((0.188)*x1120))+(((0.127)*x1134))+(((0.127)*x1129))+(((-0.607)*x1140))+(((-1.0)*px))+(((-1.0)*x1139*x1140))+((x1135*x1142)));
evalcond[3]=((((0.127)*x1138))+(((-0.188)*x1119))+(((0.127)*x1123))+(((-0.607)*x1141))+(((-1.0)*py))+(((-1.0)*x1139*x1141))+((x1135*x1143)));
evalcond[4]=((((-1.0)*x1121*x1122))+((sj2*x1142))+(((-1.0)*x1131*x1140))+(((-1.0)*r00*x1121*x1124))+((sj3*x1129))+((sj3*x1134))+((x1127*x1133)));
evalcond[5]=((((-1.0)*x1121*x1136))+((sj2*x1143))+(((-1.0)*x1131*x1141))+((sj3*x1123))+((sj3*x1138))+((x1133*x1137))+(((-1.0)*r10*x1121*x1124)));
evalcond[6]=((((-1.0)*x1121*x1129))+((cj2*x1142))+(((-1.0)*x1122*x1125))+(((-1.0)*x1121*x1134))+((sj2*x1140))+(((-1.0)*r00*x1124*x1125))+((x1127*x1132)));
evalcond[7]=((((-1.0)*x1121*x1123))+((cj2*x1143))+(((-1.0)*r10*x1124*x1125))+(((-1.0)*x1121*x1138))+((sj2*x1141))+(((-1.0)*x1125*x1136))+((x1132*x1137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1144=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1144);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1144);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1145=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1145);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1145);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1146=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1146);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1146);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1147=IKPowWithIntegerCheck(r22,-1);
if(!x1147.valid){
continue;
}
sj4array[0]=((x1147.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1148=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1148);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1148);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1150 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1150.valid){
continue;
}
IkReal x1149=x1150.value;
j5array[0]=((-1.0)*x1149);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1149)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1151=(cj5*sj4);
IkReal x1152=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1151))+((r01*x1152)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1152))+((r10*x1151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1151))+((r01*x1152))))+IKsqr(((((-1.0)*r11*x1152))+((r10*x1151))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1151))+((r01*x1152))), ((((-1.0)*r11*x1152))+((r10*x1151))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1153=IKcos(j0);
IkReal x1154=IKsin(j0);
IkReal x1155=(cj5*sj4);
IkReal x1156=(cj5*r01);
IkReal x1157=(r00*sj5);
IkReal x1158=(sj1*sj2);
IkReal x1159=(cj5*r11);
IkReal x1160=(r10*sj5);
IkReal x1161=(cj1*cj2);
IkReal x1162=(cj1*x1153);
IkReal x1163=((1.0)*sj4*sj5);
IkReal x1164=((0.566)*x1154);
evalcond[0]=(((r00*x1155))+x1154+(((-1.0)*r01*x1163)));
evalcond[1]=((((-1.0)*r11*x1163))+(((-1.0)*x1153))+((r10*x1155)));
evalcond[2]=(x1157+x1156+(((-1.0)*x1153*x1161))+((x1153*x1158)));
evalcond[3]=(x1159+x1160+(((-1.0)*x1154*x1161))+((x1154*x1158)));
evalcond[4]=((((-0.566)*x1153*x1161))+(((0.188)*x1154))+(((0.566)*x1153*x1158))+(((-1.0)*px))+(((0.127)*x1156))+(((0.127)*x1157))+(((-0.607)*x1162)));
evalcond[5]=((((-1.0)*py))+(((0.127)*x1159))+(((-0.188)*x1153))+(((-0.607)*cj1*x1154))+((x1158*x1164))+(((-1.0)*x1161*x1164))+(((0.127)*x1160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1165=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1165);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1165);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1166=IKPowWithIntegerCheck(r22,-1);
if(!x1166.valid){
continue;
}
sj4array[0]=((-1.0)*(x1166.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1167=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1167);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1167);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1169 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1169.valid){
continue;
}
IkReal x1168=x1169.value;
j5array[0]=((-1.0)*x1168);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1168)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1170=(cj5*sj4);
IkReal x1171=(sj4*sj5);
if( IKabs((((r01*x1171))+(((-1.0)*r00*x1170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1170))+(((-1.0)*r11*x1171)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1171))+(((-1.0)*r00*x1170))))+IKsqr((((r10*x1170))+(((-1.0)*r11*x1171))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1171))+(((-1.0)*r00*x1170))), (((r10*x1170))+(((-1.0)*r11*x1171))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1172=IKcos(j0);
IkReal x1173=IKsin(j0);
IkReal x1174=(cj5*sj4);
IkReal x1175=((1.0)*sj5);
IkReal x1176=((0.127)*sj5);
IkReal x1177=((1.0)*cj5);
IkReal x1178=(sj1*sj2);
IkReal x1179=(cj1*cj2);
IkReal x1180=((0.127)*cj5);
IkReal x1181=(cj1*x1172);
IkReal x1182=((0.566)*x1173);
evalcond[0]=(x1173+((r00*x1174))+(((-1.0)*r01*sj4*x1175)));
evalcond[1]=(((r10*x1174))+(((-1.0)*r11*sj4*x1175))+(((-1.0)*x1172)));
evalcond[2]=((((-1.0)*x1172*x1179))+((x1172*x1178))+(((-1.0)*r01*x1177))+(((-1.0)*r00*x1175)));
evalcond[3]=(((x1173*x1178))+(((-1.0)*r11*x1177))+(((-1.0)*x1173*x1179))+(((-1.0)*r10*x1175)));
evalcond[4]=((((-0.566)*x1172*x1179))+(((-0.607)*x1181))+((r00*x1176))+((r01*x1180))+(((-1.0)*px))+(((0.566)*x1172*x1178))+(((0.188)*x1173)));
evalcond[5]=((((-0.607)*cj1*x1173))+(((-0.188)*x1172))+((x1178*x1182))+((r10*x1176))+(((-1.0)*x1179*x1182))+(((-1.0)*py))+((r11*x1180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1183=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1183);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1183);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1184=IKPowWithIntegerCheck(r22,-1);
if(!x1184.valid){
continue;
}
sj4array[0]=((x1184.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1185=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1185);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1185);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1187 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1187.valid){
continue;
}
IkReal x1186=x1187.value;
j5array[0]=((-1.0)*x1186);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1186)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1188=(cj5*sj4);
IkReal x1189=(sj4*sj5);
if( IKabs((((r01*x1189))+(((-1.0)*r00*x1188)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1188))+(((-1.0)*r11*x1189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1189))+(((-1.0)*r00*x1188))))+IKsqr((((r10*x1188))+(((-1.0)*r11*x1189))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1189))+(((-1.0)*r00*x1188))), (((r10*x1188))+(((-1.0)*r11*x1189))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1190=IKcos(j0);
IkReal x1191=IKsin(j0);
IkReal x1192=(cj5*sj4);
IkReal x1193=((1.0)*sj5);
IkReal x1194=((1.0)*cj5);
IkReal x1195=((0.127)*sj5);
IkReal x1196=((0.127)*cj5);
IkReal x1197=(cj2*sj1);
IkReal x1198=(cj1*x1190);
IkReal x1199=(cj1*x1191);
evalcond[0]=(x1191+((r00*x1192))+(((-1.0)*r01*sj4*x1193)));
evalcond[1]=(((r10*x1192))+(((-1.0)*r11*sj4*x1193))+(((-1.0)*x1190)));
evalcond[2]=((((-1.0)*r00*x1193))+((sj2*x1198))+((x1190*x1197))+(((-1.0)*r01*x1194)));
evalcond[3]=((((-1.0)*r10*x1193))+((sj2*x1199))+((x1191*x1197))+(((-1.0)*r11*x1194)));
evalcond[4]=(((r01*x1196))+((r00*x1195))+(((-0.607)*x1198))+(((-1.0)*px))+(((0.188)*x1191)));
evalcond[5]=(((r10*x1195))+(((-0.607)*x1199))+(((-1.0)*py))+((r11*x1196))+(((-0.188)*x1190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1200=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1200);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1200);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1201=IKPowWithIntegerCheck(r22,-1);
if(!x1201.valid){
continue;
}
sj4array[0]=((-1.0)*(x1201.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1202=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1202);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1202);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1204 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1204.valid){
continue;
}
IkReal x1203=x1204.value;
j5array[0]=((-1.0)*x1203);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1203)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1205=(cj5*sj4);
IkReal x1206=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1205))+((r01*x1206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1205))+(((-1.0)*r11*x1206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1205))+((r01*x1206))))+IKsqr((((r10*x1205))+(((-1.0)*r11*x1206))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1205))+((r01*x1206))), (((r10*x1205))+(((-1.0)*r11*x1206))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1207=IKcos(j0);
IkReal x1208=IKsin(j0);
IkReal x1209=(cj5*sj4);
IkReal x1210=(cj5*r01);
IkReal x1211=(r00*sj5);
IkReal x1212=(cj5*r11);
IkReal x1213=(r10*sj5);
IkReal x1214=(cj2*sj1);
IkReal x1215=(cj1*x1207);
IkReal x1216=((1.0)*sj4*sj5);
IkReal x1217=(cj1*x1208);
evalcond[0]=(x1208+(((-1.0)*r01*x1216))+((r00*x1209)));
evalcond[1]=(((r10*x1209))+(((-1.0)*x1207))+(((-1.0)*r11*x1216)));
evalcond[2]=(x1210+x1211+((x1207*x1214))+((sj2*x1215)));
evalcond[3]=(x1212+x1213+((sj2*x1217))+((x1208*x1214)));
evalcond[4]=((((0.127)*x1211))+(((0.127)*x1210))+(((-0.607)*x1215))+(((0.188)*x1208))+(((-1.0)*px)));
evalcond[5]=((((0.127)*x1213))+(((0.127)*x1212))+(((-0.607)*x1217))+(((-1.0)*py))+(((-0.188)*x1207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1218=IKPowWithIntegerCheck(cj3,-1);
if(!x1218.valid){
continue;
}
CheckValue<IkReal> x1219=IKPowWithIntegerCheck(r22,-1);
if(!x1219.valid){
continue;
}
sj4array[0]=((x1218.value)*(x1219.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1220=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1220);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1220);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1221=((4.0)*r01);
IkReal x1222=((16.0)*r00);
IkReal x1223=(cj3*sj2);
IkReal x1224=((8.0)*r00);
IkReal x1225=(cj2*cj3);
IkReal x1226=(cj4*r01);
IkReal x1227=((16.0)*cj1);
IkReal x1228=((8.0)*sj1);
IkReal x1229=((16.0)*sj1);
IkReal x1230=((8.0)*cj1);
IkReal x1231=(sj2*sj3);
IkReal x1232=(cj2*sj3);
IkReal x1233=(sj1*x1232);
IkReal x1234=((4.0)*cj4*r00);
IkReal x1235=(((sj1*x1231*x1234))+((x1221*x1233))+((cj1*x1221*x1231))+((sj1*x1221*x1223)));
IkReal x1236=(((cj1*x1223*x1234))+((cj1*x1232*x1234))+((cj1*x1221*x1225))+((sj1*x1225*x1234)));
IkReal x1237=(x1236+(((-1.0)*x1235)));
IkReal x1238=((((-1.0)*x1226*x1228*x1231))+((cj1*x1224*x1231))+((x1225*x1226*x1228))+((sj1*x1223*x1224))+((x1224*x1233))+((x1223*x1226*x1230))+(((-1.0)*cj1*x1224*x1225))+((x1226*x1230*x1232)));
IkReal x1239=(x1235+(((-1.0)*x1236)));
op[0]=x1237;
op[1]=x1238;
op[2]=x1237;
op[3]=(((x1225*x1226*x1229))+(((-1.0)*cj1*x1222*x1225))+((x1223*x1226*x1227))+((sj1*x1222*x1223))+((x1222*x1233))+((cj1*x1222*x1231))+((x1226*x1227*x1232))+(((-1.0)*x1226*x1229*x1231)));
op[4]=x1239;
op[5]=x1238;
op[6]=x1239;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1240=(cj5*sj4);
IkReal x1241=(sj4*sj5);
if( IKabs((((r01*x1241))+(((-1.0)*r00*x1240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1241))+((r10*x1240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1241))+(((-1.0)*r00*x1240))))+IKsqr(((((-1.0)*r11*x1241))+((r10*x1240))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1241))+(((-1.0)*r00*x1240))), ((((-1.0)*r11*x1241))+((r10*x1240))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1242=IKcos(j0);
IkReal x1243=IKsin(j0);
IkReal x1244=((1.0)*cj5);
IkReal x1245=(cj3*r11);
IkReal x1246=(cj4*r10);
IkReal x1247=(cj4*r00);
IkReal x1248=(cj5*sj4);
IkReal x1249=((1.0)*sj5);
IkReal x1250=(r01*sj3);
IkReal x1251=(r00*sj5);
IkReal x1252=(cj3*r01);
IkReal x1253=(cj4*sj5);
IkReal x1254=(r11*sj3);
IkReal x1255=(sj1*sj2);
IkReal x1256=(r10*sj5);
IkReal x1257=(cj1*cj2);
IkReal x1258=((0.127)*cj5);
IkReal x1259=(cj2*sj1);
IkReal x1260=(cj1*x1242);
IkReal x1261=((0.566)*x1243);
IkReal x1262=(cj1*x1243);
evalcond[0]=(x1243+((r00*x1248))+(((-1.0)*r01*sj4*x1249)));
evalcond[1]=((((-1.0)*x1242))+((r10*x1248))+(((-1.0)*r11*sj4*x1249)));
evalcond[2]=((((-1.0)*x1242*x1257))+(((-1.0)*cj3*x1244*x1247))+((x1252*x1253))+((cj5*x1250))+((sj3*x1251))+((x1242*x1255)));
evalcond[3]=((((-1.0)*x1243*x1257))+((x1243*x1255))+((x1245*x1253))+(((-1.0)*cj3*x1244*x1246))+((cj5*x1254))+((sj3*x1256)));
evalcond[4]=((((-1.0)*sj3*x1244*x1247))+((x1250*x1253))+(((-1.0)*x1244*x1252))+(((-1.0)*cj3*r00*x1249))+((sj2*x1260))+((x1242*x1259)));
evalcond[5]=((((-1.0)*x1244*x1245))+((x1243*x1259))+(((-1.0)*sj3*x1244*x1246))+((x1253*x1254))+(((-1.0)*cj3*r10*x1249))+((sj2*x1262)));
evalcond[6]=((((0.566)*x1242*x1255))+(((-0.607)*x1260))+(((0.127)*x1251))+(((-0.566)*x1242*x1257))+(((-1.0)*px))+(((0.188)*x1243))+((r01*x1258)));
evalcond[7]=(((r11*x1258))+(((-0.607)*x1262))+(((0.127)*x1256))+(((-1.0)*x1257*x1261))+(((-1.0)*py))+((x1255*x1261))+(((-0.188)*x1242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1263=IKPowWithIntegerCheck(r22,-1);
if(!x1263.valid){
continue;
}
CheckValue<IkReal> x1264=IKPowWithIntegerCheck(sj3,-1);
if(!x1264.valid){
continue;
}
sj4array[0]=((x1263.value)*(x1264.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1265=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1265);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1265);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1266=((4.0)*r01);
IkReal x1267=((16.0)*r00);
IkReal x1268=(cj3*sj2);
IkReal x1269=((8.0)*r00);
IkReal x1270=(cj2*cj3);
IkReal x1271=(cj4*r01);
IkReal x1272=((16.0)*cj1);
IkReal x1273=((8.0)*sj1);
IkReal x1274=((16.0)*sj1);
IkReal x1275=((8.0)*cj1);
IkReal x1276=(sj2*sj3);
IkReal x1277=(cj2*sj3);
IkReal x1278=(sj1*x1277);
IkReal x1279=((4.0)*cj4*r00);
IkReal x1280=(((cj1*x1266*x1276))+((x1266*x1278))+((sj1*x1266*x1268))+((sj1*x1276*x1279)));
IkReal x1281=(((cj1*x1268*x1279))+((cj1*x1266*x1270))+((sj1*x1270*x1279))+((cj1*x1277*x1279)));
IkReal x1282=(x1281+(((-1.0)*x1280)));
IkReal x1283=(((x1269*x1278))+(((-1.0)*x1271*x1273*x1276))+(((-1.0)*cj1*x1269*x1270))+((x1268*x1271*x1275))+((x1271*x1275*x1277))+((cj1*x1269*x1276))+((sj1*x1268*x1269))+((x1270*x1271*x1273)));
IkReal x1284=(x1280+(((-1.0)*x1281)));
op[0]=x1282;
op[1]=x1283;
op[2]=x1282;
op[3]=(((cj1*x1267*x1276))+(((-1.0)*x1271*x1274*x1276))+((x1271*x1272*x1277))+((x1267*x1278))+(((-1.0)*cj1*x1267*x1270))+((sj1*x1267*x1268))+((x1268*x1271*x1272))+((x1270*x1271*x1274)));
op[4]=x1284;
op[5]=x1283;
op[6]=x1284;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1285=(cj5*sj4);
IkReal x1286=(sj4*sj5);
if( IKabs((((r01*x1286))+(((-1.0)*r00*x1285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1285))+(((-1.0)*r11*x1286)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1286))+(((-1.0)*r00*x1285))))+IKsqr((((r10*x1285))+(((-1.0)*r11*x1286))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1286))+(((-1.0)*r00*x1285))), (((r10*x1285))+(((-1.0)*r11*x1286))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1287=IKcos(j0);
IkReal x1288=IKsin(j0);
IkReal x1289=((1.0)*cj5);
IkReal x1290=(cj3*r11);
IkReal x1291=(cj4*r10);
IkReal x1292=(cj4*r00);
IkReal x1293=(cj5*sj4);
IkReal x1294=((1.0)*sj5);
IkReal x1295=(r01*sj3);
IkReal x1296=(r00*sj5);
IkReal x1297=(cj3*r01);
IkReal x1298=(cj4*sj5);
IkReal x1299=(r11*sj3);
IkReal x1300=(sj1*sj2);
IkReal x1301=(r10*sj5);
IkReal x1302=(cj1*cj2);
IkReal x1303=((0.127)*cj5);
IkReal x1304=(cj2*sj1);
IkReal x1305=(cj1*x1287);
IkReal x1306=((0.566)*x1288);
IkReal x1307=(cj1*x1288);
evalcond[0]=((((-1.0)*r01*sj4*x1294))+x1288+((r00*x1293)));
evalcond[1]=((((-1.0)*x1287))+((r10*x1293))+(((-1.0)*r11*sj4*x1294)));
evalcond[2]=(((x1297*x1298))+(((-1.0)*cj3*x1289*x1292))+((sj3*x1296))+((x1287*x1300))+(((-1.0)*x1287*x1302))+((cj5*x1295)));
evalcond[3]=(((x1288*x1300))+(((-1.0)*cj3*x1289*x1291))+(((-1.0)*x1288*x1302))+((sj3*x1301))+((x1290*x1298))+((cj5*x1299)));
evalcond[4]=(((sj2*x1305))+((x1295*x1298))+(((-1.0)*x1289*x1297))+(((-1.0)*cj3*r00*x1294))+(((-1.0)*sj3*x1289*x1292))+((x1287*x1304)));
evalcond[5]=(((x1288*x1304))+((sj2*x1307))+(((-1.0)*x1289*x1290))+(((-1.0)*cj3*r10*x1294))+(((-1.0)*sj3*x1289*x1291))+((x1298*x1299)));
evalcond[6]=((((-0.607)*x1305))+(((0.188)*x1288))+(((0.127)*x1296))+(((-1.0)*px))+(((0.566)*x1287*x1300))+((r01*x1303))+(((-0.566)*x1287*x1302)));
evalcond[7]=((((-0.607)*x1307))+((x1300*x1306))+(((-1.0)*py))+((r11*x1303))+(((-0.188)*x1287))+(((-1.0)*x1302*x1306))+(((0.127)*x1301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1310 = IKatan2WithCheck(IkReal(((0.127)*r21)),IkReal(((0.127)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1310.valid){
continue;
}
IkReal x1308=((1.0)*(x1310.value));
if((((((0.016129)*(r20*r20)))+(((0.016129)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1311=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.016129)*(r20*r20)))+(((0.016129)*(r21*r21)))))),-1);
if(!x1311.valid){
continue;
}
if( (((-1.0)*(x1311.value)*(((((-0.607)*sj1))+(((-0.566)*cj2*sj1))+(((-1.0)*pz))+(((-0.566)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1311.value)*(((((-0.607)*sj1))+(((-0.566)*cj2*sj1))+(((-1.0)*pz))+(((-0.566)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1309=((-1.0)*(IKasin(((-1.0)*(x1311.value)*(((((-0.607)*sj1))+(((-0.566)*cj2*sj1))+(((-1.0)*pz))+(((-0.566)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1309))+(((-1.0)*x1308)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1308))+(((1.0)*x1309)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1312=cj5*cj5;
IkReal x1313=r21*r21;
IkReal x1314=(cj3*x1312);
IkReal x1315=((((-2.0)*cj3*cj5*r20*r21*sj5))+(((-1.0)*x1313*x1314))+((cj3*(r22*r22)))+((cj3*x1313))+((x1314*(r20*r20))));
j4eval[0]=x1315;
j4eval[1]=IKsign(x1315);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1316=cj5*cj5;
IkReal x1317=r21*r21;
IkReal x1318=(sj3*x1316);
IkReal x1319=(((sj3*(r22*r22)))+((sj3*x1317))+(((-1.0)*x1317*x1318))+((x1318*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj3*sj5)));
j4eval[0]=x1319;
j4eval[1]=IKsign(x1319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1320=cj1*cj1;
IkReal x1321=cj2*cj2;
IkReal x1322=(cj1*sj1*sj2);
IkReal x1323=(cj2*x1320);
IkReal x1324=(x1320*x1321);
j0eval[0]=((-7.39608674859127)+(((13.3223546046202)*cj2*x1322))+(((-1.0)*x1320))+(((6.66117730231011)*x1321))+(((14.2874014929408)*x1322))+(((-13.3223546046202)*x1324))+(((-14.2874014929408)*x1323)));
j0eval[1]=IKsign(((-22231.25)+(((-40044.5)*x1324))+(((40044.5)*cj2*x1322))+(((-3005.8125)*x1320))+(((-42945.25)*x1323))+(((42945.25)*x1322))+(((20022.25)*x1321))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1325=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1325;
j0eval[1]=IKsign(x1325);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1326=cj5*cj5;
IkReal x1327=r21*r21;
IkReal x1328=(cj2*sj1);
IkReal x1329=(cj1*sj2);
IkReal x1330=((1.0)*r22);
IkReal x1331=(r21*sj5);
IkReal x1332=((1.0)*cj5*r20);
IkReal x1333=(x1327+(r22*r22)+(((-2.0)*cj5*r20*x1331))+((x1326*(r20*r20)))+(((-1.0)*x1326*x1327)));
j4eval[0]=x1333;
j4eval[1]=((IKabs(((((-1.0)*x1328*x1330))+(((-1.0)*x1329*x1330)))))+(IKabs((((x1329*x1331))+(((-1.0)*x1328*x1332))+((x1328*x1331))+(((-1.0)*x1329*x1332))))));
j4eval[2]=IKsign(x1333);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1334=cj1*cj1;
IkReal x1335=(cj2*sj2);
IkReal x1336=(cj1*sj1);
j0eval[0]=(x1335+x1336+(((-2.0)*x1334*x1335))+(((-2.0)*x1336*(cj2*cj2)))+(((-1.07243816254417)*cj2*x1336))+(((-1.07243816254417)*sj2*x1334)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.133213063666633)*px))+(((-0.831164487664683)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.133213063666633)*py))+(((-0.831164487664683)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.133213063666633)*px))+(((-0.831164487664683)*py))))+IKsqr(((((-0.133213063666633)*py))+(((-0.831164487664683)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.133213063666633)*px))+(((-0.831164487664683)*py))), ((((-0.133213063666633)*py))+(((-0.831164487664683)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1337=IKcos(j0);
IkReal x1338=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.188)*x1338))+(((-1.173)*x1337)));
evalcond[1]=((((-0.188)*x1337))+(((-1.0)*py))+(((-1.173)*x1338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1339=((1.0)*sj5);
IkReal x1340=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1339)));
j4eval[0]=x1340;
j4eval[1]=IKsign(x1340);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1339))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1341=((1.0)*sj5);
IkReal x1342=((((-1.0)*r00*x1341))+(((-1.0)*cj5*r01)));
j4eval[0]=x1342;
j4eval[1]=IKsign(x1342);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1341)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1343=cj5*cj5;
IkReal x1344=((1.0)*r21);
IkReal x1345=(cj5*sj5);
IkReal x1346=((1.0)*r20);
IkReal x1347=((((-1.0)*r00*x1344*x1345))+((r01*r21))+(((-1.0)*r01*x1343*x1344))+(((-1.0)*r01*x1345*x1346))+((r02*r22))+((r00*r20*x1343)));
j4eval[0]=x1347;
j4eval[1]=IKsign(x1347);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1346))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1348=cj5*cj5;
IkReal x1349=((1.0)*r21);
IkReal x1350=(cj5*sj5);
IkReal x1351=((1.0)*r20);
CheckValue<IkReal> x1352 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x1351))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1352.valid){
continue;
}
CheckValue<IkReal> x1353=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1348*x1349))+((r01*r21))+(((-1.0)*r01*x1350*x1351))+((r02*r22))+(((-1.0)*r00*x1349*x1350))+((r00*r20*x1348)))),-1);
if(!x1353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1352.value)+(((1.5707963267949)*(x1353.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1354=IKsin(j4);
IkReal x1355=IKcos(j4);
IkReal x1356=((1.0)*cj0);
IkReal x1357=(cj5*r00);
IkReal x1358=(r11*sj5);
IkReal x1359=(r01*sj5);
IkReal x1360=(cj5*r20);
IkReal x1361=(r21*sj5);
IkReal x1362=(cj5*r10);
IkReal x1363=((1.0)*x1355);
IkReal x1364=((1.0)*x1354);
evalcond[0]=(((x1354*x1360))+(((-1.0)*r22*x1363))+(((-1.0)*x1361*x1364)));
evalcond[1]=(((x1355*x1361))+(((-1.0)*r22*x1364))+(((-1.0)*x1360*x1363)));
evalcond[2]=(sj0+(((-1.0)*r02*x1363))+((x1354*x1357))+(((-1.0)*x1359*x1364)));
evalcond[3]=((((-1.0)*x1356))+(((-1.0)*r12*x1363))+((x1354*x1362))+(((-1.0)*x1358*x1364)));
evalcond[4]=((((-1.0)*x1356))+((x1355*x1359))+(((-1.0)*r02*x1364))+(((-1.0)*x1357*x1363)));
evalcond[5]=((((-1.0)*sj0))+((x1355*x1358))+(((-1.0)*r12*x1364))+(((-1.0)*x1362*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1365=((1.0)*sj5);
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1365))+(((-1.0)*cj5*r01)))),-1);
if(!x1366.valid){
continue;
}
CheckValue<IkReal> x1367 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1365))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1366.value)))+(x1367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1368=IKsin(j4);
IkReal x1369=IKcos(j4);
IkReal x1370=((1.0)*cj0);
IkReal x1371=(cj5*r00);
IkReal x1372=(r11*sj5);
IkReal x1373=(r01*sj5);
IkReal x1374=(cj5*r20);
IkReal x1375=(r21*sj5);
IkReal x1376=(cj5*r10);
IkReal x1377=((1.0)*x1369);
IkReal x1378=((1.0)*x1368);
evalcond[0]=((((-1.0)*r22*x1377))+(((-1.0)*x1375*x1378))+((x1368*x1374)));
evalcond[1]=((((-1.0)*r22*x1378))+(((-1.0)*x1374*x1377))+((x1369*x1375)));
evalcond[2]=(sj0+(((-1.0)*r02*x1377))+((x1368*x1371))+(((-1.0)*x1373*x1378)));
evalcond[3]=((((-1.0)*x1372*x1378))+(((-1.0)*x1370))+(((-1.0)*r12*x1377))+((x1368*x1376)));
evalcond[4]=((((-1.0)*x1371*x1377))+(((-1.0)*r02*x1378))+(((-1.0)*x1370))+((x1369*x1373)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1378))+(((-1.0)*x1376*x1377))+((x1369*x1372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1379=((1.0)*sj5);
CheckValue<IkReal> x1380=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1379)))),-1);
if(!x1380.valid){
continue;
}
CheckValue<IkReal> x1381 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1379)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1380.value)))+(x1381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1382=IKsin(j4);
IkReal x1383=IKcos(j4);
IkReal x1384=((1.0)*cj0);
IkReal x1385=(cj5*r00);
IkReal x1386=(r11*sj5);
IkReal x1387=(r01*sj5);
IkReal x1388=(cj5*r20);
IkReal x1389=(r21*sj5);
IkReal x1390=(cj5*r10);
IkReal x1391=((1.0)*x1383);
IkReal x1392=((1.0)*x1382);
evalcond[0]=((((-1.0)*x1389*x1392))+(((-1.0)*r22*x1391))+((x1382*x1388)));
evalcond[1]=((((-1.0)*r22*x1392))+(((-1.0)*x1388*x1391))+((x1383*x1389)));
evalcond[2]=(sj0+(((-1.0)*r02*x1391))+(((-1.0)*x1387*x1392))+((x1382*x1385)));
evalcond[3]=(((x1382*x1390))+(((-1.0)*x1384))+(((-1.0)*r12*x1391))+(((-1.0)*x1386*x1392)));
evalcond[4]=((((-1.0)*x1384))+(((-1.0)*x1385*x1391))+(((-1.0)*r02*x1392))+((x1383*x1387)));
evalcond[5]=((((-1.0)*r12*x1392))+(((-1.0)*sj0))+(((-1.0)*x1390*x1391))+((x1383*x1386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.10735989196489)*py))+(((5.07765023632681)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.10735989196489)*px))+(((-5.07765023632681)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.10735989196489)*py))+(((5.07765023632681)*px))))+IKsqr(((((-1.10735989196489)*px))+(((-5.07765023632681)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.10735989196489)*py))+(((5.07765023632681)*px))), ((((-1.10735989196489)*px))+(((-5.07765023632681)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1393=IKsin(j0);
IkReal x1394=IKcos(j0);
evalcond[0]=((((0.188)*x1393))+(((-1.0)*px))+(((-0.041)*x1394)));
evalcond[1]=((((-1.0)*py))+(((-0.188)*x1394))+(((-0.041)*x1393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1395=((1.0)*sj5);
IkReal x1396=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1395)));
j4eval[0]=x1396;
j4eval[1]=IKsign(x1396);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x1395))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1397=cj5*cj5;
IkReal x1398=((1.0)*r21);
IkReal x1399=(cj5*sj5);
IkReal x1400=(((r01*r21))+(((-1.0)*r00*x1398*x1399))+(((-1.0)*r01*x1397*x1398))+(((-1.0)*r01*r20*x1399))+((r02*r22))+((r00*r20*x1397)));
j4eval[0]=x1400;
j4eval[1]=IKsign(x1400);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x1398))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1401=cj5*cj5;
IkReal x1402=(cj5*r20);
IkReal x1403=((1.0)*sj5);
IkReal x1404=(r11*r21);
IkReal x1405=(((r10*r20*x1401))+((r12*r22))+(((-1.0)*r11*x1402*x1403))+(((-1.0)*cj5*r10*r21*x1403))+x1404+(((-1.0)*x1401*x1404)));
j4eval[0]=x1405;
j4eval[1]=IKsign(x1405);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x1403))+((sj0*x1402)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1406=cj5*cj5;
IkReal x1407=(cj5*r20);
IkReal x1408=((1.0)*sj5);
IkReal x1409=(r11*r21);
CheckValue<IkReal> x1410=IKPowWithIntegerCheck(IKsign((((r10*r20*x1406))+(((-1.0)*r11*x1407*x1408))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1408))+x1409+(((-1.0)*x1406*x1409)))),-1);
if(!x1410.valid){
continue;
}
CheckValue<IkReal> x1411 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1408))+((sj0*x1407)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1410.value)))+(x1411.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1412=IKsin(j4);
IkReal x1413=IKcos(j4);
IkReal x1414=(cj5*r00);
IkReal x1415=(r11*sj5);
IkReal x1416=(r01*sj5);
IkReal x1417=(cj5*r20);
IkReal x1418=(r21*sj5);
IkReal x1419=(cj5*r10);
IkReal x1420=((1.0)*x1413);
IkReal x1421=((1.0)*x1412);
evalcond[0]=(((x1412*x1417))+(((-1.0)*x1418*x1421))+(((-1.0)*r22*x1420)));
evalcond[1]=(((x1413*x1418))+(((-1.0)*x1417*x1420))+(((-1.0)*r22*x1421)));
evalcond[2]=(sj0+(((-1.0)*x1416*x1421))+((x1412*x1414))+(((-1.0)*r02*x1420)));
evalcond[3]=(((x1413*x1416))+cj0+(((-1.0)*x1414*x1420))+(((-1.0)*r02*x1421)));
evalcond[4]=(sj0+((x1413*x1415))+(((-1.0)*r12*x1421))+(((-1.0)*x1419*x1420)));
evalcond[5]=((((-1.0)*x1415*x1421))+((x1412*x1419))+(((-1.0)*r12*x1420))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1422=cj5*cj5;
IkReal x1423=((1.0)*r21);
IkReal x1424=(cj5*sj5);
CheckValue<IkReal> x1425 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1425.valid){
continue;
}
CheckValue<IkReal> x1426=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1422*x1423))+((r00*r20*x1422))+(((-1.0)*r01*r20*x1424))+((r01*r21))+(((-1.0)*r00*x1423*x1424))+((r02*r22)))),-1);
if(!x1426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1425.value)+(((1.5707963267949)*(x1426.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1427=IKsin(j4);
IkReal x1428=IKcos(j4);
IkReal x1429=(cj5*r00);
IkReal x1430=(r11*sj5);
IkReal x1431=(r01*sj5);
IkReal x1432=(cj5*r20);
IkReal x1433=(r21*sj5);
IkReal x1434=(cj5*r10);
IkReal x1435=((1.0)*x1428);
IkReal x1436=((1.0)*x1427);
evalcond[0]=((((-1.0)*r22*x1435))+((x1427*x1432))+(((-1.0)*x1433*x1436)));
evalcond[1]=(((x1428*x1433))+(((-1.0)*r22*x1436))+(((-1.0)*x1432*x1435)));
evalcond[2]=(sj0+(((-1.0)*x1431*x1436))+(((-1.0)*r02*x1435))+((x1427*x1429)));
evalcond[3]=(((x1428*x1431))+cj0+(((-1.0)*x1429*x1435))+(((-1.0)*r02*x1436)));
evalcond[4]=(((x1428*x1430))+(((-1.0)*r12*x1436))+sj0+(((-1.0)*x1434*x1435)));
evalcond[5]=((((-1.0)*r12*x1435))+((x1427*x1434))+(((-1.0)*x1430*x1436))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1437=((1.0)*sj5);
CheckValue<IkReal> x1438=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1437)))),-1);
if(!x1438.valid){
continue;
}
CheckValue<IkReal> x1439 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1437))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1438.value)))+(x1439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1440=IKsin(j4);
IkReal x1441=IKcos(j4);
IkReal x1442=(cj5*r00);
IkReal x1443=(r11*sj5);
IkReal x1444=(r01*sj5);
IkReal x1445=(cj5*r20);
IkReal x1446=(r21*sj5);
IkReal x1447=(cj5*r10);
IkReal x1448=((1.0)*x1441);
IkReal x1449=((1.0)*x1440);
evalcond[0]=((((-1.0)*x1446*x1449))+(((-1.0)*r22*x1448))+((x1440*x1445)));
evalcond[1]=((((-1.0)*r22*x1449))+(((-1.0)*x1445*x1448))+((x1441*x1446)));
evalcond[2]=(sj0+((x1440*x1442))+(((-1.0)*x1444*x1449))+(((-1.0)*r02*x1448)));
evalcond[3]=(cj0+((x1441*x1444))+(((-1.0)*r02*x1449))+(((-1.0)*x1442*x1448)));
evalcond[4]=(sj0+((x1441*x1443))+(((-1.0)*r12*x1449))+(((-1.0)*x1447*x1448)));
evalcond[5]=(((x1440*x1447))+(((-1.0)*r12*x1448))+(((-1.0)*x1443*x1449))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1450=IKsin(j0);
IkReal x1451=IKcos(j0);
IkReal x1452=((1.0)*cj5);
IkReal x1453=((1.0)*sj5);
IkReal x1454=((0.127)*sj5);
IkReal x1455=((0.127)*cj5);
evalcond[0]=((((-1.0)*r01*x1452))+(((-1.0)*r00*x1453))+x1451);
evalcond[1]=(x1450+(((-1.0)*r10*x1453))+(((-1.0)*r11*x1452)));
evalcond[2]=((((-1.0)*px))+((r01*x1455))+((r00*x1454))+(((0.188)*x1450)));
evalcond[3]=(((r10*x1454))+(((-0.188)*x1451))+((r11*x1455))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1456=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1456;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x1456);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1457=((1.0)*sj5);
IkReal x1458=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1457)));
j4eval[0]=x1458;
j4eval[1]=IKsign(x1458);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1457)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1459=r21*r21;
IkReal x1460=cj5*cj5;
IkReal x1461=(cj5*r20);
IkReal x1462=(r21*sj5);
IkReal x1463=((((2.0)*x1461*x1462))+(((-1.0)*x1459))+((x1459*x1460))+(((-1.0)*(r22*r22)))+(((-1.0)*x1460*(r20*r20))));
j4eval[0]=x1463;
j4eval[1]=((IKabs(r22))+(IKabs((x1461+(((-1.0)*x1462))))));
j4eval[2]=IKsign(x1463);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1464=r21*r21;
IkReal x1465=cj5*cj5;
IkReal x1466=(cj5*r20);
IkReal x1467=(r21*sj5);
CheckValue<IkReal> x1468=IKPowWithIntegerCheck(IKsign((((x1464*x1465))+(((-1.0)*(r22*r22)))+(((-1.0)*x1465*(r20*r20)))+(((2.0)*x1466*x1467))+(((-1.0)*x1464)))),-1);
if(!x1468.valid){
continue;
}
CheckValue<IkReal> x1469 = IKatan2WithCheck(IkReal(r22),IkReal((x1466+(((-1.0)*x1467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1468.value)))+(x1469.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1470=IKsin(j4);
IkReal x1471=IKcos(j4);
IkReal x1472=(cj5*r00);
IkReal x1473=(r11*sj5);
IkReal x1474=(r01*sj5);
IkReal x1475=(cj5*r20);
IkReal x1476=(cj5*r10);
IkReal x1477=(r21*sj5);
IkReal x1478=((1.0)*x1471);
IkReal x1479=((1.0)*x1470);
evalcond[0]=((((-1.0)*r22*x1478))+(((-1.0)*x1477*x1479))+((x1470*x1475)));
evalcond[1]=(((x1471*x1474))+(((-1.0)*r02*x1479))+(((-1.0)*x1472*x1478)));
evalcond[2]=(((x1471*x1473))+(((-1.0)*x1476*x1478))+(((-1.0)*r12*x1479)));
evalcond[3]=(sj0+(((-1.0)*x1474*x1479))+((x1470*x1472))+(((-1.0)*r02*x1478)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x1479))+((x1471*x1477))+(((-1.0)*x1475*x1478)));
evalcond[5]=((((-1.0)*r12*x1478))+((x1470*x1476))+(((-1.0)*cj0))+(((-1.0)*x1473*x1479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1480=((1.0)*sj5);
CheckValue<IkReal> x1481=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1480)))),-1);
if(!x1481.valid){
continue;
}
CheckValue<IkReal> x1482 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1481.value)))+(x1482.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1483=IKsin(j4);
IkReal x1484=IKcos(j4);
IkReal x1485=(cj5*r00);
IkReal x1486=(r11*sj5);
IkReal x1487=(r01*sj5);
IkReal x1488=(cj5*r20);
IkReal x1489=(cj5*r10);
IkReal x1490=(r21*sj5);
IkReal x1491=((1.0)*x1484);
IkReal x1492=((1.0)*x1483);
evalcond[0]=(((x1483*x1488))+(((-1.0)*x1490*x1492))+(((-1.0)*r22*x1491)));
evalcond[1]=((((-1.0)*x1485*x1491))+(((-1.0)*r02*x1492))+((x1484*x1487)));
evalcond[2]=((((-1.0)*r12*x1492))+((x1484*x1486))+(((-1.0)*x1489*x1491)));
evalcond[3]=(sj0+(((-1.0)*x1487*x1492))+((x1483*x1485))+(((-1.0)*r02*x1491)));
evalcond[4]=((-1.0)+((x1484*x1490))+(((-1.0)*r22*x1492))+(((-1.0)*x1488*x1491)));
evalcond[5]=((((-1.0)*r12*x1491))+(((-1.0)*x1486*x1492))+((x1483*x1489))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1493=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1493.valid){
continue;
}
CheckValue<IkReal> x1494 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1493.value)))+(x1494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1495=IKsin(j4);
IkReal x1496=IKcos(j4);
IkReal x1497=(cj5*r00);
IkReal x1498=(r11*sj5);
IkReal x1499=(r01*sj5);
IkReal x1500=(cj5*r20);
IkReal x1501=(cj5*r10);
IkReal x1502=(r21*sj5);
IkReal x1503=((1.0)*x1496);
IkReal x1504=((1.0)*x1495);
evalcond[0]=((((-1.0)*r22*x1503))+((x1495*x1500))+(((-1.0)*x1502*x1504)));
evalcond[1]=(((x1496*x1499))+(((-1.0)*r02*x1504))+(((-1.0)*x1497*x1503)));
evalcond[2]=((((-1.0)*x1501*x1503))+((x1496*x1498))+(((-1.0)*r12*x1504)));
evalcond[3]=((((-1.0)*x1499*x1504))+sj0+((x1495*x1497))+(((-1.0)*r02*x1503)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x1504))+((x1496*x1502))+(((-1.0)*x1500*x1503)));
evalcond[5]=((((-1.0)*x1498*x1504))+((x1495*x1501))+(((-1.0)*cj0))+(((-1.0)*r12*x1503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.528535282541468)*px))+(((1.59122856339612)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.59122856339612)*px))+(((-0.528535282541468)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.528535282541468)*px))+(((1.59122856339612)*py))))+IKsqr(((((1.59122856339612)*px))+(((-0.528535282541468)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.528535282541468)*px))+(((1.59122856339612)*py))), ((((1.59122856339612)*px))+(((-0.528535282541468)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1505=IKsin(j0);
IkReal x1506=IKcos(j0);
evalcond[0]=((((0.566)*x1506))+(((0.188)*x1505))+(((-1.0)*px)));
evalcond[1]=((((0.566)*x1505))+(((-0.188)*x1506))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1507=((1.0)*sj5);
IkReal x1508=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1507)));
j4eval[0]=x1508;
j4eval[1]=IKsign(x1508);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1507))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1509=cj5*cj5;
IkReal x1510=((1.0)*r21);
IkReal x1511=(cj5*sj5);
IkReal x1512=(((r01*r21))+(((-1.0)*r01*x1509*x1510))+(((-1.0)*r00*x1510*x1511))+(((-1.0)*r01*r20*x1511))+((r00*r20*x1509))+((r02*r22)));
j4eval[0]=x1512;
j4eval[1]=IKsign(x1512);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1510))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1513=cj5*cj5;
IkReal x1514=(cj5*r20);
IkReal x1515=((1.0)*sj5);
IkReal x1516=(r11*r21);
IkReal x1517=((((-1.0)*x1513*x1516))+((r12*r22))+x1516+(((-1.0)*r11*x1514*x1515))+(((-1.0)*cj5*r10*r21*x1515))+((r10*r20*x1513)));
j4eval[0]=x1517;
j4eval[1]=IKsign(x1517);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1515))+((sj0*x1514))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1518=cj5*cj5;
IkReal x1519=(cj5*r20);
IkReal x1520=((1.0)*sj5);
IkReal x1521=(r11*r21);
CheckValue<IkReal> x1522 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1519))+(((-1.0)*r21*sj0*x1520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1522.valid){
continue;
}
CheckValue<IkReal> x1523=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1518*x1521))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1520))+x1521+(((-1.0)*r11*x1519*x1520))+((r10*r20*x1518)))),-1);
if(!x1523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1522.value)+(((1.5707963267949)*(x1523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1524=IKsin(j4);
IkReal x1525=IKcos(j4);
IkReal x1526=(cj5*r00);
IkReal x1527=(r11*sj5);
IkReal x1528=(r01*sj5);
IkReal x1529=(cj5*r20);
IkReal x1530=(r21*sj5);
IkReal x1531=(cj5*r10);
IkReal x1532=((1.0)*x1525);
IkReal x1533=((1.0)*x1524);
evalcond[0]=(((x1524*x1529))+(((-1.0)*x1530*x1533))+(((-1.0)*r22*x1532)));
evalcond[1]=((((-1.0)*x1529*x1532))+((x1525*x1530))+(((-1.0)*r22*x1533)));
evalcond[2]=(((x1524*x1526))+sj0+(((-1.0)*r02*x1532))+(((-1.0)*x1528*x1533)));
evalcond[3]=(((x1525*x1528))+cj0+(((-1.0)*r02*x1533))+(((-1.0)*x1526*x1532)));
evalcond[4]=(((x1525*x1527))+sj0+(((-1.0)*r12*x1533))+(((-1.0)*x1531*x1532)));
evalcond[5]=((((-1.0)*r12*x1532))+((x1524*x1531))+(((-1.0)*x1527*x1533))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1534=cj5*cj5;
IkReal x1535=((1.0)*r21);
IkReal x1536=(cj5*sj5);
CheckValue<IkReal> x1537=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1534*x1535))+(((-1.0)*r01*r20*x1536))+((r02*r22))+(((-1.0)*r00*x1535*x1536))+((r00*r20*x1534)))),-1);
if(!x1537.valid){
continue;
}
CheckValue<IkReal> x1538 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1535))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1537.value)))+(x1538.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1539=IKsin(j4);
IkReal x1540=IKcos(j4);
IkReal x1541=(cj5*r00);
IkReal x1542=(r11*sj5);
IkReal x1543=(r01*sj5);
IkReal x1544=(cj5*r20);
IkReal x1545=(r21*sj5);
IkReal x1546=(cj5*r10);
IkReal x1547=((1.0)*x1540);
IkReal x1548=((1.0)*x1539);
evalcond[0]=(((x1539*x1544))+(((-1.0)*r22*x1547))+(((-1.0)*x1545*x1548)));
evalcond[1]=((((-1.0)*r22*x1548))+((x1540*x1545))+(((-1.0)*x1544*x1547)));
evalcond[2]=((((-1.0)*x1543*x1548))+(((-1.0)*r02*x1547))+sj0+((x1539*x1541)));
evalcond[3]=((((-1.0)*r02*x1548))+cj0+((x1540*x1543))+(((-1.0)*x1541*x1547)));
evalcond[4]=((((-1.0)*x1546*x1547))+sj0+((x1540*x1542))+(((-1.0)*r12*x1548)));
evalcond[5]=(((x1539*x1546))+(((-1.0)*x1542*x1548))+(((-1.0)*r12*x1547))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1549=((1.0)*sj5);
CheckValue<IkReal> x1550 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1550.valid){
continue;
}
CheckValue<IkReal> x1551=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1549)))),-1);
if(!x1551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1550.value)+(((1.5707963267949)*(x1551.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1552=IKsin(j4);
IkReal x1553=IKcos(j4);
IkReal x1554=(cj5*r00);
IkReal x1555=(r11*sj5);
IkReal x1556=(r01*sj5);
IkReal x1557=(cj5*r20);
IkReal x1558=(r21*sj5);
IkReal x1559=(cj5*r10);
IkReal x1560=((1.0)*x1553);
IkReal x1561=((1.0)*x1552);
evalcond[0]=(((x1552*x1557))+(((-1.0)*r22*x1560))+(((-1.0)*x1558*x1561)));
evalcond[1]=(((x1553*x1558))+(((-1.0)*x1557*x1560))+(((-1.0)*r22*x1561)));
evalcond[2]=(sj0+(((-1.0)*r02*x1560))+((x1552*x1554))+(((-1.0)*x1556*x1561)));
evalcond[3]=(((x1553*x1556))+(((-1.0)*r02*x1561))+cj0+(((-1.0)*x1554*x1560)));
evalcond[4]=((((-1.0)*x1559*x1560))+((x1553*x1555))+sj0+(((-1.0)*r12*x1561)));
evalcond[5]=(((x1552*x1559))+(((-1.0)*x1555*x1561))+(((-1.0)*r12*x1560))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1562=((1.0)*sj5);
IkReal x1563=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x1562))+(((-1.0)*r11*x1563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1562))+(((-1.0)*r01*x1563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1562))+(((-1.0)*r11*x1563))))+IKsqr(((((-1.0)*r00*x1562))+(((-1.0)*r01*x1563))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x1562))+(((-1.0)*r11*x1563))), ((((-1.0)*r00*x1562))+(((-1.0)*r01*x1563))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1564=IKsin(j0);
IkReal x1565=IKcos(j0);
IkReal x1566=((1.0)*cj5);
IkReal x1567=((1.0)*sj5);
IkReal x1568=((0.127)*sj5);
IkReal x1569=((0.127)*cj5);
evalcond[0]=((((-1.0)*r00*x1567))+(((-1.0)*r01*x1566))+(((-1.0)*x1565)));
evalcond[1]=((((-1.0)*r10*x1567))+(((-1.0)*r11*x1566))+(((-1.0)*x1564)));
evalcond[2]=((((-1.0)*px))+(((0.188)*x1564))+((r00*x1568))+((r01*x1569)));
evalcond[3]=((((-0.188)*x1565))+((r11*x1569))+(((-1.0)*py))+((r10*x1568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1570=((1.0)*cj5);
IkReal x1571=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1570)));
j4eval[0]=x1571;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x1570))))));
j4eval[2]=IKsign(x1571);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1572=((1.0)*sj5);
IkReal x1573=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1572)));
j4eval[0]=x1573;
j4eval[1]=IKsign(x1573);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1572)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1574=cj5*cj5;
IkReal x1575=r21*r21;
IkReal x1576=(cj5*r20);
IkReal x1577=(r21*sj5);
IkReal x1578=((((-2.0)*x1576*x1577))+(r22*r22)+(((-1.0)*x1574*x1575))+x1575+((x1574*(r20*r20))));
j4eval[0]=x1578;
j4eval[1]=IKsign(x1578);
j4eval[2]=((IKabs((x1576+(((-1.0)*x1577)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1579=cj5*cj5;
IkReal x1580=r21*r21;
IkReal x1581=(cj5*r20);
IkReal x1582=(r21*sj5);
CheckValue<IkReal> x1583=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x1579*x1580))+(((-2.0)*x1581*x1582))+x1580+((x1579*(r20*r20))))),-1);
if(!x1583.valid){
continue;
}
CheckValue<IkReal> x1584 = IKatan2WithCheck(IkReal(r22),IkReal((x1581+(((-1.0)*x1582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1583.value)))+(x1584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1585=IKsin(j4);
IkReal x1586=IKcos(j4);
IkReal x1587=(cj5*r00);
IkReal x1588=(r11*sj5);
IkReal x1589=(r01*sj5);
IkReal x1590=(cj5*r20);
IkReal x1591=(cj5*r10);
IkReal x1592=(r21*sj5);
IkReal x1593=((1.0)*x1586);
IkReal x1594=((1.0)*x1585);
evalcond[0]=((((-1.0)*x1592*x1594))+(((-1.0)*r22*x1593))+((x1585*x1590)));
evalcond[1]=(((x1586*x1589))+(((-1.0)*r02*x1594))+(((-1.0)*x1587*x1593)));
evalcond[2]=(((x1586*x1588))+(((-1.0)*x1591*x1593))+(((-1.0)*r12*x1594)));
evalcond[3]=(sj0+(((-1.0)*r02*x1593))+(((-1.0)*x1589*x1594))+((x1585*x1587)));
evalcond[4]=((1.0)+((x1586*x1592))+(((-1.0)*r22*x1594))+(((-1.0)*x1590*x1593)));
evalcond[5]=((((-1.0)*x1588*x1594))+((x1585*x1591))+(((-1.0)*cj0))+(((-1.0)*r12*x1593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1595=((1.0)*sj5);
CheckValue<IkReal> x1596 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1596.valid){
continue;
}
CheckValue<IkReal> x1597=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1595)))),-1);
if(!x1597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1596.value)+(((1.5707963267949)*(x1597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1598=IKsin(j4);
IkReal x1599=IKcos(j4);
IkReal x1600=(cj5*r00);
IkReal x1601=(r11*sj5);
IkReal x1602=(r01*sj5);
IkReal x1603=(cj5*r20);
IkReal x1604=(cj5*r10);
IkReal x1605=(r21*sj5);
IkReal x1606=((1.0)*x1599);
IkReal x1607=((1.0)*x1598);
evalcond[0]=((((-1.0)*r22*x1606))+(((-1.0)*x1605*x1607))+((x1598*x1603)));
evalcond[1]=(((x1599*x1602))+(((-1.0)*x1600*x1606))+(((-1.0)*r02*x1607)));
evalcond[2]=(((x1599*x1601))+(((-1.0)*r12*x1607))+(((-1.0)*x1604*x1606)));
evalcond[3]=(sj0+((x1598*x1600))+(((-1.0)*r02*x1606))+(((-1.0)*x1602*x1607)));
evalcond[4]=((1.0)+((x1599*x1605))+(((-1.0)*r22*x1607))+(((-1.0)*x1603*x1606)));
evalcond[5]=((((-1.0)*x1601*x1607))+((x1598*x1604))+(((-1.0)*r12*x1606))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1608=((1.0)*cj5);
CheckValue<IkReal> x1609 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x1608)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1609.valid){
continue;
}
CheckValue<IkReal> x1610=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1608)))),-1);
if(!x1610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1609.value)+(((1.5707963267949)*(x1610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1611=IKsin(j4);
IkReal x1612=IKcos(j4);
IkReal x1613=(cj5*r00);
IkReal x1614=(r11*sj5);
IkReal x1615=(r01*sj5);
IkReal x1616=(cj5*r20);
IkReal x1617=(cj5*r10);
IkReal x1618=(r21*sj5);
IkReal x1619=((1.0)*x1612);
IkReal x1620=((1.0)*x1611);
evalcond[0]=((((-1.0)*r22*x1619))+((x1611*x1616))+(((-1.0)*x1618*x1620)));
evalcond[1]=((((-1.0)*r02*x1620))+((x1612*x1615))+(((-1.0)*x1613*x1619)));
evalcond[2]=((((-1.0)*r12*x1620))+(((-1.0)*x1617*x1619))+((x1612*x1614)));
evalcond[3]=(sj0+(((-1.0)*r02*x1619))+(((-1.0)*x1615*x1620))+((x1611*x1613)));
evalcond[4]=((1.0)+(((-1.0)*x1616*x1619))+(((-1.0)*r22*x1620))+((x1612*x1618)));
evalcond[5]=((((-1.0)*r12*x1619))+(((-1.0)*x1614*x1620))+((x1611*x1617))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.59122856339612)*py))+(((0.528535282541468)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.59122856339612)*px))+(((-0.528535282541468)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.59122856339612)*py))+(((0.528535282541468)*px))))+IKsqr(((((-1.59122856339612)*px))+(((-0.528535282541468)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.59122856339612)*py))+(((0.528535282541468)*px))), ((((-1.59122856339612)*px))+(((-0.528535282541468)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1621=IKsin(j0);
IkReal x1622=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.188)*x1621))+(((-0.566)*x1622)));
evalcond[1]=((((-0.188)*x1622))+(((-1.0)*py))+(((-0.566)*x1621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1623=((1.0)*sj5);
IkReal x1624=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1623)));
j4eval[0]=x1624;
j4eval[1]=IKsign(x1624);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1623)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1625=((1.0)*sj5);
IkReal x1626=((((-1.0)*r00*x1625))+(((-1.0)*cj5*r01)));
j4eval[0]=x1626;
j4eval[1]=IKsign(x1626);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1625)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1627=cj5*cj5;
IkReal x1628=((1.0)*r21);
IkReal x1629=(cj5*sj5);
IkReal x1630=((1.0)*r20);
IkReal x1631=(((r00*r20*x1627))+(((-1.0)*r00*x1628*x1629))+((r01*r21))+(((-1.0)*r01*x1629*x1630))+(((-1.0)*r01*x1627*x1628))+((r02*r22)));
j4eval[0]=x1631;
j4eval[1]=IKsign(x1631);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1630))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1632=cj5*cj5;
IkReal x1633=((1.0)*r21);
IkReal x1634=(cj5*sj5);
IkReal x1635=((1.0)*r20);
CheckValue<IkReal> x1636=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1632*x1633))+((r00*r20*x1632))+((r01*r21))+(((-1.0)*r01*x1634*x1635))+(((-1.0)*r00*x1633*x1634))+((r02*r22)))),-1);
if(!x1636.valid){
continue;
}
CheckValue<IkReal> x1637 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1635)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1636.value)))+(x1637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1638=IKsin(j4);
IkReal x1639=IKcos(j4);
IkReal x1640=((1.0)*cj0);
IkReal x1641=(cj5*r00);
IkReal x1642=(r11*sj5);
IkReal x1643=(r01*sj5);
IkReal x1644=(cj5*r20);
IkReal x1645=(r21*sj5);
IkReal x1646=(cj5*r10);
IkReal x1647=((1.0)*x1639);
IkReal x1648=((1.0)*x1638);
evalcond[0]=((((-1.0)*r22*x1647))+(((-1.0)*x1645*x1648))+((x1638*x1644)));
evalcond[1]=((((-1.0)*r22*x1648))+(((-1.0)*x1644*x1647))+((x1639*x1645)));
evalcond[2]=(sj0+(((-1.0)*x1643*x1648))+(((-1.0)*r02*x1647))+((x1638*x1641)));
evalcond[3]=((((-1.0)*r12*x1647))+(((-1.0)*x1642*x1648))+(((-1.0)*x1640))+((x1638*x1646)));
evalcond[4]=((((-1.0)*x1641*x1647))+(((-1.0)*x1640))+((x1639*x1643))+(((-1.0)*r02*x1648)));
evalcond[5]=((((-1.0)*x1646*x1647))+(((-1.0)*sj0))+(((-1.0)*r12*x1648))+((x1639*x1642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1649=((1.0)*sj5);
CheckValue<IkReal> x1650=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1649))+(((-1.0)*cj5*r01)))),-1);
if(!x1650.valid){
continue;
}
CheckValue<IkReal> x1651 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1649))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1650.value)))+(x1651.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1652=IKsin(j4);
IkReal x1653=IKcos(j4);
IkReal x1654=((1.0)*cj0);
IkReal x1655=(cj5*r00);
IkReal x1656=(r11*sj5);
IkReal x1657=(r01*sj5);
IkReal x1658=(cj5*r20);
IkReal x1659=(r21*sj5);
IkReal x1660=(cj5*r10);
IkReal x1661=((1.0)*x1653);
IkReal x1662=((1.0)*x1652);
evalcond[0]=((((-1.0)*r22*x1661))+((x1652*x1658))+(((-1.0)*x1659*x1662)));
evalcond[1]=((((-1.0)*r22*x1662))+(((-1.0)*x1658*x1661))+((x1653*x1659)));
evalcond[2]=(sj0+(((-1.0)*x1657*x1662))+(((-1.0)*r02*x1661))+((x1652*x1655)));
evalcond[3]=((((-1.0)*x1656*x1662))+(((-1.0)*r12*x1661))+(((-1.0)*x1654))+((x1652*x1660)));
evalcond[4]=((((-1.0)*x1655*x1661))+(((-1.0)*x1654))+(((-1.0)*r02*x1662))+((x1653*x1657)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1662))+(((-1.0)*x1660*x1661))+((x1653*x1656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1663=((1.0)*sj5);
CheckValue<IkReal> x1664=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1663)))),-1);
if(!x1664.valid){
continue;
}
CheckValue<IkReal> x1665 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1663))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1664.value)))+(x1665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1666=IKsin(j4);
IkReal x1667=IKcos(j4);
IkReal x1668=((1.0)*cj0);
IkReal x1669=(cj5*r00);
IkReal x1670=(r11*sj5);
IkReal x1671=(r01*sj5);
IkReal x1672=(cj5*r20);
IkReal x1673=(r21*sj5);
IkReal x1674=(cj5*r10);
IkReal x1675=((1.0)*x1667);
IkReal x1676=((1.0)*x1666);
evalcond[0]=(((x1666*x1672))+(((-1.0)*x1673*x1676))+(((-1.0)*r22*x1675)));
evalcond[1]=((((-1.0)*x1672*x1675))+((x1667*x1673))+(((-1.0)*r22*x1676)));
evalcond[2]=(sj0+(((-1.0)*r02*x1675))+(((-1.0)*x1671*x1676))+((x1666*x1669)));
evalcond[3]=(((x1666*x1674))+(((-1.0)*r12*x1675))+(((-1.0)*x1668))+(((-1.0)*x1670*x1676)));
evalcond[4]=((((-1.0)*r02*x1676))+((x1667*x1671))+(((-1.0)*x1669*x1675))+(((-1.0)*x1668)));
evalcond[5]=((((-1.0)*sj0))+((x1667*x1670))+(((-1.0)*r12*x1676))+(((-1.0)*x1674*x1675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.831164487664683)*py))+(((0.133213063666633)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.831164487664683)*px))+(((-0.133213063666633)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.831164487664683)*py))+(((0.133213063666633)*px))))+IKsqr(((((0.831164487664683)*px))+(((-0.133213063666633)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.831164487664683)*py))+(((0.133213063666633)*px))), ((((0.831164487664683)*px))+(((-0.133213063666633)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1677=IKsin(j0);
IkReal x1678=IKcos(j0);
evalcond[0]=((((0.188)*x1677))+(((1.173)*x1678))+(((-1.0)*px)));
evalcond[1]=((((1.173)*x1677))+(((-0.188)*x1678))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1679=((1.0)*sj5);
IkReal x1680=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1679)));
j4eval[0]=x1680;
j4eval[1]=IKsign(x1680);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1679))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1681=cj5*cj5;
IkReal x1682=((1.0)*r21);
IkReal x1683=(cj5*sj5);
IkReal x1684=((((-1.0)*r00*x1682*x1683))+((r01*r21))+(((-1.0)*r01*x1681*x1682))+((r00*r20*x1681))+((r02*r22))+(((-1.0)*r01*r20*x1683)));
j4eval[0]=x1684;
j4eval[1]=IKsign(x1684);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1682))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1685=cj5*cj5;
IkReal x1686=(cj5*r20);
IkReal x1687=((1.0)*sj5);
IkReal x1688=(r11*r21);
IkReal x1689=((((-1.0)*cj5*r10*r21*x1687))+x1688+((r12*r22))+(((-1.0)*r11*x1686*x1687))+((r10*r20*x1685))+(((-1.0)*x1685*x1688)));
j4eval[0]=x1689;
j4eval[1]=IKsign(x1689);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1686))+(((-1.0)*r21*sj0*x1687))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1690=cj5*cj5;
IkReal x1691=(cj5*r20);
IkReal x1692=((1.0)*sj5);
IkReal x1693=(r11*r21);
CheckValue<IkReal> x1694=IKPowWithIntegerCheck(IKsign((x1693+((r12*r22))+(((-1.0)*r11*x1691*x1692))+((r10*r20*x1690))+(((-1.0)*x1690*x1693))+(((-1.0)*cj5*r10*r21*x1692)))),-1);
if(!x1694.valid){
continue;
}
CheckValue<IkReal> x1695 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1692))+((sj0*x1691)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1694.value)))+(x1695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1696=IKsin(j4);
IkReal x1697=IKcos(j4);
IkReal x1698=(cj5*r00);
IkReal x1699=(r11*sj5);
IkReal x1700=(r01*sj5);
IkReal x1701=(cj5*r20);
IkReal x1702=(r21*sj5);
IkReal x1703=(cj5*r10);
IkReal x1704=((1.0)*x1697);
IkReal x1705=((1.0)*x1696);
evalcond[0]=((((-1.0)*x1702*x1705))+((x1696*x1701))+(((-1.0)*r22*x1704)));
evalcond[1]=(((x1697*x1702))+(((-1.0)*r22*x1705))+(((-1.0)*x1701*x1704)));
evalcond[2]=(sj0+(((-1.0)*r02*x1704))+(((-1.0)*x1700*x1705))+((x1696*x1698)));
evalcond[3]=(((x1697*x1700))+(((-1.0)*x1698*x1704))+cj0+(((-1.0)*r02*x1705)));
evalcond[4]=(sj0+(((-1.0)*x1703*x1704))+((x1697*x1699))+(((-1.0)*r12*x1705)));
evalcond[5]=(((x1696*x1703))+(((-1.0)*x1699*x1705))+(((-1.0)*cj0))+(((-1.0)*r12*x1704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1706=cj5*cj5;
IkReal x1707=((1.0)*r21);
IkReal x1708=(cj5*sj5);
CheckValue<IkReal> x1709 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1707))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1709.valid){
continue;
}
CheckValue<IkReal> x1710=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1707*x1708))+(((-1.0)*r01*x1706*x1707))+((r01*r21))+((r00*r20*x1706))+((r02*r22))+(((-1.0)*r01*r20*x1708)))),-1);
if(!x1710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1709.value)+(((1.5707963267949)*(x1710.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1711=IKsin(j4);
IkReal x1712=IKcos(j4);
IkReal x1713=(cj5*r00);
IkReal x1714=(r11*sj5);
IkReal x1715=(r01*sj5);
IkReal x1716=(cj5*r20);
IkReal x1717=(r21*sj5);
IkReal x1718=(cj5*r10);
IkReal x1719=((1.0)*x1712);
IkReal x1720=((1.0)*x1711);
evalcond[0]=((((-1.0)*x1717*x1720))+((x1711*x1716))+(((-1.0)*r22*x1719)));
evalcond[1]=((((-1.0)*r22*x1720))+((x1712*x1717))+(((-1.0)*x1716*x1719)));
evalcond[2]=((((-1.0)*x1715*x1720))+sj0+(((-1.0)*r02*x1719))+((x1711*x1713)));
evalcond[3]=(cj0+((x1712*x1715))+(((-1.0)*x1713*x1719))+(((-1.0)*r02*x1720)));
evalcond[4]=(sj0+((x1712*x1714))+(((-1.0)*r12*x1720))+(((-1.0)*x1718*x1719)));
evalcond[5]=(((x1711*x1718))+(((-1.0)*x1714*x1720))+(((-1.0)*r12*x1719))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1721=((1.0)*sj5);
CheckValue<IkReal> x1722=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1721)))),-1);
if(!x1722.valid){
continue;
}
CheckValue<IkReal> x1723 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1721)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1722.value)))+(x1723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1724=IKsin(j4);
IkReal x1725=IKcos(j4);
IkReal x1726=(cj5*r00);
IkReal x1727=(r11*sj5);
IkReal x1728=(r01*sj5);
IkReal x1729=(cj5*r20);
IkReal x1730=(r21*sj5);
IkReal x1731=(cj5*r10);
IkReal x1732=((1.0)*x1725);
IkReal x1733=((1.0)*x1724);
evalcond[0]=(((x1724*x1729))+(((-1.0)*x1730*x1733))+(((-1.0)*r22*x1732)));
evalcond[1]=(((x1725*x1730))+(((-1.0)*x1729*x1732))+(((-1.0)*r22*x1733)));
evalcond[2]=(sj0+((x1724*x1726))+(((-1.0)*x1728*x1733))+(((-1.0)*r02*x1732)));
evalcond[3]=(((x1725*x1728))+cj0+(((-1.0)*x1726*x1732))+(((-1.0)*r02*x1733)));
evalcond[4]=((((-1.0)*x1731*x1732))+sj0+((x1725*x1727))+(((-1.0)*r12*x1733)));
evalcond[5]=(((x1724*x1731))+(((-1.0)*r12*x1732))+(((-1.0)*x1727*x1733))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.07765023632681)*px))+(((1.10735989196489)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-5.07765023632681)*py))+(((1.10735989196489)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.07765023632681)*px))+(((1.10735989196489)*py))))+IKsqr(((((-5.07765023632681)*py))+(((1.10735989196489)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.07765023632681)*px))+(((1.10735989196489)*py))), ((((-5.07765023632681)*py))+(((1.10735989196489)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1734=IKsin(j0);
IkReal x1735=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.041)*x1735))+(((0.188)*x1734)));
evalcond[1]=((((-0.188)*x1735))+(((-1.0)*py))+(((0.041)*x1734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1736=((1.0)*sj5);
IkReal x1737=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1736)));
j4eval[0]=x1737;
j4eval[1]=IKsign(x1737);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1736))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1738=((1.0)*sj5);
IkReal x1739=((((-1.0)*r00*x1738))+(((-1.0)*cj5*r01)));
j4eval[0]=x1739;
j4eval[1]=IKsign(x1739);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1738))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1740=cj5*cj5;
IkReal x1741=((1.0)*r21);
IkReal x1742=(cj5*sj5);
IkReal x1743=((1.0)*r20);
IkReal x1744=((((-1.0)*r01*x1740*x1741))+(((-1.0)*r00*x1741*x1742))+((r01*r21))+((r00*r20*x1740))+((r02*r22))+(((-1.0)*r01*x1742*x1743)));
j4eval[0]=x1744;
j4eval[1]=IKsign(x1744);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1743))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1745=cj5*cj5;
IkReal x1746=((1.0)*r21);
IkReal x1747=(cj5*sj5);
IkReal x1748=((1.0)*r20);
CheckValue<IkReal> x1749=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1747*x1748))+(((-1.0)*r00*x1746*x1747))+(((-1.0)*r01*x1745*x1746))+((r00*r20*x1745))+((r02*r22)))),-1);
if(!x1749.valid){
continue;
}
CheckValue<IkReal> x1750 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1748)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1749.value)))+(x1750.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1751=IKsin(j4);
IkReal x1752=IKcos(j4);
IkReal x1753=((1.0)*cj0);
IkReal x1754=(cj5*r00);
IkReal x1755=(r11*sj5);
IkReal x1756=(r01*sj5);
IkReal x1757=(cj5*r20);
IkReal x1758=(r21*sj5);
IkReal x1759=(cj5*r10);
IkReal x1760=((1.0)*x1752);
IkReal x1761=((1.0)*x1751);
evalcond[0]=((((-1.0)*x1758*x1761))+(((-1.0)*r22*x1760))+((x1751*x1757)));
evalcond[1]=(((x1752*x1758))+(((-1.0)*x1757*x1760))+(((-1.0)*r22*x1761)));
evalcond[2]=(sj0+(((-1.0)*r02*x1760))+(((-1.0)*x1756*x1761))+((x1751*x1754)));
evalcond[3]=((((-1.0)*x1755*x1761))+(((-1.0)*r12*x1760))+(((-1.0)*x1753))+((x1751*x1759)));
evalcond[4]=(((x1752*x1756))+(((-1.0)*x1754*x1760))+(((-1.0)*r02*x1761))+(((-1.0)*x1753)));
evalcond[5]=(((x1752*x1755))+(((-1.0)*sj0))+(((-1.0)*x1759*x1760))+(((-1.0)*r12*x1761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1762=((1.0)*sj5);
CheckValue<IkReal> x1763 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1762))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1763.valid){
continue;
}
CheckValue<IkReal> x1764=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1762))+(((-1.0)*cj5*r01)))),-1);
if(!x1764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1763.value)+(((1.5707963267949)*(x1764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1765=IKsin(j4);
IkReal x1766=IKcos(j4);
IkReal x1767=((1.0)*cj0);
IkReal x1768=(cj5*r00);
IkReal x1769=(r11*sj5);
IkReal x1770=(r01*sj5);
IkReal x1771=(cj5*r20);
IkReal x1772=(r21*sj5);
IkReal x1773=(cj5*r10);
IkReal x1774=((1.0)*x1766);
IkReal x1775=((1.0)*x1765);
evalcond[0]=((((-1.0)*x1772*x1775))+((x1765*x1771))+(((-1.0)*r22*x1774)));
evalcond[1]=(((x1766*x1772))+(((-1.0)*x1771*x1774))+(((-1.0)*r22*x1775)));
evalcond[2]=(sj0+((x1765*x1768))+(((-1.0)*r02*x1774))+(((-1.0)*x1770*x1775)));
evalcond[3]=((((-1.0)*x1767))+((x1765*x1773))+(((-1.0)*r12*x1774))+(((-1.0)*x1769*x1775)));
evalcond[4]=((((-1.0)*x1767))+((x1766*x1770))+(((-1.0)*r02*x1775))+(((-1.0)*x1768*x1774)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1773*x1774))+((x1766*x1769))+(((-1.0)*r12*x1775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1776=((1.0)*sj5);
CheckValue<IkReal> x1777=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1776)))),-1);
if(!x1777.valid){
continue;
}
CheckValue<IkReal> x1778 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1776))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1777.value)))+(x1778.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1779=IKsin(j4);
IkReal x1780=IKcos(j4);
IkReal x1781=((1.0)*cj0);
IkReal x1782=(cj5*r00);
IkReal x1783=(r11*sj5);
IkReal x1784=(r01*sj5);
IkReal x1785=(cj5*r20);
IkReal x1786=(r21*sj5);
IkReal x1787=(cj5*r10);
IkReal x1788=((1.0)*x1780);
IkReal x1789=((1.0)*x1779);
evalcond[0]=((((-1.0)*r22*x1788))+((x1779*x1785))+(((-1.0)*x1786*x1789)));
evalcond[1]=((((-1.0)*r22*x1789))+(((-1.0)*x1785*x1788))+((x1780*x1786)));
evalcond[2]=(sj0+((x1779*x1782))+(((-1.0)*x1784*x1789))+(((-1.0)*r02*x1788)));
evalcond[3]=((((-1.0)*x1783*x1789))+(((-1.0)*x1781))+(((-1.0)*r12*x1788))+((x1779*x1787)));
evalcond[4]=((((-1.0)*x1781))+((x1780*x1784))+(((-1.0)*x1782*x1788))+(((-1.0)*r02*x1789)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1787*x1788))+(((-1.0)*r12*x1789))+((x1780*x1783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1790=((1.0)*sj5);
IkReal x1791=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x1790))+(((-1.0)*r11*x1791)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1791))+(((-1.0)*r00*x1790)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1790))+(((-1.0)*r11*x1791))))+IKsqr(((((-1.0)*r01*x1791))+(((-1.0)*r00*x1790))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x1790))+(((-1.0)*r11*x1791))), ((((-1.0)*r01*x1791))+(((-1.0)*r00*x1790))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1792=IKsin(j0);
IkReal x1793=IKcos(j0);
IkReal x1794=((1.0)*cj5);
IkReal x1795=((1.0)*sj5);
IkReal x1796=((0.127)*sj5);
IkReal x1797=((0.127)*cj5);
evalcond[0]=((((-1.0)*r01*x1794))+(((-1.0)*r00*x1795))+(((-1.0)*x1793)));
evalcond[1]=((((-1.0)*r10*x1795))+(((-1.0)*r11*x1794))+(((-1.0)*x1792)));
evalcond[2]=(((r00*x1796))+(((-1.0)*px))+(((0.188)*x1792))+((r01*x1797)));
evalcond[3]=(((r10*x1796))+(((-0.188)*x1793))+(((-1.0)*py))+((r11*x1797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1798=((1.0)*cj5);
IkReal x1799=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1798)));
j4eval[0]=x1799;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x1798))))));
j4eval[2]=IKsign(x1799);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1800=((1.0)*sj5);
IkReal x1801=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1800)));
j4eval[0]=x1801;
j4eval[1]=IKsign(x1801);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1800))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1802=cj5*cj5;
IkReal x1803=r21*r21;
IkReal x1804=(cj5*r20);
IkReal x1805=(r21*sj5);
IkReal x1806=((r22*r22)+(((-2.0)*x1804*x1805))+x1803+(((-1.0)*x1802*x1803))+((x1802*(r20*r20))));
j4eval[0]=x1806;
j4eval[1]=IKsign(x1806);
j4eval[2]=((IKabs(r22))+(IKabs((x1804+(((-1.0)*x1805))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1807=cj5*cj5;
IkReal x1808=r21*r21;
IkReal x1809=(cj5*r20);
IkReal x1810=(r21*sj5);
CheckValue<IkReal> x1811 = IKatan2WithCheck(IkReal(r22),IkReal((x1809+(((-1.0)*x1810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1811.valid){
continue;
}
CheckValue<IkReal> x1812=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x1807*(r20*r20)))+(((-1.0)*x1807*x1808))+x1808+(((-2.0)*x1809*x1810)))),-1);
if(!x1812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1811.value)+(((1.5707963267949)*(x1812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1813=IKsin(j4);
IkReal x1814=IKcos(j4);
IkReal x1815=(cj5*r00);
IkReal x1816=(r11*sj5);
IkReal x1817=(r01*sj5);
IkReal x1818=(cj5*r20);
IkReal x1819=(cj5*r10);
IkReal x1820=(r21*sj5);
IkReal x1821=((1.0)*x1814);
IkReal x1822=((1.0)*x1813);
evalcond[0]=(((x1813*x1818))+(((-1.0)*r22*x1821))+(((-1.0)*x1820*x1822)));
evalcond[1]=(((x1814*x1817))+(((-1.0)*r02*x1822))+(((-1.0)*x1815*x1821)));
evalcond[2]=((((-1.0)*x1819*x1821))+(((-1.0)*r12*x1822))+((x1814*x1816)));
evalcond[3]=(sj0+(((-1.0)*x1817*x1822))+((x1813*x1815))+(((-1.0)*r02*x1821)));
evalcond[4]=((1.0)+(((-1.0)*x1818*x1821))+(((-1.0)*r22*x1822))+((x1814*x1820)));
evalcond[5]=(((x1813*x1819))+(((-1.0)*r12*x1821))+(((-1.0)*x1816*x1822))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1823=((1.0)*sj5);
CheckValue<IkReal> x1824=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1823)))),-1);
if(!x1824.valid){
continue;
}
CheckValue<IkReal> x1825 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1824.value)))+(x1825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1826=IKsin(j4);
IkReal x1827=IKcos(j4);
IkReal x1828=(cj5*r00);
IkReal x1829=(r11*sj5);
IkReal x1830=(r01*sj5);
IkReal x1831=(cj5*r20);
IkReal x1832=(cj5*r10);
IkReal x1833=(r21*sj5);
IkReal x1834=((1.0)*x1827);
IkReal x1835=((1.0)*x1826);
evalcond[0]=(((x1826*x1831))+(((-1.0)*x1833*x1835))+(((-1.0)*r22*x1834)));
evalcond[1]=(((x1827*x1830))+(((-1.0)*x1828*x1834))+(((-1.0)*r02*x1835)));
evalcond[2]=((((-1.0)*x1832*x1834))+((x1827*x1829))+(((-1.0)*r12*x1835)));
evalcond[3]=(sj0+((x1826*x1828))+(((-1.0)*r02*x1834))+(((-1.0)*x1830*x1835)));
evalcond[4]=((1.0)+((x1827*x1833))+(((-1.0)*x1831*x1834))+(((-1.0)*r22*x1835)));
evalcond[5]=(((x1826*x1832))+(((-1.0)*r12*x1834))+(((-1.0)*x1829*x1835))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1836=((1.0)*cj5);
CheckValue<IkReal> x1837 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x1836)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1837.valid){
continue;
}
CheckValue<IkReal> x1838=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1836)))),-1);
if(!x1838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1837.value)+(((1.5707963267949)*(x1838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1839=IKsin(j4);
IkReal x1840=IKcos(j4);
IkReal x1841=(cj5*r00);
IkReal x1842=(r11*sj5);
IkReal x1843=(r01*sj5);
IkReal x1844=(cj5*r20);
IkReal x1845=(cj5*r10);
IkReal x1846=(r21*sj5);
IkReal x1847=((1.0)*x1840);
IkReal x1848=((1.0)*x1839);
evalcond[0]=((((-1.0)*r22*x1847))+((x1839*x1844))+(((-1.0)*x1846*x1848)));
evalcond[1]=((((-1.0)*x1841*x1847))+(((-1.0)*r02*x1848))+((x1840*x1843)));
evalcond[2]=(((x1840*x1842))+(((-1.0)*r12*x1848))+(((-1.0)*x1845*x1847)));
evalcond[3]=((((-1.0)*x1843*x1848))+sj0+(((-1.0)*r02*x1847))+((x1839*x1841)));
evalcond[4]=((1.0)+(((-1.0)*r22*x1848))+((x1840*x1846))+(((-1.0)*x1844*x1847)));
evalcond[5]=((((-1.0)*x1842*x1848))+((x1839*x1845))+(((-1.0)*r12*x1847))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.59122856339612)*py))+(((0.528535282541468)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.59122856339612)*px))+(((-0.528535282541468)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.59122856339612)*py))+(((0.528535282541468)*px))))+IKsqr(((((-1.59122856339612)*px))+(((-0.528535282541468)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.59122856339612)*py))+(((0.528535282541468)*px))), ((((-1.59122856339612)*px))+(((-0.528535282541468)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1849=IKsin(j0);
IkReal x1850=IKcos(j0);
evalcond[0]=((((0.188)*x1849))+(((-1.0)*px))+(((-0.566)*x1850)));
evalcond[1]=((((-0.188)*x1850))+(((-0.566)*x1849))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1851=((1.0)*sj5);
IkReal x1852=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1851)));
j4eval[0]=x1852;
j4eval[1]=IKsign(x1852);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1851))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1853=((1.0)*sj5);
IkReal x1854=((((-1.0)*r00*x1853))+(((-1.0)*cj5*r01)));
j4eval[0]=x1854;
j4eval[1]=IKsign(x1854);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1853))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1855=cj5*cj5;
IkReal x1856=((1.0)*r21);
IkReal x1857=(cj5*sj5);
IkReal x1858=((1.0)*r20);
IkReal x1859=(((r01*r21))+(((-1.0)*r01*x1855*x1856))+(((-1.0)*r01*x1857*x1858))+((r00*r20*x1855))+((r02*r22))+(((-1.0)*r00*x1856*x1857)));
j4eval[0]=x1859;
j4eval[1]=IKsign(x1859);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x1858))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1860=cj5*cj5;
IkReal x1861=((1.0)*r21);
IkReal x1862=(cj5*sj5);
IkReal x1863=((1.0)*r20);
CheckValue<IkReal> x1864 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x1863))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1864.valid){
continue;
}
CheckValue<IkReal> x1865=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1862*x1863))+((r01*r21))+((r00*r20*x1860))+(((-1.0)*r01*x1860*x1861))+(((-1.0)*r00*x1861*x1862))+((r02*r22)))),-1);
if(!x1865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1864.value)+(((1.5707963267949)*(x1865.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1866=IKsin(j4);
IkReal x1867=IKcos(j4);
IkReal x1868=((1.0)*cj0);
IkReal x1869=(cj5*r00);
IkReal x1870=(r11*sj5);
IkReal x1871=(r01*sj5);
IkReal x1872=(cj5*r20);
IkReal x1873=(r21*sj5);
IkReal x1874=(cj5*r10);
IkReal x1875=((1.0)*x1867);
IkReal x1876=((1.0)*x1866);
evalcond[0]=(((x1866*x1872))+(((-1.0)*x1873*x1876))+(((-1.0)*r22*x1875)));
evalcond[1]=((((-1.0)*x1872*x1875))+(((-1.0)*r22*x1876))+((x1867*x1873)));
evalcond[2]=(sj0+(((-1.0)*r02*x1875))+((x1866*x1869))+(((-1.0)*x1871*x1876)));
evalcond[3]=(((x1866*x1874))+(((-1.0)*x1870*x1876))+(((-1.0)*r12*x1875))+(((-1.0)*x1868)));
evalcond[4]=((((-1.0)*x1869*x1875))+(((-1.0)*r02*x1876))+(((-1.0)*x1868))+((x1867*x1871)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1874*x1875))+(((-1.0)*r12*x1876))+((x1867*x1870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1877=((1.0)*sj5);
CheckValue<IkReal> x1878 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1878.valid){
continue;
}
CheckValue<IkReal> x1879=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1877))+(((-1.0)*cj5*r01)))),-1);
if(!x1879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1878.value)+(((1.5707963267949)*(x1879.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1880=IKsin(j4);
IkReal x1881=IKcos(j4);
IkReal x1882=((1.0)*cj0);
IkReal x1883=(cj5*r00);
IkReal x1884=(r11*sj5);
IkReal x1885=(r01*sj5);
IkReal x1886=(cj5*r20);
IkReal x1887=(r21*sj5);
IkReal x1888=(cj5*r10);
IkReal x1889=((1.0)*x1881);
IkReal x1890=((1.0)*x1880);
evalcond[0]=(((x1880*x1886))+(((-1.0)*r22*x1889))+(((-1.0)*x1887*x1890)));
evalcond[1]=(((x1881*x1887))+(((-1.0)*r22*x1890))+(((-1.0)*x1886*x1889)));
evalcond[2]=(sj0+((x1880*x1883))+(((-1.0)*r02*x1889))+(((-1.0)*x1885*x1890)));
evalcond[3]=(((x1880*x1888))+(((-1.0)*r12*x1889))+(((-1.0)*x1882))+(((-1.0)*x1884*x1890)));
evalcond[4]=((((-1.0)*r02*x1890))+((x1881*x1885))+(((-1.0)*x1883*x1889))+(((-1.0)*x1882)));
evalcond[5]=((((-1.0)*sj0))+((x1881*x1884))+(((-1.0)*x1888*x1889))+(((-1.0)*r12*x1890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1891=((1.0)*sj5);
CheckValue<IkReal> x1892=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1891)))),-1);
if(!x1892.valid){
continue;
}
CheckValue<IkReal> x1893 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1891)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1892.value)))+(x1893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1894=IKsin(j4);
IkReal x1895=IKcos(j4);
IkReal x1896=((1.0)*cj0);
IkReal x1897=(cj5*r00);
IkReal x1898=(r11*sj5);
IkReal x1899=(r01*sj5);
IkReal x1900=(cj5*r20);
IkReal x1901=(r21*sj5);
IkReal x1902=(cj5*r10);
IkReal x1903=((1.0)*x1895);
IkReal x1904=((1.0)*x1894);
evalcond[0]=((((-1.0)*x1901*x1904))+(((-1.0)*r22*x1903))+((x1894*x1900)));
evalcond[1]=((((-1.0)*x1900*x1903))+(((-1.0)*r22*x1904))+((x1895*x1901)));
evalcond[2]=((((-1.0)*x1899*x1904))+sj0+((x1894*x1897))+(((-1.0)*r02*x1903)));
evalcond[3]=((((-1.0)*x1898*x1904))+(((-1.0)*r12*x1903))+((x1894*x1902))+(((-1.0)*x1896)));
evalcond[4]=(((x1895*x1899))+(((-1.0)*x1896))+(((-1.0)*x1897*x1903))+(((-1.0)*r02*x1904)));
evalcond[5]=((((-1.0)*x1902*x1903))+(((-1.0)*sj0))+(((-1.0)*r12*x1904))+((x1895*x1898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1905=IKsin(j0);
IkReal x1906=IKcos(j0);
IkReal x1907=((1.0)*cj5);
IkReal x1908=((1.0)*sj5);
IkReal x1909=((0.127)*sj5);
IkReal x1910=((0.127)*cj5);
evalcond[0]=(x1906+(((-1.0)*r01*x1907))+(((-1.0)*r00*x1908)));
evalcond[1]=((((-1.0)*r10*x1908))+(((-1.0)*r11*x1907))+x1905);
evalcond[2]=(((r00*x1909))+((r01*x1910))+(((0.188)*x1905))+(((-1.0)*px)));
evalcond[3]=(((r11*x1910))+(((-1.0)*py))+(((-0.188)*x1906))+((r10*x1909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1911=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1911;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x1911);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1912=((1.0)*sj5);
IkReal x1913=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1912)));
j4eval[0]=x1913;
j4eval[1]=IKsign(x1913);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1912)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1914=r21*r21;
IkReal x1915=cj5*cj5;
IkReal x1916=(cj5*r20);
IkReal x1917=(r21*sj5);
IkReal x1918=(((x1914*x1915))+(((-1.0)*x1914))+(((-1.0)*(r22*r22)))+(((2.0)*x1916*x1917))+(((-1.0)*x1915*(r20*r20))));
j4eval[0]=x1918;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*x1917))+x1916))));
j4eval[2]=IKsign(x1918);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1919=r21*r21;
IkReal x1920=cj5*cj5;
IkReal x1921=(cj5*r20);
IkReal x1922=(r21*sj5);
CheckValue<IkReal> x1923=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1919))+(((-1.0)*x1920*(r20*r20)))+(((-1.0)*(r22*r22)))+((x1919*x1920))+(((2.0)*x1921*x1922)))),-1);
if(!x1923.valid){
continue;
}
CheckValue<IkReal> x1924 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x1922))+x1921)),IKFAST_ATAN2_MAGTHRESH);
if(!x1924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1923.value)))+(x1924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1925=IKsin(j4);
IkReal x1926=IKcos(j4);
IkReal x1927=(cj5*r00);
IkReal x1928=(r11*sj5);
IkReal x1929=(r01*sj5);
IkReal x1930=(cj5*r20);
IkReal x1931=(cj5*r10);
IkReal x1932=(r21*sj5);
IkReal x1933=((1.0)*x1926);
IkReal x1934=((1.0)*x1925);
evalcond[0]=((((-1.0)*r22*x1933))+((x1925*x1930))+(((-1.0)*x1932*x1934)));
evalcond[1]=(((x1926*x1929))+(((-1.0)*x1927*x1933))+(((-1.0)*r02*x1934)));
evalcond[2]=((((-1.0)*r12*x1934))+(((-1.0)*x1931*x1933))+((x1926*x1928)));
evalcond[3]=(sj0+(((-1.0)*x1929*x1934))+((x1925*x1927))+(((-1.0)*r02*x1933)));
evalcond[4]=((-1.0)+(((-1.0)*x1930*x1933))+(((-1.0)*r22*x1934))+((x1926*x1932)));
evalcond[5]=((((-1.0)*x1928*x1934))+(((-1.0)*r12*x1933))+((x1925*x1931))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1935=((1.0)*sj5);
CheckValue<IkReal> x1936=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1935)))),-1);
if(!x1936.valid){
continue;
}
CheckValue<IkReal> x1937 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1936.value)))+(x1937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1938=IKsin(j4);
IkReal x1939=IKcos(j4);
IkReal x1940=(cj5*r00);
IkReal x1941=(r11*sj5);
IkReal x1942=(r01*sj5);
IkReal x1943=(cj5*r20);
IkReal x1944=(cj5*r10);
IkReal x1945=(r21*sj5);
IkReal x1946=((1.0)*x1939);
IkReal x1947=((1.0)*x1938);
evalcond[0]=(((x1938*x1943))+(((-1.0)*r22*x1946))+(((-1.0)*x1945*x1947)));
evalcond[1]=(((x1939*x1942))+(((-1.0)*x1940*x1946))+(((-1.0)*r02*x1947)));
evalcond[2]=(((x1939*x1941))+(((-1.0)*x1944*x1946))+(((-1.0)*r12*x1947)));
evalcond[3]=(((x1938*x1940))+sj0+(((-1.0)*x1942*x1947))+(((-1.0)*r02*x1946)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x1947))+(((-1.0)*x1943*x1946))+((x1939*x1945)));
evalcond[5]=(((x1938*x1944))+(((-1.0)*r12*x1946))+(((-1.0)*x1941*x1947))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1948=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1948.valid){
continue;
}
CheckValue<IkReal> x1949 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1948.value)))+(x1949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1950=IKsin(j4);
IkReal x1951=IKcos(j4);
IkReal x1952=(cj5*r00);
IkReal x1953=(r11*sj5);
IkReal x1954=(r01*sj5);
IkReal x1955=(cj5*r20);
IkReal x1956=(cj5*r10);
IkReal x1957=(r21*sj5);
IkReal x1958=((1.0)*x1951);
IkReal x1959=((1.0)*x1950);
evalcond[0]=((((-1.0)*r22*x1958))+(((-1.0)*x1957*x1959))+((x1950*x1955)));
evalcond[1]=((((-1.0)*x1952*x1958))+(((-1.0)*r02*x1959))+((x1951*x1954)));
evalcond[2]=(((x1951*x1953))+(((-1.0)*r12*x1959))+(((-1.0)*x1956*x1958)));
evalcond[3]=(sj0+(((-1.0)*x1954*x1959))+(((-1.0)*r02*x1958))+((x1950*x1952)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x1959))+((x1951*x1957))+(((-1.0)*x1955*x1958)));
evalcond[5]=(((x1950*x1956))+(((-1.0)*x1953*x1959))+(((-1.0)*r12*x1958))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.528535282541468)*px))+(((1.59122856339612)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.59122856339612)*px))+(((-0.528535282541468)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.528535282541468)*px))+(((1.59122856339612)*py))))+IKsqr(((((1.59122856339612)*px))+(((-0.528535282541468)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.528535282541468)*px))+(((1.59122856339612)*py))), ((((1.59122856339612)*px))+(((-0.528535282541468)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1960=IKsin(j0);
IkReal x1961=IKcos(j0);
evalcond[0]=((((0.188)*x1960))+(((-1.0)*px))+(((0.566)*x1961)));
evalcond[1]=((((-1.0)*py))+(((0.566)*x1960))+(((-0.188)*x1961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1962=((1.0)*sj5);
IkReal x1963=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1962)));
j4eval[0]=x1963;
j4eval[1]=IKsign(x1963);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1962)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1964=cj5*cj5;
IkReal x1965=((1.0)*r21);
IkReal x1966=(cj5*sj5);
IkReal x1967=(((r01*r21))+(((-1.0)*r01*r20*x1966))+(((-1.0)*r00*x1965*x1966))+((r02*r22))+(((-1.0)*r01*x1964*x1965))+((r00*r20*x1964)));
j4eval[0]=x1967;
j4eval[1]=IKsign(x1967);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1965)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1968=cj5*cj5;
IkReal x1969=(cj5*r20);
IkReal x1970=((1.0)*sj5);
IkReal x1971=(r11*r21);
IkReal x1972=((((-1.0)*r11*x1969*x1970))+((r12*r22))+x1971+(((-1.0)*x1968*x1971))+(((-1.0)*cj5*r10*r21*x1970))+((r10*r20*x1968)));
j4eval[0]=x1972;
j4eval[1]=IKsign(x1972);
j4eval[2]=((IKabs((((sj0*x1969))+(((-1.0)*r21*sj0*x1970)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1973=cj5*cj5;
IkReal x1974=(cj5*r20);
IkReal x1975=((1.0)*sj5);
IkReal x1976=(r11*r21);
CheckValue<IkReal> x1977=IKPowWithIntegerCheck(IKsign((((r10*r20*x1973))+((r12*r22))+(((-1.0)*r11*x1974*x1975))+(((-1.0)*x1973*x1976))+x1976+(((-1.0)*cj5*r10*r21*x1975)))),-1);
if(!x1977.valid){
continue;
}
CheckValue<IkReal> x1978 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1974))+(((-1.0)*r21*sj0*x1975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1977.value)))+(x1978.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1979=IKsin(j4);
IkReal x1980=IKcos(j4);
IkReal x1981=(cj5*r00);
IkReal x1982=(r11*sj5);
IkReal x1983=(r01*sj5);
IkReal x1984=(cj5*r20);
IkReal x1985=(r21*sj5);
IkReal x1986=(cj5*r10);
IkReal x1987=((1.0)*x1980);
IkReal x1988=((1.0)*x1979);
evalcond[0]=((((-1.0)*x1985*x1988))+((x1979*x1984))+(((-1.0)*r22*x1987)));
evalcond[1]=((((-1.0)*x1984*x1987))+((x1980*x1985))+(((-1.0)*r22*x1988)));
evalcond[2]=(sj0+(((-1.0)*x1983*x1988))+(((-1.0)*r02*x1987))+((x1979*x1981)));
evalcond[3]=((((-1.0)*x1981*x1987))+cj0+(((-1.0)*r02*x1988))+((x1980*x1983)));
evalcond[4]=((((-1.0)*x1986*x1987))+sj0+((x1980*x1982))+(((-1.0)*r12*x1988)));
evalcond[5]=((((-1.0)*r12*x1987))+((x1979*x1986))+(((-1.0)*x1982*x1988))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1989=cj5*cj5;
IkReal x1990=((1.0)*r21);
IkReal x1991=(cj5*sj5);
CheckValue<IkReal> x1992 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1990)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1992.valid){
continue;
}
CheckValue<IkReal> x1993=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x1991))+(((-1.0)*r01*x1989*x1990))+((r01*r21))+((r00*r20*x1989))+(((-1.0)*r00*x1990*x1991))+((r02*r22)))),-1);
if(!x1993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1992.value)+(((1.5707963267949)*(x1993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1994=IKsin(j4);
IkReal x1995=IKcos(j4);
IkReal x1996=(cj5*r00);
IkReal x1997=(r11*sj5);
IkReal x1998=(r01*sj5);
IkReal x1999=(cj5*r20);
IkReal x2000=(r21*sj5);
IkReal x2001=(cj5*r10);
IkReal x2002=((1.0)*x1995);
IkReal x2003=((1.0)*x1994);
evalcond[0]=((((-1.0)*r22*x2002))+((x1994*x1999))+(((-1.0)*x2000*x2003)));
evalcond[1]=((((-1.0)*r22*x2003))+((x1995*x2000))+(((-1.0)*x1999*x2002)));
evalcond[2]=((((-1.0)*x1998*x2003))+sj0+((x1994*x1996))+(((-1.0)*r02*x2002)));
evalcond[3]=(cj0+((x1995*x1998))+(((-1.0)*r02*x2003))+(((-1.0)*x1996*x2002)));
evalcond[4]=(sj0+(((-1.0)*r12*x2003))+((x1995*x1997))+(((-1.0)*x2001*x2002)));
evalcond[5]=((((-1.0)*r12*x2002))+((x1994*x2001))+(((-1.0)*x1997*x2003))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2004=((1.0)*sj5);
CheckValue<IkReal> x2005 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2004))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2005.valid){
continue;
}
CheckValue<IkReal> x2006=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2004)))),-1);
if(!x2006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2005.value)+(((1.5707963267949)*(x2006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2007=IKsin(j4);
IkReal x2008=IKcos(j4);
IkReal x2009=(cj5*r00);
IkReal x2010=(r11*sj5);
IkReal x2011=(r01*sj5);
IkReal x2012=(cj5*r20);
IkReal x2013=(r21*sj5);
IkReal x2014=(cj5*r10);
IkReal x2015=((1.0)*x2008);
IkReal x2016=((1.0)*x2007);
evalcond[0]=((((-1.0)*x2013*x2016))+((x2007*x2012))+(((-1.0)*r22*x2015)));
evalcond[1]=(((x2008*x2013))+(((-1.0)*x2012*x2015))+(((-1.0)*r22*x2016)));
evalcond[2]=(sj0+((x2007*x2009))+(((-1.0)*x2011*x2016))+(((-1.0)*r02*x2015)));
evalcond[3]=((((-1.0)*x2009*x2015))+cj0+((x2008*x2011))+(((-1.0)*r02*x2016)));
evalcond[4]=(sj0+(((-1.0)*x2014*x2015))+((x2008*x2010))+(((-1.0)*r12*x2016)));
evalcond[5]=((((-1.0)*x2010*x2016))+(((-1.0)*r12*x2015))+((x2007*x2014))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2017=cj1*cj1;
IkReal x2018=(cj1*sj2);
IkReal x2019=(cj2*sj1);
IkReal x2020=((250.0)*py);
IkReal x2021=(r00*sj5);
IkReal x2022=(cj1*sj1);
IkReal x2023=(cj5*r01);
IkReal x2024=((31.75)*r10*sj5);
IkReal x2025=(sj2*x2017);
IkReal x2026=((31.75)*cj5*r11);
CheckValue<IkReal> x2027=IKPowWithIntegerCheck(((((141.5)*cj2*sj2))+(((141.5)*x2022))+(((-151.75)*cj1*x2019))+(((-283.0)*cj2*x2025))+(((-151.75)*x2025))+(((-283.0)*cj1*cj2*x2019))),-1);
if(!x2027.valid){
continue;
}
CheckValue<IkReal> x2028=IKPowWithIntegerCheck((x2019+x2018),-1);
if(!x2028.valid){
continue;
}
if( IKabs(((x2027.value)*((((x2019*x2020))+(((47.0)*x2023))+(((47.0)*x2021))+((x2018*x2020))+(((-1.0)*x2019*x2024))+(((-1.0)*x2019*x2026))+(((-1.0)*x2018*x2026))+(((-1.0)*x2018*x2024)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2028.value)*((x2021+x2023)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2027.value)*((((x2019*x2020))+(((47.0)*x2023))+(((47.0)*x2021))+((x2018*x2020))+(((-1.0)*x2019*x2024))+(((-1.0)*x2019*x2026))+(((-1.0)*x2018*x2026))+(((-1.0)*x2018*x2024))))))+IKsqr(((x2028.value)*((x2021+x2023))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x2027.value)*((((x2019*x2020))+(((47.0)*x2023))+(((47.0)*x2021))+((x2018*x2020))+(((-1.0)*x2019*x2024))+(((-1.0)*x2019*x2026))+(((-1.0)*x2018*x2026))+(((-1.0)*x2018*x2024))))), ((x2028.value)*((x2021+x2023))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2029=IKcos(j0);
IkReal x2030=IKsin(j0);
IkReal x2031=((1.0)*cj5);
IkReal x2032=(cj2*sj1);
IkReal x2033=((1.0)*sj5);
IkReal x2034=(sj1*sj2);
IkReal x2035=((0.127)*sj5);
IkReal x2036=((0.127)*cj5);
IkReal x2037=(cj1*x2029);
IkReal x2038=((0.566)*x2030);
IkReal x2039=(cj1*x2030);
evalcond[0]=(((sj2*x2037))+(((-1.0)*r00*x2033))+(((-1.0)*r01*x2031))+((x2029*x2032)));
evalcond[1]=(((sj2*x2039))+((x2030*x2032))+(((-1.0)*r11*x2031))+(((-1.0)*r10*x2033)));
evalcond[2]=(((r00*x2035))+((r01*x2036))+(((-0.566)*cj2*x2037))+(((0.566)*x2029*x2034))+(((-1.0)*px))+(((0.188)*x2030))+(((-0.607)*x2037)));
evalcond[3]=((((-1.0)*cj1*cj2*x2038))+((x2034*x2038))+((r10*x2035))+(((-0.188)*x2029))+(((-1.0)*py))+(((-0.607)*x2039))+((r11*x2036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2040=((1.0)*sj5);
IkReal x2041=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2040)));
j4eval[0]=x2041;
j4eval[1]=IKsign(x2041);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2040))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2042=((1.0)*sj5);
IkReal x2043=((((-1.0)*r00*x2042))+(((-1.0)*cj5*r01)));
j4eval[0]=x2043;
j4eval[1]=IKsign(x2043);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x2042))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2044=((1.0)*sj5);
IkReal x2045=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2045;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x2044))+(((-1.0)*cj0*r01*x2044)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x2045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2047 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2047)==0){
continue;
}
IkReal x2046=pow(x2047,-0.5);
CheckValue<IkReal> x2048 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2048.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2048.value));
IkReal gconst79=((-1.0)*r21*x2046);
IkReal gconst80=(r20*x2046);
CheckValue<IkReal> x2049 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2049.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2049.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2052 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2052.valid){
continue;
}
IkReal x2050=((-1.0)*(x2052.value));
IkReal x2051=x2046;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2050;
IkReal gconst78=x2050;
IkReal gconst79=((-1.0)*r21*x2051);
IkReal gconst80=(r20*x2051);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2055 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2055.valid){
continue;
}
IkReal x2053=((-1.0)*(x2055.value));
IkReal x2054=x2046;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2053;
IkReal gconst78=x2053;
IkReal gconst79=((-1.0)*r21*x2054);
IkReal gconst80=(r20*x2054);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2058 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2058.valid){
continue;
}
IkReal x2056=((-1.0)*(x2058.value));
IkReal x2057=x2046;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2056;
IkReal gconst78=x2056;
IkReal gconst79=((-1.0)*r21*x2057);
IkReal gconst80=(r20*x2057);
IkReal x2059=r22*r22;
CheckValue<IkReal> x2062=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2059))),-1);
if(!x2062.valid){
continue;
}
IkReal x2060=x2062.value;
IkReal x2061=(((x2060*(r20*r20*r20*r20)))+x2059+((x2060*(r21*r21*r21*r21)))+(((2.0)*x2060*(r20*r20)*(r21*r21))));
j4eval[0]=x2061;
j4eval[1]=IKsign(x2061);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2063=(gconst80*r20);
IkReal x2064=(gconst79*r21);
IkReal x2065=(cj2*sj1);
IkReal x2066=((1.0)*cj1*sj2);
CheckValue<IkReal> x2067=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2063*x2063)+(((-2.0)*x2063*x2064))+(x2064*x2064))),-1);
if(!x2067.valid){
continue;
}
CheckValue<IkReal> x2068 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2065))+(((-1.0)*r22*x2066)))),IkReal(((((-1.0)*x2063*x2066))+(((-1.0)*x2063*x2065))+((cj1*sj2*x2064))+((x2064*x2065)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2067.value)))+(x2068.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2069=IKsin(j4);
IkReal x2070=IKcos(j4);
IkReal x2071=((1.0)*cj2);
IkReal x2072=(gconst80*r20);
IkReal x2073=(sj1*sj2);
IkReal x2074=(gconst79*r21);
IkReal x2075=(gconst80*r10);
IkReal x2076=(gconst79*r01);
IkReal x2077=(gconst79*r11);
IkReal x2078=(gconst80*r00);
IkReal x2079=((1.0)*x2070);
IkReal x2080=((1.0)*x2069);
evalcond[0]=((((-1.0)*r22*x2079))+(((-1.0)*x2074*x2080))+((x2069*x2072)));
evalcond[1]=(sj0+(((-1.0)*r02*x2079))+((x2069*x2078))+(((-1.0)*x2076*x2080)));
evalcond[2]=((((-1.0)*r12*x2079))+((x2069*x2075))+(((-1.0)*x2077*x2080))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2080))+(((-1.0)*sj1*x2071))+(((-1.0)*cj1*sj2))+((x2070*x2074))+(((-1.0)*x2072*x2079)));
evalcond[4]=((((-1.0)*r02*x2080))+(((-1.0)*cj0*cj1*x2071))+((x2070*x2076))+(((-1.0)*x2078*x2079))+((cj0*x2073)));
evalcond[5]=(((x2070*x2077))+(((-1.0)*cj1*sj0*x2071))+((sj0*x2073))+(((-1.0)*r12*x2080))+(((-1.0)*x2075*x2079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2081=((1.0)*gconst79);
CheckValue<IkReal> x2082 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2081))+((cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2082.valid){
continue;
}
CheckValue<IkReal> x2083=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst80*r01))+(((-1.0)*r00*x2081)))),-1);
if(!x2083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2082.value)+(((1.5707963267949)*(x2083.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2084=IKsin(j4);
IkReal x2085=IKcos(j4);
IkReal x2086=((1.0)*cj2);
IkReal x2087=(gconst80*r20);
IkReal x2088=(sj1*sj2);
IkReal x2089=(gconst79*r21);
IkReal x2090=(gconst80*r10);
IkReal x2091=(gconst79*r01);
IkReal x2092=(gconst79*r11);
IkReal x2093=(gconst80*r00);
IkReal x2094=((1.0)*x2085);
IkReal x2095=((1.0)*x2084);
evalcond[0]=(((x2084*x2087))+(((-1.0)*x2089*x2095))+(((-1.0)*r22*x2094)));
evalcond[1]=(((x2084*x2093))+sj0+(((-1.0)*x2091*x2095))+(((-1.0)*r02*x2094)));
evalcond[2]=(((x2084*x2090))+(((-1.0)*x2092*x2095))+(((-1.0)*r12*x2094))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2086))+((x2085*x2089))+(((-1.0)*cj1*sj2))+(((-1.0)*x2087*x2094))+(((-1.0)*r22*x2095)));
evalcond[4]=((((-1.0)*cj0*cj1*x2086))+(((-1.0)*x2093*x2094))+(((-1.0)*r02*x2095))+((cj0*x2088))+((x2085*x2091)));
evalcond[5]=((((-1.0)*x2090*x2094))+((sj0*x2088))+(((-1.0)*cj1*sj0*x2086))+(((-1.0)*r12*x2095))+((x2085*x2092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2096=((1.0)*gconst79);
CheckValue<IkReal> x2097=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2096))+(((-1.0)*gconst80*r11)))),-1);
if(!x2097.valid){
continue;
}
CheckValue<IkReal> x2098 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2096))+((gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2097.value)))+(x2098.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2099=IKsin(j4);
IkReal x2100=IKcos(j4);
IkReal x2101=((1.0)*cj2);
IkReal x2102=(gconst80*r20);
IkReal x2103=(sj1*sj2);
IkReal x2104=(gconst79*r21);
IkReal x2105=(gconst80*r10);
IkReal x2106=(gconst79*r01);
IkReal x2107=(gconst79*r11);
IkReal x2108=(gconst80*r00);
IkReal x2109=((1.0)*x2100);
IkReal x2110=((1.0)*x2099);
evalcond[0]=(((x2099*x2102))+(((-1.0)*r22*x2109))+(((-1.0)*x2104*x2110)));
evalcond[1]=((((-1.0)*r02*x2109))+((x2099*x2108))+sj0+(((-1.0)*x2106*x2110)));
evalcond[2]=((((-1.0)*x2107*x2110))+((x2099*x2105))+(((-1.0)*r12*x2109))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2101))+(((-1.0)*x2102*x2109))+(((-1.0)*cj1*sj2))+((x2100*x2104))+(((-1.0)*r22*x2110)));
evalcond[4]=(((cj0*x2103))+((x2100*x2106))+(((-1.0)*x2108*x2109))+(((-1.0)*r02*x2110))+(((-1.0)*cj0*cj1*x2101)));
evalcond[5]=((((-1.0)*cj1*sj0*x2101))+(((-1.0)*x2105*x2109))+((x2100*x2107))+(((-1.0)*r12*x2110))+((sj0*x2103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2112 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2112)==0){
continue;
}
IkReal x2111=pow(x2112,-0.5);
CheckValue<IkReal> x2113 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2113.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2113.value))));
IkReal gconst82=((1.0)*r21*x2111);
IkReal gconst83=((-1.0)*r20*x2111);
CheckValue<IkReal> x2114 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2114.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2114.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2117 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2117.valid){
continue;
}
IkReal x2115=((1.0)*(x2117.value));
IkReal x2116=x2111;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2115)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2115)));
IkReal gconst82=((1.0)*r21*x2116);
IkReal gconst83=((-1.0)*r20*x2116);
IkReal x2118=r22*r22;
IkReal x2119=((1.0)*x2118);
CheckValue<IkReal> x2123=IKPowWithIntegerCheck(((-1.0)+x2118),-1);
if(!x2123.valid){
continue;
}
IkReal x2120=x2123.value;
if((((1.0)+(((-1.0)*x2119)))) < -0.00001)
continue;
IkReal x2121=IKsqrt(((1.0)+(((-1.0)*x2119))));
IkReal x2122=(sj0*x2120*x2121);
j4eval[0]=((IKabs(((((-1.0)*x2119*x2122))+x2122)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2126 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2126.valid){
continue;
}
IkReal x2124=((1.0)*(x2126.value));
IkReal x2125=x2111;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2124)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2124)));
IkReal gconst82=((1.0)*r21*x2125);
IkReal gconst83=((-1.0)*r20*x2125);
IkReal x2127=r22*r22;
IkReal x2128=((1.0)*x2127);
CheckValue<IkReal> x2132=IKPowWithIntegerCheck(((-1.0)+x2127),-1);
if(!x2132.valid){
continue;
}
IkReal x2129=x2132.value;
if((((1.0)+(((-1.0)*x2128)))) < -0.00001)
continue;
IkReal x2130=IKsqrt(((1.0)+(((-1.0)*x2128))));
IkReal x2131=(cj0*x2129*x2130);
j4eval[0]=((IKabs((x2131+(((-1.0)*x2128*x2131)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2135 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2135.valid){
continue;
}
IkReal x2133=((1.0)*(x2135.value));
IkReal x2134=x2111;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2133)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2133)));
IkReal gconst82=((1.0)*r21*x2134);
IkReal gconst83=((-1.0)*r20*x2134);
IkReal x2136=r22*r22;
IkReal x2137=(cj0*r02);
IkReal x2138=(r12*sj0);
CheckValue<IkReal> x2142=IKPowWithIntegerCheck(((-1.0)+x2136),-1);
if(!x2142.valid){
continue;
}
IkReal x2139=x2142.value;
if((((1.0)+(((-1.0)*x2136)))) < -0.00001)
continue;
IkReal x2140=IKsqrt(((1.0)+(((-1.0)*x2136))));
IkReal x2141=((1.0)*r22*x2139*x2140);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2138*x2141))+(((-1.0)*x2137*x2141)))))+(IKabs((x2137+x2138))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2143=((1.0)*gconst82);
CheckValue<IkReal> x2144 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x2143))+(((-1.0)*cj0*r01*x2143))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2144.valid){
continue;
}
CheckValue<IkReal> x2145=IKPowWithIntegerCheck(IKsign((((gconst83*r21))+((gconst82*r20)))),-1);
if(!x2145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2144.value)+(((1.5707963267949)*(x2145.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2146=IKsin(j4);
IkReal x2147=IKcos(j4);
IkReal x2148=(sj1*sj2);
IkReal x2149=((1.0)*cj2);
IkReal x2150=((1.0)*x2147);
IkReal x2151=(gconst83*x2146);
IkReal x2152=(gconst82*x2147);
IkReal x2153=((1.0)*x2146);
evalcond[0]=(((r20*x2151))+(((-1.0)*r22*x2150))+(((-1.0)*gconst82*r21*x2153)));
evalcond[1]=(sj0+(((-1.0)*r02*x2150))+((r00*x2151))+(((-1.0)*gconst82*r01*x2153)));
evalcond[2]=((((-1.0)*r12*x2150))+(((-1.0)*gconst82*r11*x2153))+((r10*x2151))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2149))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2153))+((r21*x2152))+(((-1.0)*gconst83*r20*x2150)));
evalcond[4]=((((-1.0)*gconst83*r00*x2150))+(((-1.0)*cj0*cj1*x2149))+(((-1.0)*r02*x2153))+((cj0*x2148))+((r01*x2152)));
evalcond[5]=((((-1.0)*r12*x2153))+((sj0*x2148))+(((-1.0)*cj1*sj0*x2149))+(((-1.0)*gconst83*r10*x2150))+((r11*x2152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2154=((1.0)*gconst82);
CheckValue<IkReal> x2155=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2154))+(((-1.0)*gconst83*r01)))),-1);
if(!x2155.valid){
continue;
}
CheckValue<IkReal> x2156 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst83*r20))+(((-1.0)*cj0*r21*x2154)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2155.value)))+(x2156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2157=IKsin(j4);
IkReal x2158=IKcos(j4);
IkReal x2159=(sj1*sj2);
IkReal x2160=((1.0)*cj2);
IkReal x2161=((1.0)*x2158);
IkReal x2162=(gconst83*x2157);
IkReal x2163=(gconst82*x2158);
IkReal x2164=((1.0)*x2157);
evalcond[0]=((((-1.0)*gconst82*r21*x2164))+((r20*x2162))+(((-1.0)*r22*x2161)));
evalcond[1]=((((-1.0)*gconst82*r01*x2164))+sj0+((r00*x2162))+(((-1.0)*r02*x2161)));
evalcond[2]=((((-1.0)*gconst82*r11*x2164))+((r10*x2162))+(((-1.0)*r12*x2161))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2160))+((r21*x2163))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst83*r20*x2161))+(((-1.0)*r22*x2164)));
evalcond[4]=(((r01*x2163))+((cj0*x2159))+(((-1.0)*cj0*cj1*x2160))+(((-1.0)*gconst83*r00*x2161))+(((-1.0)*r02*x2164)));
evalcond[5]=((((-1.0)*cj1*sj0*x2160))+((sj0*x2159))+(((-1.0)*gconst83*r10*x2161))+(((-1.0)*r12*x2164))+((r11*x2163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2165=((1.0)*gconst82);
CheckValue<IkReal> x2166 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst83*r20*sj0))+(((-1.0)*r21*sj0*x2165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2166.valid){
continue;
}
CheckValue<IkReal> x2167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2165))+(((-1.0)*gconst83*r11)))),-1);
if(!x2167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2166.value)+(((1.5707963267949)*(x2167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2168=IKsin(j4);
IkReal x2169=IKcos(j4);
IkReal x2170=(sj1*sj2);
IkReal x2171=((1.0)*cj2);
IkReal x2172=((1.0)*x2169);
IkReal x2173=(gconst83*x2168);
IkReal x2174=(gconst82*x2169);
IkReal x2175=((1.0)*x2168);
evalcond[0]=((((-1.0)*gconst82*r21*x2175))+((r20*x2173))+(((-1.0)*r22*x2172)));
evalcond[1]=(((r00*x2173))+sj0+(((-1.0)*gconst82*r01*x2175))+(((-1.0)*r02*x2172)));
evalcond[2]=((((-1.0)*gconst82*r11*x2175))+((r10*x2173))+(((-1.0)*r12*x2172))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x2174))+(((-1.0)*sj1*x2171))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst83*r20*x2172))+(((-1.0)*r22*x2175)));
evalcond[4]=(((r01*x2174))+((cj0*x2170))+(((-1.0)*cj0*cj1*x2171))+(((-1.0)*r02*x2175))+(((-1.0)*gconst83*r00*x2172)));
evalcond[5]=(((r11*x2174))+(((-1.0)*cj1*sj0*x2171))+(((-1.0)*gconst83*r10*x2172))+(((-1.0)*r12*x2175))+((sj0*x2170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2176=((-1.0)*r00);
IkReal x2178 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2178)==0){
continue;
}
IkReal x2177=pow(x2178,-0.5);
CheckValue<IkReal> x2179 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2176),IKFAST_ATAN2_MAGTHRESH);
if(!x2179.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2179.value));
IkReal gconst85=(r01*x2177);
IkReal gconst86=(x2176*x2177);
CheckValue<IkReal> x2180 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2180.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2180.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2181=((-1.0)*r00);
IkReal x2182=x2177;
CheckValue<IkReal> x2184 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2181),IKFAST_ATAN2_MAGTHRESH);
if(!x2184.valid){
continue;
}
IkReal x2183=((-1.0)*(x2184.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2183;
IkReal gconst84=x2183;
IkReal gconst85=(r01*x2182);
IkReal gconst86=(x2181*x2182);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2185=((1.0)*gconst85);
CheckValue<IkReal> x2186 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2185))+(((-1.0)*r11*sj0*x2185))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2186.valid){
continue;
}
CheckValue<IkReal> x2187=IKPowWithIntegerCheck(IKsign((((gconst86*r21))+((gconst85*r20)))),-1);
if(!x2187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2186.value)+(((1.5707963267949)*(x2187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2188=IKsin(j4);
IkReal x2189=IKcos(j4);
IkReal x2190=((1.0)*cj2);
IkReal x2191=(sj1*sj2);
IkReal x2192=((1.0)*x2189);
IkReal x2193=(gconst86*x2188);
IkReal x2194=(gconst85*x2189);
IkReal x2195=((1.0)*x2188);
IkReal x2196=(gconst85*x2195);
evalcond[0]=((((-1.0)*r21*x2196))+((r20*x2193))+(((-1.0)*r22*x2192)));
evalcond[1]=((((-1.0)*r01*x2196))+sj0+(((-1.0)*r02*x2192))+((r00*x2193)));
evalcond[2]=((((-1.0)*r12*x2192))+(((-1.0)*r11*x2196))+((r10*x2193))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2190))+((r21*x2194))+(((-1.0)*gconst86*r20*x2192))+(((-1.0)*r22*x2195)));
evalcond[4]=((((-1.0)*cj0*cj1*x2190))+(((-1.0)*r02*x2195))+((cj0*x2191))+((r01*x2194))+(((-1.0)*gconst86*r00*x2192)));
evalcond[5]=((((-1.0)*gconst86*r10*x2192))+((sj0*x2191))+((r11*x2194))+(((-1.0)*r12*x2195))+(((-1.0)*cj1*sj0*x2190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2197=((1.0)*gconst85);
CheckValue<IkReal> x2198=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2197))+(((-1.0)*gconst86*r11)))),-1);
if(!x2198.valid){
continue;
}
CheckValue<IkReal> x2199 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2197))+((gconst86*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2198.value)))+(x2199.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2200=IKsin(j4);
IkReal x2201=IKcos(j4);
IkReal x2202=((1.0)*cj2);
IkReal x2203=(sj1*sj2);
IkReal x2204=((1.0)*x2201);
IkReal x2205=(gconst86*x2200);
IkReal x2206=(gconst85*x2201);
IkReal x2207=((1.0)*x2200);
IkReal x2208=(gconst85*x2207);
evalcond[0]=(((r20*x2205))+(((-1.0)*r22*x2204))+(((-1.0)*r21*x2208)));
evalcond[1]=(sj0+((r00*x2205))+(((-1.0)*r02*x2204))+(((-1.0)*r01*x2208)));
evalcond[2]=((((-1.0)*r12*x2204))+(((-1.0)*r11*x2208))+((r10*x2205))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst86*r20*x2204))+(((-1.0)*sj1*x2202))+(((-1.0)*r22*x2207))+(((-1.0)*cj1*sj2))+((r21*x2206)));
evalcond[4]=((((-1.0)*cj0*cj1*x2202))+((r01*x2206))+(((-1.0)*gconst86*r00*x2204))+((cj0*x2203))+(((-1.0)*r02*x2207)));
evalcond[5]=((((-1.0)*r12*x2207))+((r11*x2206))+(((-1.0)*cj1*sj0*x2202))+((sj0*x2203))+(((-1.0)*gconst86*r10*x2204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2209=((-1.0)*r01);
IkReal x2211 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2211)==0){
continue;
}
IkReal x2210=pow(x2211,-0.5);
CheckValue<IkReal> x2212 = IKatan2WithCheck(IkReal(x2209),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2212.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2212.value))));
IkReal gconst88=(x2209*x2210);
IkReal gconst89=((1.0)*r00*x2210);
CheckValue<IkReal> x2213 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2213.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2213.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2214=((-1.0)*r01);
CheckValue<IkReal> x2217 = IKatan2WithCheck(IkReal(x2214),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2217.valid){
continue;
}
IkReal x2215=((1.0)*(x2217.value));
IkReal x2216=x2210;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2215)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2215)));
IkReal gconst88=(x2214*x2216);
IkReal gconst89=((1.0)*r00*x2216);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x2218=((-1.0)*r01);
CheckValue<IkReal> x2221 = IKatan2WithCheck(IkReal(x2218),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2221.valid){
continue;
}
IkReal x2219=((1.0)*(x2221.value));
IkReal x2220=x2210;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2219)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2219)));
IkReal gconst88=(x2218*x2220);
IkReal gconst89=((1.0)*r00*x2220);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2222=((-1.0)*r01);
CheckValue<IkReal> x2225 = IKatan2WithCheck(IkReal(x2222),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2225.valid){
continue;
}
IkReal x2223=((1.0)*(x2225.value));
IkReal x2224=x2210;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2223)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2223)));
IkReal gconst88=(x2222*x2224);
IkReal gconst89=((1.0)*r00*x2224);
IkReal x2226=r02*r02;
IkReal x2227=(r12*sj0);
IkReal x2228=x2210;
IkReal x2229=(cj0*x2228);
j4eval[0]=((IKabs((x2227+((cj0*r02)))))+(IKabs((((x2226*x2229))+((r02*x2227*x2228))+(((-1.0)*x2229))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2230=((1.0)*gconst88);
CheckValue<IkReal> x2231=IKPowWithIntegerCheck(IKsign((((gconst89*r21))+((gconst88*r20)))),-1);
if(!x2231.valid){
continue;
}
CheckValue<IkReal> x2232 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x2230))+(((-1.0)*cj0*r01*x2230))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2231.value)))+(x2232.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2233=IKsin(j4);
IkReal x2234=IKcos(j4);
IkReal x2235=((1.0)*cj1);
IkReal x2236=(gconst89*r10);
IkReal x2237=(sj1*sj2);
IkReal x2238=((1.0)*x2234);
IkReal x2239=(gconst88*x2234);
IkReal x2240=(gconst89*x2233);
IkReal x2241=((1.0)*x2233);
evalcond[0]=((((-1.0)*gconst88*r21*x2241))+((r20*x2240))+(((-1.0)*r22*x2238)));
evalcond[1]=(sj0+(((-1.0)*r02*x2238))+(((-1.0)*gconst88*r01*x2241))+((r00*x2240)));
evalcond[2]=((((-1.0)*gconst88*r11*x2241))+(((-1.0)*r12*x2238))+((x2233*x2236))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2241))+(((-1.0)*cj2*sj1))+((r21*x2239))+(((-1.0)*sj2*x2235))+(((-1.0)*gconst89*r20*x2238)));
evalcond[4]=((((-1.0)*gconst89*r00*x2238))+(((-1.0)*r02*x2241))+((cj0*x2237))+(((-1.0)*cj0*cj2*x2235))+((r01*x2239)));
evalcond[5]=(((sj0*x2237))+(((-1.0)*x2236*x2238))+(((-1.0)*r12*x2241))+(((-1.0)*cj2*sj0*x2235))+((r11*x2239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2242=((1.0)*gconst88);
CheckValue<IkReal> x2243=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r01))+(((-1.0)*r00*x2242)))),-1);
if(!x2243.valid){
continue;
}
CheckValue<IkReal> x2244 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst89*r20))+(((-1.0)*cj0*r21*x2242)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2243.value)))+(x2244.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2245=IKsin(j4);
IkReal x2246=IKcos(j4);
IkReal x2247=((1.0)*cj1);
IkReal x2248=(gconst89*r10);
IkReal x2249=(sj1*sj2);
IkReal x2250=((1.0)*x2246);
IkReal x2251=(gconst88*x2246);
IkReal x2252=(gconst89*x2245);
IkReal x2253=((1.0)*x2245);
evalcond[0]=((((-1.0)*r22*x2250))+((r20*x2252))+(((-1.0)*gconst88*r21*x2253)));
evalcond[1]=(sj0+(((-1.0)*r02*x2250))+(((-1.0)*gconst88*r01*x2253))+((r00*x2252)));
evalcond[2]=((((-1.0)*r12*x2250))+(((-1.0)*gconst88*r11*x2253))+(((-1.0)*cj0))+((x2245*x2248)));
evalcond[3]=((((-1.0)*r22*x2253))+(((-1.0)*sj2*x2247))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst89*r20*x2250))+((r21*x2251)));
evalcond[4]=((((-1.0)*r02*x2253))+(((-1.0)*gconst89*r00*x2250))+(((-1.0)*cj0*cj2*x2247))+((r01*x2251))+((cj0*x2249)));
evalcond[5]=((((-1.0)*r12*x2253))+((sj0*x2249))+(((-1.0)*x2248*x2250))+(((-1.0)*cj2*sj0*x2247))+((r11*x2251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2254=((1.0)*gconst88);
CheckValue<IkReal> x2255=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r11))+(((-1.0)*r10*x2254)))),-1);
if(!x2255.valid){
continue;
}
CheckValue<IkReal> x2256 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst89*r20*sj0))+(((-1.0)*r21*sj0*x2254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2255.value)))+(x2256.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2257=IKsin(j4);
IkReal x2258=IKcos(j4);
IkReal x2259=((1.0)*cj1);
IkReal x2260=(gconst89*r10);
IkReal x2261=(sj1*sj2);
IkReal x2262=((1.0)*x2258);
IkReal x2263=(gconst88*x2258);
IkReal x2264=(gconst89*x2257);
IkReal x2265=((1.0)*x2257);
evalcond[0]=((((-1.0)*r22*x2262))+((r20*x2264))+(((-1.0)*gconst88*r21*x2265)));
evalcond[1]=(((r00*x2264))+sj0+(((-1.0)*r02*x2262))+(((-1.0)*gconst88*r01*x2265)));
evalcond[2]=(((x2257*x2260))+(((-1.0)*gconst88*r11*x2265))+(((-1.0)*r12*x2262))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x2259))+(((-1.0)*gconst89*r20*x2262))+((r21*x2263))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2265)));
evalcond[4]=(((r01*x2263))+((cj0*x2261))+(((-1.0)*r02*x2265))+(((-1.0)*cj0*cj2*x2259))+(((-1.0)*gconst89*r00*x2262)));
evalcond[5]=(((sj0*x2261))+(((-1.0)*x2260*x2262))+((r11*x2263))+(((-1.0)*r12*x2265))+(((-1.0)*cj2*sj0*x2259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2266=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2266;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x2266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2267=((1.0)*sj5);
IkReal x2268=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2267)));
j4eval[0]=x2268;
j4eval[1]=IKsign(x2268);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x2267)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2269=cj5*cj5;
IkReal x2270=r01*r01;
IkReal x2271=(cj5*r00);
IkReal x2272=(r01*sj5);
IkReal x2273=(x2270+(((-1.0)*x2269*x2270))+(((-2.0)*x2271*x2272))+(r02*r02)+((x2269*(r00*r00))));
j4eval[0]=x2273;
j4eval[1]=((IKabs(r02))+(IKabs((x2272+(((-1.0)*x2271))))));
j4eval[2]=IKsign(x2273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2274=cj5*cj5;
IkReal x2275=r01*r01;
IkReal x2276=(r01*sj5);
IkReal x2277=(cj5*r00);
CheckValue<IkReal> x2278 = IKatan2WithCheck(IkReal((x2276+(((-1.0)*x2277)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2278.valid){
continue;
}
CheckValue<IkReal> x2279=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2274*x2275))+x2275+(((-2.0)*x2276*x2277))+(r02*r02)+((x2274*(r00*r00))))),-1);
if(!x2279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2278.value)+(((1.5707963267949)*(x2279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2280=IKsin(j4);
IkReal x2281=IKcos(j4);
IkReal x2282=(cj5*r00);
IkReal x2283=((1.0)*cj1);
IkReal x2284=(cj5*r20);
IkReal x2285=(cj5*r10);
IkReal x2286=((1.0)*x2281);
IkReal x2287=(sj5*x2281);
IkReal x2288=((1.0)*x2280);
IkReal x2289=(sj5*x2288);
evalcond[0]=(((x2280*x2284))+(((-1.0)*r21*x2289))+(((-1.0)*r22*x2286)));
evalcond[1]=((((-1.0)*r11*x2289))+(((-1.0)*r12*x2286))+((x2280*x2285)));
evalcond[2]=((((-1.0)*r02*x2288))+(((-1.0)*x2282*x2286))+((r01*x2287)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2286))+((x2280*x2282))+(((-1.0)*r01*x2289)));
evalcond[4]=(((r11*x2287))+(((-1.0)*cj2*x2283))+(((-1.0)*r12*x2288))+((sj1*sj2))+(((-1.0)*x2285*x2286)));
evalcond[5]=((((-1.0)*x2284*x2286))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2283))+((r21*x2287))+(((-1.0)*r22*x2288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2290=((1.0)*sj5);
CheckValue<IkReal> x2291 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2291.valid){
continue;
}
CheckValue<IkReal> x2292=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2290)))),-1);
if(!x2292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2291.value)+(((1.5707963267949)*(x2292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2293=IKsin(j4);
IkReal x2294=IKcos(j4);
IkReal x2295=(cj5*r00);
IkReal x2296=((1.0)*cj1);
IkReal x2297=(cj5*r20);
IkReal x2298=(cj5*r10);
IkReal x2299=((1.0)*x2294);
IkReal x2300=(sj5*x2294);
IkReal x2301=((1.0)*x2293);
IkReal x2302=(sj5*x2301);
evalcond[0]=((((-1.0)*r21*x2302))+((x2293*x2297))+(((-1.0)*r22*x2299)));
evalcond[1]=((((-1.0)*r11*x2302))+(((-1.0)*r12*x2299))+((x2293*x2298)));
evalcond[2]=((((-1.0)*x2295*x2299))+((r01*x2300))+(((-1.0)*r02*x2301)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2299))+(((-1.0)*r01*x2302))+((x2293*x2295)));
evalcond[4]=((((-1.0)*cj2*x2296))+((r11*x2300))+((sj1*sj2))+(((-1.0)*x2298*x2299))+(((-1.0)*r12*x2301)));
evalcond[5]=((((-1.0)*r22*x2301))+(((-1.0)*cj2*sj1))+(((-1.0)*x2297*x2299))+(((-1.0)*sj2*x2296))+((r21*x2300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2303 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2303.valid){
continue;
}
CheckValue<IkReal> x2304=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2303.value)+(((1.5707963267949)*(x2304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2305=IKsin(j4);
IkReal x2306=IKcos(j4);
IkReal x2307=(cj5*r00);
IkReal x2308=((1.0)*cj1);
IkReal x2309=(cj5*r20);
IkReal x2310=(cj5*r10);
IkReal x2311=((1.0)*x2306);
IkReal x2312=(sj5*x2306);
IkReal x2313=((1.0)*x2305);
IkReal x2314=(sj5*x2313);
evalcond[0]=(((x2305*x2309))+(((-1.0)*r22*x2311))+(((-1.0)*r21*x2314)));
evalcond[1]=(((x2305*x2310))+(((-1.0)*r11*x2314))+(((-1.0)*r12*x2311)));
evalcond[2]=(((r01*x2312))+(((-1.0)*r02*x2313))+(((-1.0)*x2307*x2311)));
evalcond[3]=((1.0)+((x2305*x2307))+(((-1.0)*r01*x2314))+(((-1.0)*r02*x2311)));
evalcond[4]=((((-1.0)*cj2*x2308))+((r11*x2312))+((sj1*sj2))+(((-1.0)*x2310*x2311))+(((-1.0)*r12*x2313)));
evalcond[5]=((((-1.0)*sj2*x2308))+(((-1.0)*r22*x2313))+((r21*x2312))+(((-1.0)*x2309*x2311))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2315=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2315;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x2315);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2316=((1.0)*sj5);
IkReal x2317=((((-1.0)*r20*x2316))+(((-1.0)*cj5*r21)));
j4eval[0]=x2317;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x2316))))));
j4eval[2]=IKsign(x2317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2318=cj5*cj5;
IkReal x2319=r01*r01;
IkReal x2320=(r01*sj5);
IkReal x2321=(cj5*r00);
IkReal x2322=((((-1.0)*x2319))+(((-1.0)*(r02*r02)))+(((2.0)*x2320*x2321))+((x2318*x2319))+(((-1.0)*x2318*(r00*r00))));
j4eval[0]=x2322;
j4eval[1]=IKsign(x2322);
j4eval[2]=((IKabs(r02))+(IKabs((x2320+(((-1.0)*x2321))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2323=cj5*cj5;
IkReal x2324=r01*r01;
IkReal x2325=(r01*sj5);
IkReal x2326=(cj5*r00);
CheckValue<IkReal> x2327 = IKatan2WithCheck(IkReal((x2325+(((-1.0)*x2326)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2327.valid){
continue;
}
CheckValue<IkReal> x2328=IKPowWithIntegerCheck(IKsign(((((2.0)*x2325*x2326))+(((-1.0)*(r02*r02)))+(((-1.0)*x2323*(r00*r00)))+((x2323*x2324))+(((-1.0)*x2324)))),-1);
if(!x2328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2327.value)+(((1.5707963267949)*(x2328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2329=IKsin(j4);
IkReal x2330=IKcos(j4);
IkReal x2331=(cj5*r00);
IkReal x2332=((1.0)*sj2);
IkReal x2333=(cj5*r20);
IkReal x2334=(cj5*r10);
IkReal x2335=((1.0)*x2330);
IkReal x2336=(sj5*x2330);
IkReal x2337=((1.0)*x2329);
IkReal x2338=(sj5*x2337);
evalcond[0]=((((-1.0)*r22*x2335))+((x2329*x2333))+(((-1.0)*r21*x2338)));
evalcond[1]=(((x2329*x2334))+(((-1.0)*r11*x2338))+(((-1.0)*r12*x2335)));
evalcond[2]=((((-1.0)*x2331*x2335))+((r01*x2336))+(((-1.0)*r02*x2337)));
evalcond[3]=((-1.0)+((x2329*x2331))+(((-1.0)*r01*x2338))+(((-1.0)*r02*x2335)));
evalcond[4]=(((r11*x2336))+(((-1.0)*x2334*x2335))+(((-1.0)*sj1*x2332))+((cj1*cj2))+(((-1.0)*r12*x2337)));
evalcond[5]=(((r21*x2336))+(((-1.0)*r22*x2337))+(((-1.0)*cj2*sj1))+(((-1.0)*x2333*x2335))+(((-1.0)*cj1*x2332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2339=((1.0)*sj5);
CheckValue<IkReal> x2340 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x2339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2340.valid){
continue;
}
CheckValue<IkReal> x2341=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x2339)))),-1);
if(!x2341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2340.value)+(((1.5707963267949)*(x2341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2342=IKsin(j4);
IkReal x2343=IKcos(j4);
IkReal x2344=(cj5*r00);
IkReal x2345=((1.0)*sj2);
IkReal x2346=(cj5*r20);
IkReal x2347=(cj5*r10);
IkReal x2348=((1.0)*x2343);
IkReal x2349=(sj5*x2343);
IkReal x2350=((1.0)*x2342);
IkReal x2351=(sj5*x2350);
evalcond[0]=((((-1.0)*r21*x2351))+(((-1.0)*r22*x2348))+((x2342*x2346)));
evalcond[1]=(((x2342*x2347))+(((-1.0)*r11*x2351))+(((-1.0)*r12*x2348)));
evalcond[2]=(((r01*x2349))+(((-1.0)*x2344*x2348))+(((-1.0)*r02*x2350)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x2351))+(((-1.0)*r02*x2348))+((x2342*x2344)));
evalcond[4]=((((-1.0)*sj1*x2345))+((r11*x2349))+((cj1*cj2))+(((-1.0)*r12*x2350))+(((-1.0)*x2347*x2348)));
evalcond[5]=((((-1.0)*x2346*x2348))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2345))+(((-1.0)*r22*x2350))+((r21*x2349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2352=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2352.valid){
continue;
}
CheckValue<IkReal> x2353 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2352.value)))+(x2353.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2354=IKsin(j4);
IkReal x2355=IKcos(j4);
IkReal x2356=(cj5*r00);
IkReal x2357=((1.0)*sj2);
IkReal x2358=(cj5*r20);
IkReal x2359=(cj5*r10);
IkReal x2360=((1.0)*x2355);
IkReal x2361=(sj5*x2355);
IkReal x2362=((1.0)*x2354);
IkReal x2363=(sj5*x2362);
evalcond[0]=(((x2354*x2358))+(((-1.0)*r21*x2363))+(((-1.0)*r22*x2360)));
evalcond[1]=(((x2354*x2359))+(((-1.0)*r11*x2363))+(((-1.0)*r12*x2360)));
evalcond[2]=((((-1.0)*x2356*x2360))+((r01*x2361))+(((-1.0)*r02*x2362)));
evalcond[3]=((-1.0)+((x2354*x2356))+(((-1.0)*r01*x2363))+(((-1.0)*r02*x2360)));
evalcond[4]=(((r11*x2361))+(((-1.0)*sj1*x2357))+(((-1.0)*x2359*x2360))+((cj1*cj2))+(((-1.0)*r12*x2362)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2357))+(((-1.0)*x2358*x2360))+(((-1.0)*r22*x2362))+((r21*x2361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2364=((-1.0)*r10);
IkReal x2366 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2366)==0){
continue;
}
IkReal x2365=pow(x2366,-0.5);
CheckValue<IkReal> x2367 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2364),IKFAST_ATAN2_MAGTHRESH);
if(!x2367.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2367.value));
IkReal gconst91=(r11*x2365);
IkReal gconst92=(x2364*x2365);
CheckValue<IkReal> x2368 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2368.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2368.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2369=((-1.0)*r10);
IkReal x2370=x2365;
CheckValue<IkReal> x2372 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2369),IKFAST_ATAN2_MAGTHRESH);
if(!x2372.valid){
continue;
}
IkReal x2371=((-1.0)*(x2372.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2371;
IkReal gconst90=x2371;
IkReal gconst91=(r11*x2370);
IkReal gconst92=(x2369*x2370);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2373=((1.0)*gconst91);
CheckValue<IkReal> x2374 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*cj0*r01*x2373))+(((-1.0)*r11*sj0*x2373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2374.valid){
continue;
}
CheckValue<IkReal> x2375=IKPowWithIntegerCheck(IKsign((((gconst91*r20))+((gconst92*r21)))),-1);
if(!x2375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2374.value)+(((1.5707963267949)*(x2375.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2376=IKsin(j4);
IkReal x2377=IKcos(j4);
IkReal x2378=((1.0)*cj2);
IkReal x2379=(gconst92*r00);
IkReal x2380=(sj1*sj2);
IkReal x2381=((1.0)*x2377);
IkReal x2382=(gconst91*x2377);
IkReal x2383=((1.0)*x2376);
IkReal x2384=(gconst92*x2376);
IkReal x2385=(gconst91*x2383);
evalcond[0]=((((-1.0)*r21*x2385))+((r20*x2384))+(((-1.0)*r22*x2381)));
evalcond[1]=((((-1.0)*r02*x2381))+(((-1.0)*r01*x2385))+sj0+((x2376*x2379)));
evalcond[2]=((((-1.0)*r12*x2381))+((r10*x2384))+(((-1.0)*cj0))+(((-1.0)*r11*x2385)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x2383))+((r21*x2382))+(((-1.0)*gconst92*r20*x2381))+(((-1.0)*sj1*x2378)));
evalcond[4]=((((-1.0)*r02*x2383))+((r01*x2382))+((cj0*x2380))+(((-1.0)*x2379*x2381))+(((-1.0)*cj0*cj1*x2378)));
evalcond[5]=((((-1.0)*r12*x2383))+(((-1.0)*gconst92*r10*x2381))+(((-1.0)*cj1*sj0*x2378))+((sj0*x2380))+((r11*x2382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2386=((1.0)*gconst91);
CheckValue<IkReal> x2387 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst92*r20))+(((-1.0)*cj0*r21*x2386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2387.valid){
continue;
}
CheckValue<IkReal> x2388=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2386))+(((-1.0)*gconst92*r01)))),-1);
if(!x2388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2387.value)+(((1.5707963267949)*(x2388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2389=IKsin(j4);
IkReal x2390=IKcos(j4);
IkReal x2391=((1.0)*cj2);
IkReal x2392=(gconst92*r00);
IkReal x2393=(sj1*sj2);
IkReal x2394=((1.0)*x2390);
IkReal x2395=(gconst91*x2390);
IkReal x2396=((1.0)*x2389);
IkReal x2397=(gconst92*x2389);
IkReal x2398=(gconst91*x2396);
evalcond[0]=(((r20*x2397))+(((-1.0)*r21*x2398))+(((-1.0)*r22*x2394)));
evalcond[1]=((((-1.0)*r01*x2398))+sj0+(((-1.0)*r02*x2394))+((x2389*x2392)));
evalcond[2]=(((r10*x2397))+(((-1.0)*cj0))+(((-1.0)*r12*x2394))+(((-1.0)*r11*x2398)));
evalcond[3]=((((-1.0)*gconst92*r20*x2394))+(((-1.0)*sj1*x2391))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2396))+((r21*x2395)));
evalcond[4]=((((-1.0)*cj0*cj1*x2391))+(((-1.0)*r02*x2396))+((r01*x2395))+((cj0*x2393))+(((-1.0)*x2392*x2394)));
evalcond[5]=((((-1.0)*gconst92*r10*x2394))+((r11*x2395))+(((-1.0)*cj1*sj0*x2391))+(((-1.0)*r12*x2396))+((sj0*x2393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2399=((-1.0)*r11);
IkReal x2401 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2401)==0){
continue;
}
IkReal x2400=pow(x2401,-0.5);
CheckValue<IkReal> x2402 = IKatan2WithCheck(IkReal(x2399),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2402.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2402.value))));
IkReal gconst94=(x2399*x2400);
IkReal gconst95=((1.0)*r10*x2400);
CheckValue<IkReal> x2403 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2403.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2403.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2404=((-1.0)*r11);
CheckValue<IkReal> x2407 = IKatan2WithCheck(IkReal(x2404),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2407.valid){
continue;
}
IkReal x2405=((1.0)*(x2407.value));
IkReal x2406=x2400;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2405)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2405)));
IkReal gconst94=(x2404*x2406);
IkReal gconst95=((1.0)*r10*x2406);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2408=((-1.0)*r11);
CheckValue<IkReal> x2411 = IKatan2WithCheck(IkReal(x2408),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2411.valid){
continue;
}
IkReal x2409=((1.0)*(x2411.value));
IkReal x2410=x2400;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2409)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2409)));
IkReal gconst94=(x2408*x2410);
IkReal gconst95=((1.0)*r10*x2410);
IkReal x2412=r12*r12;
IkReal x2413=(cj0*r02);
IkReal x2414=x2400;
IkReal x2415=(sj0*x2414);
j4eval[0]=((IKabs(((((-1.0)*x2415))+((r12*x2413*x2414))+((x2412*x2415)))))+(IKabs((x2413+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2416=((-1.0)*r11);
CheckValue<IkReal> x2419 = IKatan2WithCheck(IkReal(x2416),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2419.valid){
continue;
}
IkReal x2417=((1.0)*(x2419.value));
IkReal x2418=x2400;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2417)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2417)));
IkReal gconst94=(x2416*x2418);
IkReal gconst95=((1.0)*r10*x2418);
IkReal x2420=r12*r12;
IkReal x2421=((1.0)*r22);
IkReal x2422=(cj1*sj2);
IkReal x2423=(cj2*sj1);
CheckValue<IkReal> x2427=IKPowWithIntegerCheck(((-1.0)+x2420),-1);
if(!x2427.valid){
continue;
}
IkReal x2424=x2427.value;
if((((1.0)+(((-1.0)*x2420)))) < -0.00001)
continue;
IkReal x2425=IKsqrt(((1.0)+(((-1.0)*x2420))));
IkReal x2426=(r12*x2424*x2425);
j4eval[0]=((IKabs(((((-1.0)*x2421*x2423*x2426))+(((-1.0)*x2421*x2422*x2426)))))+(IKabs(((((-1.0)*x2421*x2422))+(((-1.0)*x2421*x2423))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2428=(cj2*sj1);
IkReal x2429=(gconst95*r20);
IkReal x2430=(cj1*sj2);
IkReal x2431=((1.0)*r22);
IkReal x2432=(gconst94*r21);
CheckValue<IkReal> x2433=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2429*x2432))+(x2429*x2429)+(r22*r22)+(x2432*x2432))),-1);
if(!x2433.valid){
continue;
}
CheckValue<IkReal> x2434 = IKatan2WithCheck(IkReal(((((-1.0)*x2430*x2431))+(((-1.0)*x2428*x2431)))),IkReal((((x2428*x2432))+(((-1.0)*x2429*x2430))+((x2430*x2432))+(((-1.0)*x2428*x2429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2433.value)))+(x2434.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2435=IKsin(j4);
IkReal x2436=IKcos(j4);
IkReal x2437=((1.0)*cj2);
IkReal x2438=(gconst95*r10);
IkReal x2439=(sj1*sj2);
IkReal x2440=((1.0)*x2436);
IkReal x2441=(gconst95*x2435);
IkReal x2442=(gconst94*x2436);
IkReal x2443=((1.0)*x2435);
IkReal x2444=(gconst94*x2443);
evalcond[0]=((((-1.0)*r21*x2444))+(((-1.0)*r22*x2440))+((r20*x2441)));
evalcond[1]=(sj0+((r00*x2441))+(((-1.0)*r01*x2444))+(((-1.0)*r02*x2440)));
evalcond[2]=(((x2435*x2438))+(((-1.0)*r12*x2440))+(((-1.0)*r11*x2444))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2437))+(((-1.0)*gconst95*r20*x2440))+(((-1.0)*r22*x2443))+((r21*x2442)));
evalcond[4]=((((-1.0)*cj0*cj1*x2437))+((cj0*x2439))+(((-1.0)*gconst95*r00*x2440))+((r01*x2442))+(((-1.0)*r02*x2443)));
evalcond[5]=((((-1.0)*cj1*sj0*x2437))+(((-1.0)*r12*x2443))+(((-1.0)*x2438*x2440))+((r11*x2442))+((sj0*x2439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2445=((1.0)*gconst94);
CheckValue<IkReal> x2446=IKPowWithIntegerCheck(IKsign((((gconst95*r21))+((gconst94*r20)))),-1);
if(!x2446.valid){
continue;
}
CheckValue<IkReal> x2447 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x2445))+(((-1.0)*cj0*r01*x2445))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2446.value)))+(x2447.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2448=IKsin(j4);
IkReal x2449=IKcos(j4);
IkReal x2450=((1.0)*cj2);
IkReal x2451=(gconst95*r10);
IkReal x2452=(sj1*sj2);
IkReal x2453=((1.0)*x2449);
IkReal x2454=(gconst95*x2448);
IkReal x2455=(gconst94*x2449);
IkReal x2456=((1.0)*x2448);
IkReal x2457=(gconst94*x2456);
evalcond[0]=((((-1.0)*r21*x2457))+(((-1.0)*r22*x2453))+((r20*x2454)));
evalcond[1]=(sj0+((r00*x2454))+(((-1.0)*r01*x2457))+(((-1.0)*r02*x2453)));
evalcond[2]=((((-1.0)*r11*x2457))+((x2448*x2451))+(((-1.0)*r12*x2453))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x2456))+(((-1.0)*gconst95*r20*x2453))+((r21*x2455))+(((-1.0)*sj1*x2450)));
evalcond[4]=((((-1.0)*cj0*cj1*x2450))+((r01*x2455))+(((-1.0)*gconst95*r00*x2453))+((cj0*x2452))+(((-1.0)*r02*x2456)));
evalcond[5]=((((-1.0)*cj1*sj0*x2450))+((sj0*x2452))+(((-1.0)*x2451*x2453))+(((-1.0)*r12*x2456))+((r11*x2455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2458=((1.0)*gconst94);
CheckValue<IkReal> x2459=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r01))+(((-1.0)*r00*x2458)))),-1);
if(!x2459.valid){
continue;
}
CheckValue<IkReal> x2460 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2458))+((cj0*gconst95*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2459.value)))+(x2460.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2461=IKsin(j4);
IkReal x2462=IKcos(j4);
IkReal x2463=((1.0)*cj2);
IkReal x2464=(gconst95*r10);
IkReal x2465=(sj1*sj2);
IkReal x2466=((1.0)*x2462);
IkReal x2467=(gconst95*x2461);
IkReal x2468=(gconst94*x2462);
IkReal x2469=((1.0)*x2461);
IkReal x2470=(gconst94*x2469);
evalcond[0]=((((-1.0)*r22*x2466))+(((-1.0)*r21*x2470))+((r20*x2467)));
evalcond[1]=((((-1.0)*r01*x2470))+sj0+(((-1.0)*r02*x2466))+((r00*x2467)));
evalcond[2]=((((-1.0)*r11*x2470))+((x2461*x2464))+(((-1.0)*r12*x2466))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2469))+(((-1.0)*cj1*sj2))+((r21*x2468))+(((-1.0)*gconst95*r20*x2466))+(((-1.0)*sj1*x2463)));
evalcond[4]=(((r01*x2468))+(((-1.0)*gconst95*r00*x2466))+(((-1.0)*cj0*cj1*x2463))+(((-1.0)*r02*x2469))+((cj0*x2465)));
evalcond[5]=((((-1.0)*x2464*x2466))+(((-1.0)*r12*x2469))+((r11*x2468))+(((-1.0)*cj1*sj0*x2463))+((sj0*x2465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2471=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2471;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x2471);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2472=((1.0)*sj5);
IkReal x2473=((((-1.0)*r00*x2472))+(((-1.0)*cj5*r01)));
j4eval[0]=x2473;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x2472)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2474=cj5*cj5;
IkReal x2475=r11*r11;
IkReal x2476=(cj5*r10);
IkReal x2477=(r11*sj5);
IkReal x2478=((((-1.0)*x2474*(r10*r10)))+(((-1.0)*x2475))+(((-1.0)*(r12*r12)))+((x2474*x2475))+(((2.0)*x2476*x2477)));
j4eval[0]=x2478;
j4eval[1]=((IKabs((x2477+(((-1.0)*x2476)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2478);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2479=cj5*cj5;
IkReal x2480=r11*r11;
IkReal x2481=(cj5*r10);
IkReal x2482=(r11*sj5);
CheckValue<IkReal> x2483 = IKatan2WithCheck(IkReal((x2482+(((-1.0)*x2481)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2483.valid){
continue;
}
CheckValue<IkReal> x2484=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2480))+(((-1.0)*(r12*r12)))+(((2.0)*x2481*x2482))+(((-1.0)*x2479*(r10*r10)))+((x2479*x2480)))),-1);
if(!x2484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2483.value)+(((1.5707963267949)*(x2484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2485=IKsin(j4);
IkReal x2486=IKcos(j4);
IkReal x2487=(cj5*r00);
IkReal x2488=((1.0)*cj1);
IkReal x2489=((1.0)*x2486);
IkReal x2490=(sj5*x2486);
IkReal x2491=(cj5*x2485);
IkReal x2492=((1.0)*x2485);
IkReal x2493=(sj5*x2492);
evalcond[0]=((((-1.0)*r22*x2489))+(((-1.0)*r21*x2493))+((r20*x2491)));
evalcond[1]=(((x2485*x2487))+(((-1.0)*r01*x2493))+(((-1.0)*r02*x2489)));
evalcond[2]=((((-1.0)*cj5*r10*x2489))+((r11*x2490))+(((-1.0)*r12*x2492)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x2493))+(((-1.0)*r12*x2489))+((r10*x2491)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r02*x2492))+(((-1.0)*cj2*x2488))+(((-1.0)*x2487*x2489))+((r01*x2490)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2488))+(((-1.0)*cj5*r20*x2489))+((r21*x2490))+(((-1.0)*r22*x2492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2494=((1.0)*sj5);
CheckValue<IkReal> x2495 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2494)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2495.valid){
continue;
}
CheckValue<IkReal> x2496=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2494))+(((-1.0)*cj5*r01)))),-1);
if(!x2496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2495.value)+(((1.5707963267949)*(x2496.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2497=IKsin(j4);
IkReal x2498=IKcos(j4);
IkReal x2499=(cj5*r00);
IkReal x2500=((1.0)*cj1);
IkReal x2501=((1.0)*x2498);
IkReal x2502=(sj5*x2498);
IkReal x2503=(cj5*x2497);
IkReal x2504=((1.0)*x2497);
IkReal x2505=(sj5*x2504);
evalcond[0]=((((-1.0)*r22*x2501))+((r20*x2503))+(((-1.0)*r21*x2505)));
evalcond[1]=((((-1.0)*r02*x2501))+((x2497*x2499))+(((-1.0)*r01*x2505)));
evalcond[2]=((((-1.0)*cj5*r10*x2501))+(((-1.0)*r12*x2504))+((r11*x2502)));
evalcond[3]=((-1.0)+((r10*x2503))+(((-1.0)*r12*x2501))+(((-1.0)*r11*x2505)));
evalcond[4]=((((-1.0)*cj2*x2500))+(((-1.0)*r02*x2504))+((sj1*sj2))+(((-1.0)*x2499*x2501))+((r01*x2502)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r20*x2501))+(((-1.0)*r22*x2504))+((r21*x2502))+(((-1.0)*sj2*x2500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2506=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2506.valid){
continue;
}
CheckValue<IkReal> x2507 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2506.value)))+(x2507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2508=IKsin(j4);
IkReal x2509=IKcos(j4);
IkReal x2510=(cj5*r00);
IkReal x2511=((1.0)*cj1);
IkReal x2512=((1.0)*x2509);
IkReal x2513=(sj5*x2509);
IkReal x2514=(cj5*x2508);
IkReal x2515=((1.0)*x2508);
IkReal x2516=(sj5*x2515);
evalcond[0]=((((-1.0)*r22*x2512))+(((-1.0)*r21*x2516))+((r20*x2514)));
evalcond[1]=((((-1.0)*r01*x2516))+((x2508*x2510))+(((-1.0)*r02*x2512)));
evalcond[2]=(((r11*x2513))+(((-1.0)*cj5*r10*x2512))+(((-1.0)*r12*x2515)));
evalcond[3]=((-1.0)+((r10*x2514))+(((-1.0)*r11*x2516))+(((-1.0)*r12*x2512)));
evalcond[4]=((((-1.0)*cj2*x2511))+(((-1.0)*x2510*x2512))+((sj1*sj2))+((r01*x2513))+(((-1.0)*r02*x2515)));
evalcond[5]=((((-1.0)*sj2*x2511))+(((-1.0)*cj5*r20*x2512))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2515))+((r21*x2513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2517=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2517;
j4eval[1]=IKsign(x2517);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2518=((1.0)*sj5);
IkReal x2519=((((-1.0)*cj5*r21))+(((-1.0)*r20*x2518)));
j4eval[0]=x2519;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x2518))+((cj5*r00))))));
j4eval[2]=IKsign(x2519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2520=cj5*cj5;
IkReal x2521=r11*r11;
IkReal x2522=(r11*sj5);
IkReal x2523=(cj5*r10);
IkReal x2524=((r12*r12)+x2521+(((-1.0)*x2520*x2521))+((x2520*(r10*r10)))+(((-2.0)*x2522*x2523)));
j4eval[0]=x2524;
j4eval[1]=IKsign(x2524);
j4eval[2]=((IKabs(r12))+(IKabs((x2522+(((-1.0)*x2523))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2525=cj5*cj5;
IkReal x2526=r11*r11;
IkReal x2527=(cj5*r10);
IkReal x2528=(r11*sj5);
CheckValue<IkReal> x2529=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2526+(((-1.0)*x2525*x2526))+(((-2.0)*x2527*x2528))+((x2525*(r10*r10))))),-1);
if(!x2529.valid){
continue;
}
CheckValue<IkReal> x2530 = IKatan2WithCheck(IkReal((x2528+(((-1.0)*x2527)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2529.value)))+(x2530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2531=IKsin(j4);
IkReal x2532=IKcos(j4);
IkReal x2533=(cj5*r00);
IkReal x2534=((1.0)*sj2);
IkReal x2535=((1.0)*x2532);
IkReal x2536=(sj5*x2532);
IkReal x2537=(cj5*x2531);
IkReal x2538=((1.0)*x2531);
IkReal x2539=(sj5*x2538);
evalcond[0]=((((-1.0)*r21*x2539))+((r20*x2537))+(((-1.0)*r22*x2535)));
evalcond[1]=(((x2531*x2533))+(((-1.0)*r01*x2539))+(((-1.0)*r02*x2535)));
evalcond[2]=((((-1.0)*cj5*r10*x2535))+(((-1.0)*r12*x2538))+((r11*x2536)));
evalcond[3]=((1.0)+((r10*x2537))+(((-1.0)*r12*x2535))+(((-1.0)*r11*x2539)));
evalcond[4]=(((r01*x2536))+(((-1.0)*x2533*x2535))+(((-1.0)*r02*x2538))+(((-1.0)*sj1*x2534))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj5*r20*x2535))+(((-1.0)*cj2*sj1))+((r21*x2536))+(((-1.0)*r22*x2538))+(((-1.0)*cj1*x2534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2540=((1.0)*sj5);
CheckValue<IkReal> x2541=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2540))+(((-1.0)*cj5*r21)))),-1);
if(!x2541.valid){
continue;
}
CheckValue<IkReal> x2542 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x2540))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2541.value)))+(x2542.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2543=IKsin(j4);
IkReal x2544=IKcos(j4);
IkReal x2545=(cj5*r00);
IkReal x2546=((1.0)*sj2);
IkReal x2547=((1.0)*x2544);
IkReal x2548=(sj5*x2544);
IkReal x2549=(cj5*x2543);
IkReal x2550=((1.0)*x2543);
IkReal x2551=(sj5*x2550);
evalcond[0]=((((-1.0)*r21*x2551))+((r20*x2549))+(((-1.0)*r22*x2547)));
evalcond[1]=(((x2543*x2545))+(((-1.0)*r01*x2551))+(((-1.0)*r02*x2547)));
evalcond[2]=(((r11*x2548))+(((-1.0)*r12*x2550))+(((-1.0)*cj5*r10*x2547)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2547))+(((-1.0)*r11*x2551))+((r10*x2549)));
evalcond[4]=((((-1.0)*x2545*x2547))+(((-1.0)*r02*x2550))+((r01*x2548))+(((-1.0)*sj1*x2546))+((cj1*cj2)));
evalcond[5]=(((r21*x2548))+(((-1.0)*cj5*r20*x2547))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2546))+(((-1.0)*r22*x2550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2552=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2552.valid){
continue;
}
CheckValue<IkReal> x2553 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2552.value)))+(x2553.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2554=IKsin(j4);
IkReal x2555=IKcos(j4);
IkReal x2556=(cj5*r00);
IkReal x2557=((1.0)*sj2);
IkReal x2558=((1.0)*x2555);
IkReal x2559=(sj5*x2555);
IkReal x2560=(cj5*x2554);
IkReal x2561=((1.0)*x2554);
IkReal x2562=(sj5*x2561);
evalcond[0]=((((-1.0)*r21*x2562))+((r20*x2560))+(((-1.0)*r22*x2558)));
evalcond[1]=((((-1.0)*r01*x2562))+(((-1.0)*r02*x2558))+((x2554*x2556)));
evalcond[2]=(((r11*x2559))+(((-1.0)*cj5*r10*x2558))+(((-1.0)*r12*x2561)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2558))+((r10*x2560))+(((-1.0)*r11*x2562)));
evalcond[4]=((((-1.0)*x2556*x2558))+(((-1.0)*r02*x2561))+((r01*x2559))+(((-1.0)*sj1*x2557))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x2561))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2557))+(((-1.0)*cj5*r20*x2558))+((r21*x2559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2563=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2563);
rxp0_2=(py*r00);
rxp1_0=(r21*x2563);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2564=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2564);
rxp0_2=(py*r00);
rxp1_0=(r21*x2564);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2565=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2565);
rxp0_2=(py*r00);
rxp1_0=(r21*x2565);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2568=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x2568.valid){
continue;
}
IkReal x2566=x2568.value;
IkReal x2567=(cj0*x2566);
cj4array[0]=(((cj1*cj2*x2567))+(((-1.0)*sj1*sj2*x2567)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2569=IKsin(j4);
IkReal x2570=IKcos(j4);
IkReal x2571=(cj5*r20);
IkReal x2572=((1.0)*x2570);
IkReal x2573=((1.0)*sj5*x2569);
evalcond[0]=((-1.0)*r12*x2569);
evalcond[1]=((((-1.0)*r12*x2572))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x2573))+((x2569*x2571)));
evalcond[3]=(((cj5*r00*x2569))+(((-1.0)*r01*x2573)));
evalcond[4]=(((r21*sj5*x2570))+(((-1.0)*x2571*x2572))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2575=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x2575.valid){
continue;
}
IkReal x2574=x2575.value;
cj4array[0]=(((cj1*sj2*x2574))+((cj2*sj1*x2574)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2576=IKsin(j4);
IkReal x2577=IKcos(j4);
IkReal x2578=(cj5*r00);
IkReal x2579=(r01*sj5);
IkReal x2580=((1.0)*cj0);
IkReal x2581=((1.0)*x2577);
IkReal x2582=((1.0)*x2576);
evalcond[0]=((-1.0)*r12*x2576);
evalcond[1]=((((-1.0)*x2580))+(((-1.0)*r12*x2581)));
evalcond[2]=(((cj5*r20*x2576))+(((-1.0)*r21*sj5*x2582)));
evalcond[3]=((((-1.0)*x2579*x2582))+((x2576*x2578)));
evalcond[4]=((((-1.0)*cj1*cj2*x2580))+(((-1.0)*x2578*x2581))+((x2577*x2579))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2583=IKPowWithIntegerCheck(r12,-1);
if(!x2583.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2583.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2584=IKsin(j4);
IkReal x2585=IKcos(j4);
IkReal x2586=(r01*sj5);
IkReal x2587=((1.0)*cj1);
IkReal x2588=(r21*sj5);
IkReal x2589=((1.0)*x2584);
IkReal x2590=(cj5*x2584);
IkReal x2591=((1.0)*cj5*x2585);
evalcond[0]=((-1.0)*r12*x2584);
evalcond[1]=(((r20*x2590))+(((-1.0)*x2588*x2589)));
evalcond[2]=(((r00*x2590))+(((-1.0)*x2586*x2589)));
evalcond[3]=((((-1.0)*r20*x2591))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2587))+((x2585*x2588)));
evalcond[4]=((((-1.0)*r00*x2591))+(((-1.0)*cj0*cj2*x2587))+((x2585*x2586))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2592=((1.0)*sj5);
CheckValue<IkReal> x2593=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2593.valid){
continue;
}
CheckValue<IkReal> x2594 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+(((-1.0)*cj0*r01*x2592))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x2592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2593.value)))+(x2594.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2595=IKsin(j4);
IkReal x2596=IKcos(j4);
IkReal x2597=(cj5*r00);
IkReal x2598=((1.0)*cj1);
IkReal x2599=(sj1*sj2);
IkReal x2600=((1.0)*x2596);
IkReal x2601=(sj5*x2596);
IkReal x2602=(cj5*x2595);
IkReal x2603=((1.0)*x2595);
IkReal x2604=(sj5*x2603);
evalcond[0]=(((r20*x2602))+(((-1.0)*r22*x2600))+(((-1.0)*r21*x2604)));
evalcond[1]=(sj0+(((-1.0)*r02*x2600))+((x2595*x2597))+(((-1.0)*r01*x2604)));
evalcond[2]=((((-1.0)*r11*x2604))+(((-1.0)*r12*x2600))+((r10*x2602))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r20*x2600))+(((-1.0)*r22*x2603))+(((-1.0)*sj2*x2598))+((r21*x2601)));
evalcond[4]=((((-1.0)*x2597*x2600))+((cj0*x2599))+(((-1.0)*r02*x2603))+(((-1.0)*cj0*cj2*x2598))+((r01*x2601)));
evalcond[5]=((((-1.0)*cj5*r10*x2600))+(((-1.0)*cj2*sj0*x2598))+(((-1.0)*r12*x2603))+((sj0*x2599))+((r11*x2601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2605=((1.0)*sj5);
CheckValue<IkReal> x2606=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x2605)))),-1);
if(!x2606.valid){
continue;
}
CheckValue<IkReal> x2607 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2605))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2606.value)))+(x2607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2608=IKsin(j4);
IkReal x2609=IKcos(j4);
IkReal x2610=(cj5*r00);
IkReal x2611=((1.0)*cj1);
IkReal x2612=(sj1*sj2);
IkReal x2613=((1.0)*x2609);
IkReal x2614=(sj5*x2609);
IkReal x2615=(cj5*x2608);
IkReal x2616=((1.0)*x2608);
IkReal x2617=(sj5*x2616);
evalcond[0]=((((-1.0)*r21*x2617))+((r20*x2615))+(((-1.0)*r22*x2613)));
evalcond[1]=((((-1.0)*r01*x2617))+sj0+((x2608*x2610))+(((-1.0)*r02*x2613)));
evalcond[2]=((((-1.0)*r12*x2613))+(((-1.0)*r11*x2617))+((r10*x2615))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*r22*x2616))+(((-1.0)*cj5*r20*x2613))+((r21*x2614))+(((-1.0)*sj2*x2611)));
evalcond[4]=(((r01*x2614))+(((-1.0)*x2610*x2613))+(((-1.0)*cj0*cj2*x2611))+(((-1.0)*r02*x2616))+((cj0*x2612)));
evalcond[5]=((((-1.0)*r12*x2616))+(((-1.0)*cj2*sj0*x2611))+((r11*x2614))+((sj0*x2612))+(((-1.0)*cj5*r10*x2613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2618=((1.0)*sj5);
CheckValue<IkReal> x2619 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2618))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2619.valid){
continue;
}
CheckValue<IkReal> x2620=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2618)))),-1);
if(!x2620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2619.value)+(((1.5707963267949)*(x2620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2621=IKsin(j4);
IkReal x2622=IKcos(j4);
IkReal x2623=(cj5*r00);
IkReal x2624=((1.0)*cj1);
IkReal x2625=(sj1*sj2);
IkReal x2626=((1.0)*x2622);
IkReal x2627=(sj5*x2622);
IkReal x2628=(cj5*x2621);
IkReal x2629=((1.0)*x2621);
IkReal x2630=(sj5*x2629);
evalcond[0]=(((r20*x2628))+(((-1.0)*r21*x2630))+(((-1.0)*r22*x2626)));
evalcond[1]=(sj0+(((-1.0)*r01*x2630))+((x2621*x2623))+(((-1.0)*r02*x2626)));
evalcond[2]=((((-1.0)*r12*x2626))+(((-1.0)*r11*x2630))+((r10*x2628))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x2624))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2629))+(((-1.0)*cj5*r20*x2626))+((r21*x2627)));
evalcond[4]=(((r01*x2627))+(((-1.0)*x2623*x2626))+(((-1.0)*cj0*cj2*x2624))+(((-1.0)*r02*x2629))+((cj0*x2625)));
evalcond[5]=((((-1.0)*cj5*r10*x2626))+(((-1.0)*cj2*sj0*x2624))+(((-1.0)*r12*x2629))+((r11*x2627))+((sj0*x2625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2631=cj5*cj5;
IkReal x2632=r21*r21;
IkReal x2633=(cj2*sj1);
IkReal x2634=(cj1*sj2);
IkReal x2635=((1.0)*r22);
IkReal x2636=(r21*sj5);
IkReal x2637=((1.0)*cj5*r20);
CheckValue<IkReal> x2638 = IKatan2WithCheck(IkReal(((((-1.0)*x2634*x2635))+(((-1.0)*x2633*x2635)))),IkReal((((x2634*x2636))+(((-1.0)*x2634*x2637))+((x2633*x2636))+(((-1.0)*x2633*x2637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2638.valid){
continue;
}
CheckValue<IkReal> x2639=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*cj5*r20*x2636))+(((-1.0)*x2631*x2632))+((x2631*(r20*r20)))+x2632)),-1);
if(!x2639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2638.value)+(((1.5707963267949)*(x2639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2640=IKsin(j4);
IkReal x2641=IKcos(j4);
IkReal x2642=(cj5*r20);
IkReal x2643=(r21*sj5);
IkReal x2644=((1.0)*x2641);
IkReal x2645=((1.0)*x2640);
evalcond[0]=((((-1.0)*r22*x2644))+(((-1.0)*x2643*x2645))+((x2640*x2642)));
evalcond[1]=((((-1.0)*r22*x2645))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x2642*x2644))+((x2641*x2643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2646=(cj5*sj4);
IkReal x2647=(sj4*sj5);
if( IKabs((((r01*x2647))+(((-1.0)*r00*x2646))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2646))+(((-1.0)*r11*x2647))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2647))+(((-1.0)*r00*x2646))+((cj4*r02))))+IKsqr((((r10*x2646))+(((-1.0)*r11*x2647))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2647))+(((-1.0)*r00*x2646))+((cj4*r02))), (((r10*x2646))+(((-1.0)*r11*x2647))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2648=IKcos(j0);
IkReal x2649=IKsin(j0);
IkReal x2650=(cj5*r00);
IkReal x2651=((1.0)*sj4);
IkReal x2652=(r01*sj5);
IkReal x2653=((1.0)*cj4);
IkReal x2654=(cj5*r10);
IkReal x2655=(r00*sj5);
IkReal x2656=((1.0)*cj5);
IkReal x2657=(r10*sj5);
IkReal x2658=(sj1*sj2);
IkReal x2659=(cj1*cj2);
IkReal x2660=((0.127)*cj5);
IkReal x2661=(r11*sj5);
IkReal x2662=(cj2*sj1);
IkReal x2663=(cj1*x2648);
IkReal x2664=((0.566)*x2649);
IkReal x2665=(cj1*x2649);
evalcond[0]=((((-1.0)*x2651*x2652))+((sj4*x2650))+(((-1.0)*r02*x2653))+x2649);
evalcond[1]=((((-1.0)*r12*x2653))+((sj4*x2654))+(((-1.0)*x2648))+(((-1.0)*x2651*x2661)));
evalcond[2]=((((-1.0)*r01*x2656))+((x2648*x2662))+((sj2*x2663))+(((-1.0)*x2655)));
evalcond[3]=(((x2649*x2662))+(((-1.0)*r11*x2656))+((sj2*x2665))+(((-1.0)*x2657)));
evalcond[4]=((((-1.0)*x2650*x2653))+((x2648*x2658))+(((-1.0)*r02*x2651))+((cj4*x2652))+(((-1.0)*x2648*x2659)));
evalcond[5]=(((x2649*x2658))+(((-1.0)*r12*x2651))+((cj4*x2661))+(((-1.0)*x2649*x2659))+(((-1.0)*x2653*x2654)));
evalcond[6]=((((0.127)*x2655))+(((-0.566)*x2648*x2659))+(((-0.607)*x2663))+(((0.188)*x2649))+(((-1.0)*px))+(((0.566)*x2648*x2658))+((r01*x2660)));
evalcond[7]=((((0.127)*x2657))+(((-0.607)*x2665))+((x2658*x2664))+(((-1.0)*py))+(((-1.0)*x2659*x2664))+(((-0.188)*x2648))+((r11*x2660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2666=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x2666.valid){
continue;
}
CheckValue<IkReal> x2667 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2667.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2666.value)))+(x2667.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2668=IKcos(j0);
IkReal x2669=IKsin(j0);
IkReal x2670=((1.0)*cj5);
IkReal x2671=(cj2*sj1);
IkReal x2672=((1.0)*sj5);
IkReal x2673=(sj1*sj2);
IkReal x2674=((0.127)*sj5);
IkReal x2675=((0.127)*cj5);
IkReal x2676=(cj1*x2668);
IkReal x2677=((0.566)*x2669);
IkReal x2678=(cj1*x2669);
evalcond[0]=(((x2668*x2671))+(((-1.0)*r00*x2672))+(((-1.0)*r01*x2670))+((sj2*x2676)));
evalcond[1]=((((-1.0)*r11*x2670))+((x2669*x2671))+((sj2*x2678))+(((-1.0)*r10*x2672)));
evalcond[2]=((((-0.607)*x2676))+(((0.188)*x2669))+(((-1.0)*px))+(((0.566)*x2668*x2673))+(((-0.566)*cj2*x2676))+((r00*x2674))+((r01*x2675)));
evalcond[3]=(((x2673*x2677))+(((-0.607)*x2678))+((r10*x2674))+(((-1.0)*py))+(((-1.0)*cj1*cj2*x2677))+(((-0.188)*x2668))+((r11*x2675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2679=((1.0)*sj5);
IkReal x2680=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2679)));
j4eval[0]=x2680;
j4eval[1]=IKsign(x2680);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2679)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2681=((1.0)*sj5);
IkReal x2682=((((-1.0)*r00*x2681))+(((-1.0)*cj5*r01)));
j4eval[0]=x2682;
j4eval[1]=IKsign(x2682);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x2681)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2683=((1.0)*sj5);
IkReal x2684=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2684;
j4eval[1]=((IKabs(((((-1.0)*r11*sj0*x2683))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x2683)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x2684);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2686 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2686)==0){
continue;
}
IkReal x2685=pow(x2686,-0.5);
CheckValue<IkReal> x2687 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2687.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2687.value));
IkReal gconst79=((-1.0)*r21*x2685);
IkReal gconst80=(r20*x2685);
CheckValue<IkReal> x2688 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2688.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2688.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2691 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2691.valid){
continue;
}
IkReal x2689=((-1.0)*(x2691.value));
IkReal x2690=x2685;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2689;
IkReal gconst78=x2689;
IkReal gconst79=((-1.0)*r21*x2690);
IkReal gconst80=(r20*x2690);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2694 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2694.valid){
continue;
}
IkReal x2692=((-1.0)*(x2694.value));
IkReal x2693=x2685;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2692;
IkReal gconst78=x2692;
IkReal gconst79=((-1.0)*r21*x2693);
IkReal gconst80=(r20*x2693);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2697 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2697.valid){
continue;
}
IkReal x2695=((-1.0)*(x2697.value));
IkReal x2696=x2685;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2695;
IkReal gconst78=x2695;
IkReal gconst79=((-1.0)*r21*x2696);
IkReal gconst80=(r20*x2696);
IkReal x2698=r22*r22;
CheckValue<IkReal> x2701=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2698))),-1);
if(!x2701.valid){
continue;
}
IkReal x2699=x2701.value;
IkReal x2700=(((x2699*(r21*r21*r21*r21)))+((x2699*(r20*r20*r20*r20)))+(((2.0)*x2699*(r20*r20)*(r21*r21)))+x2698);
j4eval[0]=x2700;
j4eval[1]=IKsign(x2700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2702=(gconst80*r20);
IkReal x2703=(gconst79*r21);
IkReal x2704=(cj2*sj1);
IkReal x2705=((1.0)*cj1*sj2);
CheckValue<IkReal> x2706=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2702*x2703))+(r22*r22)+(x2702*x2702)+(x2703*x2703))),-1);
if(!x2706.valid){
continue;
}
CheckValue<IkReal> x2707 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2705))+(((-1.0)*r22*x2704)))),IkReal(((((-1.0)*x2702*x2705))+((cj1*sj2*x2703))+(((-1.0)*x2702*x2704))+((x2703*x2704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2706.value)))+(x2707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2708=IKsin(j4);
IkReal x2709=IKcos(j4);
IkReal x2710=((1.0)*cj2);
IkReal x2711=(gconst80*r20);
IkReal x2712=(sj1*sj2);
IkReal x2713=(gconst79*r21);
IkReal x2714=(gconst80*r10);
IkReal x2715=(gconst79*r01);
IkReal x2716=(gconst79*r11);
IkReal x2717=(gconst80*r00);
IkReal x2718=((1.0)*x2709);
IkReal x2719=((1.0)*x2708);
evalcond[0]=(((x2708*x2711))+(((-1.0)*x2713*x2719))+(((-1.0)*r22*x2718)));
evalcond[1]=(((x2708*x2717))+sj0+(((-1.0)*r02*x2718))+(((-1.0)*x2715*x2719)));
evalcond[2]=(((x2708*x2714))+(((-1.0)*x2716*x2719))+(((-1.0)*r12*x2718))+(((-1.0)*cj0)));
evalcond[3]=(((x2709*x2713))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2719))+(((-1.0)*sj1*x2710))+(((-1.0)*x2711*x2718)));
evalcond[4]=((((-1.0)*cj0*cj1*x2710))+(((-1.0)*r02*x2719))+((x2709*x2715))+((cj0*x2712))+(((-1.0)*x2717*x2718)));
evalcond[5]=(((x2709*x2716))+((sj0*x2712))+(((-1.0)*x2714*x2718))+(((-1.0)*cj1*sj0*x2710))+(((-1.0)*r12*x2719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2720=((1.0)*gconst79);
CheckValue<IkReal> x2721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2720))+(((-1.0)*gconst80*r01)))),-1);
if(!x2721.valid){
continue;
}
CheckValue<IkReal> x2722 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2720))+((cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2721.value)))+(x2722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2723=IKsin(j4);
IkReal x2724=IKcos(j4);
IkReal x2725=((1.0)*cj2);
IkReal x2726=(gconst80*r20);
IkReal x2727=(sj1*sj2);
IkReal x2728=(gconst79*r21);
IkReal x2729=(gconst80*r10);
IkReal x2730=(gconst79*r01);
IkReal x2731=(gconst79*r11);
IkReal x2732=(gconst80*r00);
IkReal x2733=((1.0)*x2724);
IkReal x2734=((1.0)*x2723);
evalcond[0]=((((-1.0)*x2728*x2734))+(((-1.0)*r22*x2733))+((x2723*x2726)));
evalcond[1]=((((-1.0)*x2730*x2734))+sj0+((x2723*x2732))+(((-1.0)*r02*x2733)));
evalcond[2]=((((-1.0)*x2731*x2734))+(((-1.0)*r12*x2733))+((x2723*x2729))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2725))+(((-1.0)*x2726*x2733))+((x2724*x2728))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2734)));
evalcond[4]=((((-1.0)*cj0*cj1*x2725))+((x2724*x2730))+(((-1.0)*r02*x2734))+(((-1.0)*x2732*x2733))+((cj0*x2727)));
evalcond[5]=(((x2724*x2731))+(((-1.0)*r12*x2734))+((sj0*x2727))+(((-1.0)*x2729*x2733))+(((-1.0)*cj1*sj0*x2725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2735=((1.0)*gconst79);
CheckValue<IkReal> x2736 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst80*r20*sj0))+(((-1.0)*r21*sj0*x2735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2736.valid){
continue;
}
CheckValue<IkReal> x2737=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2735))+(((-1.0)*gconst80*r11)))),-1);
if(!x2737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2736.value)+(((1.5707963267949)*(x2737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2738=IKsin(j4);
IkReal x2739=IKcos(j4);
IkReal x2740=((1.0)*cj2);
IkReal x2741=(gconst80*r20);
IkReal x2742=(sj1*sj2);
IkReal x2743=(gconst79*r21);
IkReal x2744=(gconst80*r10);
IkReal x2745=(gconst79*r01);
IkReal x2746=(gconst79*r11);
IkReal x2747=(gconst80*r00);
IkReal x2748=((1.0)*x2739);
IkReal x2749=((1.0)*x2738);
evalcond[0]=((((-1.0)*x2743*x2749))+((x2738*x2741))+(((-1.0)*r22*x2748)));
evalcond[1]=(sj0+(((-1.0)*x2745*x2749))+((x2738*x2747))+(((-1.0)*r02*x2748)));
evalcond[2]=(((x2738*x2744))+(((-1.0)*r12*x2748))+(((-1.0)*x2746*x2749))+(((-1.0)*cj0)));
evalcond[3]=(((x2739*x2743))+(((-1.0)*cj1*sj2))+(((-1.0)*x2741*x2748))+(((-1.0)*sj1*x2740))+(((-1.0)*r22*x2749)));
evalcond[4]=((((-1.0)*x2747*x2748))+((cj0*x2742))+((x2739*x2745))+(((-1.0)*cj0*cj1*x2740))+(((-1.0)*r02*x2749)));
evalcond[5]=((((-1.0)*x2744*x2748))+(((-1.0)*cj1*sj0*x2740))+((x2739*x2746))+((sj0*x2742))+(((-1.0)*r12*x2749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2751 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2751)==0){
continue;
}
IkReal x2750=pow(x2751,-0.5);
CheckValue<IkReal> x2752 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2752.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2752.value))));
IkReal gconst82=((1.0)*r21*x2750);
IkReal gconst83=((-1.0)*r20*x2750);
CheckValue<IkReal> x2753 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2753.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2753.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2756 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2756.valid){
continue;
}
IkReal x2754=((1.0)*(x2756.value));
IkReal x2755=x2750;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2754)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2754)));
IkReal gconst82=((1.0)*r21*x2755);
IkReal gconst83=((-1.0)*r20*x2755);
IkReal x2757=r22*r22;
IkReal x2758=((1.0)*x2757);
CheckValue<IkReal> x2762=IKPowWithIntegerCheck(((-1.0)+x2757),-1);
if(!x2762.valid){
continue;
}
IkReal x2759=x2762.value;
if((((1.0)+(((-1.0)*x2758)))) < -0.00001)
continue;
IkReal x2760=IKsqrt(((1.0)+(((-1.0)*x2758))));
IkReal x2761=(sj0*x2759*x2760);
j4eval[0]=((IKabs((x2761+(((-1.0)*x2758*x2761)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2765 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2765.valid){
continue;
}
IkReal x2763=((1.0)*(x2765.value));
IkReal x2764=x2750;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2763)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2763)));
IkReal gconst82=((1.0)*r21*x2764);
IkReal gconst83=((-1.0)*r20*x2764);
IkReal x2766=r22*r22;
IkReal x2767=((1.0)*x2766);
CheckValue<IkReal> x2771=IKPowWithIntegerCheck(((-1.0)+x2766),-1);
if(!x2771.valid){
continue;
}
IkReal x2768=x2771.value;
if((((1.0)+(((-1.0)*x2767)))) < -0.00001)
continue;
IkReal x2769=IKsqrt(((1.0)+(((-1.0)*x2767))));
IkReal x2770=(cj0*x2768*x2769);
j4eval[0]=((IKabs((x2770+(((-1.0)*x2767*x2770)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2774 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2774.valid){
continue;
}
IkReal x2772=((1.0)*(x2774.value));
IkReal x2773=x2750;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2772)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2772)));
IkReal gconst82=((1.0)*r21*x2773);
IkReal gconst83=((-1.0)*r20*x2773);
IkReal x2775=r22*r22;
IkReal x2776=(cj0*r02);
IkReal x2777=(r12*sj0);
CheckValue<IkReal> x2781=IKPowWithIntegerCheck(((-1.0)+x2775),-1);
if(!x2781.valid){
continue;
}
IkReal x2778=x2781.value;
if((((1.0)+(((-1.0)*x2775)))) < -0.00001)
continue;
IkReal x2779=IKsqrt(((1.0)+(((-1.0)*x2775))));
IkReal x2780=((1.0)*r22*x2778*x2779);
j4eval[0]=0;
j4eval[1]=((IKabs((x2776+x2777)))+(IKabs(((((-1.0)*x2776*x2780))+(((-1.0)*x2777*x2780))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2782=((1.0)*gconst82);
CheckValue<IkReal> x2783 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x2782))+(((-1.0)*cj0*r01*x2782))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2783.valid){
continue;
}
CheckValue<IkReal> x2784=IKPowWithIntegerCheck(IKsign((((gconst83*r21))+((gconst82*r20)))),-1);
if(!x2784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2783.value)+(((1.5707963267949)*(x2784.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2785=IKsin(j4);
IkReal x2786=IKcos(j4);
IkReal x2787=(sj1*sj2);
IkReal x2788=((1.0)*cj2);
IkReal x2789=((1.0)*x2786);
IkReal x2790=(gconst83*x2785);
IkReal x2791=(gconst82*x2786);
IkReal x2792=((1.0)*x2785);
evalcond[0]=((((-1.0)*r22*x2789))+(((-1.0)*gconst82*r21*x2792))+((r20*x2790)));
evalcond[1]=(sj0+((r00*x2790))+(((-1.0)*gconst82*r01*x2792))+(((-1.0)*r02*x2789)));
evalcond[2]=((((-1.0)*r12*x2789))+(((-1.0)*gconst82*r11*x2792))+((r10*x2790))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x2791))+(((-1.0)*sj1*x2788))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst83*r20*x2789))+(((-1.0)*r22*x2792)));
evalcond[4]=(((r01*x2791))+(((-1.0)*gconst83*r00*x2789))+((cj0*x2787))+(((-1.0)*cj0*cj1*x2788))+(((-1.0)*r02*x2792)));
evalcond[5]=((((-1.0)*cj1*sj0*x2788))+((r11*x2791))+((sj0*x2787))+(((-1.0)*r12*x2792))+(((-1.0)*gconst83*r10*x2789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2793=((1.0)*gconst82);
CheckValue<IkReal> x2794 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2793))+((cj0*gconst83*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2794.valid){
continue;
}
CheckValue<IkReal> x2795=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst83*r01))+(((-1.0)*r00*x2793)))),-1);
if(!x2795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2794.value)+(((1.5707963267949)*(x2795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2796=IKsin(j4);
IkReal x2797=IKcos(j4);
IkReal x2798=(sj1*sj2);
IkReal x2799=((1.0)*cj2);
IkReal x2800=((1.0)*x2797);
IkReal x2801=(gconst83*x2796);
IkReal x2802=(gconst82*x2797);
IkReal x2803=((1.0)*x2796);
evalcond[0]=((((-1.0)*gconst82*r21*x2803))+((r20*x2801))+(((-1.0)*r22*x2800)));
evalcond[1]=(sj0+(((-1.0)*gconst82*r01*x2803))+(((-1.0)*r02*x2800))+((r00*x2801)));
evalcond[2]=(((r10*x2801))+(((-1.0)*r12*x2800))+(((-1.0)*gconst82*r11*x2803))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2799))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2803))+((r21*x2802))+(((-1.0)*gconst83*r20*x2800)));
evalcond[4]=((((-1.0)*gconst83*r00*x2800))+(((-1.0)*r02*x2803))+((cj0*x2798))+((r01*x2802))+(((-1.0)*cj0*cj1*x2799)));
evalcond[5]=((((-1.0)*cj1*sj0*x2799))+(((-1.0)*gconst83*r10*x2800))+(((-1.0)*r12*x2803))+((sj0*x2798))+((r11*x2802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2804=((1.0)*gconst82);
CheckValue<IkReal> x2805=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2804))+(((-1.0)*gconst83*r11)))),-1);
if(!x2805.valid){
continue;
}
CheckValue<IkReal> x2806 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2804))+((gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2805.value)))+(x2806.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2807=IKsin(j4);
IkReal x2808=IKcos(j4);
IkReal x2809=(sj1*sj2);
IkReal x2810=((1.0)*cj2);
IkReal x2811=((1.0)*x2808);
IkReal x2812=(gconst83*x2807);
IkReal x2813=(gconst82*x2808);
IkReal x2814=((1.0)*x2807);
evalcond[0]=((((-1.0)*gconst82*r21*x2814))+(((-1.0)*r22*x2811))+((r20*x2812)));
evalcond[1]=(((r00*x2812))+(((-1.0)*r02*x2811))+sj0+(((-1.0)*gconst82*r01*x2814)));
evalcond[2]=((((-1.0)*r12*x2811))+((r10*x2812))+(((-1.0)*cj0))+(((-1.0)*gconst82*r11*x2814)));
evalcond[3]=((((-1.0)*gconst83*r20*x2811))+(((-1.0)*cj1*sj2))+((r21*x2813))+(((-1.0)*r22*x2814))+(((-1.0)*sj1*x2810)));
evalcond[4]=(((r01*x2813))+(((-1.0)*gconst83*r00*x2811))+(((-1.0)*r02*x2814))+(((-1.0)*cj0*cj1*x2810))+((cj0*x2809)));
evalcond[5]=((((-1.0)*r12*x2814))+((r11*x2813))+(((-1.0)*gconst83*r10*x2811))+(((-1.0)*cj1*sj0*x2810))+((sj0*x2809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2815=((-1.0)*r00);
IkReal x2817 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2817)==0){
continue;
}
IkReal x2816=pow(x2817,-0.5);
CheckValue<IkReal> x2818 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2815),IKFAST_ATAN2_MAGTHRESH);
if(!x2818.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2818.value));
IkReal gconst85=(r01*x2816);
IkReal gconst86=(x2815*x2816);
CheckValue<IkReal> x2819 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2819.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2819.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2820=((-1.0)*r00);
IkReal x2821=x2816;
CheckValue<IkReal> x2823 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2820),IKFAST_ATAN2_MAGTHRESH);
if(!x2823.valid){
continue;
}
IkReal x2822=((-1.0)*(x2823.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2822;
IkReal gconst84=x2822;
IkReal gconst85=(r01*x2821);
IkReal gconst86=(x2820*x2821);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2824=((1.0)*gconst85);
CheckValue<IkReal> x2825 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2824))+((gconst86*r10*sj0))+(((-1.0)*r11*sj0*x2824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2825.valid){
continue;
}
CheckValue<IkReal> x2826=IKPowWithIntegerCheck(IKsign((((gconst86*r21))+((gconst85*r20)))),-1);
if(!x2826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2825.value)+(((1.5707963267949)*(x2826.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2827=IKsin(j4);
IkReal x2828=IKcos(j4);
IkReal x2829=((1.0)*cj2);
IkReal x2830=(sj1*sj2);
IkReal x2831=((1.0)*x2828);
IkReal x2832=(gconst86*x2827);
IkReal x2833=(gconst85*x2828);
IkReal x2834=((1.0)*x2827);
IkReal x2835=(gconst85*x2834);
evalcond[0]=(((r20*x2832))+(((-1.0)*r21*x2835))+(((-1.0)*r22*x2831)));
evalcond[1]=(sj0+(((-1.0)*r01*x2835))+((r00*x2832))+(((-1.0)*r02*x2831)));
evalcond[2]=(((r10*x2832))+(((-1.0)*r12*x2831))+(((-1.0)*r11*x2835))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2829))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst86*r20*x2831))+(((-1.0)*r22*x2834))+((r21*x2833)));
evalcond[4]=((((-1.0)*gconst86*r00*x2831))+(((-1.0)*cj0*cj1*x2829))+((cj0*x2830))+((r01*x2833))+(((-1.0)*r02*x2834)));
evalcond[5]=(((sj0*x2830))+(((-1.0)*gconst86*r10*x2831))+(((-1.0)*cj1*sj0*x2829))+(((-1.0)*r12*x2834))+((r11*x2833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2836=((1.0)*gconst85);
CheckValue<IkReal> x2837 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst86*r20*sj0))+(((-1.0)*r21*sj0*x2836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2837.valid){
continue;
}
CheckValue<IkReal> x2838=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2836))+(((-1.0)*gconst86*r11)))),-1);
if(!x2838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2837.value)+(((1.5707963267949)*(x2838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2839=IKsin(j4);
IkReal x2840=IKcos(j4);
IkReal x2841=((1.0)*cj2);
IkReal x2842=(sj1*sj2);
IkReal x2843=((1.0)*x2840);
IkReal x2844=(gconst86*x2839);
IkReal x2845=(gconst85*x2840);
IkReal x2846=((1.0)*x2839);
IkReal x2847=(gconst85*x2846);
evalcond[0]=((((-1.0)*r21*x2847))+((r20*x2844))+(((-1.0)*r22*x2843)));
evalcond[1]=(sj0+(((-1.0)*r01*x2847))+(((-1.0)*r02*x2843))+((r00*x2844)));
evalcond[2]=((((-1.0)*r12*x2843))+(((-1.0)*r11*x2847))+((r10*x2844))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x2841))+((r21*x2845))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst86*r20*x2843))+(((-1.0)*r22*x2846)));
evalcond[4]=((((-1.0)*cj0*cj1*x2841))+((cj0*x2842))+(((-1.0)*r02*x2846))+(((-1.0)*gconst86*r00*x2843))+((r01*x2845)));
evalcond[5]=(((r11*x2845))+(((-1.0)*cj1*sj0*x2841))+(((-1.0)*r12*x2846))+((sj0*x2842))+(((-1.0)*gconst86*r10*x2843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2848=((-1.0)*r01);
IkReal x2850 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2850)==0){
continue;
}
IkReal x2849=pow(x2850,-0.5);
CheckValue<IkReal> x2851 = IKatan2WithCheck(IkReal(x2848),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2851.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2851.value))));
IkReal gconst88=(x2848*x2849);
IkReal gconst89=((1.0)*r00*x2849);
CheckValue<IkReal> x2852 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2852.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2852.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2853=((-1.0)*r01);
CheckValue<IkReal> x2856 = IKatan2WithCheck(IkReal(x2853),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2856.valid){
continue;
}
IkReal x2854=((1.0)*(x2856.value));
IkReal x2855=x2849;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2854)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2854)));
IkReal gconst88=(x2853*x2855);
IkReal gconst89=((1.0)*r00*x2855);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x2857=((-1.0)*r01);
CheckValue<IkReal> x2860 = IKatan2WithCheck(IkReal(x2857),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2860.valid){
continue;
}
IkReal x2858=((1.0)*(x2860.value));
IkReal x2859=x2849;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2858)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2858)));
IkReal gconst88=(x2857*x2859);
IkReal gconst89=((1.0)*r00*x2859);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2861=((-1.0)*r01);
CheckValue<IkReal> x2864 = IKatan2WithCheck(IkReal(x2861),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2864.valid){
continue;
}
IkReal x2862=((1.0)*(x2864.value));
IkReal x2863=x2849;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2862)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2862)));
IkReal gconst88=(x2861*x2863);
IkReal gconst89=((1.0)*r00*x2863);
IkReal x2865=r02*r02;
IkReal x2866=(r12*sj0);
IkReal x2867=x2849;
IkReal x2868=(cj0*x2867);
j4eval[0]=((IKabs((((x2865*x2868))+(((-1.0)*x2868))+((r02*x2866*x2867)))))+(IKabs((x2866+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2869=((1.0)*gconst88);
CheckValue<IkReal> x2870=IKPowWithIntegerCheck(IKsign((((gconst89*r21))+((gconst88*r20)))),-1);
if(!x2870.valid){
continue;
}
CheckValue<IkReal> x2871 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x2869))+((cj0*gconst89*r00))+(((-1.0)*cj0*r01*x2869))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2870.value)))+(x2871.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2872=IKsin(j4);
IkReal x2873=IKcos(j4);
IkReal x2874=((1.0)*cj1);
IkReal x2875=(gconst89*r10);
IkReal x2876=(sj1*sj2);
IkReal x2877=((1.0)*x2873);
IkReal x2878=(gconst88*x2873);
IkReal x2879=(gconst89*x2872);
IkReal x2880=((1.0)*x2872);
evalcond[0]=((((-1.0)*gconst88*r21*x2880))+(((-1.0)*r22*x2877))+((r20*x2879)));
evalcond[1]=(sj0+((r00*x2879))+(((-1.0)*r02*x2877))+(((-1.0)*gconst88*r01*x2880)));
evalcond[2]=(((x2872*x2875))+(((-1.0)*r12*x2877))+(((-1.0)*gconst88*r11*x2880))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst89*r20*x2877))+(((-1.0)*r22*x2880))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2874))+((r21*x2878)));
evalcond[4]=(((cj0*x2876))+((r01*x2878))+(((-1.0)*r02*x2880))+(((-1.0)*gconst89*r00*x2877))+(((-1.0)*cj0*cj2*x2874)));
evalcond[5]=(((r11*x2878))+(((-1.0)*cj2*sj0*x2874))+((sj0*x2876))+(((-1.0)*x2875*x2877))+(((-1.0)*r12*x2880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2881=((1.0)*gconst88);
CheckValue<IkReal> x2882=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r01))+(((-1.0)*r00*x2881)))),-1);
if(!x2882.valid){
continue;
}
CheckValue<IkReal> x2883 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst89*r20))+(((-1.0)*cj0*r21*x2881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2882.value)))+(x2883.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2884=IKsin(j4);
IkReal x2885=IKcos(j4);
IkReal x2886=((1.0)*cj1);
IkReal x2887=(gconst89*r10);
IkReal x2888=(sj1*sj2);
IkReal x2889=((1.0)*x2885);
IkReal x2890=(gconst88*x2885);
IkReal x2891=(gconst89*x2884);
IkReal x2892=((1.0)*x2884);
evalcond[0]=((((-1.0)*r22*x2889))+(((-1.0)*gconst88*r21*x2892))+((r20*x2891)));
evalcond[1]=(sj0+(((-1.0)*gconst88*r01*x2892))+(((-1.0)*r02*x2889))+((r00*x2891)));
evalcond[2]=(((x2884*x2887))+(((-1.0)*gconst88*r11*x2892))+(((-1.0)*r12*x2889))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2892))+((r21*x2890))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst89*r20*x2889))+(((-1.0)*sj2*x2886)));
evalcond[4]=((((-1.0)*cj0*cj2*x2886))+(((-1.0)*r02*x2892))+((cj0*x2888))+((r01*x2890))+(((-1.0)*gconst89*r00*x2889)));
evalcond[5]=((((-1.0)*x2887*x2889))+(((-1.0)*cj2*sj0*x2886))+((r11*x2890))+((sj0*x2888))+(((-1.0)*r12*x2892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2893=((1.0)*gconst88);
CheckValue<IkReal> x2894 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst89*r20*sj0))+(((-1.0)*r21*sj0*x2893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2894.valid){
continue;
}
CheckValue<IkReal> x2895=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r11))+(((-1.0)*r10*x2893)))),-1);
if(!x2895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2894.value)+(((1.5707963267949)*(x2895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2896=IKsin(j4);
IkReal x2897=IKcos(j4);
IkReal x2898=((1.0)*cj1);
IkReal x2899=(gconst89*r10);
IkReal x2900=(sj1*sj2);
IkReal x2901=((1.0)*x2897);
IkReal x2902=(gconst88*x2897);
IkReal x2903=(gconst89*x2896);
IkReal x2904=((1.0)*x2896);
evalcond[0]=((((-1.0)*gconst88*r21*x2904))+((r20*x2903))+(((-1.0)*r22*x2901)));
evalcond[1]=((((-1.0)*r02*x2901))+sj0+(((-1.0)*gconst88*r01*x2904))+((r00*x2903)));
evalcond[2]=(((x2896*x2899))+(((-1.0)*r12*x2901))+(((-1.0)*gconst88*r11*x2904))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst89*r20*x2901))+((r21*x2902))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2898))+(((-1.0)*r22*x2904)));
evalcond[4]=((((-1.0)*cj0*cj2*x2898))+(((-1.0)*r02*x2904))+((cj0*x2900))+((r01*x2902))+(((-1.0)*gconst89*r00*x2901)));
evalcond[5]=((((-1.0)*cj2*sj0*x2898))+(((-1.0)*x2899*x2901))+(((-1.0)*r12*x2904))+((r11*x2902))+((sj0*x2900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2905=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2905;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x2905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2906=((1.0)*sj5);
IkReal x2907=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2906)));
j4eval[0]=x2907;
j4eval[1]=IKsign(x2907);
j4eval[2]=((IKabs(((((-1.0)*r21*x2906))+((cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2908=cj5*cj5;
IkReal x2909=r01*r01;
IkReal x2910=(cj5*r00);
IkReal x2911=(r01*sj5);
IkReal x2912=((((-1.0)*x2908*x2909))+((x2908*(r00*r00)))+(r02*r02)+(((-2.0)*x2910*x2911))+x2909);
j4eval[0]=x2912;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2910))+x2911))));
j4eval[2]=IKsign(x2912);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2913=cj5*cj5;
IkReal x2914=r01*r01;
IkReal x2915=(r01*sj5);
IkReal x2916=(cj5*r00);
CheckValue<IkReal> x2917=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2915*x2916))+(r02*r02)+((x2913*(r00*r00)))+x2914+(((-1.0)*x2913*x2914)))),-1);
if(!x2917.valid){
continue;
}
CheckValue<IkReal> x2918 = IKatan2WithCheck(IkReal(((((-1.0)*x2916))+x2915)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2917.value)))+(x2918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2919=IKsin(j4);
IkReal x2920=IKcos(j4);
IkReal x2921=(cj5*r00);
IkReal x2922=((1.0)*cj1);
IkReal x2923=(cj5*r20);
IkReal x2924=(cj5*r10);
IkReal x2925=((1.0)*x2920);
IkReal x2926=(sj5*x2920);
IkReal x2927=((1.0)*x2919);
IkReal x2928=(sj5*x2927);
evalcond[0]=((((-1.0)*r21*x2928))+((x2919*x2923))+(((-1.0)*r22*x2925)));
evalcond[1]=(((x2919*x2924))+(((-1.0)*r12*x2925))+(((-1.0)*r11*x2928)));
evalcond[2]=((((-1.0)*r02*x2927))+(((-1.0)*x2921*x2925))+((r01*x2926)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2925))+((x2919*x2921))+(((-1.0)*r01*x2928)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x2924*x2925))+(((-1.0)*r12*x2927))+(((-1.0)*cj2*x2922))+((r11*x2926)));
evalcond[5]=((((-1.0)*x2923*x2925))+(((-1.0)*cj2*sj1))+((r21*x2926))+(((-1.0)*sj2*x2922))+(((-1.0)*r22*x2927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2929=((1.0)*sj5);
CheckValue<IkReal> x2930 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2930.valid){
continue;
}
CheckValue<IkReal> x2931=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2929)))),-1);
if(!x2931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2930.value)+(((1.5707963267949)*(x2931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2932=IKsin(j4);
IkReal x2933=IKcos(j4);
IkReal x2934=(cj5*r00);
IkReal x2935=((1.0)*cj1);
IkReal x2936=(cj5*r20);
IkReal x2937=(cj5*r10);
IkReal x2938=((1.0)*x2933);
IkReal x2939=(sj5*x2933);
IkReal x2940=((1.0)*x2932);
IkReal x2941=(sj5*x2940);
evalcond[0]=((((-1.0)*r21*x2941))+((x2932*x2936))+(((-1.0)*r22*x2938)));
evalcond[1]=((((-1.0)*r11*x2941))+((x2932*x2937))+(((-1.0)*r12*x2938)));
evalcond[2]=((((-1.0)*r02*x2940))+((r01*x2939))+(((-1.0)*x2934*x2938)));
evalcond[3]=((1.0)+(((-1.0)*r01*x2941))+((x2932*x2934))+(((-1.0)*r02*x2938)));
evalcond[4]=((((-1.0)*r12*x2940))+((sj1*sj2))+(((-1.0)*cj2*x2935))+((r11*x2939))+(((-1.0)*x2937*x2938)));
evalcond[5]=(((r21*x2939))+(((-1.0)*cj2*sj1))+(((-1.0)*x2936*x2938))+(((-1.0)*sj2*x2935))+(((-1.0)*r22*x2940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2942 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2942.valid){
continue;
}
CheckValue<IkReal> x2943=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2942.value)+(((1.5707963267949)*(x2943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2944=IKsin(j4);
IkReal x2945=IKcos(j4);
IkReal x2946=(cj5*r00);
IkReal x2947=((1.0)*cj1);
IkReal x2948=(cj5*r20);
IkReal x2949=(cj5*r10);
IkReal x2950=((1.0)*x2945);
IkReal x2951=(sj5*x2945);
IkReal x2952=((1.0)*x2944);
IkReal x2953=(sj5*x2952);
evalcond[0]=((((-1.0)*r21*x2953))+((x2944*x2948))+(((-1.0)*r22*x2950)));
evalcond[1]=((((-1.0)*r11*x2953))+((x2944*x2949))+(((-1.0)*r12*x2950)));
evalcond[2]=((((-1.0)*r02*x2952))+((r01*x2951))+(((-1.0)*x2946*x2950)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2950))+(((-1.0)*r01*x2953))+((x2944*x2946)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x2949*x2950))+(((-1.0)*r12*x2952))+(((-1.0)*cj2*x2947))+((r11*x2951)));
evalcond[5]=((((-1.0)*x2948*x2950))+(((-1.0)*cj2*sj1))+((r21*x2951))+(((-1.0)*r22*x2952))+(((-1.0)*sj2*x2947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2954=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2954;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x2954);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2955=((1.0)*sj5);
IkReal x2956=((((-1.0)*r20*x2955))+(((-1.0)*cj5*r21)));
j4eval[0]=x2956;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x2955))))));
j4eval[2]=IKsign(x2956);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2957=cj5*cj5;
IkReal x2958=r01*r01;
IkReal x2959=(r01*sj5);
IkReal x2960=(cj5*r00);
IkReal x2961=((((-1.0)*x2958))+((x2957*x2958))+(((-1.0)*(r02*r02)))+(((2.0)*x2959*x2960))+(((-1.0)*x2957*(r00*r00))));
j4eval[0]=x2961;
j4eval[1]=IKsign(x2961);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2960))+x2959))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2962=cj5*cj5;
IkReal x2963=r01*r01;
IkReal x2964=(r01*sj5);
IkReal x2965=(cj5*r00);
CheckValue<IkReal> x2966=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2963))+(((2.0)*x2964*x2965))+(((-1.0)*(r02*r02)))+(((-1.0)*x2962*(r00*r00)))+((x2962*x2963)))),-1);
if(!x2966.valid){
continue;
}
CheckValue<IkReal> x2967 = IKatan2WithCheck(IkReal(((((-1.0)*x2965))+x2964)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2966.value)))+(x2967.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2968=IKsin(j4);
IkReal x2969=IKcos(j4);
IkReal x2970=(cj5*r00);
IkReal x2971=((1.0)*sj2);
IkReal x2972=(cj5*r20);
IkReal x2973=(cj5*r10);
IkReal x2974=((1.0)*x2969);
IkReal x2975=(sj5*x2969);
IkReal x2976=((1.0)*x2968);
IkReal x2977=(sj5*x2976);
evalcond[0]=((((-1.0)*r21*x2977))+((x2968*x2972))+(((-1.0)*r22*x2974)));
evalcond[1]=((((-1.0)*r11*x2977))+(((-1.0)*r12*x2974))+((x2968*x2973)));
evalcond[2]=((((-1.0)*r02*x2976))+((r01*x2975))+(((-1.0)*x2970*x2974)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2974))+(((-1.0)*r01*x2977))+((x2968*x2970)));
evalcond[4]=((((-1.0)*r12*x2976))+((r11*x2975))+((cj1*cj2))+(((-1.0)*sj1*x2971))+(((-1.0)*x2973*x2974)));
evalcond[5]=((((-1.0)*x2972*x2974))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2976))+(((-1.0)*cj1*x2971))+((r21*x2975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2978=((1.0)*sj5);
CheckValue<IkReal> x2979 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x2978)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2979.valid){
continue;
}
CheckValue<IkReal> x2980=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2978))+(((-1.0)*cj5*r21)))),-1);
if(!x2980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2979.value)+(((1.5707963267949)*(x2980.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2981=IKsin(j4);
IkReal x2982=IKcos(j4);
IkReal x2983=(cj5*r00);
IkReal x2984=((1.0)*sj2);
IkReal x2985=(cj5*r20);
IkReal x2986=(cj5*r10);
IkReal x2987=((1.0)*x2982);
IkReal x2988=(sj5*x2982);
IkReal x2989=((1.0)*x2981);
IkReal x2990=(sj5*x2989);
evalcond[0]=(((x2981*x2985))+(((-1.0)*r22*x2987))+(((-1.0)*r21*x2990)));
evalcond[1]=((((-1.0)*r12*x2987))+(((-1.0)*r11*x2990))+((x2981*x2986)));
evalcond[2]=(((r01*x2988))+(((-1.0)*x2983*x2987))+(((-1.0)*r02*x2989)));
evalcond[3]=((-1.0)+((x2981*x2983))+(((-1.0)*r02*x2987))+(((-1.0)*r01*x2990)));
evalcond[4]=(((r11*x2988))+(((-1.0)*r12*x2989))+(((-1.0)*sj1*x2984))+((cj1*cj2))+(((-1.0)*x2986*x2987)));
evalcond[5]=((((-1.0)*x2985*x2987))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2984))+(((-1.0)*r22*x2989))+((r21*x2988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2991=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2991.valid){
continue;
}
CheckValue<IkReal> x2992 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2991.value)))+(x2992.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2993=IKsin(j4);
IkReal x2994=IKcos(j4);
IkReal x2995=(cj5*r00);
IkReal x2996=((1.0)*sj2);
IkReal x2997=(cj5*r20);
IkReal x2998=(cj5*r10);
IkReal x2999=((1.0)*x2994);
IkReal x3000=(sj5*x2994);
IkReal x3001=((1.0)*x2993);
IkReal x3002=(sj5*x3001);
evalcond[0]=((((-1.0)*r22*x2999))+((x2993*x2997))+(((-1.0)*r21*x3002)));
evalcond[1]=((((-1.0)*r12*x2999))+(((-1.0)*r11*x3002))+((x2993*x2998)));
evalcond[2]=(((r01*x3000))+(((-1.0)*x2995*x2999))+(((-1.0)*r02*x3001)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x3002))+((x2993*x2995))+(((-1.0)*r02*x2999)));
evalcond[4]=((((-1.0)*sj1*x2996))+(((-1.0)*r12*x3001))+((r11*x3000))+((cj1*cj2))+(((-1.0)*x2998*x2999)));
evalcond[5]=((((-1.0)*r22*x3001))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2996))+(((-1.0)*x2997*x2999))+((r21*x3000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3003=((-1.0)*r10);
IkReal x3005 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3005)==0){
continue;
}
IkReal x3004=pow(x3005,-0.5);
CheckValue<IkReal> x3006 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3003),IKFAST_ATAN2_MAGTHRESH);
if(!x3006.valid){
continue;
}
IkReal gconst90=((-1.0)*(x3006.value));
IkReal gconst91=(r11*x3004);
IkReal gconst92=(x3003*x3004);
CheckValue<IkReal> x3007 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3007.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3007.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3008=((-1.0)*r10);
IkReal x3009=x3004;
CheckValue<IkReal> x3011 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3008),IKFAST_ATAN2_MAGTHRESH);
if(!x3011.valid){
continue;
}
IkReal x3010=((-1.0)*(x3011.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x3010;
IkReal gconst90=x3010;
IkReal gconst91=(r11*x3009);
IkReal gconst92=(x3008*x3009);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3012=((1.0)*gconst91);
CheckValue<IkReal> x3013=IKPowWithIntegerCheck(IKsign((((gconst91*r20))+((gconst92*r21)))),-1);
if(!x3013.valid){
continue;
}
CheckValue<IkReal> x3014 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*cj0*r01*x3012))+(((-1.0)*r11*sj0*x3012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3013.value)))+(x3014.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3015=IKsin(j4);
IkReal x3016=IKcos(j4);
IkReal x3017=((1.0)*cj2);
IkReal x3018=(gconst92*r00);
IkReal x3019=(sj1*sj2);
IkReal x3020=((1.0)*x3016);
IkReal x3021=(gconst91*x3016);
IkReal x3022=((1.0)*x3015);
IkReal x3023=(gconst92*x3015);
IkReal x3024=(gconst91*x3022);
evalcond[0]=((((-1.0)*r21*x3024))+((r20*x3023))+(((-1.0)*r22*x3020)));
evalcond[1]=(((x3015*x3018))+sj0+(((-1.0)*r01*x3024))+(((-1.0)*r02*x3020)));
evalcond[2]=(((r10*x3023))+(((-1.0)*r12*x3020))+(((-1.0)*r11*x3024))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r21*x3021))+(((-1.0)*gconst92*r20*x3020))+(((-1.0)*r22*x3022))+(((-1.0)*sj1*x3017)));
evalcond[4]=((((-1.0)*x3018*x3020))+((cj0*x3019))+(((-1.0)*cj0*cj1*x3017))+((r01*x3021))+(((-1.0)*r02*x3022)));
evalcond[5]=((((-1.0)*r12*x3022))+((r11*x3021))+((sj0*x3019))+(((-1.0)*cj1*sj0*x3017))+(((-1.0)*gconst92*r10*x3020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3025=((1.0)*gconst91);
CheckValue<IkReal> x3026 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst92*r20))+(((-1.0)*cj0*r21*x3025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3026.valid){
continue;
}
CheckValue<IkReal> x3027=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3025))+(((-1.0)*gconst92*r01)))),-1);
if(!x3027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3026.value)+(((1.5707963267949)*(x3027.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3028=IKsin(j4);
IkReal x3029=IKcos(j4);
IkReal x3030=((1.0)*cj2);
IkReal x3031=(gconst92*r00);
IkReal x3032=(sj1*sj2);
IkReal x3033=((1.0)*x3029);
IkReal x3034=(gconst91*x3029);
IkReal x3035=((1.0)*x3028);
IkReal x3036=(gconst92*x3028);
IkReal x3037=(gconst91*x3035);
evalcond[0]=((((-1.0)*r21*x3037))+(((-1.0)*r22*x3033))+((r20*x3036)));
evalcond[1]=(((x3028*x3031))+sj0+(((-1.0)*r01*x3037))+(((-1.0)*r02*x3033)));
evalcond[2]=((((-1.0)*r11*x3037))+(((-1.0)*r12*x3033))+((r10*x3036))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst92*r20*x3033))+(((-1.0)*cj1*sj2))+((r21*x3034))+(((-1.0)*r22*x3035))+(((-1.0)*sj1*x3030)));
evalcond[4]=(((cj0*x3032))+((r01*x3034))+(((-1.0)*r02*x3035))+(((-1.0)*cj0*cj1*x3030))+(((-1.0)*x3031*x3033)));
evalcond[5]=((((-1.0)*cj1*sj0*x3030))+((r11*x3034))+((sj0*x3032))+(((-1.0)*gconst92*r10*x3033))+(((-1.0)*r12*x3035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3038=((-1.0)*r11);
IkReal x3040 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3040)==0){
continue;
}
IkReal x3039=pow(x3040,-0.5);
CheckValue<IkReal> x3041 = IKatan2WithCheck(IkReal(x3038),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3041.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x3041.value))));
IkReal gconst94=(x3038*x3039);
IkReal gconst95=((1.0)*r10*x3039);
CheckValue<IkReal> x3042 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3042.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3042.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3043=((-1.0)*r11);
CheckValue<IkReal> x3046 = IKatan2WithCheck(IkReal(x3043),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3046.valid){
continue;
}
IkReal x3044=((1.0)*(x3046.value));
IkReal x3045=x3039;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3044)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3044)));
IkReal gconst94=(x3043*x3045);
IkReal gconst95=((1.0)*r10*x3045);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3047=((-1.0)*r11);
CheckValue<IkReal> x3050 = IKatan2WithCheck(IkReal(x3047),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3050.valid){
continue;
}
IkReal x3048=((1.0)*(x3050.value));
IkReal x3049=x3039;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3048)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3048)));
IkReal gconst94=(x3047*x3049);
IkReal gconst95=((1.0)*r10*x3049);
IkReal x3051=r12*r12;
IkReal x3052=(cj0*r02);
IkReal x3053=x3039;
IkReal x3054=(sj0*x3053);
j4eval[0]=((IKabs(((((-1.0)*x3054))+((x3051*x3054))+((r12*x3052*x3053)))))+(IKabs((x3052+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3055=((-1.0)*r11);
CheckValue<IkReal> x3058 = IKatan2WithCheck(IkReal(x3055),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3058.valid){
continue;
}
IkReal x3056=((1.0)*(x3058.value));
IkReal x3057=x3039;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3056)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3056)));
IkReal gconst94=(x3055*x3057);
IkReal gconst95=((1.0)*r10*x3057);
IkReal x3059=r12*r12;
IkReal x3060=((1.0)*r22);
IkReal x3061=(cj1*sj2);
IkReal x3062=(cj2*sj1);
CheckValue<IkReal> x3066=IKPowWithIntegerCheck(((-1.0)+x3059),-1);
if(!x3066.valid){
continue;
}
IkReal x3063=x3066.value;
if((((1.0)+(((-1.0)*x3059)))) < -0.00001)
continue;
IkReal x3064=IKsqrt(((1.0)+(((-1.0)*x3059))));
IkReal x3065=(r12*x3063*x3064);
j4eval[0]=((IKabs(((((-1.0)*x3060*x3062*x3065))+(((-1.0)*x3060*x3061*x3065)))))+(IKabs(((((-1.0)*x3060*x3062))+(((-1.0)*x3060*x3061))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3067=(cj2*sj1);
IkReal x3068=(gconst95*r20);
IkReal x3069=(cj1*sj2);
IkReal x3070=((1.0)*r22);
IkReal x3071=(gconst94*r21);
CheckValue<IkReal> x3072 = IKatan2WithCheck(IkReal(((((-1.0)*x3067*x3070))+(((-1.0)*x3069*x3070)))),IkReal(((((-1.0)*x3067*x3068))+(((-1.0)*x3068*x3069))+((x3069*x3071))+((x3067*x3071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3072.valid){
continue;
}
CheckValue<IkReal> x3073=IKPowWithIntegerCheck(IKsign(((x3071*x3071)+(r22*r22)+(x3068*x3068)+(((-2.0)*x3068*x3071)))),-1);
if(!x3073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3072.value)+(((1.5707963267949)*(x3073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3074=IKsin(j4);
IkReal x3075=IKcos(j4);
IkReal x3076=((1.0)*cj2);
IkReal x3077=(gconst95*r10);
IkReal x3078=(sj1*sj2);
IkReal x3079=((1.0)*x3075);
IkReal x3080=(gconst95*x3074);
IkReal x3081=(gconst94*x3075);
IkReal x3082=((1.0)*x3074);
IkReal x3083=(gconst94*x3082);
evalcond[0]=((((-1.0)*r22*x3079))+(((-1.0)*r21*x3083))+((r20*x3080)));
evalcond[1]=(sj0+(((-1.0)*r02*x3079))+((r00*x3080))+(((-1.0)*r01*x3083)));
evalcond[2]=((((-1.0)*r12*x3079))+(((-1.0)*cj0))+(((-1.0)*r11*x3083))+((x3074*x3077)));
evalcond[3]=(((r21*x3081))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3082))+(((-1.0)*gconst95*r20*x3079))+(((-1.0)*sj1*x3076)));
evalcond[4]=(((cj0*x3078))+(((-1.0)*cj0*cj1*x3076))+(((-1.0)*gconst95*r00*x3079))+(((-1.0)*r02*x3082))+((r01*x3081)));
evalcond[5]=(((r11*x3081))+((sj0*x3078))+(((-1.0)*cj1*sj0*x3076))+(((-1.0)*r12*x3082))+(((-1.0)*x3077*x3079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3084=((1.0)*gconst94);
CheckValue<IkReal> x3085=IKPowWithIntegerCheck(IKsign((((gconst95*r21))+((gconst94*r20)))),-1);
if(!x3085.valid){
continue;
}
CheckValue<IkReal> x3086 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3084))+(((-1.0)*r11*sj0*x3084))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3085.value)))+(x3086.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3087=IKsin(j4);
IkReal x3088=IKcos(j4);
IkReal x3089=((1.0)*cj2);
IkReal x3090=(gconst95*r10);
IkReal x3091=(sj1*sj2);
IkReal x3092=((1.0)*x3088);
IkReal x3093=(gconst95*x3087);
IkReal x3094=(gconst94*x3088);
IkReal x3095=((1.0)*x3087);
IkReal x3096=(gconst94*x3095);
evalcond[0]=((((-1.0)*r22*x3092))+((r20*x3093))+(((-1.0)*r21*x3096)));
evalcond[1]=((((-1.0)*r02*x3092))+sj0+((r00*x3093))+(((-1.0)*r01*x3096)));
evalcond[2]=((((-1.0)*r11*x3096))+(((-1.0)*r12*x3092))+((x3087*x3090))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x3095))+((r21*x3094))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst95*r20*x3092))+(((-1.0)*sj1*x3089)));
evalcond[4]=(((cj0*x3091))+((r01*x3094))+(((-1.0)*r02*x3095))+(((-1.0)*gconst95*r00*x3092))+(((-1.0)*cj0*cj1*x3089)));
evalcond[5]=((((-1.0)*cj1*sj0*x3089))+(((-1.0)*r12*x3095))+(((-1.0)*x3090*x3092))+((r11*x3094))+((sj0*x3091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3097=((1.0)*gconst94);
CheckValue<IkReal> x3098=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r01))+(((-1.0)*r00*x3097)))),-1);
if(!x3098.valid){
continue;
}
CheckValue<IkReal> x3099 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3097))+((cj0*gconst95*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3098.value)))+(x3099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3100=IKsin(j4);
IkReal x3101=IKcos(j4);
IkReal x3102=((1.0)*cj2);
IkReal x3103=(gconst95*r10);
IkReal x3104=(sj1*sj2);
IkReal x3105=((1.0)*x3101);
IkReal x3106=(gconst95*x3100);
IkReal x3107=(gconst94*x3101);
IkReal x3108=((1.0)*x3100);
IkReal x3109=(gconst94*x3108);
evalcond[0]=((((-1.0)*r22*x3105))+((r20*x3106))+(((-1.0)*r21*x3109)));
evalcond[1]=(sj0+(((-1.0)*r01*x3109))+((r00*x3106))+(((-1.0)*r02*x3105)));
evalcond[2]=((((-1.0)*r11*x3109))+(((-1.0)*r12*x3105))+((x3100*x3103))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x3102))+(((-1.0)*cj1*sj2))+((r21*x3107))+(((-1.0)*r22*x3108))+(((-1.0)*gconst95*r20*x3105)));
evalcond[4]=((((-1.0)*cj0*cj1*x3102))+(((-1.0)*gconst95*r00*x3105))+((cj0*x3104))+((r01*x3107))+(((-1.0)*r02*x3108)));
evalcond[5]=(((sj0*x3104))+(((-1.0)*x3103*x3105))+((r11*x3107))+(((-1.0)*cj1*sj0*x3102))+(((-1.0)*r12*x3108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3110=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3110;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x3110);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3111=((1.0)*sj5);
IkReal x3112=((((-1.0)*r00*x3111))+(((-1.0)*cj5*r01)));
j4eval[0]=x3112;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x3111)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3113=cj5*cj5;
IkReal x3114=r11*r11;
IkReal x3115=(cj5*r10);
IkReal x3116=(r11*sj5);
IkReal x3117=((((2.0)*x3115*x3116))+(((-1.0)*x3113*(r10*r10)))+(((-1.0)*x3114))+((x3113*x3114))+(((-1.0)*(r12*r12))));
j4eval[0]=x3117;
j4eval[1]=((IKabs(r12))+(IKabs((x3116+(((-1.0)*x3115))))));
j4eval[2]=IKsign(x3117);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3118=cj5*cj5;
IkReal x3119=r11*r11;
IkReal x3120=(cj5*r10);
IkReal x3121=(r11*sj5);
CheckValue<IkReal> x3122=IKPowWithIntegerCheck(IKsign(((((2.0)*x3120*x3121))+((x3118*x3119))+(((-1.0)*x3119))+(((-1.0)*x3118*(r10*r10)))+(((-1.0)*(r12*r12))))),-1);
if(!x3122.valid){
continue;
}
CheckValue<IkReal> x3123 = IKatan2WithCheck(IkReal((x3121+(((-1.0)*x3120)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x3123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3122.value)))+(x3123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3124=IKsin(j4);
IkReal x3125=IKcos(j4);
IkReal x3126=(cj5*r00);
IkReal x3127=((1.0)*cj1);
IkReal x3128=((1.0)*x3125);
IkReal x3129=(sj5*x3125);
IkReal x3130=(cj5*x3124);
IkReal x3131=((1.0)*x3124);
IkReal x3132=(sj5*x3131);
evalcond[0]=(((r20*x3130))+(((-1.0)*r21*x3132))+(((-1.0)*r22*x3128)));
evalcond[1]=((((-1.0)*r02*x3128))+((x3124*x3126))+(((-1.0)*r01*x3132)));
evalcond[2]=((((-1.0)*cj5*r10*x3128))+(((-1.0)*r12*x3131))+((r11*x3129)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3128))+((r10*x3130))+(((-1.0)*r11*x3132)));
evalcond[4]=(((r01*x3129))+(((-1.0)*r02*x3131))+((sj1*sj2))+(((-1.0)*cj2*x3127))+(((-1.0)*x3126*x3128)));
evalcond[5]=((((-1.0)*sj2*x3127))+(((-1.0)*cj2*sj1))+((r21*x3129))+(((-1.0)*cj5*r20*x3128))+(((-1.0)*r22*x3131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3133=((1.0)*sj5);
CheckValue<IkReal> x3134=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3133))+(((-1.0)*cj5*r01)))),-1);
if(!x3134.valid){
continue;
}
CheckValue<IkReal> x3135 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x3133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3134.value)))+(x3135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3136=IKsin(j4);
IkReal x3137=IKcos(j4);
IkReal x3138=(cj5*r00);
IkReal x3139=((1.0)*cj1);
IkReal x3140=((1.0)*x3137);
IkReal x3141=(sj5*x3137);
IkReal x3142=(cj5*x3136);
IkReal x3143=((1.0)*x3136);
IkReal x3144=(sj5*x3143);
evalcond[0]=((((-1.0)*r22*x3140))+((r20*x3142))+(((-1.0)*r21*x3144)));
evalcond[1]=((((-1.0)*r02*x3140))+(((-1.0)*r01*x3144))+((x3136*x3138)));
evalcond[2]=((((-1.0)*r12*x3143))+((r11*x3141))+(((-1.0)*cj5*r10*x3140)));
evalcond[3]=((-1.0)+((r10*x3142))+(((-1.0)*r11*x3144))+(((-1.0)*r12*x3140)));
evalcond[4]=(((sj1*sj2))+((r01*x3141))+(((-1.0)*r02*x3143))+(((-1.0)*x3138*x3140))+(((-1.0)*cj2*x3139)));
evalcond[5]=((((-1.0)*cj5*r20*x3140))+(((-1.0)*r22*x3143))+(((-1.0)*sj2*x3139))+(((-1.0)*cj2*sj1))+((r21*x3141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3145=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3145.valid){
continue;
}
CheckValue<IkReal> x3146 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3145.value)))+(x3146.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3147=IKsin(j4);
IkReal x3148=IKcos(j4);
IkReal x3149=(cj5*r00);
IkReal x3150=((1.0)*cj1);
IkReal x3151=((1.0)*x3148);
IkReal x3152=(sj5*x3148);
IkReal x3153=(cj5*x3147);
IkReal x3154=((1.0)*x3147);
IkReal x3155=(sj5*x3154);
evalcond[0]=((((-1.0)*r22*x3151))+((r20*x3153))+(((-1.0)*r21*x3155)));
evalcond[1]=(((x3147*x3149))+(((-1.0)*r02*x3151))+(((-1.0)*r01*x3155)));
evalcond[2]=(((r11*x3152))+(((-1.0)*cj5*r10*x3151))+(((-1.0)*r12*x3154)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x3155))+((r10*x3153))+(((-1.0)*r12*x3151)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x3149*x3151))+((r01*x3152))+(((-1.0)*r02*x3154))+(((-1.0)*cj2*x3150)));
evalcond[5]=((((-1.0)*r22*x3154))+(((-1.0)*cj5*r20*x3151))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x3150))+((r21*x3152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3156=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3156;
j4eval[1]=IKsign(x3156);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3157=((1.0)*sj5);
IkReal x3158=((((-1.0)*cj5*r21))+(((-1.0)*r20*x3157)));
j4eval[0]=x3158;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x3157))+((cj5*r00))))));
j4eval[2]=IKsign(x3158);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3159=cj5*cj5;
IkReal x3160=r11*r11;
IkReal x3161=(r11*sj5);
IkReal x3162=(cj5*r10);
IkReal x3163=(x3160+(r12*r12)+((x3159*(r10*r10)))+(((-2.0)*x3161*x3162))+(((-1.0)*x3159*x3160)));
j4eval[0]=x3163;
j4eval[1]=IKsign(x3163);
j4eval[2]=((IKabs((x3161+(((-1.0)*x3162)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3164=cj5*cj5;
IkReal x3165=r11*r11;
IkReal x3166=(cj5*r10);
IkReal x3167=(r11*sj5);
CheckValue<IkReal> x3168=IKPowWithIntegerCheck(IKsign((x3165+(r12*r12)+((x3164*(r10*r10)))+(((-1.0)*x3164*x3165))+(((-2.0)*x3166*x3167)))),-1);
if(!x3168.valid){
continue;
}
CheckValue<IkReal> x3169 = IKatan2WithCheck(IkReal((x3167+(((-1.0)*x3166)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x3169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3168.value)))+(x3169.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3170=IKsin(j4);
IkReal x3171=IKcos(j4);
IkReal x3172=(cj5*r00);
IkReal x3173=((1.0)*sj2);
IkReal x3174=((1.0)*x3171);
IkReal x3175=(sj5*x3171);
IkReal x3176=(cj5*x3170);
IkReal x3177=((1.0)*x3170);
IkReal x3178=(sj5*x3177);
evalcond[0]=((((-1.0)*r21*x3178))+((r20*x3176))+(((-1.0)*r22*x3174)));
evalcond[1]=((((-1.0)*r01*x3178))+((x3170*x3172))+(((-1.0)*r02*x3174)));
evalcond[2]=(((r11*x3175))+(((-1.0)*r12*x3177))+(((-1.0)*cj5*r10*x3174)));
evalcond[3]=((1.0)+((r10*x3176))+(((-1.0)*r12*x3174))+(((-1.0)*r11*x3178)));
evalcond[4]=((((-1.0)*sj1*x3173))+(((-1.0)*x3172*x3174))+((r01*x3175))+((cj1*cj2))+(((-1.0)*r02*x3177)));
evalcond[5]=((((-1.0)*cj1*x3173))+(((-1.0)*cj2*sj1))+(((-1.0)*cj5*r20*x3174))+((r21*x3175))+(((-1.0)*r22*x3177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3179=((1.0)*sj5);
CheckValue<IkReal> x3180 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x3179))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3180.valid){
continue;
}
CheckValue<IkReal> x3181=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x3179)))),-1);
if(!x3181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3180.value)+(((1.5707963267949)*(x3181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3182=IKsin(j4);
IkReal x3183=IKcos(j4);
IkReal x3184=(cj5*r00);
IkReal x3185=((1.0)*sj2);
IkReal x3186=((1.0)*x3183);
IkReal x3187=(sj5*x3183);
IkReal x3188=(cj5*x3182);
IkReal x3189=((1.0)*x3182);
IkReal x3190=(sj5*x3189);
evalcond[0]=((((-1.0)*r22*x3186))+((r20*x3188))+(((-1.0)*r21*x3190)));
evalcond[1]=((((-1.0)*r01*x3190))+(((-1.0)*r02*x3186))+((x3182*x3184)));
evalcond[2]=((((-1.0)*cj5*r10*x3186))+((r11*x3187))+(((-1.0)*r12*x3189)));
evalcond[3]=((1.0)+(((-1.0)*r11*x3190))+(((-1.0)*r12*x3186))+((r10*x3188)));
evalcond[4]=((((-1.0)*x3184*x3186))+(((-1.0)*r02*x3189))+((r01*x3187))+((cj1*cj2))+(((-1.0)*sj1*x3185)));
evalcond[5]=((((-1.0)*r22*x3189))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3185))+((r21*x3187))+(((-1.0)*cj5*r20*x3186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3191=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3191.valid){
continue;
}
CheckValue<IkReal> x3192 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3191.value)))+(x3192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3193=IKsin(j4);
IkReal x3194=IKcos(j4);
IkReal x3195=(cj5*r00);
IkReal x3196=((1.0)*sj2);
IkReal x3197=((1.0)*x3194);
IkReal x3198=(sj5*x3194);
IkReal x3199=(cj5*x3193);
IkReal x3200=((1.0)*x3193);
IkReal x3201=(sj5*x3200);
evalcond[0]=((((-1.0)*r22*x3197))+((r20*x3199))+(((-1.0)*r21*x3201)));
evalcond[1]=((((-1.0)*r01*x3201))+(((-1.0)*r02*x3197))+((x3193*x3195)));
evalcond[2]=((((-1.0)*r12*x3200))+((r11*x3198))+(((-1.0)*cj5*r10*x3197)));
evalcond[3]=((1.0)+(((-1.0)*r11*x3201))+(((-1.0)*r12*x3197))+((r10*x3199)));
evalcond[4]=((((-1.0)*r02*x3200))+((r01*x3198))+(((-1.0)*sj1*x3196))+((cj1*cj2))+(((-1.0)*x3195*x3197)));
evalcond[5]=(((r21*x3198))+(((-1.0)*cj5*r20*x3197))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x3200))+(((-1.0)*cj1*x3196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3202=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3202);
rxp0_2=(py*r00);
rxp1_0=(r21*x3202);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3203=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3203);
rxp0_2=(py*r00);
rxp1_0=(r21*x3203);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3204=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3204);
rxp0_2=(py*r00);
rxp1_0=(r21*x3204);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3207=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x3207.valid){
continue;
}
IkReal x3205=x3207.value;
IkReal x3206=(cj0*x3205);
cj4array[0]=((((-1.0)*sj1*sj2*x3206))+((cj1*cj2*x3206)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3208=IKsin(j4);
IkReal x3209=IKcos(j4);
IkReal x3210=(cj5*r20);
IkReal x3211=((1.0)*x3209);
IkReal x3212=((1.0)*sj5*x3208);
evalcond[0]=((-1.0)*r12*x3208);
evalcond[1]=((((-1.0)*r12*x3211))+(((-1.0)*cj0)));
evalcond[2]=(((x3208*x3210))+(((-1.0)*r21*x3212)));
evalcond[3]=((((-1.0)*r01*x3212))+((cj5*r00*x3208)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x3210*x3211))+((r21*sj5*x3209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3214=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3214.valid){
continue;
}
IkReal x3213=x3214.value;
cj4array[0]=(((cj2*sj1*x3213))+((cj1*sj2*x3213)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3215=IKsin(j4);
IkReal x3216=IKcos(j4);
IkReal x3217=(cj5*r00);
IkReal x3218=(r01*sj5);
IkReal x3219=((1.0)*cj0);
IkReal x3220=((1.0)*x3216);
IkReal x3221=((1.0)*x3215);
evalcond[0]=((-1.0)*r12*x3215);
evalcond[1]=((((-1.0)*x3219))+(((-1.0)*r12*x3220)));
evalcond[2]=(((cj5*r20*x3215))+(((-1.0)*r21*sj5*x3221)));
evalcond[3]=(((x3215*x3217))+(((-1.0)*x3218*x3221)));
evalcond[4]=(((x3216*x3218))+(((-1.0)*cj1*cj2*x3219))+((cj0*sj1*sj2))+(((-1.0)*x3217*x3220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3222=IKPowWithIntegerCheck(r12,-1);
if(!x3222.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x3222.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3223=IKsin(j4);
IkReal x3224=IKcos(j4);
IkReal x3225=(r01*sj5);
IkReal x3226=((1.0)*cj1);
IkReal x3227=(r21*sj5);
IkReal x3228=((1.0)*x3223);
IkReal x3229=(cj5*x3223);
IkReal x3230=((1.0)*cj5*x3224);
evalcond[0]=((-1.0)*r12*x3223);
evalcond[1]=((((-1.0)*x3227*x3228))+((r20*x3229)));
evalcond[2]=((((-1.0)*x3225*x3228))+((r00*x3229)));
evalcond[3]=((((-1.0)*sj2*x3226))+(((-1.0)*cj2*sj1))+((x3224*x3227))+(((-1.0)*r20*x3230)));
evalcond[4]=((((-1.0)*cj0*cj2*x3226))+(((-1.0)*r00*x3230))+((x3224*x3225))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3231=((1.0)*sj5);
CheckValue<IkReal> x3232=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3232.valid){
continue;
}
CheckValue<IkReal> x3233 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+(((-1.0)*cj0*r01*x3231))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x3231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3232.value)))+(x3233.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3234=IKsin(j4);
IkReal x3235=IKcos(j4);
IkReal x3236=(cj5*r00);
IkReal x3237=((1.0)*cj1);
IkReal x3238=(sj1*sj2);
IkReal x3239=((1.0)*x3235);
IkReal x3240=(sj5*x3235);
IkReal x3241=(cj5*x3234);
IkReal x3242=((1.0)*x3234);
IkReal x3243=(sj5*x3242);
evalcond[0]=((((-1.0)*r21*x3243))+((r20*x3241))+(((-1.0)*r22*x3239)));
evalcond[1]=((((-1.0)*r02*x3239))+sj0+(((-1.0)*r01*x3243))+((x3234*x3236)));
evalcond[2]=((((-1.0)*r11*x3243))+(((-1.0)*r12*x3239))+((r10*x3241))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3240))+(((-1.0)*cj5*r20*x3239))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x3237))+(((-1.0)*r22*x3242)));
evalcond[4]=(((r01*x3240))+((cj0*x3238))+(((-1.0)*cj0*cj2*x3237))+(((-1.0)*x3236*x3239))+(((-1.0)*r02*x3242)));
evalcond[5]=((((-1.0)*r12*x3242))+(((-1.0)*cj2*sj0*x3237))+((r11*x3240))+((sj0*x3238))+(((-1.0)*cj5*r10*x3239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3244=((1.0)*sj5);
CheckValue<IkReal> x3245=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3244))+(((-1.0)*cj5*r01)))),-1);
if(!x3245.valid){
continue;
}
CheckValue<IkReal> x3246 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3244))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3245.value)))+(x3246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3247=IKsin(j4);
IkReal x3248=IKcos(j4);
IkReal x3249=(cj5*r00);
IkReal x3250=((1.0)*cj1);
IkReal x3251=(sj1*sj2);
IkReal x3252=((1.0)*x3248);
IkReal x3253=(sj5*x3248);
IkReal x3254=(cj5*x3247);
IkReal x3255=((1.0)*x3247);
IkReal x3256=(sj5*x3255);
evalcond[0]=((((-1.0)*r22*x3252))+(((-1.0)*r21*x3256))+((r20*x3254)));
evalcond[1]=(sj0+(((-1.0)*r02*x3252))+((x3247*x3249))+(((-1.0)*r01*x3256)));
evalcond[2]=(((r10*x3254))+(((-1.0)*r11*x3256))+(((-1.0)*r12*x3252))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x3250))+(((-1.0)*cj2*sj1))+(((-1.0)*cj5*r20*x3252))+((r21*x3253))+(((-1.0)*r22*x3255)));
evalcond[4]=((((-1.0)*r02*x3255))+((cj0*x3251))+(((-1.0)*cj0*cj2*x3250))+(((-1.0)*x3249*x3252))+((r01*x3253)));
evalcond[5]=(((r11*x3253))+((sj0*x3251))+(((-1.0)*cj5*r10*x3252))+(((-1.0)*cj2*sj0*x3250))+(((-1.0)*r12*x3255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3257=((1.0)*sj5);
CheckValue<IkReal> x3258 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3258.valid){
continue;
}
CheckValue<IkReal> x3259=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3257)))),-1);
if(!x3259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3258.value)+(((1.5707963267949)*(x3259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3260=IKsin(j4);
IkReal x3261=IKcos(j4);
IkReal x3262=(cj5*r00);
IkReal x3263=((1.0)*cj1);
IkReal x3264=(sj1*sj2);
IkReal x3265=((1.0)*x3261);
IkReal x3266=(sj5*x3261);
IkReal x3267=(cj5*x3260);
IkReal x3268=((1.0)*x3260);
IkReal x3269=(sj5*x3268);
evalcond[0]=((((-1.0)*r21*x3269))+((r20*x3267))+(((-1.0)*r22*x3265)));
evalcond[1]=(sj0+(((-1.0)*r01*x3269))+(((-1.0)*r02*x3265))+((x3260*x3262)));
evalcond[2]=((((-1.0)*r11*x3269))+(((-1.0)*r12*x3265))+((r10*x3267))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3266))+(((-1.0)*cj5*r20*x3265))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x3263))+(((-1.0)*r22*x3268)));
evalcond[4]=((((-1.0)*cj0*cj2*x3263))+((r01*x3266))+(((-1.0)*x3262*x3265))+(((-1.0)*r02*x3268))+((cj0*x3264)));
evalcond[5]=((((-1.0)*cj5*r10*x3265))+((sj0*x3264))+(((-1.0)*r12*x3268))+(((-1.0)*cj2*sj0*x3263))+((r11*x3266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3270=((1.0)*cj5);
IkReal x3271=((1.0)*sj5);
IkReal x3272=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x3272;
j0eval[1]=((IKabs(((((-1.0)*r00*x3271))+(((-1.0)*r01*x3270)))))+(IKabs(((((-1.0)*r11*x3270))+(((-1.0)*r10*x3271))))));
j0eval[2]=IKsign(x3272);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3273=r21*r21;
IkReal x3274=cj5*cj5;
IkReal x3275=(cj2*sj1);
IkReal x3276=(cj1*sj2);
IkReal x3277=((1.0)*r22);
IkReal x3278=(r21*sj5);
IkReal x3279=((1.0)*cj5*r20);
IkReal x3280=((((-1.0)*x3273))+(((-1.0)*x3274*(r20*r20)))+((x3273*x3274))+(((-1.0)*r22*x3277))+(((2.0)*cj5*r20*x3278)));
j4eval[0]=x3280;
j4eval[1]=((IKabs(((((-1.0)*x3276*x3277))+(((-1.0)*x3275*x3277)))))+(IKabs(((((-1.0)*x3276*x3279))+(((-1.0)*x3275*x3279))+((x3275*x3278))+((x3276*x3278))))));
j4eval[2]=IKsign(x3280);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3281=cj1*cj1;
IkReal x3282=(cj2*sj2);
IkReal x3283=(cj1*sj1);
j0eval[0]=((((-2.0)*x3283*(cj2*cj2)))+x3283+x3282+(((-2.0)*x3281*x3282))+(((-1.07243816254417)*sj2*x3281))+(((-1.07243816254417)*cj2*x3283)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.133213063666633)*px))+(((-0.831164487664683)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.133213063666633)*py))+(((-0.831164487664683)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.133213063666633)*px))+(((-0.831164487664683)*py))))+IKsqr(((((-0.133213063666633)*py))+(((-0.831164487664683)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.133213063666633)*px))+(((-0.831164487664683)*py))), ((((-0.133213063666633)*py))+(((-0.831164487664683)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3284=IKcos(j0);
IkReal x3285=IKsin(j0);
evalcond[0]=((((-1.173)*x3284))+(((-1.0)*px))+(((0.188)*x3285)));
evalcond[1]=((((-1.173)*x3285))+(((-1.0)*py))+(((-0.188)*x3284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3286=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3286;
j4eval[1]=IKsign(x3286);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3287=((1.0)*sj5);
IkReal x3288=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3287)));
j4eval[0]=x3288;
j4eval[1]=IKsign(x3288);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3287))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3289=((1.0)*sj5);
IkReal x3290=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3289)));
j4eval[0]=x3290;
j4eval[1]=IKsign(x3290);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3289))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3291=((1.0)*sj5);
CheckValue<IkReal> x3292=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3291)))),-1);
if(!x3292.valid){
continue;
}
CheckValue<IkReal> x3293 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3291))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3292.value)))+(x3293.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3294=IKcos(j4);
IkReal x3295=IKsin(j4);
IkReal x3296=((1.0)*cj0);
IkReal x3297=(r11*sj5);
IkReal x3298=(r21*sj5);
IkReal x3299=(r01*sj5);
IkReal x3300=((1.0)*x3294);
IkReal x3301=(cj5*x3294);
IkReal x3302=((1.0)*x3295);
IkReal x3303=(cj5*x3295);
evalcond[0]=((((-1.0)*x3298*x3300))+((r22*x3295))+((r20*x3301)));
evalcond[1]=((((-1.0)*x3298*x3302))+(((-1.0)*r22*x3300))+((r20*x3303)));
evalcond[2]=(sj0+(((-1.0)*r02*x3300))+((r00*x3303))+(((-1.0)*x3299*x3302)));
evalcond[3]=((((-1.0)*x3296))+((r02*x3295))+((r00*x3301))+(((-1.0)*x3299*x3300)));
evalcond[4]=((((-1.0)*sj0))+((r10*x3301))+(((-1.0)*x3297*x3300))+((r12*x3295)));
evalcond[5]=((((-1.0)*x3296))+((r10*x3303))+(((-1.0)*x3297*x3302))+(((-1.0)*r12*x3300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3304=((1.0)*sj5);
CheckValue<IkReal> x3305 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3305.valid){
continue;
}
CheckValue<IkReal> x3306=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3304)))),-1);
if(!x3306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3305.value)+(((1.5707963267949)*(x3306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3307=IKcos(j4);
IkReal x3308=IKsin(j4);
IkReal x3309=((1.0)*cj0);
IkReal x3310=(r11*sj5);
IkReal x3311=(r21*sj5);
IkReal x3312=(r01*sj5);
IkReal x3313=((1.0)*x3307);
IkReal x3314=(cj5*x3307);
IkReal x3315=((1.0)*x3308);
IkReal x3316=(cj5*x3308);
evalcond[0]=(((r22*x3308))+(((-1.0)*x3311*x3313))+((r20*x3314)));
evalcond[1]=((((-1.0)*r22*x3313))+(((-1.0)*x3311*x3315))+((r20*x3316)));
evalcond[2]=(sj0+(((-1.0)*x3312*x3315))+(((-1.0)*r02*x3313))+((r00*x3316)));
evalcond[3]=(((r02*x3308))+(((-1.0)*x3309))+(((-1.0)*x3312*x3313))+((r00*x3314)));
evalcond[4]=((((-1.0)*sj0))+((r10*x3314))+((r12*x3308))+(((-1.0)*x3310*x3313)));
evalcond[5]=(((r10*x3316))+(((-1.0)*x3309))+(((-1.0)*x3310*x3315))+(((-1.0)*r12*x3313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3317 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3317.valid){
continue;
}
CheckValue<IkReal> x3318=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3317.value)+(((1.5707963267949)*(x3318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3319=IKcos(j4);
IkReal x3320=IKsin(j4);
IkReal x3321=((1.0)*cj0);
IkReal x3322=(r11*sj5);
IkReal x3323=(r21*sj5);
IkReal x3324=(r01*sj5);
IkReal x3325=((1.0)*x3319);
IkReal x3326=(cj5*x3319);
IkReal x3327=((1.0)*x3320);
IkReal x3328=(cj5*x3320);
evalcond[0]=(((r22*x3320))+((r20*x3326))+(((-1.0)*x3323*x3325)));
evalcond[1]=(((r20*x3328))+(((-1.0)*x3323*x3327))+(((-1.0)*r22*x3325)));
evalcond[2]=((((-1.0)*x3324*x3327))+sj0+(((-1.0)*r02*x3325))+((r00*x3328)));
evalcond[3]=((((-1.0)*x3321))+(((-1.0)*x3324*x3325))+((r00*x3326))+((r02*x3320)));
evalcond[4]=(((r12*x3320))+(((-1.0)*sj0))+(((-1.0)*x3322*x3325))+((r10*x3326)));
evalcond[5]=((((-1.0)*x3321))+(((-1.0)*x3322*x3327))+(((-1.0)*r12*x3325))+((r10*x3328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.10735989196489)*py))+(((5.07765023632681)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.10735989196489)*px))+(((-5.07765023632681)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.10735989196489)*py))+(((5.07765023632681)*px))))+IKsqr(((((-1.10735989196489)*px))+(((-5.07765023632681)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.10735989196489)*py))+(((5.07765023632681)*px))), ((((-1.10735989196489)*px))+(((-5.07765023632681)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3329=IKsin(j0);
IkReal x3330=IKcos(j0);
evalcond[0]=((((0.188)*x3329))+(((-1.0)*px))+(((-0.041)*x3330)));
evalcond[1]=((((-0.041)*x3329))+(((-1.0)*py))+(((-0.188)*x3330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3331=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3331;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3331);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3332=((1.0)*sj5);
IkReal x3333=((((-1.0)*r00*x3332))+(((-1.0)*cj5*r01)));
j4eval[0]=x3333;
j4eval[1]=IKsign(x3333);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3332))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3334=cj5*cj5;
IkReal x3335=((1.0)*r21);
IkReal x3336=(cj5*r20);
IkReal x3337=(((r01*sj5*x3336))+(((-1.0)*r02*r22))+(((-1.0)*r01*x3335))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x3334))+((r01*r21*x3334)));
j4eval[0]=x3337;
j4eval[1]=IKsign(x3337);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3336))+(((-1.0)*cj0*sj5*x3335))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3338=cj5*cj5;
IkReal x3339=((1.0)*r21);
IkReal x3340=(cj5*r20);
CheckValue<IkReal> x3341 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3340))+(((-1.0)*cj0*sj5*x3339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3341.valid){
continue;
}
CheckValue<IkReal> x3342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*sj5*x3340))+(((-1.0)*r01*x3339))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x3338))+((r01*r21*x3338)))),-1);
if(!x3342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3341.value)+(((1.5707963267949)*(x3342.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3343=IKcos(j4);
IkReal x3344=IKsin(j4);
IkReal x3345=(r11*sj5);
IkReal x3346=(r21*sj5);
IkReal x3347=(r01*sj5);
IkReal x3348=((1.0)*x3343);
IkReal x3349=((1.0)*x3344);
IkReal x3350=(cj5*x3343);
IkReal x3351=(cj5*x3344);
evalcond[0]=((((-1.0)*x3346*x3348))+((r22*x3344))+((r20*x3350)));
evalcond[1]=((((-1.0)*x3346*x3349))+((r20*x3351))+(((-1.0)*r22*x3348)));
evalcond[2]=((((-1.0)*x3347*x3348))+cj0+((r00*x3350))+((r02*x3344)));
evalcond[3]=(sj0+(((-1.0)*x3345*x3348))+((r10*x3350))+((r12*x3344)));
evalcond[4]=((((-1.0)*x3347*x3349))+sj0+((r00*x3351))+(((-1.0)*r02*x3348)));
evalcond[5]=((((-1.0)*x3345*x3349))+(((-1.0)*r12*x3348))+((r10*x3351))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3352=((1.0)*sj5);
CheckValue<IkReal> x3353=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3352))+(((-1.0)*cj5*r01)))),-1);
if(!x3353.valid){
continue;
}
CheckValue<IkReal> x3354 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x3352))+((cj5*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3353.value)))+(x3354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3355=IKcos(j4);
IkReal x3356=IKsin(j4);
IkReal x3357=(r11*sj5);
IkReal x3358=(r21*sj5);
IkReal x3359=(r01*sj5);
IkReal x3360=((1.0)*x3355);
IkReal x3361=((1.0)*x3356);
IkReal x3362=(cj5*x3355);
IkReal x3363=(cj5*x3356);
evalcond[0]=(((r20*x3362))+((r22*x3356))+(((-1.0)*x3358*x3360)));
evalcond[1]=((((-1.0)*r22*x3360))+((r20*x3363))+(((-1.0)*x3358*x3361)));
evalcond[2]=((((-1.0)*x3359*x3360))+cj0+((r00*x3362))+((r02*x3356)));
evalcond[3]=(((r12*x3356))+sj0+((r10*x3362))+(((-1.0)*x3357*x3360)));
evalcond[4]=((((-1.0)*x3359*x3361))+sj0+(((-1.0)*r02*x3360))+((r00*x3363)));
evalcond[5]=((((-1.0)*r12*x3360))+((r10*x3363))+(((-1.0)*x3357*x3361))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3364 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3364.valid){
continue;
}
CheckValue<IkReal> x3365=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3364.value)+(((1.5707963267949)*(x3365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3366=IKcos(j4);
IkReal x3367=IKsin(j4);
IkReal x3368=(r11*sj5);
IkReal x3369=(r21*sj5);
IkReal x3370=(r01*sj5);
IkReal x3371=((1.0)*x3366);
IkReal x3372=((1.0)*x3367);
IkReal x3373=(cj5*x3366);
IkReal x3374=(cj5*x3367);
evalcond[0]=(((r22*x3367))+((r20*x3373))+(((-1.0)*x3369*x3371)));
evalcond[1]=((((-1.0)*r22*x3371))+((r20*x3374))+(((-1.0)*x3369*x3372)));
evalcond[2]=(((r02*x3367))+cj0+(((-1.0)*x3370*x3371))+((r00*x3373)));
evalcond[3]=(((r10*x3373))+sj0+((r12*x3367))+(((-1.0)*x3368*x3371)));
evalcond[4]=(sj0+(((-1.0)*x3370*x3372))+(((-1.0)*r02*x3371))+((r00*x3374)));
evalcond[5]=(((r10*x3374))+(((-1.0)*r12*x3371))+(((-1.0)*x3368*x3372))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3375=((1.0)*sj5);
IkReal x3376=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x3375))+(((-1.0)*r11*x3376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x3375))+(((-1.0)*r01*x3376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x3375))+(((-1.0)*r11*x3376))))+IKsqr(((((-1.0)*r00*x3375))+(((-1.0)*r01*x3376))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x3375))+(((-1.0)*r11*x3376))), ((((-1.0)*r00*x3375))+(((-1.0)*r01*x3376))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3377=IKsin(j0);
IkReal x3378=IKcos(j0);
IkReal x3379=(r00*sj5);
IkReal x3380=(r10*sj5);
IkReal x3381=(cj5*r11);
IkReal x3382=(cj5*r01);
evalcond[0]=(x3379+x3378+x3382);
evalcond[1]=(x3377+x3380+x3381);
evalcond[2]=((((0.188)*x3377))+(((0.127)*x3382))+(((-1.0)*px))+(((0.127)*x3379)));
evalcond[3]=((((0.127)*x3381))+(((0.127)*x3380))+(((-1.0)*py))+(((-0.188)*x3378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3383=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3383;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x3383);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3384=((1.0)*sj5);
IkReal x3385=((((-1.0)*r00*x3384))+(((-1.0)*cj5*r01)));
j4eval[0]=x3385;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x3384))))));
j4eval[2]=IKsign(x3385);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3386=cj5*cj5;
IkReal x3387=r01*r01;
IkReal x3388=(r01*sj5);
IkReal x3389=(cj5*r00);
IkReal x3390=((((-1.0)*x3387))+(((-1.0)*x3386*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x3388*x3389))+((x3386*x3387)));
j4eval[0]=x3390;
j4eval[1]=IKsign(x3390);
j4eval[2]=((IKabs((((sj0*x3389))+(((-1.0)*sj0*x3388)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3391=cj5*cj5;
IkReal x3392=r01*r01;
IkReal x3393=(r01*sj5);
IkReal x3394=(cj5*r00);
CheckValue<IkReal> x3395=IKPowWithIntegerCheck(IKsign((((x3391*x3392))+(((-1.0)*(r02*r02)))+(((-1.0)*x3392))+(((2.0)*x3393*x3394))+(((-1.0)*x3391*(r00*r00))))),-1);
if(!x3395.valid){
continue;
}
CheckValue<IkReal> x3396 = IKatan2WithCheck(IkReal((((sj0*x3394))+(((-1.0)*sj0*x3393)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3395.value)))+(x3396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3397=IKcos(j4);
IkReal x3398=IKsin(j4);
IkReal x3399=(r11*sj5);
IkReal x3400=(r21*sj5);
IkReal x3401=(cj5*r20);
IkReal x3402=(cj5*r00);
IkReal x3403=(r01*sj5);
IkReal x3404=(cj5*r10);
IkReal x3405=((1.0)*x3397);
IkReal x3406=((1.0)*x3398);
evalcond[0]=(((r02*x3398))+((x3397*x3402))+(((-1.0)*x3403*x3405)));
evalcond[1]=((((-1.0)*x3399*x3405))+((x3397*x3404))+((r12*x3398)));
evalcond[2]=((((-1.0)*x3400*x3406))+((x3398*x3401))+(((-1.0)*r22*x3405)));
evalcond[3]=((-1.0)+(((-1.0)*x3400*x3405))+((r22*x3398))+((x3397*x3401)));
evalcond[4]=(sj0+((x3398*x3402))+(((-1.0)*r02*x3405))+(((-1.0)*x3403*x3406)));
evalcond[5]=((((-1.0)*x3399*x3406))+(((-1.0)*r12*x3405))+((x3398*x3404))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3407=((1.0)*sj5);
CheckValue<IkReal> x3408 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x3407)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3408.valid){
continue;
}
CheckValue<IkReal> x3409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3407))+(((-1.0)*cj5*r01)))),-1);
if(!x3409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3408.value)+(((1.5707963267949)*(x3409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3410=IKcos(j4);
IkReal x3411=IKsin(j4);
IkReal x3412=(r11*sj5);
IkReal x3413=(r21*sj5);
IkReal x3414=(cj5*r20);
IkReal x3415=(cj5*r00);
IkReal x3416=(r01*sj5);
IkReal x3417=(cj5*r10);
IkReal x3418=((1.0)*x3410);
IkReal x3419=((1.0)*x3411);
evalcond[0]=(((r02*x3411))+(((-1.0)*x3416*x3418))+((x3410*x3415)));
evalcond[1]=((((-1.0)*x3412*x3418))+((r12*x3411))+((x3410*x3417)));
evalcond[2]=((((-1.0)*r22*x3418))+((x3411*x3414))+(((-1.0)*x3413*x3419)));
evalcond[3]=((-1.0)+((r22*x3411))+((x3410*x3414))+(((-1.0)*x3413*x3418)));
evalcond[4]=(sj0+((x3411*x3415))+(((-1.0)*r02*x3418))+(((-1.0)*x3416*x3419)));
evalcond[5]=((((-1.0)*x3412*x3419))+((x3411*x3417))+(((-1.0)*r12*x3418))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3420 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3420.valid){
continue;
}
CheckValue<IkReal> x3421=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3420.value)+(((1.5707963267949)*(x3421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3422=IKcos(j4);
IkReal x3423=IKsin(j4);
IkReal x3424=(r11*sj5);
IkReal x3425=(r21*sj5);
IkReal x3426=(cj5*r20);
IkReal x3427=(cj5*r00);
IkReal x3428=(r01*sj5);
IkReal x3429=(cj5*r10);
IkReal x3430=((1.0)*x3422);
IkReal x3431=((1.0)*x3423);
evalcond[0]=((((-1.0)*x3428*x3430))+((x3422*x3427))+((r02*x3423)));
evalcond[1]=((((-1.0)*x3424*x3430))+((x3422*x3429))+((r12*x3423)));
evalcond[2]=((((-1.0)*x3425*x3431))+(((-1.0)*r22*x3430))+((x3423*x3426)));
evalcond[3]=((-1.0)+(((-1.0)*x3425*x3430))+((x3422*x3426))+((r22*x3423)));
evalcond[4]=((((-1.0)*x3428*x3431))+sj0+((x3423*x3427))+(((-1.0)*r02*x3430)));
evalcond[5]=((((-1.0)*r12*x3430))+(((-1.0)*x3424*x3431))+((x3423*x3429))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.528535282541468)*px))+(((1.59122856339612)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.59122856339612)*px))+(((-0.528535282541468)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.528535282541468)*px))+(((1.59122856339612)*py))))+IKsqr(((((1.59122856339612)*px))+(((-0.528535282541468)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.528535282541468)*px))+(((1.59122856339612)*py))), ((((1.59122856339612)*px))+(((-0.528535282541468)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3432=IKsin(j0);
IkReal x3433=IKcos(j0);
evalcond[0]=((((0.188)*x3432))+(((0.566)*x3433))+(((-1.0)*px)));
evalcond[1]=((((-0.188)*x3433))+(((0.566)*x3432))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3434=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3434;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3434);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3435=((1.0)*sj5);
IkReal x3436=((((-1.0)*r00*x3435))+(((-1.0)*cj5*r01)));
j4eval[0]=x3436;
j4eval[1]=IKsign(x3436);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3435))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3437=cj5*cj5;
IkReal x3438=((1.0)*r21);
IkReal x3439=(cj5*r20);
IkReal x3440=(((r01*r21*x3437))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3437))+((r01*sj5*x3439))+(((-1.0)*r01*x3438))+((cj5*r00*r21*sj5)));
j4eval[0]=x3440;
j4eval[1]=IKsign(x3440);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3439))+(((-1.0)*cj0*sj5*x3438))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3441=cj5*cj5;
IkReal x3442=((1.0)*r21);
IkReal x3443=(cj5*r20);
CheckValue<IkReal> x3444=IKPowWithIntegerCheck(IKsign((((r01*sj5*x3443))+(((-1.0)*r02*r22))+((r01*r21*x3441))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x3441))+(((-1.0)*r01*x3442)))),-1);
if(!x3444.valid){
continue;
}
CheckValue<IkReal> x3445 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3442))+((cj0*x3443)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3444.value)))+(x3445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3446=IKcos(j4);
IkReal x3447=IKsin(j4);
IkReal x3448=(r11*sj5);
IkReal x3449=(r21*sj5);
IkReal x3450=(r01*sj5);
IkReal x3451=((1.0)*x3446);
IkReal x3452=((1.0)*x3447);
IkReal x3453=(cj5*x3446);
IkReal x3454=(cj5*x3447);
evalcond[0]=(((r22*x3447))+((r20*x3453))+(((-1.0)*x3449*x3451)));
evalcond[1]=(((r20*x3454))+(((-1.0)*r22*x3451))+(((-1.0)*x3449*x3452)));
evalcond[2]=(cj0+((r02*x3447))+(((-1.0)*x3450*x3451))+((r00*x3453)));
evalcond[3]=(sj0+((r12*x3447))+(((-1.0)*x3448*x3451))+((r10*x3453)));
evalcond[4]=(sj0+(((-1.0)*x3450*x3452))+((r00*x3454))+(((-1.0)*r02*x3451)));
evalcond[5]=((((-1.0)*x3448*x3452))+(((-1.0)*r12*x3451))+((r10*x3454))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3455=((1.0)*sj5);
CheckValue<IkReal> x3456 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3455)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3456.valid){
continue;
}
CheckValue<IkReal> x3457=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3455))+(((-1.0)*cj5*r01)))),-1);
if(!x3457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3456.value)+(((1.5707963267949)*(x3457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3458=IKcos(j4);
IkReal x3459=IKsin(j4);
IkReal x3460=(r11*sj5);
IkReal x3461=(r21*sj5);
IkReal x3462=(r01*sj5);
IkReal x3463=((1.0)*x3458);
IkReal x3464=((1.0)*x3459);
IkReal x3465=(cj5*x3458);
IkReal x3466=(cj5*x3459);
evalcond[0]=(((r22*x3459))+(((-1.0)*x3461*x3463))+((r20*x3465)));
evalcond[1]=((((-1.0)*x3461*x3464))+((r20*x3466))+(((-1.0)*r22*x3463)));
evalcond[2]=(cj0+(((-1.0)*x3462*x3463))+((r00*x3465))+((r02*x3459)));
evalcond[3]=(sj0+((r12*x3459))+(((-1.0)*x3460*x3463))+((r10*x3465)));
evalcond[4]=(sj0+(((-1.0)*x3462*x3464))+(((-1.0)*r02*x3463))+((r00*x3466)));
evalcond[5]=((((-1.0)*x3460*x3464))+(((-1.0)*r12*x3463))+((r10*x3466))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3467 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3467.valid){
continue;
}
CheckValue<IkReal> x3468=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3467.value)+(((1.5707963267949)*(x3468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3469=IKcos(j4);
IkReal x3470=IKsin(j4);
IkReal x3471=(r11*sj5);
IkReal x3472=(r21*sj5);
IkReal x3473=(r01*sj5);
IkReal x3474=((1.0)*x3469);
IkReal x3475=((1.0)*x3470);
IkReal x3476=(cj5*x3469);
IkReal x3477=(cj5*x3470);
evalcond[0]=((((-1.0)*x3472*x3474))+((r20*x3476))+((r22*x3470)));
evalcond[1]=((((-1.0)*x3472*x3475))+((r20*x3477))+(((-1.0)*r22*x3474)));
evalcond[2]=(cj0+((r00*x3476))+(((-1.0)*x3473*x3474))+((r02*x3470)));
evalcond[3]=(sj0+(((-1.0)*x3471*x3474))+((r12*x3470))+((r10*x3476)));
evalcond[4]=(sj0+(((-1.0)*r02*x3474))+((r00*x3477))+(((-1.0)*x3473*x3475)));
evalcond[5]=((((-1.0)*x3471*x3475))+(((-1.0)*r12*x3474))+((r10*x3477))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3478=IKsin(j0);
IkReal x3479=IKcos(j0);
IkReal x3480=(r00*sj5);
IkReal x3481=(r10*sj5);
IkReal x3482=(cj5*r11);
IkReal x3483=(cj5*r01);
evalcond[0]=(x3480+x3483+(((-1.0)*x3479)));
evalcond[1]=(x3481+x3482+(((-1.0)*x3478)));
evalcond[2]=((((0.188)*x3478))+(((0.127)*x3483))+(((0.127)*x3480))+(((-1.0)*px)));
evalcond[3]=((((-0.188)*x3479))+(((0.127)*x3481))+(((0.127)*x3482))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3484=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3484;
j4eval[1]=IKsign(x3484);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3485=((1.0)*sj5);
IkReal x3486=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3485)));
j4eval[0]=x3486;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x3485))+((cj5*r00))))));
j4eval[2]=IKsign(x3486);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3487=cj5*cj5;
IkReal x3488=r01*r01;
IkReal x3489=(r01*sj5);
IkReal x3490=(cj5*r00);
IkReal x3491=((((2.0)*x3489*x3490))+((x3487*x3488))+(((-1.0)*(r02*r02)))+(((-1.0)*x3488))+(((-1.0)*x3487*(r00*r00))));
j4eval[0]=x3491;
j4eval[1]=IKsign(x3491);
j4eval[2]=((IKabs(((((-1.0)*sj0*x3489))+((sj0*x3490)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3492=cj5*cj5;
IkReal x3493=r01*r01;
IkReal x3494=(r01*sj5);
IkReal x3495=(cj5*r00);
CheckValue<IkReal> x3496 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x3494))+((sj0*x3495)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3496.valid){
continue;
}
CheckValue<IkReal> x3497=IKPowWithIntegerCheck(IKsign(((((2.0)*x3494*x3495))+(((-1.0)*(r02*r02)))+(((-1.0)*x3493))+((x3492*x3493))+(((-1.0)*x3492*(r00*r00))))),-1);
if(!x3497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3496.value)+(((1.5707963267949)*(x3497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3498=IKcos(j4);
IkReal x3499=IKsin(j4);
IkReal x3500=(r11*sj5);
IkReal x3501=(r21*sj5);
IkReal x3502=(cj5*r20);
IkReal x3503=(cj5*r00);
IkReal x3504=(r01*sj5);
IkReal x3505=(cj5*r10);
IkReal x3506=((1.0)*x3498);
IkReal x3507=((1.0)*x3499);
evalcond[0]=(((x3498*x3503))+((r02*x3499))+(((-1.0)*x3504*x3506)));
evalcond[1]=(((x3498*x3505))+((r12*x3499))+(((-1.0)*x3500*x3506)));
evalcond[2]=((((-1.0)*r22*x3506))+((x3499*x3502))+(((-1.0)*x3501*x3507)));
evalcond[3]=((1.0)+((x3498*x3502))+(((-1.0)*x3501*x3506))+((r22*x3499)));
evalcond[4]=(sj0+((x3499*x3503))+(((-1.0)*x3504*x3507))+(((-1.0)*r02*x3506)));
evalcond[5]=((((-1.0)*r12*x3506))+((x3499*x3505))+(((-1.0)*cj0))+(((-1.0)*x3500*x3507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3508=((1.0)*sj5);
CheckValue<IkReal> x3509 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x3508))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3509.valid){
continue;
}
CheckValue<IkReal> x3510=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3508)))),-1);
if(!x3510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3509.value)+(((1.5707963267949)*(x3510.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3511=IKcos(j4);
IkReal x3512=IKsin(j4);
IkReal x3513=(r11*sj5);
IkReal x3514=(r21*sj5);
IkReal x3515=(cj5*r20);
IkReal x3516=(cj5*r00);
IkReal x3517=(r01*sj5);
IkReal x3518=(cj5*r10);
IkReal x3519=((1.0)*x3511);
IkReal x3520=((1.0)*x3512);
evalcond[0]=((((-1.0)*x3517*x3519))+((x3511*x3516))+((r02*x3512)));
evalcond[1]=((((-1.0)*x3513*x3519))+((x3511*x3518))+((r12*x3512)));
evalcond[2]=((((-1.0)*r22*x3519))+((x3512*x3515))+(((-1.0)*x3514*x3520)));
evalcond[3]=((1.0)+(((-1.0)*x3514*x3519))+((x3511*x3515))+((r22*x3512)));
evalcond[4]=((((-1.0)*r02*x3519))+sj0+(((-1.0)*x3517*x3520))+((x3512*x3516)));
evalcond[5]=((((-1.0)*x3513*x3520))+(((-1.0)*r12*x3519))+((x3512*x3518))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3521 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3521.valid){
continue;
}
CheckValue<IkReal> x3522=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3521.value)+(((1.5707963267949)*(x3522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3523=IKcos(j4);
IkReal x3524=IKsin(j4);
IkReal x3525=(r11*sj5);
IkReal x3526=(r21*sj5);
IkReal x3527=(cj5*r20);
IkReal x3528=(cj5*r00);
IkReal x3529=(r01*sj5);
IkReal x3530=(cj5*r10);
IkReal x3531=((1.0)*x3523);
IkReal x3532=((1.0)*x3524);
evalcond[0]=(((x3523*x3528))+((r02*x3524))+(((-1.0)*x3529*x3531)));
evalcond[1]=((((-1.0)*x3525*x3531))+((r12*x3524))+((x3523*x3530)));
evalcond[2]=(((x3524*x3527))+(((-1.0)*x3526*x3532))+(((-1.0)*r22*x3531)));
evalcond[3]=((1.0)+((x3523*x3527))+(((-1.0)*x3526*x3531))+((r22*x3524)));
evalcond[4]=(((x3524*x3528))+sj0+(((-1.0)*x3529*x3532))+(((-1.0)*r02*x3531)));
evalcond[5]=((((-1.0)*r12*x3531))+(((-1.0)*x3525*x3532))+((x3524*x3530))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.59122856339612)*py))+(((0.528535282541468)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.59122856339612)*px))+(((-0.528535282541468)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.59122856339612)*py))+(((0.528535282541468)*px))))+IKsqr(((((-1.59122856339612)*px))+(((-0.528535282541468)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.59122856339612)*py))+(((0.528535282541468)*px))), ((((-1.59122856339612)*px))+(((-0.528535282541468)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3533=IKsin(j0);
IkReal x3534=IKcos(j0);
evalcond[0]=((((0.188)*x3533))+(((-1.0)*px))+(((-0.566)*x3534)));
evalcond[1]=((((-0.188)*x3534))+(((-1.0)*py))+(((-0.566)*x3533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3535=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3535;
j4eval[1]=IKsign(x3535);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3536=((1.0)*sj5);
IkReal x3537=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3536)));
j4eval[0]=x3537;
j4eval[1]=IKsign(x3537);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3536))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3538=((1.0)*sj5);
IkReal x3539=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3538)));
j4eval[0]=x3539;
j4eval[1]=IKsign(x3539);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3538))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3540=((1.0)*sj5);
CheckValue<IkReal> x3541=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3540)))),-1);
if(!x3541.valid){
continue;
}
CheckValue<IkReal> x3542 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3540))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3541.value)))+(x3542.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3543=IKcos(j4);
IkReal x3544=IKsin(j4);
IkReal x3545=((1.0)*cj0);
IkReal x3546=(r11*sj5);
IkReal x3547=(r21*sj5);
IkReal x3548=(r01*sj5);
IkReal x3549=((1.0)*x3543);
IkReal x3550=(cj5*x3543);
IkReal x3551=((1.0)*x3544);
IkReal x3552=(cj5*x3544);
evalcond[0]=(((r20*x3550))+((r22*x3544))+(((-1.0)*x3547*x3549)));
evalcond[1]=(((r20*x3552))+(((-1.0)*r22*x3549))+(((-1.0)*x3547*x3551)));
evalcond[2]=((((-1.0)*r02*x3549))+sj0+((r00*x3552))+(((-1.0)*x3548*x3551)));
evalcond[3]=(((r02*x3544))+((r00*x3550))+(((-1.0)*x3548*x3549))+(((-1.0)*x3545)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3544))+(((-1.0)*x3546*x3549))+((r10*x3550)));
evalcond[5]=((((-1.0)*r12*x3549))+(((-1.0)*x3546*x3551))+(((-1.0)*x3545))+((r10*x3552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3553=((1.0)*sj5);
CheckValue<IkReal> x3554 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3554.valid){
continue;
}
CheckValue<IkReal> x3555=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3553)))),-1);
if(!x3555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3554.value)+(((1.5707963267949)*(x3555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3556=IKcos(j4);
IkReal x3557=IKsin(j4);
IkReal x3558=((1.0)*cj0);
IkReal x3559=(r11*sj5);
IkReal x3560=(r21*sj5);
IkReal x3561=(r01*sj5);
IkReal x3562=((1.0)*x3556);
IkReal x3563=(cj5*x3556);
IkReal x3564=((1.0)*x3557);
IkReal x3565=(cj5*x3557);
evalcond[0]=((((-1.0)*x3560*x3562))+((r22*x3557))+((r20*x3563)));
evalcond[1]=((((-1.0)*x3560*x3564))+(((-1.0)*r22*x3562))+((r20*x3565)));
evalcond[2]=((((-1.0)*r02*x3562))+sj0+(((-1.0)*x3561*x3564))+((r00*x3565)));
evalcond[3]=((((-1.0)*x3561*x3562))+((r00*x3563))+(((-1.0)*x3558))+((r02*x3557)));
evalcond[4]=(((r10*x3563))+(((-1.0)*sj0))+((r12*x3557))+(((-1.0)*x3559*x3562)));
evalcond[5]=(((r10*x3565))+(((-1.0)*r12*x3562))+(((-1.0)*x3559*x3564))+(((-1.0)*x3558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3566 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3566.valid){
continue;
}
CheckValue<IkReal> x3567=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3566.value)+(((1.5707963267949)*(x3567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3568=IKcos(j4);
IkReal x3569=IKsin(j4);
IkReal x3570=((1.0)*cj0);
IkReal x3571=(r11*sj5);
IkReal x3572=(r21*sj5);
IkReal x3573=(r01*sj5);
IkReal x3574=((1.0)*x3568);
IkReal x3575=(cj5*x3568);
IkReal x3576=((1.0)*x3569);
IkReal x3577=(cj5*x3569);
evalcond[0]=(((r20*x3575))+((r22*x3569))+(((-1.0)*x3572*x3574)));
evalcond[1]=(((r20*x3577))+(((-1.0)*x3572*x3576))+(((-1.0)*r22*x3574)));
evalcond[2]=(((r00*x3577))+sj0+(((-1.0)*x3573*x3576))+(((-1.0)*r02*x3574)));
evalcond[3]=(((r00*x3575))+(((-1.0)*x3570))+(((-1.0)*x3573*x3574))+((r02*x3569)));
evalcond[4]=(((r10*x3575))+(((-1.0)*sj0))+(((-1.0)*x3571*x3574))+((r12*x3569)));
evalcond[5]=(((r10*x3577))+(((-1.0)*x3570))+(((-1.0)*x3571*x3576))+(((-1.0)*r12*x3574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.831164487664683)*py))+(((0.133213063666633)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.831164487664683)*px))+(((-0.133213063666633)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.831164487664683)*py))+(((0.133213063666633)*px))))+IKsqr(((((0.831164487664683)*px))+(((-0.133213063666633)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.831164487664683)*py))+(((0.133213063666633)*px))), ((((0.831164487664683)*px))+(((-0.133213063666633)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3578=IKsin(j0);
IkReal x3579=IKcos(j0);
evalcond[0]=((((1.173)*x3579))+(((0.188)*x3578))+(((-1.0)*px)));
evalcond[1]=((((1.173)*x3578))+(((-0.188)*x3579))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3580=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3580;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3580);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3581=((1.0)*sj5);
IkReal x3582=((((-1.0)*r00*x3581))+(((-1.0)*cj5*r01)));
j4eval[0]=x3582;
j4eval[1]=IKsign(x3582);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3581))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3583=cj5*cj5;
IkReal x3584=((1.0)*r21);
IkReal x3585=(cj5*r20);
IkReal x3586=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3583))+((r01*r21*x3583))+((r01*sj5*x3585))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3584)));
j4eval[0]=x3586;
j4eval[1]=IKsign(x3586);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x3584))+((cj0*x3585))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3587=cj5*cj5;
IkReal x3588=((1.0)*r21);
IkReal x3589=(cj5*r20);
CheckValue<IkReal> x3590=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3587))+((r01*r21*x3587))+((r01*sj5*x3589))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3588)))),-1);
if(!x3590.valid){
continue;
}
CheckValue<IkReal> x3591 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3588))+((cj0*x3589)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3590.value)))+(x3591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3592=IKcos(j4);
IkReal x3593=IKsin(j4);
IkReal x3594=(r11*sj5);
IkReal x3595=(r21*sj5);
IkReal x3596=(r01*sj5);
IkReal x3597=((1.0)*x3592);
IkReal x3598=((1.0)*x3593);
IkReal x3599=(cj5*x3592);
IkReal x3600=(cj5*x3593);
evalcond[0]=(((r20*x3599))+(((-1.0)*x3595*x3597))+((r22*x3593)));
evalcond[1]=((((-1.0)*r22*x3597))+(((-1.0)*x3595*x3598))+((r20*x3600)));
evalcond[2]=(cj0+((r02*x3593))+((r00*x3599))+(((-1.0)*x3596*x3597)));
evalcond[3]=((((-1.0)*x3594*x3597))+sj0+((r10*x3599))+((r12*x3593)));
evalcond[4]=(sj0+(((-1.0)*r02*x3597))+((r00*x3600))+(((-1.0)*x3596*x3598)));
evalcond[5]=((((-1.0)*x3594*x3598))+((r10*x3600))+(((-1.0)*r12*x3597))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3601=((1.0)*sj5);
CheckValue<IkReal> x3602=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3601))+(((-1.0)*cj5*r01)))),-1);
if(!x3602.valid){
continue;
}
CheckValue<IkReal> x3603 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3601)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3602.value)))+(x3603.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3604=IKcos(j4);
IkReal x3605=IKsin(j4);
IkReal x3606=(r11*sj5);
IkReal x3607=(r21*sj5);
IkReal x3608=(r01*sj5);
IkReal x3609=((1.0)*x3604);
IkReal x3610=((1.0)*x3605);
IkReal x3611=(cj5*x3604);
IkReal x3612=(cj5*x3605);
evalcond[0]=(((r22*x3605))+(((-1.0)*x3607*x3609))+((r20*x3611)));
evalcond[1]=((((-1.0)*x3607*x3610))+(((-1.0)*r22*x3609))+((r20*x3612)));
evalcond[2]=(((r02*x3605))+cj0+(((-1.0)*x3608*x3609))+((r00*x3611)));
evalcond[3]=((((-1.0)*x3606*x3609))+sj0+((r10*x3611))+((r12*x3605)));
evalcond[4]=(sj0+(((-1.0)*r02*x3609))+((r00*x3612))+(((-1.0)*x3608*x3610)));
evalcond[5]=((((-1.0)*r12*x3609))+((r10*x3612))+(((-1.0)*cj0))+(((-1.0)*x3606*x3610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3613 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3613.valid){
continue;
}
CheckValue<IkReal> x3614=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3613.value)+(((1.5707963267949)*(x3614.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3615=IKcos(j4);
IkReal x3616=IKsin(j4);
IkReal x3617=(r11*sj5);
IkReal x3618=(r21*sj5);
IkReal x3619=(r01*sj5);
IkReal x3620=((1.0)*x3615);
IkReal x3621=((1.0)*x3616);
IkReal x3622=(cj5*x3615);
IkReal x3623=(cj5*x3616);
evalcond[0]=(((r20*x3622))+((r22*x3616))+(((-1.0)*x3618*x3620)));
evalcond[1]=(((r20*x3623))+(((-1.0)*x3618*x3621))+(((-1.0)*r22*x3620)));
evalcond[2]=(cj0+((r02*x3616))+((r00*x3622))+(((-1.0)*x3619*x3620)));
evalcond[3]=(sj0+((r10*x3622))+(((-1.0)*x3617*x3620))+((r12*x3616)));
evalcond[4]=(sj0+((r00*x3623))+(((-1.0)*x3619*x3621))+(((-1.0)*r02*x3620)));
evalcond[5]=(((r10*x3623))+(((-1.0)*r12*x3620))+(((-1.0)*x3617*x3621))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.07765023632681)*px))+(((1.10735989196489)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-5.07765023632681)*py))+(((1.10735989196489)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.07765023632681)*px))+(((1.10735989196489)*py))))+IKsqr(((((-5.07765023632681)*py))+(((1.10735989196489)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.07765023632681)*px))+(((1.10735989196489)*py))), ((((-5.07765023632681)*py))+(((1.10735989196489)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3624=IKsin(j0);
IkReal x3625=IKcos(j0);
evalcond[0]=((((0.188)*x3624))+(((-1.0)*px))+(((0.041)*x3625)));
evalcond[1]=((((-1.0)*py))+(((0.041)*x3624))+(((-0.188)*x3625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3626=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3626;
j4eval[1]=IKsign(x3626);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3627=((1.0)*sj5);
IkReal x3628=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3627)));
j4eval[0]=x3628;
j4eval[1]=IKsign(x3628);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x3627))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3629=((1.0)*sj5);
IkReal x3630=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3629)));
j4eval[0]=x3630;
j4eval[1]=IKsign(x3630);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3629)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3631=((1.0)*sj5);
CheckValue<IkReal> x3632 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3631))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3632.valid){
continue;
}
CheckValue<IkReal> x3633=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3631)))),-1);
if(!x3633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3632.value)+(((1.5707963267949)*(x3633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3634=IKcos(j4);
IkReal x3635=IKsin(j4);
IkReal x3636=((1.0)*cj0);
IkReal x3637=(r11*sj5);
IkReal x3638=(r21*sj5);
IkReal x3639=(r01*sj5);
IkReal x3640=((1.0)*x3634);
IkReal x3641=(cj5*x3634);
IkReal x3642=((1.0)*x3635);
IkReal x3643=(cj5*x3635);
evalcond[0]=(((r20*x3641))+((r22*x3635))+(((-1.0)*x3638*x3640)));
evalcond[1]=(((r20*x3643))+(((-1.0)*r22*x3640))+(((-1.0)*x3638*x3642)));
evalcond[2]=(((r00*x3643))+sj0+(((-1.0)*x3639*x3642))+(((-1.0)*r02*x3640)));
evalcond[3]=(((r02*x3635))+((r00*x3641))+(((-1.0)*x3639*x3640))+(((-1.0)*x3636)));
evalcond[4]=(((r12*x3635))+(((-1.0)*sj0))+(((-1.0)*x3637*x3640))+((r10*x3641)));
evalcond[5]=((((-1.0)*r12*x3640))+(((-1.0)*x3636))+(((-1.0)*x3637*x3642))+((r10*x3643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3644=((1.0)*sj5);
CheckValue<IkReal> x3645=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3644)))),-1);
if(!x3645.valid){
continue;
}
CheckValue<IkReal> x3646 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3645.value)))+(x3646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3647=IKcos(j4);
IkReal x3648=IKsin(j4);
IkReal x3649=((1.0)*cj0);
IkReal x3650=(r11*sj5);
IkReal x3651=(r21*sj5);
IkReal x3652=(r01*sj5);
IkReal x3653=((1.0)*x3647);
IkReal x3654=(cj5*x3647);
IkReal x3655=((1.0)*x3648);
IkReal x3656=(cj5*x3648);
evalcond[0]=(((r20*x3654))+(((-1.0)*x3651*x3653))+((r22*x3648)));
evalcond[1]=(((r20*x3656))+(((-1.0)*x3651*x3655))+(((-1.0)*r22*x3653)));
evalcond[2]=(((r00*x3656))+sj0+(((-1.0)*r02*x3653))+(((-1.0)*x3652*x3655)));
evalcond[3]=(((r00*x3654))+((r02*x3648))+(((-1.0)*x3652*x3653))+(((-1.0)*x3649)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3648))+((r10*x3654))+(((-1.0)*x3650*x3653)));
evalcond[5]=(((r10*x3656))+(((-1.0)*x3650*x3655))+(((-1.0)*r12*x3653))+(((-1.0)*x3649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3657 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3657.valid){
continue;
}
CheckValue<IkReal> x3658=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3657.value)+(((1.5707963267949)*(x3658.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3659=IKcos(j4);
IkReal x3660=IKsin(j4);
IkReal x3661=((1.0)*cj0);
IkReal x3662=(r11*sj5);
IkReal x3663=(r21*sj5);
IkReal x3664=(r01*sj5);
IkReal x3665=((1.0)*x3659);
IkReal x3666=(cj5*x3659);
IkReal x3667=((1.0)*x3660);
IkReal x3668=(cj5*x3660);
evalcond[0]=(((r22*x3660))+(((-1.0)*x3663*x3665))+((r20*x3666)));
evalcond[1]=((((-1.0)*x3663*x3667))+((r20*x3668))+(((-1.0)*r22*x3665)));
evalcond[2]=(sj0+(((-1.0)*r02*x3665))+((r00*x3668))+(((-1.0)*x3664*x3667)));
evalcond[3]=((((-1.0)*x3661))+((r00*x3666))+(((-1.0)*x3664*x3665))+((r02*x3660)));
evalcond[4]=((((-1.0)*x3662*x3665))+(((-1.0)*sj0))+((r12*x3660))+((r10*x3666)));
evalcond[5]=((((-1.0)*x3662*x3667))+(((-1.0)*x3661))+((r10*x3668))+(((-1.0)*r12*x3665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3669=IKsin(j0);
IkReal x3670=IKcos(j0);
IkReal x3671=(r00*sj5);
IkReal x3672=(r10*sj5);
IkReal x3673=(cj5*r11);
IkReal x3674=(cj5*r01);
evalcond[0]=(x3671+x3674+(((-1.0)*x3670)));
evalcond[1]=((((-1.0)*x3669))+x3672+x3673);
evalcond[2]=((((0.188)*x3669))+(((-1.0)*px))+(((0.127)*x3671))+(((0.127)*x3674)));
evalcond[3]=((((-1.0)*py))+(((-0.188)*x3670))+(((0.127)*x3673))+(((0.127)*x3672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3675=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3675;
j4eval[1]=IKsign(x3675);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3676=((1.0)*sj5);
IkReal x3677=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3676)));
j4eval[0]=x3677;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x3676))+((cj5*r00))))));
j4eval[2]=IKsign(x3677);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3678=cj5*cj5;
IkReal x3679=r01*r01;
IkReal x3680=(r01*sj5);
IkReal x3681=(cj5*r00);
IkReal x3682=((((2.0)*x3680*x3681))+(((-1.0)*x3678*(r00*r00)))+((x3678*x3679))+(((-1.0)*(r02*r02)))+(((-1.0)*x3679)));
j4eval[0]=x3682;
j4eval[1]=IKsign(x3682);
j4eval[2]=((IKabs((r02*sj0)))+(IKabs((((sj0*x3681))+(((-1.0)*sj0*x3680))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3683=cj5*cj5;
IkReal x3684=r01*r01;
IkReal x3685=(r01*sj5);
IkReal x3686=(cj5*r00);
CheckValue<IkReal> x3687=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3683*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x3685*x3686))+(((-1.0)*x3684))+((x3683*x3684)))),-1);
if(!x3687.valid){
continue;
}
CheckValue<IkReal> x3688 = IKatan2WithCheck(IkReal((((sj0*x3686))+(((-1.0)*sj0*x3685)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3687.value)))+(x3688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3689=IKcos(j4);
IkReal x3690=IKsin(j4);
IkReal x3691=(r11*sj5);
IkReal x3692=(r21*sj5);
IkReal x3693=(cj5*r20);
IkReal x3694=(cj5*r00);
IkReal x3695=(r01*sj5);
IkReal x3696=(cj5*r10);
IkReal x3697=((1.0)*x3689);
IkReal x3698=((1.0)*x3690);
evalcond[0]=(((r02*x3690))+((x3689*x3694))+(((-1.0)*x3695*x3697)));
evalcond[1]=(((x3689*x3696))+((r12*x3690))+(((-1.0)*x3691*x3697)));
evalcond[2]=((((-1.0)*r22*x3697))+((x3690*x3693))+(((-1.0)*x3692*x3698)));
evalcond[3]=((1.0)+((x3689*x3693))+((r22*x3690))+(((-1.0)*x3692*x3697)));
evalcond[4]=(sj0+(((-1.0)*r02*x3697))+((x3690*x3694))+(((-1.0)*x3695*x3698)));
evalcond[5]=((((-1.0)*r12*x3697))+((x3690*x3696))+(((-1.0)*x3691*x3698))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3699=((1.0)*sj5);
CheckValue<IkReal> x3700 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x3699))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3700.valid){
continue;
}
CheckValue<IkReal> x3701=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3699)))),-1);
if(!x3701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3700.value)+(((1.5707963267949)*(x3701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3702=IKcos(j4);
IkReal x3703=IKsin(j4);
IkReal x3704=(r11*sj5);
IkReal x3705=(r21*sj5);
IkReal x3706=(cj5*r20);
IkReal x3707=(cj5*r00);
IkReal x3708=(r01*sj5);
IkReal x3709=(cj5*r10);
IkReal x3710=((1.0)*x3702);
IkReal x3711=((1.0)*x3703);
evalcond[0]=(((x3702*x3707))+(((-1.0)*x3708*x3710))+((r02*x3703)));
evalcond[1]=((((-1.0)*x3704*x3710))+((r12*x3703))+((x3702*x3709)));
evalcond[2]=((((-1.0)*x3705*x3711))+(((-1.0)*r22*x3710))+((x3703*x3706)));
evalcond[3]=((1.0)+(((-1.0)*x3705*x3710))+((x3702*x3706))+((r22*x3703)));
evalcond[4]=(sj0+(((-1.0)*r02*x3710))+(((-1.0)*x3708*x3711))+((x3703*x3707)));
evalcond[5]=((((-1.0)*x3704*x3711))+(((-1.0)*r12*x3710))+((x3703*x3709))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3712 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3712.valid){
continue;
}
CheckValue<IkReal> x3713=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3712.value)+(((1.5707963267949)*(x3713.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3714=IKcos(j4);
IkReal x3715=IKsin(j4);
IkReal x3716=(r11*sj5);
IkReal x3717=(r21*sj5);
IkReal x3718=(cj5*r20);
IkReal x3719=(cj5*r00);
IkReal x3720=(r01*sj5);
IkReal x3721=(cj5*r10);
IkReal x3722=((1.0)*x3714);
IkReal x3723=((1.0)*x3715);
evalcond[0]=(((x3714*x3719))+((r02*x3715))+(((-1.0)*x3720*x3722)));
evalcond[1]=(((r12*x3715))+(((-1.0)*x3716*x3722))+((x3714*x3721)));
evalcond[2]=((((-1.0)*r22*x3722))+((x3715*x3718))+(((-1.0)*x3717*x3723)));
evalcond[3]=((1.0)+((x3714*x3718))+((r22*x3715))+(((-1.0)*x3717*x3722)));
evalcond[4]=(sj0+(((-1.0)*x3720*x3723))+((x3715*x3719))+(((-1.0)*r02*x3722)));
evalcond[5]=((((-1.0)*r12*x3722))+(((-1.0)*x3716*x3723))+((x3715*x3721))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.59122856339612)*py))+(((0.528535282541468)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.59122856339612)*px))+(((-0.528535282541468)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.59122856339612)*py))+(((0.528535282541468)*px))))+IKsqr(((((-1.59122856339612)*px))+(((-0.528535282541468)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.59122856339612)*py))+(((0.528535282541468)*px))), ((((-1.59122856339612)*px))+(((-0.528535282541468)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3724=IKsin(j0);
IkReal x3725=IKcos(j0);
evalcond[0]=((((-0.566)*x3725))+(((-1.0)*px))+(((0.188)*x3724)));
evalcond[1]=((((-0.566)*x3724))+(((-1.0)*py))+(((-0.188)*x3725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3726=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3726;
j4eval[1]=IKsign(x3726);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3727=((1.0)*sj5);
IkReal x3728=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3727)));
j4eval[0]=x3728;
j4eval[1]=IKsign(x3728);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3727))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3729=((1.0)*sj5);
IkReal x3730=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3729)));
j4eval[0]=x3730;
j4eval[1]=IKsign(x3730);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3729))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3731=((1.0)*sj5);
CheckValue<IkReal> x3732=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3731)))),-1);
if(!x3732.valid){
continue;
}
CheckValue<IkReal> x3733 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3731))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3732.value)))+(x3733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3734=IKcos(j4);
IkReal x3735=IKsin(j4);
IkReal x3736=((1.0)*cj0);
IkReal x3737=(r11*sj5);
IkReal x3738=(r21*sj5);
IkReal x3739=(r01*sj5);
IkReal x3740=((1.0)*x3734);
IkReal x3741=(cj5*x3734);
IkReal x3742=((1.0)*x3735);
IkReal x3743=(cj5*x3735);
evalcond[0]=(((r20*x3741))+((r22*x3735))+(((-1.0)*x3738*x3740)));
evalcond[1]=((((-1.0)*r22*x3740))+((r20*x3743))+(((-1.0)*x3738*x3742)));
evalcond[2]=(((r00*x3743))+sj0+(((-1.0)*x3739*x3742))+(((-1.0)*r02*x3740)));
evalcond[3]=(((r00*x3741))+(((-1.0)*x3736))+((r02*x3735))+(((-1.0)*x3739*x3740)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3737*x3740))+((r12*x3735))+((r10*x3741)));
evalcond[5]=((((-1.0)*x3736))+(((-1.0)*x3737*x3742))+(((-1.0)*r12*x3740))+((r10*x3743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3744=((1.0)*sj5);
CheckValue<IkReal> x3745=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3744)))),-1);
if(!x3745.valid){
continue;
}
CheckValue<IkReal> x3746 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x3744))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3745.value)))+(x3746.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3747=IKcos(j4);
IkReal x3748=IKsin(j4);
IkReal x3749=((1.0)*cj0);
IkReal x3750=(r11*sj5);
IkReal x3751=(r21*sj5);
IkReal x3752=(r01*sj5);
IkReal x3753=((1.0)*x3747);
IkReal x3754=(cj5*x3747);
IkReal x3755=((1.0)*x3748);
IkReal x3756=(cj5*x3748);
evalcond[0]=(((r20*x3754))+((r22*x3748))+(((-1.0)*x3751*x3753)));
evalcond[1]=((((-1.0)*r22*x3753))+((r20*x3756))+(((-1.0)*x3751*x3755)));
evalcond[2]=(((r00*x3756))+(((-1.0)*x3752*x3755))+sj0+(((-1.0)*r02*x3753)));
evalcond[3]=(((r00*x3754))+(((-1.0)*x3752*x3753))+(((-1.0)*x3749))+((r02*x3748)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3750*x3753))+((r12*x3748))+((r10*x3754)));
evalcond[5]=((((-1.0)*x3750*x3755))+(((-1.0)*x3749))+(((-1.0)*r12*x3753))+((r10*x3756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3757 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3757.valid){
continue;
}
CheckValue<IkReal> x3758=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3757.value)+(((1.5707963267949)*(x3758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3759=IKcos(j4);
IkReal x3760=IKsin(j4);
IkReal x3761=((1.0)*cj0);
IkReal x3762=(r11*sj5);
IkReal x3763=(r21*sj5);
IkReal x3764=(r01*sj5);
IkReal x3765=((1.0)*x3759);
IkReal x3766=(cj5*x3759);
IkReal x3767=((1.0)*x3760);
IkReal x3768=(cj5*x3760);
evalcond[0]=(((r22*x3760))+(((-1.0)*x3763*x3765))+((r20*x3766)));
evalcond[1]=((((-1.0)*r22*x3765))+(((-1.0)*x3763*x3767))+((r20*x3768)));
evalcond[2]=(sj0+(((-1.0)*x3764*x3767))+(((-1.0)*r02*x3765))+((r00*x3768)));
evalcond[3]=(((r02*x3760))+(((-1.0)*x3764*x3765))+((r00*x3766))+(((-1.0)*x3761)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3762*x3765))+((r10*x3766))+((r12*x3760)));
evalcond[5]=((((-1.0)*x3762*x3767))+((r10*x3768))+(((-1.0)*x3761))+(((-1.0)*r12*x3765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3769=((1.0)*sj5);
IkReal x3770=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x3769))+(((-1.0)*r11*x3770)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x3770))+(((-1.0)*r00*x3769)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x3769))+(((-1.0)*r11*x3770))))+IKsqr(((((-1.0)*r01*x3770))+(((-1.0)*r00*x3769))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x3769))+(((-1.0)*r11*x3770))), ((((-1.0)*r01*x3770))+(((-1.0)*r00*x3769))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3771=IKsin(j0);
IkReal x3772=IKcos(j0);
IkReal x3773=(r00*sj5);
IkReal x3774=(r10*sj5);
IkReal x3775=(cj5*r11);
IkReal x3776=(cj5*r01);
evalcond[0]=(x3773+x3772+x3776);
evalcond[1]=(x3771+x3775+x3774);
evalcond[2]=((((-1.0)*px))+(((0.127)*x3776))+(((0.127)*x3773))+(((0.188)*x3771)));
evalcond[3]=((((-1.0)*py))+(((-0.188)*x3772))+(((0.127)*x3774))+(((0.127)*x3775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3777=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3777;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x3777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3778=((1.0)*sj5);
IkReal x3779=((((-1.0)*r00*x3778))+(((-1.0)*cj5*r01)));
j4eval[0]=x3779;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x3778))))));
j4eval[2]=IKsign(x3779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3780=cj5*cj5;
IkReal x3781=r01*r01;
IkReal x3782=(r01*sj5);
IkReal x3783=(cj5*r00);
IkReal x3784=((((2.0)*x3782*x3783))+(((-1.0)*(r02*r02)))+(((-1.0)*x3781))+((x3780*x3781))+(((-1.0)*x3780*(r00*r00))));
j4eval[0]=x3784;
j4eval[1]=IKsign(x3784);
j4eval[2]=((IKabs(((((-1.0)*sj0*x3782))+((sj0*x3783)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3785=cj5*cj5;
IkReal x3786=r01*r01;
IkReal x3787=(r01*sj5);
IkReal x3788=(cj5*r00);
CheckValue<IkReal> x3789=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3785*(r00*r00)))+((x3785*x3786))+(((-1.0)*(r02*r02)))+(((-1.0)*x3786))+(((2.0)*x3787*x3788)))),-1);
if(!x3789.valid){
continue;
}
CheckValue<IkReal> x3790 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x3787))+((sj0*x3788)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3789.value)))+(x3790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3791=IKcos(j4);
IkReal x3792=IKsin(j4);
IkReal x3793=(r11*sj5);
IkReal x3794=(r21*sj5);
IkReal x3795=(cj5*r20);
IkReal x3796=(cj5*r00);
IkReal x3797=(r01*sj5);
IkReal x3798=(cj5*r10);
IkReal x3799=((1.0)*x3791);
IkReal x3800=((1.0)*x3792);
evalcond[0]=((((-1.0)*x3797*x3799))+((x3791*x3796))+((r02*x3792)));
evalcond[1]=(((x3791*x3798))+((r12*x3792))+(((-1.0)*x3793*x3799)));
evalcond[2]=(((x3792*x3795))+(((-1.0)*r22*x3799))+(((-1.0)*x3794*x3800)));
evalcond[3]=((-1.0)+((x3791*x3795))+((r22*x3792))+(((-1.0)*x3794*x3799)));
evalcond[4]=(((x3792*x3796))+sj0+(((-1.0)*x3797*x3800))+(((-1.0)*r02*x3799)));
evalcond[5]=((((-1.0)*r12*x3799))+((x3792*x3798))+(((-1.0)*x3793*x3800))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3801=((1.0)*sj5);
CheckValue<IkReal> x3802 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x3801)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3802.valid){
continue;
}
CheckValue<IkReal> x3803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3801))+(((-1.0)*cj5*r01)))),-1);
if(!x3803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3802.value)+(((1.5707963267949)*(x3803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3804=IKcos(j4);
IkReal x3805=IKsin(j4);
IkReal x3806=(r11*sj5);
IkReal x3807=(r21*sj5);
IkReal x3808=(cj5*r20);
IkReal x3809=(cj5*r00);
IkReal x3810=(r01*sj5);
IkReal x3811=(cj5*r10);
IkReal x3812=((1.0)*x3804);
IkReal x3813=((1.0)*x3805);
evalcond[0]=(((x3804*x3809))+(((-1.0)*x3810*x3812))+((r02*x3805)));
evalcond[1]=(((r12*x3805))+((x3804*x3811))+(((-1.0)*x3806*x3812)));
evalcond[2]=((((-1.0)*r22*x3812))+(((-1.0)*x3807*x3813))+((x3805*x3808)));
evalcond[3]=((-1.0)+(((-1.0)*x3807*x3812))+((x3804*x3808))+((r22*x3805)));
evalcond[4]=(sj0+(((-1.0)*r02*x3812))+(((-1.0)*x3810*x3813))+((x3805*x3809)));
evalcond[5]=((((-1.0)*r12*x3812))+((x3805*x3811))+(((-1.0)*cj0))+(((-1.0)*x3806*x3813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3814 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3814.valid){
continue;
}
CheckValue<IkReal> x3815=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3814.value)+(((1.5707963267949)*(x3815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3816=IKcos(j4);
IkReal x3817=IKsin(j4);
IkReal x3818=(r11*sj5);
IkReal x3819=(r21*sj5);
IkReal x3820=(cj5*r20);
IkReal x3821=(cj5*r00);
IkReal x3822=(r01*sj5);
IkReal x3823=(cj5*r10);
IkReal x3824=((1.0)*x3816);
IkReal x3825=((1.0)*x3817);
evalcond[0]=((((-1.0)*x3822*x3824))+((r02*x3817))+((x3816*x3821)));
evalcond[1]=(((r12*x3817))+((x3816*x3823))+(((-1.0)*x3818*x3824)));
evalcond[2]=((((-1.0)*r22*x3824))+((x3817*x3820))+(((-1.0)*x3819*x3825)));
evalcond[3]=((-1.0)+((r22*x3817))+((x3816*x3820))+(((-1.0)*x3819*x3824)));
evalcond[4]=(sj0+(((-1.0)*r02*x3824))+(((-1.0)*x3822*x3825))+((x3817*x3821)));
evalcond[5]=((((-1.0)*r12*x3824))+((x3817*x3823))+(((-1.0)*x3818*x3825))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.528535282541468)*px))+(((1.59122856339612)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.59122856339612)*px))+(((-0.528535282541468)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.528535282541468)*px))+(((1.59122856339612)*py))))+IKsqr(((((1.59122856339612)*px))+(((-0.528535282541468)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.528535282541468)*px))+(((1.59122856339612)*py))), ((((1.59122856339612)*px))+(((-0.528535282541468)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3826=IKsin(j0);
IkReal x3827=IKcos(j0);
evalcond[0]=((((0.188)*x3826))+(((-1.0)*px))+(((0.566)*x3827)));
evalcond[1]=((((-1.0)*py))+(((0.566)*x3826))+(((-0.188)*x3827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3828=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3828;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3828);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3829=((1.0)*sj5);
IkReal x3830=((((-1.0)*r00*x3829))+(((-1.0)*cj5*r01)));
j4eval[0]=x3830;
j4eval[1]=IKsign(x3830);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3829))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3831=cj5*cj5;
IkReal x3832=((1.0)*r21);
IkReal x3833=(cj5*r20);
IkReal x3834=((((-1.0)*r02*r22))+((r01*r21*x3831))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3832))+((r01*sj5*x3833))+(((-1.0)*r00*r20*x3831)));
j4eval[0]=x3834;
j4eval[1]=IKsign(x3834);
j4eval[2]=((IKabs((((cj0*x3833))+(((-1.0)*cj0*sj5*x3832)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3835=cj5*cj5;
IkReal x3836=((1.0)*r21);
IkReal x3837=(cj5*r20);
CheckValue<IkReal> x3838=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*r21*x3835))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3836))+((r01*sj5*x3837))+(((-1.0)*r00*r20*x3835)))),-1);
if(!x3838.valid){
continue;
}
CheckValue<IkReal> x3839 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3837))+(((-1.0)*cj0*sj5*x3836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3838.value)))+(x3839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3840=IKcos(j4);
IkReal x3841=IKsin(j4);
IkReal x3842=(r11*sj5);
IkReal x3843=(r21*sj5);
IkReal x3844=(r01*sj5);
IkReal x3845=((1.0)*x3840);
IkReal x3846=((1.0)*x3841);
IkReal x3847=(cj5*x3840);
IkReal x3848=(cj5*x3841);
evalcond[0]=((((-1.0)*x3843*x3845))+((r20*x3847))+((r22*x3841)));
evalcond[1]=((((-1.0)*x3843*x3846))+((r20*x3848))+(((-1.0)*r22*x3845)));
evalcond[2]=(cj0+(((-1.0)*x3844*x3845))+((r00*x3847))+((r02*x3841)));
evalcond[3]=(((r12*x3841))+sj0+(((-1.0)*x3842*x3845))+((r10*x3847)));
evalcond[4]=((((-1.0)*r02*x3845))+sj0+(((-1.0)*x3844*x3846))+((r00*x3848)));
evalcond[5]=((((-1.0)*x3842*x3846))+(((-1.0)*r12*x3845))+((r10*x3848))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3849=((1.0)*sj5);
CheckValue<IkReal> x3850 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3849)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3850.valid){
continue;
}
CheckValue<IkReal> x3851=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3849))+(((-1.0)*cj5*r01)))),-1);
if(!x3851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3850.value)+(((1.5707963267949)*(x3851.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3852=IKcos(j4);
IkReal x3853=IKsin(j4);
IkReal x3854=(r11*sj5);
IkReal x3855=(r21*sj5);
IkReal x3856=(r01*sj5);
IkReal x3857=((1.0)*x3852);
IkReal x3858=((1.0)*x3853);
IkReal x3859=(cj5*x3852);
IkReal x3860=(cj5*x3853);
evalcond[0]=(((r20*x3859))+(((-1.0)*x3855*x3857))+((r22*x3853)));
evalcond[1]=(((r20*x3860))+(((-1.0)*x3855*x3858))+(((-1.0)*r22*x3857)));
evalcond[2]=(((r02*x3853))+cj0+(((-1.0)*x3856*x3857))+((r00*x3859)));
evalcond[3]=(sj0+(((-1.0)*x3854*x3857))+((r10*x3859))+((r12*x3853)));
evalcond[4]=(sj0+((r00*x3860))+(((-1.0)*x3856*x3858))+(((-1.0)*r02*x3857)));
evalcond[5]=((((-1.0)*x3854*x3858))+((r10*x3860))+(((-1.0)*r12*x3857))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3861 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3861.valid){
continue;
}
CheckValue<IkReal> x3862=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3861.value)+(((1.5707963267949)*(x3862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3863=IKcos(j4);
IkReal x3864=IKsin(j4);
IkReal x3865=(r11*sj5);
IkReal x3866=(r21*sj5);
IkReal x3867=(r01*sj5);
IkReal x3868=((1.0)*x3863);
IkReal x3869=((1.0)*x3864);
IkReal x3870=(cj5*x3863);
IkReal x3871=(cj5*x3864);
evalcond[0]=((((-1.0)*x3866*x3868))+((r20*x3870))+((r22*x3864)));
evalcond[1]=((((-1.0)*x3866*x3869))+((r20*x3871))+(((-1.0)*r22*x3868)));
evalcond[2]=((((-1.0)*x3867*x3868))+((r02*x3864))+((r00*x3870))+cj0);
evalcond[3]=(sj0+(((-1.0)*x3865*x3868))+((r10*x3870))+((r12*x3864)));
evalcond[4]=((((-1.0)*r02*x3868))+(((-1.0)*x3867*x3869))+sj0+((r00*x3871)));
evalcond[5]=((((-1.0)*x3865*x3869))+(((-1.0)*r12*x3868))+((r10*x3871))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3872=cj1*cj1;
IkReal x3873=(cj1*sj2);
IkReal x3874=(cj2*sj1);
IkReal x3875=((250.0)*py);
IkReal x3876=(cj1*sj1);
IkReal x3877=(r00*sj5);
IkReal x3878=(cj5*r01);
IkReal x3879=((31.75)*r10*sj5);
IkReal x3880=(sj2*x3872);
IkReal x3881=((31.75)*cj5*r11);
CheckValue<IkReal> x3882=IKPowWithIntegerCheck(((((141.5)*cj2*sj2))+(((-283.0)*cj1*cj2*x3874))+(((-283.0)*cj2*x3880))+(((141.5)*x3876))+(((-151.75)*x3880))+(((-151.75)*cj1*x3874))),-1);
if(!x3882.valid){
continue;
}
CheckValue<IkReal> x3883=IKPowWithIntegerCheck((x3873+x3874),-1);
if(!x3883.valid){
continue;
}
if( IKabs(((x3882.value)*(((((-1.0)*x3873*x3879))+(((-1.0)*x3874*x3879))+((x3873*x3875))+(((-47.0)*x3877))+(((-47.0)*x3878))+((x3874*x3875))+(((-1.0)*x3873*x3881))+(((-1.0)*x3874*x3881)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3883.value)*(((((-1.0)*x3878))+(((-1.0)*x3877)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3882.value)*(((((-1.0)*x3873*x3879))+(((-1.0)*x3874*x3879))+((x3873*x3875))+(((-47.0)*x3877))+(((-47.0)*x3878))+((x3874*x3875))+(((-1.0)*x3873*x3881))+(((-1.0)*x3874*x3881))))))+IKsqr(((x3883.value)*(((((-1.0)*x3878))+(((-1.0)*x3877))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3882.value)*(((((-1.0)*x3873*x3879))+(((-1.0)*x3874*x3879))+((x3873*x3875))+(((-47.0)*x3877))+(((-47.0)*x3878))+((x3874*x3875))+(((-1.0)*x3873*x3881))+(((-1.0)*x3874*x3881))))), ((x3883.value)*(((((-1.0)*x3878))+(((-1.0)*x3877))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3884=IKcos(j0);
IkReal x3885=IKsin(j0);
IkReal x3886=(cj5*r01);
IkReal x3887=(cj2*sj1);
IkReal x3888=(sj1*sj2);
IkReal x3889=(r00*sj5);
IkReal x3890=(cj5*r11);
IkReal x3891=(r10*sj5);
IkReal x3892=(cj1*x3884);
IkReal x3893=((0.566)*x3885);
IkReal x3894=(cj1*x3885);
evalcond[0]=(x3886+x3889+((x3884*x3887))+((sj2*x3892)));
evalcond[1]=(((x3885*x3887))+x3890+x3891+((sj2*x3894)));
evalcond[2]=((((0.566)*x3884*x3888))+(((-0.607)*x3892))+(((0.127)*x3889))+(((0.127)*x3886))+(((-0.566)*cj2*x3892))+(((-1.0)*px))+(((0.188)*x3885)));
evalcond[3]=(((x3888*x3893))+(((-0.607)*x3894))+(((-1.0)*py))+(((-1.0)*cj1*cj2*x3893))+(((-0.188)*x3884))+(((0.127)*x3890))+(((0.127)*x3891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3895=((1.0)*sj5);
IkReal x3896=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3895)));
j4eval[0]=x3896;
j4eval[1]=IKsign(x3896);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3895))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3897=((1.0)*sj5);
IkReal x3898=((((-1.0)*r00*x3897))+(((-1.0)*cj5*r01)));
j4eval[0]=x3898;
j4eval[1]=IKsign(x3898);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3897)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3899=((1.0)*sj5);
IkReal x3900=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3900;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x3899))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x3899))))));
j4eval[2]=IKsign(x3900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3902 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3902)==0){
continue;
}
IkReal x3901=pow(x3902,-0.5);
CheckValue<IkReal> x3903 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3903.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3903.value));
IkReal gconst97=((-1.0)*r21*x3901);
IkReal gconst98=(r20*x3901);
CheckValue<IkReal> x3904 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3904.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3904.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3907 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3907.valid){
continue;
}
IkReal x3905=((-1.0)*(x3907.value));
IkReal x3906=x3901;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3905;
IkReal gconst96=x3905;
IkReal gconst97=((-1.0)*r21*x3906);
IkReal gconst98=(r20*x3906);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3910 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3910.valid){
continue;
}
IkReal x3908=((-1.0)*(x3910.value));
IkReal x3909=x3901;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3908;
IkReal gconst96=x3908;
IkReal gconst97=((-1.0)*r21*x3909);
IkReal gconst98=(r20*x3909);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x3913 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3913.valid){
continue;
}
IkReal x3911=((-1.0)*(x3913.value));
IkReal x3912=x3901;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3911;
IkReal gconst96=x3911;
IkReal gconst97=((-1.0)*r21*x3912);
IkReal gconst98=(r20*x3912);
IkReal x3914=((1.0)*(r22*r22));
CheckValue<IkReal> x3918=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3914))),-1);
if(!x3918.valid){
continue;
}
IkReal x3915=x3918.value;
IkReal x3916=((1.0)*x3915);
IkReal x3917=((((-1.0)*x3914))+(((-1.0)*x3916*(r20*r20*r20*r20)))+(((-2.0)*x3915*(r20*r20)*(r21*r21)))+(((-1.0)*x3916*(r21*r21*r21*r21))));
j4eval[0]=x3917;
j4eval[1]=IKsign(x3917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3919=(cj1*sj2);
IkReal x3920=((1.0)*r22);
IkReal x3921=(gconst97*r21);
IkReal x3922=(cj2*sj1);
IkReal x3923=(gconst98*r20);
CheckValue<IkReal> x3924 = IKatan2WithCheck(IkReal(((((-1.0)*x3919*x3920))+(((-1.0)*x3920*x3922)))),IkReal((((x3921*x3922))+((x3919*x3921))+(((-1.0)*x3922*x3923))+(((-1.0)*x3919*x3923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3924.valid){
continue;
}
CheckValue<IkReal> x3925=IKPowWithIntegerCheck(IKsign(((((2.0)*x3921*x3923))+(((-1.0)*(x3921*x3921)))+(((-1.0)*(x3923*x3923)))+(((-1.0)*r22*x3920)))),-1);
if(!x3925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3924.value)+(((1.5707963267949)*(x3925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3926=IKsin(j4);
IkReal x3927=IKcos(j4);
IkReal x3928=(gconst98*r00);
IkReal x3929=(sj1*sj2);
IkReal x3930=((1.0)*cj2);
IkReal x3931=((1.0)*x3927);
IkReal x3932=(gconst98*x3926);
IkReal x3933=(gconst98*x3927);
IkReal x3934=((1.0)*gconst97*x3926);
evalcond[0]=(((r20*x3932))+(((-1.0)*r22*x3931))+(((-1.0)*r21*x3934)));
evalcond[1]=(sj0+(((-1.0)*r01*x3934))+(((-1.0)*r02*x3931))+((x3926*x3928)));
evalcond[2]=((((-1.0)*r12*x3931))+((r10*x3932))+(((-1.0)*r11*x3934))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst97*r21*x3931))+(((-1.0)*sj1*x3930))+(((-1.0)*cj1*sj2))+((r20*x3933))+((r22*x3926)));
evalcond[4]=(((cj0*x3929))+((r02*x3926))+(((-1.0)*cj0*cj1*x3930))+((x3927*x3928))+(((-1.0)*gconst97*r01*x3931)));
evalcond[5]=(((r12*x3926))+(((-1.0)*gconst97*r11*x3931))+(((-1.0)*cj1*sj0*x3930))+((r10*x3933))+((sj0*x3929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3935=((1.0)*gconst97);
CheckValue<IkReal> x3936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3935))+(((-1.0)*gconst98*r01)))),-1);
if(!x3936.valid){
continue;
}
CheckValue<IkReal> x3937 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3935))+((cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3936.value)))+(x3937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3938=IKsin(j4);
IkReal x3939=IKcos(j4);
IkReal x3940=(gconst98*r00);
IkReal x3941=(sj1*sj2);
IkReal x3942=((1.0)*cj2);
IkReal x3943=((1.0)*x3939);
IkReal x3944=(gconst98*x3938);
IkReal x3945=(gconst98*x3939);
IkReal x3946=((1.0)*gconst97*x3938);
evalcond[0]=(((r20*x3944))+(((-1.0)*r22*x3943))+(((-1.0)*r21*x3946)));
evalcond[1]=(sj0+(((-1.0)*r01*x3946))+((x3938*x3940))+(((-1.0)*r02*x3943)));
evalcond[2]=((((-1.0)*r11*x3946))+(((-1.0)*r12*x3943))+((r10*x3944))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3938))+(((-1.0)*sj1*x3942))+(((-1.0)*gconst97*r21*x3943))+(((-1.0)*cj1*sj2))+((r20*x3945)));
evalcond[4]=(((cj0*x3941))+((x3939*x3940))+(((-1.0)*cj0*cj1*x3942))+(((-1.0)*gconst97*r01*x3943))+((r02*x3938)));
evalcond[5]=(((sj0*x3941))+(((-1.0)*gconst97*r11*x3943))+(((-1.0)*cj1*sj0*x3942))+((r10*x3945))+((r12*x3938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3947=((1.0)*gconst97);
CheckValue<IkReal> x3948 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst98*r20*sj0))+(((-1.0)*r21*sj0*x3947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3948.valid){
continue;
}
CheckValue<IkReal> x3949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3947))+(((-1.0)*gconst98*r11)))),-1);
if(!x3949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3948.value)+(((1.5707963267949)*(x3949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3950=IKsin(j4);
IkReal x3951=IKcos(j4);
IkReal x3952=(gconst98*r00);
IkReal x3953=(sj1*sj2);
IkReal x3954=((1.0)*cj2);
IkReal x3955=((1.0)*x3951);
IkReal x3956=(gconst98*x3950);
IkReal x3957=(gconst98*x3951);
IkReal x3958=((1.0)*gconst97*x3950);
evalcond[0]=(((r20*x3956))+(((-1.0)*r22*x3955))+(((-1.0)*r21*x3958)));
evalcond[1]=(sj0+(((-1.0)*r01*x3958))+((x3950*x3952))+(((-1.0)*r02*x3955)));
evalcond[2]=((((-1.0)*r12*x3955))+(((-1.0)*r11*x3958))+((r10*x3956))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x3954))+((r20*x3957))+(((-1.0)*gconst97*r21*x3955))+(((-1.0)*cj1*sj2))+((r22*x3950)));
evalcond[4]=(((cj0*x3953))+((r02*x3950))+(((-1.0)*cj0*cj1*x3954))+(((-1.0)*gconst97*r01*x3955))+((x3951*x3952)));
evalcond[5]=((((-1.0)*gconst97*r11*x3955))+(((-1.0)*cj1*sj0*x3954))+((sj0*x3953))+((r10*x3957))+((r12*x3950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3960 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3960)==0){
continue;
}
IkReal x3959=pow(x3960,-0.5);
CheckValue<IkReal> x3961 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3961.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3961.value))));
IkReal gconst100=((1.0)*r21*x3959);
IkReal gconst101=((-1.0)*r20*x3959);
CheckValue<IkReal> x3962 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3962.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3962.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3965 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3965.valid){
continue;
}
IkReal x3963=((1.0)*(x3965.value));
IkReal x3964=x3959;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3963)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3963)));
IkReal gconst100=((1.0)*r21*x3964);
IkReal gconst101=((-1.0)*r20*x3964);
IkReal x3966=r22*r22;
IkReal x3967=((1.0)*x3966);
CheckValue<IkReal> x3971=IKPowWithIntegerCheck(((-1.0)+x3966),-1);
if(!x3971.valid){
continue;
}
IkReal x3968=x3971.value;
if((((1.0)+(((-1.0)*x3967)))) < -0.00001)
continue;
IkReal x3969=IKsqrt(((1.0)+(((-1.0)*x3967))));
IkReal x3970=(sj0*x3968*x3969);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3970+(((-1.0)*x3967*x3970))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3974 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3974.valid){
continue;
}
IkReal x3972=((1.0)*(x3974.value));
IkReal x3973=x3959;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3972)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3972)));
IkReal gconst100=((1.0)*r21*x3973);
IkReal gconst101=((-1.0)*r20*x3973);
IkReal x3975=r22*r22;
IkReal x3976=((1.0)*x3975);
CheckValue<IkReal> x3980=IKPowWithIntegerCheck(((-1.0)+x3975),-1);
if(!x3980.valid){
continue;
}
IkReal x3977=x3980.value;
if((((1.0)+(((-1.0)*x3976)))) < -0.00001)
continue;
IkReal x3978=IKsqrt(((1.0)+(((-1.0)*x3976))));
IkReal x3979=(cj0*x3977*x3978);
j4eval[0]=((IKabs(((((-1.0)*x3976*x3979))+x3979)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3983 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3983.valid){
continue;
}
IkReal x3981=((1.0)*(x3983.value));
IkReal x3982=x3959;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3981)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3981)));
IkReal gconst100=((1.0)*r21*x3982);
IkReal gconst101=((-1.0)*r20*x3982);
IkReal x3984=r22*r22;
IkReal x3985=(cj0*r02);
IkReal x3986=(r12*sj0);
CheckValue<IkReal> x3990=IKPowWithIntegerCheck(((-1.0)+x3984),-1);
if(!x3990.valid){
continue;
}
IkReal x3987=x3990.value;
if((((1.0)+(((-1.0)*x3984)))) < -0.00001)
continue;
IkReal x3988=IKsqrt(((1.0)+(((-1.0)*x3984))));
IkReal x3989=((1.0)*r22*x3987*x3988);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x3985*x3989))+(((-1.0)*x3986*x3989)))))+(IKabs((x3985+x3986))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3991=((1.0)*gconst100);
CheckValue<IkReal> x3992=IKPowWithIntegerCheck(IKsign((((gconst100*r20))+((gconst101*r21)))),-1);
if(!x3992.valid){
continue;
}
CheckValue<IkReal> x3993 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3991))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*r11*sj0*x3991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3992.value)))+(x3993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3994=IKsin(j4);
IkReal x3995=IKcos(j4);
IkReal x3996=((1.0)*cj2);
IkReal x3997=(sj1*sj2);
IkReal x3998=(gconst101*r10);
IkReal x3999=((1.0)*x3995);
IkReal x4000=(gconst101*x3995);
IkReal x4001=(gconst101*x3994);
IkReal x4002=((1.0)*gconst100*x3994);
evalcond[0]=((((-1.0)*r21*x4002))+(((-1.0)*r22*x3999))+((r20*x4001)));
evalcond[1]=((((-1.0)*r01*x4002))+sj0+(((-1.0)*r02*x3999))+((r00*x4001)));
evalcond[2]=(((x3994*x3998))+(((-1.0)*r12*x3999))+(((-1.0)*r11*x4002))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x3996))+(((-1.0)*gconst100*r21*x3999))+(((-1.0)*cj1*sj2))+((r22*x3994))+((r20*x4000)));
evalcond[4]=(((r00*x4000))+(((-1.0)*cj0*cj1*x3996))+(((-1.0)*gconst100*r01*x3999))+((r02*x3994))+((cj0*x3997)));
evalcond[5]=(((x3995*x3998))+((r12*x3994))+(((-1.0)*cj1*sj0*x3996))+((sj0*x3997))+(((-1.0)*gconst100*r11*x3999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4003=((1.0)*gconst100);
CheckValue<IkReal> x4004 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4003))+((cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4004.valid){
continue;
}
CheckValue<IkReal> x4005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4003))+(((-1.0)*gconst101*r01)))),-1);
if(!x4005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4004.value)+(((1.5707963267949)*(x4005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4006=IKsin(j4);
IkReal x4007=IKcos(j4);
IkReal x4008=((1.0)*cj2);
IkReal x4009=(sj1*sj2);
IkReal x4010=(gconst101*r10);
IkReal x4011=((1.0)*x4007);
IkReal x4012=(gconst101*x4007);
IkReal x4013=(gconst101*x4006);
IkReal x4014=((1.0)*gconst100*x4006);
evalcond[0]=((((-1.0)*r22*x4011))+((r20*x4013))+(((-1.0)*r21*x4014)));
evalcond[1]=(sj0+(((-1.0)*r02*x4011))+((r00*x4013))+(((-1.0)*r01*x4014)));
evalcond[2]=((((-1.0)*r12*x4011))+(((-1.0)*r11*x4014))+((x4006*x4010))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst100*r21*x4011))+((r20*x4012))+(((-1.0)*cj1*sj2))+((r22*x4006))+(((-1.0)*sj1*x4008)));
evalcond[4]=(((cj0*x4009))+(((-1.0)*cj0*cj1*x4008))+((r00*x4012))+(((-1.0)*gconst100*r01*x4011))+((r02*x4006)));
evalcond[5]=(((r12*x4006))+((sj0*x4009))+(((-1.0)*cj1*sj0*x4008))+((x4007*x4010))+(((-1.0)*gconst100*r11*x4011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4015=((1.0)*gconst100);
CheckValue<IkReal> x4016=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4015))+(((-1.0)*gconst101*r11)))),-1);
if(!x4016.valid){
continue;
}
CheckValue<IkReal> x4017 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst101*r20*sj0))+(((-1.0)*r21*sj0*x4015)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4016.value)))+(x4017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4018=IKsin(j4);
IkReal x4019=IKcos(j4);
IkReal x4020=((1.0)*cj2);
IkReal x4021=(sj1*sj2);
IkReal x4022=(gconst101*r10);
IkReal x4023=((1.0)*x4019);
IkReal x4024=(gconst101*x4019);
IkReal x4025=(gconst101*x4018);
IkReal x4026=((1.0)*gconst100*x4018);
evalcond[0]=((((-1.0)*r22*x4023))+((r20*x4025))+(((-1.0)*r21*x4026)));
evalcond[1]=(sj0+(((-1.0)*r02*x4023))+((r00*x4025))+(((-1.0)*r01*x4026)));
evalcond[2]=((((-1.0)*r11*x4026))+(((-1.0)*r12*x4023))+((x4018*x4022))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x4024))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4020))+((r22*x4018))+(((-1.0)*gconst100*r21*x4023)));
evalcond[4]=(((r02*x4018))+((cj0*x4021))+((r00*x4024))+(((-1.0)*gconst100*r01*x4023))+(((-1.0)*cj0*cj1*x4020)));
evalcond[5]=(((sj0*x4021))+((x4019*x4022))+(((-1.0)*cj1*sj0*x4020))+((r12*x4018))+(((-1.0)*gconst100*r11*x4023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4027=((-1.0)*r00);
IkReal x4029 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4029)==0){
continue;
}
IkReal x4028=pow(x4029,-0.5);
CheckValue<IkReal> x4030 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4027),IKFAST_ATAN2_MAGTHRESH);
if(!x4030.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4030.value));
IkReal gconst103=(r01*x4028);
IkReal gconst104=(x4027*x4028);
CheckValue<IkReal> x4031 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4031.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4031.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4032=((-1.0)*r00);
IkReal x4033=x4028;
CheckValue<IkReal> x4035 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4032),IKFAST_ATAN2_MAGTHRESH);
if(!x4035.valid){
continue;
}
IkReal x4034=((-1.0)*(x4035.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x4034;
IkReal gconst102=x4034;
IkReal gconst103=(r01*x4033);
IkReal gconst104=(x4032*x4033);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4036=((1.0)*gconst103);
CheckValue<IkReal> x4037 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4036))+(((-1.0)*r11*sj0*x4036))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4037.valid){
continue;
}
CheckValue<IkReal> x4038=IKPowWithIntegerCheck(IKsign((((gconst104*r21))+((gconst103*r20)))),-1);
if(!x4038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4037.value)+(((1.5707963267949)*(x4038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4039=IKsin(j4);
IkReal x4040=IKcos(j4);
IkReal x4041=((1.0)*cj2);
IkReal x4042=(sj1*sj2);
IkReal x4043=((1.0)*x4040);
IkReal x4044=(gconst104*x4040);
IkReal x4045=(gconst104*x4039);
IkReal x4046=((1.0)*gconst103*x4039);
evalcond[0]=((((-1.0)*r21*x4046))+((r20*x4045))+(((-1.0)*r22*x4043)));
evalcond[1]=(sj0+(((-1.0)*r01*x4046))+((r00*x4045))+(((-1.0)*r02*x4043)));
evalcond[2]=((((-1.0)*r12*x4043))+(((-1.0)*r11*x4046))+((r10*x4045))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4041))+(((-1.0)*cj1*sj2))+((r20*x4044))+(((-1.0)*gconst103*r21*x4043))+((r22*x4039)));
evalcond[4]=(((r02*x4039))+(((-1.0)*cj0*cj1*x4041))+((cj0*x4042))+((r00*x4044))+(((-1.0)*gconst103*r01*x4043)));
evalcond[5]=((((-1.0)*cj1*sj0*x4041))+((r10*x4044))+(((-1.0)*gconst103*r11*x4043))+((r12*x4039))+((sj0*x4042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4047=((1.0)*gconst103);
CheckValue<IkReal> x4048 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst104*r20*sj0))+(((-1.0)*r21*sj0*x4047)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4048.valid){
continue;
}
CheckValue<IkReal> x4049=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4047))+(((-1.0)*gconst104*r11)))),-1);
if(!x4049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4048.value)+(((1.5707963267949)*(x4049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4050=IKsin(j4);
IkReal x4051=IKcos(j4);
IkReal x4052=((1.0)*cj2);
IkReal x4053=(sj1*sj2);
IkReal x4054=((1.0)*x4051);
IkReal x4055=(gconst104*x4051);
IkReal x4056=(gconst104*x4050);
IkReal x4057=((1.0)*gconst103*x4050);
evalcond[0]=((((-1.0)*r21*x4057))+((r20*x4056))+(((-1.0)*r22*x4054)));
evalcond[1]=(sj0+(((-1.0)*r01*x4057))+((r00*x4056))+(((-1.0)*r02*x4054)));
evalcond[2]=((((-1.0)*r12*x4054))+(((-1.0)*r11*x4057))+((r10*x4056))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r20*x4055))+(((-1.0)*gconst103*r21*x4054))+((r22*x4050))+(((-1.0)*sj1*x4052)));
evalcond[4]=(((r02*x4050))+(((-1.0)*cj0*cj1*x4052))+(((-1.0)*gconst103*r01*x4054))+((cj0*x4053))+((r00*x4055)));
evalcond[5]=(((sj0*x4053))+(((-1.0)*cj1*sj0*x4052))+(((-1.0)*gconst103*r11*x4054))+((r12*x4050))+((r10*x4055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4058=((-1.0)*r01);
IkReal x4060 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4060)==0){
continue;
}
IkReal x4059=pow(x4060,-0.5);
CheckValue<IkReal> x4061 = IKatan2WithCheck(IkReal(x4058),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4061.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4061.value))));
IkReal gconst106=(x4058*x4059);
IkReal gconst107=((1.0)*r00*x4059);
CheckValue<IkReal> x4062 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4062.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4062.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4063=((-1.0)*r01);
CheckValue<IkReal> x4066 = IKatan2WithCheck(IkReal(x4063),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4066.valid){
continue;
}
IkReal x4064=((1.0)*(x4066.value));
IkReal x4065=x4059;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4064)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4064)));
IkReal gconst106=(x4063*x4065);
IkReal gconst107=((1.0)*r00*x4065);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x4067=((-1.0)*r01);
CheckValue<IkReal> x4070 = IKatan2WithCheck(IkReal(x4067),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4070.valid){
continue;
}
IkReal x4068=((1.0)*(x4070.value));
IkReal x4069=x4059;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4068)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4068)));
IkReal gconst106=(x4067*x4069);
IkReal gconst107=((1.0)*r00*x4069);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4071=((-1.0)*r01);
CheckValue<IkReal> x4074 = IKatan2WithCheck(IkReal(x4071),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4074.valid){
continue;
}
IkReal x4072=((1.0)*(x4074.value));
IkReal x4073=x4059;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4072)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4072)));
IkReal gconst106=(x4071*x4073);
IkReal gconst107=((1.0)*r00*x4073);
IkReal x4075=r02*r02;
IkReal x4076=(r12*sj0);
IkReal x4077=x4059;
IkReal x4078=(cj0*x4077);
j4eval[0]=((IKabs((x4076+((cj0*r02)))))+(IKabs(((((-1.0)*x4078))+((x4075*x4078))+((r02*x4076*x4077))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4079=((1.0)*gconst106);
CheckValue<IkReal> x4080 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x4079))+(((-1.0)*cj0*r01*x4079))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4080.valid){
continue;
}
CheckValue<IkReal> x4081=IKPowWithIntegerCheck(IKsign((((gconst107*r21))+((gconst106*r20)))),-1);
if(!x4081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4080.value)+(((1.5707963267949)*(x4081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4082=IKsin(j4);
IkReal x4083=IKcos(j4);
IkReal x4084=(gconst106*r01);
IkReal x4085=((1.0)*cj2);
IkReal x4086=(sj1*sj2);
IkReal x4087=(gconst106*r21);
IkReal x4088=(gconst106*r11);
IkReal x4089=((1.0)*x4083);
IkReal x4090=((1.0)*x4082);
IkReal x4091=(gconst107*x4082);
IkReal x4092=(gconst107*x4083);
evalcond[0]=(((r20*x4091))+(((-1.0)*r22*x4089))+(((-1.0)*x4087*x4090)));
evalcond[1]=(sj0+((r00*x4091))+(((-1.0)*r02*x4089))+(((-1.0)*x4084*x4090)));
evalcond[2]=((((-1.0)*r12*x4089))+((r10*x4091))+(((-1.0)*x4088*x4090))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x4092))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4085))+(((-1.0)*x4087*x4089))+((r22*x4082)));
evalcond[4]=((((-1.0)*cj0*cj1*x4085))+((cj0*x4086))+((r00*x4092))+(((-1.0)*x4084*x4089))+((r02*x4082)));
evalcond[5]=(((r10*x4092))+((r12*x4082))+(((-1.0)*x4088*x4089))+(((-1.0)*cj1*sj0*x4085))+((sj0*x4086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4093=((1.0)*gconst106);
CheckValue<IkReal> x4094=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r01))+(((-1.0)*r00*x4093)))),-1);
if(!x4094.valid){
continue;
}
CheckValue<IkReal> x4095 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r20))+(((-1.0)*cj0*r21*x4093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4094.value)))+(x4095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4096=IKsin(j4);
IkReal x4097=IKcos(j4);
IkReal x4098=(gconst106*r01);
IkReal x4099=((1.0)*cj2);
IkReal x4100=(sj1*sj2);
IkReal x4101=(gconst106*r21);
IkReal x4102=(gconst106*r11);
IkReal x4103=((1.0)*x4097);
IkReal x4104=((1.0)*x4096);
IkReal x4105=(gconst107*x4096);
IkReal x4106=(gconst107*x4097);
evalcond[0]=((((-1.0)*r22*x4103))+((r20*x4105))+(((-1.0)*x4101*x4104)));
evalcond[1]=((((-1.0)*x4098*x4104))+sj0+((r00*x4105))+(((-1.0)*r02*x4103)));
evalcond[2]=((((-1.0)*r12*x4103))+(((-1.0)*x4102*x4104))+((r10*x4105))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4099))+(((-1.0)*cj1*sj2))+((r22*x4096))+((r20*x4106))+(((-1.0)*x4101*x4103)));
evalcond[4]=((((-1.0)*x4098*x4103))+(((-1.0)*cj0*cj1*x4099))+((cj0*x4100))+((r02*x4096))+((r00*x4106)));
evalcond[5]=((((-1.0)*cj1*sj0*x4099))+((r12*x4096))+(((-1.0)*x4102*x4103))+((sj0*x4100))+((r10*x4106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4107=((1.0)*gconst106);
CheckValue<IkReal> x4108=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4107))+(((-1.0)*gconst107*r11)))),-1);
if(!x4108.valid){
continue;
}
CheckValue<IkReal> x4109 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst107*r20*sj0))+(((-1.0)*r21*sj0*x4107)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4108.value)))+(x4109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4110=IKsin(j4);
IkReal x4111=IKcos(j4);
IkReal x4112=(gconst106*r01);
IkReal x4113=((1.0)*cj2);
IkReal x4114=(sj1*sj2);
IkReal x4115=(gconst106*r21);
IkReal x4116=(gconst106*r11);
IkReal x4117=((1.0)*x4111);
IkReal x4118=((1.0)*x4110);
IkReal x4119=(gconst107*x4110);
IkReal x4120=(gconst107*x4111);
evalcond[0]=((((-1.0)*r22*x4117))+((r20*x4119))+(((-1.0)*x4115*x4118)));
evalcond[1]=(sj0+(((-1.0)*x4112*x4118))+(((-1.0)*r02*x4117))+((r00*x4119)));
evalcond[2]=((((-1.0)*r12*x4117))+(((-1.0)*x4116*x4118))+(((-1.0)*cj0))+((r10*x4119)));
evalcond[3]=(((r20*x4120))+(((-1.0)*sj1*x4113))+(((-1.0)*cj1*sj2))+((r22*x4110))+(((-1.0)*x4115*x4117)));
evalcond[4]=(((cj0*x4114))+((r02*x4110))+(((-1.0)*x4112*x4117))+(((-1.0)*cj0*cj1*x4113))+((r00*x4120)));
evalcond[5]=(((sj0*x4114))+((r12*x4110))+(((-1.0)*x4116*x4117))+(((-1.0)*cj1*sj0*x4113))+((r10*x4120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4121=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4121;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x4121);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4122=((1.0)*sj5);
IkReal x4123=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4122)));
j4eval[0]=x4123;
j4eval[1]=IKsign(x4123);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x4122)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4124=(cj1*cj2);
IkReal x4125=(cj5*r00);
IkReal x4126=(r01*sj5);
IkReal x4127=((1.0)*sj1*sj2);
IkReal x4128=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4128;
j4eval[1]=((IKabs((((r02*x4124))+(((-1.0)*r02*x4127)))))+(IKabs((((x4124*x4126))+(((-1.0)*x4126*x4127))+(((-1.0)*x4124*x4125))+((sj1*sj2*x4125))))));
j4eval[2]=IKsign(x4128);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4129=(r01*sj5);
IkReal x4130=(cj1*cj2);
IkReal x4131=(cj5*r00);
IkReal x4132=((1.0)*sj1*sj2);
CheckValue<IkReal> x4133=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4133.valid){
continue;
}
CheckValue<IkReal> x4134 = IKatan2WithCheck(IkReal((((x4129*x4130))+((sj1*sj2*x4131))+(((-1.0)*x4129*x4132))+(((-1.0)*x4130*x4131)))),IkReal(((((-1.0)*r02*x4132))+((r02*x4130)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4133.value)))+(x4134.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4135=IKcos(j4);
IkReal x4136=IKsin(j4);
IkReal x4137=((1.0)*cj1);
IkReal x4138=((1.0)*x4135);
IkReal x4139=(cj5*x4135);
IkReal x4140=(cj5*x4136);
IkReal x4141=((1.0)*sj5*x4136);
evalcond[0]=(((r00*x4139))+((r02*x4136))+(((-1.0)*r01*sj5*x4138)));
evalcond[1]=(((r20*x4140))+(((-1.0)*r22*x4138))+(((-1.0)*r21*x4141)));
evalcond[2]=(((r10*x4140))+(((-1.0)*r12*x4138))+(((-1.0)*r11*x4141)));
evalcond[3]=((1.0)+((r00*x4140))+(((-1.0)*r02*x4138))+(((-1.0)*r01*x4141)));
evalcond[4]=(((r10*x4139))+((sj1*sj2))+(((-1.0)*r11*sj5*x4138))+((r12*x4136))+(((-1.0)*cj2*x4137)));
evalcond[5]=(((r22*x4136))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4138))+((r20*x4139))+(((-1.0)*sj2*x4137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4142=((1.0)*sj5);
CheckValue<IkReal> x4143 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4143.valid){
continue;
}
CheckValue<IkReal> x4144=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4142)))),-1);
if(!x4144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4143.value)+(((1.5707963267949)*(x4144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4145=IKcos(j4);
IkReal x4146=IKsin(j4);
IkReal x4147=((1.0)*cj1);
IkReal x4148=((1.0)*x4145);
IkReal x4149=(cj5*x4145);
IkReal x4150=(cj5*x4146);
IkReal x4151=((1.0)*sj5*x4146);
evalcond[0]=(((r02*x4146))+(((-1.0)*r01*sj5*x4148))+((r00*x4149)));
evalcond[1]=((((-1.0)*r21*x4151))+((r20*x4150))+(((-1.0)*r22*x4148)));
evalcond[2]=(((r10*x4150))+(((-1.0)*r12*x4148))+(((-1.0)*r11*x4151)));
evalcond[3]=((1.0)+((r00*x4150))+(((-1.0)*r02*x4148))+(((-1.0)*r01*x4151)));
evalcond[4]=(((r10*x4149))+((r12*x4146))+((sj1*sj2))+(((-1.0)*r11*sj5*x4148))+(((-1.0)*cj2*x4147)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x4146))+(((-1.0)*r21*sj5*x4148))+((r20*x4149))+(((-1.0)*sj2*x4147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4152 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4152.valid){
continue;
}
CheckValue<IkReal> x4153=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4152.value)+(((1.5707963267949)*(x4153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4154=IKcos(j4);
IkReal x4155=IKsin(j4);
IkReal x4156=((1.0)*cj1);
IkReal x4157=((1.0)*x4154);
IkReal x4158=(cj5*x4154);
IkReal x4159=(cj5*x4155);
IkReal x4160=((1.0)*sj5*x4155);
evalcond[0]=(((r02*x4155))+(((-1.0)*r01*sj5*x4157))+((r00*x4158)));
evalcond[1]=(((r20*x4159))+(((-1.0)*r21*x4160))+(((-1.0)*r22*x4157)));
evalcond[2]=(((r10*x4159))+(((-1.0)*r11*x4160))+(((-1.0)*r12*x4157)));
evalcond[3]=((1.0)+((r00*x4159))+(((-1.0)*r02*x4157))+(((-1.0)*r01*x4160)));
evalcond[4]=(((r10*x4158))+((r12*x4155))+((sj1*sj2))+(((-1.0)*r11*sj5*x4157))+(((-1.0)*cj2*x4156)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x4155))+(((-1.0)*r21*sj5*x4157))+((r20*x4158))+(((-1.0)*sj2*x4156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4161=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4161;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x4161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4162=((1.0)*sj5);
IkReal x4163=((((-1.0)*cj5*r21))+(((-1.0)*r20*x4162)));
j4eval[0]=x4163;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x4162))))));
j4eval[2]=IKsign(x4163);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4164=cj5*cj5;
IkReal x4165=r01*r01;
IkReal x4166=(cj5*r00);
IkReal x4167=(r01*sj5);
IkReal x4168=(((x4164*(r00*r00)))+(((-1.0)*x4164*x4165))+x4165+(((-2.0)*x4166*x4167))+(r02*r02));
j4eval[0]=x4168;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x4167))+x4166))));
j4eval[2]=IKsign(x4168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4169=cj5*cj5;
IkReal x4170=r01*r01;
IkReal x4171=(r01*sj5);
IkReal x4172=(cj5*r00);
CheckValue<IkReal> x4173 = IKatan2WithCheck(IkReal(((((-1.0)*x4171))+x4172)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4173.valid){
continue;
}
CheckValue<IkReal> x4174=IKPowWithIntegerCheck(IKsign((((x4169*(r00*r00)))+(((-1.0)*x4169*x4170))+x4170+(((-2.0)*x4171*x4172))+(r02*r02))),-1);
if(!x4174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4173.value)+(((1.5707963267949)*(x4174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4175=IKcos(j4);
IkReal x4176=IKsin(j4);
IkReal x4177=((1.0)*sj2);
IkReal x4178=((1.0)*x4175);
IkReal x4179=(cj5*x4175);
IkReal x4180=(cj5*x4176);
IkReal x4181=((1.0)*sj5*x4176);
evalcond[0]=(((r00*x4179))+((r02*x4176))+(((-1.0)*r01*sj5*x4178)));
evalcond[1]=(((r20*x4180))+(((-1.0)*r21*x4181))+(((-1.0)*r22*x4178)));
evalcond[2]=((((-1.0)*r11*x4181))+((r10*x4180))+(((-1.0)*r12*x4178)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4181))+((r00*x4180))+(((-1.0)*r02*x4178)));
evalcond[4]=(((r12*x4176))+((cj1*cj2))+(((-1.0)*r11*sj5*x4178))+((r10*x4179))+(((-1.0)*sj1*x4177)));
evalcond[5]=((((-1.0)*cj1*x4177))+((r22*x4176))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4178))+((r20*x4179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4182=((1.0)*sj5);
CheckValue<IkReal> x4183=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4182))+(((-1.0)*cj5*r21)))),-1);
if(!x4183.valid){
continue;
}
CheckValue<IkReal> x4184 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x4182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4183.value)))+(x4184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4185=IKcos(j4);
IkReal x4186=IKsin(j4);
IkReal x4187=((1.0)*sj2);
IkReal x4188=((1.0)*x4185);
IkReal x4189=(cj5*x4185);
IkReal x4190=(cj5*x4186);
IkReal x4191=((1.0)*sj5*x4186);
evalcond[0]=(((r02*x4186))+(((-1.0)*r01*sj5*x4188))+((r00*x4189)));
evalcond[1]=(((r20*x4190))+(((-1.0)*r21*x4191))+(((-1.0)*r22*x4188)));
evalcond[2]=((((-1.0)*r12*x4188))+(((-1.0)*r11*x4191))+((r10*x4190)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4191))+(((-1.0)*r02*x4188))+((r00*x4190)));
evalcond[4]=(((r12*x4186))+((r10*x4189))+((cj1*cj2))+(((-1.0)*r11*sj5*x4188))+(((-1.0)*sj1*x4187)));
evalcond[5]=((((-1.0)*cj1*x4187))+((r20*x4189))+(((-1.0)*cj2*sj1))+((r22*x4186))+(((-1.0)*r21*sj5*x4188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4192=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4192.valid){
continue;
}
CheckValue<IkReal> x4193 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4192.value)))+(x4193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4194=IKcos(j4);
IkReal x4195=IKsin(j4);
IkReal x4196=((1.0)*sj2);
IkReal x4197=((1.0)*x4194);
IkReal x4198=(cj5*x4194);
IkReal x4199=(cj5*x4195);
IkReal x4200=((1.0)*sj5*x4195);
evalcond[0]=((((-1.0)*r01*sj5*x4197))+((r02*x4195))+((r00*x4198)));
evalcond[1]=(((r20*x4199))+(((-1.0)*r22*x4197))+(((-1.0)*r21*x4200)));
evalcond[2]=((((-1.0)*r12*x4197))+(((-1.0)*r11*x4200))+((r10*x4199)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4200))+((r00*x4199))+(((-1.0)*r02*x4197)));
evalcond[4]=((((-1.0)*sj1*x4196))+((r12*x4195))+((r10*x4198))+((cj1*cj2))+(((-1.0)*r11*sj5*x4197)));
evalcond[5]=((((-1.0)*r21*sj5*x4197))+((r20*x4198))+(((-1.0)*cj2*sj1))+((r22*x4195))+(((-1.0)*cj1*x4196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4201=((-1.0)*r10);
IkReal x4203 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4203)==0){
continue;
}
IkReal x4202=pow(x4203,-0.5);
CheckValue<IkReal> x4204 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4201),IKFAST_ATAN2_MAGTHRESH);
if(!x4204.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4204.value));
IkReal gconst109=(r11*x4202);
IkReal gconst110=(x4201*x4202);
CheckValue<IkReal> x4205 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4205.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4205.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4206=((-1.0)*r10);
IkReal x4207=x4202;
CheckValue<IkReal> x4209 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4206),IKFAST_ATAN2_MAGTHRESH);
if(!x4209.valid){
continue;
}
IkReal x4208=((-1.0)*(x4209.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4208;
IkReal gconst108=x4208;
IkReal gconst109=(r11*x4207);
IkReal gconst110=(x4206*x4207);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4210=((1.0)*gconst109);
CheckValue<IkReal> x4211 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*r11*sj0*x4210))+(((-1.0)*cj0*r01*x4210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4211.valid){
continue;
}
CheckValue<IkReal> x4212=IKPowWithIntegerCheck(IKsign((((gconst109*r20))+((gconst110*r21)))),-1);
if(!x4212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4211.value)+(((1.5707963267949)*(x4212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4213=IKsin(j4);
IkReal x4214=IKcos(j4);
IkReal x4215=((1.0)*cj2);
IkReal x4216=(sj1*sj2);
IkReal x4217=(gconst110*r20);
IkReal x4218=(gconst109*r01);
IkReal x4219=(gconst109*r11);
IkReal x4220=(gconst109*r21);
IkReal x4221=((1.0)*x4214);
IkReal x4222=((1.0)*x4213);
IkReal x4223=(gconst110*x4214);
IkReal x4224=(gconst110*x4213);
evalcond[0]=(((x4213*x4217))+(((-1.0)*r22*x4221))+(((-1.0)*x4220*x4222)));
evalcond[1]=(sj0+((r00*x4224))+(((-1.0)*x4218*x4222))+(((-1.0)*r02*x4221)));
evalcond[2]=(((r10*x4224))+(((-1.0)*r12*x4221))+(((-1.0)*x4219*x4222))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4215))+((r22*x4213))+((x4214*x4217))+(((-1.0)*cj1*sj2))+(((-1.0)*x4220*x4221)));
evalcond[4]=(((r00*x4223))+(((-1.0)*x4218*x4221))+((r02*x4213))+((cj0*x4216))+(((-1.0)*cj0*cj1*x4215)));
evalcond[5]=(((r12*x4213))+((r10*x4223))+((sj0*x4216))+(((-1.0)*x4219*x4221))+(((-1.0)*cj1*sj0*x4215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4225=((1.0)*gconst109);
CheckValue<IkReal> x4226=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4225))+(((-1.0)*gconst110*r01)))),-1);
if(!x4226.valid){
continue;
}
CheckValue<IkReal> x4227 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4225))+((cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4226.value)))+(x4227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4228=IKsin(j4);
IkReal x4229=IKcos(j4);
IkReal x4230=((1.0)*cj2);
IkReal x4231=(sj1*sj2);
IkReal x4232=(gconst110*r20);
IkReal x4233=(gconst109*r01);
IkReal x4234=(gconst109*r11);
IkReal x4235=(gconst109*r21);
IkReal x4236=((1.0)*x4229);
IkReal x4237=((1.0)*x4228);
IkReal x4238=(gconst110*x4229);
IkReal x4239=(gconst110*x4228);
evalcond[0]=((((-1.0)*r22*x4236))+((x4228*x4232))+(((-1.0)*x4235*x4237)));
evalcond[1]=(sj0+((r00*x4239))+(((-1.0)*x4233*x4237))+(((-1.0)*r02*x4236)));
evalcond[2]=(((r10*x4239))+(((-1.0)*r12*x4236))+(((-1.0)*x4234*x4237))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r22*x4228))+((x4229*x4232))+(((-1.0)*x4235*x4236))+(((-1.0)*sj1*x4230)));
evalcond[4]=(((r00*x4238))+((r02*x4228))+(((-1.0)*x4233*x4236))+(((-1.0)*cj0*cj1*x4230))+((cj0*x4231)));
evalcond[5]=(((r10*x4238))+((sj0*x4231))+(((-1.0)*x4234*x4236))+(((-1.0)*cj1*sj0*x4230))+((r12*x4228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4240=((-1.0)*r11);
IkReal x4242 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4242)==0){
continue;
}
IkReal x4241=pow(x4242,-0.5);
CheckValue<IkReal> x4243 = IKatan2WithCheck(IkReal(x4240),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4243.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4243.value))));
IkReal gconst112=(x4240*x4241);
IkReal gconst113=((1.0)*r10*x4241);
CheckValue<IkReal> x4244 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4244.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4244.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4245=((-1.0)*r11);
CheckValue<IkReal> x4248 = IKatan2WithCheck(IkReal(x4245),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4248.valid){
continue;
}
IkReal x4246=((1.0)*(x4248.value));
IkReal x4247=x4241;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4246)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4246)));
IkReal gconst112=(x4245*x4247);
IkReal gconst113=((1.0)*r10*x4247);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4249=((-1.0)*r11);
CheckValue<IkReal> x4252 = IKatan2WithCheck(IkReal(x4249),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4252.valid){
continue;
}
IkReal x4250=((1.0)*(x4252.value));
IkReal x4251=x4241;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4250)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4250)));
IkReal gconst112=(x4249*x4251);
IkReal gconst113=((1.0)*r10*x4251);
IkReal x4253=r12*r12;
IkReal x4254=(cj0*r02);
IkReal x4255=x4241;
IkReal x4256=(sj0*x4255);
j4eval[0]=((IKabs((x4254+((r12*sj0)))))+(IKabs((((x4253*x4256))+((r12*x4254*x4255))+(((-1.0)*x4256))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4257=((-1.0)*r11);
CheckValue<IkReal> x4260 = IKatan2WithCheck(IkReal(x4257),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4260.valid){
continue;
}
IkReal x4258=((1.0)*(x4260.value));
IkReal x4259=x4241;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4258)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4258)));
IkReal gconst112=(x4257*x4259);
IkReal gconst113=((1.0)*r10*x4259);
IkReal x4261=r12*r12;
IkReal x4262=((1.0)*r22);
IkReal x4263=(cj1*sj2);
IkReal x4264=(cj2*sj1);
IkReal x4265=((1.0)+(((-1.0)*x4261)));
CheckValue<IkReal> x4272=IKPowWithIntegerCheck(x4265,-1);
if(!x4272.valid){
continue;
}
IkReal x4266=x4272.value;
CheckValue<IkReal> x4273=IKPowWithIntegerCheck(((-1.0)+x4261),-1);
if(!x4273.valid){
continue;
}
IkReal x4267=x4273.value;
IkReal x4268=((1.0)*x4266);
if((x4265) < -0.00001)
continue;
IkReal x4269=IKsqrt(x4265);
IkReal x4270=(r12*x4267*x4269);
IkReal x4271=((((-1.0)*x4268*(r10*r10)*(r20*r20)))+(((-1.0)*r22*x4262))+(((-2.0)*r10*r11*r20*r21*x4266))+(((-1.0)*x4268*(r11*r11)*(r21*r21))));
j4eval[0]=x4271;
j4eval[1]=((IKabs(((((-1.0)*x4262*x4264))+(((-1.0)*x4262*x4263)))))+(IKabs(((((-1.0)*x4262*x4263*x4270))+(((-1.0)*x4262*x4264*x4270))))));
j4eval[2]=IKsign(x4271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4274=((1.0)*r22);
IkReal x4275=(cj1*sj2);
IkReal x4276=(cj2*sj1);
IkReal x4277=(gconst113*r20);
IkReal x4278=(gconst112*r21);
CheckValue<IkReal> x4279=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4277*x4277)))+(((2.0)*x4277*x4278))+(((-1.0)*r22*x4274))+(((-1.0)*(x4278*x4278))))),-1);
if(!x4279.valid){
continue;
}
CheckValue<IkReal> x4280 = IKatan2WithCheck(IkReal(((((-1.0)*x4274*x4275))+(((-1.0)*x4274*x4276)))),IkReal(((((-1.0)*x4276*x4277))+((x4275*x4278))+((x4276*x4278))+(((-1.0)*x4275*x4277)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4279.value)))+(x4280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4281=IKsin(j4);
IkReal x4282=IKcos(j4);
IkReal x4283=(gconst113*r10);
IkReal x4284=((1.0)*cj2);
IkReal x4285=(gconst112*r01);
IkReal x4286=(sj1*sj2);
IkReal x4287=(gconst112*r11);
IkReal x4288=(gconst113*r20);
IkReal x4289=(gconst113*r00);
IkReal x4290=(gconst112*r21);
IkReal x4291=((1.0)*x4282);
IkReal x4292=((1.0)*x4281);
evalcond[0]=((((-1.0)*r22*x4291))+((x4281*x4288))+(((-1.0)*x4290*x4292)));
evalcond[1]=(sj0+((x4281*x4289))+(((-1.0)*x4285*x4292))+(((-1.0)*r02*x4291)));
evalcond[2]=(((x4281*x4283))+(((-1.0)*r12*x4291))+(((-1.0)*x4287*x4292))+(((-1.0)*cj0)));
evalcond[3]=(((x4282*x4288))+((r22*x4281))+(((-1.0)*sj1*x4284))+(((-1.0)*x4290*x4291))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((x4282*x4289))+((r02*x4281))+(((-1.0)*x4285*x4291))+((cj0*x4286))+(((-1.0)*cj0*cj1*x4284)));
evalcond[5]=(((x4282*x4283))+((r12*x4281))+((sj0*x4286))+(((-1.0)*cj1*sj0*x4284))+(((-1.0)*x4287*x4291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4293=((1.0)*gconst112);
CheckValue<IkReal> x4294=IKPowWithIntegerCheck(IKsign((((gconst112*r20))+((gconst113*r21)))),-1);
if(!x4294.valid){
continue;
}
CheckValue<IkReal> x4295 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4293))+(((-1.0)*r11*sj0*x4293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4294.value)))+(x4295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4296=IKsin(j4);
IkReal x4297=IKcos(j4);
IkReal x4298=(gconst113*r10);
IkReal x4299=((1.0)*cj2);
IkReal x4300=(gconst112*r01);
IkReal x4301=(sj1*sj2);
IkReal x4302=(gconst112*r11);
IkReal x4303=(gconst113*r20);
IkReal x4304=(gconst113*r00);
IkReal x4305=(gconst112*r21);
IkReal x4306=((1.0)*x4297);
IkReal x4307=((1.0)*x4296);
evalcond[0]=((((-1.0)*r22*x4306))+(((-1.0)*x4305*x4307))+((x4296*x4303)));
evalcond[1]=(sj0+(((-1.0)*r02*x4306))+((x4296*x4304))+(((-1.0)*x4300*x4307)));
evalcond[2]=((((-1.0)*r12*x4306))+((x4296*x4298))+(((-1.0)*cj0))+(((-1.0)*x4302*x4307)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r22*x4296))+(((-1.0)*sj1*x4299))+(((-1.0)*x4305*x4306))+((x4297*x4303)));
evalcond[4]=(((x4297*x4304))+((cj0*x4301))+(((-1.0)*cj0*cj1*x4299))+(((-1.0)*x4300*x4306))+((r02*x4296)));
evalcond[5]=(((sj0*x4301))+((x4297*x4298))+(((-1.0)*cj1*sj0*x4299))+((r12*x4296))+(((-1.0)*x4302*x4306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4308=((1.0)*gconst112);
CheckValue<IkReal> x4309 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4308))+((cj0*gconst113*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4309.valid){
continue;
}
CheckValue<IkReal> x4310=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4308))+(((-1.0)*gconst113*r01)))),-1);
if(!x4310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4309.value)+(((1.5707963267949)*(x4310.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4311=IKsin(j4);
IkReal x4312=IKcos(j4);
IkReal x4313=(gconst113*r10);
IkReal x4314=((1.0)*cj2);
IkReal x4315=(gconst112*r01);
IkReal x4316=(sj1*sj2);
IkReal x4317=(gconst112*r11);
IkReal x4318=(gconst113*r20);
IkReal x4319=(gconst113*r00);
IkReal x4320=(gconst112*r21);
IkReal x4321=((1.0)*x4312);
IkReal x4322=((1.0)*x4311);
evalcond[0]=(((x4311*x4318))+(((-1.0)*r22*x4321))+(((-1.0)*x4320*x4322)));
evalcond[1]=(sj0+((x4311*x4319))+(((-1.0)*r02*x4321))+(((-1.0)*x4315*x4322)));
evalcond[2]=(((x4311*x4313))+(((-1.0)*x4317*x4322))+(((-1.0)*r12*x4321))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4314))+(((-1.0)*cj1*sj2))+(((-1.0)*x4320*x4321))+((r22*x4311))+((x4312*x4318)));
evalcond[4]=((((-1.0)*x4315*x4321))+((cj0*x4316))+(((-1.0)*cj0*cj1*x4314))+((r02*x4311))+((x4312*x4319)));
evalcond[5]=((((-1.0)*x4317*x4321))+((sj0*x4316))+((r12*x4311))+(((-1.0)*cj1*sj0*x4314))+((x4312*x4313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4323=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4323;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x4323);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4324=((1.0)*sj5);
IkReal x4325=((((-1.0)*r00*x4324))+(((-1.0)*cj5*r01)));
j4eval[0]=x4325;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x4324)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4326=cj5*cj5;
IkReal x4327=r11*r11;
IkReal x4328=(r11*sj5);
IkReal x4329=(cj5*r10);
IkReal x4330=((r12*r12)+(((-2.0)*x4328*x4329))+((x4326*(r10*r10)))+x4327+(((-1.0)*x4326*x4327)));
j4eval[0]=x4330;
j4eval[1]=IKsign(x4330);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4328))+x4329))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4331=cj5*cj5;
IkReal x4332=r11*r11;
IkReal x4333=(cj5*r10);
IkReal x4334=(r11*sj5);
CheckValue<IkReal> x4335=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x4333*x4334))+((x4331*(r10*r10)))+x4332+(((-1.0)*x4331*x4332)))),-1);
if(!x4335.valid){
continue;
}
CheckValue<IkReal> x4336 = IKatan2WithCheck(IkReal(((((-1.0)*x4334))+x4333)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4335.value)))+(x4336.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4337=IKcos(j4);
IkReal x4338=IKsin(j4);
IkReal x4339=(cj5*r10);
IkReal x4340=((1.0)*cj1);
IkReal x4341=((1.0)*x4337);
IkReal x4342=(cj5*x4338);
IkReal x4343=(cj5*x4337);
IkReal x4344=((1.0)*sj5*x4338);
evalcond[0]=(((x4337*x4339))+(((-1.0)*r11*sj5*x4341))+((r12*x4338)));
evalcond[1]=((((-1.0)*r22*x4341))+(((-1.0)*r21*x4344))+((r20*x4342)));
evalcond[2]=(((r00*x4342))+(((-1.0)*r02*x4341))+(((-1.0)*r01*x4344)));
evalcond[3]=((-1.0)+((x4338*x4339))+(((-1.0)*r11*x4344))+(((-1.0)*r12*x4341)));
evalcond[4]=(((r00*x4343))+((sj1*sj2))+(((-1.0)*r01*sj5*x4341))+((r02*x4338))+(((-1.0)*cj2*x4340)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x4338))+(((-1.0)*sj2*x4340))+(((-1.0)*r21*sj5*x4341))+((r20*x4343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4345=((1.0)*sj5);
CheckValue<IkReal> x4346 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4346.valid){
continue;
}
CheckValue<IkReal> x4347=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x4345)))),-1);
if(!x4347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4346.value)+(((1.5707963267949)*(x4347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4348=IKcos(j4);
IkReal x4349=IKsin(j4);
IkReal x4350=(cj5*r10);
IkReal x4351=((1.0)*cj1);
IkReal x4352=((1.0)*x4348);
IkReal x4353=(cj5*x4349);
IkReal x4354=(cj5*x4348);
IkReal x4355=((1.0)*sj5*x4349);
evalcond[0]=(((x4348*x4350))+(((-1.0)*r11*sj5*x4352))+((r12*x4349)));
evalcond[1]=((((-1.0)*r21*x4355))+((r20*x4353))+(((-1.0)*r22*x4352)));
evalcond[2]=((((-1.0)*r01*x4355))+(((-1.0)*r02*x4352))+((r00*x4353)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4352))+(((-1.0)*r11*x4355))+((x4349*x4350)));
evalcond[4]=((((-1.0)*cj2*x4351))+((r02*x4349))+((sj1*sj2))+(((-1.0)*r01*sj5*x4352))+((r00*x4354)));
evalcond[5]=((((-1.0)*r21*sj5*x4352))+((r20*x4354))+(((-1.0)*cj2*sj1))+((r22*x4349))+(((-1.0)*sj2*x4351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4356=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4356.valid){
continue;
}
CheckValue<IkReal> x4357 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4356.value)))+(x4357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4358=IKcos(j4);
IkReal x4359=IKsin(j4);
IkReal x4360=(cj5*r10);
IkReal x4361=((1.0)*cj1);
IkReal x4362=((1.0)*x4358);
IkReal x4363=(cj5*x4359);
IkReal x4364=(cj5*x4358);
IkReal x4365=((1.0)*sj5*x4359);
evalcond[0]=((((-1.0)*r11*sj5*x4362))+((r12*x4359))+((x4358*x4360)));
evalcond[1]=((((-1.0)*r22*x4362))+((r20*x4363))+(((-1.0)*r21*x4365)));
evalcond[2]=(((r00*x4363))+(((-1.0)*r02*x4362))+(((-1.0)*r01*x4365)));
evalcond[3]=((-1.0)+((x4359*x4360))+(((-1.0)*r12*x4362))+(((-1.0)*r11*x4365)));
evalcond[4]=((((-1.0)*cj2*x4361))+((sj1*sj2))+((r00*x4364))+((r02*x4359))+(((-1.0)*r01*sj5*x4362)));
evalcond[5]=((((-1.0)*r21*sj5*x4362))+((r20*x4364))+(((-1.0)*sj2*x4361))+(((-1.0)*cj2*sj1))+((r22*x4359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4366=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4366;
j4eval[1]=IKsign(x4366);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4367=((1.0)*sj5);
IkReal x4368=((((-1.0)*r20*x4367))+(((-1.0)*cj5*r21)));
j4eval[0]=x4368;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x4367))+((cj5*r00))))));
j4eval[2]=IKsign(x4368);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4369=(sj1*sj2);
IkReal x4370=(cj5*r10);
IkReal x4371=(r11*sj5);
IkReal x4372=(cj1*cj2);
IkReal x4373=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4373;
j4eval[1]=IKsign(x4373);
j4eval[2]=((IKabs((((x4370*x4372))+(((-1.0)*x4371*x4372))+(((-1.0)*x4369*x4370))+((x4369*x4371)))))+(IKabs((((r12*x4369))+(((-1.0)*r12*x4372))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4374=(sj1*sj2);
IkReal x4375=(cj5*r10);
IkReal x4376=(r11*sj5);
IkReal x4377=(cj1*cj2);
CheckValue<IkReal> x4378 = IKatan2WithCheck(IkReal(((((-1.0)*x4374*x4375))+((x4374*x4376))+((x4375*x4377))+(((-1.0)*x4376*x4377)))),IkReal((((r12*x4374))+(((-1.0)*r12*x4377)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4378.valid){
continue;
}
CheckValue<IkReal> x4379=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4378.value)+(((1.5707963267949)*(x4379.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4380=IKcos(j4);
IkReal x4381=IKsin(j4);
IkReal x4382=(cj5*r10);
IkReal x4383=((1.0)*sj2);
IkReal x4384=((1.0)*x4380);
IkReal x4385=(cj5*x4381);
IkReal x4386=(cj5*x4380);
IkReal x4387=((1.0)*sj5*x4381);
evalcond[0]=(((x4380*x4382))+(((-1.0)*r11*sj5*x4384))+((r12*x4381)));
evalcond[1]=((((-1.0)*r22*x4384))+((r20*x4385))+(((-1.0)*r21*x4387)));
evalcond[2]=((((-1.0)*r02*x4384))+((r00*x4385))+(((-1.0)*r01*x4387)));
evalcond[3]=((1.0)+(((-1.0)*r11*x4387))+(((-1.0)*r12*x4384))+((x4381*x4382)));
evalcond[4]=(((r00*x4386))+(((-1.0)*r01*sj5*x4384))+((r02*x4381))+((cj1*cj2))+(((-1.0)*sj1*x4383)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x4381))+(((-1.0)*r21*sj5*x4384))+(((-1.0)*cj1*x4383))+((r20*x4386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4388=((1.0)*sj5);
CheckValue<IkReal> x4389 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x4388))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4389.valid){
continue;
}
CheckValue<IkReal> x4390=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x4388)))),-1);
if(!x4390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4389.value)+(((1.5707963267949)*(x4390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4391=IKcos(j4);
IkReal x4392=IKsin(j4);
IkReal x4393=(cj5*r10);
IkReal x4394=((1.0)*sj2);
IkReal x4395=((1.0)*x4391);
IkReal x4396=(cj5*x4392);
IkReal x4397=(cj5*x4391);
IkReal x4398=((1.0)*sj5*x4392);
evalcond[0]=(((x4391*x4393))+(((-1.0)*r11*sj5*x4395))+((r12*x4392)));
evalcond[1]=((((-1.0)*r22*x4395))+((r20*x4396))+(((-1.0)*r21*x4398)));
evalcond[2]=((((-1.0)*r02*x4395))+(((-1.0)*r01*x4398))+((r00*x4396)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4395))+(((-1.0)*r11*x4398))+((x4392*x4393)));
evalcond[4]=((((-1.0)*r01*sj5*x4395))+((r02*x4392))+((cj1*cj2))+(((-1.0)*sj1*x4394))+((r00*x4397)));
evalcond[5]=(((r22*x4392))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4395))+(((-1.0)*cj1*x4394))+((r20*x4397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4399=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4399.valid){
continue;
}
CheckValue<IkReal> x4400 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4399.value)))+(x4400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4401=IKcos(j4);
IkReal x4402=IKsin(j4);
IkReal x4403=(cj5*r10);
IkReal x4404=((1.0)*sj2);
IkReal x4405=((1.0)*x4401);
IkReal x4406=(cj5*x4402);
IkReal x4407=(cj5*x4401);
IkReal x4408=((1.0)*sj5*x4402);
evalcond[0]=((((-1.0)*r11*sj5*x4405))+((r12*x4402))+((x4401*x4403)));
evalcond[1]=((((-1.0)*r21*x4408))+((r20*x4406))+(((-1.0)*r22*x4405)));
evalcond[2]=(((r00*x4406))+(((-1.0)*r01*x4408))+(((-1.0)*r02*x4405)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4405))+(((-1.0)*r11*x4408))+((x4402*x4403)));
evalcond[4]=((((-1.0)*sj1*x4404))+(((-1.0)*r01*sj5*x4405))+((r00*x4407))+((cj1*cj2))+((r02*x4402)));
evalcond[5]=(((r22*x4402))+(((-1.0)*r21*sj5*x4405))+(((-1.0)*cj2*sj1))+((r20*x4407))+(((-1.0)*cj1*x4404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4409=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4409);
rxp0_2=(py*r00);
rxp1_0=(r21*x4409);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4410=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4410);
rxp0_2=(py*r00);
rxp1_0=(r21*x4410);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4411=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4411);
rxp0_2=(py*r00);
rxp1_0=(r21*x4411);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4414=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x4414.valid){
continue;
}
IkReal x4412=x4414.value;
IkReal x4413=(cj0*x4412);
cj4array[0]=((((-1.0)*sj1*sj2*x4413))+((cj1*cj2*x4413)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4415=IKsin(j4);
IkReal x4416=IKcos(j4);
IkReal x4417=(cj5*r20);
IkReal x4418=((1.0)*sj5);
evalcond[0]=(r12*x4415);
evalcond[1]=((((-1.0)*r12*x4416))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x4415*x4418))+((x4415*x4417)));
evalcond[3]=(((cj5*r00*x4415))+(((-1.0)*r01*x4415*x4418)));
evalcond[4]=((((-1.0)*r21*x4416*x4418))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x4416*x4417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4420=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x4420.valid){
continue;
}
IkReal x4419=x4420.value;
cj4array[0]=(((cj1*sj2*x4419))+((cj2*sj1*x4419)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4421=IKsin(j4);
IkReal x4422=IKcos(j4);
IkReal x4423=(cj5*r00);
IkReal x4424=((1.0)*cj0);
IkReal x4425=((1.0)*r01*sj5);
evalcond[0]=(r12*x4421);
evalcond[1]=((((-1.0)*x4424))+(((-1.0)*r12*x4422)));
evalcond[2]=((((-1.0)*r21*sj5*x4421))+((cj5*r20*x4421)));
evalcond[3]=((((-1.0)*x4421*x4425))+((x4421*x4423)));
evalcond[4]=(((x4422*x4423))+(((-1.0)*x4422*x4425))+(((-1.0)*cj1*cj2*x4424))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4426=IKPowWithIntegerCheck(r12,-1);
if(!x4426.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x4426.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4427=IKsin(j4);
IkReal x4428=IKcos(j4);
IkReal x4429=((1.0)*cj1);
IkReal x4430=((1.0)*sj5);
IkReal x4431=(cj5*x4428);
IkReal x4432=(cj5*x4427);
evalcond[0]=(r12*x4427);
evalcond[1]=(((r20*x4432))+(((-1.0)*r21*x4427*x4430)));
evalcond[2]=(((r00*x4432))+(((-1.0)*r01*x4427*x4430)));
evalcond[3]=((((-1.0)*r21*x4428*x4430))+(((-1.0)*cj2*sj1))+((r20*x4431))+(((-1.0)*sj2*x4429)));
evalcond[4]=(((r00*x4431))+(((-1.0)*r01*x4428*x4430))+(((-1.0)*cj0*cj2*x4429))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4433=((1.0)*sj5);
CheckValue<IkReal> x4434=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4434.valid){
continue;
}
CheckValue<IkReal> x4435 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x4433))+(((-1.0)*r11*sj0*x4433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4434.value)))+(x4435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4436=IKsin(j4);
IkReal x4437=IKcos(j4);
IkReal x4438=((1.0)*cj1);
IkReal x4439=(sj1*sj2);
IkReal x4440=(cj5*r10);
IkReal x4441=((1.0)*x4437);
IkReal x4442=(cj5*x4436);
IkReal x4443=(cj5*x4437);
IkReal x4444=((1.0)*sj5*x4436);
evalcond[0]=(((r20*x4442))+(((-1.0)*r22*x4441))+(((-1.0)*r21*x4444)));
evalcond[1]=(sj0+((r00*x4442))+(((-1.0)*r02*x4441))+(((-1.0)*r01*x4444)));
evalcond[2]=((((-1.0)*r12*x4441))+(((-1.0)*r11*x4444))+((x4436*x4440))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4436))+((r20*x4443))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4441))+(((-1.0)*sj2*x4438)));
evalcond[4]=(((r00*x4443))+(((-1.0)*cj0*cj2*x4438))+((cj0*x4439))+((r02*x4436))+(((-1.0)*r01*sj5*x4441)));
evalcond[5]=((((-1.0)*cj2*sj0*x4438))+(((-1.0)*r11*sj5*x4441))+((r12*x4436))+((x4437*x4440))+((sj0*x4439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4445=((1.0)*sj5);
CheckValue<IkReal> x4446 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4446.valid){
continue;
}
CheckValue<IkReal> x4447=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4445))+(((-1.0)*cj5*r01)))),-1);
if(!x4447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4446.value)+(((1.5707963267949)*(x4447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4448=IKsin(j4);
IkReal x4449=IKcos(j4);
IkReal x4450=((1.0)*cj1);
IkReal x4451=(sj1*sj2);
IkReal x4452=(cj5*r10);
IkReal x4453=((1.0)*x4449);
IkReal x4454=(cj5*x4448);
IkReal x4455=(cj5*x4449);
IkReal x4456=((1.0)*sj5*x4448);
evalcond[0]=(((r20*x4454))+(((-1.0)*r22*x4453))+(((-1.0)*r21*x4456)));
evalcond[1]=(sj0+((r00*x4454))+(((-1.0)*r02*x4453))+(((-1.0)*r01*x4456)));
evalcond[2]=((((-1.0)*r11*x4456))+(((-1.0)*r12*x4453))+((x4448*x4452))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x4455))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4453))+(((-1.0)*sj2*x4450))+((r22*x4448)));
evalcond[4]=((((-1.0)*r01*sj5*x4453))+((r00*x4455))+(((-1.0)*cj0*cj2*x4450))+((cj0*x4451))+((r02*x4448)));
evalcond[5]=((((-1.0)*cj2*sj0*x4450))+(((-1.0)*r11*sj5*x4453))+((r12*x4448))+((x4449*x4452))+((sj0*x4451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4457=((1.0)*sj5);
CheckValue<IkReal> x4458=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4457)))),-1);
if(!x4458.valid){
continue;
}
CheckValue<IkReal> x4459 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4457))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4458.value)))+(x4459.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4460=IKsin(j4);
IkReal x4461=IKcos(j4);
IkReal x4462=((1.0)*cj1);
IkReal x4463=(sj1*sj2);
IkReal x4464=(cj5*r10);
IkReal x4465=((1.0)*x4461);
IkReal x4466=(cj5*x4460);
IkReal x4467=(cj5*x4461);
IkReal x4468=((1.0)*sj5*x4460);
evalcond[0]=((((-1.0)*r21*x4468))+(((-1.0)*r22*x4465))+((r20*x4466)));
evalcond[1]=((((-1.0)*r01*x4468))+sj0+((r00*x4466))+(((-1.0)*r02*x4465)));
evalcond[2]=((((-1.0)*r12*x4465))+(((-1.0)*r11*x4468))+((x4460*x4464))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4460))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4462))+((r20*x4467))+(((-1.0)*r21*sj5*x4465)));
evalcond[4]=((((-1.0)*r01*sj5*x4465))+((r00*x4467))+((cj0*x4463))+(((-1.0)*cj0*cj2*x4462))+((r02*x4460)));
evalcond[5]=(((r12*x4460))+(((-1.0)*cj2*sj0*x4462))+((sj0*x4463))+(((-1.0)*r11*sj5*x4465))+((x4461*x4464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4469=r21*r21;
IkReal x4470=cj5*cj5;
IkReal x4471=(cj5*r20);
IkReal x4472=(cj1*sj2);
IkReal x4473=(r21*sj5);
IkReal x4474=((1.0)*cj2*sj1);
CheckValue<IkReal> x4475=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4470*(r20*r20)))+(((2.0)*x4471*x4473))+(((-1.0)*x4469))+(((-1.0)*(r22*r22)))+((x4469*x4470)))),-1);
if(!x4475.valid){
continue;
}
CheckValue<IkReal> x4476 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4472))+(((-1.0)*r22*x4474)))),IkReal((((cj2*sj1*x4473))+(((-1.0)*x4471*x4474))+((x4472*x4473))+(((-1.0)*x4471*x4472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4475.value)))+(x4476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4477=IKsin(j4);
IkReal x4478=IKcos(j4);
IkReal x4479=(r21*sj5);
IkReal x4480=(cj5*r20);
IkReal x4481=((1.0)*x4478);
evalcond[0]=(((x4477*x4480))+(((-1.0)*x4477*x4479))+(((-1.0)*r22*x4481)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*x4479*x4481))+(((-1.0)*cj1*sj2))+((x4478*x4480))+((r22*x4477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4482=(cj5*sj4);
IkReal x4483=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x4482))+((r01*x4483))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4482))+(((-1.0)*r11*x4483))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x4482))+((r01*x4483))+((cj4*r02))))+IKsqr((((r10*x4482))+(((-1.0)*r11*x4483))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x4482))+((r01*x4483))+((cj4*r02))), (((r10*x4482))+(((-1.0)*r11*x4483))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4484=IKcos(j0);
IkReal x4485=IKsin(j0);
IkReal x4486=(cj5*r10);
IkReal x4487=(cj5*r00);
IkReal x4488=(cj5*r01);
IkReal x4489=((0.566)*cj2);
IkReal x4490=(r00*sj5);
IkReal x4491=(sj1*sj2);
IkReal x4492=(cj5*r11);
IkReal x4493=(r10*sj5);
IkReal x4494=((1.0)*cj4);
IkReal x4495=((1.0)*cj2);
IkReal x4496=(cj2*sj1);
IkReal x4497=(cj1*x4484);
IkReal x4498=((1.0)*sj4*sj5);
IkReal x4499=(cj1*x4485);
evalcond[0]=((((-1.0)*r02*x4494))+x4485+((sj4*x4487))+(((-1.0)*r01*x4498)));
evalcond[1]=((((-1.0)*x4484))+(((-1.0)*r11*x4498))+((sj4*x4486))+(((-1.0)*r12*x4494)));
evalcond[2]=(x4488+x4490+((x4484*x4496))+((sj2*x4497)));
evalcond[3]=(x4493+x4492+((x4485*x4496))+((sj2*x4499)));
evalcond[4]=(((cj4*x4487))+(((-1.0)*r01*sj5*x4494))+((x4484*x4491))+(((-1.0)*x4495*x4497))+((r02*sj4)));
evalcond[5]=(((cj4*x4486))+((x4485*x4491))+(((-1.0)*x4495*x4499))+((r12*sj4))+(((-1.0)*r11*sj5*x4494)));
evalcond[6]=((((-1.0)*x4489*x4497))+(((0.127)*x4490))+(((0.566)*x4484*x4491))+(((-0.607)*x4497))+(((0.188)*x4485))+(((-1.0)*px))+(((0.127)*x4488)));
evalcond[7]=((((-1.0)*x4489*x4499))+(((-0.188)*x4484))+(((0.127)*x4492))+(((0.127)*x4493))+(((0.566)*x4485*x4491))+(((-0.607)*x4499))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4500=((1.0)*cj5);
IkReal x4501=((1.0)*sj5);
CheckValue<IkReal> x4502=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x4502.valid){
continue;
}
CheckValue<IkReal> x4503 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x4500))+(((-1.0)*r10*x4501)))),IkReal(((((-1.0)*r00*x4501))+(((-1.0)*r01*x4500)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4503.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4502.value)))+(x4503.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4504=IKcos(j0);
IkReal x4505=IKsin(j0);
IkReal x4506=(cj5*r01);
IkReal x4507=(cj2*sj1);
IkReal x4508=(sj1*sj2);
IkReal x4509=(r00*sj5);
IkReal x4510=(cj5*r11);
IkReal x4511=(r10*sj5);
IkReal x4512=(cj1*x4504);
IkReal x4513=((0.566)*x4505);
IkReal x4514=(cj1*x4505);
evalcond[0]=(x4506+x4509+((sj2*x4512))+((x4504*x4507)));
evalcond[1]=(x4510+x4511+((sj2*x4514))+((x4505*x4507)));
evalcond[2]=((((0.127)*x4506))+(((0.127)*x4509))+(((-0.566)*cj2*x4512))+(((-0.607)*x4512))+(((-1.0)*px))+(((0.188)*x4505))+(((0.566)*x4504*x4508)));
evalcond[3]=((((-0.188)*x4504))+(((0.127)*x4511))+(((0.127)*x4510))+(((-0.607)*x4514))+(((-1.0)*py))+(((-1.0)*cj1*cj2*x4513))+((x4508*x4513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4515=((1.0)*sj5);
IkReal x4516=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4515)));
j4eval[0]=x4516;
j4eval[1]=IKsign(x4516);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4515)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4517=((1.0)*sj5);
IkReal x4518=((((-1.0)*r00*x4517))+(((-1.0)*cj5*r01)));
j4eval[0]=x4518;
j4eval[1]=IKsign(x4518);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x4517))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4519=((1.0)*sj5);
IkReal x4520=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4520;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*cj0*r01*x4519))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x4519)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x4520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4522 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4522)==0){
continue;
}
IkReal x4521=pow(x4522,-0.5);
CheckValue<IkReal> x4523 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4523.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4523.value));
IkReal gconst97=((-1.0)*r21*x4521);
IkReal gconst98=(r20*x4521);
CheckValue<IkReal> x4524 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4524.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4524.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x4527 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4527.valid){
continue;
}
IkReal x4525=((-1.0)*(x4527.value));
IkReal x4526=x4521;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x4525;
IkReal gconst96=x4525;
IkReal gconst97=((-1.0)*r21*x4526);
IkReal gconst98=(r20*x4526);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4530 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4530.valid){
continue;
}
IkReal x4528=((-1.0)*(x4530.value));
IkReal x4529=x4521;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x4528;
IkReal gconst96=x4528;
IkReal gconst97=((-1.0)*r21*x4529);
IkReal gconst98=(r20*x4529);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x4533 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4533.valid){
continue;
}
IkReal x4531=((-1.0)*(x4533.value));
IkReal x4532=x4521;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x4531;
IkReal gconst96=x4531;
IkReal gconst97=((-1.0)*r21*x4532);
IkReal gconst98=(r20*x4532);
IkReal x4534=((1.0)*(r22*r22));
CheckValue<IkReal> x4538=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4534))),-1);
if(!x4538.valid){
continue;
}
IkReal x4535=x4538.value;
IkReal x4536=((1.0)*x4535);
IkReal x4537=((((-1.0)*x4534))+(((-1.0)*x4536*(r21*r21*r21*r21)))+(((-2.0)*x4535*(r20*r20)*(r21*r21)))+(((-1.0)*x4536*(r20*r20*r20*r20))));
j4eval[0]=x4537;
j4eval[1]=IKsign(x4537);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4539=(cj1*sj2);
IkReal x4540=((1.0)*r22);
IkReal x4541=(gconst97*r21);
IkReal x4542=(cj2*sj1);
IkReal x4543=(gconst98*r20);
CheckValue<IkReal> x4544=IKPowWithIntegerCheck(IKsign(((((2.0)*x4541*x4543))+(((-1.0)*r22*x4540))+(((-1.0)*(x4541*x4541)))+(((-1.0)*(x4543*x4543))))),-1);
if(!x4544.valid){
continue;
}
CheckValue<IkReal> x4545 = IKatan2WithCheck(IkReal(((((-1.0)*x4540*x4542))+(((-1.0)*x4539*x4540)))),IkReal(((((-1.0)*x4542*x4543))+(((-1.0)*x4539*x4543))+((x4541*x4542))+((x4539*x4541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4544.value)))+(x4545.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4546=IKsin(j4);
IkReal x4547=IKcos(j4);
IkReal x4548=(gconst98*r00);
IkReal x4549=(sj1*sj2);
IkReal x4550=((1.0)*cj2);
IkReal x4551=((1.0)*x4547);
IkReal x4552=(gconst98*x4546);
IkReal x4553=(gconst98*x4547);
IkReal x4554=((1.0)*gconst97*x4546);
evalcond[0]=((((-1.0)*r21*x4554))+(((-1.0)*r22*x4551))+((r20*x4552)));
evalcond[1]=((((-1.0)*r01*x4554))+((x4546*x4548))+sj0+(((-1.0)*r02*x4551)));
evalcond[2]=((((-1.0)*r11*x4554))+(((-1.0)*r12*x4551))+((r10*x4552))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4546))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst97*r21*x4551))+(((-1.0)*sj1*x4550))+((r20*x4553)));
evalcond[4]=(((x4547*x4548))+((r02*x4546))+(((-1.0)*cj0*cj1*x4550))+(((-1.0)*gconst97*r01*x4551))+((cj0*x4549)));
evalcond[5]=(((r10*x4553))+(((-1.0)*gconst97*r11*x4551))+((sj0*x4549))+((r12*x4546))+(((-1.0)*cj1*sj0*x4550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4555=((1.0)*gconst97);
CheckValue<IkReal> x4556=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4555))+(((-1.0)*gconst98*r01)))),-1);
if(!x4556.valid){
continue;
}
CheckValue<IkReal> x4557 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst98*r20))+(((-1.0)*cj0*r21*x4555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4556.value)))+(x4557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4558=IKsin(j4);
IkReal x4559=IKcos(j4);
IkReal x4560=(gconst98*r00);
IkReal x4561=(sj1*sj2);
IkReal x4562=((1.0)*cj2);
IkReal x4563=((1.0)*x4559);
IkReal x4564=(gconst98*x4558);
IkReal x4565=(gconst98*x4559);
IkReal x4566=((1.0)*gconst97*x4558);
evalcond[0]=((((-1.0)*r21*x4566))+(((-1.0)*r22*x4563))+((r20*x4564)));
evalcond[1]=(sj0+(((-1.0)*r01*x4566))+(((-1.0)*r02*x4563))+((x4558*x4560)));
evalcond[2]=(((r10*x4564))+(((-1.0)*r11*x4566))+(((-1.0)*r12*x4563))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4562))+(((-1.0)*cj1*sj2))+((r22*x4558))+((r20*x4565))+(((-1.0)*gconst97*r21*x4563)));
evalcond[4]=((((-1.0)*cj0*cj1*x4562))+(((-1.0)*gconst97*r01*x4563))+((cj0*x4561))+((r02*x4558))+((x4559*x4560)));
evalcond[5]=(((r10*x4565))+((sj0*x4561))+((r12*x4558))+(((-1.0)*gconst97*r11*x4563))+(((-1.0)*cj1*sj0*x4562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4567=((1.0)*gconst97);
CheckValue<IkReal> x4568 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst98*r20*sj0))+(((-1.0)*r21*sj0*x4567)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4568.valid){
continue;
}
CheckValue<IkReal> x4569=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4567))+(((-1.0)*gconst98*r11)))),-1);
if(!x4569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4568.value)+(((1.5707963267949)*(x4569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4570=IKsin(j4);
IkReal x4571=IKcos(j4);
IkReal x4572=(gconst98*r00);
IkReal x4573=(sj1*sj2);
IkReal x4574=((1.0)*cj2);
IkReal x4575=((1.0)*x4571);
IkReal x4576=(gconst98*x4570);
IkReal x4577=(gconst98*x4571);
IkReal x4578=((1.0)*gconst97*x4570);
evalcond[0]=(((r20*x4576))+(((-1.0)*r22*x4575))+(((-1.0)*r21*x4578)));
evalcond[1]=((((-1.0)*r01*x4578))+sj0+(((-1.0)*r02*x4575))+((x4570*x4572)));
evalcond[2]=(((r10*x4576))+(((-1.0)*r11*x4578))+(((-1.0)*r12*x4575))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4574))+((r22*x4570))+(((-1.0)*cj1*sj2))+((r20*x4577))+(((-1.0)*gconst97*r21*x4575)));
evalcond[4]=(((cj0*x4573))+(((-1.0)*gconst97*r01*x4575))+((r02*x4570))+((x4571*x4572))+(((-1.0)*cj0*cj1*x4574)));
evalcond[5]=(((r12*x4570))+((r10*x4577))+((sj0*x4573))+(((-1.0)*gconst97*r11*x4575))+(((-1.0)*cj1*sj0*x4574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4580 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4580)==0){
continue;
}
IkReal x4579=pow(x4580,-0.5);
CheckValue<IkReal> x4581 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4581.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4581.value))));
IkReal gconst100=((1.0)*r21*x4579);
IkReal gconst101=((-1.0)*r20*x4579);
CheckValue<IkReal> x4582 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4582.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4582.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x4585 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4585.valid){
continue;
}
IkReal x4583=((1.0)*(x4585.value));
IkReal x4584=x4579;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4583)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4583)));
IkReal gconst100=((1.0)*r21*x4584);
IkReal gconst101=((-1.0)*r20*x4584);
IkReal x4586=r22*r22;
IkReal x4587=((1.0)*x4586);
CheckValue<IkReal> x4591=IKPowWithIntegerCheck(((-1.0)+x4586),-1);
if(!x4591.valid){
continue;
}
IkReal x4588=x4591.value;
if((((1.0)+(((-1.0)*x4587)))) < -0.00001)
continue;
IkReal x4589=IKsqrt(((1.0)+(((-1.0)*x4587))));
IkReal x4590=(sj0*x4588*x4589);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x4590+(((-1.0)*x4587*x4590))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4594 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4594.valid){
continue;
}
IkReal x4592=((1.0)*(x4594.value));
IkReal x4593=x4579;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4592)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4592)));
IkReal gconst100=((1.0)*r21*x4593);
IkReal gconst101=((-1.0)*r20*x4593);
IkReal x4595=r22*r22;
IkReal x4596=((1.0)*x4595);
CheckValue<IkReal> x4600=IKPowWithIntegerCheck(((-1.0)+x4595),-1);
if(!x4600.valid){
continue;
}
IkReal x4597=x4600.value;
if((((1.0)+(((-1.0)*x4596)))) < -0.00001)
continue;
IkReal x4598=IKsqrt(((1.0)+(((-1.0)*x4596))));
IkReal x4599=(cj0*x4597*x4598);
j4eval[0]=((IKabs((x4599+(((-1.0)*x4596*x4599)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4603 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4603.valid){
continue;
}
IkReal x4601=((1.0)*(x4603.value));
IkReal x4602=x4579;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4601)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4601)));
IkReal gconst100=((1.0)*r21*x4602);
IkReal gconst101=((-1.0)*r20*x4602);
IkReal x4604=r22*r22;
IkReal x4605=(cj0*r02);
IkReal x4606=(r12*sj0);
CheckValue<IkReal> x4610=IKPowWithIntegerCheck(((-1.0)+x4604),-1);
if(!x4610.valid){
continue;
}
IkReal x4607=x4610.value;
if((((1.0)+(((-1.0)*x4604)))) < -0.00001)
continue;
IkReal x4608=IKsqrt(((1.0)+(((-1.0)*x4604))));
IkReal x4609=((1.0)*r22*x4607*x4608);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x4606+x4605)))+(IKabs(((((-1.0)*x4606*x4609))+(((-1.0)*x4605*x4609))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4611=((1.0)*gconst100);
CheckValue<IkReal> x4612=IKPowWithIntegerCheck(IKsign((((gconst100*r20))+((gconst101*r21)))),-1);
if(!x4612.valid){
continue;
}
CheckValue<IkReal> x4613 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4611))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*r11*sj0*x4611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4612.value)))+(x4613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4614=IKsin(j4);
IkReal x4615=IKcos(j4);
IkReal x4616=((1.0)*cj2);
IkReal x4617=(sj1*sj2);
IkReal x4618=(gconst101*r10);
IkReal x4619=((1.0)*x4615);
IkReal x4620=(gconst101*x4615);
IkReal x4621=(gconst101*x4614);
IkReal x4622=((1.0)*gconst100*x4614);
evalcond[0]=(((r20*x4621))+(((-1.0)*r21*x4622))+(((-1.0)*r22*x4619)));
evalcond[1]=((((-1.0)*r02*x4619))+sj0+(((-1.0)*r01*x4622))+((r00*x4621)));
evalcond[2]=((((-1.0)*r12*x4619))+((x4614*x4618))+(((-1.0)*r11*x4622))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x4620))+(((-1.0)*sj1*x4616))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst100*r21*x4619))+((r22*x4614)));
evalcond[4]=((((-1.0)*gconst100*r01*x4619))+((r02*x4614))+(((-1.0)*cj0*cj1*x4616))+((r00*x4620))+((cj0*x4617)));
evalcond[5]=((((-1.0)*gconst100*r11*x4619))+(((-1.0)*cj1*sj0*x4616))+((sj0*x4617))+((r12*x4614))+((x4615*x4618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4623=((1.0)*gconst100);
CheckValue<IkReal> x4624 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4623))+((cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4624.valid){
continue;
}
CheckValue<IkReal> x4625=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4623))+(((-1.0)*gconst101*r01)))),-1);
if(!x4625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4624.value)+(((1.5707963267949)*(x4625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4626=IKsin(j4);
IkReal x4627=IKcos(j4);
IkReal x4628=((1.0)*cj2);
IkReal x4629=(sj1*sj2);
IkReal x4630=(gconst101*r10);
IkReal x4631=((1.0)*x4627);
IkReal x4632=(gconst101*x4627);
IkReal x4633=(gconst101*x4626);
IkReal x4634=((1.0)*gconst100*x4626);
evalcond[0]=((((-1.0)*r21*x4634))+((r20*x4633))+(((-1.0)*r22*x4631)));
evalcond[1]=(sj0+((r00*x4633))+(((-1.0)*r02*x4631))+(((-1.0)*r01*x4634)));
evalcond[2]=(((x4626*x4630))+(((-1.0)*r11*x4634))+(((-1.0)*r12*x4631))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4628))+(((-1.0)*cj1*sj2))+((r20*x4632))+(((-1.0)*gconst100*r21*x4631))+((r22*x4626)));
evalcond[4]=(((cj0*x4629))+((r00*x4632))+((r02*x4626))+(((-1.0)*gconst100*r01*x4631))+(((-1.0)*cj0*cj1*x4628)));
evalcond[5]=(((r12*x4626))+(((-1.0)*gconst100*r11*x4631))+(((-1.0)*cj1*sj0*x4628))+((x4627*x4630))+((sj0*x4629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4635=((1.0)*gconst100);
CheckValue<IkReal> x4636 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4635))+((gconst101*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4636.valid){
continue;
}
CheckValue<IkReal> x4637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4635))+(((-1.0)*gconst101*r11)))),-1);
if(!x4637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4636.value)+(((1.5707963267949)*(x4637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4638=IKsin(j4);
IkReal x4639=IKcos(j4);
IkReal x4640=((1.0)*cj2);
IkReal x4641=(sj1*sj2);
IkReal x4642=(gconst101*r10);
IkReal x4643=((1.0)*x4639);
IkReal x4644=(gconst101*x4639);
IkReal x4645=(gconst101*x4638);
IkReal x4646=((1.0)*gconst100*x4638);
evalcond[0]=((((-1.0)*r21*x4646))+(((-1.0)*r22*x4643))+((r20*x4645)));
evalcond[1]=(sj0+(((-1.0)*r02*x4643))+((r00*x4645))+(((-1.0)*r01*x4646)));
evalcond[2]=(((x4638*x4642))+(((-1.0)*r11*x4646))+(((-1.0)*r12*x4643))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst100*r21*x4643))+(((-1.0)*cj1*sj2))+((r20*x4644))+((r22*x4638))+(((-1.0)*sj1*x4640)));
evalcond[4]=((((-1.0)*gconst100*r01*x4643))+(((-1.0)*cj0*cj1*x4640))+((r02*x4638))+((r00*x4644))+((cj0*x4641)));
evalcond[5]=((((-1.0)*cj1*sj0*x4640))+((r12*x4638))+(((-1.0)*gconst100*r11*x4643))+((sj0*x4641))+((x4639*x4642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4647=((-1.0)*r00);
IkReal x4649 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4649)==0){
continue;
}
IkReal x4648=pow(x4649,-0.5);
CheckValue<IkReal> x4650 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4647),IKFAST_ATAN2_MAGTHRESH);
if(!x4650.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4650.value));
IkReal gconst103=(r01*x4648);
IkReal gconst104=(x4647*x4648);
CheckValue<IkReal> x4651 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4651.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4651.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4652=((-1.0)*r00);
IkReal x4653=x4648;
CheckValue<IkReal> x4655 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4652),IKFAST_ATAN2_MAGTHRESH);
if(!x4655.valid){
continue;
}
IkReal x4654=((-1.0)*(x4655.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x4654;
IkReal gconst102=x4654;
IkReal gconst103=(r01*x4653);
IkReal gconst104=(x4652*x4653);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4656=((1.0)*gconst103);
CheckValue<IkReal> x4657 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4656))+(((-1.0)*r11*sj0*x4656))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4657.valid){
continue;
}
CheckValue<IkReal> x4658=IKPowWithIntegerCheck(IKsign((((gconst104*r21))+((gconst103*r20)))),-1);
if(!x4658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4657.value)+(((1.5707963267949)*(x4658.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4659=IKsin(j4);
IkReal x4660=IKcos(j4);
IkReal x4661=((1.0)*cj2);
IkReal x4662=(sj1*sj2);
IkReal x4663=((1.0)*x4660);
IkReal x4664=(gconst104*x4660);
IkReal x4665=(gconst104*x4659);
IkReal x4666=((1.0)*gconst103*x4659);
evalcond[0]=((((-1.0)*r21*x4666))+(((-1.0)*r22*x4663))+((r20*x4665)));
evalcond[1]=(sj0+(((-1.0)*r01*x4666))+((r00*x4665))+(((-1.0)*r02*x4663)));
evalcond[2]=(((r10*x4665))+(((-1.0)*r11*x4666))+(((-1.0)*r12*x4663))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4661))+(((-1.0)*cj1*sj2))+((r22*x4659))+(((-1.0)*gconst103*r21*x4663))+((r20*x4664)));
evalcond[4]=((((-1.0)*cj0*cj1*x4661))+(((-1.0)*gconst103*r01*x4663))+((r02*x4659))+((r00*x4664))+((cj0*x4662)));
evalcond[5]=(((r12*x4659))+(((-1.0)*cj1*sj0*x4661))+((sj0*x4662))+((r10*x4664))+(((-1.0)*gconst103*r11*x4663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4667=((1.0)*gconst103);
CheckValue<IkReal> x4668 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst104*r20*sj0))+(((-1.0)*r21*sj0*x4667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4668.valid){
continue;
}
CheckValue<IkReal> x4669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4667))+(((-1.0)*gconst104*r11)))),-1);
if(!x4669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4668.value)+(((1.5707963267949)*(x4669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4670=IKsin(j4);
IkReal x4671=IKcos(j4);
IkReal x4672=((1.0)*cj2);
IkReal x4673=(sj1*sj2);
IkReal x4674=((1.0)*x4671);
IkReal x4675=(gconst104*x4671);
IkReal x4676=(gconst104*x4670);
IkReal x4677=((1.0)*gconst103*x4670);
evalcond[0]=((((-1.0)*r21*x4677))+(((-1.0)*r22*x4674))+((r20*x4676)));
evalcond[1]=((((-1.0)*r02*x4674))+sj0+((r00*x4676))+(((-1.0)*r01*x4677)));
evalcond[2]=(((r10*x4676))+(((-1.0)*r11*x4677))+(((-1.0)*r12*x4674))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r22*x4670))+(((-1.0)*gconst103*r21*x4674))+((r20*x4675))+(((-1.0)*sj1*x4672)));
evalcond[4]=(((cj0*x4673))+((r02*x4670))+(((-1.0)*gconst103*r01*x4674))+(((-1.0)*cj0*cj1*x4672))+((r00*x4675)));
evalcond[5]=((((-1.0)*cj1*sj0*x4672))+(((-1.0)*gconst103*r11*x4674))+((sj0*x4673))+((r10*x4675))+((r12*x4670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4678=((-1.0)*r01);
IkReal x4680 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4680)==0){
continue;
}
IkReal x4679=pow(x4680,-0.5);
CheckValue<IkReal> x4681 = IKatan2WithCheck(IkReal(x4678),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4681.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4681.value))));
IkReal gconst106=(x4678*x4679);
IkReal gconst107=((1.0)*r00*x4679);
CheckValue<IkReal> x4682 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4682.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4682.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4683=((-1.0)*r01);
CheckValue<IkReal> x4686 = IKatan2WithCheck(IkReal(x4683),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4686.valid){
continue;
}
IkReal x4684=((1.0)*(x4686.value));
IkReal x4685=x4679;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4684)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4684)));
IkReal gconst106=(x4683*x4685);
IkReal gconst107=((1.0)*r00*x4685);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x4687=((-1.0)*r01);
CheckValue<IkReal> x4690 = IKatan2WithCheck(IkReal(x4687),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4690.valid){
continue;
}
IkReal x4688=((1.0)*(x4690.value));
IkReal x4689=x4679;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4688)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4688)));
IkReal gconst106=(x4687*x4689);
IkReal gconst107=((1.0)*r00*x4689);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4691=((-1.0)*r01);
CheckValue<IkReal> x4694 = IKatan2WithCheck(IkReal(x4691),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4694.valid){
continue;
}
IkReal x4692=((1.0)*(x4694.value));
IkReal x4693=x4679;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4692)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4692)));
IkReal gconst106=(x4691*x4693);
IkReal gconst107=((1.0)*r00*x4693);
IkReal x4695=r02*r02;
IkReal x4696=(r12*sj0);
IkReal x4697=x4679;
IkReal x4698=(cj0*x4697);
j4eval[0]=((IKabs((x4696+((cj0*r02)))))+(IKabs((((x4695*x4698))+(((-1.0)*x4698))+((r02*x4696*x4697))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4699=((1.0)*gconst106);
CheckValue<IkReal> x4700 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x4699))+(((-1.0)*cj0*r01*x4699))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4700.valid){
continue;
}
CheckValue<IkReal> x4701=IKPowWithIntegerCheck(IKsign((((gconst107*r21))+((gconst106*r20)))),-1);
if(!x4701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4700.value)+(((1.5707963267949)*(x4701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4702=IKsin(j4);
IkReal x4703=IKcos(j4);
IkReal x4704=(gconst106*r01);
IkReal x4705=((1.0)*cj2);
IkReal x4706=(sj1*sj2);
IkReal x4707=(gconst106*r21);
IkReal x4708=(gconst106*r11);
IkReal x4709=((1.0)*x4703);
IkReal x4710=((1.0)*x4702);
IkReal x4711=(gconst107*x4702);
IkReal x4712=(gconst107*x4703);
evalcond[0]=((((-1.0)*r22*x4709))+((r20*x4711))+(((-1.0)*x4707*x4710)));
evalcond[1]=(sj0+(((-1.0)*r02*x4709))+(((-1.0)*x4704*x4710))+((r00*x4711)));
evalcond[2]=(((r10*x4711))+(((-1.0)*r12*x4709))+(((-1.0)*x4708*x4710))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4705))+((r20*x4712))+(((-1.0)*x4707*x4709))+((r22*x4702)));
evalcond[4]=(((r00*x4712))+((cj0*x4706))+(((-1.0)*x4704*x4709))+((r02*x4702))+(((-1.0)*cj0*cj1*x4705)));
evalcond[5]=(((r10*x4712))+(((-1.0)*x4708*x4709))+((sj0*x4706))+(((-1.0)*cj1*sj0*x4705))+((r12*x4702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4713=((1.0)*gconst106);
CheckValue<IkReal> x4714=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r01))+(((-1.0)*r00*x4713)))),-1);
if(!x4714.valid){
continue;
}
CheckValue<IkReal> x4715 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r20))+(((-1.0)*cj0*r21*x4713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4714.value)))+(x4715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4716=IKsin(j4);
IkReal x4717=IKcos(j4);
IkReal x4718=(gconst106*r01);
IkReal x4719=((1.0)*cj2);
IkReal x4720=(sj1*sj2);
IkReal x4721=(gconst106*r21);
IkReal x4722=(gconst106*r11);
IkReal x4723=((1.0)*x4717);
IkReal x4724=((1.0)*x4716);
IkReal x4725=(gconst107*x4716);
IkReal x4726=(gconst107*x4717);
evalcond[0]=(((r20*x4725))+(((-1.0)*x4721*x4724))+(((-1.0)*r22*x4723)));
evalcond[1]=(sj0+(((-1.0)*x4718*x4724))+((r00*x4725))+(((-1.0)*r02*x4723)));
evalcond[2]=((((-1.0)*x4722*x4724))+(((-1.0)*r12*x4723))+((r10*x4725))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4716))+((r20*x4726))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4719))+(((-1.0)*x4721*x4723)));
evalcond[4]=(((cj0*x4720))+(((-1.0)*x4718*x4723))+(((-1.0)*cj0*cj1*x4719))+((r00*x4726))+((r02*x4716)));
evalcond[5]=((((-1.0)*x4722*x4723))+((sj0*x4720))+((r10*x4726))+((r12*x4716))+(((-1.0)*cj1*sj0*x4719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4727=((1.0)*gconst106);
CheckValue<IkReal> x4728=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4727))+(((-1.0)*gconst107*r11)))),-1);
if(!x4728.valid){
continue;
}
CheckValue<IkReal> x4729 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst107*r20*sj0))+(((-1.0)*r21*sj0*x4727)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4728.value)))+(x4729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4730=IKsin(j4);
IkReal x4731=IKcos(j4);
IkReal x4732=(gconst106*r01);
IkReal x4733=((1.0)*cj2);
IkReal x4734=(sj1*sj2);
IkReal x4735=(gconst106*r21);
IkReal x4736=(gconst106*r11);
IkReal x4737=((1.0)*x4731);
IkReal x4738=((1.0)*x4730);
IkReal x4739=(gconst107*x4730);
IkReal x4740=(gconst107*x4731);
evalcond[0]=((((-1.0)*x4735*x4738))+((r20*x4739))+(((-1.0)*r22*x4737)));
evalcond[1]=(sj0+(((-1.0)*x4732*x4738))+((r00*x4739))+(((-1.0)*r02*x4737)));
evalcond[2]=((((-1.0)*x4736*x4738))+(((-1.0)*r12*x4737))+((r10*x4739))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4735*x4737))+(((-1.0)*sj1*x4733))+((r20*x4740))+(((-1.0)*cj1*sj2))+((r22*x4730)));
evalcond[4]=(((cj0*x4734))+((r00*x4740))+(((-1.0)*x4732*x4737))+((r02*x4730))+(((-1.0)*cj0*cj1*x4733)));
evalcond[5]=((((-1.0)*x4736*x4737))+(((-1.0)*cj1*sj0*x4733))+((sj0*x4734))+((r10*x4740))+((r12*x4730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4741=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4741;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x4741);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4742=((1.0)*sj5);
IkReal x4743=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4742)));
j4eval[0]=x4743;
j4eval[1]=IKsign(x4743);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x4742))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4744=(cj1*cj2);
IkReal x4745=(cj5*r00);
IkReal x4746=(r01*sj5);
IkReal x4747=((1.0)*sj1*sj2);
IkReal x4748=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4748;
j4eval[1]=((IKabs(((((-1.0)*x4746*x4747))+((sj1*sj2*x4745))+(((-1.0)*x4744*x4745))+((x4744*x4746)))))+(IKabs((((r02*x4744))+(((-1.0)*r02*x4747))))));
j4eval[2]=IKsign(x4748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4749=(r01*sj5);
IkReal x4750=(cj1*cj2);
IkReal x4751=(cj5*r00);
IkReal x4752=((1.0)*sj1*sj2);
CheckValue<IkReal> x4753=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4753.valid){
continue;
}
CheckValue<IkReal> x4754 = IKatan2WithCheck(IkReal(((((-1.0)*x4750*x4751))+(((-1.0)*x4749*x4752))+((x4749*x4750))+((sj1*sj2*x4751)))),IkReal((((r02*x4750))+(((-1.0)*r02*x4752)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4753.value)))+(x4754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4755=IKcos(j4);
IkReal x4756=IKsin(j4);
IkReal x4757=((1.0)*cj1);
IkReal x4758=((1.0)*x4755);
IkReal x4759=(cj5*x4755);
IkReal x4760=(cj5*x4756);
IkReal x4761=((1.0)*sj5*x4756);
evalcond[0]=((((-1.0)*r01*sj5*x4758))+((r00*x4759))+((r02*x4756)));
evalcond[1]=((((-1.0)*r21*x4761))+(((-1.0)*r22*x4758))+((r20*x4760)));
evalcond[2]=((((-1.0)*r12*x4758))+(((-1.0)*r11*x4761))+((r10*x4760)));
evalcond[3]=((1.0)+((r00*x4760))+(((-1.0)*r02*x4758))+(((-1.0)*r01*x4761)));
evalcond[4]=(((r12*x4756))+(((-1.0)*cj2*x4757))+((sj1*sj2))+(((-1.0)*r11*sj5*x4758))+((r10*x4759)));
evalcond[5]=((((-1.0)*r21*sj5*x4758))+(((-1.0)*cj2*sj1))+((r20*x4759))+(((-1.0)*sj2*x4757))+((r22*x4756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4762=((1.0)*sj5);
CheckValue<IkReal> x4763 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4763.valid){
continue;
}
CheckValue<IkReal> x4764=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4762)))),-1);
if(!x4764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4763.value)+(((1.5707963267949)*(x4764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4765=IKcos(j4);
IkReal x4766=IKsin(j4);
IkReal x4767=((1.0)*cj1);
IkReal x4768=((1.0)*x4765);
IkReal x4769=(cj5*x4765);
IkReal x4770=(cj5*x4766);
IkReal x4771=((1.0)*sj5*x4766);
evalcond[0]=(((r02*x4766))+((r00*x4769))+(((-1.0)*r01*sj5*x4768)));
evalcond[1]=(((r20*x4770))+(((-1.0)*r21*x4771))+(((-1.0)*r22*x4768)));
evalcond[2]=((((-1.0)*r11*x4771))+(((-1.0)*r12*x4768))+((r10*x4770)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4768))+((r00*x4770))+(((-1.0)*r01*x4771)));
evalcond[4]=((((-1.0)*r11*sj5*x4768))+((sj1*sj2))+((r12*x4766))+(((-1.0)*cj2*x4767))+((r10*x4769)));
evalcond[5]=(((r22*x4766))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4768))+(((-1.0)*sj2*x4767))+((r20*x4769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4772 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4772.valid){
continue;
}
CheckValue<IkReal> x4773=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4772.value)+(((1.5707963267949)*(x4773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4774=IKcos(j4);
IkReal x4775=IKsin(j4);
IkReal x4776=((1.0)*cj1);
IkReal x4777=((1.0)*x4774);
IkReal x4778=(cj5*x4774);
IkReal x4779=(cj5*x4775);
IkReal x4780=((1.0)*sj5*x4775);
evalcond[0]=(((r00*x4778))+((r02*x4775))+(((-1.0)*r01*sj5*x4777)));
evalcond[1]=((((-1.0)*r21*x4780))+((r20*x4779))+(((-1.0)*r22*x4777)));
evalcond[2]=((((-1.0)*r12*x4777))+((r10*x4779))+(((-1.0)*r11*x4780)));
evalcond[3]=((1.0)+((r00*x4779))+(((-1.0)*r01*x4780))+(((-1.0)*r02*x4777)));
evalcond[4]=((((-1.0)*cj2*x4776))+((r12*x4775))+((sj1*sj2))+(((-1.0)*r11*sj5*x4777))+((r10*x4778)));
evalcond[5]=(((r20*x4778))+(((-1.0)*sj2*x4776))+(((-1.0)*cj2*sj1))+((r22*x4775))+(((-1.0)*r21*sj5*x4777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4781=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4781;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x4781);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4782=((1.0)*sj5);
IkReal x4783=((((-1.0)*r20*x4782))+(((-1.0)*cj5*r21)));
j4eval[0]=x4783;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x4782)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4783);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4784=cj5*cj5;
IkReal x4785=r01*r01;
IkReal x4786=(cj5*r00);
IkReal x4787=(r01*sj5);
IkReal x4788=((((-2.0)*x4786*x4787))+x4785+((x4784*(r00*r00)))+(((-1.0)*x4784*x4785))+(r02*r02));
j4eval[0]=x4788;
j4eval[1]=((IKabs(r02))+(IKabs((x4786+(((-1.0)*x4787))))));
j4eval[2]=IKsign(x4788);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4789=cj5*cj5;
IkReal x4790=r01*r01;
IkReal x4791=(r01*sj5);
IkReal x4792=(cj5*r00);
CheckValue<IkReal> x4793=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4789*x4790))+x4790+(((-2.0)*x4791*x4792))+((x4789*(r00*r00)))+(r02*r02))),-1);
if(!x4793.valid){
continue;
}
CheckValue<IkReal> x4794 = IKatan2WithCheck(IkReal((x4792+(((-1.0)*x4791)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4793.value)))+(x4794.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4795=IKcos(j4);
IkReal x4796=IKsin(j4);
IkReal x4797=((1.0)*sj2);
IkReal x4798=((1.0)*x4795);
IkReal x4799=(cj5*x4795);
IkReal x4800=(cj5*x4796);
IkReal x4801=((1.0)*sj5*x4796);
evalcond[0]=(((r00*x4799))+((r02*x4796))+(((-1.0)*r01*sj5*x4798)));
evalcond[1]=((((-1.0)*r21*x4801))+(((-1.0)*r22*x4798))+((r20*x4800)));
evalcond[2]=((((-1.0)*r12*x4798))+(((-1.0)*r11*x4801))+((r10*x4800)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4798))+((r00*x4800))+(((-1.0)*r01*x4801)));
evalcond[4]=(((r10*x4799))+(((-1.0)*sj1*x4797))+(((-1.0)*r11*sj5*x4798))+((r12*x4796))+((cj1*cj2)));
evalcond[5]=(((r20*x4799))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4798))+(((-1.0)*cj1*x4797))+((r22*x4796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4802=((1.0)*sj5);
CheckValue<IkReal> x4803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4802))+(((-1.0)*cj5*r21)))),-1);
if(!x4803.valid){
continue;
}
CheckValue<IkReal> x4804 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x4802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4803.value)))+(x4804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4805=IKcos(j4);
IkReal x4806=IKsin(j4);
IkReal x4807=((1.0)*sj2);
IkReal x4808=((1.0)*x4805);
IkReal x4809=(cj5*x4805);
IkReal x4810=(cj5*x4806);
IkReal x4811=((1.0)*sj5*x4806);
evalcond[0]=(((r02*x4806))+(((-1.0)*r01*sj5*x4808))+((r00*x4809)));
evalcond[1]=((((-1.0)*r22*x4808))+((r20*x4810))+(((-1.0)*r21*x4811)));
evalcond[2]=((((-1.0)*r11*x4811))+((r10*x4810))+(((-1.0)*r12*x4808)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4811))+(((-1.0)*r02*x4808))+((r00*x4810)));
evalcond[4]=((((-1.0)*r11*sj5*x4808))+(((-1.0)*sj1*x4807))+((r12*x4806))+((r10*x4809))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r21*sj5*x4808))+(((-1.0)*cj2*sj1))+((r22*x4806))+(((-1.0)*cj1*x4807))+((r20*x4809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4812=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4812.valid){
continue;
}
CheckValue<IkReal> x4813 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4812.value)))+(x4813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4814=IKcos(j4);
IkReal x4815=IKsin(j4);
IkReal x4816=((1.0)*sj2);
IkReal x4817=((1.0)*x4814);
IkReal x4818=(cj5*x4814);
IkReal x4819=(cj5*x4815);
IkReal x4820=((1.0)*sj5*x4815);
evalcond[0]=((((-1.0)*r01*sj5*x4817))+((r02*x4815))+((r00*x4818)));
evalcond[1]=((((-1.0)*r22*x4817))+((r20*x4819))+(((-1.0)*r21*x4820)));
evalcond[2]=(((r10*x4819))+(((-1.0)*r12*x4817))+(((-1.0)*r11*x4820)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4820))+(((-1.0)*r02*x4817))+((r00*x4819)));
evalcond[4]=(((r10*x4818))+(((-1.0)*r11*sj5*x4817))+((r12*x4815))+(((-1.0)*sj1*x4816))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4817))+((r20*x4818))+(((-1.0)*cj1*x4816))+((r22*x4815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4821=((-1.0)*r10);
IkReal x4823 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4823)==0){
continue;
}
IkReal x4822=pow(x4823,-0.5);
CheckValue<IkReal> x4824 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4821),IKFAST_ATAN2_MAGTHRESH);
if(!x4824.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4824.value));
IkReal gconst109=(r11*x4822);
IkReal gconst110=(x4821*x4822);
CheckValue<IkReal> x4825 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4825.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4825.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4826=((-1.0)*r10);
IkReal x4827=x4822;
CheckValue<IkReal> x4829 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4826),IKFAST_ATAN2_MAGTHRESH);
if(!x4829.valid){
continue;
}
IkReal x4828=((-1.0)*(x4829.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4828;
IkReal gconst108=x4828;
IkReal gconst109=(r11*x4827);
IkReal gconst110=(x4826*x4827);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4830=((1.0)*gconst109);
CheckValue<IkReal> x4831 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4830))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*r11*sj0*x4830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4831.valid){
continue;
}
CheckValue<IkReal> x4832=IKPowWithIntegerCheck(IKsign((((gconst109*r20))+((gconst110*r21)))),-1);
if(!x4832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4831.value)+(((1.5707963267949)*(x4832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4833=IKsin(j4);
IkReal x4834=IKcos(j4);
IkReal x4835=((1.0)*cj2);
IkReal x4836=(sj1*sj2);
IkReal x4837=(gconst110*r20);
IkReal x4838=(gconst109*r01);
IkReal x4839=(gconst109*r11);
IkReal x4840=(gconst109*r21);
IkReal x4841=((1.0)*x4834);
IkReal x4842=((1.0)*x4833);
IkReal x4843=(gconst110*x4834);
IkReal x4844=(gconst110*x4833);
evalcond[0]=((((-1.0)*x4840*x4842))+((x4833*x4837))+(((-1.0)*r22*x4841)));
evalcond[1]=(sj0+(((-1.0)*x4838*x4842))+(((-1.0)*r02*x4841))+((r00*x4844)));
evalcond[2]=(((r10*x4844))+(((-1.0)*x4839*x4842))+(((-1.0)*r12*x4841))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4840*x4841))+(((-1.0)*cj1*sj2))+((r22*x4833))+((x4834*x4837))+(((-1.0)*sj1*x4835)));
evalcond[4]=(((cj0*x4836))+(((-1.0)*x4838*x4841))+((r00*x4843))+(((-1.0)*cj0*cj1*x4835))+((r02*x4833)));
evalcond[5]=(((r12*x4833))+((r10*x4843))+(((-1.0)*x4839*x4841))+((sj0*x4836))+(((-1.0)*cj1*sj0*x4835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4845=((1.0)*gconst109);
CheckValue<IkReal> x4846 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst110*r20))+(((-1.0)*cj0*r21*x4845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4846.valid){
continue;
}
CheckValue<IkReal> x4847=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4845))+(((-1.0)*gconst110*r01)))),-1);
if(!x4847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4846.value)+(((1.5707963267949)*(x4847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4848=IKsin(j4);
IkReal x4849=IKcos(j4);
IkReal x4850=((1.0)*cj2);
IkReal x4851=(sj1*sj2);
IkReal x4852=(gconst110*r20);
IkReal x4853=(gconst109*r01);
IkReal x4854=(gconst109*r11);
IkReal x4855=(gconst109*r21);
IkReal x4856=((1.0)*x4849);
IkReal x4857=((1.0)*x4848);
IkReal x4858=(gconst110*x4849);
IkReal x4859=(gconst110*x4848);
evalcond[0]=(((x4848*x4852))+(((-1.0)*r22*x4856))+(((-1.0)*x4855*x4857)));
evalcond[1]=((((-1.0)*x4853*x4857))+((r00*x4859))+sj0+(((-1.0)*r02*x4856)));
evalcond[2]=((((-1.0)*r12*x4856))+((r10*x4859))+(((-1.0)*cj0))+(((-1.0)*x4854*x4857)));
evalcond[3]=(((x4849*x4852))+(((-1.0)*cj1*sj2))+((r22*x4848))+(((-1.0)*sj1*x4850))+(((-1.0)*x4855*x4856)));
evalcond[4]=(((r02*x4848))+(((-1.0)*x4853*x4856))+((r00*x4858))+((cj0*x4851))+(((-1.0)*cj0*cj1*x4850)));
evalcond[5]=(((r10*x4858))+(((-1.0)*cj1*sj0*x4850))+((r12*x4848))+((sj0*x4851))+(((-1.0)*x4854*x4856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4860=((-1.0)*r11);
IkReal x4862 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4862)==0){
continue;
}
IkReal x4861=pow(x4862,-0.5);
CheckValue<IkReal> x4863 = IKatan2WithCheck(IkReal(x4860),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4863.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4863.value))));
IkReal gconst112=(x4860*x4861);
IkReal gconst113=((1.0)*r10*x4861);
CheckValue<IkReal> x4864 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4864.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4864.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4865=((-1.0)*r11);
CheckValue<IkReal> x4868 = IKatan2WithCheck(IkReal(x4865),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4868.valid){
continue;
}
IkReal x4866=((1.0)*(x4868.value));
IkReal x4867=x4861;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4866)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4866)));
IkReal gconst112=(x4865*x4867);
IkReal gconst113=((1.0)*r10*x4867);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4869=((-1.0)*r11);
CheckValue<IkReal> x4872 = IKatan2WithCheck(IkReal(x4869),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4872.valid){
continue;
}
IkReal x4870=((1.0)*(x4872.value));
IkReal x4871=x4861;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4870)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4870)));
IkReal gconst112=(x4869*x4871);
IkReal gconst113=((1.0)*r10*x4871);
IkReal x4873=r12*r12;
IkReal x4874=(cj0*r02);
IkReal x4875=x4861;
IkReal x4876=(sj0*x4875);
j4eval[0]=((IKabs((((r12*sj0))+x4874)))+(IKabs((((r12*x4874*x4875))+((x4873*x4876))+(((-1.0)*x4876))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4877=((-1.0)*r11);
CheckValue<IkReal> x4880 = IKatan2WithCheck(IkReal(x4877),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4880.valid){
continue;
}
IkReal x4878=((1.0)*(x4880.value));
IkReal x4879=x4861;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4878)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4878)));
IkReal gconst112=(x4877*x4879);
IkReal gconst113=((1.0)*r10*x4879);
IkReal x4881=r12*r12;
IkReal x4882=((1.0)*r22);
IkReal x4883=(cj1*sj2);
IkReal x4884=(cj2*sj1);
IkReal x4885=((1.0)+(((-1.0)*x4881)));
CheckValue<IkReal> x4892=IKPowWithIntegerCheck(x4885,-1);
if(!x4892.valid){
continue;
}
IkReal x4886=x4892.value;
CheckValue<IkReal> x4893=IKPowWithIntegerCheck(((-1.0)+x4881),-1);
if(!x4893.valid){
continue;
}
IkReal x4887=x4893.value;
IkReal x4888=((1.0)*x4886);
if((x4885) < -0.00001)
continue;
IkReal x4889=IKsqrt(x4885);
IkReal x4890=(r12*x4887*x4889);
IkReal x4891=((((-1.0)*x4888*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4886))+(((-1.0)*x4888*(r10*r10)*(r20*r20)))+(((-1.0)*r22*x4882)));
j4eval[0]=x4891;
j4eval[1]=((IKabs(((((-1.0)*x4882*x4884))+(((-1.0)*x4882*x4883)))))+(IKabs(((((-1.0)*x4882*x4884*x4890))+(((-1.0)*x4882*x4883*x4890))))));
j4eval[2]=IKsign(x4891);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4894=((1.0)*r22);
IkReal x4895=(cj1*sj2);
IkReal x4896=(cj2*sj1);
IkReal x4897=(gconst113*r20);
IkReal x4898=(gconst112*r21);
CheckValue<IkReal> x4899=IKPowWithIntegerCheck(IKsign(((((2.0)*x4897*x4898))+(((-1.0)*(x4898*x4898)))+(((-1.0)*(x4897*x4897)))+(((-1.0)*r22*x4894)))),-1);
if(!x4899.valid){
continue;
}
CheckValue<IkReal> x4900 = IKatan2WithCheck(IkReal(((((-1.0)*x4894*x4896))+(((-1.0)*x4894*x4895)))),IkReal(((((-1.0)*x4896*x4897))+(((-1.0)*x4895*x4897))+((x4896*x4898))+((x4895*x4898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4899.value)))+(x4900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4901=IKsin(j4);
IkReal x4902=IKcos(j4);
IkReal x4903=(gconst113*r10);
IkReal x4904=((1.0)*cj2);
IkReal x4905=(gconst112*r01);
IkReal x4906=(sj1*sj2);
IkReal x4907=(gconst112*r11);
IkReal x4908=(gconst113*r20);
IkReal x4909=(gconst113*r00);
IkReal x4910=(gconst112*r21);
IkReal x4911=((1.0)*x4902);
IkReal x4912=((1.0)*x4901);
evalcond[0]=((((-1.0)*x4910*x4912))+((x4901*x4908))+(((-1.0)*r22*x4911)));
evalcond[1]=(sj0+(((-1.0)*r02*x4911))+(((-1.0)*x4905*x4912))+((x4901*x4909)));
evalcond[2]=((((-1.0)*r12*x4911))+((x4901*x4903))+(((-1.0)*x4907*x4912))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4904))+(((-1.0)*x4910*x4911))+((x4902*x4908))+(((-1.0)*cj1*sj2))+((r22*x4901)));
evalcond[4]=(((r02*x4901))+(((-1.0)*cj0*cj1*x4904))+(((-1.0)*x4905*x4911))+((x4902*x4909))+((cj0*x4906)));
evalcond[5]=(((x4902*x4903))+(((-1.0)*cj1*sj0*x4904))+((sj0*x4906))+(((-1.0)*x4907*x4911))+((r12*x4901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4913=((1.0)*gconst112);
CheckValue<IkReal> x4914 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x4913))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4913)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4914.valid){
continue;
}
CheckValue<IkReal> x4915=IKPowWithIntegerCheck(IKsign((((gconst112*r20))+((gconst113*r21)))),-1);
if(!x4915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4914.value)+(((1.5707963267949)*(x4915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4916=IKsin(j4);
IkReal x4917=IKcos(j4);
IkReal x4918=(gconst113*r10);
IkReal x4919=((1.0)*cj2);
IkReal x4920=(gconst112*r01);
IkReal x4921=(sj1*sj2);
IkReal x4922=(gconst112*r11);
IkReal x4923=(gconst113*r20);
IkReal x4924=(gconst113*r00);
IkReal x4925=(gconst112*r21);
IkReal x4926=((1.0)*x4917);
IkReal x4927=((1.0)*x4916);
evalcond[0]=((((-1.0)*r22*x4926))+(((-1.0)*x4925*x4927))+((x4916*x4923)));
evalcond[1]=((((-1.0)*r02*x4926))+sj0+(((-1.0)*x4920*x4927))+((x4916*x4924)));
evalcond[2]=(((x4916*x4918))+(((-1.0)*x4922*x4927))+(((-1.0)*r12*x4926))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj1*x4919))+(((-1.0)*cj1*sj2))+((x4917*x4923))+((r22*x4916))+(((-1.0)*x4925*x4926)));
evalcond[4]=(((r02*x4916))+((x4917*x4924))+((cj0*x4921))+(((-1.0)*x4920*x4926))+(((-1.0)*cj0*cj1*x4919)));
evalcond[5]=(((x4917*x4918))+((r12*x4916))+(((-1.0)*cj1*sj0*x4919))+(((-1.0)*x4922*x4926))+((sj0*x4921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4928=((1.0)*gconst112);
CheckValue<IkReal> x4929=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4928))+(((-1.0)*gconst113*r01)))),-1);
if(!x4929.valid){
continue;
}
CheckValue<IkReal> x4930 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst113*r20))+(((-1.0)*cj0*r21*x4928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4929.value)))+(x4930.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4931=IKsin(j4);
IkReal x4932=IKcos(j4);
IkReal x4933=(gconst113*r10);
IkReal x4934=((1.0)*cj2);
IkReal x4935=(gconst112*r01);
IkReal x4936=(sj1*sj2);
IkReal x4937=(gconst112*r11);
IkReal x4938=(gconst113*r20);
IkReal x4939=(gconst113*r00);
IkReal x4940=(gconst112*r21);
IkReal x4941=((1.0)*x4932);
IkReal x4942=((1.0)*x4931);
evalcond[0]=((((-1.0)*x4940*x4942))+(((-1.0)*r22*x4941))+((x4931*x4938)));
evalcond[1]=(sj0+(((-1.0)*x4935*x4942))+(((-1.0)*r02*x4941))+((x4931*x4939)));
evalcond[2]=((((-1.0)*x4937*x4942))+(((-1.0)*r12*x4941))+((x4931*x4933))+(((-1.0)*cj0)));
evalcond[3]=(((x4932*x4938))+(((-1.0)*x4940*x4941))+(((-1.0)*cj1*sj2))+((r22*x4931))+(((-1.0)*sj1*x4934)));
evalcond[4]=(((x4932*x4939))+(((-1.0)*x4935*x4941))+((cj0*x4936))+((r02*x4931))+(((-1.0)*cj0*cj1*x4934)));
evalcond[5]=(((r12*x4931))+((x4932*x4933))+(((-1.0)*x4937*x4941))+(((-1.0)*cj1*sj0*x4934))+((sj0*x4936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4943=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4943;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x4943);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4944=((1.0)*sj5);
IkReal x4945=((((-1.0)*r00*x4944))+(((-1.0)*cj5*r01)));
j4eval[0]=x4945;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x4944)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4945);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4946=cj5*cj5;
IkReal x4947=r11*r11;
IkReal x4948=(r11*sj5);
IkReal x4949=(cj5*r10);
IkReal x4950=(x4947+(r12*r12)+((x4946*(r10*r10)))+(((-1.0)*x4946*x4947))+(((-2.0)*x4948*x4949)));
j4eval[0]=x4950;
j4eval[1]=IKsign(x4950);
j4eval[2]=((IKabs(r12))+(IKabs((x4949+(((-1.0)*x4948))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4951=cj5*cj5;
IkReal x4952=r11*r11;
IkReal x4953=(cj5*r10);
IkReal x4954=(r11*sj5);
CheckValue<IkReal> x4955=IKPowWithIntegerCheck(IKsign((x4952+(r12*r12)+(((-2.0)*x4953*x4954))+(((-1.0)*x4951*x4952))+((x4951*(r10*r10))))),-1);
if(!x4955.valid){
continue;
}
CheckValue<IkReal> x4956 = IKatan2WithCheck(IkReal((x4953+(((-1.0)*x4954)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4955.value)))+(x4956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4957=IKcos(j4);
IkReal x4958=IKsin(j4);
IkReal x4959=(cj5*r10);
IkReal x4960=((1.0)*cj1);
IkReal x4961=((1.0)*x4957);
IkReal x4962=(cj5*x4958);
IkReal x4963=(cj5*x4957);
IkReal x4964=((1.0)*sj5*x4958);
evalcond[0]=(((r12*x4958))+(((-1.0)*r11*sj5*x4961))+((x4957*x4959)));
evalcond[1]=((((-1.0)*r21*x4964))+(((-1.0)*r22*x4961))+((r20*x4962)));
evalcond[2]=((((-1.0)*r02*x4961))+(((-1.0)*r01*x4964))+((r00*x4962)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x4964))+(((-1.0)*r12*x4961))+((x4958*x4959)));
evalcond[4]=((((-1.0)*r01*sj5*x4961))+((sj1*sj2))+((r02*x4958))+((r00*x4963))+(((-1.0)*cj2*x4960)));
evalcond[5]=(((r22*x4958))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4960))+((r20*x4963))+(((-1.0)*r21*sj5*x4961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4965=((1.0)*sj5);
CheckValue<IkReal> x4966 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x4965))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4966.valid){
continue;
}
CheckValue<IkReal> x4967=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4965))+(((-1.0)*cj5*r01)))),-1);
if(!x4967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4966.value)+(((1.5707963267949)*(x4967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4968=IKcos(j4);
IkReal x4969=IKsin(j4);
IkReal x4970=(cj5*r10);
IkReal x4971=((1.0)*cj1);
IkReal x4972=((1.0)*x4968);
IkReal x4973=(cj5*x4969);
IkReal x4974=(cj5*x4968);
IkReal x4975=((1.0)*sj5*x4969);
evalcond[0]=((((-1.0)*r11*sj5*x4972))+((r12*x4969))+((x4968*x4970)));
evalcond[1]=((((-1.0)*r21*x4975))+(((-1.0)*r22*x4972))+((r20*x4973)));
evalcond[2]=((((-1.0)*r02*x4972))+(((-1.0)*r01*x4975))+((r00*x4973)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4972))+(((-1.0)*r11*x4975))+((x4969*x4970)));
evalcond[4]=((((-1.0)*cj2*x4971))+(((-1.0)*r01*sj5*x4972))+((sj1*sj2))+((r02*x4969))+((r00*x4974)));
evalcond[5]=(((r22*x4969))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4971))+((r20*x4974))+(((-1.0)*r21*sj5*x4972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4976=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4976.valid){
continue;
}
CheckValue<IkReal> x4977 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4976.value)))+(x4977.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4978=IKcos(j4);
IkReal x4979=IKsin(j4);
IkReal x4980=(cj5*r10);
IkReal x4981=((1.0)*cj1);
IkReal x4982=((1.0)*x4978);
IkReal x4983=(cj5*x4979);
IkReal x4984=(cj5*x4978);
IkReal x4985=((1.0)*sj5*x4979);
evalcond[0]=(((x4978*x4980))+((r12*x4979))+(((-1.0)*r11*sj5*x4982)));
evalcond[1]=((((-1.0)*r22*x4982))+(((-1.0)*r21*x4985))+((r20*x4983)));
evalcond[2]=(((r00*x4983))+(((-1.0)*r01*x4985))+(((-1.0)*r02*x4982)));
evalcond[3]=((-1.0)+((x4979*x4980))+(((-1.0)*r12*x4982))+(((-1.0)*r11*x4985)));
evalcond[4]=(((r00*x4984))+((sj1*sj2))+(((-1.0)*cj2*x4981))+((r02*x4979))+(((-1.0)*r01*sj5*x4982)));
evalcond[5]=(((r22*x4979))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4981))+((r20*x4984))+(((-1.0)*r21*sj5*x4982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4986=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4986;
j4eval[1]=IKsign(x4986);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4987=((1.0)*sj5);
IkReal x4988=((((-1.0)*r20*x4987))+(((-1.0)*cj5*r21)));
j4eval[0]=x4988;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x4987))+((cj5*r00))))));
j4eval[2]=IKsign(x4988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4989=(sj1*sj2);
IkReal x4990=(cj5*r10);
IkReal x4991=(r11*sj5);
IkReal x4992=(cj1*cj2);
IkReal x4993=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4993;
j4eval[1]=IKsign(x4993);
j4eval[2]=((IKabs((((r12*x4989))+(((-1.0)*r12*x4992)))))+(IKabs(((((-1.0)*x4989*x4990))+((x4989*x4991))+(((-1.0)*x4991*x4992))+((x4990*x4992))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4994=(sj1*sj2);
IkReal x4995=(cj5*r10);
IkReal x4996=(r11*sj5);
IkReal x4997=(cj1*cj2);
CheckValue<IkReal> x4998 = IKatan2WithCheck(IkReal((((x4995*x4997))+((x4994*x4996))+(((-1.0)*x4996*x4997))+(((-1.0)*x4994*x4995)))),IkReal(((((-1.0)*r12*x4997))+((r12*x4994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4998.valid){
continue;
}
CheckValue<IkReal> x4999=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4998.value)+(((1.5707963267949)*(x4999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5000=IKcos(j4);
IkReal x5001=IKsin(j4);
IkReal x5002=(cj5*r10);
IkReal x5003=((1.0)*sj2);
IkReal x5004=((1.0)*x5000);
IkReal x5005=(cj5*x5001);
IkReal x5006=(cj5*x5000);
IkReal x5007=((1.0)*sj5*x5001);
evalcond[0]=(((r12*x5001))+(((-1.0)*r11*sj5*x5004))+((x5000*x5002)));
evalcond[1]=(((r20*x5005))+(((-1.0)*r22*x5004))+(((-1.0)*r21*x5007)));
evalcond[2]=(((r00*x5005))+(((-1.0)*r02*x5004))+(((-1.0)*r01*x5007)));
evalcond[3]=((1.0)+((x5001*x5002))+(((-1.0)*r12*x5004))+(((-1.0)*r11*x5007)));
evalcond[4]=(((r02*x5001))+(((-1.0)*r01*sj5*x5004))+((r00*x5006))+((cj1*cj2))+(((-1.0)*sj1*x5003)));
evalcond[5]=(((r20*x5006))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x5003))+((r22*x5001))+(((-1.0)*r21*sj5*x5004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5008=((1.0)*sj5);
CheckValue<IkReal> x5009=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x5008)))),-1);
if(!x5009.valid){
continue;
}
CheckValue<IkReal> x5010 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x5008))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5009.value)))+(x5010.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5011=IKcos(j4);
IkReal x5012=IKsin(j4);
IkReal x5013=(cj5*r10);
IkReal x5014=((1.0)*sj2);
IkReal x5015=((1.0)*x5011);
IkReal x5016=(cj5*x5012);
IkReal x5017=(cj5*x5011);
IkReal x5018=((1.0)*sj5*x5012);
evalcond[0]=(((x5011*x5013))+(((-1.0)*r11*sj5*x5015))+((r12*x5012)));
evalcond[1]=(((r20*x5016))+(((-1.0)*r21*x5018))+(((-1.0)*r22*x5015)));
evalcond[2]=((((-1.0)*r02*x5015))+(((-1.0)*r01*x5018))+((r00*x5016)));
evalcond[3]=((1.0)+(((-1.0)*r11*x5018))+((x5012*x5013))+(((-1.0)*r12*x5015)));
evalcond[4]=((((-1.0)*r01*sj5*x5015))+((r02*x5012))+(((-1.0)*sj1*x5014))+((cj1*cj2))+((r00*x5017)));
evalcond[5]=((((-1.0)*r21*sj5*x5015))+((r20*x5017))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x5014))+((r22*x5012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5019=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5019.valid){
continue;
}
CheckValue<IkReal> x5020 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5019.value)))+(x5020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5021=IKcos(j4);
IkReal x5022=IKsin(j4);
IkReal x5023=(cj5*r10);
IkReal x5024=((1.0)*sj2);
IkReal x5025=((1.0)*x5021);
IkReal x5026=(cj5*x5022);
IkReal x5027=(cj5*x5021);
IkReal x5028=((1.0)*sj5*x5022);
evalcond[0]=(((x5021*x5023))+((r12*x5022))+(((-1.0)*r11*sj5*x5025)));
evalcond[1]=(((r20*x5026))+(((-1.0)*r21*x5028))+(((-1.0)*r22*x5025)));
evalcond[2]=((((-1.0)*r02*x5025))+(((-1.0)*r01*x5028))+((r00*x5026)));
evalcond[3]=((1.0)+((x5022*x5023))+(((-1.0)*r12*x5025))+(((-1.0)*r11*x5028)));
evalcond[4]=(((r02*x5022))+(((-1.0)*r01*sj5*x5025))+(((-1.0)*sj1*x5024))+((r00*x5027))+((cj1*cj2)));
evalcond[5]=(((r20*x5027))+(((-1.0)*cj2*sj1))+((r22*x5022))+(((-1.0)*cj1*x5024))+(((-1.0)*r21*sj5*x5025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5029=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5029);
rxp0_2=(py*r00);
rxp1_0=(r21*x5029);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5030=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5030);
rxp0_2=(py*r00);
rxp1_0=(r21*x5030);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5031=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5031);
rxp0_2=(py*r00);
rxp1_0=(r21*x5031);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5034=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x5034.valid){
continue;
}
IkReal x5032=x5034.value;
IkReal x5033=(cj0*x5032);
cj4array[0]=((((-1.0)*sj1*sj2*x5033))+((cj1*cj2*x5033)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5035=IKsin(j4);
IkReal x5036=IKcos(j4);
IkReal x5037=(cj5*r20);
IkReal x5038=((1.0)*sj5);
evalcond[0]=(r12*x5035);
evalcond[1]=((((-1.0)*r12*x5036))+(((-1.0)*cj0)));
evalcond[2]=(((x5035*x5037))+(((-1.0)*r21*x5035*x5038)));
evalcond[3]=(((cj5*r00*x5035))+(((-1.0)*r01*x5035*x5038)));
evalcond[4]=(((x5036*x5037))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x5036*x5038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5040=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x5040.valid){
continue;
}
IkReal x5039=x5040.value;
cj4array[0]=(((cj1*sj2*x5039))+((cj2*sj1*x5039)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5041=IKsin(j4);
IkReal x5042=IKcos(j4);
IkReal x5043=(cj5*r00);
IkReal x5044=((1.0)*cj0);
IkReal x5045=((1.0)*r01*sj5);
evalcond[0]=(r12*x5041);
evalcond[1]=((((-1.0)*x5044))+(((-1.0)*r12*x5042)));
evalcond[2]=(((cj5*r20*x5041))+(((-1.0)*r21*sj5*x5041)));
evalcond[3]=((((-1.0)*x5041*x5045))+((x5041*x5043)));
evalcond[4]=((((-1.0)*cj1*cj2*x5044))+(((-1.0)*x5042*x5045))+((x5042*x5043))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5046=IKPowWithIntegerCheck(r12,-1);
if(!x5046.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x5046.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5047=IKsin(j4);
IkReal x5048=IKcos(j4);
IkReal x5049=((1.0)*cj1);
IkReal x5050=((1.0)*sj5);
IkReal x5051=(cj5*x5048);
IkReal x5052=(cj5*x5047);
evalcond[0]=(r12*x5047);
evalcond[1]=(((r20*x5052))+(((-1.0)*r21*x5047*x5050)));
evalcond[2]=(((r00*x5052))+(((-1.0)*r01*x5047*x5050)));
evalcond[3]=(((r20*x5051))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x5048*x5050))+(((-1.0)*sj2*x5049)));
evalcond[4]=((((-1.0)*cj0*cj2*x5049))+(((-1.0)*r01*x5048*x5050))+((r00*x5051))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5053=((1.0)*sj5);
CheckValue<IkReal> x5054=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5054.valid){
continue;
}
CheckValue<IkReal> x5055 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x5053))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x5053)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5054.value)))+(x5055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5056=IKsin(j4);
IkReal x5057=IKcos(j4);
IkReal x5058=((1.0)*cj1);
IkReal x5059=(sj1*sj2);
IkReal x5060=(cj5*r10);
IkReal x5061=((1.0)*x5057);
IkReal x5062=(cj5*x5056);
IkReal x5063=(cj5*x5057);
IkReal x5064=((1.0)*sj5*x5056);
evalcond[0]=(((r20*x5062))+(((-1.0)*r21*x5064))+(((-1.0)*r22*x5061)));
evalcond[1]=(sj0+(((-1.0)*r02*x5061))+((r00*x5062))+(((-1.0)*r01*x5064)));
evalcond[2]=((((-1.0)*r12*x5061))+(((-1.0)*r11*x5064))+((x5056*x5060))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x5061))+((r20*x5063))+(((-1.0)*sj2*x5058))+((r22*x5056))+(((-1.0)*cj2*sj1)));
evalcond[4]=((((-1.0)*cj0*cj2*x5058))+(((-1.0)*r01*sj5*x5061))+((cj0*x5059))+((r00*x5063))+((r02*x5056)));
evalcond[5]=((((-1.0)*cj2*sj0*x5058))+(((-1.0)*r11*sj5*x5061))+((r12*x5056))+((x5057*x5060))+((sj0*x5059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5065=((1.0)*sj5);
CheckValue<IkReal> x5066=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5065))+(((-1.0)*cj5*r01)))),-1);
if(!x5066.valid){
continue;
}
CheckValue<IkReal> x5067 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5065))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5066.value)))+(x5067.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5068=IKsin(j4);
IkReal x5069=IKcos(j4);
IkReal x5070=((1.0)*cj1);
IkReal x5071=(sj1*sj2);
IkReal x5072=(cj5*r10);
IkReal x5073=((1.0)*x5069);
IkReal x5074=(cj5*x5068);
IkReal x5075=(cj5*x5069);
IkReal x5076=((1.0)*sj5*x5068);
evalcond[0]=((((-1.0)*r21*x5076))+((r20*x5074))+(((-1.0)*r22*x5073)));
evalcond[1]=((((-1.0)*r02*x5073))+sj0+((r00*x5074))+(((-1.0)*r01*x5076)));
evalcond[2]=(((x5068*x5072))+(((-1.0)*r11*x5076))+(((-1.0)*r12*x5073))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x5073))+((r20*x5075))+(((-1.0)*cj2*sj1))+((r22*x5068))+(((-1.0)*sj2*x5070)));
evalcond[4]=(((cj0*x5071))+(((-1.0)*cj0*cj2*x5070))+(((-1.0)*r01*sj5*x5073))+((r02*x5068))+((r00*x5075)));
evalcond[5]=((((-1.0)*cj2*sj0*x5070))+((sj0*x5071))+(((-1.0)*r11*sj5*x5073))+((x5069*x5072))+((r12*x5068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5077=((1.0)*sj5);
CheckValue<IkReal> x5078 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5077)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5078.valid){
continue;
}
CheckValue<IkReal> x5079=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5077)))),-1);
if(!x5079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5078.value)+(((1.5707963267949)*(x5079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5080=IKsin(j4);
IkReal x5081=IKcos(j4);
IkReal x5082=((1.0)*cj1);
IkReal x5083=(sj1*sj2);
IkReal x5084=(cj5*r10);
IkReal x5085=((1.0)*x5081);
IkReal x5086=(cj5*x5080);
IkReal x5087=(cj5*x5081);
IkReal x5088=((1.0)*sj5*x5080);
evalcond[0]=(((r20*x5086))+(((-1.0)*r21*x5088))+(((-1.0)*r22*x5085)));
evalcond[1]=(sj0+(((-1.0)*r01*x5088))+((r00*x5086))+(((-1.0)*r02*x5085)));
evalcond[2]=((((-1.0)*r11*x5088))+(((-1.0)*r12*x5085))+((x5080*x5084))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x5082))+(((-1.0)*cj2*sj1))+((r22*x5080))+(((-1.0)*r21*sj5*x5085))+((r20*x5087)));
evalcond[4]=(((r00*x5087))+(((-1.0)*r01*sj5*x5085))+((cj0*x5083))+((r02*x5080))+(((-1.0)*cj0*cj2*x5082)));
evalcond[5]=(((r12*x5080))+(((-1.0)*cj2*sj0*x5082))+(((-1.0)*r11*sj5*x5085))+((sj0*x5083))+((x5081*x5084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5089=((1.0)*cj5);
IkReal x5090=((1.0)*sj5);
IkReal x5091=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x5091;
j0eval[1]=((IKabs(((((-1.0)*r01*x5089))+(((-1.0)*r00*x5090)))))+(IKabs(((((-1.0)*r11*x5089))+(((-1.0)*r10*x5090))))));
j0eval[2]=IKsign(x5091);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5092=cj5*cj5;
IkReal x5093=r21*r21;
IkReal x5094=(sj1*sj2);
IkReal x5095=(r21*sj5);
IkReal x5096=(cj1*cj2);
IkReal x5097=(cj5*r20);
IkReal x5098=((r22*r22)+x5093+(((-2.0)*x5095*x5097))+(((-1.0)*x5092*x5093))+((x5092*(r20*r20))));
j4eval[0]=x5098;
j4eval[1]=IKsign(x5098);
j4eval[2]=((IKabs((((r22*x5094))+(((-1.0)*r22*x5096)))))+(IKabs(((((-1.0)*x5094*x5095))+((x5094*x5097))+(((-1.0)*x5096*x5097))+((x5095*x5096))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.465585089389861)*px))+(((-1.50324547478535)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.465585089389861)*py))+(((-1.50324547478535)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.465585089389861)*px))+(((-1.50324547478535)*py))))+IKsqr(((((-0.465585089389861)*py))+(((-1.50324547478535)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.465585089389861)*px))+(((-1.50324547478535)*py))), ((((-0.465585089389861)*py))+(((-1.50324547478535)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5099=IKcos(j0);
IkReal x5100=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.188)*x5100))+(((-0.607)*x5099)));
evalcond[1]=((((-0.188)*x5099))+(((-0.607)*x5100))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5101=((1.0)*sj5);
IkReal x5102=((((-1.0)*r10*x5101))+(((-1.0)*cj5*r11)));
j4eval[0]=x5102;
j4eval[1]=IKsign(x5102);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5101))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5103=cj5*cj5;
IkReal x5104=((1.0)*r21);
IkReal x5105=(cj5*sj5);
IkReal x5106=((((-1.0)*r01*r20*x5105))+((r00*r20*x5103))+((r01*r21))+(((-1.0)*r01*x5103*x5104))+(((-1.0)*r00*x5104*x5105))+((r02*r22)));
j4eval[0]=x5106;
j4eval[1]=IKsign(x5106);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x5104)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5107=cj5*cj5;
IkReal x5108=(cj5*r20);
IkReal x5109=((1.0)*sj5);
IkReal x5110=(r11*r21);
IkReal x5111=(((r10*r20*x5107))+(((-1.0)*cj5*r10*r21*x5109))+((r12*r22))+x5110+(((-1.0)*r11*x5108*x5109))+(((-1.0)*x5107*x5110)));
j4eval[0]=x5111;
j4eval[1]=IKsign(x5111);
j4eval[2]=((IKabs((((sj0*x5108))+(((-1.0)*r21*sj0*x5109)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5112=cj5*cj5;
IkReal x5113=(cj5*r20);
IkReal x5114=((1.0)*sj5);
IkReal x5115=(r11*r21);
CheckValue<IkReal> x5116 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x5113))+(((-1.0)*r21*sj0*x5114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5116.valid){
continue;
}
CheckValue<IkReal> x5117=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5113*x5114))+(((-1.0)*cj5*r10*r21*x5114))+((r12*r22))+x5115+(((-1.0)*x5112*x5115))+((r10*r20*x5112)))),-1);
if(!x5117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5116.value)+(((1.5707963267949)*(x5117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5118=IKsin(j4);
IkReal x5119=IKcos(j4);
IkReal x5120=(cj5*r00);
IkReal x5121=(r11*sj5);
IkReal x5122=(r01*sj5);
IkReal x5123=(cj5*r20);
IkReal x5124=(r21*sj5);
IkReal x5125=(cj5*r10);
IkReal x5126=((1.0)*x5119);
IkReal x5127=((1.0)*x5118);
evalcond[0]=((((-1.0)*x5124*x5127))+((x5118*x5123))+(((-1.0)*r22*x5126)));
evalcond[1]=(((x5119*x5124))+(((-1.0)*x5123*x5126))+(((-1.0)*r22*x5127)));
evalcond[2]=(sj0+(((-1.0)*x5122*x5127))+(((-1.0)*r02*x5126))+((x5118*x5120)));
evalcond[3]=(((x5119*x5122))+cj0+(((-1.0)*r02*x5127))+(((-1.0)*x5120*x5126)));
evalcond[4]=(sj0+(((-1.0)*x5125*x5126))+((x5119*x5121))+(((-1.0)*r12*x5127)));
evalcond[5]=((((-1.0)*x5121*x5127))+(((-1.0)*r12*x5126))+((x5118*x5125))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5128=cj5*cj5;
IkReal x5129=((1.0)*r21);
IkReal x5130=(cj5*sj5);
CheckValue<IkReal> x5131 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x5129))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5131.valid){
continue;
}
CheckValue<IkReal> x5132=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5129*x5130))+((r01*r21))+(((-1.0)*r01*x5128*x5129))+(((-1.0)*r01*r20*x5130))+((r02*r22))+((r00*r20*x5128)))),-1);
if(!x5132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5131.value)+(((1.5707963267949)*(x5132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5133=IKsin(j4);
IkReal x5134=IKcos(j4);
IkReal x5135=(cj5*r00);
IkReal x5136=(r11*sj5);
IkReal x5137=(r01*sj5);
IkReal x5138=(cj5*r20);
IkReal x5139=(r21*sj5);
IkReal x5140=(cj5*r10);
IkReal x5141=((1.0)*x5134);
IkReal x5142=((1.0)*x5133);
evalcond[0]=((((-1.0)*x5139*x5142))+((x5133*x5138))+(((-1.0)*r22*x5141)));
evalcond[1]=(((x5134*x5139))+(((-1.0)*r22*x5142))+(((-1.0)*x5138*x5141)));
evalcond[2]=(sj0+(((-1.0)*x5137*x5142))+(((-1.0)*r02*x5141))+((x5133*x5135)));
evalcond[3]=(cj0+(((-1.0)*x5135*x5141))+(((-1.0)*r02*x5142))+((x5134*x5137)));
evalcond[4]=(sj0+(((-1.0)*x5140*x5141))+(((-1.0)*r12*x5142))+((x5134*x5136)));
evalcond[5]=((((-1.0)*x5136*x5142))+((x5133*x5140))+(((-1.0)*r12*x5141))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5143=((1.0)*sj5);
CheckValue<IkReal> x5144=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5143)))),-1);
if(!x5144.valid){
continue;
}
CheckValue<IkReal> x5145 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5143))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5144.value)))+(x5145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5146=IKsin(j4);
IkReal x5147=IKcos(j4);
IkReal x5148=(cj5*r00);
IkReal x5149=(r11*sj5);
IkReal x5150=(r01*sj5);
IkReal x5151=(cj5*r20);
IkReal x5152=(r21*sj5);
IkReal x5153=(cj5*r10);
IkReal x5154=((1.0)*x5147);
IkReal x5155=((1.0)*x5146);
evalcond[0]=(((x5146*x5151))+(((-1.0)*r22*x5154))+(((-1.0)*x5152*x5155)));
evalcond[1]=((((-1.0)*x5151*x5154))+(((-1.0)*r22*x5155))+((x5147*x5152)));
evalcond[2]=(sj0+(((-1.0)*x5150*x5155))+((x5146*x5148))+(((-1.0)*r02*x5154)));
evalcond[3]=(cj0+(((-1.0)*x5148*x5154))+((x5147*x5150))+(((-1.0)*r02*x5155)));
evalcond[4]=(((x5147*x5149))+sj0+(((-1.0)*r12*x5155))+(((-1.0)*x5153*x5154)));
evalcond[5]=(((x5146*x5153))+(((-1.0)*r12*x5154))+(((-1.0)*x5149*x5155))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.465585089389861)*px))+(((-1.50324547478535)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.465585089389861)*py))+(((-1.50324547478535)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.465585089389861)*px))+(((-1.50324547478535)*py))))+IKsqr(((((-0.465585089389861)*py))+(((-1.50324547478535)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.465585089389861)*px))+(((-1.50324547478535)*py))), ((((-0.465585089389861)*py))+(((-1.50324547478535)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5156=IKcos(j0);
IkReal x5157=IKsin(j0);
evalcond[0]=((((0.188)*x5157))+(((-0.607)*x5156))+(((-1.0)*px)));
evalcond[1]=((((-0.607)*x5157))+(((-1.0)*py))+(((-0.188)*x5156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5158=((1.0)*sj5);
IkReal x5159=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5158)));
j4eval[0]=x5159;
j4eval[1]=IKsign(x5159);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5158))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5160=((1.0)*sj5);
IkReal x5161=((((-1.0)*r00*x5160))+(((-1.0)*cj5*r01)));
j4eval[0]=x5161;
j4eval[1]=IKsign(x5161);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x5160))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5162=cj5*cj5;
IkReal x5163=((1.0)*r21);
IkReal x5164=(cj5*sj5);
IkReal x5165=((1.0)*r20);
IkReal x5166=((((-1.0)*r01*x5164*x5165))+((r01*r21))+((r00*r20*x5162))+(((-1.0)*r01*x5162*x5163))+((r02*r22))+(((-1.0)*r00*x5163*x5164)));
j4eval[0]=x5166;
j4eval[1]=IKsign(x5166);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*sj0*x5165))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5167=cj5*cj5;
IkReal x5168=((1.0)*r21);
IkReal x5169=(cj5*sj5);
IkReal x5170=((1.0)*r20);
CheckValue<IkReal> x5171=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5167*x5168))+(((-1.0)*r00*x5168*x5169))+((r01*r21))+(((-1.0)*r01*x5169*x5170))+((r00*r20*x5167))+((r02*r22)))),-1);
if(!x5171.valid){
continue;
}
CheckValue<IkReal> x5172 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*sj0*x5170))+((r21*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5171.value)))+(x5172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5173=IKsin(j4);
IkReal x5174=IKcos(j4);
IkReal x5175=((1.0)*cj0);
IkReal x5176=(cj5*r00);
IkReal x5177=(r11*sj5);
IkReal x5178=(r01*sj5);
IkReal x5179=(cj5*r20);
IkReal x5180=(r21*sj5);
IkReal x5181=(cj5*r10);
IkReal x5182=((1.0)*x5174);
IkReal x5183=((1.0)*x5173);
evalcond[0]=((((-1.0)*r22*x5182))+(((-1.0)*x5180*x5183))+((x5173*x5179)));
evalcond[1]=((((-1.0)*r22*x5183))+((x5174*x5180))+(((-1.0)*x5179*x5182)));
evalcond[2]=(sj0+(((-1.0)*r02*x5182))+(((-1.0)*x5178*x5183))+((x5173*x5176)));
evalcond[3]=(((x5173*x5181))+(((-1.0)*x5175))+(((-1.0)*r12*x5182))+(((-1.0)*x5177*x5183)));
evalcond[4]=((((-1.0)*x5176*x5182))+(((-1.0)*r02*x5183))+(((-1.0)*x5175))+((x5174*x5178)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5183))+(((-1.0)*x5181*x5182))+((x5174*x5177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5184=((1.0)*sj5);
CheckValue<IkReal> x5185 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5184))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5185.valid){
continue;
}
CheckValue<IkReal> x5186=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5184))+(((-1.0)*cj5*r01)))),-1);
if(!x5186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5185.value)+(((1.5707963267949)*(x5186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5187=IKsin(j4);
IkReal x5188=IKcos(j4);
IkReal x5189=((1.0)*cj0);
IkReal x5190=(cj5*r00);
IkReal x5191=(r11*sj5);
IkReal x5192=(r01*sj5);
IkReal x5193=(cj5*r20);
IkReal x5194=(r21*sj5);
IkReal x5195=(cj5*r10);
IkReal x5196=((1.0)*x5188);
IkReal x5197=((1.0)*x5187);
evalcond[0]=((((-1.0)*r22*x5196))+(((-1.0)*x5194*x5197))+((x5187*x5193)));
evalcond[1]=(((x5188*x5194))+(((-1.0)*x5193*x5196))+(((-1.0)*r22*x5197)));
evalcond[2]=(sj0+(((-1.0)*x5192*x5197))+(((-1.0)*r02*x5196))+((x5187*x5190)));
evalcond[3]=((((-1.0)*r12*x5196))+(((-1.0)*x5191*x5197))+(((-1.0)*x5189))+((x5187*x5195)));
evalcond[4]=(((x5188*x5192))+(((-1.0)*x5190*x5196))+(((-1.0)*r02*x5197))+(((-1.0)*x5189)));
evalcond[5]=((((-1.0)*r12*x5197))+(((-1.0)*sj0))+((x5188*x5191))+(((-1.0)*x5195*x5196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5198=((1.0)*sj5);
CheckValue<IkReal> x5199=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5198)))),-1);
if(!x5199.valid){
continue;
}
CheckValue<IkReal> x5200 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5199.value)))+(x5200.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5201=IKsin(j4);
IkReal x5202=IKcos(j4);
IkReal x5203=((1.0)*cj0);
IkReal x5204=(cj5*r00);
IkReal x5205=(r11*sj5);
IkReal x5206=(r01*sj5);
IkReal x5207=(cj5*r20);
IkReal x5208=(r21*sj5);
IkReal x5209=(cj5*r10);
IkReal x5210=((1.0)*x5202);
IkReal x5211=((1.0)*x5201);
evalcond[0]=(((x5201*x5207))+(((-1.0)*r22*x5210))+(((-1.0)*x5208*x5211)));
evalcond[1]=(((x5202*x5208))+(((-1.0)*r22*x5211))+(((-1.0)*x5207*x5210)));
evalcond[2]=(sj0+((x5201*x5204))+(((-1.0)*x5206*x5211))+(((-1.0)*r02*x5210)));
evalcond[3]=((((-1.0)*x5203))+((x5201*x5209))+(((-1.0)*x5205*x5211))+(((-1.0)*r12*x5210)));
evalcond[4]=((((-1.0)*x5203))+((x5202*x5206))+(((-1.0)*x5204*x5210))+(((-1.0)*r02*x5211)));
evalcond[5]=((((-1.0)*sj0))+((x5202*x5205))+(((-1.0)*x5209*x5210))+(((-1.0)*r12*x5211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.31914893617021)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.31914893617021)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.31914893617021)*px))+IKsqr(((-5.31914893617021)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.31914893617021)*px), ((-5.31914893617021)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.188)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.188)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5212=((1.0)*sj5);
IkReal x5213=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5212)));
j4eval[0]=x5213;
j4eval[1]=IKsign(x5213);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5212))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5214=cj5*cj5;
IkReal x5215=((1.0)*r21);
IkReal x5216=(cj5*sj5);
IkReal x5217=(((r01*r21))+(((-1.0)*r01*x5214*x5215))+(((-1.0)*r01*r20*x5216))+((r00*r20*x5214))+((r02*r22))+(((-1.0)*r00*x5215*x5216)));
j4eval[0]=x5217;
j4eval[1]=IKsign(x5217);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x5215))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5218=cj5*cj5;
IkReal x5219=(cj5*r20);
IkReal x5220=((1.0)*sj5);
IkReal x5221=(r11*r21);
IkReal x5222=((((-1.0)*r11*x5219*x5220))+x5221+((r12*r22))+((r10*r20*x5218))+(((-1.0)*cj5*r10*r21*x5220))+(((-1.0)*x5218*x5221)));
j4eval[0]=x5222;
j4eval[1]=IKsign(x5222);
j4eval[2]=((IKabs((((sj0*x5219))+(((-1.0)*r21*sj0*x5220)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5223=cj5*cj5;
IkReal x5224=(cj5*r20);
IkReal x5225=((1.0)*sj5);
IkReal x5226=(r11*r21);
CheckValue<IkReal> x5227 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5225))+((sj0*x5224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5227.valid){
continue;
}
CheckValue<IkReal> x5228=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5224*x5225))+x5226+((r12*r22))+((r10*r20*x5223))+(((-1.0)*cj5*r10*r21*x5225))+(((-1.0)*x5223*x5226)))),-1);
if(!x5228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5227.value)+(((1.5707963267949)*(x5228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5229=IKsin(j4);
IkReal x5230=IKcos(j4);
IkReal x5231=(cj5*r00);
IkReal x5232=(r11*sj5);
IkReal x5233=(r01*sj5);
IkReal x5234=(cj5*r20);
IkReal x5235=(r21*sj5);
IkReal x5236=(cj5*r10);
IkReal x5237=((1.0)*x5230);
IkReal x5238=((1.0)*x5229);
evalcond[0]=((((-1.0)*x5235*x5238))+(((-1.0)*r22*x5237))+((x5229*x5234)));
evalcond[1]=((((-1.0)*x5234*x5237))+(((-1.0)*r22*x5238))+((x5230*x5235)));
evalcond[2]=(sj0+(((-1.0)*r02*x5237))+((x5229*x5231))+(((-1.0)*x5233*x5238)));
evalcond[3]=(cj0+(((-1.0)*r02*x5238))+(((-1.0)*x5231*x5237))+((x5230*x5233)));
evalcond[4]=((((-1.0)*x5236*x5237))+sj0+(((-1.0)*r12*x5238))+((x5230*x5232)));
evalcond[5]=((((-1.0)*r12*x5237))+(((-1.0)*x5232*x5238))+((x5229*x5236))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5239=cj5*cj5;
IkReal x5240=((1.0)*r21);
IkReal x5241=(cj5*sj5);
CheckValue<IkReal> x5242 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x5240)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5242.valid){
continue;
}
CheckValue<IkReal> x5243=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5239*x5240))+(((-1.0)*r00*x5240*x5241))+(((-1.0)*r01*r20*x5241))+((r01*r21))+((r00*r20*x5239))+((r02*r22)))),-1);
if(!x5243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5242.value)+(((1.5707963267949)*(x5243.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5244=IKsin(j4);
IkReal x5245=IKcos(j4);
IkReal x5246=(cj5*r00);
IkReal x5247=(r11*sj5);
IkReal x5248=(r01*sj5);
IkReal x5249=(cj5*r20);
IkReal x5250=(r21*sj5);
IkReal x5251=(cj5*r10);
IkReal x5252=((1.0)*x5245);
IkReal x5253=((1.0)*x5244);
evalcond[0]=((((-1.0)*r22*x5252))+(((-1.0)*x5250*x5253))+((x5244*x5249)));
evalcond[1]=(((x5245*x5250))+(((-1.0)*x5249*x5252))+(((-1.0)*r22*x5253)));
evalcond[2]=(sj0+(((-1.0)*x5248*x5253))+(((-1.0)*r02*x5252))+((x5244*x5246)));
evalcond[3]=(((x5245*x5248))+(((-1.0)*r02*x5253))+cj0+(((-1.0)*x5246*x5252)));
evalcond[4]=(((x5245*x5247))+sj0+(((-1.0)*r12*x5253))+(((-1.0)*x5251*x5252)));
evalcond[5]=((((-1.0)*r12*x5252))+((x5244*x5251))+(((-1.0)*x5247*x5253))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5254=((1.0)*sj5);
CheckValue<IkReal> x5255 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5255.valid){
continue;
}
CheckValue<IkReal> x5256=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5254)))),-1);
if(!x5256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5255.value)+(((1.5707963267949)*(x5256.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5257=IKsin(j4);
IkReal x5258=IKcos(j4);
IkReal x5259=(cj5*r00);
IkReal x5260=(r11*sj5);
IkReal x5261=(r01*sj5);
IkReal x5262=(cj5*r20);
IkReal x5263=(r21*sj5);
IkReal x5264=(cj5*r10);
IkReal x5265=((1.0)*x5258);
IkReal x5266=((1.0)*x5257);
evalcond[0]=((((-1.0)*x5263*x5266))+(((-1.0)*r22*x5265))+((x5257*x5262)));
evalcond[1]=((((-1.0)*r22*x5266))+(((-1.0)*x5262*x5265))+((x5258*x5263)));
evalcond[2]=(sj0+(((-1.0)*r02*x5265))+((x5257*x5259))+(((-1.0)*x5261*x5266)));
evalcond[3]=((((-1.0)*x5259*x5265))+cj0+(((-1.0)*r02*x5266))+((x5258*x5261)));
evalcond[4]=((((-1.0)*x5264*x5265))+sj0+(((-1.0)*r12*x5266))+((x5258*x5260)));
evalcond[5]=((((-1.0)*r12*x5265))+((x5257*x5264))+(((-1.0)*x5260*x5266))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.31914893617021)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.31914893617021)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.31914893617021)*px))+IKsqr(((-5.31914893617021)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.31914893617021)*px), ((-5.31914893617021)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.188)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.188)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5267=((1.0)*sj5);
IkReal x5268=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5267)));
j4eval[0]=x5268;
j4eval[1]=IKsign(x5268);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5267))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5269=((1.0)*sj5);
IkReal x5270=((((-1.0)*r00*x5269))+(((-1.0)*cj5*r01)));
j4eval[0]=x5270;
j4eval[1]=IKsign(x5270);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5269))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5271=cj5*cj5;
IkReal x5272=((1.0)*r21);
IkReal x5273=(cj5*sj5);
IkReal x5274=((1.0)*r20);
IkReal x5275=((((-1.0)*r00*x5272*x5273))+((r01*r21))+(((-1.0)*r01*x5273*x5274))+((r02*r22))+((r00*r20*x5271))+(((-1.0)*r01*x5271*x5272)));
j4eval[0]=x5275;
j4eval[1]=IKsign(x5275);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5274))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5276=cj5*cj5;
IkReal x5277=((1.0)*r21);
IkReal x5278=(cj5*sj5);
IkReal x5279=((1.0)*r20);
CheckValue<IkReal> x5280 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5279)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5280.valid){
continue;
}
CheckValue<IkReal> x5281=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5278*x5279))+((r01*r21))+(((-1.0)*r01*x5276*x5277))+(((-1.0)*r00*x5277*x5278))+((r02*r22))+((r00*r20*x5276)))),-1);
if(!x5281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5280.value)+(((1.5707963267949)*(x5281.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5282=IKsin(j4);
IkReal x5283=IKcos(j4);
IkReal x5284=((1.0)*cj0);
IkReal x5285=(cj5*r00);
IkReal x5286=(r11*sj5);
IkReal x5287=(r01*sj5);
IkReal x5288=(cj5*r20);
IkReal x5289=(r21*sj5);
IkReal x5290=(cj5*r10);
IkReal x5291=((1.0)*x5283);
IkReal x5292=((1.0)*x5282);
evalcond[0]=((((-1.0)*x5289*x5292))+(((-1.0)*r22*x5291))+((x5282*x5288)));
evalcond[1]=((((-1.0)*r22*x5292))+(((-1.0)*x5288*x5291))+((x5283*x5289)));
evalcond[2]=((((-1.0)*x5287*x5292))+sj0+((x5282*x5285))+(((-1.0)*r02*x5291)));
evalcond[3]=((((-1.0)*x5286*x5292))+(((-1.0)*x5284))+(((-1.0)*r12*x5291))+((x5282*x5290)));
evalcond[4]=((((-1.0)*x5285*x5291))+(((-1.0)*x5284))+((x5283*x5287))+(((-1.0)*r02*x5292)));
evalcond[5]=((((-1.0)*sj0))+((x5283*x5286))+(((-1.0)*r12*x5292))+(((-1.0)*x5290*x5291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5293=((1.0)*sj5);
CheckValue<IkReal> x5294=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5293))+(((-1.0)*cj5*r01)))),-1);
if(!x5294.valid){
continue;
}
CheckValue<IkReal> x5295 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5293))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5294.value)))+(x5295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5296=IKsin(j4);
IkReal x5297=IKcos(j4);
IkReal x5298=((1.0)*cj0);
IkReal x5299=(cj5*r00);
IkReal x5300=(r11*sj5);
IkReal x5301=(r01*sj5);
IkReal x5302=(cj5*r20);
IkReal x5303=(r21*sj5);
IkReal x5304=(cj5*r10);
IkReal x5305=((1.0)*x5297);
IkReal x5306=((1.0)*x5296);
evalcond[0]=((((-1.0)*r22*x5305))+(((-1.0)*x5303*x5306))+((x5296*x5302)));
evalcond[1]=((((-1.0)*r22*x5306))+((x5297*x5303))+(((-1.0)*x5302*x5305)));
evalcond[2]=(sj0+(((-1.0)*x5301*x5306))+(((-1.0)*r02*x5305))+((x5296*x5299)));
evalcond[3]=((((-1.0)*r12*x5305))+(((-1.0)*x5300*x5306))+(((-1.0)*x5298))+((x5296*x5304)));
evalcond[4]=(((x5297*x5301))+(((-1.0)*x5298))+(((-1.0)*r02*x5306))+(((-1.0)*x5299*x5305)));
evalcond[5]=((((-1.0)*sj0))+((x5297*x5300))+(((-1.0)*r12*x5306))+(((-1.0)*x5304*x5305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5307=((1.0)*sj5);
CheckValue<IkReal> x5308=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5307)))),-1);
if(!x5308.valid){
continue;
}
CheckValue<IkReal> x5309 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5307)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5308.value)))+(x5309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5310=IKsin(j4);
IkReal x5311=IKcos(j4);
IkReal x5312=((1.0)*cj0);
IkReal x5313=(cj5*r00);
IkReal x5314=(r11*sj5);
IkReal x5315=(r01*sj5);
IkReal x5316=(cj5*r20);
IkReal x5317=(r21*sj5);
IkReal x5318=(cj5*r10);
IkReal x5319=((1.0)*x5311);
IkReal x5320=((1.0)*x5310);
evalcond[0]=((((-1.0)*x5317*x5320))+((x5310*x5316))+(((-1.0)*r22*x5319)));
evalcond[1]=((((-1.0)*r22*x5320))+((x5311*x5317))+(((-1.0)*x5316*x5319)));
evalcond[2]=(sj0+(((-1.0)*x5315*x5320))+((x5310*x5313))+(((-1.0)*r02*x5319)));
evalcond[3]=((((-1.0)*r12*x5319))+(((-1.0)*x5312))+((x5310*x5318))+(((-1.0)*x5314*x5320)));
evalcond[4]=((((-1.0)*x5312))+(((-1.0)*r02*x5320))+(((-1.0)*x5313*x5319))+((x5311*x5315)));
evalcond[5]=((((-1.0)*sj0))+((x5311*x5314))+(((-1.0)*r12*x5320))+(((-1.0)*x5318*x5319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.50324547478535)*py))+(((0.465585089389861)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.50324547478535)*px))+(((-0.465585089389861)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.50324547478535)*py))+(((0.465585089389861)*px))))+IKsqr(((((1.50324547478535)*px))+(((-0.465585089389861)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.50324547478535)*py))+(((0.465585089389861)*px))), ((((1.50324547478535)*px))+(((-0.465585089389861)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5321=IKsin(j0);
IkReal x5322=IKcos(j0);
evalcond[0]=((((0.188)*x5321))+(((0.607)*x5322))+(((-1.0)*px)));
evalcond[1]=((((-0.188)*x5322))+(((0.607)*x5321))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5323=((1.0)*sj5);
IkReal x5324=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5323)));
j4eval[0]=x5324;
j4eval[1]=IKsign(x5324);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5323))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5325=((1.0)*sj5);
IkReal x5326=((((-1.0)*cj5*r01))+(((-1.0)*r00*x5325)));
j4eval[0]=x5326;
j4eval[1]=IKsign(x5326);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5325))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5327=cj5*cj5;
IkReal x5328=((1.0)*r21);
IkReal x5329=(cj5*sj5);
IkReal x5330=((1.0)*r20);
IkReal x5331=(((r00*r20*x5327))+((r01*r21))+(((-1.0)*r01*x5327*x5328))+(((-1.0)*r01*x5329*x5330))+((r02*r22))+(((-1.0)*r00*x5328*x5329)));
j4eval[0]=x5331;
j4eval[1]=IKsign(x5331);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5330)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5332=cj5*cj5;
IkReal x5333=((1.0)*r21);
IkReal x5334=(cj5*sj5);
IkReal x5335=((1.0)*r20);
CheckValue<IkReal> x5336=IKPowWithIntegerCheck(IKsign((((r00*r20*x5332))+((r01*r21))+(((-1.0)*r01*x5332*x5333))+(((-1.0)*r00*x5333*x5334))+(((-1.0)*r01*x5334*x5335))+((r02*r22)))),-1);
if(!x5336.valid){
continue;
}
CheckValue<IkReal> x5337 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5335)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5336.value)))+(x5337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5338=IKsin(j4);
IkReal x5339=IKcos(j4);
IkReal x5340=((1.0)*cj0);
IkReal x5341=(cj5*r00);
IkReal x5342=(r11*sj5);
IkReal x5343=(r01*sj5);
IkReal x5344=(cj5*r20);
IkReal x5345=(r21*sj5);
IkReal x5346=(cj5*r10);
IkReal x5347=((1.0)*x5339);
IkReal x5348=((1.0)*x5338);
evalcond[0]=((((-1.0)*x5345*x5348))+((x5338*x5344))+(((-1.0)*r22*x5347)));
evalcond[1]=((((-1.0)*x5344*x5347))+((x5339*x5345))+(((-1.0)*r22*x5348)));
evalcond[2]=((((-1.0)*r02*x5347))+sj0+((x5338*x5341))+(((-1.0)*x5343*x5348)));
evalcond[3]=((((-1.0)*x5340))+((x5338*x5346))+(((-1.0)*r12*x5347))+(((-1.0)*x5342*x5348)));
evalcond[4]=((((-1.0)*r02*x5348))+(((-1.0)*x5340))+((x5339*x5343))+(((-1.0)*x5341*x5347)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5346*x5347))+(((-1.0)*r12*x5348))+((x5339*x5342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5349=((1.0)*sj5);
CheckValue<IkReal> x5350 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5350.valid){
continue;
}
CheckValue<IkReal> x5351=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5349))+(((-1.0)*cj5*r01)))),-1);
if(!x5351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5350.value)+(((1.5707963267949)*(x5351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5352=IKsin(j4);
IkReal x5353=IKcos(j4);
IkReal x5354=((1.0)*cj0);
IkReal x5355=(cj5*r00);
IkReal x5356=(r11*sj5);
IkReal x5357=(r01*sj5);
IkReal x5358=(cj5*r20);
IkReal x5359=(r21*sj5);
IkReal x5360=(cj5*r10);
IkReal x5361=((1.0)*x5353);
IkReal x5362=((1.0)*x5352);
evalcond[0]=((((-1.0)*r22*x5361))+((x5352*x5358))+(((-1.0)*x5359*x5362)));
evalcond[1]=((((-1.0)*r22*x5362))+((x5353*x5359))+(((-1.0)*x5358*x5361)));
evalcond[2]=(sj0+((x5352*x5355))+(((-1.0)*r02*x5361))+(((-1.0)*x5357*x5362)));
evalcond[3]=((((-1.0)*x5354))+(((-1.0)*x5356*x5362))+(((-1.0)*r12*x5361))+((x5352*x5360)));
evalcond[4]=((((-1.0)*x5354))+((x5353*x5357))+(((-1.0)*r02*x5362))+(((-1.0)*x5355*x5361)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5360*x5361))+((x5353*x5356))+(((-1.0)*r12*x5362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5363=((1.0)*sj5);
CheckValue<IkReal> x5364 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5364.valid){
continue;
}
CheckValue<IkReal> x5365=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5363)))),-1);
if(!x5365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5364.value)+(((1.5707963267949)*(x5365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5366=IKsin(j4);
IkReal x5367=IKcos(j4);
IkReal x5368=((1.0)*cj0);
IkReal x5369=(cj5*r00);
IkReal x5370=(r11*sj5);
IkReal x5371=(r01*sj5);
IkReal x5372=(cj5*r20);
IkReal x5373=(r21*sj5);
IkReal x5374=(cj5*r10);
IkReal x5375=((1.0)*x5367);
IkReal x5376=((1.0)*x5366);
evalcond[0]=((((-1.0)*r22*x5375))+(((-1.0)*x5373*x5376))+((x5366*x5372)));
evalcond[1]=((((-1.0)*r22*x5376))+(((-1.0)*x5372*x5375))+((x5367*x5373)));
evalcond[2]=(sj0+(((-1.0)*x5371*x5376))+(((-1.0)*r02*x5375))+((x5366*x5369)));
evalcond[3]=((((-1.0)*r12*x5375))+(((-1.0)*x5370*x5376))+((x5366*x5374))+(((-1.0)*x5368)));
evalcond[4]=(((x5367*x5371))+(((-1.0)*r02*x5376))+(((-1.0)*x5368))+(((-1.0)*x5369*x5375)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5376))+((x5367*x5370))+(((-1.0)*x5374*x5375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.50324547478535)*py))+(((0.465585089389861)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.50324547478535)*px))+(((-0.465585089389861)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.50324547478535)*py))+(((0.465585089389861)*px))))+IKsqr(((((1.50324547478535)*px))+(((-0.465585089389861)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.50324547478535)*py))+(((0.465585089389861)*px))), ((((1.50324547478535)*px))+(((-0.465585089389861)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5377=IKsin(j0);
IkReal x5378=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.607)*x5378))+(((0.188)*x5377)));
evalcond[1]=((((-1.0)*py))+(((-0.188)*x5378))+(((0.607)*x5377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5379=((1.0)*sj5);
IkReal x5380=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5379)));
j4eval[0]=x5380;
j4eval[1]=IKsign(x5380);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5379))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5381=cj5*cj5;
IkReal x5382=((1.0)*r21);
IkReal x5383=(cj5*sj5);
IkReal x5384=((((-1.0)*r01*r20*x5383))+(((-1.0)*r01*x5381*x5382))+((r00*r20*x5381))+(((-1.0)*r00*x5382*x5383))+((r01*r21))+((r02*r22)));
j4eval[0]=x5384;
j4eval[1]=IKsign(x5384);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x5382))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5385=cj5*cj5;
IkReal x5386=(cj5*r20);
IkReal x5387=((1.0)*sj5);
IkReal x5388=(r11*r21);
IkReal x5389=((((-1.0)*r11*x5386*x5387))+x5388+((r12*r22))+((r10*r20*x5385))+(((-1.0)*cj5*r10*r21*x5387))+(((-1.0)*x5385*x5388)));
j4eval[0]=x5389;
j4eval[1]=IKsign(x5389);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x5386))+(((-1.0)*r21*sj0*x5387))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5390=cj5*cj5;
IkReal x5391=(cj5*r20);
IkReal x5392=((1.0)*sj5);
IkReal x5393=(r11*r21);
CheckValue<IkReal> x5394 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5392))+((sj0*x5391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5394.valid){
continue;
}
CheckValue<IkReal> x5395=IKPowWithIntegerCheck(IKsign((x5393+(((-1.0)*x5390*x5393))+(((-1.0)*r11*x5391*x5392))+((r12*r22))+((r10*r20*x5390))+(((-1.0)*cj5*r10*r21*x5392)))),-1);
if(!x5395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5394.value)+(((1.5707963267949)*(x5395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5396=IKsin(j4);
IkReal x5397=IKcos(j4);
IkReal x5398=(cj5*r00);
IkReal x5399=(r11*sj5);
IkReal x5400=(r01*sj5);
IkReal x5401=(cj5*r20);
IkReal x5402=(r21*sj5);
IkReal x5403=(cj5*r10);
IkReal x5404=((1.0)*x5397);
IkReal x5405=((1.0)*x5396);
evalcond[0]=((((-1.0)*x5402*x5405))+(((-1.0)*r22*x5404))+((x5396*x5401)));
evalcond[1]=((((-1.0)*r22*x5405))+((x5397*x5402))+(((-1.0)*x5401*x5404)));
evalcond[2]=((((-1.0)*x5400*x5405))+sj0+(((-1.0)*r02*x5404))+((x5396*x5398)));
evalcond[3]=(cj0+(((-1.0)*x5398*x5404))+(((-1.0)*r02*x5405))+((x5397*x5400)));
evalcond[4]=(sj0+(((-1.0)*x5403*x5404))+(((-1.0)*r12*x5405))+((x5397*x5399)));
evalcond[5]=((((-1.0)*x5399*x5405))+(((-1.0)*r12*x5404))+((x5396*x5403))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5406=cj5*cj5;
IkReal x5407=((1.0)*r21);
IkReal x5408=(cj5*sj5);
CheckValue<IkReal> x5409 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x5407)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5409.valid){
continue;
}
CheckValue<IkReal> x5410=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x5406*x5407))+(((-1.0)*r01*r20*x5408))+(((-1.0)*r00*x5407*x5408))+((r02*r22))+((r00*r20*x5406)))),-1);
if(!x5410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5409.value)+(((1.5707963267949)*(x5410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5411=IKsin(j4);
IkReal x5412=IKcos(j4);
IkReal x5413=(cj5*r00);
IkReal x5414=(r11*sj5);
IkReal x5415=(r01*sj5);
IkReal x5416=(cj5*r20);
IkReal x5417=(r21*sj5);
IkReal x5418=(cj5*r10);
IkReal x5419=((1.0)*x5412);
IkReal x5420=((1.0)*x5411);
evalcond[0]=((((-1.0)*x5417*x5420))+((x5411*x5416))+(((-1.0)*r22*x5419)));
evalcond[1]=((((-1.0)*x5416*x5419))+((x5412*x5417))+(((-1.0)*r22*x5420)));
evalcond[2]=((((-1.0)*r02*x5419))+sj0+(((-1.0)*x5415*x5420))+((x5411*x5413)));
evalcond[3]=(cj0+((x5412*x5415))+(((-1.0)*r02*x5420))+(((-1.0)*x5413*x5419)));
evalcond[4]=(sj0+((x5412*x5414))+(((-1.0)*x5418*x5419))+(((-1.0)*r12*x5420)));
evalcond[5]=((((-1.0)*x5414*x5420))+((x5411*x5418))+(((-1.0)*r12*x5419))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5421=((1.0)*sj5);
CheckValue<IkReal> x5422 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5422.valid){
continue;
}
CheckValue<IkReal> x5423=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5421)))),-1);
if(!x5423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5422.value)+(((1.5707963267949)*(x5423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5424=IKsin(j4);
IkReal x5425=IKcos(j4);
IkReal x5426=(cj5*r00);
IkReal x5427=(r11*sj5);
IkReal x5428=(r01*sj5);
IkReal x5429=(cj5*r20);
IkReal x5430=(r21*sj5);
IkReal x5431=(cj5*r10);
IkReal x5432=((1.0)*x5425);
IkReal x5433=((1.0)*x5424);
evalcond[0]=(((x5424*x5429))+(((-1.0)*r22*x5432))+(((-1.0)*x5430*x5433)));
evalcond[1]=(((x5425*x5430))+(((-1.0)*x5429*x5432))+(((-1.0)*r22*x5433)));
evalcond[2]=((((-1.0)*x5428*x5433))+sj0+(((-1.0)*r02*x5432))+((x5424*x5426)));
evalcond[3]=((((-1.0)*x5426*x5432))+cj0+(((-1.0)*r02*x5433))+((x5425*x5428)));
evalcond[4]=(sj0+(((-1.0)*x5431*x5432))+(((-1.0)*r12*x5433))+((x5425*x5427)));
evalcond[5]=((((-1.0)*x5427*x5433))+((x5424*x5431))+(((-1.0)*r12*x5432))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.31914893617021)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.31914893617021)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.31914893617021)*px))+IKsqr(((-5.31914893617021)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.31914893617021)*px), ((-5.31914893617021)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.188)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.188)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5434=((1.0)*sj5);
IkReal x5435=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5434)));
j4eval[0]=x5435;
j4eval[1]=IKsign(x5435);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5434)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5436=((1.0)*sj5);
IkReal x5437=((((-1.0)*r00*x5436))+(((-1.0)*cj5*r01)));
j4eval[0]=x5437;
j4eval[1]=IKsign(x5437);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5436)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5438=cj5*cj5;
IkReal x5439=((1.0)*r21);
IkReal x5440=(cj5*sj5);
IkReal x5441=((1.0)*r20);
IkReal x5442=(((r01*r21))+(((-1.0)*r00*x5439*x5440))+(((-1.0)*r01*x5438*x5439))+(((-1.0)*r01*x5440*x5441))+((r02*r22))+((r00*r20*x5438)));
j4eval[0]=x5442;
j4eval[1]=IKsign(x5442);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5441))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5443=cj5*cj5;
IkReal x5444=((1.0)*r21);
IkReal x5445=(cj5*sj5);
IkReal x5446=((1.0)*r20);
CheckValue<IkReal> x5447=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5443*x5444))+((r01*r21))+(((-1.0)*r01*x5445*x5446))+((r00*r20*x5443))+(((-1.0)*r00*x5444*x5445))+((r02*r22)))),-1);
if(!x5447.valid){
continue;
}
CheckValue<IkReal> x5448 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x5446)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5447.value)))+(x5448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5449=IKsin(j4);
IkReal x5450=IKcos(j4);
IkReal x5451=((1.0)*cj0);
IkReal x5452=(cj5*r00);
IkReal x5453=(r11*sj5);
IkReal x5454=(r01*sj5);
IkReal x5455=(cj5*r20);
IkReal x5456=(r21*sj5);
IkReal x5457=(cj5*r10);
IkReal x5458=((1.0)*x5450);
IkReal x5459=((1.0)*x5449);
evalcond[0]=((((-1.0)*x5456*x5459))+(((-1.0)*r22*x5458))+((x5449*x5455)));
evalcond[1]=((((-1.0)*x5455*x5458))+((x5450*x5456))+(((-1.0)*r22*x5459)));
evalcond[2]=(sj0+(((-1.0)*x5454*x5459))+(((-1.0)*r02*x5458))+((x5449*x5452)));
evalcond[3]=((((-1.0)*r12*x5458))+((x5449*x5457))+(((-1.0)*x5453*x5459))+(((-1.0)*x5451)));
evalcond[4]=((((-1.0)*x5452*x5458))+((x5450*x5454))+(((-1.0)*r02*x5459))+(((-1.0)*x5451)));
evalcond[5]=((((-1.0)*r12*x5459))+(((-1.0)*sj0))+(((-1.0)*x5457*x5458))+((x5450*x5453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5460=((1.0)*sj5);
CheckValue<IkReal> x5461=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x5460)))),-1);
if(!x5461.valid){
continue;
}
CheckValue<IkReal> x5462 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x5460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5461.value)))+(x5462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5463=IKsin(j4);
IkReal x5464=IKcos(j4);
IkReal x5465=((1.0)*cj0);
IkReal x5466=(cj5*r00);
IkReal x5467=(r11*sj5);
IkReal x5468=(r01*sj5);
IkReal x5469=(cj5*r20);
IkReal x5470=(r21*sj5);
IkReal x5471=(cj5*r10);
IkReal x5472=((1.0)*x5464);
IkReal x5473=((1.0)*x5463);
evalcond[0]=((((-1.0)*x5470*x5473))+((x5463*x5469))+(((-1.0)*r22*x5472)));
evalcond[1]=(((x5464*x5470))+(((-1.0)*r22*x5473))+(((-1.0)*x5469*x5472)));
evalcond[2]=((((-1.0)*x5468*x5473))+sj0+((x5463*x5466))+(((-1.0)*r02*x5472)));
evalcond[3]=(((x5463*x5471))+(((-1.0)*x5467*x5473))+(((-1.0)*r12*x5472))+(((-1.0)*x5465)));
evalcond[4]=((((-1.0)*x5466*x5472))+(((-1.0)*r02*x5473))+(((-1.0)*x5465))+((x5464*x5468)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5473))+(((-1.0)*x5471*x5472))+((x5464*x5467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5474=((1.0)*sj5);
CheckValue<IkReal> x5475=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5474)))),-1);
if(!x5475.valid){
continue;
}
CheckValue<IkReal> x5476 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5474)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5475.value)))+(x5476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5477=IKsin(j4);
IkReal x5478=IKcos(j4);
IkReal x5479=((1.0)*cj0);
IkReal x5480=(cj5*r00);
IkReal x5481=(r11*sj5);
IkReal x5482=(r01*sj5);
IkReal x5483=(cj5*r20);
IkReal x5484=(r21*sj5);
IkReal x5485=(cj5*r10);
IkReal x5486=((1.0)*x5478);
IkReal x5487=((1.0)*x5477);
evalcond[0]=(((x5477*x5483))+(((-1.0)*x5484*x5487))+(((-1.0)*r22*x5486)));
evalcond[1]=((((-1.0)*x5483*x5486))+(((-1.0)*r22*x5487))+((x5478*x5484)));
evalcond[2]=(((x5477*x5480))+sj0+(((-1.0)*r02*x5486))+(((-1.0)*x5482*x5487)));
evalcond[3]=((((-1.0)*x5481*x5487))+((x5477*x5485))+(((-1.0)*r12*x5486))+(((-1.0)*x5479)));
evalcond[4]=((((-1.0)*x5479))+((x5478*x5482))+(((-1.0)*x5480*x5486))+(((-1.0)*r02*x5487)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5487))+(((-1.0)*x5485*x5486))+((x5478*x5481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.31914893617021)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.31914893617021)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.31914893617021)*px))+IKsqr(((-5.31914893617021)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.31914893617021)*px), ((-5.31914893617021)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.188)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.188)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5488=((1.0)*sj5);
IkReal x5489=((((-1.0)*r10*x5488))+(((-1.0)*cj5*r11)));
j4eval[0]=x5489;
j4eval[1]=IKsign(x5489);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5488))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5490=cj5*cj5;
IkReal x5491=((1.0)*r21);
IkReal x5492=(cj5*sj5);
IkReal x5493=((((-1.0)*r01*r20*x5492))+(((-1.0)*r00*x5491*x5492))+(((-1.0)*r01*x5490*x5491))+((r01*r21))+((r00*r20*x5490))+((r02*r22)));
j4eval[0]=x5493;
j4eval[1]=IKsign(x5493);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x5491))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5494=cj5*cj5;
IkReal x5495=(cj5*r20);
IkReal x5496=((1.0)*sj5);
IkReal x5497=(r11*r21);
IkReal x5498=((((-1.0)*r11*x5495*x5496))+x5497+((r12*r22))+(((-1.0)*cj5*r10*r21*x5496))+(((-1.0)*x5494*x5497))+((r10*r20*x5494)));
j4eval[0]=x5498;
j4eval[1]=IKsign(x5498);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x5496))+((sj0*x5495))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5499=cj5*cj5;
IkReal x5500=(cj5*r20);
IkReal x5501=((1.0)*sj5);
IkReal x5502=(r11*r21);
CheckValue<IkReal> x5503 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x5500))+(((-1.0)*r21*sj0*x5501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5503.valid){
continue;
}
CheckValue<IkReal> x5504=IKPowWithIntegerCheck(IKsign((x5502+(((-1.0)*r11*x5500*x5501))+(((-1.0)*x5499*x5502))+(((-1.0)*cj5*r10*r21*x5501))+((r12*r22))+((r10*r20*x5499)))),-1);
if(!x5504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5503.value)+(((1.5707963267949)*(x5504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5505=IKsin(j4);
IkReal x5506=IKcos(j4);
IkReal x5507=(cj5*r00);
IkReal x5508=(r11*sj5);
IkReal x5509=(r01*sj5);
IkReal x5510=(cj5*r20);
IkReal x5511=(r21*sj5);
IkReal x5512=(cj5*r10);
IkReal x5513=((1.0)*x5506);
IkReal x5514=((1.0)*x5505);
evalcond[0]=((((-1.0)*r22*x5513))+(((-1.0)*x5511*x5514))+((x5505*x5510)));
evalcond[1]=((((-1.0)*x5510*x5513))+(((-1.0)*r22*x5514))+((x5506*x5511)));
evalcond[2]=(sj0+(((-1.0)*r02*x5513))+((x5505*x5507))+(((-1.0)*x5509*x5514)));
evalcond[3]=(cj0+(((-1.0)*r02*x5514))+(((-1.0)*x5507*x5513))+((x5506*x5509)));
evalcond[4]=((((-1.0)*x5512*x5513))+sj0+(((-1.0)*r12*x5514))+((x5506*x5508)));
evalcond[5]=((((-1.0)*r12*x5513))+(((-1.0)*x5508*x5514))+((x5505*x5512))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5515=cj5*cj5;
IkReal x5516=((1.0)*r21);
IkReal x5517=(cj5*sj5);
CheckValue<IkReal> x5518 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x5516))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5518.valid){
continue;
}
CheckValue<IkReal> x5519=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5516*x5517))+(((-1.0)*r01*r20*x5517))+((r01*r21))+((r00*r20*x5515))+((r02*r22))+(((-1.0)*r01*x5515*x5516)))),-1);
if(!x5519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5518.value)+(((1.5707963267949)*(x5519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5520=IKsin(j4);
IkReal x5521=IKcos(j4);
IkReal x5522=(cj5*r00);
IkReal x5523=(r11*sj5);
IkReal x5524=(r01*sj5);
IkReal x5525=(cj5*r20);
IkReal x5526=(r21*sj5);
IkReal x5527=(cj5*r10);
IkReal x5528=((1.0)*x5521);
IkReal x5529=((1.0)*x5520);
evalcond[0]=((((-1.0)*r22*x5528))+((x5520*x5525))+(((-1.0)*x5526*x5529)));
evalcond[1]=((((-1.0)*r22*x5529))+((x5521*x5526))+(((-1.0)*x5525*x5528)));
evalcond[2]=(sj0+(((-1.0)*r02*x5528))+((x5520*x5522))+(((-1.0)*x5524*x5529)));
evalcond[3]=(((x5521*x5524))+cj0+(((-1.0)*r02*x5529))+(((-1.0)*x5522*x5528)));
evalcond[4]=(((x5521*x5523))+(((-1.0)*x5527*x5528))+sj0+(((-1.0)*r12*x5529)));
evalcond[5]=((((-1.0)*x5523*x5529))+((x5520*x5527))+(((-1.0)*r12*x5528))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5530=((1.0)*sj5);
CheckValue<IkReal> x5531=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5530)))),-1);
if(!x5531.valid){
continue;
}
CheckValue<IkReal> x5532 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5531.value)))+(x5532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5533=IKsin(j4);
IkReal x5534=IKcos(j4);
IkReal x5535=(cj5*r00);
IkReal x5536=(r11*sj5);
IkReal x5537=(r01*sj5);
IkReal x5538=(cj5*r20);
IkReal x5539=(r21*sj5);
IkReal x5540=(cj5*r10);
IkReal x5541=((1.0)*x5534);
IkReal x5542=((1.0)*x5533);
evalcond[0]=((((-1.0)*x5539*x5542))+(((-1.0)*r22*x5541))+((x5533*x5538)));
evalcond[1]=((((-1.0)*x5538*x5541))+((x5534*x5539))+(((-1.0)*r22*x5542)));
evalcond[2]=(sj0+(((-1.0)*x5537*x5542))+(((-1.0)*r02*x5541))+((x5533*x5535)));
evalcond[3]=(cj0+((x5534*x5537))+(((-1.0)*r02*x5542))+(((-1.0)*x5535*x5541)));
evalcond[4]=(sj0+((x5534*x5536))+(((-1.0)*x5540*x5541))+(((-1.0)*r12*x5542)));
evalcond[5]=(((x5533*x5540))+(((-1.0)*x5536*x5542))+(((-1.0)*r12*x5541))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5543=(cj1*cj2);
IkReal x5544=((250.0)*px);
IkReal x5545=(cj5*r01);
IkReal x5546=(sj1*sj2);
IkReal x5547=((151.75)*cj1);
IkReal x5548=(r00*sj5);
CheckValue<IkReal> x5549=IKPowWithIntegerCheck(((((47.0)*x5546))+(((-47.0)*x5543))),-1);
if(!x5549.valid){
continue;
}
CheckValue<IkReal> x5550=IKPowWithIntegerCheck((x5546+(((-1.0)*x5543))),-1);
if(!x5550.valid){
continue;
}
if( IKabs(((x5549.value)*(((((109.75)*x5545*x5546))+(((-1.0)*x5543*x5544))+(((-1.0)*x5545*x5547))+(((109.75)*x5546*x5548))+(((-109.75)*x5543*x5548))+(((-109.75)*x5543*x5545))+((x5544*x5546))+(((-1.0)*x5547*x5548)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5550.value)*(((((-1.0)*x5545))+(((-1.0)*x5548)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5549.value)*(((((109.75)*x5545*x5546))+(((-1.0)*x5543*x5544))+(((-1.0)*x5545*x5547))+(((109.75)*x5546*x5548))+(((-109.75)*x5543*x5548))+(((-109.75)*x5543*x5545))+((x5544*x5546))+(((-1.0)*x5547*x5548))))))+IKsqr(((x5550.value)*(((((-1.0)*x5545))+(((-1.0)*x5548))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5549.value)*(((((109.75)*x5545*x5546))+(((-1.0)*x5543*x5544))+(((-1.0)*x5545*x5547))+(((109.75)*x5546*x5548))+(((-109.75)*x5543*x5548))+(((-109.75)*x5543*x5545))+((x5544*x5546))+(((-1.0)*x5547*x5548))))), ((x5550.value)*(((((-1.0)*x5545))+(((-1.0)*x5548))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5551=IKcos(j0);
IkReal x5552=IKsin(j0);
IkReal x5553=(cj5*r01);
IkReal x5554=(r00*sj5);
IkReal x5555=(sj1*sj2);
IkReal x5556=(cj5*r11);
IkReal x5557=(r10*sj5);
IkReal x5558=(cj1*cj2);
IkReal x5559=(cj1*x5551);
IkReal x5560=((0.566)*x5552);
evalcond[0]=(x5554+x5553+((x5551*x5555))+(((-1.0)*x5551*x5558)));
evalcond[1]=(x5557+x5556+((x5552*x5555))+(((-1.0)*x5552*x5558)));
evalcond[2]=((((-0.566)*x5551*x5558))+(((0.127)*x5553))+(((0.127)*x5554))+(((-0.607)*x5559))+(((0.188)*x5552))+(((0.566)*x5551*x5555))+(((-1.0)*px)));
evalcond[3]=((((-0.188)*x5551))+(((-0.607)*cj1*x5552))+(((0.127)*x5556))+(((0.127)*x5557))+((x5555*x5560))+(((-1.0)*py))+(((-1.0)*x5558*x5560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5561=((1.0)*sj5);
IkReal x5562=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5561)));
j4eval[0]=x5562;
j4eval[1]=IKsign(x5562);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5561))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5563=((1.0)*sj5);
IkReal x5564=((((-1.0)*r00*x5563))+(((-1.0)*cj5*r01)));
j4eval[0]=x5564;
j4eval[1]=IKsign(x5564);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x5563))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5565=((1.0)*sj5);
IkReal x5566=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5566;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x5565))+(((-1.0)*r11*sj0*x5565))))));
j4eval[2]=IKsign(x5566);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5568 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5568)==0){
continue;
}
IkReal x5567=pow(x5568,-0.5);
CheckValue<IkReal> x5569 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5569.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5569.value));
IkReal gconst115=((-1.0)*r21*x5567);
IkReal gconst116=(r20*x5567);
CheckValue<IkReal> x5570 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5570.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5570.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5573 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5573.valid){
continue;
}
IkReal x5571=((-1.0)*(x5573.value));
IkReal x5572=x5567;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5571;
IkReal gconst114=x5571;
IkReal gconst115=((-1.0)*r21*x5572);
IkReal gconst116=(r20*x5572);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5576 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5576.valid){
continue;
}
IkReal x5574=((-1.0)*(x5576.value));
IkReal x5575=x5567;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5574;
IkReal gconst114=x5574;
IkReal gconst115=((-1.0)*r21*x5575);
IkReal gconst116=(r20*x5575);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x5579 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5579.valid){
continue;
}
IkReal x5577=((-1.0)*(x5579.value));
IkReal x5578=x5567;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5577;
IkReal gconst114=x5577;
IkReal gconst115=((-1.0)*r21*x5578);
IkReal gconst116=(r20*x5578);
IkReal x5580=r22*r22;
CheckValue<IkReal> x5583=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5580))),-1);
if(!x5583.valid){
continue;
}
IkReal x5581=x5583.value;
IkReal x5582=(x5580+((x5581*(r20*r20*r20*r20)))+((x5581*(r21*r21*r21*r21)))+(((2.0)*x5581*(r20*r20)*(r21*r21))));
j4eval[0]=x5582;
j4eval[1]=IKsign(x5582);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5584=(sj1*sj2);
IkReal x5585=(gconst115*r21);
IkReal x5586=(cj1*cj2);
IkReal x5587=(gconst116*r20);
CheckValue<IkReal> x5588 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5586))+((r22*x5584)))),IkReal((((x5584*x5587))+((x5585*x5586))+(((-1.0)*x5584*x5585))+(((-1.0)*x5586*x5587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5588.valid){
continue;
}
CheckValue<IkReal> x5589=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x5587*x5587)+(((-2.0)*x5585*x5587))+(x5585*x5585))),-1);
if(!x5589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5588.value)+(((1.5707963267949)*(x5589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5590=IKsin(j4);
IkReal x5591=IKcos(j4);
IkReal x5592=(cj2*sj1);
IkReal x5593=(cj1*sj2);
IkReal x5594=((1.0)*x5591);
IkReal x5595=(gconst116*x5590);
IkReal x5596=(gconst115*x5591);
IkReal x5597=((1.0)*x5590);
evalcond[0]=(((r20*x5595))+(((-1.0)*r22*x5594))+(((-1.0)*gconst115*r21*x5597)));
evalcond[1]=((((-1.0)*gconst115*r01*x5597))+sj0+(((-1.0)*r02*x5594))+((r00*x5595)));
evalcond[2]=((((-1.0)*r12*x5594))+((r10*x5595))+(((-1.0)*gconst115*r11*x5597))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5596))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst116*r20*x5594))+(((-1.0)*r22*x5597)));
evalcond[4]=(((cj0*x5592))+((cj0*x5593))+(((-1.0)*r02*x5597))+(((-1.0)*gconst116*r00*x5594))+((r01*x5596)));
evalcond[5]=((((-1.0)*r12*x5597))+((sj0*x5592))+((sj0*x5593))+((r11*x5596))+(((-1.0)*gconst116*r10*x5594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5598=((1.0)*gconst115);
CheckValue<IkReal> x5599 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst116*r20))+(((-1.0)*cj0*r21*x5598)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5599.valid){
continue;
}
CheckValue<IkReal> x5600=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r01))+(((-1.0)*r00*x5598)))),-1);
if(!x5600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5599.value)+(((1.5707963267949)*(x5600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5601=IKsin(j4);
IkReal x5602=IKcos(j4);
IkReal x5603=(cj2*sj1);
IkReal x5604=(cj1*sj2);
IkReal x5605=((1.0)*x5602);
IkReal x5606=(gconst116*x5601);
IkReal x5607=(gconst115*x5602);
IkReal x5608=((1.0)*x5601);
evalcond[0]=((((-1.0)*r22*x5605))+(((-1.0)*gconst115*r21*x5608))+((r20*x5606)));
evalcond[1]=(sj0+(((-1.0)*gconst115*r01*x5608))+((r00*x5606))+(((-1.0)*r02*x5605)));
evalcond[2]=((((-1.0)*gconst115*r11*x5608))+(((-1.0)*r12*x5605))+(((-1.0)*cj0))+((r10*x5606)));
evalcond[3]=((((-1.0)*r22*x5608))+(((-1.0)*gconst116*r20*x5605))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5607)));
evalcond[4]=(((r01*x5607))+(((-1.0)*gconst116*r00*x5605))+(((-1.0)*r02*x5608))+((cj0*x5604))+((cj0*x5603)));
evalcond[5]=(((sj0*x5603))+((sj0*x5604))+(((-1.0)*r12*x5608))+(((-1.0)*gconst116*r10*x5605))+((r11*x5607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5609=((1.0)*gconst115);
CheckValue<IkReal> x5610 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5609))+((gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5610.valid){
continue;
}
CheckValue<IkReal> x5611=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5609))+(((-1.0)*gconst116*r11)))),-1);
if(!x5611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5610.value)+(((1.5707963267949)*(x5611.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5612=IKsin(j4);
IkReal x5613=IKcos(j4);
IkReal x5614=(cj2*sj1);
IkReal x5615=(cj1*sj2);
IkReal x5616=((1.0)*x5613);
IkReal x5617=(gconst116*x5612);
IkReal x5618=(gconst115*x5613);
IkReal x5619=((1.0)*x5612);
evalcond[0]=((((-1.0)*r22*x5616))+(((-1.0)*gconst115*r21*x5619))+((r20*x5617)));
evalcond[1]=(sj0+(((-1.0)*gconst115*r01*x5619))+((r00*x5617))+(((-1.0)*r02*x5616)));
evalcond[2]=((((-1.0)*gconst115*r11*x5619))+(((-1.0)*r12*x5616))+(((-1.0)*cj0))+((r10*x5617)));
evalcond[3]=((((-1.0)*gconst116*r20*x5616))+(((-1.0)*r22*x5619))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5618)));
evalcond[4]=(((cj0*x5615))+((cj0*x5614))+((r01*x5618))+(((-1.0)*gconst116*r00*x5616))+(((-1.0)*r02*x5619)));
evalcond[5]=(((sj0*x5615))+((sj0*x5614))+(((-1.0)*gconst116*r10*x5616))+(((-1.0)*r12*x5619))+((r11*x5618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5621 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5621)==0){
continue;
}
IkReal x5620=pow(x5621,-0.5);
CheckValue<IkReal> x5622 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5622.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5622.value))));
IkReal gconst118=((1.0)*r21*x5620);
IkReal gconst119=((-1.0)*r20*x5620);
CheckValue<IkReal> x5623 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5623.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5623.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5626 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5626.valid){
continue;
}
IkReal x5624=((1.0)*(x5626.value));
IkReal x5625=x5620;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5624)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5624)));
IkReal gconst118=((1.0)*r21*x5625);
IkReal gconst119=((-1.0)*r20*x5625);
IkReal x5627=r22*r22;
IkReal x5628=((1.0)*x5627);
CheckValue<IkReal> x5632=IKPowWithIntegerCheck(((-1.0)+x5627),-1);
if(!x5632.valid){
continue;
}
IkReal x5629=x5632.value;
if((((1.0)+(((-1.0)*x5628)))) < -0.00001)
continue;
IkReal x5630=IKsqrt(((1.0)+(((-1.0)*x5628))));
IkReal x5631=(sj0*x5629*x5630);
j4eval[0]=((IKabs((x5631+(((-1.0)*x5628*x5631)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5635 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5635.valid){
continue;
}
IkReal x5633=((1.0)*(x5635.value));
IkReal x5634=x5620;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5633)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5633)));
IkReal gconst118=((1.0)*r21*x5634);
IkReal gconst119=((-1.0)*r20*x5634);
IkReal x5636=r22*r22;
IkReal x5637=((1.0)*x5636);
CheckValue<IkReal> x5641=IKPowWithIntegerCheck(((-1.0)+x5636),-1);
if(!x5641.valid){
continue;
}
IkReal x5638=x5641.value;
if((((1.0)+(((-1.0)*x5637)))) < -0.00001)
continue;
IkReal x5639=IKsqrt(((1.0)+(((-1.0)*x5637))));
IkReal x5640=(cj0*x5638*x5639);
j4eval[0]=((IKabs((x5640+(((-1.0)*x5637*x5640)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5644 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5644.valid){
continue;
}
IkReal x5642=((1.0)*(x5644.value));
IkReal x5643=x5620;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5642)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5642)));
IkReal gconst118=((1.0)*r21*x5643);
IkReal gconst119=((-1.0)*r20*x5643);
IkReal x5645=r22*r22;
IkReal x5646=(cj0*r02);
IkReal x5647=(r12*sj0);
CheckValue<IkReal> x5651=IKPowWithIntegerCheck(((-1.0)+x5645),-1);
if(!x5651.valid){
continue;
}
IkReal x5648=x5651.value;
if((((1.0)+(((-1.0)*x5645)))) < -0.00001)
continue;
IkReal x5649=IKsqrt(((1.0)+(((-1.0)*x5645))));
IkReal x5650=((1.0)*r22*x5648*x5649);
j4eval[0]=0;
j4eval[1]=((IKabs((x5647+x5646)))+(IKabs(((((-1.0)*x5647*x5650))+(((-1.0)*x5646*x5650))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5652=((1.0)*gconst118);
CheckValue<IkReal> x5653=IKPowWithIntegerCheck(IKsign((((gconst119*r21))+((gconst118*r20)))),-1);
if(!x5653.valid){
continue;
}
CheckValue<IkReal> x5654 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5652))+(((-1.0)*r11*sj0*x5652))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5653.value)))+(x5654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5655=IKsin(j4);
IkReal x5656=IKcos(j4);
IkReal x5657=(cj2*sj1);
IkReal x5658=(gconst118*r01);
IkReal x5659=(gconst119*r10);
IkReal x5660=(gconst119*r20);
IkReal x5661=(gconst118*r21);
IkReal x5662=(gconst119*r00);
IkReal x5663=(gconst118*r11);
IkReal x5664=(cj1*sj2);
IkReal x5665=((1.0)*x5656);
IkReal x5666=((1.0)*x5655);
evalcond[0]=((((-1.0)*r22*x5665))+((x5655*x5660))+(((-1.0)*x5661*x5666)));
evalcond[1]=(sj0+(((-1.0)*r02*x5665))+((x5655*x5662))+(((-1.0)*x5658*x5666)));
evalcond[2]=(((x5655*x5659))+(((-1.0)*x5663*x5666))+(((-1.0)*r12*x5665))+(((-1.0)*cj0)));
evalcond[3]=(((x5656*x5661))+(((-1.0)*r22*x5666))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5660*x5665)));
evalcond[4]=(((x5656*x5658))+((cj0*x5657))+(((-1.0)*r02*x5666))+(((-1.0)*x5662*x5665))+((cj0*x5664)));
evalcond[5]=(((x5656*x5663))+(((-1.0)*x5659*x5665))+((sj0*x5657))+((sj0*x5664))+(((-1.0)*r12*x5666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5667=((1.0)*gconst118);
CheckValue<IkReal> x5668 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5667))+((cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5668.valid){
continue;
}
CheckValue<IkReal> x5669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5667))+(((-1.0)*gconst119*r01)))),-1);
if(!x5669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5668.value)+(((1.5707963267949)*(x5669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5670=IKsin(j4);
IkReal x5671=IKcos(j4);
IkReal x5672=(cj2*sj1);
IkReal x5673=(gconst118*r01);
IkReal x5674=(gconst119*r10);
IkReal x5675=(gconst119*r20);
IkReal x5676=(gconst118*r21);
IkReal x5677=(gconst119*r00);
IkReal x5678=(gconst118*r11);
IkReal x5679=(cj1*sj2);
IkReal x5680=((1.0)*x5671);
IkReal x5681=((1.0)*x5670);
evalcond[0]=(((x5670*x5675))+(((-1.0)*r22*x5680))+(((-1.0)*x5676*x5681)));
evalcond[1]=((((-1.0)*r02*x5680))+sj0+(((-1.0)*x5673*x5681))+((x5670*x5677)));
evalcond[2]=(((x5670*x5674))+(((-1.0)*x5678*x5681))+(((-1.0)*r12*x5680))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+(((-1.0)*r22*x5681))+((sj1*sj2))+(((-1.0)*x5675*x5680))+((x5671*x5676)));
evalcond[4]=((((-1.0)*r02*x5681))+((cj0*x5672))+((cj0*x5679))+((x5671*x5673))+(((-1.0)*x5677*x5680)));
evalcond[5]=(((sj0*x5672))+((sj0*x5679))+((x5671*x5678))+(((-1.0)*x5674*x5680))+(((-1.0)*r12*x5681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5682=((1.0)*gconst118);
CheckValue<IkReal> x5683=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5682))+(((-1.0)*gconst119*r11)))),-1);
if(!x5683.valid){
continue;
}
CheckValue<IkReal> x5684 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5682))+((gconst119*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5683.value)))+(x5684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5685=IKsin(j4);
IkReal x5686=IKcos(j4);
IkReal x5687=(cj2*sj1);
IkReal x5688=(gconst118*r01);
IkReal x5689=(gconst119*r10);
IkReal x5690=(gconst119*r20);
IkReal x5691=(gconst118*r21);
IkReal x5692=(gconst119*r00);
IkReal x5693=(gconst118*r11);
IkReal x5694=(cj1*sj2);
IkReal x5695=((1.0)*x5686);
IkReal x5696=((1.0)*x5685);
evalcond[0]=((((-1.0)*x5691*x5696))+(((-1.0)*r22*x5695))+((x5685*x5690)));
evalcond[1]=(sj0+(((-1.0)*r02*x5695))+((x5685*x5692))+(((-1.0)*x5688*x5696)));
evalcond[2]=(((x5685*x5689))+(((-1.0)*r12*x5695))+(((-1.0)*cj0))+(((-1.0)*x5693*x5696)));
evalcond[3]=((((-1.0)*x5690*x5695))+((x5686*x5691))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x5696)));
evalcond[4]=(((x5686*x5688))+(((-1.0)*r02*x5696))+(((-1.0)*x5692*x5695))+((cj0*x5687))+((cj0*x5694)));
evalcond[5]=(((x5686*x5693))+((sj0*x5687))+(((-1.0)*x5689*x5695))+((sj0*x5694))+(((-1.0)*r12*x5696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5697=((-1.0)*r00);
IkReal x5699 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5699)==0){
continue;
}
IkReal x5698=pow(x5699,-0.5);
CheckValue<IkReal> x5700 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5697),IKFAST_ATAN2_MAGTHRESH);
if(!x5700.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5700.value));
IkReal gconst121=(r01*x5698);
IkReal gconst122=(x5697*x5698);
CheckValue<IkReal> x5701 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5701.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5701.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5702=((-1.0)*r00);
IkReal x5703=x5698;
CheckValue<IkReal> x5705 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5702),IKFAST_ATAN2_MAGTHRESH);
if(!x5705.valid){
continue;
}
IkReal x5704=((-1.0)*(x5705.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5704;
IkReal gconst120=x5704;
IkReal gconst121=(r01*x5703);
IkReal gconst122=(x5702*x5703);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5706=((1.0)*gconst121);
CheckValue<IkReal> x5707=IKPowWithIntegerCheck(IKsign((((gconst122*r21))+((gconst121*r20)))),-1);
if(!x5707.valid){
continue;
}
CheckValue<IkReal> x5708 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x5706))+(((-1.0)*r11*sj0*x5706))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5707.value)))+(x5708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5709=IKsin(j4);
IkReal x5710=IKcos(j4);
IkReal x5711=(gconst121*r11);
IkReal x5712=(gconst122*r00);
IkReal x5713=(cj2*sj1);
IkReal x5714=(gconst121*r01);
IkReal x5715=(gconst121*r21);
IkReal x5716=(cj1*sj2);
IkReal x5717=((1.0)*x5710);
IkReal x5718=(gconst122*x5709);
IkReal x5719=((1.0)*x5709);
evalcond[0]=((((-1.0)*x5715*x5719))+(((-1.0)*r22*x5717))+((r20*x5718)));
evalcond[1]=(sj0+(((-1.0)*x5714*x5719))+((x5709*x5712))+(((-1.0)*r02*x5717)));
evalcond[2]=(((r10*x5718))+(((-1.0)*x5711*x5719))+(((-1.0)*r12*x5717))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst122*r20*x5717))+(((-1.0)*r22*x5719))+((x5710*x5715))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((cj0*x5713))+((cj0*x5716))+((x5710*x5714))+(((-1.0)*x5712*x5717))+(((-1.0)*r02*x5719)));
evalcond[5]=(((x5710*x5711))+((sj0*x5713))+((sj0*x5716))+(((-1.0)*gconst122*r10*x5717))+(((-1.0)*r12*x5719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5720=((1.0)*gconst121);
CheckValue<IkReal> x5721=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r11))+(((-1.0)*r10*x5720)))),-1);
if(!x5721.valid){
continue;
}
CheckValue<IkReal> x5722 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst122*r20*sj0))+(((-1.0)*r21*sj0*x5720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5721.value)))+(x5722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5723=IKsin(j4);
IkReal x5724=IKcos(j4);
IkReal x5725=(gconst121*r11);
IkReal x5726=(gconst122*r00);
IkReal x5727=(cj2*sj1);
IkReal x5728=(gconst121*r01);
IkReal x5729=(gconst121*r21);
IkReal x5730=(cj1*sj2);
IkReal x5731=((1.0)*x5724);
IkReal x5732=(gconst122*x5723);
IkReal x5733=((1.0)*x5723);
evalcond[0]=((((-1.0)*x5729*x5733))+((r20*x5732))+(((-1.0)*r22*x5731)));
evalcond[1]=(sj0+((x5723*x5726))+(((-1.0)*x5728*x5733))+(((-1.0)*r02*x5731)));
evalcond[2]=((((-1.0)*x5725*x5733))+(((-1.0)*r12*x5731))+((r10*x5732))+(((-1.0)*cj0)));
evalcond[3]=(((x5724*x5729))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x5733))+(((-1.0)*gconst122*r20*x5731)));
evalcond[4]=(((x5724*x5728))+(((-1.0)*r02*x5733))+((cj0*x5730))+((cj0*x5727))+(((-1.0)*x5726*x5731)));
evalcond[5]=(((sj0*x5727))+((x5724*x5725))+(((-1.0)*r12*x5733))+(((-1.0)*gconst122*r10*x5731))+((sj0*x5730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5734=((-1.0)*r01);
IkReal x5736 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5736)==0){
continue;
}
IkReal x5735=pow(x5736,-0.5);
CheckValue<IkReal> x5737 = IKatan2WithCheck(IkReal(x5734),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5737.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5737.value))));
IkReal gconst124=(x5734*x5735);
IkReal gconst125=((1.0)*r00*x5735);
CheckValue<IkReal> x5738 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5738.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5738.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5739=((-1.0)*r01);
CheckValue<IkReal> x5742 = IKatan2WithCheck(IkReal(x5739),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5742.valid){
continue;
}
IkReal x5740=((1.0)*(x5742.value));
IkReal x5741=x5735;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5740)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5740)));
IkReal gconst124=(x5739*x5741);
IkReal gconst125=((1.0)*r00*x5741);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x5743=((-1.0)*r01);
CheckValue<IkReal> x5746 = IKatan2WithCheck(IkReal(x5743),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5746.valid){
continue;
}
IkReal x5744=((1.0)*(x5746.value));
IkReal x5745=x5735;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5744)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5744)));
IkReal gconst124=(x5743*x5745);
IkReal gconst125=((1.0)*r00*x5745);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5747=((-1.0)*r01);
CheckValue<IkReal> x5750 = IKatan2WithCheck(IkReal(x5747),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5750.valid){
continue;
}
IkReal x5748=((1.0)*(x5750.value));
IkReal x5749=x5735;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5748)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5748)));
IkReal gconst124=(x5747*x5749);
IkReal gconst125=((1.0)*r00*x5749);
IkReal x5751=r02*r02;
IkReal x5752=(r12*sj0);
IkReal x5753=x5735;
IkReal x5754=(cj0*x5753);
j4eval[0]=((IKabs((x5752+((cj0*r02)))))+(IKabs((((x5751*x5754))+(((-1.0)*x5754))+((r02*x5752*x5753))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5755=((1.0)*gconst124);
CheckValue<IkReal> x5756 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*cj0*r01*x5755))+(((-1.0)*r11*sj0*x5755))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5756.valid){
continue;
}
CheckValue<IkReal> x5757=IKPowWithIntegerCheck(IKsign((((gconst124*r20))+((gconst125*r21)))),-1);
if(!x5757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5756.value)+(((1.5707963267949)*(x5757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5758=IKsin(j4);
IkReal x5759=IKcos(j4);
IkReal x5760=(cj2*sj1);
IkReal x5761=(cj1*sj2);
IkReal x5762=((1.0)*x5759);
IkReal x5763=(gconst125*x5758);
IkReal x5764=(gconst124*x5759);
IkReal x5765=((1.0)*x5758);
evalcond[0]=((((-1.0)*gconst124*r21*x5765))+(((-1.0)*r22*x5762))+((r20*x5763)));
evalcond[1]=(((r00*x5763))+sj0+(((-1.0)*gconst124*r01*x5765))+(((-1.0)*r02*x5762)));
evalcond[2]=((((-1.0)*gconst124*r11*x5765))+(((-1.0)*r12*x5762))+((r10*x5763))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst125*r20*x5762))+((r21*x5764))+(((-1.0)*r22*x5765)));
evalcond[4]=(((r01*x5764))+((cj0*x5761))+((cj0*x5760))+(((-1.0)*r02*x5765))+(((-1.0)*gconst125*r00*x5762)));
evalcond[5]=((((-1.0)*r12*x5765))+((r11*x5764))+(((-1.0)*gconst125*r10*x5762))+((sj0*x5761))+((sj0*x5760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5766=((1.0)*gconst124);
CheckValue<IkReal> x5767=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst125*r01))+(((-1.0)*r00*x5766)))),-1);
if(!x5767.valid){
continue;
}
CheckValue<IkReal> x5768 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst125*r20))+(((-1.0)*cj0*r21*x5766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5767.value)))+(x5768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5769=IKsin(j4);
IkReal x5770=IKcos(j4);
IkReal x5771=(cj2*sj1);
IkReal x5772=(cj1*sj2);
IkReal x5773=((1.0)*x5770);
IkReal x5774=(gconst125*x5769);
IkReal x5775=(gconst124*x5770);
IkReal x5776=((1.0)*x5769);
evalcond[0]=((((-1.0)*gconst124*r21*x5776))+(((-1.0)*r22*x5773))+((r20*x5774)));
evalcond[1]=(sj0+((r00*x5774))+(((-1.0)*gconst124*r01*x5776))+(((-1.0)*r02*x5773)));
evalcond[2]=((((-1.0)*gconst124*r11*x5776))+(((-1.0)*r12*x5773))+((r10*x5774))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst125*r20*x5773))+((r21*x5775))+(((-1.0)*r22*x5776)));
evalcond[4]=(((r01*x5775))+((cj0*x5771))+((cj0*x5772))+(((-1.0)*r02*x5776))+(((-1.0)*gconst125*r00*x5773)));
evalcond[5]=((((-1.0)*r12*x5776))+(((-1.0)*gconst125*r10*x5773))+((r11*x5775))+((sj0*x5771))+((sj0*x5772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5777=((1.0)*gconst124);
CheckValue<IkReal> x5778 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst125*r20*sj0))+(((-1.0)*r21*sj0*x5777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5778.valid){
continue;
}
CheckValue<IkReal> x5779=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5777))+(((-1.0)*gconst125*r11)))),-1);
if(!x5779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5778.value)+(((1.5707963267949)*(x5779.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5780=IKsin(j4);
IkReal x5781=IKcos(j4);
IkReal x5782=(cj2*sj1);
IkReal x5783=(cj1*sj2);
IkReal x5784=((1.0)*x5781);
IkReal x5785=(gconst125*x5780);
IkReal x5786=(gconst124*x5781);
IkReal x5787=((1.0)*x5780);
evalcond[0]=(((r20*x5785))+(((-1.0)*gconst124*r21*x5787))+(((-1.0)*r22*x5784)));
evalcond[1]=(sj0+(((-1.0)*gconst124*r01*x5787))+((r00*x5785))+(((-1.0)*r02*x5784)));
evalcond[2]=((((-1.0)*r12*x5784))+(((-1.0)*gconst124*r11*x5787))+((r10*x5785))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5786))+(((-1.0)*gconst125*r20*x5784))+(((-1.0)*r22*x5787)));
evalcond[4]=(((r01*x5786))+(((-1.0)*r02*x5787))+((cj0*x5783))+((cj0*x5782))+(((-1.0)*gconst125*r00*x5784)));
evalcond[5]=((((-1.0)*gconst125*r10*x5784))+((r11*x5786))+(((-1.0)*r12*x5787))+((sj0*x5783))+((sj0*x5782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5788=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5788;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x5788);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5789=((1.0)*sj5);
IkReal x5790=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5789)));
j4eval[0]=x5790;
j4eval[1]=IKsign(x5790);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x5789))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5791=cj5*cj5;
IkReal x5792=r01*r01;
IkReal x5793=(cj5*r00);
IkReal x5794=(r01*sj5);
IkReal x5795=(((x5791*(r00*r00)))+(((-1.0)*x5791*x5792))+(r02*r02)+(((-2.0)*x5793*x5794))+x5792);
j4eval[0]=x5795;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x5793))+x5794))));
j4eval[2]=IKsign(x5795);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5796=cj5*cj5;
IkReal x5797=r01*r01;
IkReal x5798=(r01*sj5);
IkReal x5799=(cj5*r00);
CheckValue<IkReal> x5800=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5796*x5797))+(((-2.0)*x5798*x5799))+(r02*r02)+x5797+((x5796*(r00*r00))))),-1);
if(!x5800.valid){
continue;
}
CheckValue<IkReal> x5801 = IKatan2WithCheck(IkReal(((((-1.0)*x5799))+x5798)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5800.value)))+(x5801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5802=IKsin(j4);
IkReal x5803=IKcos(j4);
IkReal x5804=(cj5*r00);
IkReal x5805=(cj5*r20);
IkReal x5806=(cj5*r10);
IkReal x5807=((1.0)*x5803);
IkReal x5808=(sj5*x5803);
IkReal x5809=((1.0)*x5802);
IkReal x5810=(sj5*x5809);
evalcond[0]=((((-1.0)*r22*x5807))+(((-1.0)*r21*x5810))+((x5802*x5805)));
evalcond[1]=((((-1.0)*r11*x5810))+(((-1.0)*r12*x5807))+((x5802*x5806)));
evalcond[2]=((((-1.0)*x5804*x5807))+((r01*x5808))+(((-1.0)*r02*x5809)));
evalcond[3]=((1.0)+(((-1.0)*r01*x5810))+(((-1.0)*r02*x5807))+((x5802*x5804)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x5809))+(((-1.0)*x5806*x5807))+((r11*x5808)));
evalcond[5]=((((-1.0)*r22*x5809))+((r21*x5808))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5805*x5807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5811=((1.0)*sj5);
CheckValue<IkReal> x5812=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5811)))),-1);
if(!x5812.valid){
continue;
}
CheckValue<IkReal> x5813 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x5811)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5812.value)))+(x5813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5814=IKsin(j4);
IkReal x5815=IKcos(j4);
IkReal x5816=(cj5*r00);
IkReal x5817=(cj5*r20);
IkReal x5818=(cj5*r10);
IkReal x5819=((1.0)*x5815);
IkReal x5820=(sj5*x5815);
IkReal x5821=((1.0)*x5814);
IkReal x5822=(sj5*x5821);
evalcond[0]=(((x5814*x5817))+(((-1.0)*r21*x5822))+(((-1.0)*r22*x5819)));
evalcond[1]=((((-1.0)*r12*x5819))+((x5814*x5818))+(((-1.0)*r11*x5822)));
evalcond[2]=((((-1.0)*r02*x5821))+((r01*x5820))+(((-1.0)*x5816*x5819)));
evalcond[3]=((1.0)+((x5814*x5816))+(((-1.0)*r01*x5822))+(((-1.0)*r02*x5819)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x5820))+(((-1.0)*x5818*x5819))+(((-1.0)*r12*x5821)));
evalcond[5]=((((-1.0)*r22*x5821))+((r21*x5820))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5817*x5819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5823 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5823.valid){
continue;
}
CheckValue<IkReal> x5824=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5823.value)+(((1.5707963267949)*(x5824.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5825=IKsin(j4);
IkReal x5826=IKcos(j4);
IkReal x5827=(cj5*r00);
IkReal x5828=(cj5*r20);
IkReal x5829=(cj5*r10);
IkReal x5830=((1.0)*x5826);
IkReal x5831=(sj5*x5826);
IkReal x5832=((1.0)*x5825);
IkReal x5833=(sj5*x5832);
evalcond[0]=((((-1.0)*r22*x5830))+(((-1.0)*r21*x5833))+((x5825*x5828)));
evalcond[1]=(((x5825*x5829))+(((-1.0)*r12*x5830))+(((-1.0)*r11*x5833)));
evalcond[2]=((((-1.0)*r02*x5832))+((r01*x5831))+(((-1.0)*x5827*x5830)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5830))+(((-1.0)*r01*x5833))+((x5825*x5827)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x5831))+(((-1.0)*r12*x5832))+(((-1.0)*x5829*x5830)));
evalcond[5]=(((r21*x5831))+(((-1.0)*r22*x5832))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5828*x5830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5834=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5834;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x5834);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5835=((1.0)*sj5);
IkReal x5836=((((-1.0)*r20*x5835))+(((-1.0)*cj5*r21)));
j4eval[0]=x5836;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x5835))))));
j4eval[2]=IKsign(x5836);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5837=cj5*cj5;
IkReal x5838=r01*r01;
IkReal x5839=(r01*sj5);
IkReal x5840=(cj5*r00);
IkReal x5841=(((x5837*x5838))+(((-1.0)*(r02*r02)))+(((2.0)*x5839*x5840))+(((-1.0)*x5837*(r00*r00)))+(((-1.0)*x5838)));
j4eval[0]=x5841;
j4eval[1]=IKsign(x5841);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5840))+x5839))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5842=cj5*cj5;
IkReal x5843=r01*r01;
IkReal x5844=(r01*sj5);
IkReal x5845=(cj5*r00);
CheckValue<IkReal> x5846 = IKatan2WithCheck(IkReal(((((-1.0)*x5845))+x5844)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5846.valid){
continue;
}
CheckValue<IkReal> x5847=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5843))+(((-1.0)*(r02*r02)))+((x5842*x5843))+(((-1.0)*x5842*(r00*r00)))+(((2.0)*x5844*x5845)))),-1);
if(!x5847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5846.value)+(((1.5707963267949)*(x5847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5848=IKsin(j4);
IkReal x5849=IKcos(j4);
IkReal x5850=(cj5*r00);
IkReal x5851=((1.0)*cj1);
IkReal x5852=(cj5*r20);
IkReal x5853=(cj5*r10);
IkReal x5854=((1.0)*x5849);
IkReal x5855=(sj5*x5849);
IkReal x5856=((1.0)*x5848);
IkReal x5857=(sj5*x5856);
evalcond[0]=((((-1.0)*r21*x5857))+((x5848*x5852))+(((-1.0)*r22*x5854)));
evalcond[1]=((((-1.0)*r11*x5857))+(((-1.0)*r12*x5854))+((x5848*x5853)));
evalcond[2]=(((r01*x5855))+(((-1.0)*r02*x5856))+(((-1.0)*x5850*x5854)));
evalcond[3]=((-1.0)+((x5848*x5850))+(((-1.0)*r01*x5857))+(((-1.0)*r02*x5854)));
evalcond[4]=((((-1.0)*cj2*x5851))+((sj1*sj2))+(((-1.0)*r22*x5856))+(((-1.0)*x5852*x5854))+((r21*x5855)));
evalcond[5]=((((-1.0)*x5853*x5854))+((r11*x5855))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x5856))+(((-1.0)*sj2*x5851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5858=((1.0)*sj5);
CheckValue<IkReal> x5859=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5858))+(((-1.0)*cj5*r21)))),-1);
if(!x5859.valid){
continue;
}
CheckValue<IkReal> x5860 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x5858)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5859.value)))+(x5860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5861=IKsin(j4);
IkReal x5862=IKcos(j4);
IkReal x5863=(cj5*r00);
IkReal x5864=((1.0)*cj1);
IkReal x5865=(cj5*r20);
IkReal x5866=(cj5*r10);
IkReal x5867=((1.0)*x5862);
IkReal x5868=(sj5*x5862);
IkReal x5869=((1.0)*x5861);
IkReal x5870=(sj5*x5869);
evalcond[0]=((((-1.0)*r22*x5867))+((x5861*x5865))+(((-1.0)*r21*x5870)));
evalcond[1]=((((-1.0)*r11*x5870))+((x5861*x5866))+(((-1.0)*r12*x5867)));
evalcond[2]=((((-1.0)*x5863*x5867))+(((-1.0)*r02*x5869))+((r01*x5868)));
evalcond[3]=((-1.0)+((x5861*x5863))+(((-1.0)*r02*x5867))+(((-1.0)*r01*x5870)));
evalcond[4]=((((-1.0)*r22*x5869))+((r21*x5868))+((sj1*sj2))+(((-1.0)*cj2*x5864))+(((-1.0)*x5865*x5867)));
evalcond[5]=((((-1.0)*x5866*x5867))+(((-1.0)*cj2*sj1))+((r11*x5868))+(((-1.0)*sj2*x5864))+(((-1.0)*r12*x5869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5871=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5871.valid){
continue;
}
CheckValue<IkReal> x5872 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5871.value)))+(x5872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5873=IKsin(j4);
IkReal x5874=IKcos(j4);
IkReal x5875=(cj5*r00);
IkReal x5876=((1.0)*cj1);
IkReal x5877=(cj5*r20);
IkReal x5878=(cj5*r10);
IkReal x5879=((1.0)*x5874);
IkReal x5880=(sj5*x5874);
IkReal x5881=((1.0)*x5873);
IkReal x5882=(sj5*x5881);
evalcond[0]=((((-1.0)*r22*x5879))+((x5873*x5877))+(((-1.0)*r21*x5882)));
evalcond[1]=((((-1.0)*r12*x5879))+((x5873*x5878))+(((-1.0)*r11*x5882)));
evalcond[2]=((((-1.0)*x5875*x5879))+((r01*x5880))+(((-1.0)*r02*x5881)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5879))+((x5873*x5875))+(((-1.0)*r01*x5882)));
evalcond[4]=((((-1.0)*x5877*x5879))+((sj1*sj2))+((r21*x5880))+(((-1.0)*cj2*x5876))+(((-1.0)*r22*x5881)));
evalcond[5]=(((r11*x5880))+(((-1.0)*cj2*sj1))+(((-1.0)*x5878*x5879))+(((-1.0)*r12*x5881))+(((-1.0)*sj2*x5876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5883=((-1.0)*r10);
IkReal x5885 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5885)==0){
continue;
}
IkReal x5884=pow(x5885,-0.5);
CheckValue<IkReal> x5886 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5883),IKFAST_ATAN2_MAGTHRESH);
if(!x5886.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5886.value));
IkReal gconst127=(r11*x5884);
IkReal gconst128=(x5883*x5884);
CheckValue<IkReal> x5887 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5887.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5887.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5888=((-1.0)*r10);
IkReal x5889=x5884;
CheckValue<IkReal> x5891 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5888),IKFAST_ATAN2_MAGTHRESH);
if(!x5891.valid){
continue;
}
IkReal x5890=((-1.0)*(x5891.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5890;
IkReal gconst126=x5890;
IkReal gconst127=(r11*x5889);
IkReal gconst128=(x5888*x5889);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5892=((1.0)*gconst127);
CheckValue<IkReal> x5893 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*r11*sj0*x5892))+(((-1.0)*cj0*r01*x5892)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5893.valid){
continue;
}
CheckValue<IkReal> x5894=IKPowWithIntegerCheck(IKsign((((gconst127*r20))+((gconst128*r21)))),-1);
if(!x5894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5893.value)+(((1.5707963267949)*(x5894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5895=IKsin(j4);
IkReal x5896=IKcos(j4);
IkReal x5897=(cj2*sj1);
IkReal x5898=(gconst128*r10);
IkReal x5899=(cj1*sj2);
IkReal x5900=((1.0)*x5896);
IkReal x5901=(gconst127*x5896);
IkReal x5902=((1.0)*x5895);
IkReal x5903=(gconst128*x5895);
evalcond[0]=((((-1.0)*gconst127*r21*x5902))+(((-1.0)*r22*x5900))+((r20*x5903)));
evalcond[1]=(((r00*x5903))+sj0+(((-1.0)*gconst127*r01*x5902))+(((-1.0)*r02*x5900)));
evalcond[2]=((((-1.0)*r12*x5900))+((x5895*x5898))+(((-1.0)*gconst127*r11*x5902))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5902))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst128*r20*x5900))+((r21*x5901)));
evalcond[4]=(((cj0*x5899))+((cj0*x5897))+(((-1.0)*gconst128*r00*x5900))+(((-1.0)*r02*x5902))+((r01*x5901)));
evalcond[5]=((((-1.0)*r12*x5902))+(((-1.0)*x5898*x5900))+((sj0*x5899))+((sj0*x5897))+((r11*x5901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5904=((1.0)*gconst127);
CheckValue<IkReal> x5905=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5904))+(((-1.0)*gconst128*r01)))),-1);
if(!x5905.valid){
continue;
}
CheckValue<IkReal> x5906 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst128*r20))+(((-1.0)*cj0*r21*x5904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5905.value)))+(x5906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5907=IKsin(j4);
IkReal x5908=IKcos(j4);
IkReal x5909=(cj2*sj1);
IkReal x5910=(gconst128*r10);
IkReal x5911=(cj1*sj2);
IkReal x5912=((1.0)*x5908);
IkReal x5913=(gconst127*x5908);
IkReal x5914=((1.0)*x5907);
IkReal x5915=(gconst128*x5907);
evalcond[0]=((((-1.0)*gconst127*r21*x5914))+((r20*x5915))+(((-1.0)*r22*x5912)));
evalcond[1]=(((r00*x5915))+sj0+(((-1.0)*gconst127*r01*x5914))+(((-1.0)*r02*x5912)));
evalcond[2]=((((-1.0)*r12*x5912))+((x5907*x5910))+(((-1.0)*gconst127*r11*x5914))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5914))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst128*r20*x5912))+((r21*x5913)));
evalcond[4]=(((r01*x5913))+(((-1.0)*gconst128*r00*x5912))+(((-1.0)*r02*x5914))+((cj0*x5909))+((cj0*x5911)));
evalcond[5]=(((sj0*x5911))+((sj0*x5909))+(((-1.0)*r12*x5914))+(((-1.0)*x5910*x5912))+((r11*x5913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5916=((-1.0)*r11);
IkReal x5918 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5918)==0){
continue;
}
IkReal x5917=pow(x5918,-0.5);
CheckValue<IkReal> x5919 = IKatan2WithCheck(IkReal(x5916),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5919.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5919.value))));
IkReal gconst130=(x5916*x5917);
IkReal gconst131=((1.0)*r10*x5917);
CheckValue<IkReal> x5920 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5920.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5920.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5921=((-1.0)*r11);
CheckValue<IkReal> x5924 = IKatan2WithCheck(IkReal(x5921),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5924.valid){
continue;
}
IkReal x5922=((1.0)*(x5924.value));
IkReal x5923=x5917;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5922)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5922)));
IkReal gconst130=(x5921*x5923);
IkReal gconst131=((1.0)*r10*x5923);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5925=((-1.0)*r11);
CheckValue<IkReal> x5928 = IKatan2WithCheck(IkReal(x5925),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5928.valid){
continue;
}
IkReal x5926=((1.0)*(x5928.value));
IkReal x5927=x5917;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5926)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5926)));
IkReal gconst130=(x5925*x5927);
IkReal gconst131=((1.0)*r10*x5927);
IkReal x5929=r12*r12;
IkReal x5930=(cj0*r02);
IkReal x5931=x5917;
IkReal x5932=(sj0*x5931);
j4eval[0]=((IKabs((((x5929*x5932))+(((-1.0)*x5932))+((r12*x5930*x5931)))))+(IKabs((((r12*sj0))+x5930))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5933=((-1.0)*r11);
CheckValue<IkReal> x5936 = IKatan2WithCheck(IkReal(x5933),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5936.valid){
continue;
}
IkReal x5934=((1.0)*(x5936.value));
IkReal x5935=x5917;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5934)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5934)));
IkReal gconst130=(x5933*x5935);
IkReal gconst131=((1.0)*r10*x5935);
IkReal x5937=r12*r12;
IkReal x5938=(sj1*sj2);
IkReal x5939=((1.0)*cj1*cj2);
CheckValue<IkReal> x5943=IKPowWithIntegerCheck(((-1.0)+x5937),-1);
if(!x5943.valid){
continue;
}
IkReal x5940=x5943.value;
if((((1.0)+(((-1.0)*x5937)))) < -0.00001)
continue;
IkReal x5941=IKsqrt(((1.0)+(((-1.0)*x5937))));
IkReal x5942=(r12*r22*x5940*x5941);
j4eval[0]=((IKabs((((r22*x5938))+(((-1.0)*r22*x5939)))))+(IKabs(((((-1.0)*x5939*x5942))+((x5938*x5942))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5944=(gconst131*r20);
IkReal x5945=(cj1*cj2);
IkReal x5946=(sj1*sj2);
IkReal x5947=(gconst130*r21);
CheckValue<IkReal> x5948 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5945))+((r22*x5946)))),IkReal((((x5945*x5947))+((x5944*x5946))+(((-1.0)*x5944*x5945))+(((-1.0)*x5946*x5947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5948.valid){
continue;
}
CheckValue<IkReal> x5949=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x5944*x5944)+(((-2.0)*x5944*x5947))+(x5947*x5947))),-1);
if(!x5949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5948.value)+(((1.5707963267949)*(x5949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5950=IKsin(j4);
IkReal x5951=IKcos(j4);
IkReal x5952=(cj2*sj1);
IkReal x5953=(gconst131*r20);
IkReal x5954=(gconst131*r10);
IkReal x5955=(gconst131*r00);
IkReal x5956=(cj1*sj2);
IkReal x5957=((1.0)*x5951);
IkReal x5958=(gconst130*x5951);
IkReal x5959=((1.0)*x5950);
evalcond[0]=(((x5950*x5953))+(((-1.0)*gconst130*r21*x5959))+(((-1.0)*r22*x5957)));
evalcond[1]=(sj0+((x5950*x5955))+(((-1.0)*r02*x5957))+(((-1.0)*gconst130*r01*x5959)));
evalcond[2]=(((x5950*x5954))+(((-1.0)*gconst130*r11*x5959))+(((-1.0)*r12*x5957))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5958))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x5959))+(((-1.0)*x5953*x5957)));
evalcond[4]=((((-1.0)*r02*x5959))+((cj0*x5956))+((cj0*x5952))+(((-1.0)*x5955*x5957))+((r01*x5958)));
evalcond[5]=(((sj0*x5952))+((sj0*x5956))+((r11*x5958))+(((-1.0)*x5954*x5957))+(((-1.0)*r12*x5959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5960=((1.0)*gconst130);
CheckValue<IkReal> x5961 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x5960))+(((-1.0)*cj0*r01*x5960))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5961.valid){
continue;
}
CheckValue<IkReal> x5962=IKPowWithIntegerCheck(IKsign((((gconst131*r21))+((gconst130*r20)))),-1);
if(!x5962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5961.value)+(((1.5707963267949)*(x5962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5963=IKsin(j4);
IkReal x5964=IKcos(j4);
IkReal x5965=(cj2*sj1);
IkReal x5966=(gconst131*r20);
IkReal x5967=(gconst131*r10);
IkReal x5968=(gconst131*r00);
IkReal x5969=(cj1*sj2);
IkReal x5970=((1.0)*x5964);
IkReal x5971=(gconst130*x5964);
IkReal x5972=((1.0)*x5963);
evalcond[0]=((((-1.0)*r22*x5970))+((x5963*x5966))+(((-1.0)*gconst130*r21*x5972)));
evalcond[1]=((((-1.0)*r02*x5970))+sj0+(((-1.0)*gconst130*r01*x5972))+((x5963*x5968)));
evalcond[2]=((((-1.0)*gconst130*r11*x5972))+(((-1.0)*r12*x5970))+((x5963*x5967))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x5972))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5971))+(((-1.0)*x5966*x5970)));
evalcond[4]=((((-1.0)*r02*x5972))+((cj0*x5965))+((cj0*x5969))+((r01*x5971))+(((-1.0)*x5968*x5970)));
evalcond[5]=((((-1.0)*r12*x5972))+((r11*x5971))+((sj0*x5969))+((sj0*x5965))+(((-1.0)*x5967*x5970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5973=((1.0)*gconst130);
CheckValue<IkReal> x5974=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r01))+(((-1.0)*r00*x5973)))),-1);
if(!x5974.valid){
continue;
}
CheckValue<IkReal> x5975 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst131*r20))+(((-1.0)*cj0*r21*x5973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5974.value)))+(x5975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5976=IKsin(j4);
IkReal x5977=IKcos(j4);
IkReal x5978=(cj2*sj1);
IkReal x5979=(gconst131*r20);
IkReal x5980=(gconst131*r10);
IkReal x5981=(gconst131*r00);
IkReal x5982=(cj1*sj2);
IkReal x5983=((1.0)*x5977);
IkReal x5984=(gconst130*x5977);
IkReal x5985=((1.0)*x5976);
evalcond[0]=(((x5976*x5979))+(((-1.0)*gconst130*r21*x5985))+(((-1.0)*r22*x5983)));
evalcond[1]=(sj0+(((-1.0)*r02*x5983))+((x5976*x5981))+(((-1.0)*gconst130*r01*x5985)));
evalcond[2]=((((-1.0)*r12*x5983))+((x5976*x5980))+(((-1.0)*gconst130*r11*x5985))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x5979*x5983))+((r21*x5984))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x5985)));
evalcond[4]=(((cj0*x5978))+(((-1.0)*r02*x5985))+(((-1.0)*x5981*x5983))+((cj0*x5982))+((r01*x5984)));
evalcond[5]=((((-1.0)*x5980*x5983))+(((-1.0)*r12*x5985))+((r11*x5984))+((sj0*x5982))+((sj0*x5978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5986=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5986;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x5986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5987=((1.0)*sj5);
IkReal x5988=((((-1.0)*r00*x5987))+(((-1.0)*cj5*r01)));
j4eval[0]=x5988;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x5987)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5989=cj5*cj5;
IkReal x5990=r11*r11;
IkReal x5991=(cj5*r10);
IkReal x5992=(r11*sj5);
IkReal x5993=(((x5989*x5990))+(((2.0)*x5991*x5992))+(((-1.0)*x5990))+(((-1.0)*x5989*(r10*r10)))+(((-1.0)*(r12*r12))));
j4eval[0]=x5993;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x5991))+x5992))));
j4eval[2]=IKsign(x5993);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5994=cj5*cj5;
IkReal x5995=r11*r11;
IkReal x5996=(cj5*r10);
IkReal x5997=(r11*sj5);
CheckValue<IkReal> x5998 = IKatan2WithCheck(IkReal(((((-1.0)*x5996))+x5997)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5998.valid){
continue;
}
CheckValue<IkReal> x5999=IKPowWithIntegerCheck(IKsign((((x5994*x5995))+(((-1.0)*x5995))+(((-1.0)*(r12*r12)))+(((-1.0)*x5994*(r10*r10)))+(((2.0)*x5996*x5997)))),-1);
if(!x5999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5998.value)+(((1.5707963267949)*(x5999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6000=IKsin(j4);
IkReal x6001=IKcos(j4);
IkReal x6002=(cj5*r00);
IkReal x6003=((1.0)*x6001);
IkReal x6004=(sj5*x6001);
IkReal x6005=(cj5*x6000);
IkReal x6006=((1.0)*x6000);
IkReal x6007=(sj5*x6006);
evalcond[0]=(((r20*x6005))+(((-1.0)*r22*x6003))+(((-1.0)*r21*x6007)));
evalcond[1]=((((-1.0)*r01*x6007))+((x6000*x6002))+(((-1.0)*r02*x6003)));
evalcond[2]=(((r11*x6004))+(((-1.0)*r12*x6006))+(((-1.0)*cj5*r10*x6003)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x6007))+(((-1.0)*r12*x6003))+((r10*x6005)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x6004))+(((-1.0)*r02*x6006))+(((-1.0)*x6002*x6003)));
evalcond[5]=(((r21*x6004))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6006))+(((-1.0)*cj5*r20*x6003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6008=((1.0)*sj5);
CheckValue<IkReal> x6009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6008))+(((-1.0)*cj5*r01)))),-1);
if(!x6009.valid){
continue;
}
CheckValue<IkReal> x6010 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x6008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6009.value)))+(x6010.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6011=IKsin(j4);
IkReal x6012=IKcos(j4);
IkReal x6013=(cj5*r00);
IkReal x6014=((1.0)*x6012);
IkReal x6015=(sj5*x6012);
IkReal x6016=(cj5*x6011);
IkReal x6017=((1.0)*x6011);
IkReal x6018=(sj5*x6017);
evalcond[0]=((((-1.0)*r21*x6018))+((r20*x6016))+(((-1.0)*r22*x6014)));
evalcond[1]=((((-1.0)*r02*x6014))+((x6011*x6013))+(((-1.0)*r01*x6018)));
evalcond[2]=(((r11*x6015))+(((-1.0)*r12*x6017))+(((-1.0)*cj5*r10*x6014)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6014))+(((-1.0)*r11*x6018))+((r10*x6016)));
evalcond[4]=(((r01*x6015))+((cj2*sj1))+(((-1.0)*r02*x6017))+((cj1*sj2))+(((-1.0)*x6013*x6014)));
evalcond[5]=((((-1.0)*cj5*r20*x6014))+((r21*x6015))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6019=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6019.valid){
continue;
}
CheckValue<IkReal> x6020 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6019.value)))+(x6020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6021=IKsin(j4);
IkReal x6022=IKcos(j4);
IkReal x6023=(cj5*r00);
IkReal x6024=((1.0)*x6022);
IkReal x6025=(sj5*x6022);
IkReal x6026=(cj5*x6021);
IkReal x6027=((1.0)*x6021);
IkReal x6028=(sj5*x6027);
evalcond[0]=((((-1.0)*r22*x6024))+(((-1.0)*r21*x6028))+((r20*x6026)));
evalcond[1]=((((-1.0)*r01*x6028))+((x6021*x6023))+(((-1.0)*r02*x6024)));
evalcond[2]=((((-1.0)*cj5*r10*x6024))+((r11*x6025))+(((-1.0)*r12*x6027)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x6028))+((r10*x6026))+(((-1.0)*r12*x6024)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6023*x6024))+((cj1*sj2))+((r01*x6025))+(((-1.0)*r02*x6027)));
evalcond[5]=((((-1.0)*cj5*r20*x6024))+(((-1.0)*r22*x6027))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6029=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6029;
j4eval[1]=IKsign(x6029);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6030=((1.0)*sj5);
IkReal x6031=((((-1.0)*cj5*r21))+(((-1.0)*r20*x6030)));
j4eval[0]=x6031;
j4eval[1]=((IKabs(((((-1.0)*r01*x6030))+((cj5*r00)))))+(IKabs(r02)));
j4eval[2]=IKsign(x6031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6032=cj5*cj5;
IkReal x6033=r11*r11;
IkReal x6034=(r11*sj5);
IkReal x6035=(cj5*r10);
IkReal x6036=((r12*r12)+(((-2.0)*x6034*x6035))+x6033+((x6032*(r10*r10)))+(((-1.0)*x6032*x6033)));
j4eval[0]=x6036;
j4eval[1]=IKsign(x6036);
j4eval[2]=((IKabs(r12))+(IKabs((x6034+(((-1.0)*x6035))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6037=cj5*cj5;
IkReal x6038=r11*r11;
IkReal x6039=(cj5*r10);
IkReal x6040=(r11*sj5);
CheckValue<IkReal> x6041=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6038+((x6037*(r10*r10)))+(((-2.0)*x6039*x6040))+(((-1.0)*x6037*x6038)))),-1);
if(!x6041.valid){
continue;
}
CheckValue<IkReal> x6042 = IKatan2WithCheck(IkReal((x6040+(((-1.0)*x6039)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6041.value)))+(x6042.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6043=IKsin(j4);
IkReal x6044=IKcos(j4);
IkReal x6045=(cj5*r00);
IkReal x6046=((1.0)*cj1);
IkReal x6047=((1.0)*x6044);
IkReal x6048=(sj5*x6044);
IkReal x6049=(cj5*x6043);
IkReal x6050=((1.0)*x6043);
IkReal x6051=(sj5*x6050);
evalcond[0]=((((-1.0)*r21*x6051))+(((-1.0)*r22*x6047))+((r20*x6049)));
evalcond[1]=((((-1.0)*r02*x6047))+((x6043*x6045))+(((-1.0)*r01*x6051)));
evalcond[2]=(((r11*x6048))+(((-1.0)*r12*x6050))+(((-1.0)*cj5*r10*x6047)));
evalcond[3]=((1.0)+(((-1.0)*r11*x6051))+(((-1.0)*r12*x6047))+((r10*x6049)));
evalcond[4]=((((-1.0)*cj2*x6046))+((sj1*sj2))+(((-1.0)*r22*x6050))+((r21*x6048))+(((-1.0)*cj5*r20*x6047)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r02*x6050))+(((-1.0)*x6045*x6047))+(((-1.0)*sj2*x6046))+((r01*x6048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6052=((1.0)*sj5);
CheckValue<IkReal> x6053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6052))+(((-1.0)*cj5*r21)))),-1);
if(!x6053.valid){
continue;
}
CheckValue<IkReal> x6054 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x6052))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6053.value)))+(x6054.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6055=IKsin(j4);
IkReal x6056=IKcos(j4);
IkReal x6057=(cj5*r00);
IkReal x6058=((1.0)*cj1);
IkReal x6059=((1.0)*x6056);
IkReal x6060=(sj5*x6056);
IkReal x6061=(cj5*x6055);
IkReal x6062=((1.0)*x6055);
IkReal x6063=(sj5*x6062);
evalcond[0]=((((-1.0)*r22*x6059))+(((-1.0)*r21*x6063))+((r20*x6061)));
evalcond[1]=((((-1.0)*r01*x6063))+((x6055*x6057))+(((-1.0)*r02*x6059)));
evalcond[2]=((((-1.0)*cj5*r10*x6059))+((r11*x6060))+(((-1.0)*r12*x6062)));
evalcond[3]=((1.0)+((r10*x6061))+(((-1.0)*r12*x6059))+(((-1.0)*r11*x6063)));
evalcond[4]=((((-1.0)*r22*x6062))+(((-1.0)*cj2*x6058))+(((-1.0)*cj5*r20*x6059))+((sj1*sj2))+((r21*x6060)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r01*x6060))+(((-1.0)*x6057*x6059))+(((-1.0)*sj2*x6058))+(((-1.0)*r02*x6062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6064=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6064.valid){
continue;
}
CheckValue<IkReal> x6065 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6064.value)))+(x6065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6066=IKsin(j4);
IkReal x6067=IKcos(j4);
IkReal x6068=(cj5*r00);
IkReal x6069=((1.0)*cj1);
IkReal x6070=((1.0)*x6067);
IkReal x6071=(sj5*x6067);
IkReal x6072=(cj5*x6066);
IkReal x6073=((1.0)*x6066);
IkReal x6074=(sj5*x6073);
evalcond[0]=((((-1.0)*r21*x6074))+(((-1.0)*r22*x6070))+((r20*x6072)));
evalcond[1]=((((-1.0)*r02*x6070))+((x6066*x6068))+(((-1.0)*r01*x6074)));
evalcond[2]=(((r11*x6071))+(((-1.0)*cj5*r10*x6070))+(((-1.0)*r12*x6073)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6070))+((r10*x6072))+(((-1.0)*r11*x6074)));
evalcond[4]=((((-1.0)*cj5*r20*x6070))+((sj1*sj2))+(((-1.0)*r22*x6073))+(((-1.0)*cj2*x6069))+((r21*x6071)));
evalcond[5]=(((r01*x6071))+(((-1.0)*r02*x6073))+(((-1.0)*cj2*sj1))+(((-1.0)*x6068*x6070))+(((-1.0)*sj2*x6069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6075=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6075);
rxp0_2=(py*r00);
rxp1_0=(r21*x6075);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6076=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6076);
rxp0_2=(py*r00);
rxp1_0=(r21*x6076);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6077=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6077);
rxp0_2=(py*r00);
rxp1_0=(r21*x6077);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6080=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x6080.valid){
continue;
}
IkReal x6078=x6080.value;
IkReal x6079=((1.0)*cj0*x6078);
cj4array[0]=((((-1.0)*cj2*sj1*x6079))+(((-1.0)*cj1*sj2*x6079)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6081=IKsin(j4);
IkReal x6082=IKcos(j4);
IkReal x6083=(cj5*r20);
IkReal x6084=((1.0)*x6082);
IkReal x6085=((1.0)*sj5*x6081);
evalcond[0]=((-1.0)*r12*x6081);
evalcond[1]=((((-1.0)*r12*x6084))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x6085))+((x6081*x6083)));
evalcond[3]=(((cj5*r00*x6081))+(((-1.0)*r01*x6085)));
evalcond[4]=(((r21*sj5*x6082))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6083*x6084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6087=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6087.valid){
continue;
}
IkReal x6086=x6087.value;
cj4array[0]=((((-1.0)*sj1*sj2*x6086))+((cj1*cj2*x6086)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6088=IKsin(j4);
IkReal x6089=IKcos(j4);
IkReal x6090=(cj5*r00);
IkReal x6091=(r01*sj5);
IkReal x6092=((1.0)*x6089);
IkReal x6093=((1.0)*x6088);
evalcond[0]=((-1.0)*r12*x6088);
evalcond[1]=((((-1.0)*r12*x6092))+(((-1.0)*cj0)));
evalcond[2]=(((cj5*r20*x6088))+(((-1.0)*r21*sj5*x6093)));
evalcond[3]=((((-1.0)*x6091*x6093))+((x6088*x6090)));
evalcond[4]=(((x6089*x6091))+(((-1.0)*x6090*x6092))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6094=IKPowWithIntegerCheck(r12,-1);
if(!x6094.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x6094.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6095=IKsin(j4);
IkReal x6096=IKcos(j4);
IkReal x6097=(sj5*x6096);
IkReal x6098=(cj5*x6095);
IkReal x6099=((1.0)*sj5*x6095);
IkReal x6100=((1.0)*cj5*x6096);
evalcond[0]=((-1.0)*r12*x6095);
evalcond[1]=((((-1.0)*r21*x6099))+((r20*x6098)));
evalcond[2]=((((-1.0)*r01*x6099))+((r00*x6098)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6097))+(((-1.0)*r20*x6100)));
evalcond[4]=(((r01*x6097))+(((-1.0)*r00*x6100))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6101=((1.0)*sj5);
CheckValue<IkReal> x6102=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6102.valid){
continue;
}
CheckValue<IkReal> x6103 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x6101))+(((-1.0)*r11*sj0*x6101)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6102.value)))+(x6103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6104=IKsin(j4);
IkReal x6105=IKcos(j4);
IkReal x6106=(cj5*r00);
IkReal x6107=(cj2*sj1);
IkReal x6108=(cj1*sj2);
IkReal x6109=((1.0)*x6105);
IkReal x6110=(sj5*x6105);
IkReal x6111=(cj5*x6104);
IkReal x6112=((1.0)*x6104);
IkReal x6113=(sj5*x6112);
evalcond[0]=(((r20*x6111))+(((-1.0)*r21*x6113))+(((-1.0)*r22*x6109)));
evalcond[1]=((((-1.0)*r02*x6109))+((x6104*x6106))+sj0+(((-1.0)*r01*x6113)));
evalcond[2]=((((-1.0)*r11*x6113))+(((-1.0)*r12*x6109))+(((-1.0)*cj0))+((r10*x6111)));
evalcond[3]=((((-1.0)*r22*x6112))+(((-1.0)*cj5*r20*x6109))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6110)));
evalcond[4]=(((cj0*x6107))+((cj0*x6108))+(((-1.0)*r02*x6112))+((r01*x6110))+(((-1.0)*x6106*x6109)));
evalcond[5]=(((sj0*x6107))+((sj0*x6108))+(((-1.0)*r12*x6112))+((r11*x6110))+(((-1.0)*cj5*r10*x6109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6114=((1.0)*sj5);
CheckValue<IkReal> x6115 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6115.valid){
continue;
}
CheckValue<IkReal> x6116=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6114))+(((-1.0)*cj5*r01)))),-1);
if(!x6116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6115.value)+(((1.5707963267949)*(x6116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6117=IKsin(j4);
IkReal x6118=IKcos(j4);
IkReal x6119=(cj5*r00);
IkReal x6120=(cj2*sj1);
IkReal x6121=(cj1*sj2);
IkReal x6122=((1.0)*x6118);
IkReal x6123=(sj5*x6118);
IkReal x6124=(cj5*x6117);
IkReal x6125=((1.0)*x6117);
IkReal x6126=(sj5*x6125);
evalcond[0]=((((-1.0)*r22*x6122))+((r20*x6124))+(((-1.0)*r21*x6126)));
evalcond[1]=(sj0+(((-1.0)*r02*x6122))+((x6117*x6119))+(((-1.0)*r01*x6126)));
evalcond[2]=((((-1.0)*r12*x6122))+((r10*x6124))+(((-1.0)*r11*x6126))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6123))+(((-1.0)*r22*x6125))+(((-1.0)*cj5*r20*x6122))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r01*x6123))+(((-1.0)*r02*x6125))+((cj0*x6121))+((cj0*x6120))+(((-1.0)*x6119*x6122)));
evalcond[5]=(((sj0*x6121))+((sj0*x6120))+(((-1.0)*cj5*r10*x6122))+(((-1.0)*r12*x6125))+((r11*x6123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6127=((1.0)*sj5);
CheckValue<IkReal> x6128 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6127)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6128.valid){
continue;
}
CheckValue<IkReal> x6129=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6127)))),-1);
if(!x6129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6128.value)+(((1.5707963267949)*(x6129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6130=IKsin(j4);
IkReal x6131=IKcos(j4);
IkReal x6132=(cj5*r00);
IkReal x6133=(cj2*sj1);
IkReal x6134=(cj1*sj2);
IkReal x6135=((1.0)*x6131);
IkReal x6136=(sj5*x6131);
IkReal x6137=(cj5*x6130);
IkReal x6138=((1.0)*x6130);
IkReal x6139=(sj5*x6138);
evalcond[0]=((((-1.0)*r22*x6135))+((r20*x6137))+(((-1.0)*r21*x6139)));
evalcond[1]=(sj0+(((-1.0)*r01*x6139))+((x6130*x6132))+(((-1.0)*r02*x6135)));
evalcond[2]=(((r10*x6137))+(((-1.0)*r11*x6139))+(((-1.0)*r12*x6135))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6136))+(((-1.0)*cj5*r20*x6135))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6138)));
evalcond[4]=(((cj0*x6134))+((cj0*x6133))+(((-1.0)*x6132*x6135))+((r01*x6136))+(((-1.0)*r02*x6138)));
evalcond[5]=(((r11*x6136))+(((-1.0)*cj5*r10*x6135))+(((-1.0)*r12*x6138))+((sj0*x6133))+((sj0*x6134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6140=cj5*cj5;
IkReal x6141=r21*r21;
IkReal x6142=(sj1*sj2);
IkReal x6143=(r21*sj5);
IkReal x6144=(cj1*cj2);
IkReal x6145=(cj5*r20);
CheckValue<IkReal> x6146=IKPowWithIntegerCheck(IKsign(((r22*r22)+x6141+(((-1.0)*x6140*x6141))+((x6140*(r20*r20)))+(((-2.0)*x6143*x6145)))),-1);
if(!x6146.valid){
continue;
}
CheckValue<IkReal> x6147 = IKatan2WithCheck(IkReal((((r22*x6142))+(((-1.0)*r22*x6144)))),IkReal(((((-1.0)*x6144*x6145))+((x6142*x6145))+((x6143*x6144))+(((-1.0)*x6142*x6143)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6146.value)))+(x6147.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6148=IKsin(j4);
IkReal x6149=IKcos(j4);
IkReal x6150=(cj5*r20);
IkReal x6151=(r21*sj5);
IkReal x6152=((1.0)*x6149);
IkReal x6153=((1.0)*x6148);
evalcond[0]=(((x6148*x6150))+(((-1.0)*x6151*x6153))+(((-1.0)*r22*x6152)));
evalcond[1]=(((x6149*x6151))+(((-1.0)*x6150*x6152))+(((-1.0)*r22*x6153))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6154=(cj5*sj4);
IkReal x6155=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x6154))+((r01*x6155))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x6155))+((r10*x6154))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x6154))+((r01*x6155))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x6155))+((r10*x6154))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x6154))+((r01*x6155))+((cj4*r02))), ((((-1.0)*r11*x6155))+((r10*x6154))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6156=IKcos(j0);
IkReal x6157=IKsin(j0);
IkReal x6158=(cj5*r00);
IkReal x6159=(cj5*r01);
IkReal x6160=((1.0)*sj4);
IkReal x6161=(r01*sj5);
IkReal x6162=((1.0)*cj4);
IkReal x6163=(cj5*r10);
IkReal x6164=(r00*sj5);
IkReal x6165=(sj1*sj2);
IkReal x6166=(cj5*r11);
IkReal x6167=(r10*sj5);
IkReal x6168=(cj1*cj2);
IkReal x6169=(r11*sj5);
IkReal x6170=(cj2*sj1);
IkReal x6171=(cj1*x6156);
IkReal x6172=((0.566)*x6157);
IkReal x6173=(cj1*x6157);
evalcond[0]=((((-1.0)*x6160*x6161))+x6157+(((-1.0)*r02*x6162))+((sj4*x6158)));
evalcond[1]=((((-1.0)*x6160*x6169))+(((-1.0)*r12*x6162))+((sj4*x6163))+(((-1.0)*x6156)));
evalcond[2]=((((-1.0)*x6156*x6168))+x6164+x6159+((x6156*x6165)));
evalcond[3]=(((x6157*x6165))+x6167+x6166+(((-1.0)*x6157*x6168)));
evalcond[4]=(((sj2*x6171))+(((-1.0)*r02*x6160))+(((-1.0)*x6158*x6162))+((x6156*x6170))+((cj4*x6161)));
evalcond[5]=(((x6157*x6170))+((sj2*x6173))+(((-1.0)*r12*x6160))+((cj4*x6169))+(((-1.0)*x6162*x6163)));
evalcond[6]=((((0.127)*x6164))+(((0.188)*x6157))+(((-0.566)*x6156*x6168))+(((-1.0)*px))+(((0.566)*x6156*x6165))+(((-0.607)*x6171))+(((0.127)*x6159)));
evalcond[7]=((((-1.0)*x6168*x6172))+(((0.127)*x6166))+(((0.127)*x6167))+((x6165*x6172))+(((-1.0)*py))+(((-0.188)*x6156))+(((-0.607)*x6173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6174=((1.0)*cj5);
IkReal x6175=((1.0)*sj5);
CheckValue<IkReal> x6176 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6174))+(((-1.0)*r10*x6175)))),IkReal(((((-1.0)*r00*x6175))+(((-1.0)*r01*x6174)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6176.valid){
continue;
}
CheckValue<IkReal> x6177=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x6177.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6176.value)+(((1.5707963267949)*(x6177.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6178=IKcos(j0);
IkReal x6179=IKsin(j0);
IkReal x6180=(cj5*r01);
IkReal x6181=(r00*sj5);
IkReal x6182=(sj1*sj2);
IkReal x6183=(cj5*r11);
IkReal x6184=(r10*sj5);
IkReal x6185=(cj1*cj2);
IkReal x6186=(cj1*x6178);
IkReal x6187=((0.566)*x6179);
evalcond[0]=(x6181+x6180+(((-1.0)*x6178*x6185))+((x6178*x6182)));
evalcond[1]=((((-1.0)*x6179*x6185))+x6184+x6183+((x6179*x6182)));
evalcond[2]=((((0.566)*x6178*x6182))+(((-1.0)*px))+(((0.188)*x6179))+(((-0.566)*x6178*x6185))+(((-0.607)*x6186))+(((0.127)*x6181))+(((0.127)*x6180)));
evalcond[3]=((((-1.0)*x6185*x6187))+(((-0.188)*x6178))+(((-1.0)*py))+(((0.127)*x6184))+(((0.127)*x6183))+(((-0.607)*cj1*x6179))+((x6182*x6187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6188=((1.0)*sj5);
IkReal x6189=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6188)));
j4eval[0]=x6189;
j4eval[1]=IKsign(x6189);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6188))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6190=((1.0)*sj5);
IkReal x6191=((((-1.0)*r00*x6190))+(((-1.0)*cj5*r01)));
j4eval[0]=x6191;
j4eval[1]=IKsign(x6191);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x6190))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6192=((1.0)*sj5);
IkReal x6193=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6193;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x6192))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x6192)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x6193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6195 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6195)==0){
continue;
}
IkReal x6194=pow(x6195,-0.5);
CheckValue<IkReal> x6196 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6196.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6196.value));
IkReal gconst115=((-1.0)*r21*x6194);
IkReal gconst116=(r20*x6194);
CheckValue<IkReal> x6197 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6197.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6197.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6200 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6200.valid){
continue;
}
IkReal x6198=((-1.0)*(x6200.value));
IkReal x6199=x6194;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x6198;
IkReal gconst114=x6198;
IkReal gconst115=((-1.0)*r21*x6199);
IkReal gconst116=(r20*x6199);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6203 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6203.valid){
continue;
}
IkReal x6201=((-1.0)*(x6203.value));
IkReal x6202=x6194;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x6201;
IkReal gconst114=x6201;
IkReal gconst115=((-1.0)*r21*x6202);
IkReal gconst116=(r20*x6202);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x6206 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6206.valid){
continue;
}
IkReal x6204=((-1.0)*(x6206.value));
IkReal x6205=x6194;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x6204;
IkReal gconst114=x6204;
IkReal gconst115=((-1.0)*r21*x6205);
IkReal gconst116=(r20*x6205);
IkReal x6207=r22*r22;
CheckValue<IkReal> x6210=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6207))),-1);
if(!x6210.valid){
continue;
}
IkReal x6208=x6210.value;
IkReal x6209=(x6207+((x6208*(r20*r20*r20*r20)))+((x6208*(r21*r21*r21*r21)))+(((2.0)*x6208*(r20*r20)*(r21*r21))));
j4eval[0]=x6209;
j4eval[1]=IKsign(x6209);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6211=(sj1*sj2);
IkReal x6212=(gconst115*r21);
IkReal x6213=(cj1*cj2);
IkReal x6214=(gconst116*r20);
CheckValue<IkReal> x6215 = IKatan2WithCheck(IkReal((((r22*x6211))+(((-1.0)*r22*x6213)))),IkReal((((x6212*x6213))+((x6211*x6214))+(((-1.0)*x6213*x6214))+(((-1.0)*x6211*x6212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6215.valid){
continue;
}
CheckValue<IkReal> x6216=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x6214*x6214)+(x6212*x6212)+(((-2.0)*x6212*x6214)))),-1);
if(!x6216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6215.value)+(((1.5707963267949)*(x6216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6217=IKsin(j4);
IkReal x6218=IKcos(j4);
IkReal x6219=(cj2*sj1);
IkReal x6220=(cj1*sj2);
IkReal x6221=((1.0)*x6218);
IkReal x6222=(gconst116*x6217);
IkReal x6223=(gconst115*x6218);
IkReal x6224=((1.0)*x6217);
evalcond[0]=(((r20*x6222))+(((-1.0)*gconst115*r21*x6224))+(((-1.0)*r22*x6221)));
evalcond[1]=(sj0+(((-1.0)*r02*x6221))+((r00*x6222))+(((-1.0)*gconst115*r01*x6224)));
evalcond[2]=((((-1.0)*r12*x6221))+((r10*x6222))+(((-1.0)*cj0))+(((-1.0)*gconst115*r11*x6224)));
evalcond[3]=(((r21*x6223))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst116*r20*x6221))+(((-1.0)*r22*x6224)));
evalcond[4]=(((r01*x6223))+(((-1.0)*r02*x6224))+(((-1.0)*gconst116*r00*x6221))+((cj0*x6220))+((cj0*x6219)));
evalcond[5]=((((-1.0)*gconst116*r10*x6221))+((sj0*x6219))+((r11*x6223))+(((-1.0)*r12*x6224))+((sj0*x6220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6225=((1.0)*gconst115);
CheckValue<IkReal> x6226 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6225))+((cj0*gconst116*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6226.valid){
continue;
}
CheckValue<IkReal> x6227=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r01))+(((-1.0)*r00*x6225)))),-1);
if(!x6227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6226.value)+(((1.5707963267949)*(x6227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6228=IKsin(j4);
IkReal x6229=IKcos(j4);
IkReal x6230=(cj2*sj1);
IkReal x6231=(cj1*sj2);
IkReal x6232=((1.0)*x6229);
IkReal x6233=(gconst116*x6228);
IkReal x6234=(gconst115*x6229);
IkReal x6235=((1.0)*x6228);
evalcond[0]=(((r20*x6233))+(((-1.0)*r22*x6232))+(((-1.0)*gconst115*r21*x6235)));
evalcond[1]=(sj0+((r00*x6233))+(((-1.0)*r02*x6232))+(((-1.0)*gconst115*r01*x6235)));
evalcond[2]=((((-1.0)*r12*x6232))+((r10*x6233))+(((-1.0)*gconst115*r11*x6235))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6234))+(((-1.0)*r22*x6235))+(((-1.0)*gconst116*r20*x6232)));
evalcond[4]=(((r01*x6234))+(((-1.0)*r02*x6235))+(((-1.0)*gconst116*r00*x6232))+((cj0*x6230))+((cj0*x6231)));
evalcond[5]=((((-1.0)*r12*x6235))+(((-1.0)*gconst116*r10*x6232))+((sj0*x6230))+((sj0*x6231))+((r11*x6234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6236=((1.0)*gconst115);
CheckValue<IkReal> x6237 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6236))+((gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6237.valid){
continue;
}
CheckValue<IkReal> x6238=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6236))+(((-1.0)*gconst116*r11)))),-1);
if(!x6238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6237.value)+(((1.5707963267949)*(x6238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6239=IKsin(j4);
IkReal x6240=IKcos(j4);
IkReal x6241=(cj2*sj1);
IkReal x6242=(cj1*sj2);
IkReal x6243=((1.0)*x6240);
IkReal x6244=(gconst116*x6239);
IkReal x6245=(gconst115*x6240);
IkReal x6246=((1.0)*x6239);
evalcond[0]=(((r20*x6244))+(((-1.0)*gconst115*r21*x6246))+(((-1.0)*r22*x6243)));
evalcond[1]=((((-1.0)*r02*x6243))+(((-1.0)*gconst115*r01*x6246))+sj0+((r00*x6244)));
evalcond[2]=(((r10*x6244))+(((-1.0)*r12*x6243))+(((-1.0)*gconst115*r11*x6246))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst116*r20*x6243))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6245))+(((-1.0)*r22*x6246)));
evalcond[4]=((((-1.0)*r02*x6246))+((cj0*x6242))+((cj0*x6241))+(((-1.0)*gconst116*r00*x6243))+((r01*x6245)));
evalcond[5]=(((r11*x6245))+(((-1.0)*gconst116*r10*x6243))+(((-1.0)*r12*x6246))+((sj0*x6242))+((sj0*x6241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6248 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6248)==0){
continue;
}
IkReal x6247=pow(x6248,-0.5);
CheckValue<IkReal> x6249 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6249.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6249.value))));
IkReal gconst118=((1.0)*r21*x6247);
IkReal gconst119=((-1.0)*r20*x6247);
CheckValue<IkReal> x6250 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6250.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6250.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6253 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6253.valid){
continue;
}
IkReal x6251=((1.0)*(x6253.value));
IkReal x6252=x6247;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6251)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6251)));
IkReal gconst118=((1.0)*r21*x6252);
IkReal gconst119=((-1.0)*r20*x6252);
IkReal x6254=r22*r22;
IkReal x6255=((1.0)*x6254);
CheckValue<IkReal> x6259=IKPowWithIntegerCheck(((-1.0)+x6254),-1);
if(!x6259.valid){
continue;
}
IkReal x6256=x6259.value;
if((((1.0)+(((-1.0)*x6255)))) < -0.00001)
continue;
IkReal x6257=IKsqrt(((1.0)+(((-1.0)*x6255))));
IkReal x6258=(sj0*x6256*x6257);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6258+(((-1.0)*x6255*x6258))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6262 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6262.valid){
continue;
}
IkReal x6260=((1.0)*(x6262.value));
IkReal x6261=x6247;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6260)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6260)));
IkReal gconst118=((1.0)*r21*x6261);
IkReal gconst119=((-1.0)*r20*x6261);
IkReal x6263=r22*r22;
IkReal x6264=((1.0)*x6263);
CheckValue<IkReal> x6268=IKPowWithIntegerCheck(((-1.0)+x6263),-1);
if(!x6268.valid){
continue;
}
IkReal x6265=x6268.value;
if((((1.0)+(((-1.0)*x6264)))) < -0.00001)
continue;
IkReal x6266=IKsqrt(((1.0)+(((-1.0)*x6264))));
IkReal x6267=(cj0*x6265*x6266);
j4eval[0]=((IKabs((x6267+(((-1.0)*x6264*x6267)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6271 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6271.valid){
continue;
}
IkReal x6269=((1.0)*(x6271.value));
IkReal x6270=x6247;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6269)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6269)));
IkReal gconst118=((1.0)*r21*x6270);
IkReal gconst119=((-1.0)*r20*x6270);
IkReal x6272=r22*r22;
IkReal x6273=(cj0*r02);
IkReal x6274=(r12*sj0);
CheckValue<IkReal> x6278=IKPowWithIntegerCheck(((-1.0)+x6272),-1);
if(!x6278.valid){
continue;
}
IkReal x6275=x6278.value;
if((((1.0)+(((-1.0)*x6272)))) < -0.00001)
continue;
IkReal x6276=IKsqrt(((1.0)+(((-1.0)*x6272))));
IkReal x6277=((1.0)*r22*x6275*x6276);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x6274*x6277))+(((-1.0)*x6273*x6277)))))+(IKabs((x6273+x6274))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6279=((1.0)*gconst118);
CheckValue<IkReal> x6280 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*r11*sj0*x6279))+(((-1.0)*cj0*r01*x6279))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6280.valid){
continue;
}
CheckValue<IkReal> x6281=IKPowWithIntegerCheck(IKsign((((gconst119*r21))+((gconst118*r20)))),-1);
if(!x6281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6280.value)+(((1.5707963267949)*(x6281.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6282=IKsin(j4);
IkReal x6283=IKcos(j4);
IkReal x6284=(cj2*sj1);
IkReal x6285=(gconst118*r01);
IkReal x6286=(gconst119*r10);
IkReal x6287=(gconst119*r20);
IkReal x6288=(gconst118*r21);
IkReal x6289=(gconst119*r00);
IkReal x6290=(gconst118*r11);
IkReal x6291=(cj1*sj2);
IkReal x6292=((1.0)*x6283);
IkReal x6293=((1.0)*x6282);
evalcond[0]=((((-1.0)*r22*x6292))+(((-1.0)*x6288*x6293))+((x6282*x6287)));
evalcond[1]=(sj0+(((-1.0)*r02*x6292))+((x6282*x6289))+(((-1.0)*x6285*x6293)));
evalcond[2]=((((-1.0)*r12*x6292))+((x6282*x6286))+(((-1.0)*x6290*x6293))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x6293))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6283*x6288))+(((-1.0)*x6287*x6292)));
evalcond[4]=(((cj0*x6284))+(((-1.0)*r02*x6293))+((cj0*x6291))+(((-1.0)*x6289*x6292))+((x6283*x6285)));
evalcond[5]=(((sj0*x6284))+(((-1.0)*r12*x6293))+(((-1.0)*x6286*x6292))+((sj0*x6291))+((x6283*x6290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6294=((1.0)*gconst118);
CheckValue<IkReal> x6295=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6294))+(((-1.0)*gconst119*r01)))),-1);
if(!x6295.valid){
continue;
}
CheckValue<IkReal> x6296 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6294))+((cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6295.value)))+(x6296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6297=IKsin(j4);
IkReal x6298=IKcos(j4);
IkReal x6299=(cj2*sj1);
IkReal x6300=(gconst118*r01);
IkReal x6301=(gconst119*r10);
IkReal x6302=(gconst119*r20);
IkReal x6303=(gconst118*r21);
IkReal x6304=(gconst119*r00);
IkReal x6305=(gconst118*r11);
IkReal x6306=(cj1*sj2);
IkReal x6307=((1.0)*x6298);
IkReal x6308=((1.0)*x6297);
evalcond[0]=((((-1.0)*x6303*x6308))+((x6297*x6302))+(((-1.0)*r22*x6307)));
evalcond[1]=(sj0+(((-1.0)*r02*x6307))+(((-1.0)*x6300*x6308))+((x6297*x6304)));
evalcond[2]=((((-1.0)*x6305*x6308))+(((-1.0)*r12*x6307))+((x6297*x6301))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x6302*x6307))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6298*x6303))+(((-1.0)*r22*x6308)));
evalcond[4]=((((-1.0)*r02*x6308))+((cj0*x6299))+(((-1.0)*x6304*x6307))+((cj0*x6306))+((x6298*x6300)));
evalcond[5]=((((-1.0)*r12*x6308))+((sj0*x6299))+((x6298*x6305))+((sj0*x6306))+(((-1.0)*x6301*x6307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6309=((1.0)*gconst118);
CheckValue<IkReal> x6310 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst119*r20*sj0))+(((-1.0)*r21*sj0*x6309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6310.valid){
continue;
}
CheckValue<IkReal> x6311=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6309))+(((-1.0)*gconst119*r11)))),-1);
if(!x6311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6310.value)+(((1.5707963267949)*(x6311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6312=IKsin(j4);
IkReal x6313=IKcos(j4);
IkReal x6314=(cj2*sj1);
IkReal x6315=(gconst118*r01);
IkReal x6316=(gconst119*r10);
IkReal x6317=(gconst119*r20);
IkReal x6318=(gconst118*r21);
IkReal x6319=(gconst119*r00);
IkReal x6320=(gconst118*r11);
IkReal x6321=(cj1*sj2);
IkReal x6322=((1.0)*x6313);
IkReal x6323=((1.0)*x6312);
evalcond[0]=((((-1.0)*x6318*x6323))+((x6312*x6317))+(((-1.0)*r22*x6322)));
evalcond[1]=(sj0+((x6312*x6319))+(((-1.0)*x6315*x6323))+(((-1.0)*r02*x6322)));
evalcond[2]=(((x6312*x6316))+(((-1.0)*x6320*x6323))+(((-1.0)*r12*x6322))+(((-1.0)*cj0)));
evalcond[3]=(((x6313*x6318))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6317*x6322))+(((-1.0)*r22*x6323)));
evalcond[4]=(((x6313*x6315))+((cj0*x6321))+((cj0*x6314))+(((-1.0)*r02*x6323))+(((-1.0)*x6319*x6322)));
evalcond[5]=(((sj0*x6321))+(((-1.0)*x6316*x6322))+((x6313*x6320))+(((-1.0)*r12*x6323))+((sj0*x6314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6324=((-1.0)*r00);
IkReal x6326 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6326)==0){
continue;
}
IkReal x6325=pow(x6326,-0.5);
CheckValue<IkReal> x6327 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6324),IKFAST_ATAN2_MAGTHRESH);
if(!x6327.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6327.value));
IkReal gconst121=(r01*x6325);
IkReal gconst122=(x6324*x6325);
CheckValue<IkReal> x6328 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6328.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6328.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6329=((-1.0)*r00);
IkReal x6330=x6325;
CheckValue<IkReal> x6332 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6329),IKFAST_ATAN2_MAGTHRESH);
if(!x6332.valid){
continue;
}
IkReal x6331=((-1.0)*(x6332.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x6331;
IkReal gconst120=x6331;
IkReal gconst121=(r01*x6330);
IkReal gconst122=(x6329*x6330);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6333=((1.0)*gconst121);
CheckValue<IkReal> x6334 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x6333))+((cj0*gconst122*r00))+(((-1.0)*cj0*r01*x6333))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6334.valid){
continue;
}
CheckValue<IkReal> x6335=IKPowWithIntegerCheck(IKsign((((gconst122*r21))+((gconst121*r20)))),-1);
if(!x6335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6334.value)+(((1.5707963267949)*(x6335.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6336=IKsin(j4);
IkReal x6337=IKcos(j4);
IkReal x6338=(gconst121*r11);
IkReal x6339=(gconst122*r00);
IkReal x6340=(cj2*sj1);
IkReal x6341=(gconst121*r01);
IkReal x6342=(gconst121*r21);
IkReal x6343=(cj1*sj2);
IkReal x6344=((1.0)*x6337);
IkReal x6345=(gconst122*x6336);
IkReal x6346=((1.0)*x6336);
evalcond[0]=((((-1.0)*r22*x6344))+(((-1.0)*x6342*x6346))+((r20*x6345)));
evalcond[1]=((((-1.0)*x6341*x6346))+sj0+((x6336*x6339))+(((-1.0)*r02*x6344)));
evalcond[2]=(((r10*x6345))+(((-1.0)*x6338*x6346))+(((-1.0)*r12*x6344))+(((-1.0)*cj0)));
evalcond[3]=(((x6337*x6342))+(((-1.0)*r22*x6346))+(((-1.0)*gconst122*r20*x6344))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((x6337*x6341))+(((-1.0)*x6339*x6344))+((cj0*x6340))+((cj0*x6343))+(((-1.0)*r02*x6346)));
evalcond[5]=(((x6337*x6338))+((sj0*x6343))+((sj0*x6340))+(((-1.0)*gconst122*r10*x6344))+(((-1.0)*r12*x6346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6347=((1.0)*gconst121);
CheckValue<IkReal> x6348=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6347))+(((-1.0)*gconst122*r11)))),-1);
if(!x6348.valid){
continue;
}
CheckValue<IkReal> x6349 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6347))+((gconst122*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6348.value)))+(x6349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6350=IKsin(j4);
IkReal x6351=IKcos(j4);
IkReal x6352=(gconst121*r11);
IkReal x6353=(gconst122*r00);
IkReal x6354=(cj2*sj1);
IkReal x6355=(gconst121*r01);
IkReal x6356=(gconst121*r21);
IkReal x6357=(cj1*sj2);
IkReal x6358=((1.0)*x6351);
IkReal x6359=(gconst122*x6350);
IkReal x6360=((1.0)*x6350);
evalcond[0]=(((r20*x6359))+(((-1.0)*r22*x6358))+(((-1.0)*x6356*x6360)));
evalcond[1]=(sj0+(((-1.0)*r02*x6358))+((x6350*x6353))+(((-1.0)*x6355*x6360)));
evalcond[2]=((((-1.0)*x6352*x6360))+((r10*x6359))+(((-1.0)*r12*x6358))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst122*r20*x6358))+(((-1.0)*r22*x6360))+((x6351*x6356)));
evalcond[4]=((((-1.0)*r02*x6360))+(((-1.0)*x6353*x6358))+((x6351*x6355))+((cj0*x6354))+((cj0*x6357)));
evalcond[5]=((((-1.0)*gconst122*r10*x6358))+((sj0*x6354))+((sj0*x6357))+(((-1.0)*r12*x6360))+((x6351*x6352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6361=((-1.0)*r01);
IkReal x6363 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6363)==0){
continue;
}
IkReal x6362=pow(x6363,-0.5);
CheckValue<IkReal> x6364 = IKatan2WithCheck(IkReal(x6361),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6364.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6364.value))));
IkReal gconst124=(x6361*x6362);
IkReal gconst125=((1.0)*r00*x6362);
CheckValue<IkReal> x6365 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6365.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6365.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6366=((-1.0)*r01);
CheckValue<IkReal> x6369 = IKatan2WithCheck(IkReal(x6366),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6369.valid){
continue;
}
IkReal x6367=((1.0)*(x6369.value));
IkReal x6368=x6362;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6367)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6367)));
IkReal gconst124=(x6366*x6368);
IkReal gconst125=((1.0)*r00*x6368);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x6370=((-1.0)*r01);
CheckValue<IkReal> x6373 = IKatan2WithCheck(IkReal(x6370),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6373.valid){
continue;
}
IkReal x6371=((1.0)*(x6373.value));
IkReal x6372=x6362;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6371)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6371)));
IkReal gconst124=(x6370*x6372);
IkReal gconst125=((1.0)*r00*x6372);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6374=((-1.0)*r01);
CheckValue<IkReal> x6377 = IKatan2WithCheck(IkReal(x6374),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6377.valid){
continue;
}
IkReal x6375=((1.0)*(x6377.value));
IkReal x6376=x6362;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6375)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6375)));
IkReal gconst124=(x6374*x6376);
IkReal gconst125=((1.0)*r00*x6376);
IkReal x6378=r02*r02;
IkReal x6379=(r12*sj0);
IkReal x6380=x6362;
IkReal x6381=(cj0*x6380);
j4eval[0]=((IKabs((x6379+((cj0*r02)))))+(IKabs(((((-1.0)*x6381))+((x6378*x6381))+((r02*x6379*x6380))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6382=((1.0)*gconst124);
CheckValue<IkReal> x6383 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*cj0*r01*x6382))+(((-1.0)*r11*sj0*x6382))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6383.valid){
continue;
}
CheckValue<IkReal> x6384=IKPowWithIntegerCheck(IKsign((((gconst124*r20))+((gconst125*r21)))),-1);
if(!x6384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6383.value)+(((1.5707963267949)*(x6384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6385=IKsin(j4);
IkReal x6386=IKcos(j4);
IkReal x6387=(cj2*sj1);
IkReal x6388=(cj1*sj2);
IkReal x6389=((1.0)*x6386);
IkReal x6390=(gconst125*x6385);
IkReal x6391=(gconst124*x6386);
IkReal x6392=((1.0)*x6385);
evalcond[0]=((((-1.0)*gconst124*r21*x6392))+((r20*x6390))+(((-1.0)*r22*x6389)));
evalcond[1]=(sj0+(((-1.0)*gconst124*r01*x6392))+((r00*x6390))+(((-1.0)*r02*x6389)));
evalcond[2]=((((-1.0)*r12*x6389))+((r10*x6390))+(((-1.0)*gconst124*r11*x6392))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6392))+((r21*x6391))+(((-1.0)*gconst125*r20*x6389)));
evalcond[4]=((((-1.0)*gconst125*r00*x6389))+((cj0*x6387))+((cj0*x6388))+((r01*x6391))+(((-1.0)*r02*x6392)));
evalcond[5]=(((sj0*x6388))+((sj0*x6387))+((r11*x6391))+(((-1.0)*gconst125*r10*x6389))+(((-1.0)*r12*x6392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6393=((1.0)*gconst124);
CheckValue<IkReal> x6394=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6393))+(((-1.0)*gconst125*r01)))),-1);
if(!x6394.valid){
continue;
}
CheckValue<IkReal> x6395 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6393))+((cj0*gconst125*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6394.value)))+(x6395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6396=IKsin(j4);
IkReal x6397=IKcos(j4);
IkReal x6398=(cj2*sj1);
IkReal x6399=(cj1*sj2);
IkReal x6400=((1.0)*x6397);
IkReal x6401=(gconst125*x6396);
IkReal x6402=(gconst124*x6397);
IkReal x6403=((1.0)*x6396);
evalcond[0]=(((r20*x6401))+(((-1.0)*gconst124*r21*x6403))+(((-1.0)*r22*x6400)));
evalcond[1]=(sj0+((r00*x6401))+(((-1.0)*r02*x6400))+(((-1.0)*gconst124*r01*x6403)));
evalcond[2]=(((r10*x6401))+(((-1.0)*gconst124*r11*x6403))+(((-1.0)*r12*x6400))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6402))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst125*r20*x6400))+(((-1.0)*r22*x6403)));
evalcond[4]=(((cj0*x6399))+((cj0*x6398))+((r01*x6402))+(((-1.0)*r02*x6403))+(((-1.0)*gconst125*r00*x6400)));
evalcond[5]=(((sj0*x6399))+((sj0*x6398))+(((-1.0)*gconst125*r10*x6400))+(((-1.0)*r12*x6403))+((r11*x6402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6404=((1.0)*gconst124);
CheckValue<IkReal> x6405=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6404))+(((-1.0)*gconst125*r11)))),-1);
if(!x6405.valid){
continue;
}
CheckValue<IkReal> x6406 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst125*r20*sj0))+(((-1.0)*r21*sj0*x6404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6405.value)))+(x6406.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6407=IKsin(j4);
IkReal x6408=IKcos(j4);
IkReal x6409=(cj2*sj1);
IkReal x6410=(cj1*sj2);
IkReal x6411=((1.0)*x6408);
IkReal x6412=(gconst125*x6407);
IkReal x6413=(gconst124*x6408);
IkReal x6414=((1.0)*x6407);
evalcond[0]=(((r20*x6412))+(((-1.0)*gconst124*r21*x6414))+(((-1.0)*r22*x6411)));
evalcond[1]=(sj0+((r00*x6412))+(((-1.0)*r02*x6411))+(((-1.0)*gconst124*r01*x6414)));
evalcond[2]=((((-1.0)*gconst124*r11*x6414))+((r10*x6412))+(((-1.0)*r12*x6411))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6413))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6414))+(((-1.0)*gconst125*r20*x6411)));
evalcond[4]=(((r01*x6413))+((cj0*x6410))+((cj0*x6409))+(((-1.0)*r02*x6414))+(((-1.0)*gconst125*r00*x6411)));
evalcond[5]=(((sj0*x6410))+((sj0*x6409))+(((-1.0)*gconst125*r10*x6411))+(((-1.0)*r12*x6414))+((r11*x6413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6415=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6415;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x6415);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6416=((1.0)*sj5);
IkReal x6417=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6416)));
j4eval[0]=x6417;
j4eval[1]=IKsign(x6417);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x6416))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6418=cj5*cj5;
IkReal x6419=r01*r01;
IkReal x6420=(cj5*r00);
IkReal x6421=(r01*sj5);
IkReal x6422=((((-2.0)*x6420*x6421))+x6419+(((-1.0)*x6418*x6419))+(r02*r02)+((x6418*(r00*r00))));
j4eval[0]=x6422;
j4eval[1]=((IKabs(((((-1.0)*x6420))+x6421)))+(IKabs(r02)));
j4eval[2]=IKsign(x6422);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6423=cj5*cj5;
IkReal x6424=r01*r01;
IkReal x6425=(r01*sj5);
IkReal x6426=(cj5*r00);
CheckValue<IkReal> x6427=IKPowWithIntegerCheck(IKsign((((x6423*(r00*r00)))+x6424+(((-1.0)*x6423*x6424))+(r02*r02)+(((-2.0)*x6425*x6426)))),-1);
if(!x6427.valid){
continue;
}
CheckValue<IkReal> x6428 = IKatan2WithCheck(IkReal(((((-1.0)*x6426))+x6425)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6427.value)))+(x6428.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6429=IKsin(j4);
IkReal x6430=IKcos(j4);
IkReal x6431=(cj5*r00);
IkReal x6432=(cj5*r20);
IkReal x6433=(cj5*r10);
IkReal x6434=((1.0)*x6430);
IkReal x6435=(sj5*x6430);
IkReal x6436=((1.0)*x6429);
IkReal x6437=(sj5*x6436);
evalcond[0]=(((x6429*x6432))+(((-1.0)*r22*x6434))+(((-1.0)*r21*x6437)));
evalcond[1]=(((x6429*x6433))+(((-1.0)*r12*x6434))+(((-1.0)*r11*x6437)));
evalcond[2]=(((r01*x6435))+(((-1.0)*r02*x6436))+(((-1.0)*x6431*x6434)));
evalcond[3]=((1.0)+((x6429*x6431))+(((-1.0)*r01*x6437))+(((-1.0)*r02*x6434)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x6435))+(((-1.0)*r12*x6436))+(((-1.0)*x6433*x6434)));
evalcond[5]=((((-1.0)*r22*x6436))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6432*x6434))+((r21*x6435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6438=((1.0)*sj5);
CheckValue<IkReal> x6439=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6438)))),-1);
if(!x6439.valid){
continue;
}
CheckValue<IkReal> x6440 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x6438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6439.value)))+(x6440.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6441=IKsin(j4);
IkReal x6442=IKcos(j4);
IkReal x6443=(cj5*r00);
IkReal x6444=(cj5*r20);
IkReal x6445=(cj5*r10);
IkReal x6446=((1.0)*x6442);
IkReal x6447=(sj5*x6442);
IkReal x6448=((1.0)*x6441);
IkReal x6449=(sj5*x6448);
evalcond[0]=((((-1.0)*r21*x6449))+(((-1.0)*r22*x6446))+((x6441*x6444)));
evalcond[1]=((((-1.0)*r12*x6446))+(((-1.0)*r11*x6449))+((x6441*x6445)));
evalcond[2]=(((r01*x6447))+(((-1.0)*r02*x6448))+(((-1.0)*x6443*x6446)));
evalcond[3]=((1.0)+(((-1.0)*r01*x6449))+(((-1.0)*r02*x6446))+((x6441*x6443)));
evalcond[4]=(((cj2*sj1))+((r11*x6447))+((cj1*sj2))+(((-1.0)*r12*x6448))+(((-1.0)*x6445*x6446)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6444*x6446))+((r21*x6447))+(((-1.0)*r22*x6448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6450 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6450.valid){
continue;
}
CheckValue<IkReal> x6451=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6450.value)+(((1.5707963267949)*(x6451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6452=IKsin(j4);
IkReal x6453=IKcos(j4);
IkReal x6454=(cj5*r00);
IkReal x6455=(cj5*r20);
IkReal x6456=(cj5*r10);
IkReal x6457=((1.0)*x6453);
IkReal x6458=(sj5*x6453);
IkReal x6459=((1.0)*x6452);
IkReal x6460=(sj5*x6459);
evalcond[0]=((((-1.0)*r21*x6460))+((x6452*x6455))+(((-1.0)*r22*x6457)));
evalcond[1]=(((x6452*x6456))+(((-1.0)*r12*x6457))+(((-1.0)*r11*x6460)));
evalcond[2]=(((r01*x6458))+(((-1.0)*r02*x6459))+(((-1.0)*x6454*x6457)));
evalcond[3]=((1.0)+(((-1.0)*r01*x6460))+(((-1.0)*r02*x6457))+((x6452*x6454)));
evalcond[4]=(((cj2*sj1))+((r11*x6458))+(((-1.0)*x6456*x6457))+((cj1*sj2))+(((-1.0)*r12*x6459)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6458))+(((-1.0)*x6455*x6457))+(((-1.0)*r22*x6459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6461=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6461;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x6461);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6462=((1.0)*sj5);
IkReal x6463=((((-1.0)*r20*x6462))+(((-1.0)*cj5*r21)));
j4eval[0]=x6463;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x6462)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6463);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6464=cj5*cj5;
IkReal x6465=r01*r01;
IkReal x6466=(r01*sj5);
IkReal x6467=(cj5*r00);
IkReal x6468=(((x6464*x6465))+(((2.0)*x6466*x6467))+(((-1.0)*(r02*r02)))+(((-1.0)*x6465))+(((-1.0)*x6464*(r00*r00))));
j4eval[0]=x6468;
j4eval[1]=IKsign(x6468);
j4eval[2]=((IKabs(r02))+(IKabs((x6466+(((-1.0)*x6467))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6469=cj5*cj5;
IkReal x6470=r01*r01;
IkReal x6471=(r01*sj5);
IkReal x6472=(cj5*r00);
CheckValue<IkReal> x6473 = IKatan2WithCheck(IkReal((x6471+(((-1.0)*x6472)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6473.valid){
continue;
}
CheckValue<IkReal> x6474=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x6471*x6472))+(((-1.0)*x6469*(r00*r00)))+(((-1.0)*x6470))+((x6469*x6470)))),-1);
if(!x6474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6473.value)+(((1.5707963267949)*(x6474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6475=IKsin(j4);
IkReal x6476=IKcos(j4);
IkReal x6477=(cj5*r00);
IkReal x6478=((1.0)*cj1);
IkReal x6479=(cj5*r20);
IkReal x6480=(cj5*r10);
IkReal x6481=((1.0)*x6476);
IkReal x6482=(sj5*x6476);
IkReal x6483=((1.0)*x6475);
IkReal x6484=(sj5*x6483);
evalcond[0]=((((-1.0)*r21*x6484))+(((-1.0)*r22*x6481))+((x6475*x6479)));
evalcond[1]=((((-1.0)*r12*x6481))+((x6475*x6480))+(((-1.0)*r11*x6484)));
evalcond[2]=(((r01*x6482))+(((-1.0)*r02*x6483))+(((-1.0)*x6477*x6481)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x6484))+(((-1.0)*r02*x6481))+((x6475*x6477)));
evalcond[4]=((((-1.0)*cj2*x6478))+((r21*x6482))+(((-1.0)*r22*x6483))+((sj1*sj2))+(((-1.0)*x6479*x6481)));
evalcond[5]=(((r11*x6482))+(((-1.0)*r12*x6483))+(((-1.0)*cj2*sj1))+(((-1.0)*x6480*x6481))+(((-1.0)*sj2*x6478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6485=((1.0)*sj5);
CheckValue<IkReal> x6486=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x6485)))),-1);
if(!x6486.valid){
continue;
}
CheckValue<IkReal> x6487 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x6485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6486.value)))+(x6487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6488=IKsin(j4);
IkReal x6489=IKcos(j4);
IkReal x6490=(cj5*r00);
IkReal x6491=((1.0)*cj1);
IkReal x6492=(cj5*r20);
IkReal x6493=(cj5*r10);
IkReal x6494=((1.0)*x6489);
IkReal x6495=(sj5*x6489);
IkReal x6496=((1.0)*x6488);
IkReal x6497=(sj5*x6496);
evalcond[0]=((((-1.0)*r22*x6494))+((x6488*x6492))+(((-1.0)*r21*x6497)));
evalcond[1]=((((-1.0)*r11*x6497))+(((-1.0)*r12*x6494))+((x6488*x6493)));
evalcond[2]=(((r01*x6495))+(((-1.0)*r02*x6496))+(((-1.0)*x6490*x6494)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6494))+(((-1.0)*r01*x6497))+((x6488*x6490)));
evalcond[4]=((((-1.0)*r22*x6496))+((sj1*sj2))+(((-1.0)*x6492*x6494))+(((-1.0)*cj2*x6491))+((r21*x6495)));
evalcond[5]=(((r11*x6495))+(((-1.0)*r12*x6496))+(((-1.0)*cj2*sj1))+(((-1.0)*x6493*x6494))+(((-1.0)*sj2*x6491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6498=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6498.valid){
continue;
}
CheckValue<IkReal> x6499 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6498.value)))+(x6499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6500=IKsin(j4);
IkReal x6501=IKcos(j4);
IkReal x6502=(cj5*r00);
IkReal x6503=((1.0)*cj1);
IkReal x6504=(cj5*r20);
IkReal x6505=(cj5*r10);
IkReal x6506=((1.0)*x6501);
IkReal x6507=(sj5*x6501);
IkReal x6508=((1.0)*x6500);
IkReal x6509=(sj5*x6508);
evalcond[0]=(((x6500*x6504))+(((-1.0)*r21*x6509))+(((-1.0)*r22*x6506)));
evalcond[1]=(((x6500*x6505))+(((-1.0)*r12*x6506))+(((-1.0)*r11*x6509)));
evalcond[2]=((((-1.0)*r02*x6508))+(((-1.0)*x6502*x6506))+((r01*x6507)));
evalcond[3]=((-1.0)+((x6500*x6502))+(((-1.0)*r01*x6509))+(((-1.0)*r02*x6506)));
evalcond[4]=(((r21*x6507))+((sj1*sj2))+(((-1.0)*cj2*x6503))+(((-1.0)*r22*x6508))+(((-1.0)*x6504*x6506)));
evalcond[5]=((((-1.0)*r12*x6508))+(((-1.0)*cj2*sj1))+((r11*x6507))+(((-1.0)*sj2*x6503))+(((-1.0)*x6505*x6506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6510=((-1.0)*r10);
IkReal x6512 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6512)==0){
continue;
}
IkReal x6511=pow(x6512,-0.5);
CheckValue<IkReal> x6513 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6510),IKFAST_ATAN2_MAGTHRESH);
if(!x6513.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6513.value));
IkReal gconst127=(r11*x6511);
IkReal gconst128=(x6510*x6511);
CheckValue<IkReal> x6514 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6514.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6514.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6515=((-1.0)*r10);
IkReal x6516=x6511;
CheckValue<IkReal> x6518 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6515),IKFAST_ATAN2_MAGTHRESH);
if(!x6518.valid){
continue;
}
IkReal x6517=((-1.0)*(x6518.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x6517;
IkReal gconst126=x6517;
IkReal gconst127=(r11*x6516);
IkReal gconst128=(x6515*x6516);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6519=((1.0)*gconst127);
CheckValue<IkReal> x6520 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x6519))+((cj0*gconst128*r00))+(((-1.0)*r11*sj0*x6519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6520.valid){
continue;
}
CheckValue<IkReal> x6521=IKPowWithIntegerCheck(IKsign((((gconst127*r20))+((gconst128*r21)))),-1);
if(!x6521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6520.value)+(((1.5707963267949)*(x6521.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6522=IKsin(j4);
IkReal x6523=IKcos(j4);
IkReal x6524=(cj2*sj1);
IkReal x6525=(gconst128*r10);
IkReal x6526=(cj1*sj2);
IkReal x6527=((1.0)*x6523);
IkReal x6528=(gconst127*x6523);
IkReal x6529=((1.0)*x6522);
IkReal x6530=(gconst128*x6522);
evalcond[0]=((((-1.0)*r22*x6527))+(((-1.0)*gconst127*r21*x6529))+((r20*x6530)));
evalcond[1]=(sj0+(((-1.0)*r02*x6527))+((r00*x6530))+(((-1.0)*gconst127*r01*x6529)));
evalcond[2]=((((-1.0)*gconst127*r11*x6529))+(((-1.0)*r12*x6527))+((x6522*x6525))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+(((-1.0)*r22*x6529))+((sj1*sj2))+(((-1.0)*gconst128*r20*x6527))+((r21*x6528)));
evalcond[4]=((((-1.0)*gconst128*r00*x6527))+(((-1.0)*r02*x6529))+((cj0*x6524))+((cj0*x6526))+((r01*x6528)));
evalcond[5]=((((-1.0)*r12*x6529))+((sj0*x6524))+((sj0*x6526))+(((-1.0)*x6525*x6527))+((r11*x6528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6531=((1.0)*gconst127);
CheckValue<IkReal> x6532=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r01))+(((-1.0)*r00*x6531)))),-1);
if(!x6532.valid){
continue;
}
CheckValue<IkReal> x6533 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst128*r20))+(((-1.0)*cj0*r21*x6531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6532.value)))+(x6533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6534=IKsin(j4);
IkReal x6535=IKcos(j4);
IkReal x6536=(cj2*sj1);
IkReal x6537=(gconst128*r10);
IkReal x6538=(cj1*sj2);
IkReal x6539=((1.0)*x6535);
IkReal x6540=(gconst127*x6535);
IkReal x6541=((1.0)*x6534);
IkReal x6542=(gconst128*x6534);
evalcond[0]=(((r20*x6542))+(((-1.0)*r22*x6539))+(((-1.0)*gconst127*r21*x6541)));
evalcond[1]=(sj0+(((-1.0)*r02*x6539))+(((-1.0)*gconst127*r01*x6541))+((r00*x6542)));
evalcond[2]=((((-1.0)*r12*x6539))+(((-1.0)*gconst127*r11*x6541))+((x6534*x6537))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst128*r20*x6539))+(((-1.0)*r22*x6541))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6540)));
evalcond[4]=(((cj0*x6538))+((cj0*x6536))+(((-1.0)*r02*x6541))+(((-1.0)*gconst128*r00*x6539))+((r01*x6540)));
evalcond[5]=(((sj0*x6536))+((sj0*x6538))+(((-1.0)*x6537*x6539))+(((-1.0)*r12*x6541))+((r11*x6540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6543=((-1.0)*r11);
IkReal x6545 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6545)==0){
continue;
}
IkReal x6544=pow(x6545,-0.5);
CheckValue<IkReal> x6546 = IKatan2WithCheck(IkReal(x6543),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6546.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6546.value))));
IkReal gconst130=(x6543*x6544);
IkReal gconst131=((1.0)*r10*x6544);
CheckValue<IkReal> x6547 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6547.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6547.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6548=((-1.0)*r11);
CheckValue<IkReal> x6551 = IKatan2WithCheck(IkReal(x6548),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6551.valid){
continue;
}
IkReal x6549=((1.0)*(x6551.value));
IkReal x6550=x6544;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6549)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6549)));
IkReal gconst130=(x6548*x6550);
IkReal gconst131=((1.0)*r10*x6550);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6552=((-1.0)*r11);
CheckValue<IkReal> x6555 = IKatan2WithCheck(IkReal(x6552),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6555.valid){
continue;
}
IkReal x6553=((1.0)*(x6555.value));
IkReal x6554=x6544;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6553)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6553)));
IkReal gconst130=(x6552*x6554);
IkReal gconst131=((1.0)*r10*x6554);
IkReal x6556=r12*r12;
IkReal x6557=(cj0*r02);
IkReal x6558=x6544;
IkReal x6559=(sj0*x6558);
j4eval[0]=((IKabs((x6557+((r12*sj0)))))+(IKabs((((r12*x6557*x6558))+(((-1.0)*x6559))+((x6556*x6559))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6560=((-1.0)*r11);
CheckValue<IkReal> x6563 = IKatan2WithCheck(IkReal(x6560),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6563.valid){
continue;
}
IkReal x6561=((1.0)*(x6563.value));
IkReal x6562=x6544;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6561)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6561)));
IkReal gconst130=(x6560*x6562);
IkReal gconst131=((1.0)*r10*x6562);
IkReal x6564=r12*r12;
IkReal x6565=(sj1*sj2);
IkReal x6566=((1.0)*cj1*cj2);
CheckValue<IkReal> x6570=IKPowWithIntegerCheck(((-1.0)+x6564),-1);
if(!x6570.valid){
continue;
}
IkReal x6567=x6570.value;
if((((1.0)+(((-1.0)*x6564)))) < -0.00001)
continue;
IkReal x6568=IKsqrt(((1.0)+(((-1.0)*x6564))));
IkReal x6569=(r12*r22*x6567*x6568);
j4eval[0]=((IKabs((((r22*x6565))+(((-1.0)*r22*x6566)))))+(IKabs(((((-1.0)*x6566*x6569))+((x6565*x6569))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6571=(gconst131*r20);
IkReal x6572=(cj1*cj2);
IkReal x6573=(sj1*sj2);
IkReal x6574=(gconst130*r21);
CheckValue<IkReal> x6575=IKPowWithIntegerCheck(IKsign(((x6574*x6574)+(r22*r22)+(((-2.0)*x6571*x6574))+(x6571*x6571))),-1);
if(!x6575.valid){
continue;
}
CheckValue<IkReal> x6576 = IKatan2WithCheck(IkReal((((r22*x6573))+(((-1.0)*r22*x6572)))),IkReal((((x6572*x6574))+(((-1.0)*x6571*x6572))+((x6571*x6573))+(((-1.0)*x6573*x6574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6575.value)))+(x6576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6577=IKsin(j4);
IkReal x6578=IKcos(j4);
IkReal x6579=(cj2*sj1);
IkReal x6580=(gconst131*r20);
IkReal x6581=(gconst131*r10);
IkReal x6582=(gconst131*r00);
IkReal x6583=(cj1*sj2);
IkReal x6584=((1.0)*x6578);
IkReal x6585=(gconst130*x6578);
IkReal x6586=((1.0)*x6577);
evalcond[0]=((((-1.0)*r22*x6584))+(((-1.0)*gconst130*r21*x6586))+((x6577*x6580)));
evalcond[1]=(sj0+(((-1.0)*r02*x6584))+((x6577*x6582))+(((-1.0)*gconst130*r01*x6586)));
evalcond[2]=((((-1.0)*r12*x6584))+(((-1.0)*gconst130*r11*x6586))+((x6577*x6581))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6585))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6586))+(((-1.0)*x6580*x6584)));
evalcond[4]=(((cj0*x6579))+((cj0*x6583))+(((-1.0)*r02*x6586))+((r01*x6585))+(((-1.0)*x6582*x6584)));
evalcond[5]=(((sj0*x6583))+((r11*x6585))+(((-1.0)*x6581*x6584))+(((-1.0)*r12*x6586))+((sj0*x6579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6587=((1.0)*gconst130);
CheckValue<IkReal> x6588 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x6587))+(((-1.0)*r11*sj0*x6587))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6588.valid){
continue;
}
CheckValue<IkReal> x6589=IKPowWithIntegerCheck(IKsign((((gconst131*r21))+((gconst130*r20)))),-1);
if(!x6589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6588.value)+(((1.5707963267949)*(x6589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6590=IKsin(j4);
IkReal x6591=IKcos(j4);
IkReal x6592=(cj2*sj1);
IkReal x6593=(gconst131*r20);
IkReal x6594=(gconst131*r10);
IkReal x6595=(gconst131*r00);
IkReal x6596=(cj1*sj2);
IkReal x6597=((1.0)*x6591);
IkReal x6598=(gconst130*x6591);
IkReal x6599=((1.0)*x6590);
evalcond[0]=((((-1.0)*gconst130*r21*x6599))+((x6590*x6593))+(((-1.0)*r22*x6597)));
evalcond[1]=(sj0+(((-1.0)*r02*x6597))+(((-1.0)*gconst130*r01*x6599))+((x6590*x6595)));
evalcond[2]=((((-1.0)*r12*x6597))+(((-1.0)*gconst130*r11*x6599))+((x6590*x6594))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6598))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6593*x6597))+(((-1.0)*r22*x6599)));
evalcond[4]=(((cj0*x6592))+((cj0*x6596))+(((-1.0)*r02*x6599))+((r01*x6598))+(((-1.0)*x6595*x6597)));
evalcond[5]=(((r11*x6598))+((sj0*x6596))+((sj0*x6592))+(((-1.0)*r12*x6599))+(((-1.0)*x6594*x6597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6600=((1.0)*gconst130);
CheckValue<IkReal> x6601=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r01))+(((-1.0)*r00*x6600)))),-1);
if(!x6601.valid){
continue;
}
CheckValue<IkReal> x6602 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst131*r20))+(((-1.0)*cj0*r21*x6600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6601.value)))+(x6602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6603=IKsin(j4);
IkReal x6604=IKcos(j4);
IkReal x6605=(cj2*sj1);
IkReal x6606=(gconst131*r20);
IkReal x6607=(gconst131*r10);
IkReal x6608=(gconst131*r00);
IkReal x6609=(cj1*sj2);
IkReal x6610=((1.0)*x6604);
IkReal x6611=(gconst130*x6604);
IkReal x6612=((1.0)*x6603);
evalcond[0]=((((-1.0)*r22*x6610))+(((-1.0)*gconst130*r21*x6612))+((x6603*x6606)));
evalcond[1]=(sj0+(((-1.0)*r02*x6610))+(((-1.0)*gconst130*r01*x6612))+((x6603*x6608)));
evalcond[2]=((((-1.0)*r12*x6610))+(((-1.0)*gconst130*r11*x6612))+((x6603*x6607))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6611))+(((-1.0)*x6606*x6610))+(((-1.0)*r22*x6612))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x6608*x6610))+((r01*x6611))+(((-1.0)*r02*x6612))+((cj0*x6605))+((cj0*x6609)));
evalcond[5]=((((-1.0)*r12*x6612))+(((-1.0)*x6607*x6610))+((sj0*x6605))+((sj0*x6609))+((r11*x6611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6613=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6613;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6613);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6614=((1.0)*sj5);
IkReal x6615=((((-1.0)*r00*x6614))+(((-1.0)*cj5*r01)));
j4eval[0]=x6615;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x6614)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6615);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6616=cj5*cj5;
IkReal x6617=r11*r11;
IkReal x6618=(cj5*r10);
IkReal x6619=(r11*sj5);
IkReal x6620=((((-1.0)*x6616*(r10*r10)))+(((-1.0)*x6617))+(((-1.0)*(r12*r12)))+((x6616*x6617))+(((2.0)*x6618*x6619)));
j4eval[0]=x6620;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x6618))+x6619))));
j4eval[2]=IKsign(x6620);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6621=cj5*cj5;
IkReal x6622=r11*r11;
IkReal x6623=(cj5*r10);
IkReal x6624=(r11*sj5);
CheckValue<IkReal> x6625 = IKatan2WithCheck(IkReal(((((-1.0)*x6623))+x6624)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6625.valid){
continue;
}
CheckValue<IkReal> x6626=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6622))+(((-1.0)*x6621*(r10*r10)))+((x6621*x6622))+(((-1.0)*(r12*r12)))+(((2.0)*x6623*x6624)))),-1);
if(!x6626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6625.value)+(((1.5707963267949)*(x6626.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6627=IKsin(j4);
IkReal x6628=IKcos(j4);
IkReal x6629=(cj5*r00);
IkReal x6630=((1.0)*x6628);
IkReal x6631=(sj5*x6628);
IkReal x6632=(cj5*x6627);
IkReal x6633=((1.0)*x6627);
IkReal x6634=(sj5*x6633);
evalcond[0]=((((-1.0)*r21*x6634))+(((-1.0)*r22*x6630))+((r20*x6632)));
evalcond[1]=(((x6627*x6629))+(((-1.0)*r02*x6630))+(((-1.0)*r01*x6634)));
evalcond[2]=((((-1.0)*cj5*r10*x6630))+((r11*x6631))+(((-1.0)*r12*x6633)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x6634))+((r10*x6632))+(((-1.0)*r12*x6630)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x6631))+(((-1.0)*x6629*x6630))+(((-1.0)*r02*x6633)));
evalcond[5]=((((-1.0)*r22*x6633))+((r21*x6631))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x6630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6635=((1.0)*sj5);
CheckValue<IkReal> x6636 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x6635))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6636.valid){
continue;
}
CheckValue<IkReal> x6637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6635))+(((-1.0)*cj5*r01)))),-1);
if(!x6637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6636.value)+(((1.5707963267949)*(x6637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6638=IKsin(j4);
IkReal x6639=IKcos(j4);
IkReal x6640=(cj5*r00);
IkReal x6641=((1.0)*x6639);
IkReal x6642=(sj5*x6639);
IkReal x6643=(cj5*x6638);
IkReal x6644=((1.0)*x6638);
IkReal x6645=(sj5*x6644);
evalcond[0]=((((-1.0)*r21*x6645))+(((-1.0)*r22*x6641))+((r20*x6643)));
evalcond[1]=(((x6638*x6640))+(((-1.0)*r02*x6641))+(((-1.0)*r01*x6645)));
evalcond[2]=((((-1.0)*cj5*r10*x6641))+((r11*x6642))+(((-1.0)*r12*x6644)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x6645))+((r10*x6643))+(((-1.0)*r12*x6641)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6640*x6641))+((cj1*sj2))+((r01*x6642))+(((-1.0)*r02*x6644)));
evalcond[5]=((((-1.0)*r22*x6644))+((r21*x6642))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x6641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6646=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6646.valid){
continue;
}
CheckValue<IkReal> x6647 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6646.value)))+(x6647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6648=IKsin(j4);
IkReal x6649=IKcos(j4);
IkReal x6650=(cj5*r00);
IkReal x6651=((1.0)*x6649);
IkReal x6652=(sj5*x6649);
IkReal x6653=(cj5*x6648);
IkReal x6654=((1.0)*x6648);
IkReal x6655=(sj5*x6654);
evalcond[0]=((((-1.0)*r22*x6651))+(((-1.0)*r21*x6655))+((r20*x6653)));
evalcond[1]=((((-1.0)*r01*x6655))+(((-1.0)*r02*x6651))+((x6648*x6650)));
evalcond[2]=((((-1.0)*cj5*r10*x6651))+((r11*x6652))+(((-1.0)*r12*x6654)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6651))+(((-1.0)*r11*x6655))+((r10*x6653)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6650*x6651))+((r01*x6652))+(((-1.0)*r02*x6654)));
evalcond[5]=((((-1.0)*r22*x6654))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x6651))+((r21*x6652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6656=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6656;
j4eval[1]=IKsign(x6656);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6657=((1.0)*sj5);
IkReal x6658=((((-1.0)*r20*x6657))+(((-1.0)*cj5*r21)));
j4eval[0]=x6658;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x6657))+((cj5*r00))))));
j4eval[2]=IKsign(x6658);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6659=cj5*cj5;
IkReal x6660=r11*r11;
IkReal x6661=(r11*sj5);
IkReal x6662=(cj5*r10);
IkReal x6663=((r12*r12)+x6660+(((-2.0)*x6661*x6662))+(((-1.0)*x6659*x6660))+((x6659*(r10*r10))));
j4eval[0]=x6663;
j4eval[1]=IKsign(x6663);
j4eval[2]=((IKabs(r12))+(IKabs((x6661+(((-1.0)*x6662))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6664=cj5*cj5;
IkReal x6665=r11*r11;
IkReal x6666=(cj5*r10);
IkReal x6667=(r11*sj5);
CheckValue<IkReal> x6668 = IKatan2WithCheck(IkReal((x6667+(((-1.0)*x6666)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6668.valid){
continue;
}
CheckValue<IkReal> x6669=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6664*x6665))+(r12*r12)+((x6664*(r10*r10)))+x6665+(((-2.0)*x6666*x6667)))),-1);
if(!x6669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6668.value)+(((1.5707963267949)*(x6669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6670=IKsin(j4);
IkReal x6671=IKcos(j4);
IkReal x6672=(cj5*r00);
IkReal x6673=((1.0)*cj1);
IkReal x6674=((1.0)*x6671);
IkReal x6675=(sj5*x6671);
IkReal x6676=(cj5*x6670);
IkReal x6677=((1.0)*x6670);
IkReal x6678=(sj5*x6677);
evalcond[0]=(((r20*x6676))+(((-1.0)*r21*x6678))+(((-1.0)*r22*x6674)));
evalcond[1]=((((-1.0)*r02*x6674))+(((-1.0)*r01*x6678))+((x6670*x6672)));
evalcond[2]=(((r11*x6675))+(((-1.0)*r12*x6677))+(((-1.0)*cj5*r10*x6674)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6674))+(((-1.0)*r11*x6678))+((r10*x6676)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x6673))+(((-1.0)*r22*x6677))+((r21*x6675))+(((-1.0)*cj5*r20*x6674)));
evalcond[5]=((((-1.0)*r02*x6677))+(((-1.0)*x6672*x6674))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x6673))+((r01*x6675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6679=((1.0)*sj5);
CheckValue<IkReal> x6680=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6679))+(((-1.0)*cj5*r21)))),-1);
if(!x6680.valid){
continue;
}
CheckValue<IkReal> x6681 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x6679))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6680.value)))+(x6681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6682=IKsin(j4);
IkReal x6683=IKcos(j4);
IkReal x6684=(cj5*r00);
IkReal x6685=((1.0)*cj1);
IkReal x6686=((1.0)*x6683);
IkReal x6687=(sj5*x6683);
IkReal x6688=(cj5*x6682);
IkReal x6689=((1.0)*x6682);
IkReal x6690=(sj5*x6689);
evalcond[0]=((((-1.0)*r21*x6690))+((r20*x6688))+(((-1.0)*r22*x6686)));
evalcond[1]=((((-1.0)*r02*x6686))+(((-1.0)*r01*x6690))+((x6682*x6684)));
evalcond[2]=(((r11*x6687))+(((-1.0)*cj5*r10*x6686))+(((-1.0)*r12*x6689)));
evalcond[3]=((1.0)+((r10*x6688))+(((-1.0)*r11*x6690))+(((-1.0)*r12*x6686)));
evalcond[4]=((((-1.0)*cj2*x6685))+((r21*x6687))+((sj1*sj2))+(((-1.0)*cj5*r20*x6686))+(((-1.0)*r22*x6689)));
evalcond[5]=((((-1.0)*r02*x6689))+(((-1.0)*cj2*sj1))+((r01*x6687))+(((-1.0)*x6684*x6686))+(((-1.0)*sj2*x6685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6691=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6691.valid){
continue;
}
CheckValue<IkReal> x6692 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6691.value)))+(x6692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6693=IKsin(j4);
IkReal x6694=IKcos(j4);
IkReal x6695=(cj5*r00);
IkReal x6696=((1.0)*cj1);
IkReal x6697=((1.0)*x6694);
IkReal x6698=(sj5*x6694);
IkReal x6699=(cj5*x6693);
IkReal x6700=((1.0)*x6693);
IkReal x6701=(sj5*x6700);
evalcond[0]=((((-1.0)*r21*x6701))+((r20*x6699))+(((-1.0)*r22*x6697)));
evalcond[1]=((((-1.0)*r02*x6697))+((x6693*x6695))+(((-1.0)*r01*x6701)));
evalcond[2]=(((r11*x6698))+(((-1.0)*cj5*r10*x6697))+(((-1.0)*r12*x6700)));
evalcond[3]=((1.0)+((r10*x6699))+(((-1.0)*r12*x6697))+(((-1.0)*r11*x6701)));
evalcond[4]=((((-1.0)*cj2*x6696))+(((-1.0)*r22*x6700))+((sj1*sj2))+((r21*x6698))+(((-1.0)*cj5*r20*x6697)));
evalcond[5]=((((-1.0)*r02*x6700))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x6696))+((r01*x6698))+(((-1.0)*x6695*x6697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6702=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6702);
rxp0_2=(py*r00);
rxp1_0=(r21*x6702);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6703=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6703);
rxp0_2=(py*r00);
rxp1_0=(r21*x6703);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6704=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6704);
rxp0_2=(py*r00);
rxp1_0=(r21*x6704);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6707=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x6707.valid){
continue;
}
IkReal x6705=x6707.value;
IkReal x6706=((1.0)*cj0*x6705);
cj4array[0]=((((-1.0)*cj1*sj2*x6706))+(((-1.0)*cj2*sj1*x6706)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6708=IKsin(j4);
IkReal x6709=IKcos(j4);
IkReal x6710=(cj5*r20);
IkReal x6711=((1.0)*x6709);
IkReal x6712=((1.0)*sj5*x6708);
evalcond[0]=((-1.0)*r12*x6708);
evalcond[1]=((((-1.0)*r12*x6711))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x6712))+((x6708*x6710)));
evalcond[3]=((((-1.0)*r01*x6712))+((cj5*r00*x6708)));
evalcond[4]=(((r21*sj5*x6709))+(((-1.0)*x6710*x6711))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6714=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6714.valid){
continue;
}
IkReal x6713=x6714.value;
cj4array[0]=(((cj1*cj2*x6713))+(((-1.0)*sj1*sj2*x6713)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6715=IKsin(j4);
IkReal x6716=IKcos(j4);
IkReal x6717=(cj5*r00);
IkReal x6718=(r01*sj5);
IkReal x6719=((1.0)*x6716);
IkReal x6720=((1.0)*x6715);
evalcond[0]=((-1.0)*r12*x6715);
evalcond[1]=((((-1.0)*r12*x6719))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*sj5*x6720))+((cj5*r20*x6715)));
evalcond[3]=((((-1.0)*x6718*x6720))+((x6715*x6717)));
evalcond[4]=(((x6716*x6718))+(((-1.0)*x6717*x6719))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6721=IKPowWithIntegerCheck(r12,-1);
if(!x6721.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x6721.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6722=IKsin(j4);
IkReal x6723=IKcos(j4);
IkReal x6724=(sj5*x6723);
IkReal x6725=(cj5*x6722);
IkReal x6726=((1.0)*sj5*x6722);
IkReal x6727=((1.0)*cj5*x6723);
evalcond[0]=((-1.0)*r12*x6722);
evalcond[1]=(((r20*x6725))+(((-1.0)*r21*x6726)));
evalcond[2]=((((-1.0)*r01*x6726))+((r00*x6725)));
evalcond[3]=((((-1.0)*r20*x6727))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6724)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*r00*x6727))+((cj0*cj1*sj2))+((r01*x6724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6728=((1.0)*sj5);
CheckValue<IkReal> x6729 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+(((-1.0)*cj0*r01*x6728))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x6728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6729.valid){
continue;
}
CheckValue<IkReal> x6730=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6729.value)+(((1.5707963267949)*(x6730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6731=IKsin(j4);
IkReal x6732=IKcos(j4);
IkReal x6733=(cj5*r00);
IkReal x6734=(cj2*sj1);
IkReal x6735=(cj1*sj2);
IkReal x6736=((1.0)*x6732);
IkReal x6737=(sj5*x6732);
IkReal x6738=(cj5*x6731);
IkReal x6739=((1.0)*x6731);
IkReal x6740=(sj5*x6739);
evalcond[0]=((((-1.0)*r21*x6740))+(((-1.0)*r22*x6736))+((r20*x6738)));
evalcond[1]=(sj0+((x6731*x6733))+(((-1.0)*r01*x6740))+(((-1.0)*r02*x6736)));
evalcond[2]=((((-1.0)*r11*x6740))+(((-1.0)*r12*x6736))+((r10*x6738))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x6737))+(((-1.0)*r22*x6739))+(((-1.0)*cj5*r20*x6736))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x6733*x6736))+(((-1.0)*r02*x6739))+((r01*x6737))+((cj0*x6735))+((cj0*x6734)));
evalcond[5]=((((-1.0)*cj5*r10*x6736))+(((-1.0)*r12*x6739))+((sj0*x6735))+((sj0*x6734))+((r11*x6737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6741=((1.0)*sj5);
CheckValue<IkReal> x6742=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6741))+(((-1.0)*cj5*r01)))),-1);
if(!x6742.valid){
continue;
}
CheckValue<IkReal> x6743 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6742.value)))+(x6743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6744=IKsin(j4);
IkReal x6745=IKcos(j4);
IkReal x6746=(cj5*r00);
IkReal x6747=(cj2*sj1);
IkReal x6748=(cj1*sj2);
IkReal x6749=((1.0)*x6745);
IkReal x6750=(sj5*x6745);
IkReal x6751=(cj5*x6744);
IkReal x6752=((1.0)*x6744);
IkReal x6753=(sj5*x6752);
evalcond[0]=((((-1.0)*r22*x6749))+((r20*x6751))+(((-1.0)*r21*x6753)));
evalcond[1]=(sj0+((x6744*x6746))+(((-1.0)*r02*x6749))+(((-1.0)*r01*x6753)));
evalcond[2]=((((-1.0)*r12*x6749))+((r10*x6751))+(((-1.0)*r11*x6753))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj5*r20*x6749))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6752))+((r21*x6750)));
evalcond[4]=(((cj0*x6747))+((cj0*x6748))+((r01*x6750))+(((-1.0)*x6746*x6749))+(((-1.0)*r02*x6752)));
evalcond[5]=((((-1.0)*cj5*r10*x6749))+((sj0*x6748))+((sj0*x6747))+((r11*x6750))+(((-1.0)*r12*x6752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6754=((1.0)*sj5);
CheckValue<IkReal> x6755=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6754)))),-1);
if(!x6755.valid){
continue;
}
CheckValue<IkReal> x6756 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6755.value)))+(x6756.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6757=IKsin(j4);
IkReal x6758=IKcos(j4);
IkReal x6759=(cj5*r00);
IkReal x6760=(cj2*sj1);
IkReal x6761=(cj1*sj2);
IkReal x6762=((1.0)*x6758);
IkReal x6763=(sj5*x6758);
IkReal x6764=(cj5*x6757);
IkReal x6765=((1.0)*x6757);
IkReal x6766=(sj5*x6765);
evalcond[0]=((((-1.0)*r22*x6762))+((r20*x6764))+(((-1.0)*r21*x6766)));
evalcond[1]=(sj0+((x6757*x6759))+(((-1.0)*r01*x6766))+(((-1.0)*r02*x6762)));
evalcond[2]=(((r10*x6764))+(((-1.0)*r11*x6766))+(((-1.0)*r12*x6762))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6765))+((r21*x6763))+(((-1.0)*cj5*r20*x6762)));
evalcond[4]=(((cj0*x6760))+((cj0*x6761))+((r01*x6763))+(((-1.0)*x6759*x6762))+(((-1.0)*r02*x6765)));
evalcond[5]=(((r11*x6763))+(((-1.0)*cj5*r10*x6762))+(((-1.0)*r12*x6765))+((sj0*x6760))+((sj0*x6761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6767=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x6767;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x6767);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6768=r21*r21;
IkReal x6769=cj5*cj5;
IkReal x6770=(sj1*sj2);
IkReal x6771=(r21*sj5);
IkReal x6772=(cj1*cj2);
IkReal x6773=(cj5*r20);
IkReal x6774=((((-1.0)*x6769*(r20*r20)))+(((-1.0)*x6768))+(((2.0)*x6771*x6773))+(((-1.0)*(r22*r22)))+((x6768*x6769)));
j4eval[0]=x6774;
j4eval[1]=((IKabs((((r22*x6770))+(((-1.0)*r22*x6772)))))+(IKabs((((x6770*x6773))+(((-1.0)*x6770*x6771))+((x6771*x6772))+(((-1.0)*x6772*x6773))))));
j4eval[2]=IKsign(x6774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.465585089389861)*px))+(((-1.50324547478535)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.465585089389861)*py))+(((-1.50324547478535)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.465585089389861)*px))+(((-1.50324547478535)*py))))+IKsqr(((((-0.465585089389861)*py))+(((-1.50324547478535)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.465585089389861)*px))+(((-1.50324547478535)*py))), ((((-0.465585089389861)*py))+(((-1.50324547478535)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6775=IKcos(j0);
IkReal x6776=IKsin(j0);
evalcond[0]=((((-0.607)*x6775))+(((-1.0)*px))+(((0.188)*x6776)));
evalcond[1]=((((-0.188)*x6775))+(((-0.607)*x6776))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6777=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6777;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6778=((1.0)*sj5);
IkReal x6779=((((-1.0)*r00*x6778))+(((-1.0)*cj5*r01)));
j4eval[0]=x6779;
j4eval[1]=IKsign(x6779);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x6778))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6780=cj5*cj5;
IkReal x6781=((1.0)*r21);
IkReal x6782=(cj5*r20);
IkReal x6783=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x6780))+((cj5*r00*r21*sj5))+((r01*sj5*x6782))+((r01*r21*x6780))+(((-1.0)*r01*x6781)));
j4eval[0]=x6783;
j4eval[1]=IKsign(x6783);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x6782))+(((-1.0)*cj0*sj5*x6781))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6784=cj5*cj5;
IkReal x6785=((1.0)*r21);
IkReal x6786=(cj5*r20);
CheckValue<IkReal> x6787 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x6786))+(((-1.0)*cj0*sj5*x6785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6787.valid){
continue;
}
CheckValue<IkReal> x6788=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x6784))+((cj5*r00*r21*sj5))+((r01*sj5*x6786))+((r01*r21*x6784))+(((-1.0)*r01*x6785)))),-1);
if(!x6788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6787.value)+(((1.5707963267949)*(x6788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6789=IKcos(j4);
IkReal x6790=IKsin(j4);
IkReal x6791=(r11*sj5);
IkReal x6792=(r21*sj5);
IkReal x6793=(r01*sj5);
IkReal x6794=((1.0)*x6789);
IkReal x6795=((1.0)*x6790);
IkReal x6796=(cj5*x6789);
IkReal x6797=(cj5*x6790);
evalcond[0]=(((r22*x6790))+(((-1.0)*x6792*x6794))+((r20*x6796)));
evalcond[1]=((((-1.0)*x6792*x6795))+((r20*x6797))+(((-1.0)*r22*x6794)));
evalcond[2]=(((r02*x6790))+cj0+((r00*x6796))+(((-1.0)*x6793*x6794)));
evalcond[3]=(sj0+((r12*x6790))+(((-1.0)*x6791*x6794))+((r10*x6796)));
evalcond[4]=(sj0+((r00*x6797))+(((-1.0)*x6793*x6795))+(((-1.0)*r02*x6794)));
evalcond[5]=((((-1.0)*x6791*x6795))+((r10*x6797))+(((-1.0)*cj0))+(((-1.0)*r12*x6794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6798=((1.0)*sj5);
CheckValue<IkReal> x6799=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6798))+(((-1.0)*cj5*r01)))),-1);
if(!x6799.valid){
continue;
}
CheckValue<IkReal> x6800 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x6798))+((cj5*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6799.value)))+(x6800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6801=IKcos(j4);
IkReal x6802=IKsin(j4);
IkReal x6803=(r11*sj5);
IkReal x6804=(r21*sj5);
IkReal x6805=(r01*sj5);
IkReal x6806=((1.0)*x6801);
IkReal x6807=((1.0)*x6802);
IkReal x6808=(cj5*x6801);
IkReal x6809=(cj5*x6802);
evalcond[0]=(((r22*x6802))+(((-1.0)*x6804*x6806))+((r20*x6808)));
evalcond[1]=((((-1.0)*x6804*x6807))+((r20*x6809))+(((-1.0)*r22*x6806)));
evalcond[2]=(cj0+((r00*x6808))+(((-1.0)*x6805*x6806))+((r02*x6802)));
evalcond[3]=(sj0+(((-1.0)*x6803*x6806))+((r10*x6808))+((r12*x6802)));
evalcond[4]=(sj0+(((-1.0)*r02*x6806))+((r00*x6809))+(((-1.0)*x6805*x6807)));
evalcond[5]=((((-1.0)*x6803*x6807))+(((-1.0)*r12*x6806))+((r10*x6809))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6810 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6810.valid){
continue;
}
CheckValue<IkReal> x6811=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6810.value)+(((1.5707963267949)*(x6811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6812=IKcos(j4);
IkReal x6813=IKsin(j4);
IkReal x6814=(r11*sj5);
IkReal x6815=(r21*sj5);
IkReal x6816=(r01*sj5);
IkReal x6817=((1.0)*x6812);
IkReal x6818=((1.0)*x6813);
IkReal x6819=(cj5*x6812);
IkReal x6820=(cj5*x6813);
evalcond[0]=(((r22*x6813))+(((-1.0)*x6815*x6817))+((r20*x6819)));
evalcond[1]=(((r20*x6820))+(((-1.0)*x6815*x6818))+(((-1.0)*r22*x6817)));
evalcond[2]=((((-1.0)*x6816*x6817))+cj0+((r02*x6813))+((r00*x6819)));
evalcond[3]=(((r12*x6813))+sj0+((r10*x6819))+(((-1.0)*x6814*x6817)));
evalcond[4]=((((-1.0)*x6816*x6818))+sj0+((r00*x6820))+(((-1.0)*r02*x6817)));
evalcond[5]=(((r10*x6820))+(((-1.0)*r12*x6817))+(((-1.0)*x6814*x6818))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.465585089389861)*px))+(((-1.50324547478535)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.465585089389861)*py))+(((-1.50324547478535)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.465585089389861)*px))+(((-1.50324547478535)*py))))+IKsqr(((((-0.465585089389861)*py))+(((-1.50324547478535)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.465585089389861)*px))+(((-1.50324547478535)*py))), ((((-0.465585089389861)*py))+(((-1.50324547478535)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6821=IKcos(j0);
IkReal x6822=IKsin(j0);
evalcond[0]=((((0.188)*x6822))+(((-0.607)*x6821))+(((-1.0)*px)));
evalcond[1]=((((-0.607)*x6822))+(((-1.0)*py))+(((-0.188)*x6821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6823=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6823;
j4eval[1]=IKsign(x6823);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6824=((1.0)*sj5);
IkReal x6825=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6824)));
j4eval[0]=x6825;
j4eval[1]=IKsign(x6825);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6824)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6826=((1.0)*sj5);
IkReal x6827=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6826)));
j4eval[0]=x6827;
j4eval[1]=IKsign(x6827);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6826)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6828=((1.0)*sj5);
CheckValue<IkReal> x6829=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6828)))),-1);
if(!x6829.valid){
continue;
}
CheckValue<IkReal> x6830 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6828)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6829.value)))+(x6830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6831=IKcos(j4);
IkReal x6832=IKsin(j4);
IkReal x6833=((1.0)*cj0);
IkReal x6834=(r11*sj5);
IkReal x6835=(r21*sj5);
IkReal x6836=(r01*sj5);
IkReal x6837=((1.0)*x6831);
IkReal x6838=(cj5*x6831);
IkReal x6839=((1.0)*x6832);
IkReal x6840=(cj5*x6832);
evalcond[0]=(((r22*x6832))+((r20*x6838))+(((-1.0)*x6835*x6837)));
evalcond[1]=((((-1.0)*r22*x6837))+((r20*x6840))+(((-1.0)*x6835*x6839)));
evalcond[2]=(sj0+(((-1.0)*r02*x6837))+((r00*x6840))+(((-1.0)*x6836*x6839)));
evalcond[3]=(((r02*x6832))+((r00*x6838))+(((-1.0)*x6836*x6837))+(((-1.0)*x6833)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6838))+((r12*x6832))+(((-1.0)*x6834*x6837)));
evalcond[5]=((((-1.0)*r12*x6837))+(((-1.0)*x6834*x6839))+((r10*x6840))+(((-1.0)*x6833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6841=((1.0)*sj5);
CheckValue<IkReal> x6842 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6842.valid){
continue;
}
CheckValue<IkReal> x6843=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6841)))),-1);
if(!x6843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6842.value)+(((1.5707963267949)*(x6843.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6844=IKcos(j4);
IkReal x6845=IKsin(j4);
IkReal x6846=((1.0)*cj0);
IkReal x6847=(r11*sj5);
IkReal x6848=(r21*sj5);
IkReal x6849=(r01*sj5);
IkReal x6850=((1.0)*x6844);
IkReal x6851=(cj5*x6844);
IkReal x6852=((1.0)*x6845);
IkReal x6853=(cj5*x6845);
evalcond[0]=(((r22*x6845))+((r20*x6851))+(((-1.0)*x6848*x6850)));
evalcond[1]=(((r20*x6853))+(((-1.0)*r22*x6850))+(((-1.0)*x6848*x6852)));
evalcond[2]=(sj0+(((-1.0)*r02*x6850))+((r00*x6853))+(((-1.0)*x6849*x6852)));
evalcond[3]=(((r00*x6851))+(((-1.0)*x6846))+(((-1.0)*x6849*x6850))+((r02*x6845)));
evalcond[4]=((((-1.0)*sj0))+((r12*x6845))+((r10*x6851))+(((-1.0)*x6847*x6850)));
evalcond[5]=(((r10*x6853))+(((-1.0)*x6847*x6852))+(((-1.0)*x6846))+(((-1.0)*r12*x6850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6854 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6854.valid){
continue;
}
CheckValue<IkReal> x6855=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6854.value)+(((1.5707963267949)*(x6855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6856=IKcos(j4);
IkReal x6857=IKsin(j4);
IkReal x6858=((1.0)*cj0);
IkReal x6859=(r11*sj5);
IkReal x6860=(r21*sj5);
IkReal x6861=(r01*sj5);
IkReal x6862=((1.0)*x6856);
IkReal x6863=(cj5*x6856);
IkReal x6864=((1.0)*x6857);
IkReal x6865=(cj5*x6857);
evalcond[0]=((((-1.0)*x6860*x6862))+((r22*x6857))+((r20*x6863)));
evalcond[1]=((((-1.0)*x6860*x6864))+(((-1.0)*r22*x6862))+((r20*x6865)));
evalcond[2]=(sj0+(((-1.0)*x6861*x6864))+(((-1.0)*r02*x6862))+((r00*x6865)));
evalcond[3]=((((-1.0)*x6858))+((r02*x6857))+(((-1.0)*x6861*x6862))+((r00*x6863)));
evalcond[4]=((((-1.0)*sj0))+((r12*x6857))+((r10*x6863))+(((-1.0)*x6859*x6862)));
evalcond[5]=((((-1.0)*x6858))+(((-1.0)*r12*x6862))+((r10*x6865))+(((-1.0)*x6859*x6864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.31914893617021)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.31914893617021)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.31914893617021)*px))+IKsqr(((-5.31914893617021)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.31914893617021)*px), ((-5.31914893617021)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.188)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.188)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6866=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6866;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6866);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6867=((1.0)*sj5);
IkReal x6868=((((-1.0)*r00*x6867))+(((-1.0)*cj5*r01)));
j4eval[0]=x6868;
j4eval[1]=IKsign(x6868);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6867))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6869=cj5*cj5;
IkReal x6870=((1.0)*r21);
IkReal x6871=(cj5*r20);
IkReal x6872=((((-1.0)*r02*r22))+(((-1.0)*r01*x6870))+((r01*sj5*x6871))+(((-1.0)*r00*r20*x6869))+((cj5*r00*r21*sj5))+((r01*r21*x6869)));
j4eval[0]=x6872;
j4eval[1]=IKsign(x6872);
j4eval[2]=((IKabs((((cj0*x6871))+(((-1.0)*cj0*sj5*x6870)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6873=cj5*cj5;
IkReal x6874=((1.0)*r21);
IkReal x6875=(cj5*r20);
CheckValue<IkReal> x6876=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r01*x6874))+((r01*sj5*x6875))+(((-1.0)*r00*r20*x6873))+((cj5*r00*r21*sj5))+((r01*r21*x6873)))),-1);
if(!x6876.valid){
continue;
}
CheckValue<IkReal> x6877 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x6875))+(((-1.0)*cj0*sj5*x6874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6876.value)))+(x6877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6878=IKcos(j4);
IkReal x6879=IKsin(j4);
IkReal x6880=(r11*sj5);
IkReal x6881=(r21*sj5);
IkReal x6882=(r01*sj5);
IkReal x6883=((1.0)*x6878);
IkReal x6884=((1.0)*x6879);
IkReal x6885=(cj5*x6878);
IkReal x6886=(cj5*x6879);
evalcond[0]=(((r20*x6885))+(((-1.0)*x6881*x6883))+((r22*x6879)));
evalcond[1]=(((r20*x6886))+(((-1.0)*x6881*x6884))+(((-1.0)*r22*x6883)));
evalcond[2]=(((r02*x6879))+cj0+(((-1.0)*x6882*x6883))+((r00*x6885)));
evalcond[3]=(sj0+((r12*x6879))+(((-1.0)*x6880*x6883))+((r10*x6885)));
evalcond[4]=(sj0+(((-1.0)*r02*x6883))+(((-1.0)*x6882*x6884))+((r00*x6886)));
evalcond[5]=((((-1.0)*x6880*x6884))+(((-1.0)*r12*x6883))+(((-1.0)*cj0))+((r10*x6886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6887=((1.0)*sj5);
CheckValue<IkReal> x6888=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6887))+(((-1.0)*cj5*r01)))),-1);
if(!x6888.valid){
continue;
}
CheckValue<IkReal> x6889 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6887)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6888.value)))+(x6889.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6890=IKcos(j4);
IkReal x6891=IKsin(j4);
IkReal x6892=(r11*sj5);
IkReal x6893=(r21*sj5);
IkReal x6894=(r01*sj5);
IkReal x6895=((1.0)*x6890);
IkReal x6896=((1.0)*x6891);
IkReal x6897=(cj5*x6890);
IkReal x6898=(cj5*x6891);
evalcond[0]=(((r22*x6891))+(((-1.0)*x6893*x6895))+((r20*x6897)));
evalcond[1]=((((-1.0)*x6893*x6896))+(((-1.0)*r22*x6895))+((r20*x6898)));
evalcond[2]=(cj0+(((-1.0)*x6894*x6895))+((r02*x6891))+((r00*x6897)));
evalcond[3]=(((r10*x6897))+sj0+((r12*x6891))+(((-1.0)*x6892*x6895)));
evalcond[4]=(sj0+(((-1.0)*x6894*x6896))+(((-1.0)*r02*x6895))+((r00*x6898)));
evalcond[5]=(((r10*x6898))+(((-1.0)*x6892*x6896))+(((-1.0)*r12*x6895))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6899 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6899.valid){
continue;
}
CheckValue<IkReal> x6900=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6899.value)+(((1.5707963267949)*(x6900.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6901=IKcos(j4);
IkReal x6902=IKsin(j4);
IkReal x6903=(r11*sj5);
IkReal x6904=(r21*sj5);
IkReal x6905=(r01*sj5);
IkReal x6906=((1.0)*x6901);
IkReal x6907=((1.0)*x6902);
IkReal x6908=(cj5*x6901);
IkReal x6909=(cj5*x6902);
evalcond[0]=((((-1.0)*x6904*x6906))+((r22*x6902))+((r20*x6908)));
evalcond[1]=((((-1.0)*x6904*x6907))+(((-1.0)*r22*x6906))+((r20*x6909)));
evalcond[2]=(((r00*x6908))+cj0+(((-1.0)*x6905*x6906))+((r02*x6902)));
evalcond[3]=(sj0+((r10*x6908))+((r12*x6902))+(((-1.0)*x6903*x6906)));
evalcond[4]=((((-1.0)*r02*x6906))+((r00*x6909))+sj0+(((-1.0)*x6905*x6907)));
evalcond[5]=((((-1.0)*r12*x6906))+((r10*x6909))+(((-1.0)*x6903*x6907))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.31914893617021)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.31914893617021)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.31914893617021)*px))+IKsqr(((-5.31914893617021)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.31914893617021)*px), ((-5.31914893617021)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.188)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.188)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6910=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6910;
j4eval[1]=IKsign(x6910);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6911=((1.0)*sj5);
IkReal x6912=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6911)));
j4eval[0]=x6912;
j4eval[1]=IKsign(x6912);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x6911))+((cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6913=((1.0)*sj5);
IkReal x6914=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6913)));
j4eval[0]=x6914;
j4eval[1]=IKsign(x6914);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x6913))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6915=((1.0)*sj5);
CheckValue<IkReal> x6916=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6915)))),-1);
if(!x6916.valid){
continue;
}
CheckValue<IkReal> x6917 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6915))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6916.value)))+(x6917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6918=IKcos(j4);
IkReal x6919=IKsin(j4);
IkReal x6920=((1.0)*cj0);
IkReal x6921=(r11*sj5);
IkReal x6922=(r21*sj5);
IkReal x6923=(r01*sj5);
IkReal x6924=((1.0)*x6918);
IkReal x6925=(cj5*x6918);
IkReal x6926=((1.0)*x6919);
IkReal x6927=(cj5*x6919);
evalcond[0]=(((r20*x6925))+((r22*x6919))+(((-1.0)*x6922*x6924)));
evalcond[1]=(((r20*x6927))+(((-1.0)*r22*x6924))+(((-1.0)*x6922*x6926)));
evalcond[2]=(sj0+(((-1.0)*r02*x6924))+((r00*x6927))+(((-1.0)*x6923*x6926)));
evalcond[3]=(((r00*x6925))+((r02*x6919))+(((-1.0)*x6920))+(((-1.0)*x6923*x6924)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6925))+((r12*x6919))+(((-1.0)*x6921*x6924)));
evalcond[5]=(((r10*x6927))+(((-1.0)*r12*x6924))+(((-1.0)*x6920))+(((-1.0)*x6921*x6926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6928=((1.0)*sj5);
CheckValue<IkReal> x6929 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6929.valid){
continue;
}
CheckValue<IkReal> x6930=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6928)))),-1);
if(!x6930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6929.value)+(((1.5707963267949)*(x6930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6931=IKcos(j4);
IkReal x6932=IKsin(j4);
IkReal x6933=((1.0)*cj0);
IkReal x6934=(r11*sj5);
IkReal x6935=(r21*sj5);
IkReal x6936=(r01*sj5);
IkReal x6937=((1.0)*x6931);
IkReal x6938=(cj5*x6931);
IkReal x6939=((1.0)*x6932);
IkReal x6940=(cj5*x6932);
evalcond[0]=(((r20*x6938))+((r22*x6932))+(((-1.0)*x6935*x6937)));
evalcond[1]=((((-1.0)*r22*x6937))+((r20*x6940))+(((-1.0)*x6935*x6939)));
evalcond[2]=(sj0+(((-1.0)*r02*x6937))+((r00*x6940))+(((-1.0)*x6936*x6939)));
evalcond[3]=(((r00*x6938))+((r02*x6932))+(((-1.0)*x6933))+(((-1.0)*x6936*x6937)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6938))+(((-1.0)*x6934*x6937))+((r12*x6932)));
evalcond[5]=(((r10*x6940))+(((-1.0)*x6934*x6939))+(((-1.0)*r12*x6937))+(((-1.0)*x6933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6941 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6941.valid){
continue;
}
CheckValue<IkReal> x6942=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6941.value)+(((1.5707963267949)*(x6942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6943=IKcos(j4);
IkReal x6944=IKsin(j4);
IkReal x6945=((1.0)*cj0);
IkReal x6946=(r11*sj5);
IkReal x6947=(r21*sj5);
IkReal x6948=(r01*sj5);
IkReal x6949=((1.0)*x6943);
IkReal x6950=(cj5*x6943);
IkReal x6951=((1.0)*x6944);
IkReal x6952=(cj5*x6944);
evalcond[0]=(((r22*x6944))+((r20*x6950))+(((-1.0)*x6947*x6949)));
evalcond[1]=(((r20*x6952))+(((-1.0)*r22*x6949))+(((-1.0)*x6947*x6951)));
evalcond[2]=(sj0+(((-1.0)*x6948*x6951))+(((-1.0)*r02*x6949))+((r00*x6952)));
evalcond[3]=((((-1.0)*x6948*x6949))+(((-1.0)*x6945))+((r02*x6944))+((r00*x6950)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6950))+((r12*x6944))+(((-1.0)*x6946*x6949)));
evalcond[5]=(((r10*x6952))+(((-1.0)*r12*x6949))+(((-1.0)*x6945))+(((-1.0)*x6946*x6951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.50324547478535)*py))+(((0.465585089389861)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.50324547478535)*px))+(((-0.465585089389861)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.50324547478535)*py))+(((0.465585089389861)*px))))+IKsqr(((((1.50324547478535)*px))+(((-0.465585089389861)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.50324547478535)*py))+(((0.465585089389861)*px))), ((((1.50324547478535)*px))+(((-0.465585089389861)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6953=IKsin(j0);
IkReal x6954=IKcos(j0);
evalcond[0]=((((0.607)*x6954))+(((-1.0)*px))+(((0.188)*x6953)));
evalcond[1]=((((0.607)*x6953))+(((-1.0)*py))+(((-0.188)*x6954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6955=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6955;
j4eval[1]=IKsign(x6955);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6956=((1.0)*sj5);
IkReal x6957=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6956)));
j4eval[0]=x6957;
j4eval[1]=IKsign(x6957);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6956))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6958=((1.0)*sj5);
IkReal x6959=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6958)));
j4eval[0]=x6959;
j4eval[1]=IKsign(x6959);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6958))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6960=((1.0)*sj5);
CheckValue<IkReal> x6961=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6960)))),-1);
if(!x6961.valid){
continue;
}
CheckValue<IkReal> x6962 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6960)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6961.value)))+(x6962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6963=IKcos(j4);
IkReal x6964=IKsin(j4);
IkReal x6965=((1.0)*cj0);
IkReal x6966=(r11*sj5);
IkReal x6967=(r21*sj5);
IkReal x6968=(r01*sj5);
IkReal x6969=((1.0)*x6963);
IkReal x6970=(cj5*x6963);
IkReal x6971=((1.0)*x6964);
IkReal x6972=(cj5*x6964);
evalcond[0]=(((r22*x6964))+(((-1.0)*x6967*x6969))+((r20*x6970)));
evalcond[1]=((((-1.0)*x6967*x6971))+(((-1.0)*r22*x6969))+((r20*x6972)));
evalcond[2]=((((-1.0)*r02*x6969))+sj0+((r00*x6972))+(((-1.0)*x6968*x6971)));
evalcond[3]=(((r00*x6970))+(((-1.0)*x6968*x6969))+((r02*x6964))+(((-1.0)*x6965)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x6966*x6969))+((r10*x6970))+((r12*x6964)));
evalcond[5]=((((-1.0)*x6966*x6971))+(((-1.0)*r12*x6969))+(((-1.0)*x6965))+((r10*x6972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6973=((1.0)*sj5);
CheckValue<IkReal> x6974=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6973)))),-1);
if(!x6974.valid){
continue;
}
CheckValue<IkReal> x6975 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6974.value)))+(x6975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6976=IKcos(j4);
IkReal x6977=IKsin(j4);
IkReal x6978=((1.0)*cj0);
IkReal x6979=(r11*sj5);
IkReal x6980=(r21*sj5);
IkReal x6981=(r01*sj5);
IkReal x6982=((1.0)*x6976);
IkReal x6983=(cj5*x6976);
IkReal x6984=((1.0)*x6977);
IkReal x6985=(cj5*x6977);
evalcond[0]=(((r22*x6977))+((r20*x6983))+(((-1.0)*x6980*x6982)));
evalcond[1]=(((r20*x6985))+(((-1.0)*r22*x6982))+(((-1.0)*x6980*x6984)));
evalcond[2]=(sj0+((r00*x6985))+(((-1.0)*x6981*x6984))+(((-1.0)*r02*x6982)));
evalcond[3]=((((-1.0)*x6978))+((r02*x6977))+((r00*x6983))+(((-1.0)*x6981*x6982)));
evalcond[4]=(((r12*x6977))+(((-1.0)*sj0))+((r10*x6983))+(((-1.0)*x6979*x6982)));
evalcond[5]=(((r10*x6985))+(((-1.0)*r12*x6982))+(((-1.0)*x6978))+(((-1.0)*x6979*x6984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6986 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6986.valid){
continue;
}
CheckValue<IkReal> x6987=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6986.value)+(((1.5707963267949)*(x6987.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6988=IKcos(j4);
IkReal x6989=IKsin(j4);
IkReal x6990=((1.0)*cj0);
IkReal x6991=(r11*sj5);
IkReal x6992=(r21*sj5);
IkReal x6993=(r01*sj5);
IkReal x6994=((1.0)*x6988);
IkReal x6995=(cj5*x6988);
IkReal x6996=((1.0)*x6989);
IkReal x6997=(cj5*x6989);
evalcond[0]=(((r22*x6989))+((r20*x6995))+(((-1.0)*x6992*x6994)));
evalcond[1]=(((r20*x6997))+(((-1.0)*r22*x6994))+(((-1.0)*x6992*x6996)));
evalcond[2]=((((-1.0)*x6993*x6996))+sj0+((r00*x6997))+(((-1.0)*r02*x6994)));
evalcond[3]=((((-1.0)*x6993*x6994))+((r02*x6989))+((r00*x6995))+(((-1.0)*x6990)));
evalcond[4]=((((-1.0)*sj0))+((r10*x6995))+(((-1.0)*x6991*x6994))+((r12*x6989)));
evalcond[5]=((((-1.0)*r12*x6994))+((r10*x6997))+(((-1.0)*x6991*x6996))+(((-1.0)*x6990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.50324547478535)*py))+(((0.465585089389861)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.50324547478535)*px))+(((-0.465585089389861)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.50324547478535)*py))+(((0.465585089389861)*px))))+IKsqr(((((1.50324547478535)*px))+(((-0.465585089389861)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.50324547478535)*py))+(((0.465585089389861)*px))), ((((1.50324547478535)*px))+(((-0.465585089389861)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6998=IKsin(j0);
IkReal x6999=IKcos(j0);
evalcond[0]=((((0.607)*x6999))+(((-1.0)*px))+(((0.188)*x6998)));
evalcond[1]=((((0.607)*x6998))+(((-0.188)*x6999))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7000=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7000;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x7000);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7001=((1.0)*sj5);
IkReal x7002=((((-1.0)*r00*x7001))+(((-1.0)*cj5*r01)));
j4eval[0]=x7002;
j4eval[1]=IKsign(x7002);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7001))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7003=cj5*cj5;
IkReal x7004=((1.0)*r21);
IkReal x7005=(cj5*r20);
IkReal x7006=(((r01*sj5*x7005))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x7003))+(((-1.0)*r01*x7004))+((cj5*r00*r21*sj5))+((r01*r21*x7003)));
j4eval[0]=x7006;
j4eval[1]=IKsign(x7006);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x7004))+((cj0*x7005)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7007=cj5*cj5;
IkReal x7008=((1.0)*r21);
IkReal x7009=(cj5*r20);
CheckValue<IkReal> x7010 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x7008))+((cj0*x7009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7010.valid){
continue;
}
CheckValue<IkReal> x7011=IKPowWithIntegerCheck(IKsign((((r01*sj5*x7009))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x7007))+(((-1.0)*r01*x7008))+((cj5*r00*r21*sj5))+((r01*r21*x7007)))),-1);
if(!x7011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7010.value)+(((1.5707963267949)*(x7011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7012=IKcos(j4);
IkReal x7013=IKsin(j4);
IkReal x7014=(r11*sj5);
IkReal x7015=(r21*sj5);
IkReal x7016=(r01*sj5);
IkReal x7017=((1.0)*x7012);
IkReal x7018=((1.0)*x7013);
IkReal x7019=(cj5*x7012);
IkReal x7020=(cj5*x7013);
evalcond[0]=(((r22*x7013))+(((-1.0)*x7015*x7017))+((r20*x7019)));
evalcond[1]=((((-1.0)*r22*x7017))+(((-1.0)*x7015*x7018))+((r20*x7020)));
evalcond[2]=(((r02*x7013))+cj0+(((-1.0)*x7016*x7017))+((r00*x7019)));
evalcond[3]=(sj0+((r10*x7019))+((r12*x7013))+(((-1.0)*x7014*x7017)));
evalcond[4]=(sj0+((r00*x7020))+(((-1.0)*x7016*x7018))+(((-1.0)*r02*x7017)));
evalcond[5]=(((r10*x7020))+(((-1.0)*r12*x7017))+(((-1.0)*x7014*x7018))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7021=((1.0)*sj5);
CheckValue<IkReal> x7022 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x7021))+((cj5*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7022.valid){
continue;
}
CheckValue<IkReal> x7023=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7021))+(((-1.0)*cj5*r01)))),-1);
if(!x7023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7022.value)+(((1.5707963267949)*(x7023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7024=IKcos(j4);
IkReal x7025=IKsin(j4);
IkReal x7026=(r11*sj5);
IkReal x7027=(r21*sj5);
IkReal x7028=(r01*sj5);
IkReal x7029=((1.0)*x7024);
IkReal x7030=((1.0)*x7025);
IkReal x7031=(cj5*x7024);
IkReal x7032=(cj5*x7025);
evalcond[0]=((((-1.0)*x7027*x7029))+((r20*x7031))+((r22*x7025)));
evalcond[1]=((((-1.0)*r22*x7029))+((r20*x7032))+(((-1.0)*x7027*x7030)));
evalcond[2]=(cj0+((r00*x7031))+((r02*x7025))+(((-1.0)*x7028*x7029)));
evalcond[3]=(sj0+((r10*x7031))+((r12*x7025))+(((-1.0)*x7026*x7029)));
evalcond[4]=(sj0+((r00*x7032))+(((-1.0)*r02*x7029))+(((-1.0)*x7028*x7030)));
evalcond[5]=((((-1.0)*r12*x7029))+((r10*x7032))+(((-1.0)*x7026*x7030))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7033 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7033.valid){
continue;
}
CheckValue<IkReal> x7034=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7033.value)+(((1.5707963267949)*(x7034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7035=IKcos(j4);
IkReal x7036=IKsin(j4);
IkReal x7037=(r11*sj5);
IkReal x7038=(r21*sj5);
IkReal x7039=(r01*sj5);
IkReal x7040=((1.0)*x7035);
IkReal x7041=((1.0)*x7036);
IkReal x7042=(cj5*x7035);
IkReal x7043=(cj5*x7036);
evalcond[0]=(((r20*x7042))+(((-1.0)*x7038*x7040))+((r22*x7036)));
evalcond[1]=((((-1.0)*r22*x7040))+((r20*x7043))+(((-1.0)*x7038*x7041)));
evalcond[2]=(((r00*x7042))+cj0+((r02*x7036))+(((-1.0)*x7039*x7040)));
evalcond[3]=(sj0+((r12*x7036))+((r10*x7042))+(((-1.0)*x7037*x7040)));
evalcond[4]=(sj0+((r00*x7043))+(((-1.0)*r02*x7040))+(((-1.0)*x7039*x7041)));
evalcond[5]=((((-1.0)*r12*x7040))+((r10*x7043))+(((-1.0)*x7037*x7041))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.31914893617021)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.31914893617021)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.31914893617021)*px))+IKsqr(((-5.31914893617021)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.31914893617021)*px), ((-5.31914893617021)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.188)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.188)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7044=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7044;
j4eval[1]=IKsign(x7044);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7045=((1.0)*sj5);
IkReal x7046=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7045)));
j4eval[0]=x7046;
j4eval[1]=IKsign(x7046);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7045))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7047=((1.0)*sj5);
IkReal x7048=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7047)));
j4eval[0]=x7048;
j4eval[1]=IKsign(x7048);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x7047)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7049=((1.0)*sj5);
CheckValue<IkReal> x7050 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x7049)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7050.valid){
continue;
}
CheckValue<IkReal> x7051=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7049)))),-1);
if(!x7051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7050.value)+(((1.5707963267949)*(x7051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7052=IKcos(j4);
IkReal x7053=IKsin(j4);
IkReal x7054=((1.0)*cj0);
IkReal x7055=(r11*sj5);
IkReal x7056=(r21*sj5);
IkReal x7057=(r01*sj5);
IkReal x7058=((1.0)*x7052);
IkReal x7059=(cj5*x7052);
IkReal x7060=((1.0)*x7053);
IkReal x7061=(cj5*x7053);
evalcond[0]=(((r20*x7059))+((r22*x7053))+(((-1.0)*x7056*x7058)));
evalcond[1]=((((-1.0)*x7056*x7060))+(((-1.0)*r22*x7058))+((r20*x7061)));
evalcond[2]=(sj0+((r00*x7061))+(((-1.0)*x7057*x7060))+(((-1.0)*r02*x7058)));
evalcond[3]=(((r02*x7053))+(((-1.0)*x7054))+(((-1.0)*x7057*x7058))+((r00*x7059)));
evalcond[4]=(((r10*x7059))+(((-1.0)*sj0))+((r12*x7053))+(((-1.0)*x7055*x7058)));
evalcond[5]=((((-1.0)*x7055*x7060))+(((-1.0)*x7054))+((r10*x7061))+(((-1.0)*r12*x7058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7062=((1.0)*sj5);
CheckValue<IkReal> x7063 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7063.valid){
continue;
}
CheckValue<IkReal> x7064=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7062)))),-1);
if(!x7064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7063.value)+(((1.5707963267949)*(x7064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7065=IKcos(j4);
IkReal x7066=IKsin(j4);
IkReal x7067=((1.0)*cj0);
IkReal x7068=(r11*sj5);
IkReal x7069=(r21*sj5);
IkReal x7070=(r01*sj5);
IkReal x7071=((1.0)*x7065);
IkReal x7072=(cj5*x7065);
IkReal x7073=((1.0)*x7066);
IkReal x7074=(cj5*x7066);
evalcond[0]=((((-1.0)*x7069*x7071))+((r22*x7066))+((r20*x7072)));
evalcond[1]=((((-1.0)*x7069*x7073))+((r20*x7074))+(((-1.0)*r22*x7071)));
evalcond[2]=(sj0+(((-1.0)*x7070*x7073))+((r00*x7074))+(((-1.0)*r02*x7071)));
evalcond[3]=((((-1.0)*x7067))+(((-1.0)*x7070*x7071))+((r00*x7072))+((r02*x7066)));
evalcond[4]=(((r12*x7066))+(((-1.0)*sj0))+(((-1.0)*x7068*x7071))+((r10*x7072)));
evalcond[5]=((((-1.0)*x7067))+(((-1.0)*x7068*x7073))+(((-1.0)*r12*x7071))+((r10*x7074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7075 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7075.valid){
continue;
}
CheckValue<IkReal> x7076=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7075.value)+(((1.5707963267949)*(x7076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7077=IKcos(j4);
IkReal x7078=IKsin(j4);
IkReal x7079=((1.0)*cj0);
IkReal x7080=(r11*sj5);
IkReal x7081=(r21*sj5);
IkReal x7082=(r01*sj5);
IkReal x7083=((1.0)*x7077);
IkReal x7084=(cj5*x7077);
IkReal x7085=((1.0)*x7078);
IkReal x7086=(cj5*x7078);
evalcond[0]=(((r22*x7078))+((r20*x7084))+(((-1.0)*x7081*x7083)));
evalcond[1]=((((-1.0)*r22*x7083))+((r20*x7086))+(((-1.0)*x7081*x7085)));
evalcond[2]=(sj0+((r00*x7086))+(((-1.0)*x7082*x7085))+(((-1.0)*r02*x7083)));
evalcond[3]=(((r00*x7084))+(((-1.0)*x7079))+(((-1.0)*x7082*x7083))+((r02*x7078)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x7080*x7083))+((r10*x7084))+((r12*x7078)));
evalcond[5]=((((-1.0)*x7079))+(((-1.0)*r12*x7083))+(((-1.0)*x7080*x7085))+((r10*x7086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((5.31914893617021)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.31914893617021)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.31914893617021)*px))+IKsqr(((-5.31914893617021)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((5.31914893617021)*px), ((-5.31914893617021)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.188)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.188)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7087=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7087;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x7087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7088=((1.0)*sj5);
IkReal x7089=((((-1.0)*r00*x7088))+(((-1.0)*cj5*r01)));
j4eval[0]=x7089;
j4eval[1]=IKsign(x7089);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7088))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7090=cj5*cj5;
IkReal x7091=((1.0)*r21);
IkReal x7092=(cj5*r20);
IkReal x7093=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x7090))+((r01*r21*x7090))+(((-1.0)*r01*x7091))+((cj5*r00*r21*sj5))+((r01*sj5*x7092)));
j4eval[0]=x7093;
j4eval[1]=IKsign(x7093);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x7092))+(((-1.0)*cj0*sj5*x7091))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7094=cj5*cj5;
IkReal x7095=((1.0)*r21);
IkReal x7096=(cj5*r20);
CheckValue<IkReal> x7097 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x7096))+(((-1.0)*cj0*sj5*x7095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7097.valid){
continue;
}
CheckValue<IkReal> x7098=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x7094))+((r01*r21*x7094))+(((-1.0)*r01*x7095))+((cj5*r00*r21*sj5))+((r01*sj5*x7096)))),-1);
if(!x7098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7097.value)+(((1.5707963267949)*(x7098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7099=IKcos(j4);
IkReal x7100=IKsin(j4);
IkReal x7101=(r11*sj5);
IkReal x7102=(r21*sj5);
IkReal x7103=(r01*sj5);
IkReal x7104=((1.0)*x7099);
IkReal x7105=((1.0)*x7100);
IkReal x7106=(cj5*x7099);
IkReal x7107=(cj5*x7100);
evalcond[0]=((((-1.0)*x7102*x7104))+((r22*x7100))+((r20*x7106)));
evalcond[1]=((((-1.0)*x7102*x7105))+(((-1.0)*r22*x7104))+((r20*x7107)));
evalcond[2]=(cj0+(((-1.0)*x7103*x7104))+((r02*x7100))+((r00*x7106)));
evalcond[3]=(sj0+((r12*x7100))+(((-1.0)*x7101*x7104))+((r10*x7106)));
evalcond[4]=(sj0+(((-1.0)*x7103*x7105))+(((-1.0)*r02*x7104))+((r00*x7107)));
evalcond[5]=((((-1.0)*r12*x7104))+(((-1.0)*x7101*x7105))+((r10*x7107))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7108=((1.0)*sj5);
CheckValue<IkReal> x7109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7108))+(((-1.0)*cj5*r01)))),-1);
if(!x7109.valid){
continue;
}
CheckValue<IkReal> x7110 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7108)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7109.value)))+(x7110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7111=IKcos(j4);
IkReal x7112=IKsin(j4);
IkReal x7113=(r11*sj5);
IkReal x7114=(r21*sj5);
IkReal x7115=(r01*sj5);
IkReal x7116=((1.0)*x7111);
IkReal x7117=((1.0)*x7112);
IkReal x7118=(cj5*x7111);
IkReal x7119=(cj5*x7112);
evalcond[0]=(((r22*x7112))+((r20*x7118))+(((-1.0)*x7114*x7116)));
evalcond[1]=((((-1.0)*r22*x7116))+((r20*x7119))+(((-1.0)*x7114*x7117)));
evalcond[2]=((((-1.0)*x7115*x7116))+cj0+((r02*x7112))+((r00*x7118)));
evalcond[3]=(((r12*x7112))+sj0+((r10*x7118))+(((-1.0)*x7113*x7116)));
evalcond[4]=((((-1.0)*x7115*x7117))+sj0+(((-1.0)*r02*x7116))+((r00*x7119)));
evalcond[5]=((((-1.0)*r12*x7116))+((r10*x7119))+(((-1.0)*x7113*x7117))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7120 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7120.valid){
continue;
}
CheckValue<IkReal> x7121=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7120.value)+(((1.5707963267949)*(x7121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7122=IKcos(j4);
IkReal x7123=IKsin(j4);
IkReal x7124=(r11*sj5);
IkReal x7125=(r21*sj5);
IkReal x7126=(r01*sj5);
IkReal x7127=((1.0)*x7122);
IkReal x7128=((1.0)*x7123);
IkReal x7129=(cj5*x7122);
IkReal x7130=(cj5*x7123);
evalcond[0]=(((r20*x7129))+((r22*x7123))+(((-1.0)*x7125*x7127)));
evalcond[1]=((((-1.0)*r22*x7127))+((r20*x7130))+(((-1.0)*x7125*x7128)));
evalcond[2]=(((r00*x7129))+cj0+(((-1.0)*x7126*x7127))+((r02*x7123)));
evalcond[3]=(sj0+((r10*x7129))+((r12*x7123))+(((-1.0)*x7124*x7127)));
evalcond[4]=(sj0+((r00*x7130))+(((-1.0)*x7126*x7128))+(((-1.0)*r02*x7127)));
evalcond[5]=(((r10*x7130))+(((-1.0)*r12*x7127))+(((-1.0)*x7124*x7128))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7131=(sj1*sj2);
IkReal x7132=(cj5*r01);
IkReal x7133=(r00*sj5);
IkReal x7134=(cj1*cj2);
IkReal x7135=((151.75)*cj1);
IkReal x7136=((250.0)*px);
CheckValue<IkReal> x7137=IKPowWithIntegerCheck(((((47.0)*x7131))+(((-47.0)*x7134))),-1);
if(!x7137.valid){
continue;
}
CheckValue<IkReal> x7138=IKPowWithIntegerCheck((x7131+(((-1.0)*x7134))),-1);
if(!x7138.valid){
continue;
}
if( IKabs(((x7137.value)*((((x7133*x7135))+(((-173.25)*x7131*x7133))+(((-173.25)*x7131*x7132))+((x7132*x7135))+((x7131*x7136))+(((173.25)*x7132*x7134))+(((173.25)*x7133*x7134))+(((-1.0)*x7134*x7136)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7138.value)*((x7133+x7132)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7137.value)*((((x7133*x7135))+(((-173.25)*x7131*x7133))+(((-173.25)*x7131*x7132))+((x7132*x7135))+((x7131*x7136))+(((173.25)*x7132*x7134))+(((173.25)*x7133*x7134))+(((-1.0)*x7134*x7136))))))+IKsqr(((x7138.value)*((x7133+x7132))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7137.value)*((((x7133*x7135))+(((-173.25)*x7131*x7133))+(((-173.25)*x7131*x7132))+((x7132*x7135))+((x7131*x7136))+(((173.25)*x7132*x7134))+(((173.25)*x7133*x7134))+(((-1.0)*x7134*x7136))))), ((x7138.value)*((x7133+x7132))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7139=IKcos(j0);
IkReal x7140=IKsin(j0);
IkReal x7141=(r00*sj5);
IkReal x7142=((1.0)*cj5);
IkReal x7143=(r10*sj5);
IkReal x7144=(sj1*sj2);
IkReal x7145=(cj1*cj2);
IkReal x7146=((0.127)*cj5);
IkReal x7147=(cj1*x7139);
IkReal x7148=((0.566)*x7140);
evalcond[0]=(((x7139*x7144))+(((-1.0)*x7139*x7145))+(((-1.0)*r01*x7142))+(((-1.0)*x7141)));
evalcond[1]=(((x7140*x7144))+(((-1.0)*x7143))+(((-1.0)*x7140*x7145))+(((-1.0)*r11*x7142)));
evalcond[2]=(((r01*x7146))+(((-0.607)*x7147))+(((-1.0)*px))+(((0.127)*x7141))+(((0.188)*x7140))+(((0.566)*x7139*x7144))+(((-0.566)*x7139*x7145)));
evalcond[3]=((((-0.607)*cj1*x7140))+(((-1.0)*x7145*x7148))+((x7144*x7148))+(((-1.0)*py))+(((0.127)*x7143))+(((-0.188)*x7139))+((r11*x7146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7149=((1.0)*sj5);
IkReal x7150=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7149)));
j4eval[0]=x7150;
j4eval[1]=IKsign(x7150);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7149))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7151=((1.0)*sj5);
IkReal x7152=((((-1.0)*r00*x7151))+(((-1.0)*cj5*r01)));
j4eval[0]=x7152;
j4eval[1]=IKsign(x7152);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7151))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7153=((1.0)*sj5);
IkReal x7154=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7154;
j4eval[1]=((IKabs(((((-1.0)*r11*sj0*x7153))+(((-1.0)*cj0*r01*x7153))+((cj0*cj5*r00))+((cj5*r10*sj0)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x7154);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7156 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7156)==0){
continue;
}
IkReal x7155=pow(x7156,-0.5);
CheckValue<IkReal> x7157 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7157.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7157.value));
IkReal gconst133=((-1.0)*r21*x7155);
IkReal gconst134=(r20*x7155);
CheckValue<IkReal> x7158 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7158.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7158.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7161 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7161.valid){
continue;
}
IkReal x7159=((-1.0)*(x7161.value));
IkReal x7160=x7155;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7159;
IkReal gconst132=x7159;
IkReal gconst133=((-1.0)*r21*x7160);
IkReal gconst134=(r20*x7160);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7164 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7164.valid){
continue;
}
IkReal x7162=((-1.0)*(x7164.value));
IkReal x7163=x7155;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7162;
IkReal gconst132=x7162;
IkReal gconst133=((-1.0)*r21*x7163);
IkReal gconst134=(r20*x7163);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7167 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7167.valid){
continue;
}
IkReal x7165=((-1.0)*(x7167.value));
IkReal x7166=x7155;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7165;
IkReal gconst132=x7165;
IkReal gconst133=((-1.0)*r21*x7166);
IkReal gconst134=(r20*x7166);
IkReal x7168=((1.0)*(r22*r22));
CheckValue<IkReal> x7172=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7168))),-1);
if(!x7172.valid){
continue;
}
IkReal x7169=x7172.value;
IkReal x7170=((1.0)*x7169);
IkReal x7171=((((-2.0)*x7169*(r20*r20)*(r21*r21)))+(((-1.0)*x7168))+(((-1.0)*x7170*(r20*r20*r20*r20)))+(((-1.0)*x7170*(r21*r21*r21*r21))));
j4eval[0]=x7171;
j4eval[1]=IKsign(x7171);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7173=(gconst134*r20);
IkReal x7174=(cj1*cj2);
IkReal x7175=(gconst133*r21);
IkReal x7176=(sj1*sj2);
CheckValue<IkReal> x7177 = IKatan2WithCheck(IkReal((((r22*x7176))+(((-1.0)*r22*x7174)))),IkReal(((((-1.0)*x7175*x7176))+((x7173*x7176))+((x7174*x7175))+(((-1.0)*x7173*x7174)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7177.valid){
continue;
}
CheckValue<IkReal> x7178=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7173*x7173)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7175*x7175)))+(((2.0)*x7173*x7175)))),-1);
if(!x7178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7177.value)+(((1.5707963267949)*(x7178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7179=IKsin(j4);
IkReal x7180=IKcos(j4);
IkReal x7181=(gconst134*r10);
IkReal x7182=(cj2*sj1);
IkReal x7183=(gconst133*r11);
IkReal x7184=(gconst133*r01);
IkReal x7185=(gconst133*r21);
IkReal x7186=(cj1*sj2);
IkReal x7187=((1.0)*x7180);
IkReal x7188=((1.0)*x7179);
IkReal x7189=(gconst134*x7180);
IkReal x7190=(gconst134*x7179);
evalcond[0]=(((r20*x7190))+(((-1.0)*x7185*x7188))+(((-1.0)*r22*x7187)));
evalcond[1]=(sj0+(((-1.0)*x7184*x7188))+((r00*x7190))+(((-1.0)*r02*x7187)));
evalcond[2]=(((x7179*x7181))+(((-1.0)*x7183*x7188))+(((-1.0)*r12*x7187))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7189))+(((-1.0)*x7185*x7187))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7179)));
evalcond[4]=(((r00*x7189))+(((-1.0)*x7184*x7187))+((r02*x7179))+((cj0*x7182))+((cj0*x7186)));
evalcond[5]=(((x7180*x7181))+((sj0*x7186))+((sj0*x7182))+(((-1.0)*x7183*x7187))+((r12*x7179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7191=((1.0)*gconst133);
CheckValue<IkReal> x7192 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7191))+((cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7192.valid){
continue;
}
CheckValue<IkReal> x7193=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7191))+(((-1.0)*gconst134*r01)))),-1);
if(!x7193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7192.value)+(((1.5707963267949)*(x7193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7194=IKsin(j4);
IkReal x7195=IKcos(j4);
IkReal x7196=(gconst134*r10);
IkReal x7197=(cj2*sj1);
IkReal x7198=(gconst133*r11);
IkReal x7199=(gconst133*r01);
IkReal x7200=(gconst133*r21);
IkReal x7201=(cj1*sj2);
IkReal x7202=((1.0)*x7195);
IkReal x7203=((1.0)*x7194);
IkReal x7204=(gconst134*x7195);
IkReal x7205=(gconst134*x7194);
evalcond[0]=(((r20*x7205))+(((-1.0)*x7200*x7203))+(((-1.0)*r22*x7202)));
evalcond[1]=(((r00*x7205))+sj0+(((-1.0)*x7199*x7203))+(((-1.0)*r02*x7202)));
evalcond[2]=((((-1.0)*x7198*x7203))+(((-1.0)*r12*x7202))+(((-1.0)*cj0))+((x7194*x7196)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7204))+((r22*x7194))+(((-1.0)*x7200*x7202)));
evalcond[4]=(((r00*x7204))+(((-1.0)*x7199*x7202))+((r02*x7194))+((cj0*x7201))+((cj0*x7197)));
evalcond[5]=(((r12*x7194))+((x7195*x7196))+(((-1.0)*x7198*x7202))+((sj0*x7197))+((sj0*x7201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7206=((1.0)*gconst133);
CheckValue<IkReal> x7207=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7206))+(((-1.0)*gconst134*r11)))),-1);
if(!x7207.valid){
continue;
}
CheckValue<IkReal> x7208 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst134*r20*sj0))+(((-1.0)*r21*sj0*x7206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7207.value)))+(x7208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7209=IKsin(j4);
IkReal x7210=IKcos(j4);
IkReal x7211=(gconst134*r10);
IkReal x7212=(cj2*sj1);
IkReal x7213=(gconst133*r11);
IkReal x7214=(gconst133*r01);
IkReal x7215=(gconst133*r21);
IkReal x7216=(cj1*sj2);
IkReal x7217=((1.0)*x7210);
IkReal x7218=((1.0)*x7209);
IkReal x7219=(gconst134*x7210);
IkReal x7220=(gconst134*x7209);
evalcond[0]=((((-1.0)*x7215*x7218))+((r20*x7220))+(((-1.0)*r22*x7217)));
evalcond[1]=(sj0+((r00*x7220))+(((-1.0)*x7214*x7218))+(((-1.0)*r02*x7217)));
evalcond[2]=((((-1.0)*x7213*x7218))+((x7209*x7211))+(((-1.0)*r12*x7217))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x7215*x7217))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7209))+((r20*x7219)));
evalcond[4]=(((r00*x7219))+((cj0*x7212))+((cj0*x7216))+(((-1.0)*x7214*x7217))+((r02*x7209)));
evalcond[5]=((((-1.0)*x7213*x7217))+((sj0*x7216))+((sj0*x7212))+((x7210*x7211))+((r12*x7209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7222 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7222)==0){
continue;
}
IkReal x7221=pow(x7222,-0.5);
CheckValue<IkReal> x7223 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7223.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7223.value))));
IkReal gconst136=((1.0)*r21*x7221);
IkReal gconst137=((-1.0)*r20*x7221);
CheckValue<IkReal> x7224 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7224.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7224.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7227 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7227.valid){
continue;
}
IkReal x7225=((1.0)*(x7227.value));
IkReal x7226=x7221;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7225)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7225)));
IkReal gconst136=((1.0)*r21*x7226);
IkReal gconst137=((-1.0)*r20*x7226);
IkReal x7228=r22*r22;
IkReal x7229=((1.0)*x7228);
CheckValue<IkReal> x7233=IKPowWithIntegerCheck(((-1.0)+x7228),-1);
if(!x7233.valid){
continue;
}
IkReal x7230=x7233.value;
if((((1.0)+(((-1.0)*x7229)))) < -0.00001)
continue;
IkReal x7231=IKsqrt(((1.0)+(((-1.0)*x7229))));
IkReal x7232=(sj0*x7230*x7231);
j4eval[0]=((IKabs((x7232+(((-1.0)*x7229*x7232)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7236 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7236.valid){
continue;
}
IkReal x7234=((1.0)*(x7236.value));
IkReal x7235=x7221;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7234)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7234)));
IkReal gconst136=((1.0)*r21*x7235);
IkReal gconst137=((-1.0)*r20*x7235);
IkReal x7237=r22*r22;
IkReal x7238=((1.0)*x7237);
CheckValue<IkReal> x7242=IKPowWithIntegerCheck(((-1.0)+x7237),-1);
if(!x7242.valid){
continue;
}
IkReal x7239=x7242.value;
if((((1.0)+(((-1.0)*x7238)))) < -0.00001)
continue;
IkReal x7240=IKsqrt(((1.0)+(((-1.0)*x7238))));
IkReal x7241=(cj0*x7239*x7240);
j4eval[0]=((IKabs((x7241+(((-1.0)*x7238*x7241)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7245 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7245.valid){
continue;
}
IkReal x7243=((1.0)*(x7245.value));
IkReal x7244=x7221;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7243)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7243)));
IkReal gconst136=((1.0)*r21*x7244);
IkReal gconst137=((-1.0)*r20*x7244);
IkReal x7246=r22*r22;
IkReal x7247=(cj0*r02);
IkReal x7248=(r12*sj0);
CheckValue<IkReal> x7252=IKPowWithIntegerCheck(((-1.0)+x7246),-1);
if(!x7252.valid){
continue;
}
IkReal x7249=x7252.value;
if((((1.0)+(((-1.0)*x7246)))) < -0.00001)
continue;
IkReal x7250=IKsqrt(((1.0)+(((-1.0)*x7246))));
IkReal x7251=((1.0)*r22*x7249*x7250);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x7247+x7248)))+(IKabs(((((-1.0)*x7247*x7251))+(((-1.0)*x7248*x7251))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7253=((1.0)*gconst136);
CheckValue<IkReal> x7254 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*cj0*r01*x7253))+(((-1.0)*r11*sj0*x7253))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7254.valid){
continue;
}
CheckValue<IkReal> x7255=IKPowWithIntegerCheck(IKsign((((gconst136*r20))+((gconst137*r21)))),-1);
if(!x7255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7254.value)+(((1.5707963267949)*(x7255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7256=IKsin(j4);
IkReal x7257=IKcos(j4);
IkReal x7258=(gconst136*r01);
IkReal x7259=(cj2*sj1);
IkReal x7260=(gconst136*r11);
IkReal x7261=(gconst136*r21);
IkReal x7262=(cj1*sj2);
IkReal x7263=((1.0)*x7257);
IkReal x7264=(gconst137*x7257);
IkReal x7265=((1.0)*x7256);
IkReal x7266=(gconst137*x7256);
evalcond[0]=((((-1.0)*r22*x7263))+(((-1.0)*x7261*x7265))+((r20*x7266)));
evalcond[1]=(sj0+(((-1.0)*x7258*x7265))+((r00*x7266))+(((-1.0)*r02*x7263)));
evalcond[2]=((((-1.0)*x7260*x7265))+((r10*x7266))+(((-1.0)*r12*x7263))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7256))+(((-1.0)*x7261*x7263))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7264)));
evalcond[4]=(((cj0*x7262))+((r02*x7256))+(((-1.0)*x7258*x7263))+((r00*x7264))+((cj0*x7259)));
evalcond[5]=(((sj0*x7262))+(((-1.0)*x7260*x7263))+((r12*x7256))+((r10*x7264))+((sj0*x7259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7267=((1.0)*gconst136);
CheckValue<IkReal> x7268=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7267))+(((-1.0)*gconst137*r01)))),-1);
if(!x7268.valid){
continue;
}
CheckValue<IkReal> x7269 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7267))+((cj0*gconst137*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7268.value)))+(x7269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7270=IKsin(j4);
IkReal x7271=IKcos(j4);
IkReal x7272=(gconst136*r01);
IkReal x7273=(cj2*sj1);
IkReal x7274=(gconst136*r11);
IkReal x7275=(gconst136*r21);
IkReal x7276=(cj1*sj2);
IkReal x7277=((1.0)*x7271);
IkReal x7278=(gconst137*x7271);
IkReal x7279=((1.0)*x7270);
IkReal x7280=(gconst137*x7270);
evalcond[0]=((((-1.0)*r22*x7277))+((r20*x7280))+(((-1.0)*x7275*x7279)));
evalcond[1]=(sj0+(((-1.0)*x7272*x7279))+(((-1.0)*r02*x7277))+((r00*x7280)));
evalcond[2]=((((-1.0)*r12*x7277))+(((-1.0)*x7274*x7279))+((r10*x7280))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7278))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7275*x7277))+((r22*x7270)));
evalcond[4]=((((-1.0)*x7272*x7277))+((r00*x7278))+((cj0*x7273))+((cj0*x7276))+((r02*x7270)));
evalcond[5]=((((-1.0)*x7274*x7277))+((r10*x7278))+((r12*x7270))+((sj0*x7276))+((sj0*x7273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7281=((1.0)*gconst136);
CheckValue<IkReal> x7282 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst137*r20*sj0))+(((-1.0)*r21*sj0*x7281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7282.valid){
continue;
}
CheckValue<IkReal> x7283=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r11))+(((-1.0)*r10*x7281)))),-1);
if(!x7283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7282.value)+(((1.5707963267949)*(x7283.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7284=IKsin(j4);
IkReal x7285=IKcos(j4);
IkReal x7286=(gconst136*r01);
IkReal x7287=(cj2*sj1);
IkReal x7288=(gconst136*r11);
IkReal x7289=(gconst136*r21);
IkReal x7290=(cj1*sj2);
IkReal x7291=((1.0)*x7285);
IkReal x7292=(gconst137*x7285);
IkReal x7293=((1.0)*x7284);
IkReal x7294=(gconst137*x7284);
evalcond[0]=((((-1.0)*r22*x7291))+(((-1.0)*x7289*x7293))+((r20*x7294)));
evalcond[1]=(sj0+(((-1.0)*x7286*x7293))+(((-1.0)*r02*x7291))+((r00*x7294)));
evalcond[2]=((((-1.0)*x7288*x7293))+((r10*x7294))+(((-1.0)*r12*x7291))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7284))+(((-1.0)*x7289*x7291))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7292)));
evalcond[4]=(((cj0*x7290))+(((-1.0)*x7286*x7291))+((cj0*x7287))+((r02*x7284))+((r00*x7292)));
evalcond[5]=(((sj0*x7290))+(((-1.0)*x7288*x7291))+((r12*x7284))+((sj0*x7287))+((r10*x7292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7295=((-1.0)*r00);
IkReal x7297 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7297)==0){
continue;
}
IkReal x7296=pow(x7297,-0.5);
CheckValue<IkReal> x7298 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7295),IKFAST_ATAN2_MAGTHRESH);
if(!x7298.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7298.value));
IkReal gconst139=(r01*x7296);
IkReal gconst140=(x7295*x7296);
CheckValue<IkReal> x7299 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7299.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7299.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7300=((-1.0)*r00);
IkReal x7301=x7296;
CheckValue<IkReal> x7303 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7300),IKFAST_ATAN2_MAGTHRESH);
if(!x7303.valid){
continue;
}
IkReal x7302=((-1.0)*(x7303.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7302;
IkReal gconst138=x7302;
IkReal gconst139=(r01*x7301);
IkReal gconst140=(x7300*x7301);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7304=((1.0)*gconst139);
CheckValue<IkReal> x7305 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7304))+((gconst140*r10*sj0))+(((-1.0)*r11*sj0*x7304))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7305.valid){
continue;
}
CheckValue<IkReal> x7306=IKPowWithIntegerCheck(IKsign((((gconst139*r20))+((gconst140*r21)))),-1);
if(!x7306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7305.value)+(((1.5707963267949)*(x7306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7307=IKsin(j4);
IkReal x7308=IKcos(j4);
IkReal x7309=(cj2*sj1);
IkReal x7310=(gconst140*r10);
IkReal x7311=(cj1*sj2);
IkReal x7312=((1.0)*x7308);
IkReal x7313=(gconst140*x7308);
IkReal x7314=(gconst140*x7307);
IkReal x7315=((1.0)*gconst139*x7307);
evalcond[0]=((((-1.0)*r21*x7315))+((r20*x7314))+(((-1.0)*r22*x7312)));
evalcond[1]=(sj0+(((-1.0)*r01*x7315))+((r00*x7314))+(((-1.0)*r02*x7312)));
evalcond[2]=((((-1.0)*r11*x7315))+((x7307*x7310))+(((-1.0)*r12*x7312))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7307))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7313))+(((-1.0)*gconst139*r21*x7312)));
evalcond[4]=(((r02*x7307))+((cj0*x7311))+(((-1.0)*gconst139*r01*x7312))+((r00*x7313))+((cj0*x7309)));
evalcond[5]=(((r12*x7307))+((sj0*x7311))+((x7308*x7310))+((sj0*x7309))+(((-1.0)*gconst139*r11*x7312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7316=((1.0)*gconst139);
CheckValue<IkReal> x7317=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7316))+(((-1.0)*gconst140*r11)))),-1);
if(!x7317.valid){
continue;
}
CheckValue<IkReal> x7318 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7316))+((gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7317.value)))+(x7318.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7319=IKsin(j4);
IkReal x7320=IKcos(j4);
IkReal x7321=(cj2*sj1);
IkReal x7322=(gconst140*r10);
IkReal x7323=(cj1*sj2);
IkReal x7324=((1.0)*x7320);
IkReal x7325=(gconst140*x7320);
IkReal x7326=(gconst140*x7319);
IkReal x7327=((1.0)*gconst139*x7319);
evalcond[0]=((((-1.0)*r22*x7324))+(((-1.0)*r21*x7327))+((r20*x7326)));
evalcond[1]=(sj0+(((-1.0)*r01*x7327))+((r00*x7326))+(((-1.0)*r02*x7324)));
evalcond[2]=(((x7319*x7322))+(((-1.0)*r11*x7327))+(((-1.0)*r12*x7324))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7319))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst139*r21*x7324))+((r20*x7325)));
evalcond[4]=(((r02*x7319))+((r00*x7325))+(((-1.0)*gconst139*r01*x7324))+((cj0*x7323))+((cj0*x7321)));
evalcond[5]=(((r12*x7319))+((x7320*x7322))+(((-1.0)*gconst139*r11*x7324))+((sj0*x7323))+((sj0*x7321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7328=((-1.0)*r01);
IkReal x7330 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7330)==0){
continue;
}
IkReal x7329=pow(x7330,-0.5);
CheckValue<IkReal> x7331 = IKatan2WithCheck(IkReal(x7328),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7331.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7331.value))));
IkReal gconst142=(x7328*x7329);
IkReal gconst143=((1.0)*r00*x7329);
CheckValue<IkReal> x7332 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7332.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7332.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7333=((-1.0)*r01);
CheckValue<IkReal> x7336 = IKatan2WithCheck(IkReal(x7333),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7336.valid){
continue;
}
IkReal x7334=((1.0)*(x7336.value));
IkReal x7335=x7329;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7334)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7334)));
IkReal gconst142=(x7333*x7335);
IkReal gconst143=((1.0)*r00*x7335);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x7337=((-1.0)*r01);
CheckValue<IkReal> x7340 = IKatan2WithCheck(IkReal(x7337),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7340.valid){
continue;
}
IkReal x7338=((1.0)*(x7340.value));
IkReal x7339=x7329;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7338)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7338)));
IkReal gconst142=(x7337*x7339);
IkReal gconst143=((1.0)*r00*x7339);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7341=((-1.0)*r01);
CheckValue<IkReal> x7344 = IKatan2WithCheck(IkReal(x7341),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7344.valid){
continue;
}
IkReal x7342=((1.0)*(x7344.value));
IkReal x7343=x7329;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7342)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7342)));
IkReal gconst142=(x7341*x7343);
IkReal gconst143=((1.0)*r00*x7343);
IkReal x7345=r02*r02;
IkReal x7346=(r12*sj0);
IkReal x7347=x7329;
IkReal x7348=(cj0*x7347);
j4eval[0]=((IKabs((x7346+((cj0*r02)))))+(IKabs((((x7345*x7348))+((r02*x7346*x7347))+(((-1.0)*x7348))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7349=((1.0)*gconst142);
CheckValue<IkReal> x7350=IKPowWithIntegerCheck(IKsign((((gconst143*r21))+((gconst142*r20)))),-1);
if(!x7350.valid){
continue;
}
CheckValue<IkReal> x7351 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x7349))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7349))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7350.value)))+(x7351.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7352=IKsin(j4);
IkReal x7353=IKcos(j4);
IkReal x7354=(gconst143*r00);
IkReal x7355=(cj2*sj1);
IkReal x7356=(gconst142*r21);
IkReal x7357=(gconst142*r11);
IkReal x7358=(gconst142*r01);
IkReal x7359=(cj1*sj2);
IkReal x7360=((1.0)*x7353);
IkReal x7361=((1.0)*x7352);
IkReal x7362=(gconst143*x7353);
IkReal x7363=(gconst143*x7352);
evalcond[0]=(((r20*x7363))+(((-1.0)*r22*x7360))+(((-1.0)*x7356*x7361)));
evalcond[1]=(sj0+((x7352*x7354))+(((-1.0)*r02*x7360))+(((-1.0)*x7358*x7361)));
evalcond[2]=((((-1.0)*r12*x7360))+(((-1.0)*x7357*x7361))+((r10*x7363))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7362))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7356*x7360))+((r22*x7352)));
evalcond[4]=(((x7353*x7354))+((cj0*x7359))+((cj0*x7355))+((r02*x7352))+(((-1.0)*x7358*x7360)));
evalcond[5]=(((r12*x7352))+(((-1.0)*x7357*x7360))+((sj0*x7355))+((sj0*x7359))+((r10*x7362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7364=((1.0)*gconst142);
CheckValue<IkReal> x7365 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst143*r20))+(((-1.0)*cj0*r21*x7364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7365.valid){
continue;
}
CheckValue<IkReal> x7366=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r01))+(((-1.0)*r00*x7364)))),-1);
if(!x7366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7365.value)+(((1.5707963267949)*(x7366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7367=IKsin(j4);
IkReal x7368=IKcos(j4);
IkReal x7369=(gconst143*r00);
IkReal x7370=(cj2*sj1);
IkReal x7371=(gconst142*r21);
IkReal x7372=(gconst142*r11);
IkReal x7373=(gconst142*r01);
IkReal x7374=(cj1*sj2);
IkReal x7375=((1.0)*x7368);
IkReal x7376=((1.0)*x7367);
IkReal x7377=(gconst143*x7368);
IkReal x7378=(gconst143*x7367);
evalcond[0]=((((-1.0)*r22*x7375))+((r20*x7378))+(((-1.0)*x7371*x7376)));
evalcond[1]=(sj0+((x7367*x7369))+(((-1.0)*r02*x7375))+(((-1.0)*x7373*x7376)));
evalcond[2]=((((-1.0)*r12*x7375))+(((-1.0)*x7372*x7376))+((r10*x7378))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7377))+((r22*x7367))+(((-1.0)*x7371*x7375)));
evalcond[4]=(((cj0*x7370))+((cj0*x7374))+((x7368*x7369))+(((-1.0)*x7373*x7375))+((r02*x7367)));
evalcond[5]=(((r12*x7367))+((sj0*x7374))+((sj0*x7370))+(((-1.0)*x7372*x7375))+((r10*x7377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7379=((1.0)*gconst142);
CheckValue<IkReal> x7380 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7379))+((gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7380.valid){
continue;
}
CheckValue<IkReal> x7381=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r11))+(((-1.0)*r10*x7379)))),-1);
if(!x7381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7380.value)+(((1.5707963267949)*(x7381.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7382=IKsin(j4);
IkReal x7383=IKcos(j4);
IkReal x7384=(gconst143*r00);
IkReal x7385=(cj2*sj1);
IkReal x7386=(gconst142*r21);
IkReal x7387=(gconst142*r11);
IkReal x7388=(gconst142*r01);
IkReal x7389=(cj1*sj2);
IkReal x7390=((1.0)*x7383);
IkReal x7391=((1.0)*x7382);
IkReal x7392=(gconst143*x7383);
IkReal x7393=(gconst143*x7382);
evalcond[0]=((((-1.0)*r22*x7390))+(((-1.0)*x7386*x7391))+((r20*x7393)));
evalcond[1]=(sj0+(((-1.0)*r02*x7390))+(((-1.0)*x7388*x7391))+((x7382*x7384)));
evalcond[2]=((((-1.0)*r12*x7390))+((r10*x7393))+(((-1.0)*x7387*x7391))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7386*x7390))+((r20*x7392))+((r22*x7382)));
evalcond[4]=((((-1.0)*x7388*x7390))+((x7383*x7384))+((r02*x7382))+((cj0*x7389))+((cj0*x7385)));
evalcond[5]=(((sj0*x7385))+((sj0*x7389))+((r10*x7392))+(((-1.0)*x7387*x7390))+((r12*x7382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7394=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7394;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x7394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7395=((1.0)*sj5);
IkReal x7396=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7395)));
j4eval[0]=x7396;
j4eval[1]=IKsign(x7396);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x7395))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7397=(cj1*sj2);
IkReal x7398=(cj5*r00);
IkReal x7399=((1.0)*r02);
IkReal x7400=(cj2*sj1);
IkReal x7401=((1.0)*r01*sj5);
IkReal x7402=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7402;
j4eval[1]=((IKabs(((((-1.0)*x7399*x7400))+(((-1.0)*x7397*x7399)))))+(IKabs((((x7397*x7398))+(((-1.0)*x7397*x7401))+((x7398*x7400))+(((-1.0)*x7400*x7401))))));
j4eval[2]=IKsign(x7402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7403=(cj1*sj2);
IkReal x7404=(cj5*r00);
IkReal x7405=((1.0)*r02);
IkReal x7406=(cj2*sj1);
IkReal x7407=((1.0)*r01*sj5);
CheckValue<IkReal> x7408=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7408.valid){
continue;
}
CheckValue<IkReal> x7409 = IKatan2WithCheck(IkReal(((((-1.0)*x7403*x7407))+((x7403*x7404))+((x7404*x7406))+(((-1.0)*x7406*x7407)))),IkReal(((((-1.0)*x7403*x7405))+(((-1.0)*x7405*x7406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7408.value)))+(x7409.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7410=IKcos(j4);
IkReal x7411=IKsin(j4);
IkReal x7412=((1.0)*x7410);
IkReal x7413=(cj5*x7410);
IkReal x7414=(cj5*x7411);
IkReal x7415=((1.0)*sj5*x7411);
evalcond[0]=(((r02*x7411))+((r00*x7413))+(((-1.0)*r01*sj5*x7412)));
evalcond[1]=((((-1.0)*r21*x7415))+((r20*x7414))+(((-1.0)*r22*x7412)));
evalcond[2]=((((-1.0)*r12*x7412))+(((-1.0)*r11*x7415))+((r10*x7414)));
evalcond[3]=((1.0)+(((-1.0)*r01*x7415))+((r00*x7414))+(((-1.0)*r02*x7412)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x7413))+(((-1.0)*r11*sj5*x7412))+((r12*x7411)));
evalcond[5]=(((r20*x7413))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7411))+(((-1.0)*r21*sj5*x7412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7416=((1.0)*sj5);
CheckValue<IkReal> x7417 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7417.valid){
continue;
}
CheckValue<IkReal> x7418=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7416)))),-1);
if(!x7418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7417.value)+(((1.5707963267949)*(x7418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7419=IKcos(j4);
IkReal x7420=IKsin(j4);
IkReal x7421=((1.0)*x7419);
IkReal x7422=(cj5*x7419);
IkReal x7423=(cj5*x7420);
IkReal x7424=((1.0)*sj5*x7420);
evalcond[0]=(((r00*x7422))+((r02*x7420))+(((-1.0)*r01*sj5*x7421)));
evalcond[1]=((((-1.0)*r22*x7421))+((r20*x7423))+(((-1.0)*r21*x7424)));
evalcond[2]=((((-1.0)*r11*x7424))+(((-1.0)*r12*x7421))+((r10*x7423)));
evalcond[3]=((1.0)+((r00*x7423))+(((-1.0)*r02*x7421))+(((-1.0)*r01*x7424)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x7422))+(((-1.0)*r11*sj5*x7421))+((r12*x7420)));
evalcond[5]=(((r20*x7422))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7420))+(((-1.0)*r21*sj5*x7421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7425 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7425.valid){
continue;
}
CheckValue<IkReal> x7426=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7425.value)+(((1.5707963267949)*(x7426.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7427=IKcos(j4);
IkReal x7428=IKsin(j4);
IkReal x7429=((1.0)*x7427);
IkReal x7430=(cj5*x7427);
IkReal x7431=(cj5*x7428);
IkReal x7432=((1.0)*sj5*x7428);
evalcond[0]=(((r00*x7430))+((r02*x7428))+(((-1.0)*r01*sj5*x7429)));
evalcond[1]=((((-1.0)*r22*x7429))+((r20*x7431))+(((-1.0)*r21*x7432)));
evalcond[2]=((((-1.0)*r11*x7432))+((r10*x7431))+(((-1.0)*r12*x7429)));
evalcond[3]=((1.0)+(((-1.0)*r01*x7432))+((r00*x7431))+(((-1.0)*r02*x7429)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x7430))+(((-1.0)*r11*sj5*x7429))+((r12*x7428)));
evalcond[5]=(((r20*x7430))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7428))+(((-1.0)*r21*sj5*x7429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7433=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7433;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x7433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7434=((1.0)*sj5);
IkReal x7435=((((-1.0)*r20*x7434))+(((-1.0)*cj5*r21)));
j4eval[0]=x7435;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x7434))))));
j4eval[2]=IKsign(x7435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7436=cj5*cj5;
IkReal x7437=r01*r01;
IkReal x7438=(cj5*r00);
IkReal x7439=(r01*sj5);
IkReal x7440=(((x7436*(r00*r00)))+(((-2.0)*x7438*x7439))+(((-1.0)*x7436*x7437))+(r02*r02)+x7437);
j4eval[0]=x7440;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7439))+x7438))));
j4eval[2]=IKsign(x7440);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7441=cj5*cj5;
IkReal x7442=r01*r01;
IkReal x7443=(r01*sj5);
IkReal x7444=(cj5*r00);
CheckValue<IkReal> x7445=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7441*x7442))+(((-2.0)*x7443*x7444))+((x7441*(r00*r00)))+(r02*r02)+x7442)),-1);
if(!x7445.valid){
continue;
}
CheckValue<IkReal> x7446 = IKatan2WithCheck(IkReal(((((-1.0)*x7443))+x7444)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7445.value)))+(x7446.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7447=IKcos(j4);
IkReal x7448=IKsin(j4);
IkReal x7449=((1.0)*cj1);
IkReal x7450=((1.0)*x7447);
IkReal x7451=(cj5*x7447);
IkReal x7452=(cj5*x7448);
IkReal x7453=((1.0)*sj5*x7448);
evalcond[0]=(((r00*x7451))+(((-1.0)*r01*sj5*x7450))+((r02*x7448)));
evalcond[1]=(((r20*x7452))+(((-1.0)*r22*x7450))+(((-1.0)*r21*x7453)));
evalcond[2]=(((r10*x7452))+(((-1.0)*r12*x7450))+(((-1.0)*r11*x7453)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x7453))+((r00*x7452))+(((-1.0)*r02*x7450)));
evalcond[4]=(((r20*x7451))+(((-1.0)*cj2*x7449))+((sj1*sj2))+((r22*x7448))+(((-1.0)*r21*sj5*x7450)));
evalcond[5]=(((r12*x7448))+(((-1.0)*r11*sj5*x7450))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x7449))+((r10*x7451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7454=((1.0)*sj5);
CheckValue<IkReal> x7455=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x7454)))),-1);
if(!x7455.valid){
continue;
}
CheckValue<IkReal> x7456 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x7454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7455.value)))+(x7456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7457=IKcos(j4);
IkReal x7458=IKsin(j4);
IkReal x7459=((1.0)*cj1);
IkReal x7460=((1.0)*x7457);
IkReal x7461=(cj5*x7457);
IkReal x7462=(cj5*x7458);
IkReal x7463=((1.0)*sj5*x7458);
evalcond[0]=(((r02*x7458))+(((-1.0)*r01*sj5*x7460))+((r00*x7461)));
evalcond[1]=((((-1.0)*r22*x7460))+(((-1.0)*r21*x7463))+((r20*x7462)));
evalcond[2]=(((r10*x7462))+(((-1.0)*r12*x7460))+(((-1.0)*r11*x7463)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7460))+((r00*x7462))+(((-1.0)*r01*x7463)));
evalcond[4]=((((-1.0)*r21*sj5*x7460))+(((-1.0)*cj2*x7459))+((sj1*sj2))+((r22*x7458))+((r20*x7461)));
evalcond[5]=(((r10*x7461))+((r12*x7458))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x7459))+(((-1.0)*r11*sj5*x7460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7464=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7464.valid){
continue;
}
CheckValue<IkReal> x7465 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7464.value)))+(x7465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7466=IKcos(j4);
IkReal x7467=IKsin(j4);
IkReal x7468=((1.0)*cj1);
IkReal x7469=((1.0)*x7466);
IkReal x7470=(cj5*x7466);
IkReal x7471=(cj5*x7467);
IkReal x7472=((1.0)*sj5*x7467);
evalcond[0]=((((-1.0)*r01*sj5*x7469))+((r02*x7467))+((r00*x7470)));
evalcond[1]=(((r20*x7471))+(((-1.0)*r21*x7472))+(((-1.0)*r22*x7469)));
evalcond[2]=(((r10*x7471))+(((-1.0)*r11*x7472))+(((-1.0)*r12*x7469)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7469))+(((-1.0)*r01*x7472))+((r00*x7471)));
evalcond[4]=(((r20*x7470))+(((-1.0)*r21*sj5*x7469))+((sj1*sj2))+(((-1.0)*cj2*x7468))+((r22*x7467)));
evalcond[5]=(((r10*x7470))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x7469))+((r12*x7467))+(((-1.0)*sj2*x7468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7473=((-1.0)*r10);
IkReal x7475 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7475)==0){
continue;
}
IkReal x7474=pow(x7475,-0.5);
CheckValue<IkReal> x7476 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7473),IKFAST_ATAN2_MAGTHRESH);
if(!x7476.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7476.value));
IkReal gconst145=(r11*x7474);
IkReal gconst146=(x7473*x7474);
CheckValue<IkReal> x7477 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7477.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7477.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7478=((-1.0)*r10);
IkReal x7479=x7474;
CheckValue<IkReal> x7481 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7478),IKFAST_ATAN2_MAGTHRESH);
if(!x7481.valid){
continue;
}
IkReal x7480=((-1.0)*(x7481.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7480;
IkReal gconst144=x7480;
IkReal gconst145=(r11*x7479);
IkReal gconst146=(x7478*x7479);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7482=((1.0)*gconst145);
CheckValue<IkReal> x7483=IKPowWithIntegerCheck(IKsign((((gconst145*r20))+((gconst146*r21)))),-1);
if(!x7483.valid){
continue;
}
CheckValue<IkReal> x7484 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x7482))+((gconst146*r10*sj0))+(((-1.0)*r11*sj0*x7482)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7483.value)))+(x7484.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7485=IKsin(j4);
IkReal x7486=IKcos(j4);
IkReal x7487=(gconst145*r11);
IkReal x7488=(cj2*sj1);
IkReal x7489=(gconst145*r01);
IkReal x7490=(gconst145*r21);
IkReal x7491=(cj1*sj2);
IkReal x7492=((1.0)*x7486);
IkReal x7493=(gconst146*x7486);
IkReal x7494=(gconst146*x7485);
IkReal x7495=((1.0)*x7485);
evalcond[0]=(((r20*x7494))+(((-1.0)*r22*x7492))+(((-1.0)*x7490*x7495)));
evalcond[1]=(sj0+((r00*x7494))+(((-1.0)*x7489*x7495))+(((-1.0)*r02*x7492)));
evalcond[2]=((((-1.0)*x7487*x7495))+((r10*x7494))+(((-1.0)*r12*x7492))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x7485))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7493))+(((-1.0)*x7490*x7492)));
evalcond[4]=(((r00*x7493))+(((-1.0)*x7489*x7492))+((cj0*x7488))+((cj0*x7491))+((r02*x7485)));
evalcond[5]=((((-1.0)*x7487*x7492))+((r12*x7485))+((r10*x7493))+((sj0*x7491))+((sj0*x7488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7496=((1.0)*gconst145);
CheckValue<IkReal> x7497=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r01))+(((-1.0)*r00*x7496)))),-1);
if(!x7497.valid){
continue;
}
CheckValue<IkReal> x7498 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst146*r20))+(((-1.0)*cj0*r21*x7496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7497.value)))+(x7498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7499=IKsin(j4);
IkReal x7500=IKcos(j4);
IkReal x7501=(gconst145*r11);
IkReal x7502=(cj2*sj1);
IkReal x7503=(gconst145*r01);
IkReal x7504=(gconst145*r21);
IkReal x7505=(cj1*sj2);
IkReal x7506=((1.0)*x7500);
IkReal x7507=(gconst146*x7500);
IkReal x7508=(gconst146*x7499);
IkReal x7509=((1.0)*x7499);
evalcond[0]=((((-1.0)*r22*x7506))+((r20*x7508))+(((-1.0)*x7504*x7509)));
evalcond[1]=(((r00*x7508))+sj0+(((-1.0)*x7503*x7509))+(((-1.0)*r02*x7506)));
evalcond[2]=((((-1.0)*x7501*x7509))+((r10*x7508))+(((-1.0)*cj0))+(((-1.0)*r12*x7506)));
evalcond[3]=(((r22*x7499))+((r20*x7507))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7504*x7506)));
evalcond[4]=(((r00*x7507))+(((-1.0)*x7503*x7506))+((cj0*x7505))+((cj0*x7502))+((r02*x7499)));
evalcond[5]=((((-1.0)*x7501*x7506))+((sj0*x7505))+((sj0*x7502))+((r12*x7499))+((r10*x7507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7510=((-1.0)*r11);
IkReal x7512 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7512)==0){
continue;
}
IkReal x7511=pow(x7512,-0.5);
CheckValue<IkReal> x7513 = IKatan2WithCheck(IkReal(x7510),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7513.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7513.value))));
IkReal gconst148=(x7510*x7511);
IkReal gconst149=((1.0)*r10*x7511);
CheckValue<IkReal> x7514 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7514.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7514.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7515=((-1.0)*r11);
CheckValue<IkReal> x7518 = IKatan2WithCheck(IkReal(x7515),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7518.valid){
continue;
}
IkReal x7516=((1.0)*(x7518.value));
IkReal x7517=x7511;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7516)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7516)));
IkReal gconst148=(x7515*x7517);
IkReal gconst149=((1.0)*r10*x7517);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7519=((-1.0)*r11);
CheckValue<IkReal> x7522 = IKatan2WithCheck(IkReal(x7519),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7522.valid){
continue;
}
IkReal x7520=((1.0)*(x7522.value));
IkReal x7521=x7511;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7520)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7520)));
IkReal gconst148=(x7519*x7521);
IkReal gconst149=((1.0)*r10*x7521);
IkReal x7523=r12*r12;
IkReal x7524=(cj0*r02);
IkReal x7525=x7511;
IkReal x7526=(sj0*x7525);
j4eval[0]=((IKabs((((r12*x7524*x7525))+((x7523*x7526))+(((-1.0)*x7526)))))+(IKabs((((r12*sj0))+x7524))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7527=((-1.0)*r11);
CheckValue<IkReal> x7530 = IKatan2WithCheck(IkReal(x7527),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7530.valid){
continue;
}
IkReal x7528=((1.0)*(x7530.value));
IkReal x7529=x7511;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7528)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7528)));
IkReal gconst148=(x7527*x7529);
IkReal gconst149=((1.0)*r10*x7529);
IkReal x7531=r12*r12;
IkReal x7532=(sj1*sj2);
IkReal x7533=((1.0)+(((-1.0)*x7531)));
IkReal x7534=((1.0)*cj1*cj2);
CheckValue<IkReal> x7541=IKPowWithIntegerCheck(x7533,-1);
if(!x7541.valid){
continue;
}
IkReal x7535=x7541.value;
CheckValue<IkReal> x7542=IKPowWithIntegerCheck(((-1.0)+x7531),-1);
if(!x7542.valid){
continue;
}
IkReal x7536=x7542.value;
IkReal x7537=((1.0)*x7535);
if((x7533) < -0.00001)
continue;
IkReal x7538=IKsqrt(x7533);
IkReal x7539=(r12*r22*x7536*x7538);
IkReal x7540=((((-1.0)*x7537*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x7535))+(((-1.0)*(r22*r22)))+(((-1.0)*x7537*(r11*r11)*(r21*r21))));
j4eval[0]=x7540;
j4eval[1]=IKsign(x7540);
j4eval[2]=((IKabs(((((-1.0)*x7534*x7539))+((x7532*x7539)))))+(IKabs((((r22*x7532))+(((-1.0)*r22*x7534))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7543=(gconst149*r20);
IkReal x7544=(sj1*sj2);
IkReal x7545=(gconst148*r21);
IkReal x7546=(cj1*cj2);
CheckValue<IkReal> x7547=IKPowWithIntegerCheck(IKsign(((((2.0)*x7543*x7545))+(((-1.0)*(x7545*x7545)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7543*x7543))))),-1);
if(!x7547.valid){
continue;
}
CheckValue<IkReal> x7548 = IKatan2WithCheck(IkReal((((r22*x7544))+(((-1.0)*r22*x7546)))),IkReal((((x7545*x7546))+((x7543*x7544))+(((-1.0)*x7543*x7546))+(((-1.0)*x7544*x7545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7547.value)))+(x7548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7549=IKsin(j4);
IkReal x7550=IKcos(j4);
IkReal x7551=(gconst148*r11);
IkReal x7552=(gconst148*r21);
IkReal x7553=(cj2*sj1);
IkReal x7554=(gconst148*r01);
IkReal x7555=(cj1*sj2);
IkReal x7556=((1.0)*x7550);
IkReal x7557=(gconst149*x7550);
IkReal x7558=(gconst149*x7549);
IkReal x7559=((1.0)*x7549);
evalcond[0]=((((-1.0)*r22*x7556))+(((-1.0)*x7552*x7559))+((r20*x7558)));
evalcond[1]=(sj0+(((-1.0)*x7554*x7559))+((r00*x7558))+(((-1.0)*r02*x7556)));
evalcond[2]=(((r10*x7558))+(((-1.0)*x7551*x7559))+(((-1.0)*r12*x7556))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7549))+(((-1.0)*x7552*x7556))+((r20*x7557)));
evalcond[4]=((((-1.0)*x7554*x7556))+((cj0*x7553))+((cj0*x7555))+((r02*x7549))+((r00*x7557)));
evalcond[5]=(((r10*x7557))+((sj0*x7555))+((sj0*x7553))+(((-1.0)*x7551*x7556))+((r12*x7549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7560=((1.0)*gconst148);
CheckValue<IkReal> x7561 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7560))+((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*r11*sj0*x7560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7561.valid){
continue;
}
CheckValue<IkReal> x7562=IKPowWithIntegerCheck(IKsign((((gconst148*r20))+((gconst149*r21)))),-1);
if(!x7562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7561.value)+(((1.5707963267949)*(x7562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7563=IKsin(j4);
IkReal x7564=IKcos(j4);
IkReal x7565=(gconst148*r11);
IkReal x7566=(gconst148*r21);
IkReal x7567=(cj2*sj1);
IkReal x7568=(gconst148*r01);
IkReal x7569=(cj1*sj2);
IkReal x7570=((1.0)*x7564);
IkReal x7571=(gconst149*x7564);
IkReal x7572=(gconst149*x7563);
IkReal x7573=((1.0)*x7563);
evalcond[0]=((((-1.0)*x7566*x7573))+((r20*x7572))+(((-1.0)*r22*x7570)));
evalcond[1]=(sj0+((r00*x7572))+(((-1.0)*r02*x7570))+(((-1.0)*x7568*x7573)));
evalcond[2]=((((-1.0)*x7565*x7573))+((r10*x7572))+(((-1.0)*r12*x7570))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x7566*x7570))+((r22*x7563))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7571)));
evalcond[4]=(((r02*x7563))+((r00*x7571))+((cj0*x7567))+((cj0*x7569))+(((-1.0)*x7568*x7570)));
evalcond[5]=((((-1.0)*x7565*x7570))+((sj0*x7567))+((sj0*x7569))+((r12*x7563))+((r10*x7571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7574=((1.0)*gconst148);
CheckValue<IkReal> x7575 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst149*r20))+(((-1.0)*cj0*r21*x7574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7575.valid){
continue;
}
CheckValue<IkReal> x7576=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r01))+(((-1.0)*r00*x7574)))),-1);
if(!x7576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7575.value)+(((1.5707963267949)*(x7576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7577=IKsin(j4);
IkReal x7578=IKcos(j4);
IkReal x7579=(gconst148*r11);
IkReal x7580=(gconst148*r21);
IkReal x7581=(cj2*sj1);
IkReal x7582=(gconst148*r01);
IkReal x7583=(cj1*sj2);
IkReal x7584=((1.0)*x7578);
IkReal x7585=(gconst149*x7578);
IkReal x7586=(gconst149*x7577);
IkReal x7587=((1.0)*x7577);
evalcond[0]=((((-1.0)*r22*x7584))+(((-1.0)*x7580*x7587))+((r20*x7586)));
evalcond[1]=(sj0+(((-1.0)*r02*x7584))+(((-1.0)*x7582*x7587))+((r00*x7586)));
evalcond[2]=(((r10*x7586))+(((-1.0)*r12*x7584))+(((-1.0)*x7579*x7587))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7580*x7584))+((r22*x7577))+((r20*x7585)));
evalcond[4]=(((r02*x7577))+((cj0*x7581))+((cj0*x7583))+(((-1.0)*x7582*x7584))+((r00*x7585)));
evalcond[5]=(((r12*x7577))+((r10*x7585))+((sj0*x7583))+((sj0*x7581))+(((-1.0)*x7579*x7584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7588=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7588;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7588);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7589=((1.0)*sj5);
IkReal x7590=((((-1.0)*cj5*r01))+(((-1.0)*r00*x7589)));
j4eval[0]=x7590;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x7589))))));
j4eval[2]=IKsign(x7590);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7591=cj5*cj5;
IkReal x7592=r11*r11;
IkReal x7593=(r11*sj5);
IkReal x7594=(cj5*r10);
IkReal x7595=((r12*r12)+((x7591*(r10*r10)))+x7592+(((-1.0)*x7591*x7592))+(((-2.0)*x7593*x7594)));
j4eval[0]=x7595;
j4eval[1]=IKsign(x7595);
j4eval[2]=((IKabs(((((-1.0)*x7593))+x7594)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7596=cj5*cj5;
IkReal x7597=r11*r11;
IkReal x7598=(cj5*r10);
IkReal x7599=(r11*sj5);
CheckValue<IkReal> x7600 = IKatan2WithCheck(IkReal(((((-1.0)*x7599))+x7598)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7600.valid){
continue;
}
CheckValue<IkReal> x7601=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x7596*(r10*r10)))+(((-2.0)*x7598*x7599))+(((-1.0)*x7596*x7597))+x7597)),-1);
if(!x7601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7600.value)+(((1.5707963267949)*(x7601.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7602=IKcos(j4);
IkReal x7603=IKsin(j4);
IkReal x7604=(cj5*r10);
IkReal x7605=((1.0)*x7602);
IkReal x7606=(cj5*x7603);
IkReal x7607=(cj5*x7602);
IkReal x7608=((1.0)*sj5*x7603);
evalcond[0]=((((-1.0)*r11*sj5*x7605))+((x7602*x7604))+((r12*x7603)));
evalcond[1]=(((r20*x7606))+(((-1.0)*r22*x7605))+(((-1.0)*r21*x7608)));
evalcond[2]=(((r00*x7606))+(((-1.0)*r01*x7608))+(((-1.0)*r02*x7605)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x7608))+((x7603*x7604))+(((-1.0)*r12*x7605)));
evalcond[4]=(((cj2*sj1))+((r00*x7607))+(((-1.0)*r01*sj5*x7605))+((cj1*sj2))+((r02*x7603)));
evalcond[5]=(((r20*x7607))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7603))+(((-1.0)*r21*sj5*x7605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7609=((1.0)*sj5);
CheckValue<IkReal> x7610=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7609))+(((-1.0)*cj5*r01)))),-1);
if(!x7610.valid){
continue;
}
CheckValue<IkReal> x7611 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7610.value)))+(x7611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7612=IKcos(j4);
IkReal x7613=IKsin(j4);
IkReal x7614=(cj5*r10);
IkReal x7615=((1.0)*x7612);
IkReal x7616=(cj5*x7613);
IkReal x7617=(cj5*x7612);
IkReal x7618=((1.0)*sj5*x7613);
evalcond[0]=(((x7612*x7614))+((r12*x7613))+(((-1.0)*r11*sj5*x7615)));
evalcond[1]=(((r20*x7616))+(((-1.0)*r22*x7615))+(((-1.0)*r21*x7618)));
evalcond[2]=(((r00*x7616))+(((-1.0)*r01*x7618))+(((-1.0)*r02*x7615)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x7618))+(((-1.0)*r12*x7615))+((x7613*x7614)));
evalcond[4]=(((cj2*sj1))+((r00*x7617))+((cj1*sj2))+(((-1.0)*r01*sj5*x7615))+((r02*x7613)));
evalcond[5]=(((r20*x7617))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7613))+(((-1.0)*r21*sj5*x7615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7619=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7619.valid){
continue;
}
CheckValue<IkReal> x7620 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7619.value)))+(x7620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7621=IKcos(j4);
IkReal x7622=IKsin(j4);
IkReal x7623=(cj5*r10);
IkReal x7624=((1.0)*x7621);
IkReal x7625=(cj5*x7622);
IkReal x7626=(cj5*x7621);
IkReal x7627=((1.0)*sj5*x7622);
evalcond[0]=((((-1.0)*r11*sj5*x7624))+((x7621*x7623))+((r12*x7622)));
evalcond[1]=((((-1.0)*r21*x7627))+((r20*x7625))+(((-1.0)*r22*x7624)));
evalcond[2]=((((-1.0)*r01*x7627))+((r00*x7625))+(((-1.0)*r02*x7624)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7624))+(((-1.0)*r11*x7627))+((x7622*x7623)));
evalcond[4]=(((cj2*sj1))+((r02*x7622))+(((-1.0)*r01*sj5*x7624))+((cj1*sj2))+((r00*x7626)));
evalcond[5]=((((-1.0)*r21*sj5*x7624))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7626))+((r22*x7622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7628=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7628;
j4eval[1]=IKsign(x7628);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7629=((1.0)*sj5);
IkReal x7630=((((-1.0)*r20*x7629))+(((-1.0)*cj5*r21)));
j4eval[0]=x7630;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7629))+((cj5*r00))))));
j4eval[2]=IKsign(x7630);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7631=(sj1*sj2);
IkReal x7632=(cj1*cj2);
IkReal x7633=(r11*sj5);
IkReal x7634=(cj5*r10);
IkReal x7635=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7635;
j4eval[1]=IKsign(x7635);
j4eval[2]=((IKabs((((r12*x7632))+(((-1.0)*r12*x7631)))))+(IKabs((((x7631*x7634))+(((-1.0)*x7631*x7633))+((x7632*x7633))+(((-1.0)*x7632*x7634))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7636=(sj1*sj2);
IkReal x7637=(cj1*cj2);
IkReal x7638=(cj5*r10);
IkReal x7639=(r11*sj5);
CheckValue<IkReal> x7640 = IKatan2WithCheck(IkReal(((((-1.0)*x7637*x7638))+(((-1.0)*x7636*x7639))+((x7637*x7639))+((x7636*x7638)))),IkReal((((r12*x7637))+(((-1.0)*r12*x7636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7640.valid){
continue;
}
CheckValue<IkReal> x7641=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7640.value)+(((1.5707963267949)*(x7641.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7642=IKcos(j4);
IkReal x7643=IKsin(j4);
IkReal x7644=(cj5*r10);
IkReal x7645=((1.0)*cj1);
IkReal x7646=((1.0)*x7642);
IkReal x7647=(cj5*x7643);
IkReal x7648=(cj5*x7642);
IkReal x7649=((1.0)*sj5*x7643);
evalcond[0]=(((r12*x7643))+((x7642*x7644))+(((-1.0)*r11*sj5*x7646)));
evalcond[1]=((((-1.0)*r22*x7646))+(((-1.0)*r21*x7649))+((r20*x7647)));
evalcond[2]=((((-1.0)*r01*x7649))+(((-1.0)*r02*x7646))+((r00*x7647)));
evalcond[3]=((1.0)+((x7643*x7644))+(((-1.0)*r12*x7646))+(((-1.0)*r11*x7649)));
evalcond[4]=(((r22*x7643))+(((-1.0)*cj2*x7645))+((sj1*sj2))+(((-1.0)*r21*sj5*x7646))+((r20*x7648)));
evalcond[5]=(((r02*x7643))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x7646))+(((-1.0)*sj2*x7645))+((r00*x7648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7650=((1.0)*sj5);
CheckValue<IkReal> x7651 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x7650))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7651.valid){
continue;
}
CheckValue<IkReal> x7652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7650))+(((-1.0)*cj5*r21)))),-1);
if(!x7652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7651.value)+(((1.5707963267949)*(x7652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7653=IKcos(j4);
IkReal x7654=IKsin(j4);
IkReal x7655=(cj5*r10);
IkReal x7656=((1.0)*cj1);
IkReal x7657=((1.0)*x7653);
IkReal x7658=(cj5*x7654);
IkReal x7659=(cj5*x7653);
IkReal x7660=((1.0)*sj5*x7654);
evalcond[0]=((((-1.0)*r11*sj5*x7657))+((x7653*x7655))+((r12*x7654)));
evalcond[1]=((((-1.0)*r22*x7657))+((r20*x7658))+(((-1.0)*r21*x7660)));
evalcond[2]=((((-1.0)*r02*x7657))+(((-1.0)*r01*x7660))+((r00*x7658)));
evalcond[3]=((1.0)+(((-1.0)*r11*x7660))+((x7654*x7655))+(((-1.0)*r12*x7657)));
evalcond[4]=(((r22*x7654))+(((-1.0)*cj2*x7656))+((sj1*sj2))+(((-1.0)*r21*sj5*x7657))+((r20*x7659)));
evalcond[5]=(((r02*x7654))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x7657))+((r00*x7659))+(((-1.0)*sj2*x7656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7661=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7661.valid){
continue;
}
CheckValue<IkReal> x7662 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7661.value)))+(x7662.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7663=IKcos(j4);
IkReal x7664=IKsin(j4);
IkReal x7665=(cj5*r10);
IkReal x7666=((1.0)*cj1);
IkReal x7667=((1.0)*x7663);
IkReal x7668=(cj5*x7664);
IkReal x7669=(cj5*x7663);
IkReal x7670=((1.0)*sj5*x7664);
evalcond[0]=(((r12*x7664))+(((-1.0)*r11*sj5*x7667))+((x7663*x7665)));
evalcond[1]=(((r20*x7668))+(((-1.0)*r22*x7667))+(((-1.0)*r21*x7670)));
evalcond[2]=(((r00*x7668))+(((-1.0)*r01*x7670))+(((-1.0)*r02*x7667)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7667))+((x7664*x7665))+(((-1.0)*r11*x7670)));
evalcond[4]=(((r20*x7669))+((sj1*sj2))+(((-1.0)*cj2*x7666))+((r22*x7664))+(((-1.0)*r21*sj5*x7667)));
evalcond[5]=(((r00*x7669))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x7667))+(((-1.0)*sj2*x7666))+((r02*x7664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7671=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7671);
rxp0_2=(py*r00);
rxp1_0=(r21*x7671);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7672=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7672);
rxp0_2=(py*r00);
rxp1_0=(r21*x7672);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7673=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7673);
rxp0_2=(py*r00);
rxp1_0=(r21*x7673);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7676=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x7676.valid){
continue;
}
IkReal x7674=x7676.value;
IkReal x7675=((1.0)*cj0*x7674);
cj4array[0]=((((-1.0)*cj2*sj1*x7675))+(((-1.0)*cj1*sj2*x7675)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7677=IKsin(j4);
IkReal x7678=IKcos(j4);
IkReal x7679=(cj5*r20);
IkReal x7680=((1.0)*sj5);
evalcond[0]=(r12*x7677);
evalcond[1]=((((-1.0)*r12*x7678))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x7677*x7680))+((x7677*x7679)));
evalcond[3]=((((-1.0)*r01*x7677*x7680))+((cj5*r00*x7677)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x7678*x7679))+(((-1.0)*r21*x7678*x7680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7682=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7682.valid){
continue;
}
IkReal x7681=x7682.value;
cj4array[0]=((((-1.0)*sj1*sj2*x7681))+((cj1*cj2*x7681)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7683=IKsin(j4);
IkReal x7684=IKcos(j4);
IkReal x7685=(cj5*r00);
IkReal x7686=((1.0)*r01*sj5);
evalcond[0]=(r12*x7683);
evalcond[1]=((((-1.0)*r12*x7684))+(((-1.0)*cj0)));
evalcond[2]=(((cj5*r20*x7683))+(((-1.0)*r21*sj5*x7683)));
evalcond[3]=(((x7683*x7685))+(((-1.0)*x7683*x7686)));
evalcond[4]=(((x7684*x7685))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*x7684*x7686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7687=IKPowWithIntegerCheck(r12,-1);
if(!x7687.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x7687.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7688=IKsin(j4);
IkReal x7689=IKcos(j4);
IkReal x7690=(cj5*x7689);
IkReal x7691=((1.0)*r21*sj5);
IkReal x7692=((1.0)*r01*sj5);
IkReal x7693=(cj5*x7688);
evalcond[0]=(r12*x7688);
evalcond[1]=(((r20*x7693))+(((-1.0)*x7688*x7691)));
evalcond[2]=(((r00*x7693))+(((-1.0)*x7688*x7692)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7690))+(((-1.0)*x7689*x7691)));
evalcond[4]=(((r00*x7690))+((cj0*cj2*sj1))+(((-1.0)*x7689*x7692))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7694=((1.0)*sj5);
CheckValue<IkReal> x7695=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7695.valid){
continue;
}
CheckValue<IkReal> x7696 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x7694))+(((-1.0)*cj0*r01*x7694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7695.value)))+(x7696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7697=IKsin(j4);
IkReal x7698=IKcos(j4);
IkReal x7699=(cj2*sj1);
IkReal x7700=(cj5*r10);
IkReal x7701=(cj1*sj2);
IkReal x7702=((1.0)*x7698);
IkReal x7703=(cj5*x7697);
IkReal x7704=(cj5*x7698);
IkReal x7705=((1.0)*sj5*x7697);
evalcond[0]=((((-1.0)*r22*x7702))+((r20*x7703))+(((-1.0)*r21*x7705)));
evalcond[1]=(sj0+(((-1.0)*r01*x7705))+(((-1.0)*r02*x7702))+((r00*x7703)));
evalcond[2]=((((-1.0)*r11*x7705))+(((-1.0)*r12*x7702))+((x7697*x7700))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x7702))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7704))+((r22*x7697)));
evalcond[4]=(((r02*x7697))+(((-1.0)*r01*sj5*x7702))+((cj0*x7701))+((cj0*x7699))+((r00*x7704)));
evalcond[5]=(((x7698*x7700))+(((-1.0)*r11*sj5*x7702))+((r12*x7697))+((sj0*x7699))+((sj0*x7701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7706=((1.0)*sj5);
CheckValue<IkReal> x7707 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7706))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7707.valid){
continue;
}
CheckValue<IkReal> x7708=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7706))+(((-1.0)*cj5*r01)))),-1);
if(!x7708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7707.value)+(((1.5707963267949)*(x7708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7709=IKsin(j4);
IkReal x7710=IKcos(j4);
IkReal x7711=(cj2*sj1);
IkReal x7712=(cj5*r10);
IkReal x7713=(cj1*sj2);
IkReal x7714=((1.0)*x7710);
IkReal x7715=(cj5*x7709);
IkReal x7716=(cj5*x7710);
IkReal x7717=((1.0)*sj5*x7709);
evalcond[0]=((((-1.0)*r22*x7714))+((r20*x7715))+(((-1.0)*r21*x7717)));
evalcond[1]=(sj0+(((-1.0)*r01*x7717))+(((-1.0)*r02*x7714))+((r00*x7715)));
evalcond[2]=((((-1.0)*r11*x7717))+(((-1.0)*r12*x7714))+((x7709*x7712))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7716))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7709))+(((-1.0)*r21*sj5*x7714)));
evalcond[4]=((((-1.0)*r01*sj5*x7714))+((r02*x7709))+((cj0*x7713))+((cj0*x7711))+((r00*x7716)));
evalcond[5]=(((r12*x7709))+((sj0*x7713))+((sj0*x7711))+((x7710*x7712))+(((-1.0)*r11*sj5*x7714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7718=((1.0)*sj5);
CheckValue<IkReal> x7719=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7718)))),-1);
if(!x7719.valid){
continue;
}
CheckValue<IkReal> x7720 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7719.value)))+(x7720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7721=IKsin(j4);
IkReal x7722=IKcos(j4);
IkReal x7723=(cj2*sj1);
IkReal x7724=(cj5*r10);
IkReal x7725=(cj1*sj2);
IkReal x7726=((1.0)*x7722);
IkReal x7727=(cj5*x7721);
IkReal x7728=(cj5*x7722);
IkReal x7729=((1.0)*sj5*x7721);
evalcond[0]=((((-1.0)*r21*x7729))+(((-1.0)*r22*x7726))+((r20*x7727)));
evalcond[1]=((((-1.0)*r01*x7729))+sj0+((r00*x7727))+(((-1.0)*r02*x7726)));
evalcond[2]=(((x7721*x7724))+(((-1.0)*cj0))+(((-1.0)*r12*x7726))+(((-1.0)*r11*x7729)));
evalcond[3]=(((r22*x7721))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x7726))+((r20*x7728)));
evalcond[4]=(((r00*x7728))+((cj0*x7723))+((cj0*x7725))+(((-1.0)*r01*sj5*x7726))+((r02*x7721)));
evalcond[5]=(((sj0*x7723))+((sj0*x7725))+(((-1.0)*r11*sj5*x7726))+((x7722*x7724))+((r12*x7721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7730=r21*r21;
IkReal x7731=cj5*cj5;
IkReal x7732=(sj1*sj2);
IkReal x7733=(r21*sj5);
IkReal x7734=(cj5*r20);
IkReal x7735=(cj1*cj2);
CheckValue<IkReal> x7736 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7735))+((r22*x7732)))),IkReal((((x7733*x7735))+(((-1.0)*x7734*x7735))+((x7732*x7734))+(((-1.0)*x7732*x7733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7736.valid){
continue;
}
CheckValue<IkReal> x7737=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7730))+((x7730*x7731))+(((-1.0)*(r22*r22)))+(((2.0)*x7733*x7734))+(((-1.0)*x7731*(r20*r20))))),-1);
if(!x7737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7736.value)+(((1.5707963267949)*(x7737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7738=IKsin(j4);
IkReal x7739=IKcos(j4);
IkReal x7740=(cj5*r20);
IkReal x7741=(r21*sj5);
IkReal x7742=((1.0)*x7739);
evalcond[0]=((((-1.0)*r22*x7742))+(((-1.0)*x7738*x7741))+((x7738*x7740)));
evalcond[1]=((((-1.0)*x7741*x7742))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7739*x7740))+((r22*x7738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7743=(cj5*sj4);
IkReal x7744=(sj4*sj5);
if( IKabs((((r01*x7744))+(((-1.0)*r00*x7743))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x7743))+(((-1.0)*r11*x7744))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x7744))+(((-1.0)*r00*x7743))+((cj4*r02))))+IKsqr((((r10*x7743))+(((-1.0)*r11*x7744))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x7744))+(((-1.0)*r00*x7743))+((cj4*r02))), (((r10*x7743))+(((-1.0)*r11*x7744))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7745=IKcos(j0);
IkReal x7746=IKsin(j0);
IkReal x7747=(cj5*r10);
IkReal x7748=(cj5*r00);
IkReal x7749=((1.0)*sj5);
IkReal x7750=((0.566)*cj2);
IkReal x7751=((0.127)*sj5);
IkReal x7752=((1.0)*cj5);
IkReal x7753=(sj1*sj2);
IkReal x7754=((0.127)*cj5);
IkReal x7755=((1.0)*cj4);
IkReal x7756=((1.0)*cj2);
IkReal x7757=(cj2*sj1);
IkReal x7758=(cj1*x7745);
IkReal x7759=(cj1*x7746);
evalcond[0]=((((-1.0)*r02*x7755))+((sj4*x7748))+(((-1.0)*r01*sj4*x7749))+x7746);
evalcond[1]=(((sj4*x7747))+(((-1.0)*r11*sj4*x7749))+(((-1.0)*x7745))+(((-1.0)*r12*x7755)));
evalcond[2]=((((-1.0)*r01*x7752))+(((-1.0)*r00*x7749))+(((-1.0)*x7756*x7758))+((x7745*x7753)));
evalcond[3]=((((-1.0)*r10*x7749))+(((-1.0)*x7756*x7759))+(((-1.0)*r11*x7752))+((x7746*x7753)));
evalcond[4]=((((-1.0)*cj4*r01*x7749))+((cj4*x7748))+((r02*sj4))+((sj2*x7758))+((x7745*x7757)));
evalcond[5]=(((cj4*x7747))+(((-1.0)*cj4*r11*x7749))+((r12*sj4))+((x7746*x7757))+((sj2*x7759)));
evalcond[6]=(((r01*x7754))+((r00*x7751))+(((0.566)*x7745*x7753))+(((-1.0)*px))+(((-0.607)*x7758))+(((-1.0)*x7750*x7758))+(((0.188)*x7746)));
evalcond[7]=(((r10*x7751))+(((-0.188)*x7745))+(((-1.0)*py))+(((0.566)*x7746*x7753))+(((-0.607)*x7759))+(((-1.0)*x7750*x7759))+((r11*x7754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7760 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7760.valid){
continue;
}
CheckValue<IkReal> x7761=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x7761.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7760.value)+(((1.5707963267949)*(x7761.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7762=IKcos(j0);
IkReal x7763=IKsin(j0);
IkReal x7764=(r00*sj5);
IkReal x7765=((1.0)*cj5);
IkReal x7766=(r10*sj5);
IkReal x7767=(sj1*sj2);
IkReal x7768=(cj1*cj2);
IkReal x7769=((0.127)*cj5);
IkReal x7770=(cj1*x7762);
IkReal x7771=((0.566)*x7763);
evalcond[0]=((((-1.0)*r01*x7765))+(((-1.0)*x7764))+((x7762*x7767))+(((-1.0)*x7762*x7768)));
evalcond[1]=((((-1.0)*x7766))+(((-1.0)*x7763*x7768))+(((-1.0)*r11*x7765))+((x7763*x7767)));
evalcond[2]=((((0.127)*x7764))+(((-1.0)*px))+(((-0.607)*x7770))+(((-0.566)*x7762*x7768))+(((0.188)*x7763))+(((0.566)*x7762*x7767))+((r01*x7769)));
evalcond[3]=(((x7767*x7771))+(((-1.0)*x7768*x7771))+(((0.127)*x7766))+(((-1.0)*py))+(((-0.607)*cj1*x7763))+((r11*x7769))+(((-0.188)*x7762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7772=((1.0)*sj5);
IkReal x7773=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7772)));
j4eval[0]=x7773;
j4eval[1]=IKsign(x7773);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7772)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7774=((1.0)*sj5);
IkReal x7775=((((-1.0)*r00*x7774))+(((-1.0)*cj5*r01)));
j4eval[0]=x7775;
j4eval[1]=IKsign(x7775);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x7774)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7776=((1.0)*sj5);
IkReal x7777=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7777;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x7776))+(((-1.0)*cj0*r01*x7776)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x7777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7779 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7779)==0){
continue;
}
IkReal x7778=pow(x7779,-0.5);
CheckValue<IkReal> x7780 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7780.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7780.value));
IkReal gconst133=((-1.0)*r21*x7778);
IkReal gconst134=(r20*x7778);
CheckValue<IkReal> x7781 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7781.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7781.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7784 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7784.valid){
continue;
}
IkReal x7782=((-1.0)*(x7784.value));
IkReal x7783=x7778;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7782;
IkReal gconst132=x7782;
IkReal gconst133=((-1.0)*r21*x7783);
IkReal gconst134=(r20*x7783);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7787 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7787.valid){
continue;
}
IkReal x7785=((-1.0)*(x7787.value));
IkReal x7786=x7778;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7785;
IkReal gconst132=x7785;
IkReal gconst133=((-1.0)*r21*x7786);
IkReal gconst134=(r20*x7786);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7790 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7790.valid){
continue;
}
IkReal x7788=((-1.0)*(x7790.value));
IkReal x7789=x7778;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7788;
IkReal gconst132=x7788;
IkReal gconst133=((-1.0)*r21*x7789);
IkReal gconst134=(r20*x7789);
IkReal x7791=((1.0)*(r22*r22));
CheckValue<IkReal> x7795=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7791))),-1);
if(!x7795.valid){
continue;
}
IkReal x7792=x7795.value;
IkReal x7793=((1.0)*x7792);
IkReal x7794=((((-2.0)*x7792*(r20*r20)*(r21*r21)))+(((-1.0)*x7793*(r20*r20*r20*r20)))+(((-1.0)*x7791))+(((-1.0)*x7793*(r21*r21*r21*r21))));
j4eval[0]=x7794;
j4eval[1]=IKsign(x7794);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7796=(gconst134*r20);
IkReal x7797=(cj1*cj2);
IkReal x7798=(gconst133*r21);
IkReal x7799=(sj1*sj2);
CheckValue<IkReal> x7800 = IKatan2WithCheck(IkReal((((r22*x7799))+(((-1.0)*r22*x7797)))),IkReal(((((-1.0)*x7798*x7799))+((x7797*x7798))+((x7796*x7799))+(((-1.0)*x7796*x7797)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7800.valid){
continue;
}
CheckValue<IkReal> x7801=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7796*x7796)))+(((-1.0)*(r22*r22)))+(((2.0)*x7796*x7798))+(((-1.0)*(x7798*x7798))))),-1);
if(!x7801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7800.value)+(((1.5707963267949)*(x7801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7802=IKsin(j4);
IkReal x7803=IKcos(j4);
IkReal x7804=(gconst134*r10);
IkReal x7805=(cj2*sj1);
IkReal x7806=(gconst133*r11);
IkReal x7807=(gconst133*r01);
IkReal x7808=(gconst133*r21);
IkReal x7809=(cj1*sj2);
IkReal x7810=((1.0)*x7803);
IkReal x7811=((1.0)*x7802);
IkReal x7812=(gconst134*x7803);
IkReal x7813=(gconst134*x7802);
evalcond[0]=(((r20*x7813))+(((-1.0)*r22*x7810))+(((-1.0)*x7808*x7811)));
evalcond[1]=(sj0+(((-1.0)*r02*x7810))+((r00*x7813))+(((-1.0)*x7807*x7811)));
evalcond[2]=(((x7802*x7804))+(((-1.0)*x7806*x7811))+(((-1.0)*r12*x7810))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7812))+((r22*x7802))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7808*x7810)));
evalcond[4]=(((cj0*x7805))+((cj0*x7809))+((r02*x7802))+((r00*x7812))+(((-1.0)*x7807*x7810)));
evalcond[5]=((((-1.0)*x7806*x7810))+((x7803*x7804))+((sj0*x7805))+((sj0*x7809))+((r12*x7802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7814=((1.0)*gconst133);
CheckValue<IkReal> x7815 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst134*r20))+(((-1.0)*cj0*r21*x7814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7815.valid){
continue;
}
CheckValue<IkReal> x7816=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7814))+(((-1.0)*gconst134*r01)))),-1);
if(!x7816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7815.value)+(((1.5707963267949)*(x7816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7817=IKsin(j4);
IkReal x7818=IKcos(j4);
IkReal x7819=(gconst134*r10);
IkReal x7820=(cj2*sj1);
IkReal x7821=(gconst133*r11);
IkReal x7822=(gconst133*r01);
IkReal x7823=(gconst133*r21);
IkReal x7824=(cj1*sj2);
IkReal x7825=((1.0)*x7818);
IkReal x7826=((1.0)*x7817);
IkReal x7827=(gconst134*x7818);
IkReal x7828=(gconst134*x7817);
evalcond[0]=(((r20*x7828))+(((-1.0)*x7823*x7826))+(((-1.0)*r22*x7825)));
evalcond[1]=(sj0+(((-1.0)*r02*x7825))+((r00*x7828))+(((-1.0)*x7822*x7826)));
evalcond[2]=(((x7817*x7819))+(((-1.0)*x7821*x7826))+(((-1.0)*r12*x7825))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7827))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7823*x7825))+((r22*x7817)));
evalcond[4]=(((r02*x7817))+((r00*x7827))+(((-1.0)*x7822*x7825))+((cj0*x7820))+((cj0*x7824)));
evalcond[5]=(((x7818*x7819))+((sj0*x7820))+((sj0*x7824))+((r12*x7817))+(((-1.0)*x7821*x7825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7829=((1.0)*gconst133);
CheckValue<IkReal> x7830=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7829))+(((-1.0)*gconst134*r11)))),-1);
if(!x7830.valid){
continue;
}
CheckValue<IkReal> x7831 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst134*r20*sj0))+(((-1.0)*r21*sj0*x7829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7830.value)))+(x7831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7832=IKsin(j4);
IkReal x7833=IKcos(j4);
IkReal x7834=(gconst134*r10);
IkReal x7835=(cj2*sj1);
IkReal x7836=(gconst133*r11);
IkReal x7837=(gconst133*r01);
IkReal x7838=(gconst133*r21);
IkReal x7839=(cj1*sj2);
IkReal x7840=((1.0)*x7833);
IkReal x7841=((1.0)*x7832);
IkReal x7842=(gconst134*x7833);
IkReal x7843=(gconst134*x7832);
evalcond[0]=((((-1.0)*x7838*x7841))+(((-1.0)*r22*x7840))+((r20*x7843)));
evalcond[1]=((((-1.0)*x7837*x7841))+sj0+((r00*x7843))+(((-1.0)*r02*x7840)));
evalcond[2]=((((-1.0)*r12*x7840))+(((-1.0)*x7836*x7841))+((x7832*x7834))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x7838*x7840))+((r20*x7842))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7832)));
evalcond[4]=((((-1.0)*x7837*x7840))+((cj0*x7839))+((cj0*x7835))+((r00*x7842))+((r02*x7832)));
evalcond[5]=(((r12*x7832))+((x7833*x7834))+(((-1.0)*x7836*x7840))+((sj0*x7839))+((sj0*x7835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7845 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7845)==0){
continue;
}
IkReal x7844=pow(x7845,-0.5);
CheckValue<IkReal> x7846 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7846.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7846.value))));
IkReal gconst136=((1.0)*r21*x7844);
IkReal gconst137=((-1.0)*r20*x7844);
CheckValue<IkReal> x7847 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7847.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7847.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7850 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7850.valid){
continue;
}
IkReal x7848=((1.0)*(x7850.value));
IkReal x7849=x7844;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7848)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7848)));
IkReal gconst136=((1.0)*r21*x7849);
IkReal gconst137=((-1.0)*r20*x7849);
IkReal x7851=r22*r22;
IkReal x7852=((1.0)*x7851);
CheckValue<IkReal> x7856=IKPowWithIntegerCheck(((-1.0)+x7851),-1);
if(!x7856.valid){
continue;
}
IkReal x7853=x7856.value;
if((((1.0)+(((-1.0)*x7852)))) < -0.00001)
continue;
IkReal x7854=IKsqrt(((1.0)+(((-1.0)*x7852))));
IkReal x7855=(sj0*x7853*x7854);
j4eval[0]=((IKabs((x7855+(((-1.0)*x7852*x7855)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7859 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7859.valid){
continue;
}
IkReal x7857=((1.0)*(x7859.value));
IkReal x7858=x7844;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7857)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7857)));
IkReal gconst136=((1.0)*r21*x7858);
IkReal gconst137=((-1.0)*r20*x7858);
IkReal x7860=r22*r22;
IkReal x7861=((1.0)*x7860);
CheckValue<IkReal> x7865=IKPowWithIntegerCheck(((-1.0)+x7860),-1);
if(!x7865.valid){
continue;
}
IkReal x7862=x7865.value;
if((((1.0)+(((-1.0)*x7861)))) < -0.00001)
continue;
IkReal x7863=IKsqrt(((1.0)+(((-1.0)*x7861))));
IkReal x7864=(cj0*x7862*x7863);
j4eval[0]=((IKabs((x7864+(((-1.0)*x7861*x7864)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7868 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7868.valid){
continue;
}
IkReal x7866=((1.0)*(x7868.value));
IkReal x7867=x7844;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7866)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7866)));
IkReal gconst136=((1.0)*r21*x7867);
IkReal gconst137=((-1.0)*r20*x7867);
IkReal x7869=r22*r22;
IkReal x7870=(cj0*r02);
IkReal x7871=(r12*sj0);
CheckValue<IkReal> x7875=IKPowWithIntegerCheck(((-1.0)+x7869),-1);
if(!x7875.valid){
continue;
}
IkReal x7872=x7875.value;
if((((1.0)+(((-1.0)*x7869)))) < -0.00001)
continue;
IkReal x7873=IKsqrt(((1.0)+(((-1.0)*x7869))));
IkReal x7874=((1.0)*r22*x7872*x7873);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x7870+x7871)))+(IKabs(((((-1.0)*x7870*x7874))+(((-1.0)*x7871*x7874))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7876=((1.0)*gconst136);
CheckValue<IkReal> x7877 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x7876))+((gconst137*r10*sj0))+(((-1.0)*cj0*r01*x7876))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7877.valid){
continue;
}
CheckValue<IkReal> x7878=IKPowWithIntegerCheck(IKsign((((gconst136*r20))+((gconst137*r21)))),-1);
if(!x7878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7877.value)+(((1.5707963267949)*(x7878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7879=IKsin(j4);
IkReal x7880=IKcos(j4);
IkReal x7881=(gconst136*r01);
IkReal x7882=(cj2*sj1);
IkReal x7883=(gconst136*r11);
IkReal x7884=(gconst136*r21);
IkReal x7885=(cj1*sj2);
IkReal x7886=((1.0)*x7880);
IkReal x7887=(gconst137*x7880);
IkReal x7888=((1.0)*x7879);
IkReal x7889=(gconst137*x7879);
evalcond[0]=((((-1.0)*r22*x7886))+((r20*x7889))+(((-1.0)*x7884*x7888)));
evalcond[1]=(sj0+(((-1.0)*r02*x7886))+((r00*x7889))+(((-1.0)*x7881*x7888)));
evalcond[2]=(((r10*x7889))+(((-1.0)*r12*x7886))+(((-1.0)*cj0))+(((-1.0)*x7883*x7888)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7887))+(((-1.0)*x7884*x7886))+((r22*x7879)));
evalcond[4]=(((cj0*x7882))+((cj0*x7885))+((r00*x7887))+((r02*x7879))+(((-1.0)*x7881*x7886)));
evalcond[5]=(((sj0*x7882))+((sj0*x7885))+((r10*x7887))+((r12*x7879))+(((-1.0)*x7883*x7886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7890=((1.0)*gconst136);
CheckValue<IkReal> x7891 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7890))+((cj0*gconst137*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7891.valid){
continue;
}
CheckValue<IkReal> x7892=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r01))+(((-1.0)*r00*x7890)))),-1);
if(!x7892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7891.value)+(((1.5707963267949)*(x7892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7893=IKsin(j4);
IkReal x7894=IKcos(j4);
IkReal x7895=(gconst136*r01);
IkReal x7896=(cj2*sj1);
IkReal x7897=(gconst136*r11);
IkReal x7898=(gconst136*r21);
IkReal x7899=(cj1*sj2);
IkReal x7900=((1.0)*x7894);
IkReal x7901=(gconst137*x7894);
IkReal x7902=((1.0)*x7893);
IkReal x7903=(gconst137*x7893);
evalcond[0]=((((-1.0)*x7898*x7902))+(((-1.0)*r22*x7900))+((r20*x7903)));
evalcond[1]=(sj0+(((-1.0)*x7895*x7902))+((r00*x7903))+(((-1.0)*r02*x7900)));
evalcond[2]=((((-1.0)*r12*x7900))+((r10*x7903))+(((-1.0)*x7897*x7902))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x7898*x7900))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7893))+((r20*x7901)));
evalcond[4]=(((r02*x7893))+(((-1.0)*x7895*x7900))+((cj0*x7899))+((cj0*x7896))+((r00*x7901)));
evalcond[5]=(((r10*x7901))+(((-1.0)*x7897*x7900))+((r12*x7893))+((sj0*x7896))+((sj0*x7899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7904=((1.0)*gconst136);
CheckValue<IkReal> x7905 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst137*r20*sj0))+(((-1.0)*r21*sj0*x7904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7905.valid){
continue;
}
CheckValue<IkReal> x7906=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r11))+(((-1.0)*r10*x7904)))),-1);
if(!x7906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7905.value)+(((1.5707963267949)*(x7906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7907=IKsin(j4);
IkReal x7908=IKcos(j4);
IkReal x7909=(gconst136*r01);
IkReal x7910=(cj2*sj1);
IkReal x7911=(gconst136*r11);
IkReal x7912=(gconst136*r21);
IkReal x7913=(cj1*sj2);
IkReal x7914=((1.0)*x7908);
IkReal x7915=(gconst137*x7908);
IkReal x7916=((1.0)*x7907);
IkReal x7917=(gconst137*x7907);
evalcond[0]=((((-1.0)*r22*x7914))+(((-1.0)*x7912*x7916))+((r20*x7917)));
evalcond[1]=(sj0+(((-1.0)*r02*x7914))+((r00*x7917))+(((-1.0)*x7909*x7916)));
evalcond[2]=(((r10*x7917))+(((-1.0)*x7911*x7916))+(((-1.0)*r12*x7914))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+(((-1.0)*x7912*x7914))+((r20*x7915))+((sj1*sj2))+((r22*x7907)));
evalcond[4]=(((r02*x7907))+((r00*x7915))+(((-1.0)*x7909*x7914))+((cj0*x7910))+((cj0*x7913)));
evalcond[5]=(((sj0*x7910))+((sj0*x7913))+((r10*x7915))+(((-1.0)*x7911*x7914))+((r12*x7907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7918=((-1.0)*r00);
IkReal x7920 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7920)==0){
continue;
}
IkReal x7919=pow(x7920,-0.5);
CheckValue<IkReal> x7921 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7918),IKFAST_ATAN2_MAGTHRESH);
if(!x7921.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7921.value));
IkReal gconst139=(r01*x7919);
IkReal gconst140=(x7918*x7919);
CheckValue<IkReal> x7922 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7922.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7922.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7923=((-1.0)*r00);
IkReal x7924=x7919;
CheckValue<IkReal> x7926 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7923),IKFAST_ATAN2_MAGTHRESH);
if(!x7926.valid){
continue;
}
IkReal x7925=((-1.0)*(x7926.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7925;
IkReal gconst138=x7925;
IkReal gconst139=(r01*x7924);
IkReal gconst140=(x7923*x7924);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7927=((1.0)*gconst139);
CheckValue<IkReal> x7928=IKPowWithIntegerCheck(IKsign((((gconst139*r20))+((gconst140*r21)))),-1);
if(!x7928.valid){
continue;
}
CheckValue<IkReal> x7929 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7927))+((gconst140*r10*sj0))+(((-1.0)*r11*sj0*x7927))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7928.value)))+(x7929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7930=IKsin(j4);
IkReal x7931=IKcos(j4);
IkReal x7932=(cj2*sj1);
IkReal x7933=(gconst140*r10);
IkReal x7934=(cj1*sj2);
IkReal x7935=((1.0)*x7931);
IkReal x7936=(gconst140*x7931);
IkReal x7937=(gconst140*x7930);
IkReal x7938=((1.0)*gconst139*x7930);
evalcond[0]=((((-1.0)*r22*x7935))+((r20*x7937))+(((-1.0)*r21*x7938)));
evalcond[1]=(sj0+(((-1.0)*r01*x7938))+(((-1.0)*r02*x7935))+((r00*x7937)));
evalcond[2]=(((x7930*x7933))+(((-1.0)*r12*x7935))+(((-1.0)*r11*x7938))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7936))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7930))+(((-1.0)*gconst139*r21*x7935)));
evalcond[4]=(((cj0*x7934))+((cj0*x7932))+(((-1.0)*gconst139*r01*x7935))+((r02*x7930))+((r00*x7936)));
evalcond[5]=((((-1.0)*gconst139*r11*x7935))+((sj0*x7934))+((sj0*x7932))+((r12*x7930))+((x7931*x7933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7939=((1.0)*gconst139);
CheckValue<IkReal> x7940 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst140*r20*sj0))+(((-1.0)*r21*sj0*x7939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7940.valid){
continue;
}
CheckValue<IkReal> x7941=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7939))+(((-1.0)*gconst140*r11)))),-1);
if(!x7941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7940.value)+(((1.5707963267949)*(x7941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7942=IKsin(j4);
IkReal x7943=IKcos(j4);
IkReal x7944=(cj2*sj1);
IkReal x7945=(gconst140*r10);
IkReal x7946=(cj1*sj2);
IkReal x7947=((1.0)*x7943);
IkReal x7948=(gconst140*x7943);
IkReal x7949=(gconst140*x7942);
IkReal x7950=((1.0)*gconst139*x7942);
evalcond[0]=((((-1.0)*r22*x7947))+((r20*x7949))+(((-1.0)*r21*x7950)));
evalcond[1]=(sj0+(((-1.0)*r02*x7947))+(((-1.0)*r01*x7950))+((r00*x7949)));
evalcond[2]=((((-1.0)*r12*x7947))+((x7942*x7945))+(((-1.0)*r11*x7950))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x7948))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst139*r21*x7947))+((r22*x7942)));
evalcond[4]=(((cj0*x7944))+((cj0*x7946))+(((-1.0)*gconst139*r01*x7947))+((r02*x7942))+((r00*x7948)));
evalcond[5]=((((-1.0)*gconst139*r11*x7947))+((sj0*x7946))+((sj0*x7944))+((r12*x7942))+((x7943*x7945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7951=((-1.0)*r01);
IkReal x7953 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7953)==0){
continue;
}
IkReal x7952=pow(x7953,-0.5);
CheckValue<IkReal> x7954 = IKatan2WithCheck(IkReal(x7951),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7954.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7954.value))));
IkReal gconst142=(x7951*x7952);
IkReal gconst143=((1.0)*r00*x7952);
CheckValue<IkReal> x7955 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7955.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7955.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7956=((-1.0)*r01);
CheckValue<IkReal> x7959 = IKatan2WithCheck(IkReal(x7956),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7959.valid){
continue;
}
IkReal x7957=((1.0)*(x7959.value));
IkReal x7958=x7952;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7957)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7957)));
IkReal gconst142=(x7956*x7958);
IkReal gconst143=((1.0)*r00*x7958);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x7960=((-1.0)*r01);
CheckValue<IkReal> x7963 = IKatan2WithCheck(IkReal(x7960),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7963.valid){
continue;
}
IkReal x7961=((1.0)*(x7963.value));
IkReal x7962=x7952;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7961)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7961)));
IkReal gconst142=(x7960*x7962);
IkReal gconst143=((1.0)*r00*x7962);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7964=((-1.0)*r01);
CheckValue<IkReal> x7967 = IKatan2WithCheck(IkReal(x7964),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7967.valid){
continue;
}
IkReal x7965=((1.0)*(x7967.value));
IkReal x7966=x7952;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7965)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7965)));
IkReal gconst142=(x7964*x7966);
IkReal gconst143=((1.0)*r00*x7966);
IkReal x7968=r02*r02;
IkReal x7969=(r12*sj0);
IkReal x7970=x7952;
IkReal x7971=(cj0*x7970);
j4eval[0]=((IKabs(((((-1.0)*x7971))+((x7968*x7971))+((r02*x7969*x7970)))))+(IKabs((x7969+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7972=((1.0)*gconst142);
CheckValue<IkReal> x7973=IKPowWithIntegerCheck(IKsign((((gconst143*r21))+((gconst142*r20)))),-1);
if(!x7973.valid){
continue;
}
CheckValue<IkReal> x7974 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x7972))+(((-1.0)*r11*sj0*x7972))+((cj0*gconst143*r00))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7973.value)))+(x7974.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7975=IKsin(j4);
IkReal x7976=IKcos(j4);
IkReal x7977=(gconst143*r00);
IkReal x7978=(cj2*sj1);
IkReal x7979=(gconst142*r21);
IkReal x7980=(gconst142*r11);
IkReal x7981=(gconst142*r01);
IkReal x7982=(cj1*sj2);
IkReal x7983=((1.0)*x7976);
IkReal x7984=((1.0)*x7975);
IkReal x7985=(gconst143*x7976);
IkReal x7986=(gconst143*x7975);
evalcond[0]=((((-1.0)*r22*x7983))+((r20*x7986))+(((-1.0)*x7979*x7984)));
evalcond[1]=(((x7975*x7977))+sj0+(((-1.0)*x7981*x7984))+(((-1.0)*r02*x7983)));
evalcond[2]=((((-1.0)*r12*x7983))+(((-1.0)*x7980*x7984))+(((-1.0)*cj0))+((r10*x7986)));
evalcond[3]=(((r20*x7985))+(((-1.0)*x7979*x7983))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7975)));
evalcond[4]=((((-1.0)*x7981*x7983))+((r02*x7975))+((cj0*x7978))+((x7976*x7977))+((cj0*x7982)));
evalcond[5]=(((r12*x7975))+(((-1.0)*x7980*x7983))+((sj0*x7982))+((sj0*x7978))+((r10*x7985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7987=((1.0)*gconst142);
CheckValue<IkReal> x7988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7987))+(((-1.0)*gconst143*r01)))),-1);
if(!x7988.valid){
continue;
}
CheckValue<IkReal> x7989 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7987))+((cj0*gconst143*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7988.value)))+(x7989.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7990=IKsin(j4);
IkReal x7991=IKcos(j4);
IkReal x7992=(gconst143*r00);
IkReal x7993=(cj2*sj1);
IkReal x7994=(gconst142*r21);
IkReal x7995=(gconst142*r11);
IkReal x7996=(gconst142*r01);
IkReal x7997=(cj1*sj2);
IkReal x7998=((1.0)*x7991);
IkReal x7999=((1.0)*x7990);
IkReal x8000=(gconst143*x7991);
IkReal x8001=(gconst143*x7990);
evalcond[0]=(((r20*x8001))+(((-1.0)*x7994*x7999))+(((-1.0)*r22*x7998)));
evalcond[1]=(((x7990*x7992))+sj0+(((-1.0)*x7996*x7999))+(((-1.0)*r02*x7998)));
evalcond[2]=((((-1.0)*r12*x7998))+(((-1.0)*x7995*x7999))+(((-1.0)*cj0))+((r10*x8001)));
evalcond[3]=(((r20*x8000))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7990))+(((-1.0)*x7994*x7998)));
evalcond[4]=((((-1.0)*x7996*x7998))+((cj0*x7993))+((cj0*x7997))+((r02*x7990))+((x7991*x7992)));
evalcond[5]=((((-1.0)*x7995*x7998))+((sj0*x7997))+((sj0*x7993))+((r12*x7990))+((r10*x8000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8002=((1.0)*gconst142);
CheckValue<IkReal> x8003=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r11))+(((-1.0)*r10*x8002)))),-1);
if(!x8003.valid){
continue;
}
CheckValue<IkReal> x8004 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst143*r20*sj0))+(((-1.0)*r21*sj0*x8002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8003.value)))+(x8004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8005=IKsin(j4);
IkReal x8006=IKcos(j4);
IkReal x8007=(gconst143*r00);
IkReal x8008=(cj2*sj1);
IkReal x8009=(gconst142*r21);
IkReal x8010=(gconst142*r11);
IkReal x8011=(gconst142*r01);
IkReal x8012=(cj1*sj2);
IkReal x8013=((1.0)*x8006);
IkReal x8014=((1.0)*x8005);
IkReal x8015=(gconst143*x8006);
IkReal x8016=(gconst143*x8005);
evalcond[0]=((((-1.0)*r22*x8013))+(((-1.0)*x8009*x8014))+((r20*x8016)));
evalcond[1]=((((-1.0)*x8011*x8014))+((x8005*x8007))+(((-1.0)*r02*x8013))+sj0);
evalcond[2]=((((-1.0)*x8010*x8014))+((r10*x8016))+(((-1.0)*r12*x8013))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x8009*x8013))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8005))+((r20*x8015)));
evalcond[4]=((((-1.0)*x8011*x8013))+((cj0*x8012))+((cj0*x8008))+((r02*x8005))+((x8006*x8007)));
evalcond[5]=(((sj0*x8008))+(((-1.0)*x8010*x8013))+((r12*x8005))+((sj0*x8012))+((r10*x8015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8017=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8017;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x8017);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8018=((1.0)*sj5);
IkReal x8019=((((-1.0)*cj5*r11))+(((-1.0)*r10*x8018)));
j4eval[0]=x8019;
j4eval[1]=IKsign(x8019);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x8018)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8020=(cj1*sj2);
IkReal x8021=(cj5*r00);
IkReal x8022=((1.0)*r02);
IkReal x8023=(cj2*sj1);
IkReal x8024=((1.0)*r01*sj5);
IkReal x8025=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8025;
j4eval[1]=((IKabs(((((-1.0)*x8023*x8024))+(((-1.0)*x8020*x8024))+((x8020*x8021))+((x8021*x8023)))))+(IKabs(((((-1.0)*x8022*x8023))+(((-1.0)*x8020*x8022))))));
j4eval[2]=IKsign(x8025);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8026=(cj1*sj2);
IkReal x8027=(cj5*r00);
IkReal x8028=((1.0)*r02);
IkReal x8029=(cj2*sj1);
IkReal x8030=((1.0)*r01*sj5);
CheckValue<IkReal> x8031=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8031.valid){
continue;
}
CheckValue<IkReal> x8032 = IKatan2WithCheck(IkReal((((x8026*x8027))+((x8027*x8029))+(((-1.0)*x8026*x8030))+(((-1.0)*x8029*x8030)))),IkReal(((((-1.0)*x8026*x8028))+(((-1.0)*x8028*x8029)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8031.value)))+(x8032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8033=IKcos(j4);
IkReal x8034=IKsin(j4);
IkReal x8035=((1.0)*x8033);
IkReal x8036=(cj5*x8033);
IkReal x8037=(cj5*x8034);
IkReal x8038=((1.0)*sj5*x8034);
evalcond[0]=((((-1.0)*r01*sj5*x8035))+((r02*x8034))+((r00*x8036)));
evalcond[1]=((((-1.0)*r21*x8038))+((r20*x8037))+(((-1.0)*r22*x8035)));
evalcond[2]=((((-1.0)*r11*x8038))+((r10*x8037))+(((-1.0)*r12*x8035)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8035))+(((-1.0)*r01*x8038))+((r00*x8037)));
evalcond[4]=(((cj2*sj1))+((r10*x8036))+((cj1*sj2))+((r12*x8034))+(((-1.0)*r11*sj5*x8035)));
evalcond[5]=(((r20*x8036))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x8035))+((r22*x8034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8039=((1.0)*sj5);
CheckValue<IkReal> x8040=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x8039)))),-1);
if(!x8040.valid){
continue;
}
CheckValue<IkReal> x8041 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x8039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8040.value)))+(x8041.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8042=IKcos(j4);
IkReal x8043=IKsin(j4);
IkReal x8044=((1.0)*x8042);
IkReal x8045=(cj5*x8042);
IkReal x8046=(cj5*x8043);
IkReal x8047=((1.0)*sj5*x8043);
evalcond[0]=((((-1.0)*r01*sj5*x8044))+((r02*x8043))+((r00*x8045)));
evalcond[1]=(((r20*x8046))+(((-1.0)*r21*x8047))+(((-1.0)*r22*x8044)));
evalcond[2]=((((-1.0)*r11*x8047))+((r10*x8046))+(((-1.0)*r12*x8044)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8044))+((r00*x8046))+(((-1.0)*r01*x8047)));
evalcond[4]=(((cj2*sj1))+((r10*x8045))+((cj1*sj2))+(((-1.0)*r11*sj5*x8044))+((r12*x8043)));
evalcond[5]=(((r20*x8045))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x8044))+((r22*x8043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8048 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8048.valid){
continue;
}
CheckValue<IkReal> x8049=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8048.value)+(((1.5707963267949)*(x8049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8050=IKcos(j4);
IkReal x8051=IKsin(j4);
IkReal x8052=((1.0)*x8050);
IkReal x8053=(cj5*x8050);
IkReal x8054=(cj5*x8051);
IkReal x8055=((1.0)*sj5*x8051);
evalcond[0]=(((r00*x8053))+(((-1.0)*r01*sj5*x8052))+((r02*x8051)));
evalcond[1]=(((r20*x8054))+(((-1.0)*r21*x8055))+(((-1.0)*r22*x8052)));
evalcond[2]=((((-1.0)*r12*x8052))+((r10*x8054))+(((-1.0)*r11*x8055)));
evalcond[3]=((1.0)+((r00*x8054))+(((-1.0)*r02*x8052))+(((-1.0)*r01*x8055)));
evalcond[4]=(((cj2*sj1))+((r10*x8053))+((cj1*sj2))+(((-1.0)*r11*sj5*x8052))+((r12*x8051)));
evalcond[5]=(((r20*x8053))+(((-1.0)*r21*sj5*x8052))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8056=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8056;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x8056);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8057=((1.0)*sj5);
IkReal x8058=((((-1.0)*r20*x8057))+(((-1.0)*cj5*r21)));
j4eval[0]=x8058;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x8057))))));
j4eval[2]=IKsign(x8058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8059=cj5*cj5;
IkReal x8060=r01*r01;
IkReal x8061=(cj5*r00);
IkReal x8062=(r01*sj5);
IkReal x8063=((((-2.0)*x8061*x8062))+x8060+(r02*r02)+(((-1.0)*x8059*x8060))+((x8059*(r00*r00))));
j4eval[0]=x8063;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8062))+x8061))));
j4eval[2]=IKsign(x8063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8064=cj5*cj5;
IkReal x8065=r01*r01;
IkReal x8066=(r01*sj5);
IkReal x8067=(cj5*r00);
CheckValue<IkReal> x8068=IKPowWithIntegerCheck(IKsign((((x8064*(r00*r00)))+(((-1.0)*x8064*x8065))+x8065+(r02*r02)+(((-2.0)*x8066*x8067)))),-1);
if(!x8068.valid){
continue;
}
CheckValue<IkReal> x8069 = IKatan2WithCheck(IkReal(((((-1.0)*x8066))+x8067)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8068.value)))+(x8069.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8070=IKcos(j4);
IkReal x8071=IKsin(j4);
IkReal x8072=((1.0)*cj1);
IkReal x8073=((1.0)*x8070);
IkReal x8074=(cj5*x8070);
IkReal x8075=(cj5*x8071);
IkReal x8076=((1.0)*sj5*x8071);
evalcond[0]=(((r02*x8071))+(((-1.0)*r01*sj5*x8073))+((r00*x8074)));
evalcond[1]=(((r20*x8075))+(((-1.0)*r22*x8073))+(((-1.0)*r21*x8076)));
evalcond[2]=(((r10*x8075))+(((-1.0)*r12*x8073))+(((-1.0)*r11*x8076)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8073))+(((-1.0)*r01*x8076))+((r00*x8075)));
evalcond[4]=(((r20*x8074))+(((-1.0)*cj2*x8072))+(((-1.0)*r21*sj5*x8073))+((sj1*sj2))+((r22*x8071)));
evalcond[5]=(((r10*x8074))+(((-1.0)*sj2*x8072))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x8073))+((r12*x8071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8077=((1.0)*sj5);
CheckValue<IkReal> x8078 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x8077)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8078.valid){
continue;
}
CheckValue<IkReal> x8079=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x8077)))),-1);
if(!x8079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8078.value)+(((1.5707963267949)*(x8079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8080=IKcos(j4);
IkReal x8081=IKsin(j4);
IkReal x8082=((1.0)*cj1);
IkReal x8083=((1.0)*x8080);
IkReal x8084=(cj5*x8080);
IkReal x8085=(cj5*x8081);
IkReal x8086=((1.0)*sj5*x8081);
evalcond[0]=((((-1.0)*r01*sj5*x8083))+((r00*x8084))+((r02*x8081)));
evalcond[1]=((((-1.0)*r22*x8083))+(((-1.0)*r21*x8086))+((r20*x8085)));
evalcond[2]=(((r10*x8085))+(((-1.0)*r11*x8086))+(((-1.0)*r12*x8083)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8083))+(((-1.0)*r01*x8086))+((r00*x8085)));
evalcond[4]=((((-1.0)*cj2*x8082))+(((-1.0)*r21*sj5*x8083))+((sj1*sj2))+((r22*x8081))+((r20*x8084)));
evalcond[5]=(((r10*x8084))+(((-1.0)*sj2*x8082))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x8083))+((r12*x8081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8087=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8087.valid){
continue;
}
CheckValue<IkReal> x8088 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8087.value)))+(x8088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8089=IKcos(j4);
IkReal x8090=IKsin(j4);
IkReal x8091=((1.0)*cj1);
IkReal x8092=((1.0)*x8089);
IkReal x8093=(cj5*x8089);
IkReal x8094=(cj5*x8090);
IkReal x8095=((1.0)*sj5*x8090);
evalcond[0]=((((-1.0)*r01*sj5*x8092))+((r00*x8093))+((r02*x8090)));
evalcond[1]=((((-1.0)*r22*x8092))+((r20*x8094))+(((-1.0)*r21*x8095)));
evalcond[2]=(((r10*x8094))+(((-1.0)*r12*x8092))+(((-1.0)*r11*x8095)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8092))+(((-1.0)*r01*x8095))+((r00*x8094)));
evalcond[4]=((((-1.0)*cj2*x8091))+(((-1.0)*r21*sj5*x8092))+((r22*x8090))+((sj1*sj2))+((r20*x8093)));
evalcond[5]=((((-1.0)*r11*sj5*x8092))+((r10*x8093))+(((-1.0)*cj2*sj1))+((r12*x8090))+(((-1.0)*sj2*x8091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8096=((-1.0)*r10);
IkReal x8098 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8098)==0){
continue;
}
IkReal x8097=pow(x8098,-0.5);
CheckValue<IkReal> x8099 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8096),IKFAST_ATAN2_MAGTHRESH);
if(!x8099.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8099.value));
IkReal gconst145=(r11*x8097);
IkReal gconst146=(x8096*x8097);
CheckValue<IkReal> x8100 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8100.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8100.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8101=((-1.0)*r10);
IkReal x8102=x8097;
CheckValue<IkReal> x8104 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8101),IKFAST_ATAN2_MAGTHRESH);
if(!x8104.valid){
continue;
}
IkReal x8103=((-1.0)*(x8104.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x8103;
IkReal gconst144=x8103;
IkReal gconst145=(r11*x8102);
IkReal gconst146=(x8101*x8102);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8105=((1.0)*gconst145);
CheckValue<IkReal> x8106 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x8105))+(((-1.0)*r11*sj0*x8105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8106.valid){
continue;
}
CheckValue<IkReal> x8107=IKPowWithIntegerCheck(IKsign((((gconst145*r20))+((gconst146*r21)))),-1);
if(!x8107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8106.value)+(((1.5707963267949)*(x8107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8108=IKsin(j4);
IkReal x8109=IKcos(j4);
IkReal x8110=(gconst145*r11);
IkReal x8111=(cj2*sj1);
IkReal x8112=(gconst145*r01);
IkReal x8113=(gconst145*r21);
IkReal x8114=(cj1*sj2);
IkReal x8115=((1.0)*x8109);
IkReal x8116=(gconst146*x8109);
IkReal x8117=(gconst146*x8108);
IkReal x8118=((1.0)*x8108);
evalcond[0]=((((-1.0)*x8113*x8118))+((r20*x8117))+(((-1.0)*r22*x8115)));
evalcond[1]=((((-1.0)*x8112*x8118))+sj0+(((-1.0)*r02*x8115))+((r00*x8117)));
evalcond[2]=((((-1.0)*r12*x8115))+(((-1.0)*x8110*x8118))+((r10*x8117))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x8113*x8115))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8116))+((r22*x8108)));
evalcond[4]=((((-1.0)*x8112*x8115))+((r02*x8108))+((cj0*x8111))+((cj0*x8114))+((r00*x8116)));
evalcond[5]=((((-1.0)*x8110*x8115))+((r10*x8116))+((r12*x8108))+((sj0*x8111))+((sj0*x8114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8119=((1.0)*gconst145);
CheckValue<IkReal> x8120=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r01))+(((-1.0)*r00*x8119)))),-1);
if(!x8120.valid){
continue;
}
CheckValue<IkReal> x8121 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst146*r20))+(((-1.0)*cj0*r21*x8119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8120.value)))+(x8121.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8122=IKsin(j4);
IkReal x8123=IKcos(j4);
IkReal x8124=(gconst145*r11);
IkReal x8125=(cj2*sj1);
IkReal x8126=(gconst145*r01);
IkReal x8127=(gconst145*r21);
IkReal x8128=(cj1*sj2);
IkReal x8129=((1.0)*x8123);
IkReal x8130=(gconst146*x8123);
IkReal x8131=(gconst146*x8122);
IkReal x8132=((1.0)*x8122);
evalcond[0]=(((r20*x8131))+(((-1.0)*x8127*x8132))+(((-1.0)*r22*x8129)));
evalcond[1]=(((r00*x8131))+sj0+(((-1.0)*x8126*x8132))+(((-1.0)*r02*x8129)));
evalcond[2]=((((-1.0)*r12*x8129))+(((-1.0)*x8124*x8132))+(((-1.0)*cj0))+((r10*x8131)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8130))+((r22*x8122))+(((-1.0)*x8127*x8129)));
evalcond[4]=(((r00*x8130))+((r02*x8122))+((cj0*x8125))+((cj0*x8128))+(((-1.0)*x8126*x8129)));
evalcond[5]=((((-1.0)*x8124*x8129))+((r12*x8122))+((r10*x8130))+((sj0*x8128))+((sj0*x8125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8133=((-1.0)*r11);
IkReal x8135 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8135)==0){
continue;
}
IkReal x8134=pow(x8135,-0.5);
CheckValue<IkReal> x8136 = IKatan2WithCheck(IkReal(x8133),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8136.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8136.value))));
IkReal gconst148=(x8133*x8134);
IkReal gconst149=((1.0)*r10*x8134);
CheckValue<IkReal> x8137 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8137.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8137.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8138=((-1.0)*r11);
CheckValue<IkReal> x8141 = IKatan2WithCheck(IkReal(x8138),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8141.valid){
continue;
}
IkReal x8139=((1.0)*(x8141.value));
IkReal x8140=x8134;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8139)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8139)));
IkReal gconst148=(x8138*x8140);
IkReal gconst149=((1.0)*r10*x8140);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8142=((-1.0)*r11);
CheckValue<IkReal> x8145 = IKatan2WithCheck(IkReal(x8142),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8145.valid){
continue;
}
IkReal x8143=((1.0)*(x8145.value));
IkReal x8144=x8134;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8143)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8143)));
IkReal gconst148=(x8142*x8144);
IkReal gconst149=((1.0)*r10*x8144);
IkReal x8146=r12*r12;
IkReal x8147=(cj0*r02);
IkReal x8148=x8134;
IkReal x8149=(sj0*x8148);
j4eval[0]=((IKabs((((r12*sj0))+x8147)))+(IKabs((((r12*x8147*x8148))+(((-1.0)*x8149))+((x8146*x8149))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8150=((-1.0)*r11);
CheckValue<IkReal> x8153 = IKatan2WithCheck(IkReal(x8150),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8153.valid){
continue;
}
IkReal x8151=((1.0)*(x8153.value));
IkReal x8152=x8134;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8151)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8151)));
IkReal gconst148=(x8150*x8152);
IkReal gconst149=((1.0)*r10*x8152);
IkReal x8154=r12*r12;
IkReal x8155=(sj1*sj2);
IkReal x8156=((1.0)+(((-1.0)*x8154)));
IkReal x8157=((1.0)*cj1*cj2);
CheckValue<IkReal> x8164=IKPowWithIntegerCheck(x8156,-1);
if(!x8164.valid){
continue;
}
IkReal x8158=x8164.value;
CheckValue<IkReal> x8165=IKPowWithIntegerCheck(((-1.0)+x8154),-1);
if(!x8165.valid){
continue;
}
IkReal x8159=x8165.value;
IkReal x8160=((1.0)*x8158);
if((x8156) < -0.00001)
continue;
IkReal x8161=IKsqrt(x8156);
IkReal x8162=(r12*r22*x8159*x8161);
IkReal x8163=((((-1.0)*x8160*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x8158))+(((-1.0)*x8160*(r11*r11)*(r21*r21))));
j4eval[0]=x8163;
j4eval[1]=IKsign(x8163);
j4eval[2]=((IKabs(((((-1.0)*x8157*x8162))+((x8155*x8162)))))+(IKabs((((r22*x8155))+(((-1.0)*r22*x8157))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8166=(gconst149*r20);
IkReal x8167=(sj1*sj2);
IkReal x8168=(gconst148*r21);
IkReal x8169=(cj1*cj2);
CheckValue<IkReal> x8170 = IKatan2WithCheck(IkReal((((r22*x8167))+(((-1.0)*r22*x8169)))),IkReal((((x8168*x8169))+(((-1.0)*x8166*x8169))+(((-1.0)*x8167*x8168))+((x8166*x8167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8170.valid){
continue;
}
CheckValue<IkReal> x8171=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8168*x8168)))+(((-1.0)*(x8166*x8166)))+(((2.0)*x8166*x8168))+(((-1.0)*(r22*r22))))),-1);
if(!x8171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8170.value)+(((1.5707963267949)*(x8171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8172=IKsin(j4);
IkReal x8173=IKcos(j4);
IkReal x8174=(gconst148*r11);
IkReal x8175=(gconst148*r21);
IkReal x8176=(cj2*sj1);
IkReal x8177=(gconst148*r01);
IkReal x8178=(cj1*sj2);
IkReal x8179=((1.0)*x8173);
IkReal x8180=(gconst149*x8173);
IkReal x8181=(gconst149*x8172);
IkReal x8182=((1.0)*x8172);
evalcond[0]=((((-1.0)*x8175*x8182))+(((-1.0)*r22*x8179))+((r20*x8181)));
evalcond[1]=(sj0+((r00*x8181))+(((-1.0)*r02*x8179))+(((-1.0)*x8177*x8182)));
evalcond[2]=(((r10*x8181))+(((-1.0)*r12*x8179))+(((-1.0)*x8174*x8182))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x8175*x8179))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8172))+((r20*x8180)));
evalcond[4]=(((r02*x8172))+((r00*x8180))+((cj0*x8176))+((cj0*x8178))+(((-1.0)*x8177*x8179)));
evalcond[5]=(((r10*x8180))+((sj0*x8176))+((sj0*x8178))+((r12*x8172))+(((-1.0)*x8174*x8179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8183=((1.0)*gconst148);
CheckValue<IkReal> x8184 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8183))+((cj0*gconst149*r00))+(((-1.0)*r11*sj0*x8183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8184.valid){
continue;
}
CheckValue<IkReal> x8185=IKPowWithIntegerCheck(IKsign((((gconst148*r20))+((gconst149*r21)))),-1);
if(!x8185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8184.value)+(((1.5707963267949)*(x8185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8186=IKsin(j4);
IkReal x8187=IKcos(j4);
IkReal x8188=(gconst148*r11);
IkReal x8189=(gconst148*r21);
IkReal x8190=(cj2*sj1);
IkReal x8191=(gconst148*r01);
IkReal x8192=(cj1*sj2);
IkReal x8193=((1.0)*x8187);
IkReal x8194=(gconst149*x8187);
IkReal x8195=(gconst149*x8186);
IkReal x8196=((1.0)*x8186);
evalcond[0]=(((r20*x8195))+(((-1.0)*r22*x8193))+(((-1.0)*x8189*x8196)));
evalcond[1]=((((-1.0)*r02*x8193))+((r00*x8195))+sj0+(((-1.0)*x8191*x8196)));
evalcond[2]=(((r10*x8195))+(((-1.0)*x8188*x8196))+(((-1.0)*r12*x8193))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x8194))+((r22*x8186))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8189*x8193)));
evalcond[4]=(((r00*x8194))+((r02*x8186))+(((-1.0)*x8191*x8193))+((cj0*x8192))+((cj0*x8190)));
evalcond[5]=(((r12*x8186))+((r10*x8194))+(((-1.0)*x8188*x8193))+((sj0*x8190))+((sj0*x8192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8197=((1.0)*gconst148);
CheckValue<IkReal> x8198 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x8197))+((cj0*gconst149*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8198.valid){
continue;
}
CheckValue<IkReal> x8199=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r01))+(((-1.0)*r00*x8197)))),-1);
if(!x8199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8198.value)+(((1.5707963267949)*(x8199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8200=IKsin(j4);
IkReal x8201=IKcos(j4);
IkReal x8202=(gconst148*r11);
IkReal x8203=(gconst148*r21);
IkReal x8204=(cj2*sj1);
IkReal x8205=(gconst148*r01);
IkReal x8206=(cj1*sj2);
IkReal x8207=((1.0)*x8201);
IkReal x8208=(gconst149*x8201);
IkReal x8209=(gconst149*x8200);
IkReal x8210=((1.0)*x8200);
evalcond[0]=((((-1.0)*r22*x8207))+(((-1.0)*x8203*x8210))+((r20*x8209)));
evalcond[1]=((((-1.0)*x8205*x8210))+sj0+(((-1.0)*r02*x8207))+((r00*x8209)));
evalcond[2]=((((-1.0)*x8202*x8210))+(((-1.0)*r12*x8207))+((r10*x8209))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x8200))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8203*x8207))+((r20*x8208)));
evalcond[4]=(((r02*x8200))+(((-1.0)*x8205*x8207))+((cj0*x8206))+((cj0*x8204))+((r00*x8208)));
evalcond[5]=(((sj0*x8206))+((sj0*x8204))+(((-1.0)*x8202*x8207))+((r12*x8200))+((r10*x8208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8211=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8211;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x8211);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8212=((1.0)*sj5);
IkReal x8213=((((-1.0)*r00*x8212))+(((-1.0)*cj5*r01)));
j4eval[0]=x8213;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x8212))))));
j4eval[2]=IKsign(x8213);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8214=cj5*cj5;
IkReal x8215=r11*r11;
IkReal x8216=(r11*sj5);
IkReal x8217=(cj5*r10);
IkReal x8218=((r12*r12)+((x8214*(r10*r10)))+(((-2.0)*x8216*x8217))+(((-1.0)*x8214*x8215))+x8215);
j4eval[0]=x8218;
j4eval[1]=IKsign(x8218);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x8216))+x8217))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8219=cj5*cj5;
IkReal x8220=r11*r11;
IkReal x8221=(cj5*r10);
IkReal x8222=(r11*sj5);
CheckValue<IkReal> x8223=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x8221*x8222))+((x8219*(r10*r10)))+(((-1.0)*x8219*x8220))+x8220)),-1);
if(!x8223.valid){
continue;
}
CheckValue<IkReal> x8224 = IKatan2WithCheck(IkReal(((((-1.0)*x8222))+x8221)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8223.value)))+(x8224.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8225=IKcos(j4);
IkReal x8226=IKsin(j4);
IkReal x8227=(cj5*r10);
IkReal x8228=((1.0)*x8225);
IkReal x8229=(cj5*x8226);
IkReal x8230=(cj5*x8225);
IkReal x8231=((1.0)*sj5*x8226);
evalcond[0]=((((-1.0)*r11*sj5*x8228))+((r12*x8226))+((x8225*x8227)));
evalcond[1]=(((r20*x8229))+(((-1.0)*r22*x8228))+(((-1.0)*r21*x8231)));
evalcond[2]=((((-1.0)*r02*x8228))+((r00*x8229))+(((-1.0)*r01*x8231)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8228))+(((-1.0)*r11*x8231))+((x8226*x8227)));
evalcond[4]=(((cj2*sj1))+((r02*x8226))+(((-1.0)*r01*sj5*x8228))+((cj1*sj2))+((r00*x8230)));
evalcond[5]=(((r20*x8230))+(((-1.0)*cj1*cj2))+((r22*x8226))+((sj1*sj2))+(((-1.0)*r21*sj5*x8228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8232=((1.0)*sj5);
CheckValue<IkReal> x8233 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x8232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8233.valid){
continue;
}
CheckValue<IkReal> x8234=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x8232)))),-1);
if(!x8234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8233.value)+(((1.5707963267949)*(x8234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8235=IKcos(j4);
IkReal x8236=IKsin(j4);
IkReal x8237=(cj5*r10);
IkReal x8238=((1.0)*x8235);
IkReal x8239=(cj5*x8236);
IkReal x8240=(cj5*x8235);
IkReal x8241=((1.0)*sj5*x8236);
evalcond[0]=(((r12*x8236))+(((-1.0)*r11*sj5*x8238))+((x8235*x8237)));
evalcond[1]=(((r20*x8239))+(((-1.0)*r21*x8241))+(((-1.0)*r22*x8238)));
evalcond[2]=((((-1.0)*r02*x8238))+((r00*x8239))+(((-1.0)*r01*x8241)));
evalcond[3]=((-1.0)+((x8236*x8237))+(((-1.0)*r12*x8238))+(((-1.0)*r11*x8241)));
evalcond[4]=(((cj2*sj1))+((r02*x8236))+((cj1*sj2))+(((-1.0)*r01*sj5*x8238))+((r00*x8240)));
evalcond[5]=(((r20*x8240))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8236))+(((-1.0)*r21*sj5*x8238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8242=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8242.valid){
continue;
}
CheckValue<IkReal> x8243 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8242.value)))+(x8243.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8244=IKcos(j4);
IkReal x8245=IKsin(j4);
IkReal x8246=(cj5*r10);
IkReal x8247=((1.0)*x8244);
IkReal x8248=(cj5*x8245);
IkReal x8249=(cj5*x8244);
IkReal x8250=((1.0)*sj5*x8245);
evalcond[0]=((((-1.0)*r11*sj5*x8247))+((x8244*x8246))+((r12*x8245)));
evalcond[1]=(((r20*x8248))+(((-1.0)*r22*x8247))+(((-1.0)*r21*x8250)));
evalcond[2]=((((-1.0)*r01*x8250))+(((-1.0)*r02*x8247))+((r00*x8248)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x8250))+((x8245*x8246))+(((-1.0)*r12*x8247)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*sj5*x8247))+((r02*x8245))+((cj1*sj2))+((r00*x8249)));
evalcond[5]=(((r20*x8249))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8245))+(((-1.0)*r21*sj5*x8247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8251=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8251;
j4eval[1]=IKsign(x8251);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8252=((1.0)*sj5);
IkReal x8253=((((-1.0)*r20*x8252))+(((-1.0)*cj5*r21)));
j4eval[0]=x8253;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x8252))+((cj5*r00))))));
j4eval[2]=IKsign(x8253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8254=(sj1*sj2);
IkReal x8255=(cj1*cj2);
IkReal x8256=(r11*sj5);
IkReal x8257=(cj5*r10);
IkReal x8258=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8258;
j4eval[1]=IKsign(x8258);
j4eval[2]=((IKabs(((((-1.0)*x8254*x8256))+((x8255*x8256))+((x8254*x8257))+(((-1.0)*x8255*x8257)))))+(IKabs((((r12*x8255))+(((-1.0)*r12*x8254))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8259=(sj1*sj2);
IkReal x8260=(cj1*cj2);
IkReal x8261=(cj5*r10);
IkReal x8262=(r11*sj5);
CheckValue<IkReal> x8263=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8263.valid){
continue;
}
CheckValue<IkReal> x8264 = IKatan2WithCheck(IkReal(((((-1.0)*x8260*x8261))+(((-1.0)*x8259*x8262))+((x8259*x8261))+((x8260*x8262)))),IkReal(((((-1.0)*r12*x8259))+((r12*x8260)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8263.value)))+(x8264.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8265=IKcos(j4);
IkReal x8266=IKsin(j4);
IkReal x8267=(cj5*r10);
IkReal x8268=((1.0)*cj1);
IkReal x8269=((1.0)*x8265);
IkReal x8270=(cj5*x8266);
IkReal x8271=(cj5*x8265);
IkReal x8272=((1.0)*sj5*x8266);
evalcond[0]=(((x8265*x8267))+((r12*x8266))+(((-1.0)*r11*sj5*x8269)));
evalcond[1]=(((r20*x8270))+(((-1.0)*r21*x8272))+(((-1.0)*r22*x8269)));
evalcond[2]=((((-1.0)*r02*x8269))+((r00*x8270))+(((-1.0)*r01*x8272)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8269))+((x8266*x8267))+(((-1.0)*r11*x8272)));
evalcond[4]=(((r20*x8271))+((sj1*sj2))+(((-1.0)*cj2*x8268))+((r22*x8266))+(((-1.0)*r21*sj5*x8269)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r02*x8266))+(((-1.0)*r01*sj5*x8269))+(((-1.0)*sj2*x8268))+((r00*x8271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8273=((1.0)*sj5);
CheckValue<IkReal> x8274 = IKatan2WithCheck(IkReal(r02),IkReal((((cj5*r00))+(((-1.0)*r01*x8273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8274.valid){
continue;
}
CheckValue<IkReal> x8275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8273))+(((-1.0)*cj5*r21)))),-1);
if(!x8275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8274.value)+(((1.5707963267949)*(x8275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8276=IKcos(j4);
IkReal x8277=IKsin(j4);
IkReal x8278=(cj5*r10);
IkReal x8279=((1.0)*cj1);
IkReal x8280=((1.0)*x8276);
IkReal x8281=(cj5*x8277);
IkReal x8282=(cj5*x8276);
IkReal x8283=((1.0)*sj5*x8277);
evalcond[0]=(((x8276*x8278))+(((-1.0)*r11*sj5*x8280))+((r12*x8277)));
evalcond[1]=((((-1.0)*r21*x8283))+((r20*x8281))+(((-1.0)*r22*x8280)));
evalcond[2]=((((-1.0)*r02*x8280))+((r00*x8281))+(((-1.0)*r01*x8283)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8280))+(((-1.0)*r11*x8283))+((x8277*x8278)));
evalcond[4]=((((-1.0)*r21*sj5*x8280))+((r20*x8282))+((sj1*sj2))+((r22*x8277))+(((-1.0)*cj2*x8279)));
evalcond[5]=((((-1.0)*sj2*x8279))+((r00*x8282))+((r02*x8277))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x8280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8284=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8284.valid){
continue;
}
CheckValue<IkReal> x8285 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8284.value)))+(x8285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8286=IKcos(j4);
IkReal x8287=IKsin(j4);
IkReal x8288=(cj5*r10);
IkReal x8289=((1.0)*cj1);
IkReal x8290=((1.0)*x8286);
IkReal x8291=(cj5*x8287);
IkReal x8292=(cj5*x8286);
IkReal x8293=((1.0)*sj5*x8287);
evalcond[0]=(((x8286*x8288))+(((-1.0)*r11*sj5*x8290))+((r12*x8287)));
evalcond[1]=((((-1.0)*r21*x8293))+((r20*x8291))+(((-1.0)*r22*x8290)));
evalcond[2]=(((r00*x8291))+(((-1.0)*r01*x8293))+(((-1.0)*r02*x8290)));
evalcond[3]=((1.0)+(((-1.0)*r11*x8293))+(((-1.0)*r12*x8290))+((x8287*x8288)));
evalcond[4]=((((-1.0)*r21*sj5*x8290))+(((-1.0)*cj2*x8289))+((r20*x8292))+((sj1*sj2))+((r22*x8287)));
evalcond[5]=((((-1.0)*sj2*x8289))+((r00*x8292))+(((-1.0)*cj2*sj1))+((r02*x8287))+(((-1.0)*r01*sj5*x8290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8294=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8294);
rxp0_2=(py*r00);
rxp1_0=(r21*x8294);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8295=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8295);
rxp0_2=(py*r00);
rxp1_0=(r21*x8295);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8296=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8296);
rxp0_2=(py*r00);
rxp1_0=(r21*x8296);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8299=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x8299.valid){
continue;
}
IkReal x8297=x8299.value;
IkReal x8298=((1.0)*cj0*x8297);
cj4array[0]=((((-1.0)*cj1*sj2*x8298))+(((-1.0)*cj2*sj1*x8298)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8300=IKsin(j4);
IkReal x8301=IKcos(j4);
IkReal x8302=(cj5*r20);
IkReal x8303=((1.0)*sj5);
evalcond[0]=(r12*x8300);
evalcond[1]=((((-1.0)*r12*x8301))+(((-1.0)*cj0)));
evalcond[2]=(((x8300*x8302))+(((-1.0)*r21*x8300*x8303)));
evalcond[3]=(((cj5*r00*x8300))+(((-1.0)*r01*x8300*x8303)));
evalcond[4]=(((x8301*x8302))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x8301*x8303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8305=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8305.valid){
continue;
}
IkReal x8304=x8305.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8304))+((cj1*cj2*x8304)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8306=IKsin(j4);
IkReal x8307=IKcos(j4);
IkReal x8308=(cj5*r00);
IkReal x8309=((1.0)*r01*sj5);
evalcond[0]=(r12*x8306);
evalcond[1]=((((-1.0)*r12*x8307))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*sj5*x8306))+((cj5*r20*x8306)));
evalcond[3]=(((x8306*x8308))+(((-1.0)*x8306*x8309)));
evalcond[4]=(((x8307*x8308))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*x8307*x8309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8310=IKPowWithIntegerCheck(r12,-1);
if(!x8310.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8310.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8311=IKsin(j4);
IkReal x8312=IKcos(j4);
IkReal x8313=(cj5*x8312);
IkReal x8314=((1.0)*r21*sj5);
IkReal x8315=((1.0)*r01*sj5);
IkReal x8316=(cj5*x8311);
evalcond[0]=(r12*x8311);
evalcond[1]=(((r20*x8316))+(((-1.0)*x8311*x8314)));
evalcond[2]=(((r00*x8316))+(((-1.0)*x8311*x8315)));
evalcond[3]=((((-1.0)*x8312*x8314))+((r20*x8313))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x8312*x8315))+((r00*x8313))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8317=((1.0)*sj5);
CheckValue<IkReal> x8318=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8318.valid){
continue;
}
CheckValue<IkReal> x8319 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x8317))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x8317)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8318.value)))+(x8319.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8320=IKsin(j4);
IkReal x8321=IKcos(j4);
IkReal x8322=(cj2*sj1);
IkReal x8323=(cj5*r10);
IkReal x8324=(cj1*sj2);
IkReal x8325=((1.0)*x8321);
IkReal x8326=(cj5*x8320);
IkReal x8327=(cj5*x8321);
IkReal x8328=((1.0)*sj5*x8320);
evalcond[0]=((((-1.0)*r22*x8325))+(((-1.0)*r21*x8328))+((r20*x8326)));
evalcond[1]=((((-1.0)*r01*x8328))+sj0+((r00*x8326))+(((-1.0)*r02*x8325)));
evalcond[2]=((((-1.0)*r11*x8328))+(((-1.0)*r12*x8325))+((x8320*x8323))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x8320))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8327))+(((-1.0)*r21*sj5*x8325)));
evalcond[4]=(((r02*x8320))+((cj0*x8324))+((cj0*x8322))+((r00*x8327))+(((-1.0)*r01*sj5*x8325)));
evalcond[5]=(((x8321*x8323))+((r12*x8320))+((sj0*x8324))+((sj0*x8322))+(((-1.0)*r11*sj5*x8325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8329=((1.0)*sj5);
CheckValue<IkReal> x8330=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8329))+(((-1.0)*cj5*r01)))),-1);
if(!x8330.valid){
continue;
}
CheckValue<IkReal> x8331 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x8329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8330.value)))+(x8331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8332=IKsin(j4);
IkReal x8333=IKcos(j4);
IkReal x8334=(cj2*sj1);
IkReal x8335=(cj5*r10);
IkReal x8336=(cj1*sj2);
IkReal x8337=((1.0)*x8333);
IkReal x8338=(cj5*x8332);
IkReal x8339=(cj5*x8333);
IkReal x8340=((1.0)*sj5*x8332);
evalcond[0]=((((-1.0)*r21*x8340))+(((-1.0)*r22*x8337))+((r20*x8338)));
evalcond[1]=(sj0+((r00*x8338))+(((-1.0)*r02*x8337))+(((-1.0)*r01*x8340)));
evalcond[2]=((((-1.0)*r11*x8340))+(((-1.0)*r12*x8337))+((x8332*x8335))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x8332))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x8337))+((r20*x8339)));
evalcond[4]=(((r00*x8339))+(((-1.0)*r01*sj5*x8337))+((cj0*x8336))+((cj0*x8334))+((r02*x8332)));
evalcond[5]=(((x8333*x8335))+((r12*x8332))+(((-1.0)*r11*sj5*x8337))+((sj0*x8336))+((sj0*x8334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8341=((1.0)*sj5);
CheckValue<IkReal> x8342 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x8341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8342.valid){
continue;
}
CheckValue<IkReal> x8343=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x8341)))),-1);
if(!x8343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8342.value)+(((1.5707963267949)*(x8343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8344=IKsin(j4);
IkReal x8345=IKcos(j4);
IkReal x8346=(cj2*sj1);
IkReal x8347=(cj5*r10);
IkReal x8348=(cj1*sj2);
IkReal x8349=((1.0)*x8345);
IkReal x8350=(cj5*x8344);
IkReal x8351=(cj5*x8345);
IkReal x8352=((1.0)*sj5*x8344);
evalcond[0]=((((-1.0)*r22*x8349))+(((-1.0)*r21*x8352))+((r20*x8350)));
evalcond[1]=(sj0+(((-1.0)*r01*x8352))+(((-1.0)*r02*x8349))+((r00*x8350)));
evalcond[2]=((((-1.0)*r11*x8352))+((x8344*x8347))+(((-1.0)*r12*x8349))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x8349))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8351))+((r22*x8344)));
evalcond[4]=(((cj0*x8348))+((cj0*x8346))+(((-1.0)*r01*sj5*x8349))+((r00*x8351))+((r02*x8344)));
evalcond[5]=(((x8345*x8347))+((sj0*x8346))+((sj0*x8348))+((r12*x8344))+(((-1.0)*r11*sj5*x8349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8353=cj1*cj1;
IkReal x8354=cj2*cj2;
IkReal x8355=(sj1*sj2);
IkReal x8356=((37937.5)*cj1);
IkReal x8357=((35375.0)*px);
IkReal x8358=(cj1*cj2);
IkReal x8359=(r10*sj5);
IkReal x8360=((4818.0625)*cj1);
IkReal x8361=(r00*sj5);
IkReal x8362=((1492.25)*cj5);
IkReal x8363=((35375.0)*py);
IkReal x8364=(cj5*r01);
IkReal x8365=(cj5*r11);
IkReal x8366=((4492.625)*cj5*x8358);
CheckValue<IkReal> x8367 = IKatan2WithCheck(IkReal(((((-4492.625)*x8358*x8365))+(((-4492.625)*x8358*x8359))+(((4492.625)*x8355*x8365))+((py*x8356))+((r01*x8362))+((x8358*x8363))+(((-1.0)*x8359*x8360))+(((-11750.0)*px))+(((-1.0)*x8355*x8363))+(((4492.625)*x8355*x8359))+(((-1.0)*x8360*x8365))+(((1492.25)*x8361)))),IkReal(((((-4492.625)*x8358*x8361))+(((-4492.625)*x8358*x8364))+(((4492.625)*x8355*x8361))+(((4492.625)*x8355*x8364))+(((-1.0)*r11*x8362))+(((-1492.25)*x8359))+((x8357*x8358))+((px*x8356))+(((-1.0)*x8355*x8357))+(((11750.0)*py))+(((-1.0)*x8360*x8361))+(((-1.0)*x8360*x8364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8367.valid){
continue;
}
CheckValue<IkReal> x8368=IKPowWithIntegerCheck(IKsign(((-22231.25)+(((20022.25)*x8354))+(((-42945.25)*cj2*x8353))+(((42945.25)*cj1*x8355))+(((-3005.8125)*x8353))+(((40044.5)*x8355*x8358))+(((-40044.5)*x8353*x8354)))),-1);
if(!x8368.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8367.value)+(((1.5707963267949)*(x8368.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8369=IKcos(j0);
IkReal x8370=IKsin(j0);
IkReal x8371=((0.127)*sj5);
IkReal x8372=((0.566)*cj2);
IkReal x8373=((0.127)*cj5);
IkReal x8374=(cj1*x8369);
IkReal x8375=((0.566)*sj1*sj2);
IkReal x8376=(cj1*x8370);
evalcond[0]=(((r00*x8371))+((x8369*x8375))+(((-0.607)*x8374))+(((-1.0)*px))+(((-1.0)*x8372*x8374))+(((0.188)*x8370))+((r01*x8373)));
evalcond[1]=(((r10*x8371))+(((-0.607)*x8376))+((x8370*x8375))+(((-1.0)*py))+(((-1.0)*x8372*x8376))+((r11*x8373))+(((-0.188)*x8369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8377=((1.0)*sj5);
IkReal x8378=((((-1.0)*cj5*r11))+(((-1.0)*r10*x8377)));
j4eval[0]=x8378;
j4eval[1]=IKsign(x8378);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x8377))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8379=((1.0)*sj5);
IkReal x8380=((((-1.0)*r00*x8379))+(((-1.0)*cj5*r01)));
j4eval[0]=x8380;
j4eval[1]=IKsign(x8380);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x8379))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8381=((1.0)*sj5);
IkReal x8382=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8382;
j4eval[1]=((IKabs(((((-1.0)*r11*sj0*x8381))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x8381)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x8382);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8384 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8384)==0){
continue;
}
IkReal x8383=pow(x8384,-0.5);
CheckValue<IkReal> x8385 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8385.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8385.value));
IkReal gconst1=((-1.0)*r21*x8383);
IkReal gconst2=(r20*x8383);
CheckValue<IkReal> x8386 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8386.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8386.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8389 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8389.valid){
continue;
}
IkReal x8387=((-1.0)*(x8389.value));
IkReal x8388=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8387;
IkReal gconst0=x8387;
IkReal gconst1=((-1.0)*r21*x8388);
IkReal gconst2=(r20*x8388);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8392 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8392.valid){
continue;
}
IkReal x8390=((-1.0)*(x8392.value));
IkReal x8391=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8390;
IkReal gconst0=x8390;
IkReal gconst1=((-1.0)*r21*x8391);
IkReal gconst2=(r20*x8391);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8395 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8395.valid){
continue;
}
IkReal x8393=((-1.0)*(x8395.value));
IkReal x8394=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8393;
IkReal gconst0=x8393;
IkReal gconst1=((-1.0)*r21*x8394);
IkReal gconst2=(r20*x8394);
IkReal x8396=r22*r22;
CheckValue<IkReal> x8400=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8396))),-1);
if(!x8400.valid){
continue;
}
IkReal x8397=x8400.value;
IkReal x8398=(cj3*x8397);
IkReal x8399=(((x8398*(r21*r21*r21*r21)))+((x8398*(r20*r20*r20*r20)))+(((2.0)*x8398*(r20*r20)*(r21*r21)))+((cj3*x8396)));
j4eval[0]=x8399;
j4eval[1]=IKsign(x8399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8403 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8403.valid){
continue;
}
IkReal x8401=((-1.0)*(x8403.value));
IkReal x8402=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8401;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8401;
IkReal gconst1=((-1.0)*r21*x8402);
IkReal gconst2=(r20*x8402);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8406 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8406.valid){
continue;
}
IkReal x8404=((-1.0)*(x8406.value));
IkReal x8405=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8404;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8404;
IkReal gconst1=((-1.0)*r21*x8405);
IkReal gconst2=(r20*x8405);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8409 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8409.valid){
continue;
}
IkReal x8407=((-1.0)*(x8409.value));
IkReal x8408=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8407;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8407;
IkReal gconst1=((-1.0)*r21*x8408);
IkReal gconst2=(r20*x8408);
IkReal x8410=r22*r22;
CheckValue<IkReal> x8413=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8410))),-1);
if(!x8413.valid){
continue;
}
IkReal x8411=x8413.value;
IkReal x8412=((((2.0)*x8411*(r20*r20)*(r21*r21)))+x8410+((x8411*(r20*r20*r20*r20)))+((x8411*(r21*r21*r21*r21))));
j4eval[0]=x8412;
j4eval[1]=IKsign(x8412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8416 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8416.valid){
continue;
}
IkReal x8414=((-1.0)*(x8416.value));
IkReal x8415=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8414;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8414;
IkReal gconst1=((-1.0)*r21*x8415);
IkReal gconst2=(r20*x8415);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8419 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8419.valid){
continue;
}
IkReal x8417=((-1.0)*(x8419.value));
IkReal x8418=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8417;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8417;
IkReal gconst1=((-1.0)*r21*x8418);
IkReal gconst2=(r20*x8418);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8422 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8422.valid){
continue;
}
IkReal x8420=((-1.0)*(x8422.value));
IkReal x8421=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8420;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8420;
IkReal gconst1=((-1.0)*r21*x8421);
IkReal gconst2=(r20*x8421);
IkReal x8423=r22*r22;
IkReal x8424=(cj1*r12*sj2);
IkReal x8425=(cj2*r12*sj1);
CheckValue<IkReal> x8429=IKPowWithIntegerCheck(((-1.0)+x8423),-1);
if(!x8429.valid){
continue;
}
IkReal x8426=x8429.value;
if((((1.0)+(((-1.0)*x8423)))) < -0.00001)
continue;
IkReal x8427=IKsqrt(((1.0)+(((-1.0)*x8423))));
IkReal x8428=(r22*x8426*x8427);
j4eval[0]=((IKabs((x8424+x8425)))+(IKabs((((x8425*x8428))+((x8424*x8428))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8430=(cj2*sj1);
IkReal x8431=(gconst2*r10);
IkReal x8432=(cj1*sj2);
IkReal x8433=((1.0)*gconst1*r11);
CheckValue<IkReal> x8434=IKPowWithIntegerCheck(IKsign(((((gconst1*gconst1)*(r11*r11)))+(r12*r12)+(((-2.0)*gconst1*r11*x8431))+(x8431*x8431))),-1);
if(!x8434.valid){
continue;
}
CheckValue<IkReal> x8435 = IKatan2WithCheck(IkReal((((r12*x8430))+((r12*x8432)))),IkReal(((((-1.0)*x8432*x8433))+(((-1.0)*x8430*x8433))+((x8431*x8432))+((x8430*x8431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8434.value)))+(x8435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8436=IKsin(j4);
IkReal x8437=IKcos(j4);
IkReal x8438=(gconst1*r01);
IkReal x8439=(gconst1*r21);
IkReal x8440=(gconst1*r11);
IkReal x8441=((1.0)*x8437);
IkReal x8442=((1.0)*x8436);
IkReal x8443=(gconst2*x8436);
evalcond[0]=(((r20*x8443))+(((-1.0)*r22*x8441))+(((-1.0)*x8439*x8442)));
evalcond[1]=((((-1.0)*r12*x8441))+(((-1.0)*x8440*x8442))+((r10*x8443)));
evalcond[2]=((((-1.0)*gconst2*r00*x8441))+((x8437*x8438))+(((-1.0)*r02*x8442)));
evalcond[3]=((1.0)+(((-1.0)*x8438*x8442))+((r00*x8443))+(((-1.0)*r02*x8441)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x8442))+(((-1.0)*gconst2*r10*x8441))+((x8437*x8440)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8437*x8439))+(((-1.0)*gconst2*r20*x8441))+(((-1.0)*r22*x8442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8444=(gconst1*r01);
IkReal x8445=(gconst2*r00);
CheckValue<IkReal> x8446 = IKatan2WithCheck(IkReal((x8444+(((-1.0)*x8445)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8446.valid){
continue;
}
CheckValue<IkReal> x8447=IKPowWithIntegerCheck(IKsign(((r02*r02)+(x8445*x8445)+(((-2.0)*x8444*x8445))+(x8444*x8444))),-1);
if(!x8447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8446.value)+(((1.5707963267949)*(x8447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8448=IKsin(j4);
IkReal x8449=IKcos(j4);
IkReal x8450=(gconst1*r01);
IkReal x8451=(gconst1*r21);
IkReal x8452=(gconst1*r11);
IkReal x8453=((1.0)*x8449);
IkReal x8454=((1.0)*x8448);
IkReal x8455=(gconst2*x8448);
evalcond[0]=((((-1.0)*x8451*x8454))+((r20*x8455))+(((-1.0)*r22*x8453)));
evalcond[1]=((((-1.0)*x8452*x8454))+(((-1.0)*r12*x8453))+((r10*x8455)));
evalcond[2]=(((x8449*x8450))+(((-1.0)*gconst2*r00*x8453))+(((-1.0)*r02*x8454)));
evalcond[3]=((1.0)+(((-1.0)*x8450*x8454))+(((-1.0)*r02*x8453))+((r00*x8455)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r10*x8453))+((x8449*x8452))+(((-1.0)*r12*x8454)));
evalcond[5]=(((x8449*x8451))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8453))+(((-1.0)*r22*x8454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8456=((1.0)*gconst1);
CheckValue<IkReal> x8457 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x8456)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8457.valid){
continue;
}
CheckValue<IkReal> x8458=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8456))+(((-1.0)*gconst2*r11)))),-1);
if(!x8458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8457.value)+(((1.5707963267949)*(x8458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8459=IKsin(j4);
IkReal x8460=IKcos(j4);
IkReal x8461=(gconst1*r01);
IkReal x8462=(gconst1*r21);
IkReal x8463=(gconst1*r11);
IkReal x8464=((1.0)*x8460);
IkReal x8465=((1.0)*x8459);
IkReal x8466=(gconst2*x8459);
evalcond[0]=((((-1.0)*r22*x8464))+((r20*x8466))+(((-1.0)*x8462*x8465)));
evalcond[1]=((((-1.0)*x8463*x8465))+((r10*x8466))+(((-1.0)*r12*x8464)));
evalcond[2]=((((-1.0)*r02*x8465))+(((-1.0)*gconst2*r00*x8464))+((x8460*x8461)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8464))+((r00*x8466))+(((-1.0)*x8461*x8465)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8460*x8463))+(((-1.0)*gconst2*r10*x8464))+(((-1.0)*r12*x8465)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8464))+((x8460*x8462))+(((-1.0)*r22*x8465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8469 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8469.valid){
continue;
}
IkReal x8467=((-1.0)*(x8469.value));
IkReal x8468=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8467;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8467;
IkReal gconst1=((-1.0)*r21*x8468);
IkReal gconst2=(r20*x8468);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8472 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8472.valid){
continue;
}
IkReal x8470=((-1.0)*(x8472.value));
IkReal x8471=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8470;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8470;
IkReal gconst1=((-1.0)*r21*x8471);
IkReal gconst2=(r20*x8471);
IkReal x8473=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8477=IKPowWithIntegerCheck(x8473,-1);
if(!x8477.valid){
continue;
}
IkReal x8474=x8477.value;
IkReal x8475=((1.0)*x8474);
IkReal x8476=((((-1.0)*(r02*r02)))+(((-1.0)*x8475*(r01*r01)*(r21*r21)))+(((-1.0)*x8475*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x8474)));
j4eval[0]=x8476;
j4eval[1]=IKsign(x8476);
j4eval[2]=r02;
j4eval[3]=x8473;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8480 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8480.valid){
continue;
}
IkReal x8478=((-1.0)*(x8480.value));
IkReal x8479=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8478;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8478;
IkReal gconst1=((-1.0)*r21*x8479);
IkReal gconst2=(r20*x8479);
IkReal x8481=r22*r22;
IkReal x8482=(r02*sj1*sj2);
IkReal x8483=(cj1*cj2*r02);
CheckValue<IkReal> x8487=IKPowWithIntegerCheck(((-1.0)+x8481),-1);
if(!x8487.valid){
continue;
}
IkReal x8484=x8487.value;
if((((1.0)+(((-1.0)*x8481)))) < -0.00001)
continue;
IkReal x8485=IKsqrt(((1.0)+(((-1.0)*x8481))));
IkReal x8486=(r22*x8484*x8485);
j4eval[0]=((IKabs(((((-1.0)*x8482*x8486))+((x8483*x8486)))))+(IKabs((x8482+(((-1.0)*x8483))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8488=(sj1*sj2);
IkReal x8489=(gconst2*r00);
IkReal x8490=(gconst1*r01);
IkReal x8491=(cj1*cj2);
CheckValue<IkReal> x8492=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*gconst2*r11)))),-1);
if(!x8492.valid){
continue;
}
CheckValue<IkReal> x8493 = IKatan2WithCheck(IkReal(((((-1.0)*x8490*x8491))+(((-1.0)*x8488*x8489))+((x8489*x8491))+((x8488*x8490)))),IkReal(((((-1.0)*r02*x8491))+((r02*x8488)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8492.value)))+(x8493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8494=IKsin(j4);
IkReal x8495=IKcos(j4);
IkReal x8496=(gconst1*r01);
IkReal x8497=(gconst1*r21);
IkReal x8498=((1.0)*cj2);
IkReal x8499=(gconst1*r11);
IkReal x8500=((1.0)*x8495);
IkReal x8501=((1.0)*x8494);
IkReal x8502=(gconst2*x8494);
evalcond[0]=((((-1.0)*x8497*x8501))+(((-1.0)*r22*x8500))+((r20*x8502)));
evalcond[1]=(((r10*x8502))+(((-1.0)*x8499*x8501))+(((-1.0)*r12*x8500)));
evalcond[2]=((((-1.0)*gconst2*r00*x8500))+((x8495*x8496))+(((-1.0)*r02*x8501)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8500))+(((-1.0)*x8496*x8501))+((r00*x8502)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x8498))+(((-1.0)*r22*x8501))+(((-1.0)*gconst2*r20*x8500))+((x8495*x8497)));
evalcond[5]=((((-1.0)*sj1*x8498))+(((-1.0)*cj1*sj2))+((x8495*x8499))+(((-1.0)*gconst2*r10*x8500))+(((-1.0)*r12*x8501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8503=(gconst1*r01);
IkReal x8504=(gconst2*r00);
CheckValue<IkReal> x8505=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8504*x8504)))+(((-1.0)*(x8503*x8503)))+(((-1.0)*(r02*r02)))+(((2.0)*x8503*x8504)))),-1);
if(!x8505.valid){
continue;
}
CheckValue<IkReal> x8506 = IKatan2WithCheck(IkReal((x8503+(((-1.0)*x8504)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8505.value)))+(x8506.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8507=IKsin(j4);
IkReal x8508=IKcos(j4);
IkReal x8509=(gconst1*r01);
IkReal x8510=(gconst1*r21);
IkReal x8511=((1.0)*cj2);
IkReal x8512=(gconst1*r11);
IkReal x8513=((1.0)*x8508);
IkReal x8514=((1.0)*x8507);
IkReal x8515=(gconst2*x8507);
evalcond[0]=((((-1.0)*r22*x8513))+(((-1.0)*x8510*x8514))+((r20*x8515)));
evalcond[1]=((((-1.0)*x8512*x8514))+(((-1.0)*r12*x8513))+((r10*x8515)));
evalcond[2]=((((-1.0)*gconst2*r00*x8513))+(((-1.0)*r02*x8514))+((x8508*x8509)));
evalcond[3]=((-1.0)+(((-1.0)*x8509*x8514))+(((-1.0)*r02*x8513))+((r00*x8515)));
evalcond[4]=((((-1.0)*cj1*x8511))+((sj1*sj2))+(((-1.0)*r22*x8514))+(((-1.0)*gconst2*r20*x8513))+((x8508*x8510)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8511))+(((-1.0)*r12*x8514))+(((-1.0)*gconst2*r10*x8513))+((x8508*x8512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8516 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8516.valid){
continue;
}
CheckValue<IkReal> x8517=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8516.value)+(((1.5707963267949)*(x8517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8518=IKsin(j4);
IkReal x8519=IKcos(j4);
IkReal x8520=(gconst1*r01);
IkReal x8521=(gconst1*r21);
IkReal x8522=((1.0)*cj2);
IkReal x8523=(gconst1*r11);
IkReal x8524=((1.0)*x8519);
IkReal x8525=((1.0)*x8518);
IkReal x8526=(gconst2*x8518);
evalcond[0]=(((r20*x8526))+(((-1.0)*r22*x8524))+(((-1.0)*x8521*x8525)));
evalcond[1]=((((-1.0)*x8523*x8525))+(((-1.0)*r12*x8524))+((r10*x8526)));
evalcond[2]=((((-1.0)*gconst2*r00*x8524))+(((-1.0)*r02*x8525))+((x8519*x8520)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8524))+((r00*x8526))+(((-1.0)*x8520*x8525)));
evalcond[4]=((((-1.0)*cj1*x8522))+((sj1*sj2))+(((-1.0)*r22*x8525))+(((-1.0)*gconst2*r20*x8524))+((x8519*x8521)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r10*x8524))+(((-1.0)*sj1*x8522))+((x8519*x8523))+(((-1.0)*r12*x8525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8529 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8529.valid){
continue;
}
IkReal x8527=((-1.0)*(x8529.value));
IkReal x8528=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8527;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8527;
IkReal gconst1=((-1.0)*r21*x8528);
IkReal gconst2=(r20*x8528);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8532 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8532.valid){
continue;
}
IkReal x8530=((-1.0)*(x8532.value));
IkReal x8531=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8530;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8530;
IkReal gconst1=((-1.0)*r21*x8531);
IkReal gconst2=(r20*x8531);
IkReal x8533=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8537=IKPowWithIntegerCheck(x8533,-1);
if(!x8537.valid){
continue;
}
IkReal x8534=x8537.value;
IkReal x8535=((1.0)*x8534);
IkReal x8536=((((-1.0)*x8535*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8535*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x8534)));
j4eval[0]=x8536;
j4eval[1]=r12;
j4eval[2]=x8533;
j4eval[3]=IKsign(x8536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8540 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8540.valid){
continue;
}
IkReal x8538=((-1.0)*(x8540.value));
IkReal x8539=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8538;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8538;
IkReal gconst1=((-1.0)*r21*x8539);
IkReal gconst2=(r20*x8539);
IkReal x8541=r22*r22;
IkReal x8542=(cj1*r02*sj2);
IkReal x8543=(cj2*r02*sj1);
CheckValue<IkReal> x8547=IKPowWithIntegerCheck(((-1.0)+x8541),-1);
if(!x8547.valid){
continue;
}
IkReal x8544=x8547.value;
if((((1.0)+(((-1.0)*x8541)))) < -0.00001)
continue;
IkReal x8545=IKsqrt(((1.0)+(((-1.0)*x8541))));
IkReal x8546=(r22*x8544*x8545);
j4eval[0]=((IKabs((((x8543*x8546))+((x8542*x8546)))))+(IKabs((x8543+x8542))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8548=(gconst1*r01);
IkReal x8549=(cj2*sj1);
IkReal x8550=(gconst2*r00);
IkReal x8551=(cj1*sj2);
CheckValue<IkReal> x8552=IKPowWithIntegerCheck(IKsign(((x8548*x8548)+(x8550*x8550)+(((-2.0)*x8548*x8550))+(r02*r02))),-1);
if(!x8552.valid){
continue;
}
CheckValue<IkReal> x8553 = IKatan2WithCheck(IkReal((((r02*x8551))+((r02*x8549)))),IkReal((((x8550*x8551))+(((-1.0)*x8548*x8551))+(((-1.0)*x8548*x8549))+((x8549*x8550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8552.value)))+(x8553.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8554=IKsin(j4);
IkReal x8555=IKcos(j4);
IkReal x8556=(gconst1*r01);
IkReal x8557=(gconst1*r21);
IkReal x8558=(gconst1*r11);
IkReal x8559=((1.0)*x8555);
IkReal x8560=((1.0)*x8554);
IkReal x8561=(gconst2*x8554);
evalcond[0]=((((-1.0)*r22*x8559))+((r20*x8561))+(((-1.0)*x8557*x8560)));
evalcond[1]=(((r00*x8561))+(((-1.0)*x8556*x8560))+(((-1.0)*r02*x8559)));
evalcond[2]=((((-1.0)*r12*x8560))+((x8555*x8558))+(((-1.0)*gconst2*r10*x8559)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8559))+((r10*x8561))+(((-1.0)*x8558*x8560)));
evalcond[4]=(((cj2*sj1))+((x8555*x8556))+((cj1*sj2))+(((-1.0)*r02*x8560))+(((-1.0)*gconst2*r00*x8559)));
evalcond[5]=((((-1.0)*gconst2*r20*x8559))+((x8555*x8557))+(((-1.0)*r22*x8560))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8562=(gconst1*r11);
IkReal x8563=(gconst2*r10);
CheckValue<IkReal> x8564 = IKatan2WithCheck(IkReal((x8562+(((-1.0)*x8563)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8564.valid){
continue;
}
CheckValue<IkReal> x8565=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8563*x8563)))+(((-1.0)*(x8562*x8562)))+(((-1.0)*(r12*r12)))+(((2.0)*x8562*x8563)))),-1);
if(!x8565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8564.value)+(((1.5707963267949)*(x8565.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8566=IKsin(j4);
IkReal x8567=IKcos(j4);
IkReal x8568=(gconst1*r01);
IkReal x8569=(gconst1*r21);
IkReal x8570=(gconst1*r11);
IkReal x8571=((1.0)*x8567);
IkReal x8572=((1.0)*x8566);
IkReal x8573=(gconst2*x8566);
evalcond[0]=((((-1.0)*x8569*x8572))+((r20*x8573))+(((-1.0)*r22*x8571)));
evalcond[1]=((((-1.0)*r02*x8571))+((r00*x8573))+(((-1.0)*x8568*x8572)));
evalcond[2]=(((x8567*x8570))+(((-1.0)*r12*x8572))+(((-1.0)*gconst2*r10*x8571)));
evalcond[3]=((-1.0)+((r10*x8573))+(((-1.0)*x8570*x8572))+(((-1.0)*r12*x8571)));
evalcond[4]=(((cj2*sj1))+((x8567*x8568))+((cj1*sj2))+(((-1.0)*gconst2*r00*x8571))+(((-1.0)*r02*x8572)));
evalcond[5]=(((x8567*x8569))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8571))+(((-1.0)*r22*x8572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8574=((1.0)*gconst1);
CheckValue<IkReal> x8575=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8574)))),-1);
if(!x8575.valid){
continue;
}
CheckValue<IkReal> x8576 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8574))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8575.value)))+(x8576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8577=IKsin(j4);
IkReal x8578=IKcos(j4);
IkReal x8579=(gconst1*r01);
IkReal x8580=(gconst1*r21);
IkReal x8581=(gconst1*r11);
IkReal x8582=((1.0)*x8578);
IkReal x8583=((1.0)*x8577);
IkReal x8584=(gconst2*x8577);
evalcond[0]=((((-1.0)*r22*x8582))+(((-1.0)*x8580*x8583))+((r20*x8584)));
evalcond[1]=((((-1.0)*r02*x8582))+((r00*x8584))+(((-1.0)*x8579*x8583)));
evalcond[2]=(((x8578*x8581))+(((-1.0)*r12*x8583))+(((-1.0)*gconst2*r10*x8582)));
evalcond[3]=((-1.0)+(((-1.0)*x8581*x8583))+((r10*x8584))+(((-1.0)*r12*x8582)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r00*x8582))+((cj1*sj2))+((x8578*x8579))+(((-1.0)*r02*x8583)));
evalcond[5]=((((-1.0)*r22*x8583))+((x8578*x8580))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8587 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8587.valid){
continue;
}
IkReal x8585=((-1.0)*(x8587.value));
IkReal x8586=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8585;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8585;
IkReal gconst1=((-1.0)*r21*x8586);
IkReal gconst2=(r20*x8586);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8590 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8590.valid){
continue;
}
IkReal x8588=((-1.0)*(x8590.value));
IkReal x8589=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8588;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8588;
IkReal gconst1=((-1.0)*r21*x8589);
IkReal gconst2=(r20*x8589);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8593 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8593.valid){
continue;
}
IkReal x8591=((-1.0)*(x8593.value));
IkReal x8592=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8591;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8591;
IkReal gconst1=((-1.0)*r21*x8592);
IkReal gconst2=(r20*x8592);
IkReal x8594=r22*r22;
IkReal x8595=(r12*sj1*sj2);
IkReal x8596=(cj1*cj2*r12);
CheckValue<IkReal> x8600=IKPowWithIntegerCheck(((-1.0)+x8594),-1);
if(!x8600.valid){
continue;
}
IkReal x8597=x8600.value;
if((((1.0)+(((-1.0)*x8594)))) < -0.00001)
continue;
IkReal x8598=IKsqrt(((1.0)+(((-1.0)*x8594))));
IkReal x8599=(r22*x8597*x8598);
j4eval[0]=((IKabs((x8595+(((-1.0)*x8596)))))+(IKabs((((x8596*x8599))+(((-1.0)*x8595*x8599))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8601=(sj1*sj2);
IkReal x8602=(gconst1*r11);
IkReal x8603=(gconst2*r10);
IkReal x8604=((1.0)*cj1*cj2);
CheckValue<IkReal> x8605 = IKatan2WithCheck(IkReal(((((-1.0)*x8602*x8604))+(((-1.0)*x8601*x8603))+((cj1*cj2*x8603))+((x8601*x8602)))),IkReal((((r12*x8601))+(((-1.0)*r12*x8604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8605.valid){
continue;
}
CheckValue<IkReal> x8606=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8605.value)+(((1.5707963267949)*(x8606.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8607=IKsin(j4);
IkReal x8608=IKcos(j4);
IkReal x8609=(gconst1*r01);
IkReal x8610=(gconst1*r21);
IkReal x8611=((1.0)*cj2);
IkReal x8612=(gconst1*r11);
IkReal x8613=((1.0)*x8608);
IkReal x8614=((1.0)*x8607);
IkReal x8615=(gconst2*x8607);
evalcond[0]=(((r20*x8615))+(((-1.0)*r22*x8613))+(((-1.0)*x8610*x8614)));
evalcond[1]=((((-1.0)*r02*x8613))+((r00*x8615))+(((-1.0)*x8609*x8614)));
evalcond[2]=((((-1.0)*gconst2*r10*x8613))+((x8608*x8612))+(((-1.0)*r12*x8614)));
evalcond[3]=((1.0)+(((-1.0)*x8612*x8614))+((r10*x8615))+(((-1.0)*r12*x8613)));
evalcond[4]=((((-1.0)*r22*x8614))+((sj1*sj2))+((x8608*x8610))+(((-1.0)*cj1*x8611))+(((-1.0)*gconst2*r20*x8613)));
evalcond[5]=((((-1.0)*r02*x8614))+(((-1.0)*sj1*x8611))+((x8608*x8609))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r00*x8613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8616=(gconst2*r10);
IkReal x8617=(gconst1*r11);
CheckValue<IkReal> x8618 = IKatan2WithCheck(IkReal((x8617+(((-1.0)*x8616)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8618.valid){
continue;
}
CheckValue<IkReal> x8619=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x8616*x8617))+(x8616*x8616)+(x8617*x8617))),-1);
if(!x8619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8618.value)+(((1.5707963267949)*(x8619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8620=IKsin(j4);
IkReal x8621=IKcos(j4);
IkReal x8622=(gconst1*r01);
IkReal x8623=(gconst1*r21);
IkReal x8624=((1.0)*cj2);
IkReal x8625=(gconst1*r11);
IkReal x8626=((1.0)*x8621);
IkReal x8627=((1.0)*x8620);
IkReal x8628=(gconst2*x8620);
evalcond[0]=((((-1.0)*x8623*x8627))+((r20*x8628))+(((-1.0)*r22*x8626)));
evalcond[1]=((((-1.0)*x8622*x8627))+((r00*x8628))+(((-1.0)*r02*x8626)));
evalcond[2]=((((-1.0)*r12*x8627))+(((-1.0)*gconst2*r10*x8626))+((x8621*x8625)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8626))+(((-1.0)*x8625*x8627))+((r10*x8628)));
evalcond[4]=((((-1.0)*cj1*x8624))+((sj1*sj2))+(((-1.0)*r22*x8627))+((x8621*x8623))+(((-1.0)*gconst2*r20*x8626)));
evalcond[5]=((((-1.0)*sj1*x8624))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r00*x8626))+((x8621*x8622))+(((-1.0)*r02*x8627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8629 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8629.valid){
continue;
}
CheckValue<IkReal> x8630=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8629.value)+(((1.5707963267949)*(x8630.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8631=IKsin(j4);
IkReal x8632=IKcos(j4);
IkReal x8633=(gconst1*r01);
IkReal x8634=(gconst1*r21);
IkReal x8635=((1.0)*cj2);
IkReal x8636=(gconst1*r11);
IkReal x8637=((1.0)*x8632);
IkReal x8638=((1.0)*x8631);
IkReal x8639=(gconst2*x8631);
evalcond[0]=((((-1.0)*x8634*x8638))+(((-1.0)*r22*x8637))+((r20*x8639)));
evalcond[1]=(((r00*x8639))+(((-1.0)*r02*x8637))+(((-1.0)*x8633*x8638)));
evalcond[2]=((((-1.0)*r12*x8638))+(((-1.0)*gconst2*r10*x8637))+((x8632*x8636)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8637))+(((-1.0)*x8636*x8638))+((r10*x8639)));
evalcond[4]=((((-1.0)*cj1*x8635))+((sj1*sj2))+(((-1.0)*r22*x8638))+((x8632*x8634))+(((-1.0)*gconst2*r20*x8637)));
evalcond[5]=((((-1.0)*sj1*x8635))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r00*x8637))+((x8632*x8633))+(((-1.0)*r02*x8638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8640=((-1.0)*py);
CheckValue<IkReal> x8642 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8642.valid){
continue;
}
IkReal x8641=((-1.0)*(x8642.value));
sj5=gconst1;
cj5=gconst2;
j5=x8641;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8640);
rxp0_2=(py*r00);
rxp1_0=(r21*x8640);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8641;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8643=((-1.0)*py);
CheckValue<IkReal> x8645 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8645.valid){
continue;
}
IkReal x8644=((-1.0)*(x8645.value));
sj5=gconst1;
cj5=gconst2;
j5=x8644;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8643);
rxp0_2=(py*r00);
rxp1_0=(r21*x8643);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8644;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8646=((-1.0)*py);
CheckValue<IkReal> x8648 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8648.valid){
continue;
}
IkReal x8647=((-1.0)*(x8648.value));
sj5=gconst1;
cj5=gconst2;
j5=x8647;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8646);
rxp0_2=(py*r00);
rxp1_0=(r21*x8646);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8647;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8651=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x8651.valid){
continue;
}
IkReal x8649=x8651.value;
IkReal x8650=((1.0)*cj0*x8649);
cj4array[0]=((((-1.0)*cj1*sj2*x8650))+(((-1.0)*cj2*sj1*x8650)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8652=IKsin(j4);
IkReal x8653=IKcos(j4);
IkReal x8654=(gconst2*x8652);
IkReal x8655=((1.0)*x8653);
IkReal x8656=((1.0)*gconst1*x8652);
evalcond[0]=((-1.0)*r12*x8652);
evalcond[1]=((((-1.0)*r12*x8655))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x8656))+((r20*x8654)));
evalcond[3]=(((r00*x8654))+(((-1.0)*r01*x8656)));
evalcond[4]=((((-1.0)*gconst2*r20*x8655))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst1*r21*x8653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8658=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8658.valid){
continue;
}
IkReal x8657=x8658.value;
cj4array[0]=(((cj1*cj2*x8657))+(((-1.0)*sj1*sj2*x8657)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8659=IKsin(j4);
IkReal x8660=IKcos(j4);
IkReal x8661=(gconst2*r00);
IkReal x8662=((1.0)*x8660);
IkReal x8663=((1.0)*gconst1*x8659);
evalcond[0]=((-1.0)*r12*x8659);
evalcond[1]=((((-1.0)*r12*x8662))+(((-1.0)*cj0)));
evalcond[2]=(((gconst2*r20*x8659))+(((-1.0)*r21*x8663)));
evalcond[3]=(((x8659*x8661))+(((-1.0)*r01*x8663)));
evalcond[4]=((((-1.0)*x8661*x8662))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((gconst1*r01*x8660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8664=IKPowWithIntegerCheck(r12,-1);
if(!x8664.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8664.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8665=IKsin(j4);
IkReal x8666=IKcos(j4);
IkReal x8667=(gconst2*r00);
IkReal x8668=(gconst2*r20);
IkReal x8669=(gconst1*x8666);
IkReal x8670=((1.0)*x8666);
IkReal x8671=((1.0)*gconst1*x8665);
evalcond[0]=((-1.0)*r12*x8665);
evalcond[1]=((((-1.0)*r21*x8671))+((x8665*x8668)));
evalcond[2]=((((-1.0)*r01*x8671))+((x8665*x8667)));
evalcond[3]=((((-1.0)*x8668*x8670))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x8669)));
evalcond[4]=(((r01*x8669))+(((-1.0)*x8667*x8670))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8672=(sj1*sj2);
IkReal x8673=(gconst2*r20);
IkReal x8674=(cj1*cj2);
IkReal x8675=(gconst1*r21);
CheckValue<IkReal> x8676=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x8673*x8675))+(x8675*x8675)+(x8673*x8673))),-1);
if(!x8676.valid){
continue;
}
CheckValue<IkReal> x8677 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8674))+((r22*x8672)))),IkReal(((((-1.0)*x8672*x8675))+(((-1.0)*x8673*x8674))+((x8672*x8673))+((x8674*x8675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8676.value)))+(x8677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8678=IKsin(j4);
IkReal x8679=IKcos(j4);
IkReal x8680=(cj2*sj1);
IkReal x8681=(cj1*sj2);
IkReal x8682=((1.0)*x8679);
IkReal x8683=(gconst1*x8679);
IkReal x8684=(gconst2*x8678);
IkReal x8685=((1.0)*x8678);
IkReal x8686=(gconst1*x8685);
evalcond[0]=(((r20*x8684))+(((-1.0)*r22*x8682))+(((-1.0)*r21*x8686)));
evalcond[1]=(sj0+(((-1.0)*r01*x8686))+(((-1.0)*r02*x8682))+((r00*x8684)));
evalcond[2]=((((-1.0)*r12*x8682))+((r10*x8684))+(((-1.0)*r11*x8686))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8685))+((r21*x8683))+(((-1.0)*gconst2*r20*x8682)));
evalcond[4]=((((-1.0)*r02*x8685))+((r01*x8683))+(((-1.0)*gconst2*r00*x8682))+((cj0*x8680))+((cj0*x8681)));
evalcond[5]=((((-1.0)*r12*x8685))+((r11*x8683))+(((-1.0)*gconst2*r10*x8682))+((sj0*x8680))+((sj0*x8681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8687=((1.0)*gconst1);
CheckValue<IkReal> x8688 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*r21*x8687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8688.valid){
continue;
}
CheckValue<IkReal> x8689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8687))+(((-1.0)*gconst2*r01)))),-1);
if(!x8689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8688.value)+(((1.5707963267949)*(x8689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8690=IKsin(j4);
IkReal x8691=IKcos(j4);
IkReal x8692=(cj2*sj1);
IkReal x8693=(cj1*sj2);
IkReal x8694=((1.0)*x8691);
IkReal x8695=(gconst1*x8691);
IkReal x8696=(gconst2*x8690);
IkReal x8697=((1.0)*x8690);
IkReal x8698=(gconst1*x8697);
evalcond[0]=(((r20*x8696))+(((-1.0)*r22*x8694))+(((-1.0)*r21*x8698)));
evalcond[1]=(sj0+((r00*x8696))+(((-1.0)*r02*x8694))+(((-1.0)*r01*x8698)));
evalcond[2]=(((r10*x8696))+(((-1.0)*r12*x8694))+(((-1.0)*r11*x8698))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst2*r20*x8694))+((r21*x8695))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8697)));
evalcond[4]=(((cj0*x8692))+((cj0*x8693))+(((-1.0)*gconst2*r00*x8694))+(((-1.0)*r02*x8697))+((r01*x8695)));
evalcond[5]=(((sj0*x8692))+((sj0*x8693))+(((-1.0)*r12*x8697))+(((-1.0)*gconst2*r10*x8694))+((r11*x8695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8699=((1.0)*gconst1);
CheckValue<IkReal> x8700=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8699)))),-1);
if(!x8700.valid){
continue;
}
CheckValue<IkReal> x8701 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst2*r20*sj0))+(((-1.0)*r21*sj0*x8699)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8700.value)))+(x8701.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8702=IKsin(j4);
IkReal x8703=IKcos(j4);
IkReal x8704=(cj2*sj1);
IkReal x8705=(cj1*sj2);
IkReal x8706=((1.0)*x8703);
IkReal x8707=(gconst1*x8703);
IkReal x8708=(gconst2*x8702);
IkReal x8709=((1.0)*x8702);
IkReal x8710=(gconst1*x8709);
evalcond[0]=((((-1.0)*r21*x8710))+(((-1.0)*r22*x8706))+((r20*x8708)));
evalcond[1]=((((-1.0)*r01*x8710))+sj0+(((-1.0)*r02*x8706))+((r00*x8708)));
evalcond[2]=(((r10*x8708))+(((-1.0)*r11*x8710))+(((-1.0)*r12*x8706))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x8707))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8709))+(((-1.0)*gconst2*r20*x8706)));
evalcond[4]=(((cj0*x8704))+((cj0*x8705))+(((-1.0)*gconst2*r00*x8706))+(((-1.0)*r02*x8709))+((r01*x8707)));
evalcond[5]=(((r11*x8707))+(((-1.0)*gconst2*r10*x8706))+(((-1.0)*r12*x8709))+((sj0*x8705))+((sj0*x8704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8713 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8713.valid){
continue;
}
IkReal x8711=((-1.0)*(x8713.value));
IkReal x8712=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8711;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8711;
IkReal gconst1=((-1.0)*r21*x8712);
IkReal gconst2=(r20*x8712);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8716 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8716.valid){
continue;
}
IkReal x8714=((-1.0)*(x8716.value));
IkReal x8715=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8714;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8714;
IkReal gconst1=((-1.0)*r21*x8715);
IkReal gconst2=(r20*x8715);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8719 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8719.valid){
continue;
}
IkReal x8717=((-1.0)*(x8719.value));
IkReal x8718=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8717;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8717;
IkReal gconst1=((-1.0)*r21*x8718);
IkReal gconst2=(r20*x8718);
IkReal x8720=((1.0)*(r22*r22));
CheckValue<IkReal> x8724=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8720))),-1);
if(!x8724.valid){
continue;
}
IkReal x8721=x8724.value;
IkReal x8722=((1.0)*x8721);
IkReal x8723=((((-1.0)*x8722*(r21*r21*r21*r21)))+(((-2.0)*x8721*(r20*r20)*(r21*r21)))+(((-1.0)*x8720))+(((-1.0)*x8722*(r20*r20*r20*r20))));
j4eval[0]=x8723;
j4eval[1]=IKsign(x8723);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8727 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8727.valid){
continue;
}
IkReal x8725=((-1.0)*(x8727.value));
IkReal x8726=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8725;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8725;
IkReal gconst1=((-1.0)*r21*x8726);
IkReal gconst2=(r20*x8726);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8730 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8730.valid){
continue;
}
IkReal x8728=((-1.0)*(x8730.value));
IkReal x8729=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8728;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8728;
IkReal gconst1=((-1.0)*r21*x8729);
IkReal gconst2=(r20*x8729);
IkReal x8731=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8735=IKPowWithIntegerCheck(x8731,-1);
if(!x8735.valid){
continue;
}
IkReal x8732=x8735.value;
IkReal x8733=((1.0)*x8732);
IkReal x8734=((((-1.0)*(r02*r02)))+(((-1.0)*x8733*(r01*r01)*(r21*r21)))+(((-1.0)*x8733*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x8732)));
j4eval[0]=x8734;
j4eval[1]=IKsign(x8734);
j4eval[2]=r02;
j4eval[3]=x8731;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8738 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8738.valid){
continue;
}
IkReal x8736=((-1.0)*(x8738.value));
IkReal x8737=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8736;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8736;
IkReal gconst1=((-1.0)*r21*x8737);
IkReal gconst2=(r20*x8737);
IkReal x8739=r22*r22;
IkReal x8740=(r02*sj1*sj2);
IkReal x8741=(cj1*cj2*r02);
CheckValue<IkReal> x8745=IKPowWithIntegerCheck(((-1.0)+x8739),-1);
if(!x8745.valid){
continue;
}
IkReal x8742=x8745.value;
if((((1.0)+(((-1.0)*x8739)))) < -0.00001)
continue;
IkReal x8743=IKsqrt(((1.0)+(((-1.0)*x8739))));
IkReal x8744=(r22*x8742*x8743);
j4eval[0]=((IKabs(((((-1.0)*x8741*x8744))+((x8740*x8744)))))+(IKabs((x8741+(((-1.0)*x8740))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8746=(gconst1*r01);
IkReal x8747=((1.0)*gconst2);
IkReal x8748=(cj1*cj2);
IkReal x8749=((1.0)*sj1*sj2);
CheckValue<IkReal> x8750 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x8747*x8748))+((x8746*x8748))+((gconst2*r00*sj1*sj2))+(((-1.0)*x8746*x8749)))),IkReal((((r02*x8748))+(((-1.0)*r02*x8749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8750.valid){
continue;
}
CheckValue<IkReal> x8751=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8747))+(((-1.0)*gconst1*r10)))),-1);
if(!x8751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8750.value)+(((1.5707963267949)*(x8751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8752=IKcos(j4);
IkReal x8753=IKsin(j4);
IkReal x8754=(gconst1*r01);
IkReal x8755=(gconst1*r21);
IkReal x8756=(gconst1*r11);
IkReal x8757=((1.0)*x8752);
IkReal x8758=(gconst2*x8752);
IkReal x8759=((1.0)*x8753);
IkReal x8760=(gconst2*x8753);
evalcond[0]=(((r02*x8753))+(((-1.0)*x8754*x8757))+((r00*x8758)));
evalcond[1]=((((-1.0)*x8755*x8759))+(((-1.0)*r22*x8757))+((r20*x8760)));
evalcond[2]=((((-1.0)*x8756*x8759))+((r10*x8760))+(((-1.0)*r12*x8757)));
evalcond[3]=((1.0)+(((-1.0)*x8754*x8759))+((r00*x8760))+(((-1.0)*r02*x8757)));
evalcond[4]=(((cj2*sj1))+((r10*x8758))+((cj1*sj2))+(((-1.0)*x8756*x8757))+((r12*x8753)));
evalcond[5]=(((r22*x8753))+(((-1.0)*x8755*x8757))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8761=(gconst2*r00);
IkReal x8762=(gconst1*r01);
CheckValue<IkReal> x8763=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8761*x8761)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8762*x8762)))+(((2.0)*x8761*x8762)))),-1);
if(!x8763.valid){
continue;
}
CheckValue<IkReal> x8764 = IKatan2WithCheck(IkReal((x8761+(((-1.0)*x8762)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8763.value)))+(x8764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8765=IKcos(j4);
IkReal x8766=IKsin(j4);
IkReal x8767=(gconst1*r01);
IkReal x8768=(gconst1*r21);
IkReal x8769=(gconst1*r11);
IkReal x8770=((1.0)*x8765);
IkReal x8771=(gconst2*x8765);
IkReal x8772=((1.0)*x8766);
IkReal x8773=(gconst2*x8766);
evalcond[0]=(((r00*x8771))+(((-1.0)*x8767*x8770))+((r02*x8766)));
evalcond[1]=((((-1.0)*x8768*x8772))+(((-1.0)*r22*x8770))+((r20*x8773)));
evalcond[2]=((((-1.0)*r12*x8770))+(((-1.0)*x8769*x8772))+((r10*x8773)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8770))+((r00*x8773))+(((-1.0)*x8767*x8772)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8769*x8770))+((r12*x8766))+((r10*x8771)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8768*x8770))+((r20*x8771))+((r22*x8766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8774=((1.0)*gconst1);
CheckValue<IkReal> x8775 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8774))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8775.valid){
continue;
}
CheckValue<IkReal> x8776=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8774))+(((-1.0)*gconst2*r11)))),-1);
if(!x8776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8775.value)+(((1.5707963267949)*(x8776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8777=IKcos(j4);
IkReal x8778=IKsin(j4);
IkReal x8779=(gconst1*r01);
IkReal x8780=(gconst1*r21);
IkReal x8781=(gconst1*r11);
IkReal x8782=((1.0)*x8777);
IkReal x8783=(gconst2*x8777);
IkReal x8784=((1.0)*x8778);
IkReal x8785=(gconst2*x8778);
evalcond[0]=((((-1.0)*x8779*x8782))+((r00*x8783))+((r02*x8778)));
evalcond[1]=((((-1.0)*x8780*x8784))+(((-1.0)*r22*x8782))+((r20*x8785)));
evalcond[2]=(((r10*x8785))+(((-1.0)*x8781*x8784))+(((-1.0)*r12*x8782)));
evalcond[3]=((1.0)+(((-1.0)*x8779*x8784))+(((-1.0)*r02*x8782))+((r00*x8785)));
evalcond[4]=(((cj2*sj1))+((r10*x8783))+((cj1*sj2))+(((-1.0)*x8781*x8782))+((r12*x8778)));
evalcond[5]=((((-1.0)*x8780*x8782))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8783))+((r22*x8778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8788 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8788.valid){
continue;
}
IkReal x8786=((-1.0)*(x8788.value));
IkReal x8787=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8786;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8786;
IkReal gconst1=((-1.0)*r21*x8787);
IkReal gconst2=(r20*x8787);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8791 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8791.valid){
continue;
}
IkReal x8789=((-1.0)*(x8791.value));
IkReal x8790=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8789;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8789;
IkReal gconst1=((-1.0)*r21*x8790);
IkReal gconst2=(r20*x8790);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8794 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8794.valid){
continue;
}
IkReal x8792=((-1.0)*(x8794.value));
IkReal x8793=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8792;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8792;
IkReal gconst1=((-1.0)*r21*x8793);
IkReal gconst2=(r20*x8793);
IkReal x8795=r22*r22;
IkReal x8796=(r02*sj1*sj2);
IkReal x8797=(cj1*cj2*r02);
CheckValue<IkReal> x8801=IKPowWithIntegerCheck(((-1.0)+x8795),-1);
if(!x8801.valid){
continue;
}
IkReal x8798=x8801.value;
if((((1.0)+(((-1.0)*x8795)))) < -0.00001)
continue;
IkReal x8799=IKsqrt(((1.0)+(((-1.0)*x8795))));
IkReal x8800=(r22*x8798*x8799);
j4eval[0]=((IKabs((x8797+(((-1.0)*x8796)))))+(IKabs((((x8796*x8800))+(((-1.0)*x8797*x8800))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8802=(gconst1*r01);
IkReal x8803=((1.0)*gconst2);
IkReal x8804=(cj1*cj2);
IkReal x8805=((1.0)*sj1*sj2);
CheckValue<IkReal> x8806 = IKatan2WithCheck(IkReal((((x8802*x8804))+(((-1.0)*r00*x8803*x8804))+((gconst2*r00*sj1*sj2))+(((-1.0)*x8802*x8805)))),IkReal(((((-1.0)*r02*x8805))+((r02*x8804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8806.valid){
continue;
}
CheckValue<IkReal> x8807=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8803))+(((-1.0)*gconst1*r10)))),-1);
if(!x8807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8806.value)+(((1.5707963267949)*(x8807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8808=IKcos(j4);
IkReal x8809=IKsin(j4);
IkReal x8810=(gconst1*r01);
IkReal x8811=((1.0)*cj2);
IkReal x8812=(gconst1*r21);
IkReal x8813=(gconst1*r11);
IkReal x8814=((1.0)*x8808);
IkReal x8815=(gconst2*x8808);
IkReal x8816=((1.0)*x8809);
IkReal x8817=(gconst2*x8809);
evalcond[0]=(((r02*x8809))+((r00*x8815))+(((-1.0)*x8810*x8814)));
evalcond[1]=((((-1.0)*r22*x8814))+((r20*x8817))+(((-1.0)*x8812*x8816)));
evalcond[2]=((((-1.0)*r12*x8814))+((r10*x8817))+(((-1.0)*x8813*x8816)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8814))+((r00*x8817))+(((-1.0)*x8810*x8816)));
evalcond[4]=(((r22*x8809))+(((-1.0)*cj1*x8811))+((sj1*sj2))+((r20*x8815))+(((-1.0)*x8812*x8814)));
evalcond[5]=(((r10*x8815))+((r12*x8809))+(((-1.0)*cj1*sj2))+(((-1.0)*x8813*x8814))+(((-1.0)*sj1*x8811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8818=(gconst1*r01);
IkReal x8819=(gconst2*r00);
CheckValue<IkReal> x8820 = IKatan2WithCheck(IkReal(((((-1.0)*x8818))+x8819)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8820.valid){
continue;
}
CheckValue<IkReal> x8821=IKPowWithIntegerCheck(IKsign(((x8819*x8819)+(((-2.0)*x8818*x8819))+(r02*r02)+(x8818*x8818))),-1);
if(!x8821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8820.value)+(((1.5707963267949)*(x8821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8822=IKcos(j4);
IkReal x8823=IKsin(j4);
IkReal x8824=(gconst1*r01);
IkReal x8825=((1.0)*cj2);
IkReal x8826=(gconst1*r21);
IkReal x8827=(gconst1*r11);
IkReal x8828=((1.0)*x8822);
IkReal x8829=(gconst2*x8822);
IkReal x8830=((1.0)*x8823);
IkReal x8831=(gconst2*x8823);
evalcond[0]=((((-1.0)*x8824*x8828))+((r02*x8823))+((r00*x8829)));
evalcond[1]=((((-1.0)*x8826*x8830))+((r20*x8831))+(((-1.0)*r22*x8828)));
evalcond[2]=((((-1.0)*r12*x8828))+(((-1.0)*x8827*x8830))+((r10*x8831)));
evalcond[3]=((-1.0)+(((-1.0)*x8824*x8830))+(((-1.0)*r02*x8828))+((r00*x8831)));
evalcond[4]=((((-1.0)*x8826*x8828))+((r22*x8823))+(((-1.0)*cj1*x8825))+((sj1*sj2))+((r20*x8829)));
evalcond[5]=((((-1.0)*x8827*x8828))+((r12*x8823))+((r10*x8829))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8832 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8832.valid){
continue;
}
CheckValue<IkReal> x8833=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8832.value)+(((1.5707963267949)*(x8833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8834=IKcos(j4);
IkReal x8835=IKsin(j4);
IkReal x8836=(gconst1*r01);
IkReal x8837=((1.0)*cj2);
IkReal x8838=(gconst1*r21);
IkReal x8839=(gconst1*r11);
IkReal x8840=((1.0)*x8834);
IkReal x8841=(gconst2*x8834);
IkReal x8842=((1.0)*x8835);
IkReal x8843=(gconst2*x8835);
evalcond[0]=(((r02*x8835))+((r00*x8841))+(((-1.0)*x8836*x8840)));
evalcond[1]=(((r20*x8843))+(((-1.0)*x8838*x8842))+(((-1.0)*r22*x8840)));
evalcond[2]=(((r10*x8843))+(((-1.0)*x8839*x8842))+(((-1.0)*r12*x8840)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8840))+((r00*x8843))+(((-1.0)*x8836*x8842)));
evalcond[4]=(((r20*x8841))+((sj1*sj2))+(((-1.0)*x8838*x8840))+(((-1.0)*cj1*x8837))+((r22*x8835)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r12*x8835))+((r10*x8841))+(((-1.0)*sj1*x8837))+(((-1.0)*x8839*x8840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8846 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8846.valid){
continue;
}
IkReal x8844=((-1.0)*(x8846.value));
IkReal x8845=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8844;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8844;
IkReal gconst1=((-1.0)*r21*x8845);
IkReal gconst2=(r20*x8845);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8849 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8849.valid){
continue;
}
IkReal x8847=((-1.0)*(x8849.value));
IkReal x8848=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8847;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8847;
IkReal gconst1=((-1.0)*r21*x8848);
IkReal gconst2=(r20*x8848);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8852 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8852.valid){
continue;
}
IkReal x8850=((-1.0)*(x8852.value));
IkReal x8851=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8850;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8850;
IkReal gconst1=((-1.0)*r21*x8851);
IkReal gconst2=(r20*x8851);
IkReal x8853=r22*r22;
IkReal x8854=(cj1*cj2*r12);
IkReal x8855=(r12*sj1*sj2);
CheckValue<IkReal> x8859=IKPowWithIntegerCheck(((-1.0)+x8853),-1);
if(!x8859.valid){
continue;
}
IkReal x8856=x8859.value;
if((((1.0)+(((-1.0)*x8853)))) < -0.00001)
continue;
IkReal x8857=IKsqrt(((1.0)+(((-1.0)*x8853))));
IkReal x8858=(r22*x8856*x8857);
j4eval[0]=((IKabs((x8854+(((-1.0)*x8855)))))+(IKabs(((((-1.0)*x8854*x8858))+((x8855*x8858))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8860=(cj1*cj2);
IkReal x8861=(gconst2*r10);
IkReal x8862=(gconst1*r11);
IkReal x8863=((1.0)*sj1*sj2);
CheckValue<IkReal> x8864 = IKatan2WithCheck(IkReal((((x8860*x8862))+((sj1*sj2*x8861))+(((-1.0)*x8860*x8861))+(((-1.0)*x8862*x8863)))),IkReal((((r12*x8860))+(((-1.0)*r12*x8863)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8864.valid){
continue;
}
CheckValue<IkReal> x8865=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8864.value)+(((1.5707963267949)*(x8865.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8866=IKcos(j4);
IkReal x8867=IKsin(j4);
IkReal x8868=(gconst1*r01);
IkReal x8869=(gconst1*r21);
IkReal x8870=(gconst1*r11);
IkReal x8871=((1.0)*x8866);
IkReal x8872=(gconst2*x8866);
IkReal x8873=((1.0)*x8867);
IkReal x8874=(gconst2*x8867);
evalcond[0]=(((r10*x8872))+(((-1.0)*x8870*x8871))+((r12*x8867)));
evalcond[1]=(((r20*x8874))+(((-1.0)*r22*x8871))+(((-1.0)*x8869*x8873)));
evalcond[2]=((((-1.0)*r02*x8871))+(((-1.0)*x8868*x8873))+((r00*x8874)));
evalcond[3]=((-1.0)+((r10*x8874))+(((-1.0)*x8870*x8873))+(((-1.0)*r12*x8871)));
evalcond[4]=(((cj2*sj1))+((r02*x8867))+(((-1.0)*x8868*x8871))+((cj1*sj2))+((r00*x8872)));
evalcond[5]=(((r20*x8872))+(((-1.0)*x8869*x8871))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8875=(gconst1*r11);
IkReal x8876=(gconst2*r10);
CheckValue<IkReal> x8877 = IKatan2WithCheck(IkReal(((((-1.0)*x8875))+x8876)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8877.valid){
continue;
}
CheckValue<IkReal> x8878=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8876*x8876)+(((-2.0)*x8875*x8876))+(x8875*x8875))),-1);
if(!x8878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8877.value)+(((1.5707963267949)*(x8878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8879=IKcos(j4);
IkReal x8880=IKsin(j4);
IkReal x8881=(gconst1*r01);
IkReal x8882=(gconst1*r21);
IkReal x8883=(gconst1*r11);
IkReal x8884=((1.0)*x8879);
IkReal x8885=(gconst2*x8879);
IkReal x8886=((1.0)*x8880);
IkReal x8887=(gconst2*x8880);
evalcond[0]=((((-1.0)*x8883*x8884))+((r10*x8885))+((r12*x8880)));
evalcond[1]=((((-1.0)*r22*x8884))+(((-1.0)*x8882*x8886))+((r20*x8887)));
evalcond[2]=((((-1.0)*x8881*x8886))+((r00*x8887))+(((-1.0)*r02*x8884)));
evalcond[3]=((-1.0)+(((-1.0)*x8883*x8886))+(((-1.0)*r12*x8884))+((r10*x8887)));
evalcond[4]=((((-1.0)*x8881*x8884))+((r00*x8885))+((cj2*sj1))+((r02*x8880))+((cj1*sj2)));
evalcond[5]=(((r22*x8880))+(((-1.0)*x8882*x8884))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8888=((1.0)*gconst1);
CheckValue<IkReal> x8889=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8888)))),-1);
if(!x8889.valid){
continue;
}
CheckValue<IkReal> x8890 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x8888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8889.value)))+(x8890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8891=IKcos(j4);
IkReal x8892=IKsin(j4);
IkReal x8893=(gconst1*r01);
IkReal x8894=(gconst1*r21);
IkReal x8895=(gconst1*r11);
IkReal x8896=((1.0)*x8891);
IkReal x8897=(gconst2*x8891);
IkReal x8898=((1.0)*x8892);
IkReal x8899=(gconst2*x8892);
evalcond[0]=(((r12*x8892))+(((-1.0)*x8895*x8896))+((r10*x8897)));
evalcond[1]=(((r20*x8899))+(((-1.0)*x8894*x8898))+(((-1.0)*r22*x8896)));
evalcond[2]=(((r00*x8899))+(((-1.0)*x8893*x8898))+(((-1.0)*r02*x8896)));
evalcond[3]=((-1.0)+(((-1.0)*x8895*x8898))+(((-1.0)*r12*x8896))+((r10*x8899)));
evalcond[4]=(((cj2*sj1))+((r00*x8897))+((cj1*sj2))+(((-1.0)*x8893*x8896))+((r02*x8892)));
evalcond[5]=(((r20*x8897))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8894*x8896))+((r22*x8892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8902 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8902.valid){
continue;
}
IkReal x8900=((-1.0)*(x8902.value));
IkReal x8901=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8900;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8900;
IkReal gconst1=((-1.0)*r21*x8901);
IkReal gconst2=(r20*x8901);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8905 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8905.valid){
continue;
}
IkReal x8903=((-1.0)*(x8905.value));
IkReal x8904=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8903;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8903;
IkReal gconst1=((-1.0)*r21*x8904);
IkReal gconst2=(r20*x8904);
IkReal x8906=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8910=IKPowWithIntegerCheck(x8906,-1);
if(!x8910.valid){
continue;
}
IkReal x8907=x8910.value;
IkReal x8908=((1.0)*x8907);
IkReal x8909=((((-1.0)*x8908*(r10*r10)*(r20*r20)))+(((-1.0)*x8908*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x8907))+(((-1.0)*(r12*r12))));
j4eval[0]=x8909;
j4eval[1]=IKsign(x8909);
j4eval[2]=r12;
j4eval[3]=x8906;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8913 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8913.valid){
continue;
}
IkReal x8911=((-1.0)*(x8913.value));
IkReal x8912=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x8911;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8911;
IkReal gconst1=((-1.0)*r21*x8912);
IkReal gconst2=(r20*x8912);
IkReal x8914=r22*r22;
IkReal x8915=(cj1*cj2*r12);
IkReal x8916=(r12*sj1*sj2);
CheckValue<IkReal> x8920=IKPowWithIntegerCheck(((-1.0)+x8914),-1);
if(!x8920.valid){
continue;
}
IkReal x8917=x8920.value;
if((((1.0)+(((-1.0)*x8914)))) < -0.00001)
continue;
IkReal x8918=IKsqrt(((1.0)+(((-1.0)*x8914))));
IkReal x8919=(r22*x8917*x8918);
j4eval[0]=((IKabs(((((-1.0)*x8915*x8919))+((x8916*x8919)))))+(IKabs(((((-1.0)*x8916))+x8915))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8921=(cj1*cj2);
IkReal x8922=(gconst2*r10);
IkReal x8923=(gconst1*r11);
IkReal x8924=((1.0)*sj1*sj2);
CheckValue<IkReal> x8925=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8925.valid){
continue;
}
CheckValue<IkReal> x8926 = IKatan2WithCheck(IkReal((((x8921*x8923))+(((-1.0)*x8921*x8922))+((sj1*sj2*x8922))+(((-1.0)*x8923*x8924)))),IkReal(((((-1.0)*r12*x8924))+((r12*x8921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8925.value)))+(x8926.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8927=IKcos(j4);
IkReal x8928=IKsin(j4);
IkReal x8929=(gconst1*r01);
IkReal x8930=((1.0)*cj2);
IkReal x8931=(gconst1*r21);
IkReal x8932=(gconst1*r11);
IkReal x8933=((1.0)*x8927);
IkReal x8934=(gconst2*x8927);
IkReal x8935=((1.0)*x8928);
IkReal x8936=(gconst2*x8928);
evalcond[0]=((((-1.0)*x8932*x8933))+((r12*x8928))+((r10*x8934)));
evalcond[1]=((((-1.0)*r22*x8933))+((r20*x8936))+(((-1.0)*x8931*x8935)));
evalcond[2]=((((-1.0)*x8929*x8935))+(((-1.0)*r02*x8933))+((r00*x8936)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8933))+(((-1.0)*x8932*x8935))+((r10*x8936)));
evalcond[4]=(((r22*x8928))+((sj1*sj2))+((r20*x8934))+(((-1.0)*cj1*x8930))+(((-1.0)*x8931*x8933)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r02*x8928))+(((-1.0)*x8929*x8933))+((r00*x8934))+(((-1.0)*sj1*x8930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8937=(gconst1*r11);
IkReal x8938=(gconst2*r10);
CheckValue<IkReal> x8939 = IKatan2WithCheck(IkReal((x8938+(((-1.0)*x8937)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8939.valid){
continue;
}
CheckValue<IkReal> x8940=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8937*x8937)))+(((2.0)*x8937*x8938))+(((-1.0)*(x8938*x8938)))+(((-1.0)*(r12*r12))))),-1);
if(!x8940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8939.value)+(((1.5707963267949)*(x8940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8941=IKcos(j4);
IkReal x8942=IKsin(j4);
IkReal x8943=(gconst1*r01);
IkReal x8944=((1.0)*cj2);
IkReal x8945=(gconst1*r21);
IkReal x8946=(gconst1*r11);
IkReal x8947=((1.0)*x8941);
IkReal x8948=(gconst2*x8941);
IkReal x8949=((1.0)*x8942);
IkReal x8950=(gconst2*x8942);
evalcond[0]=((((-1.0)*x8946*x8947))+((r10*x8948))+((r12*x8942)));
evalcond[1]=((((-1.0)*r22*x8947))+(((-1.0)*x8945*x8949))+((r20*x8950)));
evalcond[2]=((((-1.0)*x8943*x8949))+((r00*x8950))+(((-1.0)*r02*x8947)));
evalcond[3]=((1.0)+(((-1.0)*x8946*x8949))+(((-1.0)*r12*x8947))+((r10*x8950)));
evalcond[4]=(((r22*x8942))+((sj1*sj2))+(((-1.0)*cj1*x8944))+((r20*x8948))+(((-1.0)*x8945*x8947)));
evalcond[5]=(((r02*x8942))+(((-1.0)*sj1*x8944))+(((-1.0)*cj1*sj2))+(((-1.0)*x8943*x8947))+((r00*x8948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8951 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8951.valid){
continue;
}
CheckValue<IkReal> x8952=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8951.value)+(((1.5707963267949)*(x8952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8953=IKcos(j4);
IkReal x8954=IKsin(j4);
IkReal x8955=(gconst1*r01);
IkReal x8956=((1.0)*cj2);
IkReal x8957=(gconst1*r21);
IkReal x8958=(gconst1*r11);
IkReal x8959=((1.0)*x8953);
IkReal x8960=(gconst2*x8953);
IkReal x8961=((1.0)*x8954);
IkReal x8962=(gconst2*x8954);
evalcond[0]=((((-1.0)*x8958*x8959))+((r10*x8960))+((r12*x8954)));
evalcond[1]=((((-1.0)*r22*x8959))+(((-1.0)*x8957*x8961))+((r20*x8962)));
evalcond[2]=((((-1.0)*x8955*x8961))+((r00*x8962))+(((-1.0)*r02*x8959)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8959))+(((-1.0)*x8958*x8961))+((r10*x8962)));
evalcond[4]=(((r22*x8954))+((sj1*sj2))+(((-1.0)*cj1*x8956))+(((-1.0)*x8957*x8959))+((r20*x8960)));
evalcond[5]=(((r02*x8954))+(((-1.0)*sj1*x8956))+(((-1.0)*cj1*sj2))+((r00*x8960))+(((-1.0)*x8955*x8959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8963=((-1.0)*py);
CheckValue<IkReal> x8965 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8965.valid){
continue;
}
IkReal x8964=((-1.0)*(x8965.value));
sj5=gconst1;
cj5=gconst2;
j5=x8964;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8963);
rxp0_2=(py*r00);
rxp1_0=(r21*x8963);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8964;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8966=((-1.0)*py);
CheckValue<IkReal> x8968 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8968.valid){
continue;
}
IkReal x8967=((-1.0)*(x8968.value));
sj5=gconst1;
cj5=gconst2;
j5=x8967;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8966);
rxp0_2=(py*r00);
rxp1_0=(r21*x8966);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8967;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8969=((-1.0)*py);
CheckValue<IkReal> x8971 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8971.valid){
continue;
}
IkReal x8970=((-1.0)*(x8971.value));
sj5=gconst1;
cj5=gconst2;
j5=x8970;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8969);
rxp0_2=(py*r00);
rxp1_0=(r21*x8969);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8970;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8974=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x8974.valid){
continue;
}
IkReal x8972=x8974.value;
IkReal x8973=((1.0)*cj0*x8972);
cj4array[0]=((((-1.0)*cj1*sj2*x8973))+(((-1.0)*cj2*sj1*x8973)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8975=IKsin(j4);
IkReal x8976=IKcos(j4);
IkReal x8977=(gconst2*x8975);
IkReal x8978=((1.0)*x8976);
IkReal x8979=((1.0)*gconst1*x8975);
evalcond[0]=(r12*x8975);
evalcond[1]=((((-1.0)*r12*x8978))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x8977))+(((-1.0)*r21*x8979)));
evalcond[3]=(((r00*x8977))+(((-1.0)*r01*x8979)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x8976))+(((-1.0)*gconst1*r21*x8978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8981=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8981.valid){
continue;
}
IkReal x8980=x8981.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8980))+((cj1*cj2*x8980)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8982=IKsin(j4);
IkReal x8983=IKcos(j4);
IkReal x8984=(gconst2*r00);
IkReal x8985=((1.0)*gconst1*r01);
evalcond[0]=(r12*x8982);
evalcond[1]=((((-1.0)*r12*x8983))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst1*r21*x8982))+((gconst2*r20*x8982)));
evalcond[3]=((((-1.0)*x8982*x8985))+((x8982*x8984)));
evalcond[4]=(((x8983*x8984))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*x8983*x8985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8986=IKPowWithIntegerCheck(r12,-1);
if(!x8986.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8986.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8987=IKsin(j4);
IkReal x8988=IKcos(j4);
IkReal x8989=(gconst2*r00);
IkReal x8990=(gconst2*r20);
IkReal x8991=((1.0)*gconst1*x8987);
IkReal x8992=((1.0)*gconst1*x8988);
evalcond[0]=(r12*x8987);
evalcond[1]=(((x8987*x8990))+(((-1.0)*r21*x8991)));
evalcond[2]=((((-1.0)*r01*x8991))+((x8987*x8989)));
evalcond[3]=(((x8988*x8990))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x8992)));
evalcond[4]=((((-1.0)*r01*x8992))+((cj0*cj2*sj1))+((x8988*x8989))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8993=(sj1*sj2);
IkReal x8994=(gconst2*r20);
IkReal x8995=(cj1*cj2);
IkReal x8996=(gconst1*r21);
CheckValue<IkReal> x8997=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8996*x8996)))+(((-1.0)*(x8994*x8994)))+(((-1.0)*(r22*r22)))+(((2.0)*x8994*x8996)))),-1);
if(!x8997.valid){
continue;
}
CheckValue<IkReal> x8998 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8995))+((r22*x8993)))),IkReal((((x8995*x8996))+(((-1.0)*x8993*x8996))+((x8993*x8994))+(((-1.0)*x8994*x8995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8997.value)))+(x8998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8999=IKsin(j4);
IkReal x9000=IKcos(j4);
IkReal x9001=(gconst1*r01);
IkReal x9002=(cj2*sj1);
IkReal x9003=(gconst1*r21);
IkReal x9004=(gconst1*r11);
IkReal x9005=(cj1*sj2);
IkReal x9006=((1.0)*x9000);
IkReal x9007=(gconst2*x9000);
IkReal x9008=((1.0)*x8999);
IkReal x9009=(gconst2*x8999);
evalcond[0]=((((-1.0)*r22*x9006))+(((-1.0)*x9003*x9008))+((r20*x9009)));
evalcond[1]=((((-1.0)*r02*x9006))+sj0+(((-1.0)*x9001*x9008))+((r00*x9009)));
evalcond[2]=((((-1.0)*r12*x9006))+(((-1.0)*x9004*x9008))+((r10*x9009))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x9003*x9006))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x9007))+((r22*x8999)));
evalcond[4]=((((-1.0)*x9001*x9006))+((cj0*x9005))+((cj0*x9002))+((r02*x8999))+((r00*x9007)));
evalcond[5]=(((r12*x8999))+(((-1.0)*x9004*x9006))+((sj0*x9005))+((sj0*x9002))+((r10*x9007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9010=((1.0)*gconst1);
CheckValue<IkReal> x9011 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*r21*x9010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9011.valid){
continue;
}
CheckValue<IkReal> x9012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9010))+(((-1.0)*gconst2*r01)))),-1);
if(!x9012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9011.value)+(((1.5707963267949)*(x9012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9013=IKsin(j4);
IkReal x9014=IKcos(j4);
IkReal x9015=(gconst1*r01);
IkReal x9016=(cj2*sj1);
IkReal x9017=(gconst1*r21);
IkReal x9018=(gconst1*r11);
IkReal x9019=(cj1*sj2);
IkReal x9020=((1.0)*x9014);
IkReal x9021=(gconst2*x9014);
IkReal x9022=((1.0)*x9013);
IkReal x9023=(gconst2*x9013);
evalcond[0]=((((-1.0)*x9017*x9022))+(((-1.0)*r22*x9020))+((r20*x9023)));
evalcond[1]=(sj0+((r00*x9023))+(((-1.0)*x9015*x9022))+(((-1.0)*r02*x9020)));
evalcond[2]=((((-1.0)*x9018*x9022))+(((-1.0)*r12*x9020))+((r10*x9023))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x9017*x9020))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x9013))+((r20*x9021)));
evalcond[4]=(((r00*x9021))+(((-1.0)*x9015*x9020))+((r02*x9013))+((cj0*x9019))+((cj0*x9016)));
evalcond[5]=((((-1.0)*x9018*x9020))+((sj0*x9019))+((sj0*x9016))+((r10*x9021))+((r12*x9013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9024=((1.0)*gconst1);
CheckValue<IkReal> x9025=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x9024)))),-1);
if(!x9025.valid){
continue;
}
CheckValue<IkReal> x9026 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x9024))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9025.value)))+(x9026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9027=IKsin(j4);
IkReal x9028=IKcos(j4);
IkReal x9029=(gconst1*r01);
IkReal x9030=(cj2*sj1);
IkReal x9031=(gconst1*r21);
IkReal x9032=(gconst1*r11);
IkReal x9033=(cj1*sj2);
IkReal x9034=((1.0)*x9028);
IkReal x9035=(gconst2*x9028);
IkReal x9036=((1.0)*x9027);
IkReal x9037=(gconst2*x9027);
evalcond[0]=((((-1.0)*x9031*x9036))+(((-1.0)*r22*x9034))+((r20*x9037)));
evalcond[1]=(sj0+(((-1.0)*x9029*x9036))+((r00*x9037))+(((-1.0)*r02*x9034)));
evalcond[2]=((((-1.0)*r12*x9034))+((r10*x9037))+(((-1.0)*x9032*x9036))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x9031*x9034))+((r22*x9027))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x9035)));
evalcond[4]=((((-1.0)*x9029*x9034))+((r00*x9035))+((cj0*x9030))+((cj0*x9033))+((r02*x9027)));
evalcond[5]=(((r10*x9035))+(((-1.0)*x9032*x9034))+((r12*x9027))+((sj0*x9030))+((sj0*x9033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9040 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9040.valid){
continue;
}
IkReal x9038=((-1.0)*(x9040.value));
IkReal x9039=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9038;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9038;
IkReal gconst1=((-1.0)*r21*x9039);
IkReal gconst2=(r20*x9039);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9043 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9043.valid){
continue;
}
IkReal x9041=((-1.0)*(x9043.value));
IkReal x9042=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9041;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9041;
IkReal gconst1=((-1.0)*r21*x9042);
IkReal gconst2=(r20*x9042);
CheckValue<IkReal> x9051=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9051.valid){
continue;
}
IkReal x9044=x9051.value;
IkReal x9045=(cj3*x9044);
IkReal x9046=(r11*x9045);
IkReal x9047=(r01*x9045);
IkReal x9048=(r00*x9045);
IkReal x9049=(r10*x9045);
IkReal x9050=(r20*r21*x9045);
j4eval[0]=IKsign((((r01*x9046*(r21*r21)))+((cj3*r02*r12))+((r10*x9048*(r20*r20)))+((r10*r20*r21*x9047))+((r00*r20*r21*x9046))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9054 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9054.valid){
continue;
}
IkReal x9052=((-1.0)*(x9054.value));
IkReal x9053=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9052;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9052;
IkReal gconst1=((-1.0)*r21*x9053);
IkReal gconst2=(r20*x9053);
CheckValue<IkReal> x9062=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9062.valid){
continue;
}
IkReal x9055=x9062.value;
IkReal x9056=(sj3*x9055);
IkReal x9057=(r11*x9056);
IkReal x9058=(r00*x9056);
IkReal x9059=(r01*x9056);
IkReal x9060=(r10*x9056);
IkReal x9061=(r20*r21*x9056);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9059))+((r10*x9058*(r20*r20)))+((r00*r20*r21*x9057))+((r01*x9057*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9065 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9065.valid){
continue;
}
IkReal x9063=((-1.0)*(x9065.value));
IkReal x9064=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9063;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9063;
IkReal gconst1=((-1.0)*r21*x9064);
IkReal gconst2=(r20*x9064);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9068 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9068.valid){
continue;
}
IkReal x9066=((-1.0)*(x9068.value));
IkReal x9067=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9066;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9066;
IkReal gconst1=((-1.0)*r21*x9067);
IkReal gconst2=(r20*x9067);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9071 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9071.valid){
continue;
}
IkReal x9069=((-1.0)*(x9071.value));
IkReal x9070=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9069;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9069;
IkReal gconst1=((-1.0)*r21*x9070);
IkReal gconst2=(r20*x9070);
IkReal x9072=r22*r22;
IkReal x9073=(r12*sj1*sj2);
CheckValue<IkReal> x9078=IKPowWithIntegerCheck(((-1.0)+x9072),-1);
if(!x9078.valid){
continue;
}
IkReal x9074=x9078.value;
IkReal x9075=((1.0)*cj1*cj2*r12);
if((((1.0)+(((-1.0)*x9072)))) < -0.00001)
continue;
IkReal x9076=IKsqrt(((1.0)+(((-1.0)*x9072))));
IkReal x9077=(r22*x9074*x9076);
j4eval[0]=((IKabs(((((-1.0)*x9075*x9077))+((x9073*x9077)))))+(IKabs((x9073+(((-1.0)*x9075))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9079=(gconst2*r10);
IkReal x9080=(sj1*sj2);
IkReal x9081=(gconst1*r11);
IkReal x9082=((1.0)*cj1*cj2);
CheckValue<IkReal> x9083 = IKatan2WithCheck(IkReal((((r12*x9080))+(((-1.0)*r12*x9082)))),IkReal(((((-1.0)*x9080*x9081))+((cj1*cj2*x9081))+(((-1.0)*x9079*x9082))+((x9079*x9080)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9083.valid){
continue;
}
CheckValue<IkReal> x9084=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9079*x9079)+(x9081*x9081)+(((-2.0)*x9079*x9081)))),-1);
if(!x9084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9083.value)+(((1.5707963267949)*(x9084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9085=IKsin(j4);
IkReal x9086=IKcos(j4);
IkReal x9087=(gconst1*r01);
IkReal x9088=(gconst1*r21);
IkReal x9089=((1.0)*cj2);
IkReal x9090=(gconst1*r11);
IkReal x9091=((1.0)*x9086);
IkReal x9092=((1.0)*x9085);
IkReal x9093=(gconst2*x9085);
evalcond[0]=(((r20*x9093))+(((-1.0)*r22*x9091))+(((-1.0)*x9088*x9092)));
evalcond[1]=(((r10*x9093))+(((-1.0)*r12*x9091))+(((-1.0)*x9090*x9092)));
evalcond[2]=((((-1.0)*gconst2*r00*x9091))+((x9086*x9087))+(((-1.0)*r02*x9092)));
evalcond[3]=((1.0)+((r00*x9093))+(((-1.0)*x9087*x9092))+(((-1.0)*r02*x9091)));
evalcond[4]=((((-1.0)*cj1*x9089))+((sj1*sj2))+((x9086*x9090))+(((-1.0)*gconst2*r10*x9091))+(((-1.0)*r12*x9092)));
evalcond[5]=((((-1.0)*sj1*x9089))+(((-1.0)*gconst2*r20*x9091))+(((-1.0)*cj1*sj2))+((x9086*x9088))+(((-1.0)*r22*x9092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9094=(gconst1*r01);
IkReal x9095=(gconst2*r00);
CheckValue<IkReal> x9096 = IKatan2WithCheck(IkReal((x9094+(((-1.0)*x9095)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9096.valid){
continue;
}
CheckValue<IkReal> x9097=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9094*x9095))+(x9095*x9095)+(r02*r02)+(x9094*x9094))),-1);
if(!x9097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9096.value)+(((1.5707963267949)*(x9097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9098=IKsin(j4);
IkReal x9099=IKcos(j4);
IkReal x9100=(gconst1*r01);
IkReal x9101=(gconst1*r21);
IkReal x9102=((1.0)*cj2);
IkReal x9103=(gconst1*r11);
IkReal x9104=((1.0)*x9099);
IkReal x9105=((1.0)*x9098);
IkReal x9106=(gconst2*x9098);
evalcond[0]=((((-1.0)*x9101*x9105))+(((-1.0)*r22*x9104))+((r20*x9106)));
evalcond[1]=(((r10*x9106))+(((-1.0)*r12*x9104))+(((-1.0)*x9103*x9105)));
evalcond[2]=((((-1.0)*r02*x9105))+((x9099*x9100))+(((-1.0)*gconst2*r00*x9104)));
evalcond[3]=((1.0)+(((-1.0)*x9100*x9105))+(((-1.0)*r02*x9104))+((r00*x9106)));
evalcond[4]=((((-1.0)*cj1*x9102))+(((-1.0)*gconst2*r10*x9104))+((sj1*sj2))+(((-1.0)*r12*x9105))+((x9099*x9103)));
evalcond[5]=((((-1.0)*r22*x9105))+(((-1.0)*cj1*sj2))+((x9099*x9101))+(((-1.0)*gconst2*r20*x9104))+(((-1.0)*sj1*x9102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9107=((1.0)*gconst1);
CheckValue<IkReal> x9108=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9107))+(((-1.0)*gconst2*r11)))),-1);
if(!x9108.valid){
continue;
}
CheckValue<IkReal> x9109 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9107))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9108.value)))+(x9109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9110=IKsin(j4);
IkReal x9111=IKcos(j4);
IkReal x9112=(gconst1*r01);
IkReal x9113=(gconst1*r21);
IkReal x9114=((1.0)*cj2);
IkReal x9115=(gconst1*r11);
IkReal x9116=((1.0)*x9111);
IkReal x9117=((1.0)*x9110);
IkReal x9118=(gconst2*x9110);
evalcond[0]=((((-1.0)*x9113*x9117))+((r20*x9118))+(((-1.0)*r22*x9116)));
evalcond[1]=((((-1.0)*x9115*x9117))+((r10*x9118))+(((-1.0)*r12*x9116)));
evalcond[2]=(((x9111*x9112))+(((-1.0)*gconst2*r00*x9116))+(((-1.0)*r02*x9117)));
evalcond[3]=((1.0)+(((-1.0)*x9112*x9117))+((r00*x9118))+(((-1.0)*r02*x9116)));
evalcond[4]=(((x9111*x9115))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9116))+(((-1.0)*cj1*x9114))+(((-1.0)*r12*x9117)));
evalcond[5]=(((x9111*x9113))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9114))+(((-1.0)*gconst2*r20*x9116))+(((-1.0)*r22*x9117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9121 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9121.valid){
continue;
}
IkReal x9119=((-1.0)*(x9121.value));
IkReal x9120=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9119;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9119;
IkReal gconst1=((-1.0)*r21*x9120);
IkReal gconst2=(r20*x9120);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9124 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9124.valid){
continue;
}
IkReal x9122=((-1.0)*(x9124.value));
IkReal x9123=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9122;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9122;
IkReal gconst1=((-1.0)*r21*x9123);
IkReal gconst2=(r20*x9123);
IkReal x9125=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9129=IKPowWithIntegerCheck(x9125,-1);
if(!x9129.valid){
continue;
}
IkReal x9126=x9129.value;
IkReal x9127=((1.0)*x9126);
IkReal x9128=((((-1.0)*x9127*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x9126))+(((-1.0)*x9127*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02))));
j4eval[0]=x9128;
j4eval[1]=IKsign(x9128);
j4eval[2]=r02;
j4eval[3]=x9125;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9132 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9132.valid){
continue;
}
IkReal x9130=((-1.0)*(x9132.value));
IkReal x9131=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9130;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9130;
IkReal gconst1=((-1.0)*r21*x9131);
IkReal gconst2=(r20*x9131);
IkReal x9133=r22*r22;
IkReal x9134=(cj1*r02*sj2);
IkReal x9135=(cj2*r02*sj1);
CheckValue<IkReal> x9139=IKPowWithIntegerCheck(((-1.0)+x9133),-1);
if(!x9139.valid){
continue;
}
IkReal x9136=x9139.value;
if((((1.0)+(((-1.0)*x9133)))) < -0.00001)
continue;
IkReal x9137=IKsqrt(((1.0)+(((-1.0)*x9133))));
IkReal x9138=((1.0)*r22*x9136*x9137);
j4eval[0]=((IKabs(((((-1.0)*x9135*x9138))+(((-1.0)*x9134*x9138)))))+(IKabs((x9135+x9134))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9140=(cj2*sj1);
IkReal x9141=(cj1*sj2);
IkReal x9142=((1.0)*gconst2);
IkReal x9143=(gconst1*r01);
CheckValue<IkReal> x9144=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9142)))),-1);
if(!x9144.valid){
continue;
}
CheckValue<IkReal> x9145 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9140*x9142))+((x9140*x9143))+(((-1.0)*r00*x9141*x9142))+((x9141*x9143)))),IkReal((((r02*x9140))+((r02*x9141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9144.value)))+(x9145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9146=IKcos(j4);
IkReal x9147=IKsin(j4);
IkReal x9148=(gconst1*r01);
IkReal x9149=((1.0)*cj2);
IkReal x9150=(gconst1*r21);
IkReal x9151=(gconst1*r11);
IkReal x9152=((1.0)*x9146);
IkReal x9153=(gconst2*x9146);
IkReal x9154=((1.0)*x9147);
IkReal x9155=(gconst2*x9147);
evalcond[0]=((((-1.0)*x9148*x9152))+((r00*x9153))+((r02*x9147)));
evalcond[1]=((((-1.0)*x9150*x9154))+((r20*x9155))+(((-1.0)*r22*x9152)));
evalcond[2]=((((-1.0)*r12*x9152))+(((-1.0)*x9151*x9154))+((r10*x9155)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9152))+(((-1.0)*x9148*x9154))+((r00*x9155)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x9151*x9152))+((r12*x9147))+(((-1.0)*cj1*x9149))+((r10*x9153)));
evalcond[5]=((((-1.0)*x9150*x9152))+(((-1.0)*cj1*sj2))+((r20*x9153))+(((-1.0)*sj1*x9149))+((r22*x9147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9156=(gconst2*r00);
IkReal x9157=(gconst1*r01);
CheckValue<IkReal> x9158 = IKatan2WithCheck(IkReal((x9156+(((-1.0)*x9157)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9158.valid){
continue;
}
CheckValue<IkReal> x9159=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9157*x9157)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9156*x9156)))+(((2.0)*x9156*x9157)))),-1);
if(!x9159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9158.value)+(((1.5707963267949)*(x9159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9160=IKcos(j4);
IkReal x9161=IKsin(j4);
IkReal x9162=(gconst1*r01);
IkReal x9163=((1.0)*cj2);
IkReal x9164=(gconst1*r21);
IkReal x9165=(gconst1*r11);
IkReal x9166=((1.0)*x9160);
IkReal x9167=(gconst2*x9160);
IkReal x9168=((1.0)*x9161);
IkReal x9169=(gconst2*x9161);
evalcond[0]=(((r00*x9167))+((r02*x9161))+(((-1.0)*x9162*x9166)));
evalcond[1]=((((-1.0)*r22*x9166))+(((-1.0)*x9164*x9168))+((r20*x9169)));
evalcond[2]=((((-1.0)*r12*x9166))+((r10*x9169))+(((-1.0)*x9165*x9168)));
evalcond[3]=((1.0)+((r00*x9169))+(((-1.0)*x9162*x9168))+(((-1.0)*r02*x9166)));
evalcond[4]=((((-1.0)*cj1*x9163))+((r10*x9167))+(((-1.0)*x9165*x9166))+((sj1*sj2))+((r12*x9161)));
evalcond[5]=(((r22*x9161))+(((-1.0)*cj1*sj2))+(((-1.0)*x9164*x9166))+(((-1.0)*sj1*x9163))+((r20*x9167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9170=((1.0)*gconst1);
CheckValue<IkReal> x9171=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x9170)))),-1);
if(!x9171.valid){
continue;
}
CheckValue<IkReal> x9172 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9170))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9171.value)))+(x9172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9173=IKcos(j4);
IkReal x9174=IKsin(j4);
IkReal x9175=(gconst1*r01);
IkReal x9176=((1.0)*cj2);
IkReal x9177=(gconst1*r21);
IkReal x9178=(gconst1*r11);
IkReal x9179=((1.0)*x9173);
IkReal x9180=(gconst2*x9173);
IkReal x9181=((1.0)*x9174);
IkReal x9182=(gconst2*x9174);
evalcond[0]=(((r00*x9180))+((r02*x9174))+(((-1.0)*x9175*x9179)));
evalcond[1]=(((r20*x9182))+(((-1.0)*r22*x9179))+(((-1.0)*x9177*x9181)));
evalcond[2]=(((r10*x9182))+(((-1.0)*r12*x9179))+(((-1.0)*x9178*x9181)));
evalcond[3]=((1.0)+((r00*x9182))+(((-1.0)*x9175*x9181))+(((-1.0)*r02*x9179)));
evalcond[4]=(((r10*x9180))+((sj1*sj2))+(((-1.0)*cj1*x9176))+((r12*x9174))+(((-1.0)*x9178*x9179)));
evalcond[5]=(((r20*x9180))+(((-1.0)*cj1*sj2))+(((-1.0)*x9177*x9179))+(((-1.0)*sj1*x9176))+((r22*x9174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9183=((-1.0)*py);
CheckValue<IkReal> x9185 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9185.valid){
continue;
}
IkReal x9184=((-1.0)*(x9185.value));
sj5=gconst1;
cj5=gconst2;
j5=x9184;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9183);
rxp0_2=(py*r00);
rxp1_0=(r21*x9183);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9184;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9186=((1.0)*sj3);
IkReal x9187=(r01*r21);
IkReal x9188=(r00*r20);
j4eval[0]=(x9187+x9188);
j4eval[1]=((((-1.0)*x9186*x9188))+(((-1.0)*x9186*x9187)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9189=((-1.0)*py);
CheckValue<IkReal> x9191 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9191.valid){
continue;
}
IkReal x9190=((-1.0)*(x9191.value));
sj5=gconst1;
cj5=gconst2;
j5=x9190;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9189);
rxp0_2=(py*r00);
rxp1_0=(r21*x9189);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9190;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9192=(r00*r20);
IkReal x9193=((1.0)*cj3);
IkReal x9194=(r01*r21);
j4eval[0]=(x9192+x9194);
j4eval[1]=((((-1.0)*x9193*x9194))+(((-1.0)*x9192*x9193)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9195=((-1.0)*py);
CheckValue<IkReal> x9197 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9197.valid){
continue;
}
IkReal x9196=((-1.0)*(x9197.value));
sj5=gconst1;
cj5=gconst2;
j5=x9196;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9195);
rxp0_2=(py*r00);
rxp1_0=(r21*x9195);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9196;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9198=((1.0)*cj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r01*r21*x9198))+(((-1.0)*r00*r20*x9198)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9199=((1.0)*gconst2);
CheckValue<IkReal> x9200=IKPowWithIntegerCheck(r12,-1);
if(!x9200.valid){
continue;
}
CheckValue<IkReal> x9201=IKPowWithIntegerCheck(sj3,-1);
if(!x9201.valid){
continue;
}
CheckValue<IkReal> x9202=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x9199))+((cj3*gconst1*r01))),-1);
if(!x9202.valid){
continue;
}
if( IKabs(((x9200.value)*(x9201.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9202.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9199)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9200.value)*(x9201.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x9202.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9199))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9200.value)*(x9201.value)*((((cj2*sj1))+((cj1*sj2))))), ((x9202.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9199))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9203=IKsin(j4);
IkReal x9204=IKcos(j4);
IkReal x9205=(sj1*sj2);
IkReal x9206=(gconst1*r01);
IkReal x9207=(r00*sj3);
IkReal x9208=(cj3*r20);
IkReal x9209=((1.0)*cj2);
IkReal x9210=(cj3*r00);
IkReal x9211=(gconst1*r21);
IkReal x9212=(cj1*sj2);
IkReal x9213=(r20*sj3);
IkReal x9214=((1.0)*gconst1);
IkReal x9215=(gconst2*r01);
IkReal x9216=((1.0)*cj3);
IkReal x9217=(gconst2*r21);
IkReal x9218=(cj1*x9209);
IkReal x9219=((1.0)*x9203);
IkReal x9220=(gconst2*x9203);
IkReal x9221=(cj3*x9204);
IkReal x9222=(sj3*x9204);
IkReal x9223=((1.0)*gconst2*x9204);
evalcond[0]=((-1.0)*r12*x9204);
evalcond[1]=((((-1.0)*x9211*x9219))+((r20*x9220)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*r12*sj3*x9219))+x9212);
evalcond[3]=((1.0)+((r00*x9220))+(((-1.0)*x9206*x9219)));
evalcond[4]=((((-1.0)*r12*x9203*x9216))+x9205+(((-1.0)*x9218)));
evalcond[5]=((((-1.0)*x9210*x9223))+((gconst1*x9207))+((sj3*x9215))+((x9206*x9221)));
evalcond[6]=((((-1.0)*x9210*x9214))+(((-1.0)*x9207*x9223))+(((-1.0)*x9215*x9216))+((x9206*x9222)));
evalcond[7]=((((-1.0)*x9208*x9223))+(((-1.0)*sj1*x9209))+((sj3*x9217))+((gconst1*x9213))+((x9211*x9221))+(((-1.0)*x9212)));
evalcond[8]=((((-1.0)*x9208*x9214))+x9205+(((-1.0)*x9216*x9217))+(((-1.0)*x9213*x9223))+((x9211*x9222))+(((-1.0)*x9218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9224=((1.0)*gconst2);
IkReal x9225=(gconst1*r01);
CheckValue<IkReal> x9226=IKPowWithIntegerCheck(((((-1.0)*x9225))+((gconst2*r00))),-1);
if(!x9226.valid){
continue;
}
CheckValue<IkReal> x9227=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x9224))+((cj3*x9225))),-1);
if(!x9227.valid){
continue;
}
if( IKabs(((-1.0)*(x9226.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9227.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9224)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9226.value)))+IKsqr(((x9227.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9224))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9226.value)), ((x9227.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9224))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9228=IKsin(j4);
IkReal x9229=IKcos(j4);
IkReal x9230=(sj1*sj2);
IkReal x9231=(gconst1*r01);
IkReal x9232=(r00*sj3);
IkReal x9233=(cj3*r20);
IkReal x9234=((1.0)*cj2);
IkReal x9235=(cj3*r00);
IkReal x9236=(gconst1*r21);
IkReal x9237=(cj1*sj2);
IkReal x9238=(r20*sj3);
IkReal x9239=((1.0)*gconst1);
IkReal x9240=(gconst2*r01);
IkReal x9241=((1.0)*cj3);
IkReal x9242=(gconst2*r21);
IkReal x9243=(cj1*x9234);
IkReal x9244=((1.0)*x9228);
IkReal x9245=(gconst2*x9228);
IkReal x9246=(cj3*x9229);
IkReal x9247=(sj3*x9229);
IkReal x9248=((1.0)*gconst2*x9229);
evalcond[0]=((-1.0)*r12*x9229);
evalcond[1]=((((-1.0)*x9236*x9244))+((r20*x9245)));
evalcond[2]=(((cj2*sj1))+x9237+(((-1.0)*r12*sj3*x9244)));
evalcond[3]=((1.0)+((r00*x9245))+(((-1.0)*x9231*x9244)));
evalcond[4]=((((-1.0)*r12*x9228*x9241))+x9230+(((-1.0)*x9243)));
evalcond[5]=(((sj3*x9240))+(((-1.0)*x9235*x9248))+((gconst1*x9232))+((x9231*x9246)));
evalcond[6]=((((-1.0)*x9235*x9239))+(((-1.0)*x9232*x9248))+(((-1.0)*x9240*x9241))+((x9231*x9247)));
evalcond[7]=(((sj3*x9242))+(((-1.0)*sj1*x9234))+((x9236*x9246))+((gconst1*x9238))+(((-1.0)*x9233*x9248))+(((-1.0)*x9237)));
evalcond[8]=((((-1.0)*x9241*x9242))+x9230+((x9236*x9247))+(((-1.0)*x9243))+(((-1.0)*x9233*x9239))+(((-1.0)*x9238*x9248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9249=(gconst2*r00);
IkReal x9250=(gconst1*r01);
CheckValue<IkReal> x9251=IKPowWithIntegerCheck((x9249+(((-1.0)*x9250))),-1);
if(!x9251.valid){
continue;
}
CheckValue<IkReal> x9252=IKPowWithIntegerCheck((((sj3*x9250))+(((-1.0)*sj3*x9249))),-1);
if(!x9252.valid){
continue;
}
if( IKabs(((-1.0)*(x9251.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9252.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9251.value)))+IKsqr(((x9252.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9251.value)), ((x9252.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9253=IKsin(j4);
IkReal x9254=IKcos(j4);
IkReal x9255=(sj1*sj2);
IkReal x9256=(gconst1*r01);
IkReal x9257=(r00*sj3);
IkReal x9258=(cj3*r20);
IkReal x9259=((1.0)*cj2);
IkReal x9260=(cj3*r00);
IkReal x9261=(gconst1*r21);
IkReal x9262=(cj1*sj2);
IkReal x9263=(r20*sj3);
IkReal x9264=((1.0)*gconst1);
IkReal x9265=(gconst2*r01);
IkReal x9266=((1.0)*cj3);
IkReal x9267=(gconst2*r21);
IkReal x9268=(cj1*x9259);
IkReal x9269=((1.0)*x9253);
IkReal x9270=(gconst2*x9253);
IkReal x9271=(cj3*x9254);
IkReal x9272=(sj3*x9254);
IkReal x9273=((1.0)*gconst2*x9254);
evalcond[0]=((-1.0)*r12*x9254);
evalcond[1]=(((r20*x9270))+(((-1.0)*x9261*x9269)));
evalcond[2]=(((cj2*sj1))+x9262+(((-1.0)*r12*sj3*x9269)));
evalcond[3]=((1.0)+(((-1.0)*x9256*x9269))+((r00*x9270)));
evalcond[4]=((((-1.0)*r12*x9253*x9266))+(((-1.0)*x9268))+x9255);
evalcond[5]=(((x9256*x9271))+(((-1.0)*x9260*x9273))+((gconst1*x9257))+((sj3*x9265)));
evalcond[6]=((((-1.0)*x9257*x9273))+((x9256*x9272))+(((-1.0)*x9260*x9264))+(((-1.0)*x9265*x9266)));
evalcond[7]=((((-1.0)*x9258*x9273))+(((-1.0)*sj1*x9259))+(((-1.0)*x9262))+((sj3*x9267))+((gconst1*x9263))+((x9261*x9271)));
evalcond[8]=((((-1.0)*x9268))+(((-1.0)*x9258*x9264))+x9255+(((-1.0)*x9263*x9273))+((x9261*x9272))+(((-1.0)*x9266*x9267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9274=gconst2*gconst2;
IkReal x9275=gconst1*gconst1;
IkReal x9276=(r00*r11);
IkReal x9277=(gconst1*gconst2);
IkReal x9278=((1.0)*sj3);
IkReal x9279=(r01*r11);
IkReal x9280=((1.0)*cj3*r10);
IkReal x9281=((1.0)*cj3*r12);
CheckValue<IkReal> x9282=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*r10*sj3*x9274))+(((-1.0)*x9276*x9277*x9278))+(((-1.0)*r01*r10*x9277*x9278))+((sj3*x9275*x9279)))),-1);
if(!x9282.valid){
continue;
}
CheckValue<IkReal> x9283 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r01*x9281))+(((-1.0)*gconst1*r00*x9281)))),IkReal((((cj3*x9275*x9276))+(((-1.0)*r01*x9274*x9280))+(((-1.0)*r00*x9277*x9280))+((cj3*x9277*x9279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9282.value)))+(x9283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9284=IKsin(j4);
IkReal x9285=IKcos(j4);
IkReal x9286=(sj1*sj2);
IkReal x9287=(r00*sj3);
IkReal x9288=(gconst2*r20);
IkReal x9289=(cj3*gconst1);
IkReal x9290=(gconst1*r01);
IkReal x9291=((1.0)*cj2);
IkReal x9292=(cj3*gconst2);
IkReal x9293=(gconst1*r11);
IkReal x9294=(gconst1*r21);
IkReal x9295=(cj1*sj2);
IkReal x9296=(gconst1*sj3);
IkReal x9297=(gconst2*sj3);
IkReal x9298=(cj1*x9291);
IkReal x9299=((1.0)*x9285);
IkReal x9300=((1.0)*x9284);
IkReal x9301=((1.0)*x9292);
IkReal x9302=(gconst2*x9284);
IkReal x9303=(sj3*x9285);
evalcond[0]=((((-1.0)*r22*x9299))+((x9284*x9288))+(((-1.0)*x9294*x9300)));
evalcond[1]=((((-1.0)*x9293*x9300))+((r10*x9302))+(((-1.0)*r12*x9299)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9299))+((r00*x9302))+(((-1.0)*x9290*x9300)));
evalcond[3]=(((r01*x9285*x9289))+((r01*x9297))+(((-1.0)*r00*x9292*x9299))+(((-1.0)*cj3*r02*x9300))+((gconst1*x9287)));
evalcond[4]=((((-1.0)*r00*x9289))+(((-1.0)*r02*sj3*x9300))+((x9290*x9303))+(((-1.0)*r01*x9301))+(((-1.0)*gconst2*x9287*x9299)));
evalcond[5]=(((r11*x9297))+((r11*x9285*x9289))+x9286+((r10*x9296))+(((-1.0)*cj3*r12*x9300))+(((-1.0)*x9298))+(((-1.0)*r10*x9292*x9299)));
evalcond[6]=((((-1.0)*sj1*x9291))+(((-1.0)*x9295))+(((-1.0)*cj3*r22*x9300))+((r20*x9296))+((r21*x9297))+(((-1.0)*cj3*x9288*x9299))+((r21*x9285*x9289)));
evalcond[7]=(((cj2*sj1))+((x9293*x9303))+(((-1.0)*r10*x9297*x9299))+x9295+(((-1.0)*r12*sj3*x9300))+(((-1.0)*r10*x9289))+(((-1.0)*r11*x9301)));
evalcond[8]=((((-1.0)*r21*x9301))+x9286+(((-1.0)*r20*x9289))+(((-1.0)*x9298))+((x9294*x9303))+(((-1.0)*sj3*x9288*x9299))+(((-1.0)*r22*sj3*x9300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9304=gconst1*gconst1;
IkReal x9305=gconst2*gconst2;
IkReal x9306=(r00*sj3);
IkReal x9307=((1.0)*r11);
IkReal x9308=(r01*sj3);
IkReal x9309=(gconst1*gconst2);
IkReal x9310=(cj3*r01);
IkReal x9311=(cj3*r00);
IkReal x9312=(r10*x9305);
CheckValue<IkReal> x9313 = IKatan2WithCheck(IkReal((((gconst1*r12*x9306))+((gconst2*r12*x9308)))),IkReal((((r10*x9306*x9309))+(((-1.0)*x9304*x9306*x9307))+(((-1.0)*x9307*x9308*x9309))+((x9308*x9312)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9313.valid){
continue;
}
CheckValue<IkReal> x9314=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*r10*x9309*x9310))+((x9311*x9312))+(((-1.0)*x9307*x9309*x9311))+((r11*x9304*x9310)))),-1);
if(!x9314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9313.value)+(((1.5707963267949)*(x9314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9315=IKsin(j4);
IkReal x9316=IKcos(j4);
IkReal x9317=(sj1*sj2);
IkReal x9318=(r00*sj3);
IkReal x9319=(gconst2*r20);
IkReal x9320=(cj3*gconst1);
IkReal x9321=(gconst1*r01);
IkReal x9322=((1.0)*cj2);
IkReal x9323=(cj3*gconst2);
IkReal x9324=(gconst1*r11);
IkReal x9325=(gconst1*r21);
IkReal x9326=(cj1*sj2);
IkReal x9327=(gconst1*sj3);
IkReal x9328=(gconst2*sj3);
IkReal x9329=(cj1*x9322);
IkReal x9330=((1.0)*x9316);
IkReal x9331=((1.0)*x9315);
IkReal x9332=((1.0)*x9323);
IkReal x9333=(gconst2*x9315);
IkReal x9334=(sj3*x9316);
evalcond[0]=(((x9315*x9319))+(((-1.0)*r22*x9330))+(((-1.0)*x9325*x9331)));
evalcond[1]=((((-1.0)*x9324*x9331))+(((-1.0)*r12*x9330))+((r10*x9333)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9330))+((r00*x9333))+(((-1.0)*x9321*x9331)));
evalcond[3]=(((r01*x9316*x9320))+((r01*x9328))+(((-1.0)*r00*x9323*x9330))+(((-1.0)*cj3*r02*x9331))+((gconst1*x9318)));
evalcond[4]=((((-1.0)*r01*x9332))+((x9321*x9334))+(((-1.0)*gconst2*x9318*x9330))+(((-1.0)*r02*sj3*x9331))+(((-1.0)*r00*x9320)));
evalcond[5]=((((-1.0)*x9329))+(((-1.0)*cj3*r12*x9331))+x9317+((r11*x9328))+(((-1.0)*r10*x9323*x9330))+((r10*x9327))+((r11*x9316*x9320)));
evalcond[6]=((((-1.0)*sj1*x9322))+((r20*x9327))+(((-1.0)*cj3*x9319*x9330))+(((-1.0)*x9326))+(((-1.0)*cj3*r22*x9331))+((r21*x9316*x9320))+((r21*x9328)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r10*x9320))+(((-1.0)*r11*x9332))+x9326+(((-1.0)*r10*x9328*x9330))+(((-1.0)*r12*sj3*x9331))+((x9324*x9334)));
evalcond[8]=((((-1.0)*x9329))+x9317+(((-1.0)*r22*sj3*x9331))+(((-1.0)*sj3*x9319*x9330))+(((-1.0)*r20*x9320))+((x9325*x9334))+(((-1.0)*r21*x9332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9335=((1.0)*gconst1);
CheckValue<IkReal> x9336=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9335))+(((-1.0)*gconst2*r11)))),-1);
if(!x9336.valid){
continue;
}
CheckValue<IkReal> x9337 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9335))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9336.value)))+(x9337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9338=IKsin(j4);
IkReal x9339=IKcos(j4);
IkReal x9340=(sj1*sj2);
IkReal x9341=(r00*sj3);
IkReal x9342=(gconst2*r20);
IkReal x9343=(cj3*gconst1);
IkReal x9344=(gconst1*r01);
IkReal x9345=((1.0)*cj2);
IkReal x9346=(cj3*gconst2);
IkReal x9347=(gconst1*r11);
IkReal x9348=(gconst1*r21);
IkReal x9349=(cj1*sj2);
IkReal x9350=(gconst1*sj3);
IkReal x9351=(gconst2*sj3);
IkReal x9352=(cj1*x9345);
IkReal x9353=((1.0)*x9339);
IkReal x9354=((1.0)*x9338);
IkReal x9355=((1.0)*x9346);
IkReal x9356=(gconst2*x9338);
IkReal x9357=(sj3*x9339);
evalcond[0]=((((-1.0)*r22*x9353))+((x9338*x9342))+(((-1.0)*x9348*x9354)));
evalcond[1]=((((-1.0)*r12*x9353))+((r10*x9356))+(((-1.0)*x9347*x9354)));
evalcond[2]=((1.0)+(((-1.0)*x9344*x9354))+(((-1.0)*r02*x9353))+((r00*x9356)));
evalcond[3]=(((gconst1*x9341))+(((-1.0)*r00*x9346*x9353))+((r01*x9351))+(((-1.0)*cj3*r02*x9354))+((r01*x9339*x9343)));
evalcond[4]=((((-1.0)*r02*sj3*x9354))+(((-1.0)*gconst2*x9341*x9353))+((x9344*x9357))+(((-1.0)*r01*x9355))+(((-1.0)*r00*x9343)));
evalcond[5]=(((r11*x9351))+x9340+(((-1.0)*x9352))+((r11*x9339*x9343))+((r10*x9350))+(((-1.0)*r10*x9346*x9353))+(((-1.0)*cj3*r12*x9354)));
evalcond[6]=(((r21*x9339*x9343))+(((-1.0)*x9349))+(((-1.0)*sj1*x9345))+((r20*x9350))+((r21*x9351))+(((-1.0)*cj3*x9342*x9353))+(((-1.0)*cj3*r22*x9354)));
evalcond[7]=(((cj2*sj1))+x9349+(((-1.0)*r12*sj3*x9354))+((x9347*x9357))+(((-1.0)*r11*x9355))+(((-1.0)*r10*x9343))+(((-1.0)*r10*x9351*x9353)));
evalcond[8]=(x9340+((x9348*x9357))+(((-1.0)*x9352))+(((-1.0)*r20*x9343))+(((-1.0)*r22*sj3*x9354))+(((-1.0)*r21*x9355))+(((-1.0)*sj3*x9342*x9353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9360 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9360.valid){
continue;
}
IkReal x9358=((-1.0)*(x9360.value));
IkReal x9359=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9358;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9358;
IkReal gconst1=((-1.0)*r21*x9359);
IkReal gconst2=(r20*x9359);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9363 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9363.valid){
continue;
}
IkReal x9361=((-1.0)*(x9363.value));
IkReal x9362=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9361;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9361;
IkReal gconst1=((-1.0)*r21*x9362);
IkReal gconst2=(r20*x9362);
CheckValue<IkReal> x9371=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9371.valid){
continue;
}
IkReal x9364=x9371.value;
IkReal x9365=(cj3*x9364);
IkReal x9366=(r11*x9365);
IkReal x9367=(r01*x9365);
IkReal x9368=(r00*x9365);
IkReal x9369=(r10*x9365);
IkReal x9370=(r20*r21*x9365);
j4eval[0]=IKsign((((r10*r20*r21*x9367))+((cj3*r02*r12))+((r10*x9368*(r20*r20)))+((r01*x9366*(r21*r21)))+((r00*r20*r21*x9366))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9374 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9374.valid){
continue;
}
IkReal x9372=((-1.0)*(x9374.value));
IkReal x9373=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9372;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9372;
IkReal gconst1=((-1.0)*r21*x9373);
IkReal gconst2=(r20*x9373);
CheckValue<IkReal> x9382=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9382.valid){
continue;
}
IkReal x9375=x9382.value;
IkReal x9376=(sj3*x9375);
IkReal x9377=(r11*x9376);
IkReal x9378=(r00*x9376);
IkReal x9379=(r01*x9376);
IkReal x9380=(r10*x9376);
IkReal x9381=(r20*r21*x9376);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9377))+((r10*r20*r21*x9379))+((r10*x9378*(r20*r20)))+((r01*x9377*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9385 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9385.valid){
continue;
}
IkReal x9383=((-1.0)*(x9385.value));
IkReal x9384=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9383;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9383;
IkReal gconst1=((-1.0)*r21*x9384);
IkReal gconst2=(r20*x9384);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9388 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9388.valid){
continue;
}
IkReal x9386=((-1.0)*(x9388.value));
IkReal x9387=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9386;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9386;
IkReal gconst1=((-1.0)*r21*x9387);
IkReal gconst2=(r20*x9387);
IkReal x9389=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9393=IKPowWithIntegerCheck(x9389,-1);
if(!x9393.valid){
continue;
}
IkReal x9390=x9393.value;
IkReal x9391=((1.0)*x9390);
IkReal x9392=((((-1.0)*x9391*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9390))+(((-1.0)*x9391*(r01*r01)*(r21*r21))));
j4eval[0]=x9392;
j4eval[1]=IKsign(x9392);
j4eval[2]=r02;
j4eval[3]=x9389;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9396 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9396.valid){
continue;
}
IkReal x9394=((-1.0)*(x9396.value));
IkReal x9395=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9394;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9394;
IkReal gconst1=((-1.0)*r21*x9395);
IkReal gconst2=(r20*x9395);
IkReal x9397=r22*r22;
IkReal x9398=(cj1*cj2*r12);
CheckValue<IkReal> x9403=IKPowWithIntegerCheck(((-1.0)+x9397),-1);
if(!x9403.valid){
continue;
}
IkReal x9399=x9403.value;
IkReal x9400=((1.0)*r12*sj1*sj2);
if((((1.0)+(((-1.0)*x9397)))) < -0.00001)
continue;
IkReal x9401=IKsqrt(((1.0)+(((-1.0)*x9397))));
IkReal x9402=(r22*x9399*x9401);
j4eval[0]=((IKabs(((((-1.0)*x9400*x9402))+((x9398*x9402)))))+(IKabs(((((-1.0)*x9400))+x9398))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9404=(sj1*sj2);
IkReal x9405=(gconst1*r11);
IkReal x9406=(cj1*cj2);
IkReal x9407=(gconst2*r10);
CheckValue<IkReal> x9408 = IKatan2WithCheck(IkReal((((r12*x9406))+(((-1.0)*r12*x9404)))),IkReal((((x9404*x9405))+(((-1.0)*x9405*x9406))+((x9406*x9407))+(((-1.0)*x9404*x9407)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9408.valid){
continue;
}
CheckValue<IkReal> x9409=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9405*x9407))+(x9405*x9405)+(x9407*x9407))),-1);
if(!x9409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9408.value)+(((1.5707963267949)*(x9409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9410=IKsin(j4);
IkReal x9411=IKcos(j4);
IkReal x9412=(gconst1*r01);
IkReal x9413=(gconst1*r21);
IkReal x9414=((1.0)*sj1);
IkReal x9415=(gconst1*r11);
IkReal x9416=((1.0)*x9411);
IkReal x9417=((1.0)*x9410);
IkReal x9418=(gconst2*x9410);
evalcond[0]=(((r20*x9418))+(((-1.0)*r22*x9416))+(((-1.0)*x9413*x9417)));
evalcond[1]=((((-1.0)*r12*x9416))+((r10*x9418))+(((-1.0)*x9415*x9417)));
evalcond[2]=((((-1.0)*r02*x9417))+(((-1.0)*gconst2*r00*x9416))+((x9411*x9412)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9416))+((r00*x9418))+(((-1.0)*x9412*x9417)));
evalcond[4]=((((-1.0)*r12*x9417))+(((-1.0)*sj2*x9414))+((cj1*cj2))+(((-1.0)*gconst2*r10*x9416))+((x9411*x9415)));
evalcond[5]=((((-1.0)*cj2*x9414))+(((-1.0)*gconst2*r20*x9416))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x9417))+((x9411*x9413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9419=(gconst1*r01);
IkReal x9420=(gconst2*r00);
CheckValue<IkReal> x9421 = IKatan2WithCheck(IkReal(((((-1.0)*x9420))+x9419)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9421.valid){
continue;
}
CheckValue<IkReal> x9422=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9419*x9419)))+(((-1.0)*(x9420*x9420)))+(((2.0)*x9419*x9420)))),-1);
if(!x9422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9421.value)+(((1.5707963267949)*(x9422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9423=IKsin(j4);
IkReal x9424=IKcos(j4);
IkReal x9425=(gconst1*r01);
IkReal x9426=(gconst1*r21);
IkReal x9427=((1.0)*sj1);
IkReal x9428=(gconst1*r11);
IkReal x9429=((1.0)*x9424);
IkReal x9430=((1.0)*x9423);
IkReal x9431=(gconst2*x9423);
evalcond[0]=((((-1.0)*x9426*x9430))+((r20*x9431))+(((-1.0)*r22*x9429)));
evalcond[1]=((((-1.0)*x9428*x9430))+(((-1.0)*r12*x9429))+((r10*x9431)));
evalcond[2]=(((x9424*x9425))+(((-1.0)*r02*x9430))+(((-1.0)*gconst2*r00*x9429)));
evalcond[3]=((-1.0)+(((-1.0)*x9425*x9430))+(((-1.0)*r02*x9429))+((r00*x9431)));
evalcond[4]=((((-1.0)*sj2*x9427))+(((-1.0)*gconst2*r10*x9429))+((x9424*x9428))+(((-1.0)*r12*x9430))+((cj1*cj2)));
evalcond[5]=(((x9424*x9426))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9427))+(((-1.0)*gconst2*r20*x9429))+(((-1.0)*r22*x9430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9432 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9432.valid){
continue;
}
CheckValue<IkReal> x9433=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9432.value)+(((1.5707963267949)*(x9433.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9434=IKsin(j4);
IkReal x9435=IKcos(j4);
IkReal x9436=(gconst1*r01);
IkReal x9437=(gconst1*r21);
IkReal x9438=((1.0)*sj1);
IkReal x9439=(gconst1*r11);
IkReal x9440=((1.0)*x9435);
IkReal x9441=((1.0)*x9434);
IkReal x9442=(gconst2*x9434);
evalcond[0]=((((-1.0)*r22*x9440))+((r20*x9442))+(((-1.0)*x9437*x9441)));
evalcond[1]=(((r10*x9442))+(((-1.0)*x9439*x9441))+(((-1.0)*r12*x9440)));
evalcond[2]=((((-1.0)*gconst2*r00*x9440))+((x9435*x9436))+(((-1.0)*r02*x9441)));
evalcond[3]=((-1.0)+(((-1.0)*x9436*x9441))+((r00*x9442))+(((-1.0)*r02*x9440)));
evalcond[4]=((((-1.0)*sj2*x9438))+((cj1*cj2))+(((-1.0)*gconst2*r10*x9440))+(((-1.0)*r12*x9441))+((x9435*x9439)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9438))+(((-1.0)*gconst2*r20*x9440))+(((-1.0)*r22*x9441))+((x9435*x9437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9445 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9445.valid){
continue;
}
IkReal x9443=((-1.0)*(x9445.value));
IkReal x9444=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9443;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9443;
IkReal gconst1=((-1.0)*r21*x9444);
IkReal gconst2=(r20*x9444);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9448 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9448.valid){
continue;
}
IkReal x9446=((-1.0)*(x9448.value));
IkReal x9447=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9446;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9446;
IkReal gconst1=((-1.0)*r21*x9447);
IkReal gconst2=(r20*x9447);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9451 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9451.valid){
continue;
}
IkReal x9449=((-1.0)*(x9451.value));
IkReal x9450=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9449;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9449;
IkReal gconst1=((-1.0)*r21*x9450);
IkReal gconst2=(r20*x9450);
IkReal x9452=r22*r22;
IkReal x9453=(cj1*r02*sj2);
IkReal x9454=(cj2*r02*sj1);
CheckValue<IkReal> x9458=IKPowWithIntegerCheck(((-1.0)+x9452),-1);
if(!x9458.valid){
continue;
}
IkReal x9455=x9458.value;
if((((1.0)+(((-1.0)*x9452)))) < -0.00001)
continue;
IkReal x9456=IKsqrt(((1.0)+(((-1.0)*x9452))));
IkReal x9457=((1.0)*r22*x9455*x9456);
j4eval[0]=((IKabs(((((-1.0)*x9453*x9457))+(((-1.0)*x9454*x9457)))))+(IKabs((x9454+x9453))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9459=(cj2*sj1);
IkReal x9460=(cj1*sj2);
IkReal x9461=((1.0)*gconst2);
IkReal x9462=(gconst1*r01);
CheckValue<IkReal> x9463 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9460*x9461))+((x9459*x9462))+((x9460*x9462))+(((-1.0)*r00*x9459*x9461)))),IkReal((((r02*x9460))+((r02*x9459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9463.valid){
continue;
}
CheckValue<IkReal> x9464=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9461)))),-1);
if(!x9464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9463.value)+(((1.5707963267949)*(x9464.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9465=IKcos(j4);
IkReal x9466=IKsin(j4);
IkReal x9467=(gconst1*r01);
IkReal x9468=((1.0)*sj1);
IkReal x9469=(gconst1*r21);
IkReal x9470=(gconst1*r11);
IkReal x9471=((1.0)*x9465);
IkReal x9472=(gconst2*x9465);
IkReal x9473=((1.0)*x9466);
IkReal x9474=(gconst2*x9466);
evalcond[0]=(((r00*x9472))+(((-1.0)*x9467*x9471))+((r02*x9466)));
evalcond[1]=((((-1.0)*x9469*x9473))+(((-1.0)*r22*x9471))+((r20*x9474)));
evalcond[2]=((((-1.0)*x9470*x9473))+((r10*x9474))+(((-1.0)*r12*x9471)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9471))+((r00*x9474))+(((-1.0)*x9467*x9473)));
evalcond[4]=((((-1.0)*x9470*x9471))+((r10*x9472))+(((-1.0)*sj2*x9468))+((cj1*cj2))+((r12*x9466)));
evalcond[5]=((((-1.0)*cj2*x9468))+((r22*x9466))+(((-1.0)*cj1*sj2))+(((-1.0)*x9469*x9471))+((r20*x9472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9475=(gconst1*r01);
IkReal x9476=(gconst2*r00);
CheckValue<IkReal> x9477 = IKatan2WithCheck(IkReal(((((-1.0)*x9475))+x9476)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9477.valid){
continue;
}
CheckValue<IkReal> x9478=IKPowWithIntegerCheck(IKsign(((x9476*x9476)+(x9475*x9475)+(((-2.0)*x9475*x9476))+(r02*r02))),-1);
if(!x9478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9477.value)+(((1.5707963267949)*(x9478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9479=IKcos(j4);
IkReal x9480=IKsin(j4);
IkReal x9481=(gconst1*r01);
IkReal x9482=((1.0)*sj1);
IkReal x9483=(gconst1*r21);
IkReal x9484=(gconst1*r11);
IkReal x9485=((1.0)*x9479);
IkReal x9486=(gconst2*x9479);
IkReal x9487=((1.0)*x9480);
IkReal x9488=(gconst2*x9480);
evalcond[0]=(((r00*x9486))+(((-1.0)*x9481*x9485))+((r02*x9480)));
evalcond[1]=(((r20*x9488))+(((-1.0)*r22*x9485))+(((-1.0)*x9483*x9487)));
evalcond[2]=((((-1.0)*x9484*x9487))+((r10*x9488))+(((-1.0)*r12*x9485)));
evalcond[3]=((-1.0)+((r00*x9488))+(((-1.0)*r02*x9485))+(((-1.0)*x9481*x9487)));
evalcond[4]=((((-1.0)*x9484*x9485))+(((-1.0)*sj2*x9482))+((r12*x9480))+((cj1*cj2))+((r10*x9486)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r20*x9486))+(((-1.0)*cj2*x9482))+(((-1.0)*x9483*x9485))+((r22*x9480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9489 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9489.valid){
continue;
}
CheckValue<IkReal> x9490=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9489.value)+(((1.5707963267949)*(x9490.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9491=IKcos(j4);
IkReal x9492=IKsin(j4);
IkReal x9493=(gconst1*r01);
IkReal x9494=((1.0)*sj1);
IkReal x9495=(gconst1*r21);
IkReal x9496=(gconst1*r11);
IkReal x9497=((1.0)*x9491);
IkReal x9498=(gconst2*x9491);
IkReal x9499=((1.0)*x9492);
IkReal x9500=(gconst2*x9492);
evalcond[0]=(((r02*x9492))+(((-1.0)*x9493*x9497))+((r00*x9498)));
evalcond[1]=((((-1.0)*r22*x9497))+((r20*x9500))+(((-1.0)*x9495*x9499)));
evalcond[2]=(((r10*x9500))+(((-1.0)*x9496*x9499))+(((-1.0)*r12*x9497)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9497))+(((-1.0)*x9493*x9499))+((r00*x9500)));
evalcond[4]=(((r12*x9492))+((r10*x9498))+(((-1.0)*x9496*x9497))+(((-1.0)*sj2*x9494))+((cj1*cj2)));
evalcond[5]=(((r22*x9492))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9494))+(((-1.0)*x9495*x9497))+((r20*x9498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9501=((-1.0)*py);
CheckValue<IkReal> x9503 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9503.valid){
continue;
}
IkReal x9502=((-1.0)*(x9503.value));
sj5=gconst1;
cj5=gconst2;
j5=x9502;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9501);
rxp0_2=(py*r00);
rxp1_0=(r21*x9501);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9502;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9504=((1.0)*sj3);
IkReal x9505=(r01*r21);
IkReal x9506=(r00*r20);
j4eval[0]=(x9506+x9505);
j4eval[1]=((((-1.0)*x9504*x9505))+(((-1.0)*x9504*x9506)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9507=((-1.0)*py);
CheckValue<IkReal> x9509 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9509.valid){
continue;
}
IkReal x9508=((-1.0)*(x9509.value));
sj5=gconst1;
cj5=gconst2;
j5=x9508;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9507);
rxp0_2=(py*r00);
rxp1_0=(r21*x9507);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9508;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9510=(r00*r20);
IkReal x9511=((1.0)*cj3);
IkReal x9512=(r01*r21);
j4eval[0]=(x9510+x9512);
j4eval[1]=((((-1.0)*x9511*x9512))+(((-1.0)*x9510*x9511)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9513=((-1.0)*py);
CheckValue<IkReal> x9515 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9515.valid){
continue;
}
IkReal x9514=((-1.0)*(x9515.value));
sj5=gconst1;
cj5=gconst2;
j5=x9514;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9513);
rxp0_2=(py*r00);
rxp1_0=(r21*x9513);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9514;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9516=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x9516))+(((-1.0)*r01*r21*x9516)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9517=((1.0)*gconst2);
CheckValue<IkReal> x9518=IKPowWithIntegerCheck(cj3,-1);
if(!x9518.valid){
continue;
}
CheckValue<IkReal> x9519=IKPowWithIntegerCheck(r12,-1);
if(!x9519.valid){
continue;
}
CheckValue<IkReal> x9520=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x9517))+((cj3*gconst1*r01))),-1);
if(!x9520.valid){
continue;
}
if( IKabs(((x9518.value)*(x9519.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9520.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9517)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9518.value)*(x9519.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x9520.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9517))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9518.value)*(x9519.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x9520.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9517))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9521=IKsin(j4);
IkReal x9522=IKcos(j4);
IkReal x9523=((1.0)*sj3);
IkReal x9524=(gconst1*sj3);
IkReal x9525=(sj1*sj2);
IkReal x9526=((1.0)*cj3);
IkReal x9527=((1.0)*cj2);
IkReal x9528=(gconst2*r01);
IkReal x9529=(gconst2*r21);
IkReal x9530=((1.0)*cj1*sj2);
IkReal x9531=(sj1*x9527);
IkReal x9532=(r12*x9521);
IkReal x9533=(gconst2*x9522);
IkReal x9534=(gconst2*x9521);
IkReal x9535=((1.0)*gconst1*x9521);
IkReal x9536=(cj3*gconst1*x9522);
IkReal x9537=(x9531+x9530);
evalcond[0]=((-1.0)*r12*x9522);
evalcond[1]=(((r20*x9534))+(((-1.0)*r21*x9535)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x9535))+((r00*x9534)));
evalcond[3]=((((-1.0)*x9525))+(((-1.0)*x9526*x9532))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x9523*x9532))+(((-1.0)*x9537)));
evalcond[5]=((((-1.0)*r00*x9526*x9533))+((r00*x9524))+((r01*x9536))+((sj3*x9528)));
evalcond[6]=((((-1.0)*x9526*x9528))+(((-1.0)*r00*x9523*x9533))+(((-1.0)*gconst1*r00*x9526))+((r01*x9522*x9524)));
evalcond[7]=(((r20*x9524))+(((-1.0)*r20*x9526*x9533))+(((-1.0)*x9537))+((sj3*x9529))+((r21*x9536)));
evalcond[8]=((((-1.0)*gconst1*r20*x9526))+(((-1.0)*x9526*x9529))+(((-1.0)*r20*x9523*x9533))+x9525+(((-1.0)*cj1*x9527))+((r21*x9522*x9524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9538=((1.0)*gconst2);
IkReal x9539=(gconst1*r01);
CheckValue<IkReal> x9540=IKPowWithIntegerCheck(((((-1.0)*x9539))+((gconst2*r00))),-1);
if(!x9540.valid){
continue;
}
CheckValue<IkReal> x9541=IKPowWithIntegerCheck((((cj3*x9539))+(((-1.0)*cj3*r00*x9538))),-1);
if(!x9541.valid){
continue;
}
if( IKabs(x9540.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9541.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9538)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9540.value)+IKsqr(((x9541.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9538))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9540.value, ((x9541.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9538))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9542=IKsin(j4);
IkReal x9543=IKcos(j4);
IkReal x9544=((1.0)*sj3);
IkReal x9545=(gconst1*sj3);
IkReal x9546=(sj1*sj2);
IkReal x9547=((1.0)*cj3);
IkReal x9548=((1.0)*cj2);
IkReal x9549=(gconst2*r01);
IkReal x9550=(gconst2*r21);
IkReal x9551=((1.0)*cj1*sj2);
IkReal x9552=(sj1*x9548);
IkReal x9553=(r12*x9542);
IkReal x9554=(gconst2*x9543);
IkReal x9555=(gconst2*x9542);
IkReal x9556=((1.0)*gconst1*x9542);
IkReal x9557=(cj3*gconst1*x9543);
IkReal x9558=(x9551+x9552);
evalcond[0]=((-1.0)*r12*x9543);
evalcond[1]=((((-1.0)*r21*x9556))+((r20*x9555)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x9556))+((r00*x9555)));
evalcond[3]=((((-1.0)*x9547*x9553))+((cj1*cj2))+(((-1.0)*x9546)));
evalcond[4]=((((-1.0)*x9544*x9553))+(((-1.0)*x9558)));
evalcond[5]=((((-1.0)*r00*x9547*x9554))+((r00*x9545))+((r01*x9557))+((sj3*x9549)));
evalcond[6]=((((-1.0)*x9547*x9549))+(((-1.0)*r00*x9544*x9554))+((r01*x9543*x9545))+(((-1.0)*gconst1*r00*x9547)));
evalcond[7]=(((r20*x9545))+(((-1.0)*r20*x9547*x9554))+((sj3*x9550))+((r21*x9557))+(((-1.0)*x9558)));
evalcond[8]=((((-1.0)*r20*x9544*x9554))+(((-1.0)*x9547*x9550))+x9546+(((-1.0)*gconst1*r20*x9547))+(((-1.0)*cj1*x9548))+((r21*x9543*x9545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9559=(gconst2*r00);
IkReal x9560=(gconst1*r01);
CheckValue<IkReal> x9561=IKPowWithIntegerCheck(((((-1.0)*x9560))+x9559),-1);
if(!x9561.valid){
continue;
}
CheckValue<IkReal> x9562=IKPowWithIntegerCheck((((sj3*x9560))+(((-1.0)*sj3*x9559))),-1);
if(!x9562.valid){
continue;
}
if( IKabs(x9561.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9562.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9561.value)+IKsqr(((x9562.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9561.value, ((x9562.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9563=IKsin(j4);
IkReal x9564=IKcos(j4);
IkReal x9565=((1.0)*sj3);
IkReal x9566=(gconst1*sj3);
IkReal x9567=(sj1*sj2);
IkReal x9568=((1.0)*cj3);
IkReal x9569=((1.0)*cj2);
IkReal x9570=(gconst2*r01);
IkReal x9571=(gconst2*r21);
IkReal x9572=((1.0)*cj1*sj2);
IkReal x9573=(sj1*x9569);
IkReal x9574=(r12*x9563);
IkReal x9575=(gconst2*x9564);
IkReal x9576=(gconst2*x9563);
IkReal x9577=((1.0)*gconst1*x9563);
IkReal x9578=(cj3*gconst1*x9564);
IkReal x9579=(x9573+x9572);
evalcond[0]=((-1.0)*r12*x9564);
evalcond[1]=((((-1.0)*r21*x9577))+((r20*x9576)));
evalcond[2]=((-1.0)+((r00*x9576))+(((-1.0)*r01*x9577)));
evalcond[3]=((((-1.0)*x9567))+(((-1.0)*x9568*x9574))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x9565*x9574))+(((-1.0)*x9579)));
evalcond[5]=(((sj3*x9570))+((r00*x9566))+(((-1.0)*r00*x9568*x9575))+((r01*x9578)));
evalcond[6]=(((r01*x9564*x9566))+(((-1.0)*r00*x9565*x9575))+(((-1.0)*gconst1*r00*x9568))+(((-1.0)*x9568*x9570)));
evalcond[7]=(((sj3*x9571))+((r21*x9578))+(((-1.0)*x9579))+(((-1.0)*r20*x9568*x9575))+((r20*x9566)));
evalcond[8]=((((-1.0)*r20*x9565*x9575))+(((-1.0)*cj1*x9569))+(((-1.0)*gconst1*r20*x9568))+x9567+(((-1.0)*x9568*x9571))+((r21*x9564*x9566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9580=gconst2*gconst2;
IkReal x9581=gconst1*gconst1;
IkReal x9582=(r00*r11);
IkReal x9583=(gconst1*gconst2);
IkReal x9584=((1.0)*sj3);
IkReal x9585=(r01*r11);
IkReal x9586=((1.0)*cj3*r10);
IkReal x9587=((1.0)*cj3*r12);
CheckValue<IkReal> x9588=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x9582*x9583*x9584))+((sj3*x9581*x9585))+(((-1.0)*r01*r10*x9583*x9584))+((r00*r10*sj3*x9580)))),-1);
if(!x9588.valid){
continue;
}
CheckValue<IkReal> x9589 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r01*x9587))+(((-1.0)*gconst1*r00*x9587)))),IkReal(((((-1.0)*r00*x9583*x9586))+((cj3*x9583*x9585))+(((-1.0)*r01*x9580*x9586))+((cj3*x9581*x9582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9588.value)))+(x9589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9590=IKsin(j4);
IkReal x9591=IKcos(j4);
IkReal x9592=(r00*sj3);
IkReal x9593=(gconst2*r20);
IkReal x9594=((1.0)*cj3);
IkReal x9595=(gconst2*r01);
IkReal x9596=(gconst1*r10);
IkReal x9597=(gconst1*r01);
IkReal x9598=((1.0)*sj1);
IkReal x9599=((1.0)*cj1);
IkReal x9600=(cj3*gconst2);
IkReal x9601=(gconst1*r11);
IkReal x9602=(gconst1*r21);
IkReal x9603=(gconst1*r20);
IkReal x9604=(gconst2*r11);
IkReal x9605=(gconst2*r21);
IkReal x9606=(sj2*x9599);
IkReal x9607=(cj2*x9598);
IkReal x9608=((1.0)*x9591);
IkReal x9609=((1.0)*x9590);
IkReal x9610=(gconst2*x9590);
IkReal x9611=(sj3*x9591);
IkReal x9612=(cj3*x9591);
IkReal x9613=(x9607+x9606);
evalcond[0]=((((-1.0)*r22*x9608))+(((-1.0)*x9602*x9609))+((x9590*x9593)));
evalcond[1]=(((r10*x9610))+(((-1.0)*r12*x9608))+(((-1.0)*x9601*x9609)));
evalcond[2]=((-1.0)+(((-1.0)*x9597*x9609))+((r00*x9610))+(((-1.0)*r02*x9608)));
evalcond[3]=(((x9597*x9612))+((gconst1*x9592))+(((-1.0)*gconst2*r00*x9591*x9594))+((sj3*x9595))+(((-1.0)*r02*x9590*x9594)));
evalcond[4]=((((-1.0)*r02*sj3*x9609))+((x9597*x9611))+(((-1.0)*x9594*x9595))+(((-1.0)*gconst2*x9592*x9608))+(((-1.0)*gconst1*r00*x9594)));
evalcond[5]=((((-1.0)*sj2*x9598))+((sj3*x9604))+(((-1.0)*r12*x9590*x9594))+((sj3*x9596))+(((-1.0)*gconst2*r10*x9591*x9594))+((x9601*x9612))+((cj1*cj2)));
evalcond[6]=(((sj3*x9603))+((sj3*x9605))+(((-1.0)*x9591*x9593*x9594))+((x9602*x9612))+(((-1.0)*r22*x9590*x9594))+(((-1.0)*x9613)));
evalcond[7]=((((-1.0)*sj3*x9593*x9608))+((x9602*x9611))+(((-1.0)*cj2*x9599))+((sj1*sj2))+(((-1.0)*r22*sj3*x9609))+(((-1.0)*x9594*x9605))+(((-1.0)*x9594*x9603)));
evalcond[8]=((((-1.0)*x9594*x9596))+(((-1.0)*r12*sj3*x9609))+((x9601*x9611))+(((-1.0)*gconst2*r10*sj3*x9608))+(((-1.0)*x9613))+(((-1.0)*x9594*x9604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9614=gconst1*gconst1;
IkReal x9615=gconst2*gconst2;
IkReal x9616=(r00*sj3);
IkReal x9617=((1.0)*r11);
IkReal x9618=(r01*sj3);
IkReal x9619=(gconst1*gconst2);
IkReal x9620=(cj3*r01);
IkReal x9621=(cj3*r00);
IkReal x9622=(r10*x9615);
CheckValue<IkReal> x9623=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((x9621*x9622))+(((-1.0)*x9617*x9619*x9621))+(((-1.0)*r10*x9619*x9620))+((r11*x9614*x9620)))),-1);
if(!x9623.valid){
continue;
}
CheckValue<IkReal> x9624 = IKatan2WithCheck(IkReal((((gconst1*r12*x9616))+((gconst2*r12*x9618)))),IkReal((((r10*x9616*x9619))+(((-1.0)*x9617*x9618*x9619))+((x9618*x9622))+(((-1.0)*x9614*x9616*x9617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9623.value)))+(x9624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9625=IKsin(j4);
IkReal x9626=IKcos(j4);
IkReal x9627=(r00*sj3);
IkReal x9628=(gconst2*r20);
IkReal x9629=((1.0)*cj3);
IkReal x9630=(gconst2*r01);
IkReal x9631=(gconst1*r10);
IkReal x9632=(gconst1*r01);
IkReal x9633=((1.0)*sj1);
IkReal x9634=((1.0)*cj1);
IkReal x9635=(cj3*gconst2);
IkReal x9636=(gconst1*r11);
IkReal x9637=(gconst1*r21);
IkReal x9638=(gconst1*r20);
IkReal x9639=(gconst2*r11);
IkReal x9640=(gconst2*r21);
IkReal x9641=(sj2*x9634);
IkReal x9642=(cj2*x9633);
IkReal x9643=((1.0)*x9626);
IkReal x9644=((1.0)*x9625);
IkReal x9645=(gconst2*x9625);
IkReal x9646=(sj3*x9626);
IkReal x9647=(cj3*x9626);
IkReal x9648=(x9641+x9642);
evalcond[0]=((((-1.0)*x9637*x9644))+((x9625*x9628))+(((-1.0)*r22*x9643)));
evalcond[1]=((((-1.0)*r12*x9643))+((r10*x9645))+(((-1.0)*x9636*x9644)));
evalcond[2]=((-1.0)+(((-1.0)*x9632*x9644))+((r00*x9645))+(((-1.0)*r02*x9643)));
evalcond[3]=(((x9632*x9647))+((gconst1*x9627))+((sj3*x9630))+(((-1.0)*gconst2*r00*x9626*x9629))+(((-1.0)*r02*x9625*x9629)));
evalcond[4]=((((-1.0)*gconst2*x9627*x9643))+((x9632*x9646))+(((-1.0)*x9629*x9630))+(((-1.0)*gconst1*r00*x9629))+(((-1.0)*r02*sj3*x9644)));
evalcond[5]=(((x9636*x9647))+(((-1.0)*gconst2*r10*x9626*x9629))+((cj1*cj2))+(((-1.0)*sj2*x9633))+(((-1.0)*r12*x9625*x9629))+((sj3*x9631))+((sj3*x9639)));
evalcond[6]=(((x9637*x9647))+(((-1.0)*r22*x9625*x9629))+(((-1.0)*x9648))+(((-1.0)*x9626*x9628*x9629))+((sj3*x9640))+((sj3*x9638)));
evalcond[7]=((((-1.0)*r22*sj3*x9644))+(((-1.0)*x9629*x9638))+((x9637*x9646))+(((-1.0)*sj3*x9628*x9643))+((sj1*sj2))+(((-1.0)*x9629*x9640))+(((-1.0)*cj2*x9634)));
evalcond[8]=((((-1.0)*x9629*x9631))+(((-1.0)*x9629*x9639))+(((-1.0)*x9648))+(((-1.0)*gconst2*r10*sj3*x9643))+((x9636*x9646))+(((-1.0)*r12*sj3*x9644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9649 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9649.valid){
continue;
}
CheckValue<IkReal> x9650=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9649.value)+(((1.5707963267949)*(x9650.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9651=IKsin(j4);
IkReal x9652=IKcos(j4);
IkReal x9653=(r00*sj3);
IkReal x9654=(gconst2*r20);
IkReal x9655=((1.0)*cj3);
IkReal x9656=(gconst2*r01);
IkReal x9657=(gconst1*r10);
IkReal x9658=(gconst1*r01);
IkReal x9659=((1.0)*sj1);
IkReal x9660=((1.0)*cj1);
IkReal x9661=(cj3*gconst2);
IkReal x9662=(gconst1*r11);
IkReal x9663=(gconst1*r21);
IkReal x9664=(gconst1*r20);
IkReal x9665=(gconst2*r11);
IkReal x9666=(gconst2*r21);
IkReal x9667=(sj2*x9660);
IkReal x9668=(cj2*x9659);
IkReal x9669=((1.0)*x9652);
IkReal x9670=((1.0)*x9651);
IkReal x9671=(gconst2*x9651);
IkReal x9672=(sj3*x9652);
IkReal x9673=(cj3*x9652);
IkReal x9674=(x9667+x9668);
evalcond[0]=((((-1.0)*x9663*x9670))+((x9651*x9654))+(((-1.0)*r22*x9669)));
evalcond[1]=((((-1.0)*x9662*x9670))+((r10*x9671))+(((-1.0)*r12*x9669)));
evalcond[2]=((-1.0)+((r00*x9671))+(((-1.0)*x9658*x9670))+(((-1.0)*r02*x9669)));
evalcond[3]=(((gconst1*x9653))+((sj3*x9656))+(((-1.0)*gconst2*r00*x9652*x9655))+(((-1.0)*r02*x9651*x9655))+((x9658*x9673)));
evalcond[4]=((((-1.0)*x9655*x9656))+(((-1.0)*r02*sj3*x9670))+(((-1.0)*gconst2*x9653*x9669))+(((-1.0)*gconst1*r00*x9655))+((x9658*x9672)));
evalcond[5]=((((-1.0)*sj2*x9659))+(((-1.0)*gconst2*r10*x9652*x9655))+((sj3*x9665))+((sj3*x9657))+((x9662*x9673))+((cj1*cj2))+(((-1.0)*r12*x9651*x9655)));
evalcond[6]=(((sj3*x9666))+((sj3*x9664))+(((-1.0)*x9674))+(((-1.0)*r22*x9651*x9655))+((x9663*x9673))+(((-1.0)*x9652*x9654*x9655)));
evalcond[7]=((((-1.0)*x9655*x9666))+(((-1.0)*x9655*x9664))+(((-1.0)*cj2*x9660))+((x9663*x9672))+((sj1*sj2))+(((-1.0)*r22*sj3*x9670))+(((-1.0)*sj3*x9654*x9669)));
evalcond[8]=((((-1.0)*x9655*x9657))+(((-1.0)*x9655*x9665))+(((-1.0)*x9674))+((x9662*x9672))+(((-1.0)*r12*sj3*x9670))+(((-1.0)*gconst2*r10*sj3*x9669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9677 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9677.valid){
continue;
}
IkReal x9675=((-1.0)*(x9677.value));
IkReal x9676=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9675;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9675;
IkReal gconst1=((-1.0)*r21*x9676);
IkReal gconst2=(r20*x9676);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9680 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9680.valid){
continue;
}
IkReal x9678=((-1.0)*(x9680.value));
IkReal x9679=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9678;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9678;
IkReal gconst1=((-1.0)*r21*x9679);
IkReal gconst2=(r20*x9679);
CheckValue<IkReal> x9688=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9688.valid){
continue;
}
IkReal x9681=x9688.value;
IkReal x9682=(cj3*x9681);
IkReal x9683=(r11*x9682);
IkReal x9684=(r01*x9682);
IkReal x9685=(r00*x9682);
IkReal x9686=(r10*x9682);
IkReal x9687=(r20*r21*x9682);
j4eval[0]=IKsign((((cj3*r02*r12))+((r00*r20*r21*x9683))+((r01*x9683*(r21*r21)))+((r10*x9685*(r20*r20)))+((r10*r20*r21*x9684))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9691 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9691.valid){
continue;
}
IkReal x9689=((-1.0)*(x9691.value));
IkReal x9690=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9689;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9689;
IkReal gconst1=((-1.0)*r21*x9690);
IkReal gconst2=(r20*x9690);
CheckValue<IkReal> x9699=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9699.valid){
continue;
}
IkReal x9692=x9699.value;
IkReal x9693=(sj3*x9692);
IkReal x9694=(r11*x9693);
IkReal x9695=(r00*x9693);
IkReal x9696=(r01*x9693);
IkReal x9697=(r10*x9693);
IkReal x9698=(r20*r21*x9693);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9694*(r21*r21)))+((r00*r20*r21*x9694))+((r10*x9695*(r20*r20)))+((r10*r20*r21*x9696))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9702 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9702.valid){
continue;
}
IkReal x9700=((-1.0)*(x9702.value));
IkReal x9701=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9700;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9700;
IkReal gconst1=((-1.0)*r21*x9701);
IkReal gconst2=(r20*x9701);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9705 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9705.valid){
continue;
}
IkReal x9703=((-1.0)*(x9705.value));
IkReal x9704=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9703;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9703;
IkReal gconst1=((-1.0)*r21*x9704);
IkReal gconst2=(r20*x9704);
IkReal x9706=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9710=IKPowWithIntegerCheck(x9706,-1);
if(!x9710.valid){
continue;
}
IkReal x9707=x9710.value;
IkReal x9708=((1.0)*x9707);
IkReal x9709=((((-1.0)*x9708*(r11*r11)*(r21*r21)))+(((-1.0)*x9708*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9707)));
j4eval[0]=x9709;
j4eval[1]=r12;
j4eval[2]=x9706;
j4eval[3]=IKsign(x9709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9713 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9713.valid){
continue;
}
IkReal x9711=((-1.0)*(x9713.value));
IkReal x9712=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9711;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9711;
IkReal gconst1=((-1.0)*r21*x9712);
IkReal gconst2=(r20*x9712);
IkReal x9714=r22*r22;
IkReal x9715=(r02*sj1*sj2);
CheckValue<IkReal> x9720=IKPowWithIntegerCheck(((-1.0)+x9714),-1);
if(!x9720.valid){
continue;
}
IkReal x9716=x9720.value;
IkReal x9717=((1.0)*cj1*cj2*r02);
if((((1.0)+(((-1.0)*x9714)))) < -0.00001)
continue;
IkReal x9718=IKsqrt(((1.0)+(((-1.0)*x9714))));
IkReal x9719=(r22*x9716*x9718);
j4eval[0]=((IKabs((x9715+(((-1.0)*x9717)))))+(IKabs(((((-1.0)*x9717*x9719))+((x9715*x9719))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9721=(sj1*sj2);
IkReal x9722=(gconst1*r01);
IkReal x9723=(gconst2*r00);
IkReal x9724=((1.0)*cj1*cj2);
CheckValue<IkReal> x9725 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x9724))+((r02*x9721)))),IkReal(((((-1.0)*x9721*x9722))+((cj1*cj2*x9722))+(((-1.0)*x9723*x9724))+((x9721*x9723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9725.valid){
continue;
}
CheckValue<IkReal> x9726=IKPowWithIntegerCheck(IKsign(((x9722*x9722)+(x9723*x9723)+(r02*r02)+(((-2.0)*x9722*x9723)))),-1);
if(!x9726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9725.value)+(((1.5707963267949)*(x9726.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9727=IKsin(j4);
IkReal x9728=IKcos(j4);
IkReal x9729=(gconst1*r01);
IkReal x9730=(gconst1*r21);
IkReal x9731=((1.0)*cj2);
IkReal x9732=(gconst1*r11);
IkReal x9733=((1.0)*x9728);
IkReal x9734=((1.0)*x9727);
IkReal x9735=(gconst2*x9727);
evalcond[0]=((((-1.0)*x9730*x9734))+((r20*x9735))+(((-1.0)*r22*x9733)));
evalcond[1]=((((-1.0)*r02*x9733))+(((-1.0)*x9729*x9734))+((r00*x9735)));
evalcond[2]=(((x9728*x9732))+(((-1.0)*r12*x9734))+(((-1.0)*gconst2*r10*x9733)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9733))+(((-1.0)*x9732*x9734))+((r10*x9735)));
evalcond[4]=((((-1.0)*r02*x9734))+((x9728*x9729))+(((-1.0)*cj1*x9731))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9733)));
evalcond[5]=(((x9728*x9730))+(((-1.0)*sj1*x9731))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x9734))+(((-1.0)*gconst2*r20*x9733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9736=(gconst1*r11);
IkReal x9737=(gconst2*r10);
CheckValue<IkReal> x9738 = IKatan2WithCheck(IkReal((x9736+(((-1.0)*x9737)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9738.valid){
continue;
}
CheckValue<IkReal> x9739=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9736*x9736)))+(((2.0)*x9736*x9737))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9737*x9737))))),-1);
if(!x9739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9738.value)+(((1.5707963267949)*(x9739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9740=IKsin(j4);
IkReal x9741=IKcos(j4);
IkReal x9742=(gconst1*r01);
IkReal x9743=(gconst1*r21);
IkReal x9744=((1.0)*cj2);
IkReal x9745=(gconst1*r11);
IkReal x9746=((1.0)*x9741);
IkReal x9747=((1.0)*x9740);
IkReal x9748=(gconst2*x9740);
evalcond[0]=(((r20*x9748))+(((-1.0)*x9743*x9747))+(((-1.0)*r22*x9746)));
evalcond[1]=((((-1.0)*x9742*x9747))+(((-1.0)*r02*x9746))+((r00*x9748)));
evalcond[2]=(((x9741*x9745))+(((-1.0)*gconst2*r10*x9746))+(((-1.0)*r12*x9747)));
evalcond[3]=((-1.0)+((r10*x9748))+(((-1.0)*x9745*x9747))+(((-1.0)*r12*x9746)));
evalcond[4]=((((-1.0)*gconst2*r00*x9746))+(((-1.0)*r02*x9747))+((sj1*sj2))+(((-1.0)*cj1*x9744))+((x9741*x9742)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9744))+(((-1.0)*gconst2*r20*x9746))+((x9741*x9743))+(((-1.0)*r22*x9747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9749=((1.0)*gconst1);
CheckValue<IkReal> x9750 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x9749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9750.valid){
continue;
}
CheckValue<IkReal> x9751=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9749)))),-1);
if(!x9751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9750.value)+(((1.5707963267949)*(x9751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9752=IKsin(j4);
IkReal x9753=IKcos(j4);
IkReal x9754=(gconst1*r01);
IkReal x9755=(gconst1*r21);
IkReal x9756=((1.0)*cj2);
IkReal x9757=(gconst1*r11);
IkReal x9758=((1.0)*x9753);
IkReal x9759=((1.0)*x9752);
IkReal x9760=(gconst2*x9752);
evalcond[0]=((((-1.0)*r22*x9758))+(((-1.0)*x9755*x9759))+((r20*x9760)));
evalcond[1]=(((r00*x9760))+(((-1.0)*r02*x9758))+(((-1.0)*x9754*x9759)));
evalcond[2]=((((-1.0)*gconst2*r10*x9758))+((x9753*x9757))+(((-1.0)*r12*x9759)));
evalcond[3]=((-1.0)+((r10*x9760))+(((-1.0)*x9757*x9759))+(((-1.0)*r12*x9758)));
evalcond[4]=((((-1.0)*r02*x9759))+((sj1*sj2))+((x9753*x9754))+(((-1.0)*gconst2*r00*x9758))+(((-1.0)*cj1*x9756)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x9759))+((x9753*x9755))+(((-1.0)*gconst2*r20*x9758))+(((-1.0)*sj1*x9756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9763 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9763.valid){
continue;
}
IkReal x9761=((-1.0)*(x9763.value));
IkReal x9762=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9761;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9761;
IkReal gconst1=((-1.0)*r21*x9762);
IkReal gconst2=(r20*x9762);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9766 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9766.valid){
continue;
}
IkReal x9764=((-1.0)*(x9766.value));
IkReal x9765=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9764;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9764;
IkReal gconst1=((-1.0)*r21*x9765);
IkReal gconst2=(r20*x9765);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9769 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9769.valid){
continue;
}
IkReal x9767=((-1.0)*(x9769.value));
IkReal x9768=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9767;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9767;
IkReal gconst1=((-1.0)*r21*x9768);
IkReal gconst2=(r20*x9768);
IkReal x9770=r22*r22;
IkReal x9771=(cj1*r12*sj2);
IkReal x9772=(cj2*r12*sj1);
CheckValue<IkReal> x9776=IKPowWithIntegerCheck(((-1.0)+x9770),-1);
if(!x9776.valid){
continue;
}
IkReal x9773=x9776.value;
if((((1.0)+(((-1.0)*x9770)))) < -0.00001)
continue;
IkReal x9774=IKsqrt(((1.0)+(((-1.0)*x9770))));
IkReal x9775=((1.0)*r22*x9773*x9774);
j4eval[0]=((IKabs((x9771+x9772)))+(IKabs(((((-1.0)*x9771*x9775))+(((-1.0)*x9772*x9775))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9777=(cj1*sj2);
IkReal x9778=(cj2*sj1);
IkReal x9779=(gconst1*r11);
IkReal x9780=((1.0)*gconst2*r10);
CheckValue<IkReal> x9781 = IKatan2WithCheck(IkReal(((((-1.0)*x9778*x9780))+((x9778*x9779))+(((-1.0)*x9777*x9780))+((x9777*x9779)))),IkReal((((r12*x9778))+((r12*x9777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9781.valid){
continue;
}
CheckValue<IkReal> x9782=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9781.value)+(((1.5707963267949)*(x9782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9783=IKcos(j4);
IkReal x9784=IKsin(j4);
IkReal x9785=(gconst1*r01);
IkReal x9786=((1.0)*cj2);
IkReal x9787=(gconst1*r21);
IkReal x9788=(gconst1*r11);
IkReal x9789=((1.0)*x9783);
IkReal x9790=(gconst2*x9783);
IkReal x9791=((1.0)*x9784);
IkReal x9792=(gconst2*x9784);
evalcond[0]=(((r10*x9790))+(((-1.0)*x9788*x9789))+((r12*x9784)));
evalcond[1]=(((r20*x9792))+(((-1.0)*r22*x9789))+(((-1.0)*x9787*x9791)));
evalcond[2]=(((r00*x9792))+(((-1.0)*x9785*x9791))+(((-1.0)*r02*x9789)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9789))+(((-1.0)*x9788*x9791))+((r10*x9792)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x9785*x9789))+((r00*x9790))+((r02*x9784))+(((-1.0)*cj1*x9786)));
evalcond[5]=((((-1.0)*x9787*x9789))+((r20*x9790))+((r22*x9784))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9793=(gconst1*r11);
IkReal x9794=(gconst2*r10);
CheckValue<IkReal> x9795=IKPowWithIntegerCheck(IKsign(((x9793*x9793)+(r12*r12)+(x9794*x9794)+(((-2.0)*x9793*x9794)))),-1);
if(!x9795.valid){
continue;
}
CheckValue<IkReal> x9796 = IKatan2WithCheck(IkReal(((((-1.0)*x9793))+x9794)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9795.value)))+(x9796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9797=IKcos(j4);
IkReal x9798=IKsin(j4);
IkReal x9799=(gconst1*r01);
IkReal x9800=((1.0)*cj2);
IkReal x9801=(gconst1*r21);
IkReal x9802=(gconst1*r11);
IkReal x9803=((1.0)*x9797);
IkReal x9804=(gconst2*x9797);
IkReal x9805=((1.0)*x9798);
IkReal x9806=(gconst2*x9798);
evalcond[0]=(((r10*x9804))+((r12*x9798))+(((-1.0)*x9802*x9803)));
evalcond[1]=((((-1.0)*r22*x9803))+(((-1.0)*x9801*x9805))+((r20*x9806)));
evalcond[2]=(((r00*x9806))+(((-1.0)*r02*x9803))+(((-1.0)*x9799*x9805)));
evalcond[3]=((-1.0)+((r10*x9806))+(((-1.0)*x9802*x9805))+(((-1.0)*r12*x9803)));
evalcond[4]=(((r00*x9804))+((r02*x9798))+(((-1.0)*cj1*x9800))+((sj1*sj2))+(((-1.0)*x9799*x9803)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9800))+(((-1.0)*x9801*x9803))+((r22*x9798))+((r20*x9804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9807=((1.0)*gconst1);
CheckValue<IkReal> x9808=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9807)))),-1);
if(!x9808.valid){
continue;
}
CheckValue<IkReal> x9809 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x9807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9808.value)))+(x9809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9810=IKcos(j4);
IkReal x9811=IKsin(j4);
IkReal x9812=(gconst1*r01);
IkReal x9813=((1.0)*cj2);
IkReal x9814=(gconst1*r21);
IkReal x9815=(gconst1*r11);
IkReal x9816=((1.0)*x9810);
IkReal x9817=(gconst2*x9810);
IkReal x9818=((1.0)*x9811);
IkReal x9819=(gconst2*x9811);
evalcond[0]=(((r12*x9811))+(((-1.0)*x9815*x9816))+((r10*x9817)));
evalcond[1]=((((-1.0)*x9814*x9818))+(((-1.0)*r22*x9816))+((r20*x9819)));
evalcond[2]=((((-1.0)*r02*x9816))+(((-1.0)*x9812*x9818))+((r00*x9819)));
evalcond[3]=((-1.0)+(((-1.0)*x9815*x9818))+(((-1.0)*r12*x9816))+((r10*x9819)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x9812*x9816))+((r02*x9811))+((r00*x9817))+(((-1.0)*cj1*x9813)));
evalcond[5]=((((-1.0)*x9814*x9816))+(((-1.0)*cj1*sj2))+((r22*x9811))+(((-1.0)*sj1*x9813))+((r20*x9817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9820=((-1.0)*px);
CheckValue<IkReal> x9822 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9822.valid){
continue;
}
IkReal x9821=((-1.0)*(x9822.value));
sj5=gconst1;
cj5=gconst2;
j5=x9821;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9820);
rxp1_1=(px*r21);
rxp1_2=(r11*x9820);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9821;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9823=((1.0)*sj3);
IkReal x9824=(r11*r21);
IkReal x9825=(r10*r20);
j4eval[0]=(x9825+x9824);
j4eval[1]=((((-1.0)*x9823*x9825))+(((-1.0)*x9823*x9824)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9826=((-1.0)*px);
CheckValue<IkReal> x9828 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9828.valid){
continue;
}
IkReal x9827=((-1.0)*(x9828.value));
sj5=gconst1;
cj5=gconst2;
j5=x9827;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9826);
rxp1_1=(px*r21);
rxp1_2=(r11*x9826);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9827;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9829=(r10*r20);
IkReal x9830=((1.0)*cj3);
IkReal x9831=(r11*r21);
j4eval[0]=(x9829+x9831);
j4eval[1]=((((-1.0)*x9829*x9830))+(((-1.0)*x9830*x9831)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9832=((-1.0)*px);
CheckValue<IkReal> x9834 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9834.valid){
continue;
}
IkReal x9833=((-1.0)*(x9834.value));
sj5=gconst1;
cj5=gconst2;
j5=x9833;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9832);
rxp1_1=(px*r21);
rxp1_2=(r11*x9832);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9833;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9835=((1.0)*cj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r11*r21*x9835))+(((-1.0)*r10*r20*x9835)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9836=((1.0)*gconst2);
CheckValue<IkReal> x9837=IKPowWithIntegerCheck(r02,-1);
if(!x9837.valid){
continue;
}
CheckValue<IkReal> x9838=IKPowWithIntegerCheck(sj3,-1);
if(!x9838.valid){
continue;
}
CheckValue<IkReal> x9839=IKPowWithIntegerCheck(((((-1.0)*cj3*r10*x9836))+((cj3*gconst1*r11))),-1);
if(!x9839.valid){
continue;
}
if( IKabs(((x9837.value)*(x9838.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9839.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9836)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9837.value)*(x9838.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x9839.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9836))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9837.value)*(x9838.value)*((((cj2*sj1))+((cj1*sj2))))), ((x9839.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9836))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9840=IKsin(j4);
IkReal x9841=IKcos(j4);
IkReal x9842=(sj1*sj2);
IkReal x9843=((1.0)*cj3);
IkReal x9844=(gconst1*r10);
IkReal x9845=(cj2*sj1);
IkReal x9846=((1.0)*cj1);
IkReal x9847=(gconst2*r21);
IkReal x9848=(gconst1*sj3);
IkReal x9849=(gconst2*r11);
IkReal x9850=(cj3*gconst1);
IkReal x9851=((1.0)*sj3);
IkReal x9852=(cj2*x9846);
IkReal x9853=(gconst2*x9840);
IkReal x9854=(gconst2*x9841);
IkReal x9855=(r11*x9841);
IkReal x9856=(r02*x9840);
IkReal x9857=(r21*x9841);
IkReal x9858=((1.0)*gconst1*x9840);
evalcond[0]=((-1.0)*r02*x9841);
evalcond[1]=(((r20*x9853))+(((-1.0)*r21*x9858)));
evalcond[2]=(((cj1*sj2))+(((-1.0)*x9851*x9856))+x9845);
evalcond[3]=((-1.0)+((r10*x9853))+(((-1.0)*r11*x9858)));
evalcond[4]=((((-1.0)*x9852))+x9842+(((-1.0)*x9843*x9856)));
evalcond[5]=((((-1.0)*r10*x9843*x9854))+((x9850*x9855))+((sj3*x9849))+((sj3*x9844)));
evalcond[6]=((((-1.0)*x9843*x9849))+(((-1.0)*x9843*x9844))+((x9848*x9855))+(((-1.0)*r10*x9851*x9854)));
evalcond[7]=((((-1.0)*x9845))+((r20*x9848))+(((-1.0)*sj2*x9846))+(((-1.0)*r20*x9843*x9854))+((x9850*x9857))+((sj3*x9847)));
evalcond[8]=((((-1.0)*x9843*x9847))+(((-1.0)*r20*x9851*x9854))+((x9848*x9857))+(((-1.0)*gconst1*r20*x9843))+(((-1.0)*x9852))+x9842);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9859=((1.0)*r11);
IkReal x9860=(gconst2*r10);
CheckValue<IkReal> x9861=IKPowWithIntegerCheck(((((-1.0)*gconst1*x9859))+x9860),-1);
if(!x9861.valid){
continue;
}
CheckValue<IkReal> x9862=IKPowWithIntegerCheck(((((-1.0)*cj3*x9860))+((cj3*gconst1*r11))),-1);
if(!x9862.valid){
continue;
}
if( IKabs(x9861.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9862.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9859)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9861.value)+IKsqr(((x9862.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9859))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9861.value, ((x9862.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9859))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9863=IKsin(j4);
IkReal x9864=IKcos(j4);
IkReal x9865=(sj1*sj2);
IkReal x9866=((1.0)*cj3);
IkReal x9867=(gconst1*r10);
IkReal x9868=(cj2*sj1);
IkReal x9869=((1.0)*cj1);
IkReal x9870=(gconst2*r21);
IkReal x9871=(gconst1*sj3);
IkReal x9872=(gconst2*r11);
IkReal x9873=(cj3*gconst1);
IkReal x9874=((1.0)*sj3);
IkReal x9875=(cj2*x9869);
IkReal x9876=(gconst2*x9863);
IkReal x9877=(gconst2*x9864);
IkReal x9878=(r11*x9864);
IkReal x9879=(r02*x9863);
IkReal x9880=(r21*x9864);
IkReal x9881=((1.0)*gconst1*x9863);
evalcond[0]=((-1.0)*r02*x9864);
evalcond[1]=(((r20*x9876))+(((-1.0)*r21*x9881)));
evalcond[2]=(((cj1*sj2))+(((-1.0)*x9874*x9879))+x9868);
evalcond[3]=((-1.0)+((r10*x9876))+(((-1.0)*r11*x9881)));
evalcond[4]=((((-1.0)*x9866*x9879))+(((-1.0)*x9875))+x9865);
evalcond[5]=(((sj3*x9867))+((x9873*x9878))+((sj3*x9872))+(((-1.0)*r10*x9866*x9877)));
evalcond[6]=((((-1.0)*x9866*x9867))+(((-1.0)*x9866*x9872))+(((-1.0)*r10*x9874*x9877))+((x9871*x9878)));
evalcond[7]=(((x9873*x9880))+((r20*x9871))+(((-1.0)*r20*x9866*x9877))+(((-1.0)*x9868))+((sj3*x9870))+(((-1.0)*sj2*x9869)));
evalcond[8]=((((-1.0)*gconst1*r20*x9866))+(((-1.0)*r20*x9874*x9877))+(((-1.0)*x9866*x9870))+(((-1.0)*x9875))+((x9871*x9880))+x9865);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9882=(gconst1*r11);
IkReal x9883=(gconst2*r10);
CheckValue<IkReal> x9884=IKPowWithIntegerCheck(((((-1.0)*x9882))+x9883),-1);
if(!x9884.valid){
continue;
}
CheckValue<IkReal> x9885=IKPowWithIntegerCheck(((((-1.0)*sj3*x9883))+((sj3*x9882))),-1);
if(!x9885.valid){
continue;
}
if( IKabs(x9884.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9885.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9884.value)+IKsqr(((x9885.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9884.value, ((x9885.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9886=IKsin(j4);
IkReal x9887=IKcos(j4);
IkReal x9888=(sj1*sj2);
IkReal x9889=((1.0)*cj3);
IkReal x9890=(gconst1*r10);
IkReal x9891=(cj2*sj1);
IkReal x9892=((1.0)*cj1);
IkReal x9893=(gconst2*r21);
IkReal x9894=(gconst1*sj3);
IkReal x9895=(gconst2*r11);
IkReal x9896=(cj3*gconst1);
IkReal x9897=((1.0)*sj3);
IkReal x9898=(cj2*x9892);
IkReal x9899=(gconst2*x9886);
IkReal x9900=(gconst2*x9887);
IkReal x9901=(r11*x9887);
IkReal x9902=(r02*x9886);
IkReal x9903=(r21*x9887);
IkReal x9904=((1.0)*gconst1*x9886);
evalcond[0]=((-1.0)*r02*x9887);
evalcond[1]=((((-1.0)*r21*x9904))+((r20*x9899)));
evalcond[2]=(((cj1*sj2))+x9891+(((-1.0)*x9897*x9902)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x9904))+((r10*x9899)));
evalcond[4]=((((-1.0)*x9889*x9902))+x9888+(((-1.0)*x9898)));
evalcond[5]=((((-1.0)*r10*x9889*x9900))+((sj3*x9890))+((sj3*x9895))+((x9896*x9901)));
evalcond[6]=((((-1.0)*x9889*x9895))+(((-1.0)*x9889*x9890))+(((-1.0)*r10*x9897*x9900))+((x9894*x9901)));
evalcond[7]=(((sj3*x9893))+(((-1.0)*r20*x9889*x9900))+(((-1.0)*x9891))+((x9896*x9903))+((r20*x9894))+(((-1.0)*sj2*x9892)));
evalcond[8]=((((-1.0)*x9889*x9893))+((x9894*x9903))+(((-1.0)*gconst1*r20*x9889))+x9888+(((-1.0)*r20*x9897*x9900))+(((-1.0)*x9898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9905=gconst2*gconst2;
IkReal x9906=gconst1*gconst1;
IkReal x9907=(r11*sj3);
IkReal x9908=(gconst1*gconst2);
IkReal x9909=((1.0)*r00);
IkReal x9910=(cj3*r11);
IkReal x9911=(cj3*r10);
IkReal x9912=((1.0)*r02);
IkReal x9913=(r10*sj3);
IkReal x9914=(r01*x9906);
CheckValue<IkReal> x9915 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x9910*x9912))+(((-1.0)*gconst1*x9911*x9912)))),IkReal(((((-1.0)*x9905*x9909*x9910))+((r01*x9908*x9910))+((x9911*x9914))+(((-1.0)*x9908*x9909*x9911)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9915.valid){
continue;
}
CheckValue<IkReal> x9916=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9907*x9914))+(((-1.0)*x9907*x9908*x9909))+(((-1.0)*r01*x9908*x9913))+((r00*x9905*x9913)))),-1);
if(!x9916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9915.value)+(((1.5707963267949)*(x9916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9917=IKsin(j4);
IkReal x9918=IKcos(j4);
IkReal x9919=(sj1*sj2);
IkReal x9920=(gconst1*r01);
IkReal x9921=(gconst2*sj3);
IkReal x9922=(cj3*gconst1);
IkReal x9923=(cj3*gconst2);
IkReal x9924=((1.0)*cj2);
IkReal x9925=(gconst1*r11);
IkReal x9926=(gconst1*r21);
IkReal x9927=(cj1*sj2);
IkReal x9928=(gconst1*sj3);
IkReal x9929=(cj1*x9924);
IkReal x9930=((1.0)*x9918);
IkReal x9931=((1.0)*x9917);
IkReal x9932=(sj3*x9918);
IkReal x9933=(gconst2*x9917);
evalcond[0]=((((-1.0)*x9926*x9931))+(((-1.0)*r22*x9930))+((r20*x9933)));
evalcond[1]=(((r00*x9933))+(((-1.0)*r02*x9930))+(((-1.0)*x9920*x9931)));
evalcond[2]=((-1.0)+((r10*x9933))+(((-1.0)*x9925*x9931))+(((-1.0)*r12*x9930)));
evalcond[3]=(((r10*x9928))+(((-1.0)*r10*x9923*x9930))+(((-1.0)*cj3*r12*x9931))+((r11*x9921))+((r11*x9918*x9922)));
evalcond[4]=(((x9925*x9932))+(((-1.0)*r11*x9923))+(((-1.0)*r10*x9921*x9930))+(((-1.0)*r12*sj3*x9931))+(((-1.0)*r10*x9922)));
evalcond[5]=((((-1.0)*cj3*r02*x9931))+(((-1.0)*r00*x9923*x9930))+(((-1.0)*x9929))+x9919+((r01*x9921))+((r00*x9928))+((cj3*x9918*x9920)));
evalcond[6]=((((-1.0)*r20*x9923*x9930))+((r20*x9928))+(((-1.0)*cj3*r22*x9931))+(((-1.0)*x9927))+(((-1.0)*sj1*x9924))+((r21*x9918*x9922))+((r21*x9921)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r02*sj3*x9931))+(((-1.0)*r01*x9923))+(((-1.0)*r00*x9921*x9930))+(((-1.0)*r00*x9922))+x9927+((x9920*x9932)));
evalcond[8]=((((-1.0)*r22*sj3*x9931))+((x9926*x9932))+(((-1.0)*r21*x9923))+(((-1.0)*r20*x9921*x9930))+(((-1.0)*r20*x9922))+(((-1.0)*x9929))+x9919);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9934=gconst1*gconst1;
IkReal x9935=gconst2*gconst2;
IkReal x9936=(r01*r11);
IkReal x9937=(r00*r10);
IkReal x9938=(gconst2*r11);
IkReal x9939=(r02*sj3);
IkReal x9940=(r01*r10);
IkReal x9941=(gconst1*gconst2*sj3);
IkReal x9942=((1.0)*cj3*gconst1);
CheckValue<IkReal> x9943 = IKatan2WithCheck(IkReal((((gconst1*r10*x9939))+((x9938*x9939)))),IkReal(((((-1.0)*sj3*x9934*x9940))+((r00*r11*sj3*x9935))+((x9937*x9941))+(((-1.0)*x9936*x9941)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9943.valid){
continue;
}
CheckValue<IkReal> x9944=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((cj3*x9935*x9937))+(((-1.0)*gconst2*x9940*x9942))+((cj3*x9934*x9936))+(((-1.0)*r00*x9938*x9942)))),-1);
if(!x9944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9943.value)+(((1.5707963267949)*(x9944.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9945=IKsin(j4);
IkReal x9946=IKcos(j4);
IkReal x9947=(sj1*sj2);
IkReal x9948=(gconst1*r01);
IkReal x9949=(gconst2*sj3);
IkReal x9950=(cj3*gconst1);
IkReal x9951=(cj3*gconst2);
IkReal x9952=((1.0)*cj2);
IkReal x9953=(gconst1*r11);
IkReal x9954=(gconst1*r21);
IkReal x9955=(cj1*sj2);
IkReal x9956=(gconst1*sj3);
IkReal x9957=(cj1*x9952);
IkReal x9958=((1.0)*x9946);
IkReal x9959=((1.0)*x9945);
IkReal x9960=(sj3*x9946);
IkReal x9961=(gconst2*x9945);
evalcond[0]=((((-1.0)*r22*x9958))+(((-1.0)*x9954*x9959))+((r20*x9961)));
evalcond[1]=((((-1.0)*r02*x9958))+((r00*x9961))+(((-1.0)*x9948*x9959)));
evalcond[2]=((-1.0)+((r10*x9961))+(((-1.0)*x9953*x9959))+(((-1.0)*r12*x9958)));
evalcond[3]=((((-1.0)*r10*x9951*x9958))+((r11*x9946*x9950))+((r11*x9949))+(((-1.0)*cj3*r12*x9959))+((r10*x9956)));
evalcond[4]=((((-1.0)*r11*x9951))+(((-1.0)*r10*x9949*x9958))+(((-1.0)*r12*sj3*x9959))+((x9953*x9960))+(((-1.0)*r10*x9950)));
evalcond[5]=(((cj3*x9946*x9948))+(((-1.0)*cj3*r02*x9959))+(((-1.0)*x9957))+((r01*x9949))+x9947+(((-1.0)*r00*x9951*x9958))+((r00*x9956)));
evalcond[6]=(((r20*x9956))+(((-1.0)*x9955))+(((-1.0)*sj1*x9952))+(((-1.0)*cj3*r22*x9959))+((r21*x9949))+((r21*x9946*x9950))+(((-1.0)*r20*x9951*x9958)));
evalcond[7]=(((x9948*x9960))+((cj2*sj1))+(((-1.0)*r01*x9951))+(((-1.0)*r00*x9950))+x9955+(((-1.0)*r02*sj3*x9959))+(((-1.0)*r00*x9949*x9958)));
evalcond[8]=((((-1.0)*r20*x9949*x9958))+(((-1.0)*r22*sj3*x9959))+(((-1.0)*r21*x9951))+(((-1.0)*r20*x9950))+(((-1.0)*x9957))+x9947+((x9954*x9960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9962=((1.0)*gconst1);
CheckValue<IkReal> x9963 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x9962)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9963.valid){
continue;
}
CheckValue<IkReal> x9964=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9962)))),-1);
if(!x9964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9963.value)+(((1.5707963267949)*(x9964.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9965=IKsin(j4);
IkReal x9966=IKcos(j4);
IkReal x9967=(sj1*sj2);
IkReal x9968=(gconst1*r01);
IkReal x9969=(gconst2*sj3);
IkReal x9970=(cj3*gconst1);
IkReal x9971=(cj3*gconst2);
IkReal x9972=((1.0)*cj2);
IkReal x9973=(gconst1*r11);
IkReal x9974=(gconst1*r21);
IkReal x9975=(cj1*sj2);
IkReal x9976=(gconst1*sj3);
IkReal x9977=(cj1*x9972);
IkReal x9978=((1.0)*x9966);
IkReal x9979=((1.0)*x9965);
IkReal x9980=(sj3*x9966);
IkReal x9981=(gconst2*x9965);
evalcond[0]=((((-1.0)*r22*x9978))+((r20*x9981))+(((-1.0)*x9974*x9979)));
evalcond[1]=((((-1.0)*r02*x9978))+((r00*x9981))+(((-1.0)*x9968*x9979)));
evalcond[2]=((-1.0)+((r10*x9981))+(((-1.0)*r12*x9978))+(((-1.0)*x9973*x9979)));
evalcond[3]=(((r11*x9966*x9970))+(((-1.0)*cj3*r12*x9979))+((r10*x9976))+((r11*x9969))+(((-1.0)*r10*x9971*x9978)));
evalcond[4]=((((-1.0)*r11*x9971))+(((-1.0)*r12*sj3*x9979))+((x9973*x9980))+(((-1.0)*r10*x9969*x9978))+(((-1.0)*r10*x9970)));
evalcond[5]=(((cj3*x9966*x9968))+((r01*x9969))+(((-1.0)*cj3*r02*x9979))+((r00*x9976))+x9967+(((-1.0)*r00*x9971*x9978))+(((-1.0)*x9977)));
evalcond[6]=(((r21*x9969))+(((-1.0)*x9975))+((r20*x9976))+((r21*x9966*x9970))+(((-1.0)*sj1*x9972))+(((-1.0)*cj3*r22*x9979))+(((-1.0)*r20*x9971*x9978)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r00*x9969*x9978))+(((-1.0)*r00*x9970))+(((-1.0)*r01*x9971))+(((-1.0)*r02*sj3*x9979))+x9975+((x9968*x9980)));
evalcond[8]=((((-1.0)*r21*x9971))+((x9974*x9980))+(((-1.0)*r20*x9970))+(((-1.0)*r20*x9969*x9978))+x9967+(((-1.0)*x9977))+(((-1.0)*r22*sj3*x9979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9984 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9984.valid){
continue;
}
IkReal x9982=((-1.0)*(x9984.value));
IkReal x9983=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9982;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9982;
IkReal gconst1=((-1.0)*r21*x9983);
IkReal gconst2=(r20*x9983);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9987 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9987.valid){
continue;
}
IkReal x9985=((-1.0)*(x9987.value));
IkReal x9986=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9985;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9985;
IkReal gconst1=((-1.0)*r21*x9986);
IkReal gconst2=(r20*x9986);
CheckValue<IkReal> x9995=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9995.valid){
continue;
}
IkReal x9988=x9995.value;
IkReal x9989=(cj3*x9988);
IkReal x9990=(r11*x9989);
IkReal x9991=(r01*x9989);
IkReal x9992=(r00*x9989);
IkReal x9993=(r10*x9989);
IkReal x9994=(r20*r21*x9989);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*x9992*(r20*r20)))+((r10*r20*r21*x9991))+((r00*r20*r21*x9990))+((r01*x9990*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9998 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9998.valid){
continue;
}
IkReal x9996=((-1.0)*(x9998.value));
IkReal x9997=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x9996;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9996;
IkReal gconst1=((-1.0)*r21*x9997);
IkReal gconst2=(r20*x9997);
CheckValue<IkReal> x10006=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x10006.valid){
continue;
}
IkReal x9999=x10006.value;
IkReal x10000=(sj3*x9999);
IkReal x10001=(r11*x10000);
IkReal x10002=(r00*x10000);
IkReal x10003=(r01*x10000);
IkReal x10004=(r10*x10000);
IkReal x10005=(r20*r21*x10000);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x10001))+((r10*r20*r21*x10003))+((r10*x10002*(r20*r20)))+((r01*x10001*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10009 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10009.valid){
continue;
}
IkReal x10007=((-1.0)*(x10009.value));
IkReal x10008=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x10007;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10007;
IkReal gconst1=((-1.0)*r21*x10008);
IkReal gconst2=(r20*x10008);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10012 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10012.valid){
continue;
}
IkReal x10010=((-1.0)*(x10012.value));
IkReal x10011=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x10010;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10010;
IkReal gconst1=((-1.0)*r21*x10011);
IkReal gconst2=(r20*x10011);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10015 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10015.valid){
continue;
}
IkReal x10013=((-1.0)*(x10015.value));
IkReal x10014=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x10013;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10013;
IkReal gconst1=((-1.0)*r21*x10014);
IkReal gconst2=(r20*x10014);
IkReal x10016=r22*r22;
IkReal x10017=(cj1*cj2*r02);
CheckValue<IkReal> x10022=IKPowWithIntegerCheck(((-1.0)+x10016),-1);
if(!x10022.valid){
continue;
}
IkReal x10018=x10022.value;
IkReal x10019=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x10016)))) < -0.00001)
continue;
IkReal x10020=IKsqrt(((1.0)+(((-1.0)*x10016))));
IkReal x10021=(r22*x10018*x10020);
j4eval[0]=((IKabs((x10017+(((-1.0)*x10019)))))+(IKabs((((x10017*x10021))+(((-1.0)*x10019*x10021))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10023=(gconst2*r00);
IkReal x10024=(cj1*cj2);
IkReal x10025=(gconst1*r01);
IkReal x10026=((1.0)*sj1*sj2);
CheckValue<IkReal> x10027 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x10026))+((r02*x10024)))),IkReal((((sj1*sj2*x10025))+(((-1.0)*x10023*x10026))+((x10023*x10024))+(((-1.0)*x10024*x10025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10027.valid){
continue;
}
CheckValue<IkReal> x10028=IKPowWithIntegerCheck(IKsign(((x10025*x10025)+(r02*r02)+(((-2.0)*x10023*x10025))+(x10023*x10023))),-1);
if(!x10028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10027.value)+(((1.5707963267949)*(x10028.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10029=IKsin(j4);
IkReal x10030=IKcos(j4);
IkReal x10031=(gconst1*r01);
IkReal x10032=(gconst1*r21);
IkReal x10033=((1.0)*sj1);
IkReal x10034=(gconst1*r11);
IkReal x10035=((1.0)*x10030);
IkReal x10036=((1.0)*x10029);
IkReal x10037=(gconst2*x10029);
evalcond[0]=((((-1.0)*r22*x10035))+((r20*x10037))+(((-1.0)*x10032*x10036)));
evalcond[1]=((((-1.0)*r02*x10035))+(((-1.0)*x10031*x10036))+((r00*x10037)));
evalcond[2]=((((-1.0)*gconst2*r10*x10035))+((x10030*x10034))+(((-1.0)*r12*x10036)));
evalcond[3]=((1.0)+((r10*x10037))+(((-1.0)*x10034*x10036))+(((-1.0)*r12*x10035)));
evalcond[4]=((((-1.0)*r02*x10036))+(((-1.0)*gconst2*r00*x10035))+((x10030*x10031))+((cj1*cj2))+(((-1.0)*sj2*x10033)));
evalcond[5]=((((-1.0)*cj2*x10033))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x10036))+(((-1.0)*gconst2*r20*x10035))+((x10030*x10032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10038=(gconst2*r10);
IkReal x10039=(gconst1*r11);
CheckValue<IkReal> x10040 = IKatan2WithCheck(IkReal(((((-1.0)*x10038))+x10039)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10040.valid){
continue;
}
CheckValue<IkReal> x10041=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10038*x10039))+(r12*r12)+(x10038*x10038)+(x10039*x10039))),-1);
if(!x10041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10040.value)+(((1.5707963267949)*(x10041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10042=IKsin(j4);
IkReal x10043=IKcos(j4);
IkReal x10044=(gconst1*r01);
IkReal x10045=(gconst1*r21);
IkReal x10046=((1.0)*sj1);
IkReal x10047=(gconst1*r11);
IkReal x10048=((1.0)*x10043);
IkReal x10049=((1.0)*x10042);
IkReal x10050=(gconst2*x10042);
evalcond[0]=(((r20*x10050))+(((-1.0)*x10045*x10049))+(((-1.0)*r22*x10048)));
evalcond[1]=((((-1.0)*x10044*x10049))+(((-1.0)*r02*x10048))+((r00*x10050)));
evalcond[2]=((((-1.0)*gconst2*r10*x10048))+(((-1.0)*r12*x10049))+((x10043*x10047)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10048))+((r10*x10050))+(((-1.0)*x10047*x10049)));
evalcond[4]=((((-1.0)*r02*x10049))+(((-1.0)*gconst2*r00*x10048))+((x10043*x10044))+((cj1*cj2))+(((-1.0)*sj2*x10046)));
evalcond[5]=((((-1.0)*cj2*x10046))+(((-1.0)*cj1*sj2))+((x10043*x10045))+(((-1.0)*r22*x10049))+(((-1.0)*gconst2*r20*x10048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10051 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10051.valid){
continue;
}
CheckValue<IkReal> x10052=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10051.value)+(((1.5707963267949)*(x10052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10053=IKsin(j4);
IkReal x10054=IKcos(j4);
IkReal x10055=(gconst1*r01);
IkReal x10056=(gconst1*r21);
IkReal x10057=((1.0)*sj1);
IkReal x10058=(gconst1*r11);
IkReal x10059=((1.0)*x10054);
IkReal x10060=((1.0)*x10053);
IkReal x10061=(gconst2*x10053);
evalcond[0]=(((r20*x10061))+(((-1.0)*x10056*x10060))+(((-1.0)*r22*x10059)));
evalcond[1]=(((r00*x10061))+(((-1.0)*r02*x10059))+(((-1.0)*x10055*x10060)));
evalcond[2]=((((-1.0)*gconst2*r10*x10059))+((x10054*x10058))+(((-1.0)*r12*x10060)));
evalcond[3]=((1.0)+((r10*x10061))+(((-1.0)*r12*x10059))+(((-1.0)*x10058*x10060)));
evalcond[4]=(((x10054*x10055))+(((-1.0)*sj2*x10057))+(((-1.0)*gconst2*r00*x10059))+((cj1*cj2))+(((-1.0)*r02*x10060)));
evalcond[5]=((((-1.0)*cj2*x10057))+(((-1.0)*cj1*sj2))+((x10054*x10056))+(((-1.0)*gconst2*r20*x10059))+(((-1.0)*r22*x10060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10064 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10064.valid){
continue;
}
IkReal x10062=((-1.0)*(x10064.value));
IkReal x10063=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x10062;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10062;
IkReal gconst1=((-1.0)*r21*x10063);
IkReal gconst2=(r20*x10063);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10067 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10067.valid){
continue;
}
IkReal x10065=((-1.0)*(x10067.value));
IkReal x10066=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x10065;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10065;
IkReal gconst1=((-1.0)*r21*x10066);
IkReal gconst2=(r20*x10066);
IkReal x10068=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10072=IKPowWithIntegerCheck(x10068,-1);
if(!x10072.valid){
continue;
}
IkReal x10069=x10072.value;
IkReal x10070=((1.0)*x10069);
IkReal x10071=((((-2.0)*r10*r11*r20*r21*x10069))+(((-1.0)*(r12*r12)))+(((-1.0)*x10070*(r10*r10)*(r20*r20)))+(((-1.0)*x10070*(r11*r11)*(r21*r21))));
j4eval[0]=x10071;
j4eval[1]=IKsign(x10071);
j4eval[2]=r12;
j4eval[3]=x10068;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10075 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10075.valid){
continue;
}
IkReal x10073=((-1.0)*(x10075.value));
IkReal x10074=x8383;
sj5=gconst1;
cj5=gconst2;
j5=x10073;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10073;
IkReal gconst1=((-1.0)*r21*x10074);
IkReal gconst2=(r20*x10074);
IkReal x10076=r22*r22;
IkReal x10077=(cj1*r12*sj2);
IkReal x10078=(cj2*r12*sj1);
CheckValue<IkReal> x10082=IKPowWithIntegerCheck(((-1.0)+x10076),-1);
if(!x10082.valid){
continue;
}
IkReal x10079=x10082.value;
if((((1.0)+(((-1.0)*x10076)))) < -0.00001)
continue;
IkReal x10080=IKsqrt(((1.0)+(((-1.0)*x10076))));
IkReal x10081=((1.0)*r22*x10079*x10080);
j4eval[0]=((IKabs((x10077+x10078)))+(IKabs(((((-1.0)*x10078*x10081))+(((-1.0)*x10077*x10081))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10083=(cj1*sj2);
IkReal x10084=(cj2*sj1);
IkReal x10085=(gconst1*r11);
IkReal x10086=((1.0)*gconst2*r10);
CheckValue<IkReal> x10087 = IKatan2WithCheck(IkReal((((x10084*x10085))+(((-1.0)*x10084*x10086))+((x10083*x10085))+(((-1.0)*x10083*x10086)))),IkReal((((r12*x10084))+((r12*x10083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10087.valid){
continue;
}
CheckValue<IkReal> x10088=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10087.value)+(((1.5707963267949)*(x10088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10089=IKcos(j4);
IkReal x10090=IKsin(j4);
IkReal x10091=(gconst1*r01);
IkReal x10092=((1.0)*sj1);
IkReal x10093=(gconst1*r21);
IkReal x10094=(gconst1*r11);
IkReal x10095=((1.0)*x10089);
IkReal x10096=(gconst2*x10089);
IkReal x10097=((1.0)*x10090);
IkReal x10098=(gconst2*x10090);
evalcond[0]=(((r12*x10090))+((r10*x10096))+(((-1.0)*x10094*x10095)));
evalcond[1]=((((-1.0)*x10093*x10097))+((r20*x10098))+(((-1.0)*r22*x10095)));
evalcond[2]=((((-1.0)*r02*x10095))+(((-1.0)*x10091*x10097))+((r00*x10098)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10095))+((r10*x10098))+(((-1.0)*x10094*x10097)));
evalcond[4]=(((r02*x10090))+(((-1.0)*sj2*x10092))+(((-1.0)*x10091*x10095))+((cj1*cj2))+((r00*x10096)));
evalcond[5]=((((-1.0)*cj2*x10092))+(((-1.0)*cj1*sj2))+(((-1.0)*x10093*x10095))+((r22*x10090))+((r20*x10096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10099=(gconst1*r11);
IkReal x10100=(gconst2*r10);
CheckValue<IkReal> x10101 = IKatan2WithCheck(IkReal((x10100+(((-1.0)*x10099)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10101.valid){
continue;
}
CheckValue<IkReal> x10102=IKPowWithIntegerCheck(IKsign(((((2.0)*x10099*x10100))+(((-1.0)*(x10100*x10100)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10099*x10099))))),-1);
if(!x10102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10101.value)+(((1.5707963267949)*(x10102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10103=IKcos(j4);
IkReal x10104=IKsin(j4);
IkReal x10105=(gconst1*r01);
IkReal x10106=((1.0)*sj1);
IkReal x10107=(gconst1*r21);
IkReal x10108=(gconst1*r11);
IkReal x10109=((1.0)*x10103);
IkReal x10110=(gconst2*x10103);
IkReal x10111=((1.0)*x10104);
IkReal x10112=(gconst2*x10104);
evalcond[0]=((((-1.0)*x10108*x10109))+((r12*x10104))+((r10*x10110)));
evalcond[1]=(((r20*x10112))+(((-1.0)*r22*x10109))+(((-1.0)*x10107*x10111)));
evalcond[2]=((((-1.0)*x10105*x10111))+((r00*x10112))+(((-1.0)*r02*x10109)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10109))+(((-1.0)*x10108*x10111))+((r10*x10112)));
evalcond[4]=((((-1.0)*x10105*x10109))+((r00*x10110))+((r02*x10104))+((cj1*cj2))+(((-1.0)*sj2*x10106)));
evalcond[5]=(((r20*x10110))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x10106))+((r22*x10104))+(((-1.0)*x10107*x10109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10113 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10113.valid){
continue;
}
CheckValue<IkReal> x10114=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10113.value)+(((1.5707963267949)*(x10114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10115=IKcos(j4);
IkReal x10116=IKsin(j4);
IkReal x10117=(gconst1*r01);
IkReal x10118=((1.0)*sj1);
IkReal x10119=(gconst1*r21);
IkReal x10120=(gconst1*r11);
IkReal x10121=((1.0)*x10115);
IkReal x10122=(gconst2*x10115);
IkReal x10123=((1.0)*x10116);
IkReal x10124=(gconst2*x10116);
evalcond[0]=((((-1.0)*x10120*x10121))+((r10*x10122))+((r12*x10116)));
evalcond[1]=(((r20*x10124))+(((-1.0)*x10119*x10123))+(((-1.0)*r22*x10121)));
evalcond[2]=((((-1.0)*r02*x10121))+(((-1.0)*x10117*x10123))+((r00*x10124)));
evalcond[3]=((1.0)+(((-1.0)*x10120*x10123))+((r10*x10124))+(((-1.0)*r12*x10121)));
evalcond[4]=(((r02*x10116))+(((-1.0)*x10117*x10121))+((r00*x10122))+((cj1*cj2))+(((-1.0)*sj2*x10118)));
evalcond[5]=(((r20*x10122))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x10118))+((r22*x10116))+(((-1.0)*x10119*x10121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10125=((-1.0)*px);
CheckValue<IkReal> x10127 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10127.valid){
continue;
}
IkReal x10126=((-1.0)*(x10127.value));
sj5=gconst1;
cj5=gconst2;
j5=x10126;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10125);
rxp1_1=(px*r21);
rxp1_2=(r11*x10125);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10126;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10128=((1.0)*sj3);
IkReal x10129=(r11*r21);
IkReal x10130=(r10*r20);
j4eval[0]=(x10129+x10130);
j4eval[1]=((((-1.0)*x10128*x10129))+(((-1.0)*x10128*x10130)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10131=((-1.0)*px);
CheckValue<IkReal> x10133 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10133.valid){
continue;
}
IkReal x10132=((-1.0)*(x10133.value));
sj5=gconst1;
cj5=gconst2;
j5=x10132;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10131);
rxp1_1=(px*r21);
rxp1_2=(r11*x10131);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10132;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10134=(r10*r20);
IkReal x10135=((1.0)*cj3);
IkReal x10136=(r11*r21);
j4eval[0]=(x10136+x10134);
j4eval[1]=((((-1.0)*x10135*x10136))+(((-1.0)*x10134*x10135)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10137=((-1.0)*px);
CheckValue<IkReal> x10139 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10139.valid){
continue;
}
IkReal x10138=((-1.0)*(x10139.value));
sj5=gconst1;
cj5=gconst2;
j5=x10138;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10137);
rxp1_1=(px*r21);
rxp1_2=(r11*x10137);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10138;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10140=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10140))+(((-1.0)*r11*r21*x10140)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10141=((1.0)*gconst2);
CheckValue<IkReal> x10142=IKPowWithIntegerCheck(cj3,-1);
if(!x10142.valid){
continue;
}
CheckValue<IkReal> x10143=IKPowWithIntegerCheck(r02,-1);
if(!x10143.valid){
continue;
}
CheckValue<IkReal> x10144=IKPowWithIntegerCheck(((((-1.0)*cj3*r10*x10141))+((cj3*gconst1*r11))),-1);
if(!x10144.valid){
continue;
}
if( IKabs(((x10142.value)*(x10143.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10144.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x10141)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10142.value)*(x10143.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x10144.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x10141))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10142.value)*(x10143.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x10144.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x10141))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10145=IKsin(j4);
IkReal x10146=IKcos(j4);
IkReal x10147=(sj1*sj2);
IkReal x10148=((1.0)*cj3);
IkReal x10149=(gconst1*r10);
IkReal x10150=((1.0)*cj2);
IkReal x10151=(gconst2*r21);
IkReal x10152=(gconst1*sj3);
IkReal x10153=(gconst2*r11);
IkReal x10154=(cj3*gconst1);
IkReal x10155=((1.0)*sj3);
IkReal x10156=((1.0)*cj1*sj2);
IkReal x10157=(sj1*x10150);
IkReal x10158=(gconst2*x10145);
IkReal x10159=(gconst2*x10146);
IkReal x10160=(r11*x10146);
IkReal x10161=(r02*x10145);
IkReal x10162=(r21*x10146);
IkReal x10163=((1.0)*gconst1*x10145);
IkReal x10164=(x10156+x10157);
evalcond[0]=((-1.0)*r02*x10146);
evalcond[1]=((((-1.0)*r21*x10163))+((r20*x10158)));
evalcond[2]=((1.0)+(((-1.0)*r11*x10163))+((r10*x10158)));
evalcond[3]=((((-1.0)*x10147))+(((-1.0)*x10148*x10161))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x10164))+(((-1.0)*x10155*x10161)));
evalcond[5]=(((x10154*x10160))+((sj3*x10149))+((sj3*x10153))+(((-1.0)*r10*x10148*x10159)));
evalcond[6]=(((x10152*x10160))+(((-1.0)*x10148*x10153))+(((-1.0)*x10148*x10149))+(((-1.0)*r10*x10155*x10159)));
evalcond[7]=((((-1.0)*r20*x10148*x10159))+(((-1.0)*x10164))+((x10154*x10162))+((sj3*x10151))+((r20*x10152)));
evalcond[8]=(((x10152*x10162))+(((-1.0)*x10148*x10151))+(((-1.0)*cj1*x10150))+(((-1.0)*gconst1*r20*x10148))+x10147+(((-1.0)*r20*x10155*x10159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10165=((1.0)*r11);
IkReal x10166=(gconst2*r10);
CheckValue<IkReal> x10167=IKPowWithIntegerCheck(((((-1.0)*gconst1*x10165))+x10166),-1);
if(!x10167.valid){
continue;
}
CheckValue<IkReal> x10168=IKPowWithIntegerCheck(((((-1.0)*cj3*x10166))+((cj3*gconst1*r11))),-1);
if(!x10168.valid){
continue;
}
if( IKabs(((-1.0)*(x10167.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10168.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x10165)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10167.value)))+IKsqr(((x10168.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x10165))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10167.value)), ((x10168.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x10165))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10169=IKsin(j4);
IkReal x10170=IKcos(j4);
IkReal x10171=(sj1*sj2);
IkReal x10172=((1.0)*cj3);
IkReal x10173=(gconst1*r10);
IkReal x10174=((1.0)*cj2);
IkReal x10175=(gconst2*r21);
IkReal x10176=(gconst1*sj3);
IkReal x10177=(gconst2*r11);
IkReal x10178=(cj3*gconst1);
IkReal x10179=((1.0)*sj3);
IkReal x10180=((1.0)*cj1*sj2);
IkReal x10181=(sj1*x10174);
IkReal x10182=(gconst2*x10169);
IkReal x10183=(gconst2*x10170);
IkReal x10184=(r11*x10170);
IkReal x10185=(r02*x10169);
IkReal x10186=(r21*x10170);
IkReal x10187=((1.0)*gconst1*x10169);
IkReal x10188=(x10181+x10180);
evalcond[0]=((-1.0)*r02*x10170);
evalcond[1]=((((-1.0)*r21*x10187))+((r20*x10182)));
evalcond[2]=((1.0)+((r10*x10182))+(((-1.0)*r11*x10187)));
evalcond[3]=((((-1.0)*x10172*x10185))+(((-1.0)*x10171))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x10179*x10185))+(((-1.0)*x10188)));
evalcond[5]=(((x10178*x10184))+(((-1.0)*r10*x10172*x10183))+((sj3*x10173))+((sj3*x10177)));
evalcond[6]=((((-1.0)*x10172*x10173))+(((-1.0)*x10172*x10177))+(((-1.0)*r10*x10179*x10183))+((x10176*x10184)));
evalcond[7]=(((x10178*x10186))+((sj3*x10175))+(((-1.0)*x10188))+(((-1.0)*r20*x10172*x10183))+((r20*x10176)));
evalcond[8]=((((-1.0)*cj1*x10174))+(((-1.0)*r20*x10179*x10183))+(((-1.0)*x10172*x10175))+x10171+((x10176*x10186))+(((-1.0)*gconst1*r20*x10172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10189=(gconst1*r11);
IkReal x10190=(gconst2*r10);
CheckValue<IkReal> x10191=IKPowWithIntegerCheck(((((-1.0)*x10189))+x10190),-1);
if(!x10191.valid){
continue;
}
CheckValue<IkReal> x10192=IKPowWithIntegerCheck(((((-1.0)*sj3*x10190))+((sj3*x10189))),-1);
if(!x10192.valid){
continue;
}
if( IKabs(((-1.0)*(x10191.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10192.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10191.value)))+IKsqr(((x10192.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10191.value)), ((x10192.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10193=IKsin(j4);
IkReal x10194=IKcos(j4);
IkReal x10195=(sj1*sj2);
IkReal x10196=((1.0)*cj3);
IkReal x10197=(gconst1*r10);
IkReal x10198=((1.0)*cj2);
IkReal x10199=(gconst2*r21);
IkReal x10200=(gconst1*sj3);
IkReal x10201=(gconst2*r11);
IkReal x10202=(cj3*gconst1);
IkReal x10203=((1.0)*sj3);
IkReal x10204=((1.0)*cj1*sj2);
IkReal x10205=(sj1*x10198);
IkReal x10206=(gconst2*x10193);
IkReal x10207=(gconst2*x10194);
IkReal x10208=(r11*x10194);
IkReal x10209=(r02*x10193);
IkReal x10210=(r21*x10194);
IkReal x10211=((1.0)*gconst1*x10193);
IkReal x10212=(x10204+x10205);
evalcond[0]=((-1.0)*r02*x10194);
evalcond[1]=((((-1.0)*r21*x10211))+((r20*x10206)));
evalcond[2]=((1.0)+((r10*x10206))+(((-1.0)*r11*x10211)));
evalcond[3]=((((-1.0)*x10196*x10209))+(((-1.0)*x10195))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x10212))+(((-1.0)*x10203*x10209)));
evalcond[5]=(((sj3*x10201))+((x10202*x10208))+((sj3*x10197))+(((-1.0)*r10*x10196*x10207)));
evalcond[6]=((((-1.0)*x10196*x10201))+((x10200*x10208))+(((-1.0)*r10*x10203*x10207))+(((-1.0)*x10196*x10197)));
evalcond[7]=((((-1.0)*x10212))+(((-1.0)*r20*x10196*x10207))+((x10202*x10210))+((sj3*x10199))+((r20*x10200)));
evalcond[8]=(((x10200*x10210))+(((-1.0)*r20*x10203*x10207))+(((-1.0)*cj1*x10198))+x10195+(((-1.0)*gconst1*r20*x10196))+(((-1.0)*x10196*x10199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10213=gconst2*gconst2;
IkReal x10214=gconst1*gconst1;
IkReal x10215=(r11*sj3);
IkReal x10216=(gconst1*gconst2);
IkReal x10217=((1.0)*r00);
IkReal x10218=(cj3*r11);
IkReal x10219=(cj3*r10);
IkReal x10220=((1.0)*r02);
IkReal x10221=(r10*sj3);
IkReal x10222=(r01*x10214);
CheckValue<IkReal> x10223=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x10215*x10216*x10217))+(((-1.0)*r01*x10216*x10221))+((x10215*x10222))+((r00*x10213*x10221)))),-1);
if(!x10223.valid){
continue;
}
CheckValue<IkReal> x10224 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x10218*x10220))+(((-1.0)*gconst1*x10219*x10220)))),IkReal((((r01*x10216*x10218))+((x10219*x10222))+(((-1.0)*x10213*x10217*x10218))+(((-1.0)*x10216*x10217*x10219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10223.value)))+(x10224.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10225=IKsin(j4);
IkReal x10226=IKcos(j4);
IkReal x10227=(gconst1*r01);
IkReal x10228=(gconst2*sj3);
IkReal x10229=(sj1*sj2);
IkReal x10230=(cj3*gconst1);
IkReal x10231=(cj3*gconst2);
IkReal x10232=((1.0)*cj2);
IkReal x10233=(gconst1*r11);
IkReal x10234=(gconst1*r21);
IkReal x10235=(gconst1*sj3);
IkReal x10236=((1.0)*cj1*sj2);
IkReal x10237=(sj1*x10232);
IkReal x10238=((1.0)*x10226);
IkReal x10239=((1.0)*x10225);
IkReal x10240=(sj3*x10226);
IkReal x10241=(gconst2*x10225);
IkReal x10242=(x10237+x10236);
evalcond[0]=((((-1.0)*x10234*x10239))+((r20*x10241))+(((-1.0)*r22*x10238)));
evalcond[1]=((((-1.0)*x10227*x10239))+((r00*x10241))+(((-1.0)*r02*x10238)));
evalcond[2]=((1.0)+((r10*x10241))+(((-1.0)*x10233*x10239))+(((-1.0)*r12*x10238)));
evalcond[3]=((((-1.0)*cj3*r12*x10239))+(((-1.0)*r10*x10231*x10238))+((r11*x10228))+((r11*x10226*x10230))+((r10*x10235)));
evalcond[4]=((((-1.0)*r10*x10230))+(((-1.0)*r10*x10228*x10238))+(((-1.0)*r12*sj3*x10239))+(((-1.0)*r11*x10231))+((x10233*x10240)));
evalcond[5]=((((-1.0)*cj3*r02*x10239))+(((-1.0)*r00*x10231*x10238))+((cj1*cj2))+((r00*x10235))+((cj3*x10226*x10227))+(((-1.0)*x10229))+((r01*x10228)));
evalcond[6]=((((-1.0)*r20*x10231*x10238))+(((-1.0)*cj3*r22*x10239))+(((-1.0)*x10242))+((r21*x10228))+((r21*x10226*x10230))+((r20*x10235)));
evalcond[7]=((((-1.0)*cj1*x10232))+((x10234*x10240))+(((-1.0)*r20*x10230))+(((-1.0)*r22*sj3*x10239))+(((-1.0)*r21*x10231))+x10229+(((-1.0)*r20*x10228*x10238)));
evalcond[8]=((((-1.0)*r01*x10231))+(((-1.0)*r02*sj3*x10239))+(((-1.0)*r00*x10228*x10238))+(((-1.0)*x10242))+((x10227*x10240))+(((-1.0)*r00*x10230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10243=gconst1*gconst1;
IkReal x10244=gconst2*gconst2;
IkReal x10245=(r01*r11);
IkReal x10246=(r00*r10);
IkReal x10247=(gconst2*r11);
IkReal x10248=(r02*sj3);
IkReal x10249=(r01*r10);
IkReal x10250=(gconst1*gconst2*sj3);
IkReal x10251=((1.0)*cj3*gconst1);
CheckValue<IkReal> x10252 = IKatan2WithCheck(IkReal((((gconst1*r10*x10248))+((x10247*x10248)))),IkReal((((r00*r11*sj3*x10244))+((x10246*x10250))+(((-1.0)*x10245*x10250))+(((-1.0)*sj3*x10243*x10249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10252.valid){
continue;
}
CheckValue<IkReal> x10253=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*gconst2*x10249*x10251))+((cj3*x10244*x10246))+((cj3*x10243*x10245))+(((-1.0)*r00*x10247*x10251)))),-1);
if(!x10253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10252.value)+(((1.5707963267949)*(x10253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10254=IKsin(j4);
IkReal x10255=IKcos(j4);
IkReal x10256=(gconst1*r01);
IkReal x10257=(gconst2*sj3);
IkReal x10258=(sj1*sj2);
IkReal x10259=(cj3*gconst1);
IkReal x10260=(cj3*gconst2);
IkReal x10261=((1.0)*cj2);
IkReal x10262=(gconst1*r11);
IkReal x10263=(gconst1*r21);
IkReal x10264=(gconst1*sj3);
IkReal x10265=((1.0)*cj1*sj2);
IkReal x10266=(sj1*x10261);
IkReal x10267=((1.0)*x10255);
IkReal x10268=((1.0)*x10254);
IkReal x10269=(sj3*x10255);
IkReal x10270=(gconst2*x10254);
IkReal x10271=(x10266+x10265);
evalcond[0]=((((-1.0)*r22*x10267))+((r20*x10270))+(((-1.0)*x10263*x10268)));
evalcond[1]=(((r00*x10270))+(((-1.0)*r02*x10267))+(((-1.0)*x10256*x10268)));
evalcond[2]=((1.0)+(((-1.0)*x10262*x10268))+(((-1.0)*r12*x10267))+((r10*x10270)));
evalcond[3]=((((-1.0)*cj3*r12*x10268))+((r11*x10255*x10259))+((r10*x10264))+((r11*x10257))+(((-1.0)*r10*x10260*x10267)));
evalcond[4]=((((-1.0)*r11*x10260))+(((-1.0)*r10*x10259))+(((-1.0)*r12*sj3*x10268))+((x10262*x10269))+(((-1.0)*r10*x10257*x10267)));
evalcond[5]=((((-1.0)*r00*x10260*x10267))+((r00*x10264))+((cj3*x10255*x10256))+((cj1*cj2))+(((-1.0)*x10258))+(((-1.0)*cj3*r02*x10268))+((r01*x10257)));
evalcond[6]=((((-1.0)*r20*x10260*x10267))+(((-1.0)*x10271))+((r21*x10255*x10259))+(((-1.0)*cj3*r22*x10268))+((r20*x10264))+((r21*x10257)));
evalcond[7]=((((-1.0)*r20*x10259))+(((-1.0)*r22*sj3*x10268))+(((-1.0)*r20*x10257*x10267))+(((-1.0)*r21*x10260))+((x10263*x10269))+x10258+(((-1.0)*cj1*x10261)));
evalcond[8]=((((-1.0)*r00*x10259))+(((-1.0)*r00*x10257*x10267))+(((-1.0)*x10271))+((x10256*x10269))+(((-1.0)*r02*sj3*x10268))+(((-1.0)*r01*x10260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10272 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10272.valid){
continue;
}
CheckValue<IkReal> x10273=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10272.value)+(((1.5707963267949)*(x10273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10274=IKsin(j4);
IkReal x10275=IKcos(j4);
IkReal x10276=(gconst1*r01);
IkReal x10277=(gconst2*sj3);
IkReal x10278=(sj1*sj2);
IkReal x10279=(cj3*gconst1);
IkReal x10280=(cj3*gconst2);
IkReal x10281=((1.0)*cj2);
IkReal x10282=(gconst1*r11);
IkReal x10283=(gconst1*r21);
IkReal x10284=(gconst1*sj3);
IkReal x10285=((1.0)*cj1*sj2);
IkReal x10286=(sj1*x10281);
IkReal x10287=((1.0)*x10275);
IkReal x10288=((1.0)*x10274);
IkReal x10289=(sj3*x10275);
IkReal x10290=(gconst2*x10274);
IkReal x10291=(x10285+x10286);
evalcond[0]=(((r20*x10290))+(((-1.0)*x10283*x10288))+(((-1.0)*r22*x10287)));
evalcond[1]=((((-1.0)*x10276*x10288))+(((-1.0)*r02*x10287))+((r00*x10290)));
evalcond[2]=((1.0)+(((-1.0)*x10282*x10288))+(((-1.0)*r12*x10287))+((r10*x10290)));
evalcond[3]=(((r11*x10277))+(((-1.0)*r10*x10280*x10287))+(((-1.0)*cj3*r12*x10288))+((r10*x10284))+((r11*x10275*x10279)));
evalcond[4]=((((-1.0)*r12*sj3*x10288))+(((-1.0)*r11*x10280))+(((-1.0)*r10*x10277*x10287))+(((-1.0)*r10*x10279))+((x10282*x10289)));
evalcond[5]=(((cj3*x10275*x10276))+((r01*x10277))+(((-1.0)*r00*x10280*x10287))+(((-1.0)*cj3*r02*x10288))+((cj1*cj2))+(((-1.0)*x10278))+((r00*x10284)));
evalcond[6]=(((r20*x10284))+((r21*x10275*x10279))+(((-1.0)*cj3*r22*x10288))+((r21*x10277))+(((-1.0)*x10291))+(((-1.0)*r20*x10280*x10287)));
evalcond[7]=(((x10283*x10289))+(((-1.0)*r21*x10280))+(((-1.0)*r20*x10277*x10287))+(((-1.0)*r22*sj3*x10288))+(((-1.0)*cj1*x10281))+x10278+(((-1.0)*r20*x10279)));
evalcond[8]=((((-1.0)*r01*x10280))+(((-1.0)*r00*x10277*x10287))+(((-1.0)*r02*sj3*x10288))+(((-1.0)*r00*x10279))+(((-1.0)*x10291))+((x10276*x10289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10292=((-1.0)*py);
CheckValue<IkReal> x10294 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10294.valid){
continue;
}
IkReal x10293=((-1.0)*(x10294.value));
sj5=gconst1;
cj5=gconst2;
j5=x10293;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10292);
rxp0_2=(py*r00);
rxp1_0=(r21*x10292);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x10293;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10295=((-1.0)*py);
CheckValue<IkReal> x10297 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10297.valid){
continue;
}
IkReal x10296=((-1.0)*(x10297.value));
sj5=gconst1;
cj5=gconst2;
j5=x10296;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10295);
rxp0_2=(py*r00);
rxp1_0=(r21*x10295);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x10296;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10298=((1.0)*cj3);
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=(((cj3*(r00*r00)))+(((-1.0)*x10298*(r21*r21)))+(((-1.0)*x10298)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10299=((-1.0)*py);
CheckValue<IkReal> x10301 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10301.valid){
continue;
}
IkReal x10300=((-1.0)*(x10301.value));
sj5=gconst1;
cj5=gconst2;
j5=x10300;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10299);
rxp0_2=(py*r00);
rxp1_0=(r21*x10299);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x10300;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10302=((-1.0)*py);
CheckValue<IkReal> x10304 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10304.valid){
continue;
}
IkReal x10303=((-1.0)*(x10304.value));
sj5=gconst1;
cj5=gconst2;
j5=x10303;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10302);
rxp0_2=(py*r00);
rxp1_0=(r21*x10302);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10303;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10305=((-1.0)*py);
CheckValue<IkReal> x10307 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10307.valid){
continue;
}
IkReal x10306=((-1.0)*(x10307.value));
sj5=gconst1;
cj5=gconst2;
j5=x10306;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10305);
rxp0_2=(py*r00);
rxp1_0=(r21*x10305);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10306;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10308=((-1.0)*py);
CheckValue<IkReal> x10310 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10310.valid){
continue;
}
IkReal x10309=((-1.0)*(x10310.value));
sj5=gconst1;
cj5=gconst2;
j5=x10309;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10308);
rxp0_2=(py*r00);
rxp1_0=(r21*x10308);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x10309;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10313=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x10313.valid){
continue;
}
IkReal x10311=x10313.value;
IkReal x10312=(cj0*x10311);
cj4array[0]=(((cj1*cj2*x10312))+(((-1.0)*sj1*sj2*x10312)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10314=IKsin(j4);
IkReal x10315=IKcos(j4);
IkReal x10316=(gconst2*x10314);
IkReal x10317=((1.0)*x10315);
IkReal x10318=((1.0)*gconst1*x10314);
evalcond[0]=((-1.0)*r12*x10314);
evalcond[1]=((((-1.0)*r12*x10317))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x10318))+((r20*x10316)));
evalcond[3]=((((-1.0)*r01*x10318))+((r00*x10316)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x10317))+((gconst1*r21*x10315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10320=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x10320.valid){
continue;
}
IkReal x10319=x10320.value;
cj4array[0]=(((cj1*sj2*x10319))+((cj2*sj1*x10319)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10321=IKsin(j4);
IkReal x10322=IKcos(j4);
IkReal x10323=(gconst2*r00);
IkReal x10324=((1.0)*cj0);
IkReal x10325=((1.0)*x10322);
IkReal x10326=((1.0)*gconst1*x10321);
evalcond[0]=((-1.0)*r12*x10321);
evalcond[1]=((((-1.0)*r12*x10325))+(((-1.0)*x10324)));
evalcond[2]=(((gconst2*r20*x10321))+(((-1.0)*r21*x10326)));
evalcond[3]=(((x10321*x10323))+(((-1.0)*r01*x10326)));
evalcond[4]=(((gconst1*r01*x10322))+(((-1.0)*x10323*x10325))+(((-1.0)*cj1*cj2*x10324))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10327=IKPowWithIntegerCheck(r12,-1);
if(!x10327.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x10327.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10328=IKsin(j4);
IkReal x10329=IKcos(j4);
IkReal x10330=(gconst1*r01);
IkReal x10331=(gconst1*r21);
IkReal x10332=(gconst2*r00);
IkReal x10333=((1.0)*cj2);
IkReal x10334=(gconst2*r20);
IkReal x10335=((1.0)*x10328);
IkReal x10336=((1.0)*x10329);
evalcond[0]=((-1.0)*r12*x10328);
evalcond[1]=(((x10328*x10334))+(((-1.0)*x10331*x10335)));
evalcond[2]=(((x10328*x10332))+(((-1.0)*x10330*x10335)));
evalcond[3]=((((-1.0)*x10334*x10336))+(((-1.0)*sj1*x10333))+(((-1.0)*cj1*sj2))+((x10329*x10331)));
evalcond[4]=((((-1.0)*cj0*cj1*x10333))+((x10329*x10330))+((cj0*sj1*sj2))+(((-1.0)*x10332*x10336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10337=((-1.0)*py);
CheckValue<IkReal> x10339 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10339.valid){
continue;
}
IkReal x10338=((-1.0)*(x10339.value));
sj5=gconst1;
cj5=gconst2;
j5=x10338;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10337);
rxp0_2=(py*r00);
rxp1_0=(r21*x10337);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10338;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10340=((-1.0)*py);
CheckValue<IkReal> x10342 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10342.valid){
continue;
}
IkReal x10341=((-1.0)*(x10342.value));
sj5=gconst1;
cj5=gconst2;
j5=x10341;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10340);
rxp0_2=(py*r00);
rxp1_0=(r21*x10340);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10341;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10343=((-1.0)*py);
CheckValue<IkReal> x10345 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10345.valid){
continue;
}
IkReal x10344=((-1.0)*(x10345.value));
sj5=gconst1;
cj5=gconst2;
j5=x10344;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10343);
rxp0_2=(py*r00);
rxp1_0=(r21*x10343);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x10344;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10348=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x10348.valid){
continue;
}
IkReal x10346=x10348.value;
IkReal x10347=(cj0*x10346);
cj4array[0]=((((-1.0)*sj1*sj2*x10347))+((cj1*cj2*x10347)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10349=IKsin(j4);
IkReal x10350=IKcos(j4);
IkReal x10351=(gconst2*x10349);
IkReal x10352=((1.0)*x10350);
IkReal x10353=((1.0)*gconst1*x10349);
evalcond[0]=(r12*x10349);
evalcond[1]=((((-1.0)*r12*x10352))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x10351))+(((-1.0)*r21*x10353)));
evalcond[3]=(((r00*x10351))+(((-1.0)*r01*x10353)));
evalcond[4]=((((-1.0)*gconst1*r21*x10352))+(((-1.0)*cj2*sj1))+((gconst2*r20*x10350))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10355=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x10355.valid){
continue;
}
IkReal x10354=x10355.value;
cj4array[0]=(((cj2*sj1*x10354))+((cj1*sj2*x10354)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10356=IKsin(j4);
IkReal x10357=IKcos(j4);
IkReal x10358=(gconst2*r00);
IkReal x10359=((1.0)*cj0);
IkReal x10360=((1.0)*gconst1*r01);
evalcond[0]=(r12*x10356);
evalcond[1]=((((-1.0)*x10359))+(((-1.0)*r12*x10357)));
evalcond[2]=((((-1.0)*gconst1*r21*x10356))+((gconst2*r20*x10356)));
evalcond[3]=((((-1.0)*x10356*x10360))+((x10356*x10358)));
evalcond[4]=((((-1.0)*x10357*x10360))+((cj0*sj1*sj2))+((x10357*x10358))+(((-1.0)*cj1*cj2*x10359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10361=IKPowWithIntegerCheck(r12,-1);
if(!x10361.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x10361.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10362=IKsin(j4);
IkReal x10363=IKcos(j4);
IkReal x10364=(gconst2*r00);
IkReal x10365=((1.0)*cj2);
IkReal x10366=(gconst2*r20);
IkReal x10367=((1.0)*gconst1*r01);
IkReal x10368=((1.0)*gconst1*r21);
evalcond[0]=(r12*x10362);
evalcond[1]=(((x10362*x10366))+(((-1.0)*x10362*x10368)));
evalcond[2]=(((x10362*x10364))+(((-1.0)*x10362*x10367)));
evalcond[3]=(((x10363*x10366))+(((-1.0)*cj1*sj2))+(((-1.0)*x10363*x10368))+(((-1.0)*sj1*x10365)));
evalcond[4]=(((x10363*x10364))+(((-1.0)*x10363*x10367))+(((-1.0)*cj0*cj1*x10365))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10370=IKPowWithIntegerCheck(r12,-1);
if(!x10370.valid){
continue;
}
IkReal x10369=x10370.value;
CheckValue<IkReal> x10371=IKPowWithIntegerCheck(sj3,-1);
if(!x10371.valid){
continue;
}
if( IKabs((x10369*(x10371.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x10369)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10369*(x10371.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x10369))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10369*(x10371.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x10369));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10372=IKsin(j4);
IkReal x10373=IKcos(j4);
IkReal x10374=(gconst1*r01);
IkReal x10375=(cj2*sj1);
IkReal x10376=(sj1*sj2);
IkReal x10377=((1.0)*gconst2);
IkReal x10378=(gconst1*r21);
IkReal x10379=(cj1*sj2);
IkReal x10380=(gconst1*r20);
IkReal x10381=((1.0)*cj3);
IkReal x10382=(gconst1*r00);
IkReal x10383=(gconst2*sj3);
IkReal x10384=((1.0)*x10372);
IkReal x10385=(sj3*x10373);
IkReal x10386=((1.0)*cj1*cj2);
IkReal x10387=(cj3*x10373);
IkReal x10388=(gconst2*x10372);
evalcond[0]=((((-1.0)*r12*x10373))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x10378*x10384))+((r20*x10388)));
evalcond[2]=((((-1.0)*x10374*x10384))+sj0+((r00*x10388)));
evalcond[3]=(((sj0*x10379))+((sj0*x10375))+(((-1.0)*r12*sj3*x10384)));
evalcond[4]=((((-1.0)*sj0*x10386))+((sj0*x10376))+(((-1.0)*r12*x10372*x10381)));
evalcond[5]=(((r21*x10383))+(((-1.0)*x10375))+(((-1.0)*x10379))+(((-1.0)*r20*x10377*x10387))+((x10378*x10387))+((sj3*x10380)));
evalcond[6]=((((-1.0)*x10386))+(((-1.0)*x10380*x10381))+x10376+(((-1.0)*r20*x10377*x10385))+((x10378*x10385))+(((-1.0)*cj3*r21*x10377)));
evalcond[7]=((((-1.0)*cj0*x10386))+(((-1.0)*r00*x10377*x10387))+((sj3*x10382))+((cj0*x10376))+((r01*x10383))+((x10374*x10387)));
evalcond[8]=((((-1.0)*x10381*x10382))+(((-1.0)*r00*x10377*x10385))+((cj0*x10379))+((cj0*x10375))+(((-1.0)*cj3*r01*x10377))+((x10374*x10385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10389=((1.0)*sj3);
CheckValue<IkReal> x10390=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x10390.valid){
continue;
}
CheckValue<IkReal> x10391=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*gconst2*r20))),-1);
if(!x10391.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x10390.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10391.value)*((((cj2*sj1))+(((-1.0)*gconst2*r21*x10389))+(((-1.0)*gconst1*r20*x10389))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x10390.value)))+IKsqr(((x10391.value)*((((cj2*sj1))+(((-1.0)*gconst2*r21*x10389))+(((-1.0)*gconst1*r20*x10389))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x10390.value)), ((x10391.value)*((((cj2*sj1))+(((-1.0)*gconst2*r21*x10389))+(((-1.0)*gconst1*r20*x10389))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10392=IKsin(j4);
IkReal x10393=IKcos(j4);
IkReal x10394=(gconst1*r01);
IkReal x10395=(cj2*sj1);
IkReal x10396=(sj1*sj2);
IkReal x10397=((1.0)*gconst2);
IkReal x10398=(gconst1*r21);
IkReal x10399=(cj1*sj2);
IkReal x10400=(gconst1*r20);
IkReal x10401=((1.0)*cj3);
IkReal x10402=(gconst1*r00);
IkReal x10403=(gconst2*sj3);
IkReal x10404=((1.0)*x10392);
IkReal x10405=(sj3*x10393);
IkReal x10406=((1.0)*cj1*cj2);
IkReal x10407=(cj3*x10393);
IkReal x10408=(gconst2*x10392);
evalcond[0]=((((-1.0)*r12*x10393))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x10398*x10404))+((r20*x10408)));
evalcond[2]=(sj0+(((-1.0)*x10394*x10404))+((r00*x10408)));
evalcond[3]=(((sj0*x10399))+((sj0*x10395))+(((-1.0)*r12*sj3*x10404)));
evalcond[4]=(((sj0*x10396))+(((-1.0)*r12*x10392*x10401))+(((-1.0)*sj0*x10406)));
evalcond[5]=(((r21*x10403))+((x10398*x10407))+((sj3*x10400))+(((-1.0)*x10399))+(((-1.0)*x10395))+(((-1.0)*r20*x10397*x10407)));
evalcond[6]=(((x10398*x10405))+(((-1.0)*cj3*r21*x10397))+(((-1.0)*x10406))+x10396+(((-1.0)*r20*x10397*x10405))+(((-1.0)*x10400*x10401)));
evalcond[7]=(((r01*x10403))+((sj3*x10402))+((x10394*x10407))+(((-1.0)*cj0*x10406))+((cj0*x10396))+(((-1.0)*r00*x10397*x10407)));
evalcond[8]=((((-1.0)*cj3*r01*x10397))+(((-1.0)*x10401*x10402))+((x10394*x10405))+((cj0*x10395))+((cj0*x10399))+(((-1.0)*r00*x10397*x10405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10409=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x10409.valid){
continue;
}
CheckValue<IkReal> x10410=IKPowWithIntegerCheck(r12,-1);
if(!x10410.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x10409.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10410.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x10409.value)))+IKsqr(((-1.0)*cj0*(x10410.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x10409.value)), ((-1.0)*cj0*(x10410.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10411=IKsin(j4);
IkReal x10412=IKcos(j4);
IkReal x10413=(gconst1*r01);
IkReal x10414=(cj2*sj1);
IkReal x10415=(sj1*sj2);
IkReal x10416=((1.0)*gconst2);
IkReal x10417=(gconst1*r21);
IkReal x10418=(cj1*sj2);
IkReal x10419=(gconst1*r20);
IkReal x10420=((1.0)*cj3);
IkReal x10421=(gconst1*r00);
IkReal x10422=(gconst2*sj3);
IkReal x10423=((1.0)*x10411);
IkReal x10424=(sj3*x10412);
IkReal x10425=((1.0)*cj1*cj2);
IkReal x10426=(cj3*x10412);
IkReal x10427=(gconst2*x10411);
evalcond[0]=((((-1.0)*r12*x10412))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x10417*x10423))+((r20*x10427)));
evalcond[2]=(((r00*x10427))+sj0+(((-1.0)*x10413*x10423)));
evalcond[3]=((((-1.0)*r12*sj3*x10423))+((sj0*x10414))+((sj0*x10418)));
evalcond[4]=((((-1.0)*r12*x10411*x10420))+(((-1.0)*sj0*x10425))+((sj0*x10415)));
evalcond[5]=(((x10417*x10426))+((sj3*x10419))+(((-1.0)*x10418))+(((-1.0)*x10414))+((r21*x10422))+(((-1.0)*r20*x10416*x10426)));
evalcond[6]=(((x10417*x10424))+(((-1.0)*x10419*x10420))+(((-1.0)*x10425))+x10415+(((-1.0)*r20*x10416*x10424))+(((-1.0)*cj3*r21*x10416)));
evalcond[7]=(((r01*x10422))+((cj0*x10415))+((x10413*x10426))+((sj3*x10421))+(((-1.0)*cj0*x10425))+(((-1.0)*r00*x10416*x10426)));
evalcond[8]=((((-1.0)*x10420*x10421))+((cj0*x10414))+((cj0*x10418))+((x10413*x10424))+(((-1.0)*r00*x10416*x10424))+(((-1.0)*cj3*r01*x10416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10428=gconst1*gconst1;
IkReal x10429=r21*r21;
IkReal x10430=gconst2*gconst2;
IkReal x10431=r20*r20;
IkReal x10432=(gconst2*sj3);
IkReal x10433=(gconst2*r20);
IkReal x10434=(gconst1*r21);
IkReal x10435=((1.0)*cj1*sj2);
IkReal x10436=(r20*r21*sj3);
IkReal x10437=((1.0)*cj2*sj1);
CheckValue<IkReal> x10438=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj3*x10433*x10434))+((cj3*x10430*x10431))+((cj3*(r22*r22)))+((cj3*x10428*x10429)))),-1);
if(!x10438.valid){
continue;
}
CheckValue<IkReal> x10439 = IKatan2WithCheck(IkReal((((gconst1*r20*r22*sj3))+(((-1.0)*r22*x10437))+(((-1.0)*r22*x10435))+((r21*r22*x10432)))),IkReal((((x10430*x10436))+((cj2*sj1*x10434))+(((-1.0)*x10428*x10436))+((gconst1*x10431*x10432))+(((-1.0)*x10433*x10435))+(((-1.0)*x10433*x10437))+((cj1*sj2*x10434))+(((-1.0)*gconst1*x10429*x10432)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10438.value)))+(x10439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10440=IKsin(j4);
IkReal x10441=IKcos(j4);
IkReal x10442=(gconst2*sj3);
IkReal x10443=(gconst1*r01);
IkReal x10444=(sj1*sj2);
IkReal x10445=(cj3*gconst1);
IkReal x10446=(cj3*gconst2);
IkReal x10447=(gconst1*r11);
IkReal x10448=(cj2*sj1);
IkReal x10449=(gconst1*r21);
IkReal x10450=(cj1*sj2);
IkReal x10451=(gconst1*sj3);
IkReal x10452=((1.0)*x10441);
IkReal x10453=((1.0)*x10440);
IkReal x10454=(sj3*x10441);
IkReal x10455=((1.0)*cj1*cj2);
IkReal x10456=(gconst2*x10440);
evalcond[0]=((((-1.0)*x10449*x10453))+(((-1.0)*r22*x10452))+((r20*x10456)));
evalcond[1]=(sj0+(((-1.0)*r02*x10452))+((r00*x10456))+(((-1.0)*x10443*x10453)));
evalcond[2]=((((-1.0)*x10447*x10453))+((r10*x10456))+(((-1.0)*r12*x10452))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x10448))+(((-1.0)*cj3*r22*x10453))+(((-1.0)*x10450))+((r21*x10442))+(((-1.0)*r20*x10446*x10452))+((r21*x10441*x10445))+((r20*x10451)));
evalcond[4]=((((-1.0)*r21*x10446))+((x10449*x10454))+(((-1.0)*r20*x10445))+(((-1.0)*r22*sj3*x10453))+(((-1.0)*r20*x10442*x10452))+x10444+(((-1.0)*x10455)));
evalcond[5]=((((-1.0)*r00*x10446*x10452))+(((-1.0)*cj0*x10455))+((cj0*x10444))+((r00*x10451))+((cj3*x10441*x10443))+(((-1.0)*cj3*r02*x10453))+((r01*x10442)));
evalcond[6]=(((r10*x10451))+((r11*x10441*x10445))+(((-1.0)*cj3*r12*x10453))+((sj0*x10444))+(((-1.0)*sj0*x10455))+((r11*x10442))+(((-1.0)*r10*x10446*x10452)));
evalcond[7]=(((x10443*x10454))+((cj0*x10448))+((cj0*x10450))+(((-1.0)*r02*sj3*x10453))+(((-1.0)*r00*x10445))+(((-1.0)*r01*x10446))+(((-1.0)*r00*x10442*x10452)));
evalcond[8]=((((-1.0)*r11*x10446))+((sj0*x10448))+((x10447*x10454))+((sj0*x10450))+(((-1.0)*r10*x10445))+(((-1.0)*r10*x10442*x10452))+(((-1.0)*r12*sj3*x10453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10457=((1.0)*gconst1);
CheckValue<IkReal> x10458 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*r21*x10457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10458.valid){
continue;
}
CheckValue<IkReal> x10459=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10457))+(((-1.0)*gconst2*r01)))),-1);
if(!x10459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10458.value)+(((1.5707963267949)*(x10459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10460=IKsin(j4);
IkReal x10461=IKcos(j4);
IkReal x10462=(gconst2*sj3);
IkReal x10463=(gconst1*r01);
IkReal x10464=(sj1*sj2);
IkReal x10465=(cj3*gconst1);
IkReal x10466=(cj3*gconst2);
IkReal x10467=(gconst1*r11);
IkReal x10468=(cj2*sj1);
IkReal x10469=(gconst1*r21);
IkReal x10470=(cj1*sj2);
IkReal x10471=(gconst1*sj3);
IkReal x10472=((1.0)*x10461);
IkReal x10473=((1.0)*x10460);
IkReal x10474=(sj3*x10461);
IkReal x10475=((1.0)*cj1*cj2);
IkReal x10476=(gconst2*x10460);
evalcond[0]=(((r20*x10476))+(((-1.0)*r22*x10472))+(((-1.0)*x10469*x10473)));
evalcond[1]=((((-1.0)*r02*x10472))+sj0+((r00*x10476))+(((-1.0)*x10463*x10473)));
evalcond[2]=((((-1.0)*x10467*x10473))+(((-1.0)*cj0))+((r10*x10476))+(((-1.0)*r12*x10472)));
evalcond[3]=((((-1.0)*x10470))+(((-1.0)*x10468))+((r20*x10471))+(((-1.0)*r20*x10466*x10472))+(((-1.0)*cj3*r22*x10473))+((r21*x10461*x10465))+((r21*x10462)));
evalcond[4]=((((-1.0)*r20*x10465))+(((-1.0)*r20*x10462*x10472))+(((-1.0)*r22*sj3*x10473))+(((-1.0)*r21*x10466))+x10464+((x10469*x10474))+(((-1.0)*x10475)));
evalcond[5]=((((-1.0)*r00*x10466*x10472))+((r01*x10462))+((cj0*x10464))+((r00*x10471))+((cj3*x10461*x10463))+(((-1.0)*cj3*r02*x10473))+(((-1.0)*cj0*x10475)));
evalcond[6]=((((-1.0)*r10*x10466*x10472))+((r11*x10461*x10465))+(((-1.0)*cj3*r12*x10473))+(((-1.0)*sj0*x10475))+((sj0*x10464))+((r11*x10462))+((r10*x10471)));
evalcond[7]=((((-1.0)*r00*x10465))+(((-1.0)*r00*x10462*x10472))+((cj0*x10468))+((cj0*x10470))+(((-1.0)*r01*x10466))+((x10463*x10474))+(((-1.0)*r02*sj3*x10473)));
evalcond[8]=((((-1.0)*r11*x10466))+((sj0*x10470))+((sj0*x10468))+(((-1.0)*r10*x10465))+((x10467*x10474))+(((-1.0)*r10*x10462*x10472))+(((-1.0)*r12*sj3*x10473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10477=((1.0)*gconst1);
CheckValue<IkReal> x10478 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst2*r20*sj0))+(((-1.0)*r21*sj0*x10477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10478.valid){
continue;
}
CheckValue<IkReal> x10479=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x10477)))),-1);
if(!x10479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10478.value)+(((1.5707963267949)*(x10479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10480=IKsin(j4);
IkReal x10481=IKcos(j4);
IkReal x10482=(gconst2*sj3);
IkReal x10483=(gconst1*r01);
IkReal x10484=(sj1*sj2);
IkReal x10485=(cj3*gconst1);
IkReal x10486=(cj3*gconst2);
IkReal x10487=(gconst1*r11);
IkReal x10488=(cj2*sj1);
IkReal x10489=(gconst1*r21);
IkReal x10490=(cj1*sj2);
IkReal x10491=(gconst1*sj3);
IkReal x10492=((1.0)*x10481);
IkReal x10493=((1.0)*x10480);
IkReal x10494=(sj3*x10481);
IkReal x10495=((1.0)*cj1*cj2);
IkReal x10496=(gconst2*x10480);
evalcond[0]=((((-1.0)*x10489*x10493))+(((-1.0)*r22*x10492))+((r20*x10496)));
evalcond[1]=(sj0+(((-1.0)*r02*x10492))+(((-1.0)*x10483*x10493))+((r00*x10496)));
evalcond[2]=(((r10*x10496))+(((-1.0)*r12*x10492))+(((-1.0)*x10487*x10493))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r20*x10486*x10492))+((r21*x10482))+(((-1.0)*x10490))+(((-1.0)*x10488))+((r21*x10481*x10485))+(((-1.0)*cj3*r22*x10493))+((r20*x10491)));
evalcond[4]=((((-1.0)*r20*x10485))+((x10489*x10494))+(((-1.0)*r22*sj3*x10493))+(((-1.0)*r21*x10486))+(((-1.0)*x10495))+x10484+(((-1.0)*r20*x10482*x10492)));
evalcond[5]=(((cj3*x10481*x10483))+(((-1.0)*r00*x10486*x10492))+((cj0*x10484))+(((-1.0)*cj0*x10495))+(((-1.0)*cj3*r02*x10493))+((r00*x10491))+((r01*x10482)));
evalcond[6]=(((r10*x10491))+((r11*x10482))+(((-1.0)*sj0*x10495))+(((-1.0)*r10*x10486*x10492))+((sj0*x10484))+(((-1.0)*cj3*r12*x10493))+((r11*x10481*x10485)));
evalcond[7]=((((-1.0)*r01*x10486))+(((-1.0)*r00*x10482*x10492))+((cj0*x10488))+((x10483*x10494))+((cj0*x10490))+(((-1.0)*r02*sj3*x10493))+(((-1.0)*r00*x10485)));
evalcond[8]=((((-1.0)*r10*x10485))+(((-1.0)*r12*sj3*x10493))+(((-1.0)*r10*x10482*x10492))+((x10487*x10494))+((sj0*x10488))+((sj0*x10490))+(((-1.0)*r11*x10486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10498 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10498)==0){
continue;
}
IkReal x10497=pow(x10498,-0.5);
CheckValue<IkReal> x10499 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10499.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10499.value))));
IkReal gconst4=((1.0)*r21*x10497);
IkReal gconst5=((-1.0)*r20*x10497);
CheckValue<IkReal> x10500 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10500.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10500.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10503 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10503.valid){
continue;
}
IkReal x10501=((1.0)*(x10503.value));
IkReal x10502=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10501)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10501)));
IkReal gconst4=((1.0)*r21*x10502);
IkReal gconst5=((-1.0)*r20*x10502);
IkReal x10504=r22*r22;
IkReal x10505=((1.0)*x10504);
CheckValue<IkReal> x10509=IKPowWithIntegerCheck(((-1.0)+x10504),-1);
if(!x10509.valid){
continue;
}
IkReal x10506=x10509.value;
if((((1.0)+(((-1.0)*x10505)))) < -0.00001)
continue;
IkReal x10507=IKsqrt(((1.0)+(((-1.0)*x10505))));
IkReal x10508=(sj0*x10506*x10507);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x10508+(((-1.0)*x10505*x10508))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10512 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10512.valid){
continue;
}
IkReal x10510=((1.0)*(x10512.value));
IkReal x10511=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10510)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10510)));
IkReal gconst4=((1.0)*r21*x10511);
IkReal gconst5=((-1.0)*r20*x10511);
IkReal x10513=r22*r22;
IkReal x10514=((1.0)*x10513);
CheckValue<IkReal> x10518=IKPowWithIntegerCheck(((-1.0)+x10513),-1);
if(!x10518.valid){
continue;
}
IkReal x10515=x10518.value;
if((((1.0)+(((-1.0)*x10514)))) < -0.00001)
continue;
IkReal x10516=IKsqrt(((1.0)+(((-1.0)*x10514))));
IkReal x10517=(cj0*x10515*x10516);
j4eval[0]=((IKabs(((((-1.0)*x10514*x10517))+x10517)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10521 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10521.valid){
continue;
}
IkReal x10519=((1.0)*(x10521.value));
IkReal x10520=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10519)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10519)));
IkReal gconst4=((1.0)*r21*x10520);
IkReal gconst5=((-1.0)*r20*x10520);
IkReal x10522=r22*r22;
IkReal x10523=(cj0*r02);
IkReal x10524=(r12*sj0);
CheckValue<IkReal> x10528=IKPowWithIntegerCheck(((-1.0)+x10522),-1);
if(!x10528.valid){
continue;
}
IkReal x10525=x10528.value;
if((((1.0)+(((-1.0)*x10522)))) < -0.00001)
continue;
IkReal x10526=IKsqrt(((1.0)+(((-1.0)*x10522))));
IkReal x10527=((1.0)*r22*x10525*x10526);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x10523*x10527))+(((-1.0)*x10524*x10527)))))+(IKabs((x10524+x10523))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10531 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10531.valid){
continue;
}
IkReal x10529=((1.0)*(x10531.value));
IkReal x10530=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10529)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10529)));
IkReal gconst4=((1.0)*r21*x10530);
IkReal gconst5=((-1.0)*r20*x10530);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10534 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10534.valid){
continue;
}
IkReal x10532=((1.0)*(x10534.value));
IkReal x10533=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10532)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10532)));
IkReal gconst4=((1.0)*r21*x10533);
IkReal gconst5=((-1.0)*r20*x10533);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10537 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10537.valid){
continue;
}
IkReal x10535=((1.0)*(x10537.value));
IkReal x10536=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10535)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10535)));
IkReal gconst4=((1.0)*r21*x10536);
IkReal gconst5=((-1.0)*r20*x10536);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10540 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10540.valid){
continue;
}
IkReal x10538=((1.0)*(x10540.value));
IkReal x10539=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10538)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10538)));
IkReal gconst4=((1.0)*r21*x10539);
IkReal gconst5=((-1.0)*r20*x10539);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10543 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10543.valid){
continue;
}
IkReal x10541=((1.0)*(x10543.value));
IkReal x10542=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10541)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10541)));
IkReal gconst4=((1.0)*r21*x10542);
IkReal gconst5=((-1.0)*r20*x10542);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10546 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10546.valid){
continue;
}
IkReal x10544=((1.0)*(x10546.value));
IkReal x10545=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10544)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10544)));
IkReal gconst4=((1.0)*r21*x10545);
IkReal gconst5=((-1.0)*r20*x10545);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10547=(gconst4*r01);
IkReal x10548=(gconst5*r00);
CheckValue<IkReal> x10549 = IKatan2WithCheck(IkReal(((((-1.0)*x10548))+x10547)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10549.valid){
continue;
}
CheckValue<IkReal> x10550=IKPowWithIntegerCheck(IKsign(((x10547*x10547)+(x10548*x10548)+(r02*r02)+(((-2.0)*x10547*x10548)))),-1);
if(!x10550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10549.value)+(((1.5707963267949)*(x10550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10551=IKsin(j4);
IkReal x10552=IKcos(j4);
IkReal x10553=(gconst4*r21);
IkReal x10554=(gconst5*r10);
IkReal x10555=(gconst4*r11);
IkReal x10556=(gconst4*r01);
IkReal x10557=((1.0)*x10552);
IkReal x10558=((1.0)*x10551);
IkReal x10559=(gconst5*x10551);
evalcond[0]=(((r20*x10559))+(((-1.0)*x10553*x10558))+(((-1.0)*r22*x10557)));
evalcond[1]=(((x10551*x10554))+(((-1.0)*r12*x10557))+(((-1.0)*x10555*x10558)));
evalcond[2]=(((x10552*x10556))+(((-1.0)*r02*x10558))+(((-1.0)*gconst5*r00*x10557)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10557))+(((-1.0)*x10556*x10558))+((r00*x10559)));
evalcond[4]=((((-1.0)*x10554*x10557))+((x10552*x10555))+((cj2*sj1))+(((-1.0)*r12*x10558))+((cj1*sj2)));
evalcond[5]=(((x10552*x10553))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10557))+(((-1.0)*r22*x10558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10560=((1.0)*gconst4);
CheckValue<IkReal> x10561 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*r21*x10560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10561.valid){
continue;
}
CheckValue<IkReal> x10562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10560))+(((-1.0)*gconst5*r11)))),-1);
if(!x10562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10561.value)+(((1.5707963267949)*(x10562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10563=IKsin(j4);
IkReal x10564=IKcos(j4);
IkReal x10565=(gconst4*r21);
IkReal x10566=(gconst5*r10);
IkReal x10567=(gconst4*r11);
IkReal x10568=(gconst4*r01);
IkReal x10569=((1.0)*x10564);
IkReal x10570=((1.0)*x10563);
IkReal x10571=(gconst5*x10563);
evalcond[0]=(((r20*x10571))+(((-1.0)*r22*x10569))+(((-1.0)*x10565*x10570)));
evalcond[1]=((((-1.0)*r12*x10569))+(((-1.0)*x10567*x10570))+((x10563*x10566)));
evalcond[2]=(((x10564*x10568))+(((-1.0)*r02*x10570))+(((-1.0)*gconst5*r00*x10569)));
evalcond[3]=((1.0)+((r00*x10571))+(((-1.0)*x10568*x10570))+(((-1.0)*r02*x10569)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x10570))+(((-1.0)*x10566*x10569))+((x10564*x10567)));
evalcond[5]=((((-1.0)*r22*x10570))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10569))+((x10564*x10565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10572 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10572.valid){
continue;
}
CheckValue<IkReal> x10573=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10572.value)+(((1.5707963267949)*(x10573.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10574=IKsin(j4);
IkReal x10575=IKcos(j4);
IkReal x10576=(gconst4*r21);
IkReal x10577=(gconst5*r10);
IkReal x10578=(gconst4*r11);
IkReal x10579=(gconst4*r01);
IkReal x10580=((1.0)*x10575);
IkReal x10581=((1.0)*x10574);
IkReal x10582=(gconst5*x10574);
evalcond[0]=((((-1.0)*r22*x10580))+(((-1.0)*x10576*x10581))+((r20*x10582)));
evalcond[1]=((((-1.0)*x10578*x10581))+((x10574*x10577))+(((-1.0)*r12*x10580)));
evalcond[2]=(((x10575*x10579))+(((-1.0)*r02*x10581))+(((-1.0)*gconst5*r00*x10580)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10580))+(((-1.0)*x10579*x10581))+((r00*x10582)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10577*x10580))+((cj1*sj2))+((x10575*x10578))+(((-1.0)*r12*x10581)));
evalcond[5]=((((-1.0)*r22*x10581))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10580))+((x10575*x10576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10585 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10585.valid){
continue;
}
IkReal x10583=((1.0)*(x10585.value));
IkReal x10584=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10583)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10583)));
IkReal gconst4=((1.0)*r21*x10584);
IkReal gconst5=((-1.0)*r20*x10584);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10588 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10588.valid){
continue;
}
IkReal x10586=((1.0)*(x10588.value));
IkReal x10587=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10586)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10586)));
IkReal gconst4=((1.0)*r21*x10587);
IkReal gconst5=((-1.0)*r20*x10587);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10591 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10591.valid){
continue;
}
IkReal x10589=((1.0)*(x10591.value));
IkReal x10590=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10589)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10589)));
IkReal gconst4=((1.0)*r21*x10590);
IkReal gconst5=((-1.0)*r20*x10590);
IkReal x10592=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10596=IKPowWithIntegerCheck(x10592,-1);
if(!x10596.valid){
continue;
}
IkReal x10593=x10596.value;
IkReal x10594=((1.0)*x10593);
IkReal x10595=((((-2.0)*r00*r01*r20*r21*x10593))+(((-1.0)*(r02*r02)))+(((-1.0)*x10594*(r00*r00)*(r20*r20)))+(((-1.0)*x10594*(r01*r01)*(r21*r21))));
j4eval[0]=x10595;
j4eval[1]=r02;
j4eval[2]=x10592;
j4eval[3]=IKsign(x10595);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10597=(gconst5*r00);
IkReal x10598=(gconst4*r01);
CheckValue<IkReal> x10599=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10598*x10598)))+(((-1.0)*(r02*r02)))+(((2.0)*x10597*x10598))+(((-1.0)*(x10597*x10597))))),-1);
if(!x10599.valid){
continue;
}
CheckValue<IkReal> x10600 = IKatan2WithCheck(IkReal(((((-1.0)*x10598))+x10597)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10599.value)))+(x10600.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10601=IKcos(j4);
IkReal x10602=IKsin(j4);
IkReal x10603=((1.0)*x10601);
IkReal x10604=(gconst5*x10601);
IkReal x10605=(gconst5*x10602);
IkReal x10606=((1.0)*gconst4*x10602);
evalcond[0]=(((r00*x10604))+((r02*x10602))+(((-1.0)*gconst4*r01*x10603)));
evalcond[1]=((((-1.0)*r21*x10606))+(((-1.0)*r22*x10603))+((r20*x10605)));
evalcond[2]=((((-1.0)*r11*x10606))+(((-1.0)*r12*x10603))+((r10*x10605)));
evalcond[3]=((1.0)+((r00*x10605))+(((-1.0)*r01*x10606))+(((-1.0)*r02*x10603)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r11*x10603))+((r12*x10602))+((r10*x10604))+((cj1*sj2)));
evalcond[5]=((((-1.0)*gconst4*r21*x10603))+((r22*x10602))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x10604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10607=((1.0)*gconst4);
CheckValue<IkReal> x10608 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10607))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10608.valid){
continue;
}
CheckValue<IkReal> x10609=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r11))+(((-1.0)*r10*x10607)))),-1);
if(!x10609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10608.value)+(((1.5707963267949)*(x10609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10610=IKcos(j4);
IkReal x10611=IKsin(j4);
IkReal x10612=((1.0)*x10610);
IkReal x10613=(gconst5*x10610);
IkReal x10614=(gconst5*x10611);
IkReal x10615=((1.0)*gconst4*x10611);
evalcond[0]=(((r02*x10611))+((r00*x10613))+(((-1.0)*gconst4*r01*x10612)));
evalcond[1]=((((-1.0)*r21*x10615))+((r20*x10614))+(((-1.0)*r22*x10612)));
evalcond[2]=(((r10*x10614))+(((-1.0)*r11*x10615))+(((-1.0)*r12*x10612)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10612))+((r00*x10614))+(((-1.0)*r01*x10615)));
evalcond[4]=(((r12*x10611))+((cj2*sj1))+(((-1.0)*gconst4*r11*x10612))+((cj1*sj2))+((r10*x10613)));
evalcond[5]=(((r22*x10611))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x10613))+(((-1.0)*gconst4*r21*x10612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10616 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10616.valid){
continue;
}
CheckValue<IkReal> x10617=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10616.value)+(((1.5707963267949)*(x10617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10618=IKcos(j4);
IkReal x10619=IKsin(j4);
IkReal x10620=((1.0)*x10618);
IkReal x10621=(gconst5*x10618);
IkReal x10622=(gconst5*x10619);
IkReal x10623=((1.0)*gconst4*x10619);
evalcond[0]=(((r02*x10619))+((r00*x10621))+(((-1.0)*gconst4*r01*x10620)));
evalcond[1]=(((r20*x10622))+(((-1.0)*r22*x10620))+(((-1.0)*r21*x10623)));
evalcond[2]=((((-1.0)*r12*x10620))+((r10*x10622))+(((-1.0)*r11*x10623)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10620))+((r00*x10622))+(((-1.0)*r01*x10623)));
evalcond[4]=(((r12*x10619))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r11*x10620))+((r10*x10621)));
evalcond[5]=(((r22*x10619))+((r20*x10621))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x10620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10626 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10626.valid){
continue;
}
IkReal x10624=((1.0)*(x10626.value));
IkReal x10625=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10624)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10624)));
IkReal gconst4=((1.0)*r21*x10625);
IkReal gconst5=((-1.0)*r20*x10625);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10629 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10629.valid){
continue;
}
IkReal x10627=((1.0)*(x10629.value));
IkReal x10628=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10627)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10627)));
IkReal gconst4=((1.0)*r21*x10628);
IkReal gconst5=((-1.0)*r20*x10628);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10632 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10632.valid){
continue;
}
IkReal x10630=((1.0)*(x10632.value));
IkReal x10631=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10630)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10630)));
IkReal gconst4=((1.0)*r21*x10631);
IkReal gconst5=((-1.0)*r20*x10631);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10633=(gconst4*r01);
IkReal x10634=(gconst5*r00);
CheckValue<IkReal> x10635 = IKatan2WithCheck(IkReal(((((-1.0)*x10634))+x10633)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10635.valid){
continue;
}
CheckValue<IkReal> x10636=IKPowWithIntegerCheck(IKsign(((x10634*x10634)+(r02*r02)+(((-2.0)*x10633*x10634))+(x10633*x10633))),-1);
if(!x10636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10635.value)+(((1.5707963267949)*(x10636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10637=IKsin(j4);
IkReal x10638=IKcos(j4);
IkReal x10639=(gconst4*r21);
IkReal x10640=(gconst5*r10);
IkReal x10641=((1.0)*cj2);
IkReal x10642=(gconst4*r11);
IkReal x10643=(gconst4*r01);
IkReal x10644=((1.0)*x10638);
IkReal x10645=((1.0)*x10637);
IkReal x10646=(gconst5*x10637);
evalcond[0]=(((r20*x10646))+(((-1.0)*x10639*x10645))+(((-1.0)*r22*x10644)));
evalcond[1]=(((x10637*x10640))+(((-1.0)*r12*x10644))+(((-1.0)*x10642*x10645)));
evalcond[2]=((((-1.0)*r02*x10645))+(((-1.0)*gconst5*r00*x10644))+((x10638*x10643)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10644))+((r00*x10646))+(((-1.0)*x10643*x10645)));
evalcond[4]=(((x10638*x10642))+(((-1.0)*x10640*x10644))+((sj1*sj2))+(((-1.0)*r12*x10645))+(((-1.0)*cj1*x10641)));
evalcond[5]=((((-1.0)*gconst5*r20*x10644))+((x10638*x10639))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x10645))+(((-1.0)*sj1*x10641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10647=((1.0)*gconst4);
CheckValue<IkReal> x10648 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*r21*x10647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10648.valid){
continue;
}
CheckValue<IkReal> x10649=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10647))+(((-1.0)*gconst5*r11)))),-1);
if(!x10649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10648.value)+(((1.5707963267949)*(x10649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10650=IKsin(j4);
IkReal x10651=IKcos(j4);
IkReal x10652=(gconst4*r21);
IkReal x10653=(gconst5*r10);
IkReal x10654=((1.0)*cj2);
IkReal x10655=(gconst4*r11);
IkReal x10656=(gconst4*r01);
IkReal x10657=((1.0)*x10651);
IkReal x10658=((1.0)*x10650);
IkReal x10659=(gconst5*x10650);
evalcond[0]=((((-1.0)*r22*x10657))+(((-1.0)*x10652*x10658))+((r20*x10659)));
evalcond[1]=((((-1.0)*r12*x10657))+(((-1.0)*x10655*x10658))+((x10650*x10653)));
evalcond[2]=((((-1.0)*gconst5*r00*x10657))+((x10651*x10656))+(((-1.0)*r02*x10658)));
evalcond[3]=((1.0)+((r00*x10659))+(((-1.0)*x10656*x10658))+(((-1.0)*r02*x10657)));
evalcond[4]=((((-1.0)*r12*x10658))+(((-1.0)*x10653*x10657))+((sj1*sj2))+((x10651*x10655))+(((-1.0)*cj1*x10654)));
evalcond[5]=((((-1.0)*sj1*x10654))+(((-1.0)*r22*x10658))+(((-1.0)*cj1*sj2))+((x10651*x10652))+(((-1.0)*gconst5*r20*x10657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10660 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10660.valid){
continue;
}
CheckValue<IkReal> x10661=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10660.value)+(((1.5707963267949)*(x10661.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10662=IKsin(j4);
IkReal x10663=IKcos(j4);
IkReal x10664=(gconst4*r21);
IkReal x10665=(gconst5*r10);
IkReal x10666=((1.0)*cj2);
IkReal x10667=(gconst4*r11);
IkReal x10668=(gconst4*r01);
IkReal x10669=((1.0)*x10663);
IkReal x10670=((1.0)*x10662);
IkReal x10671=(gconst5*x10662);
evalcond[0]=((((-1.0)*x10664*x10670))+(((-1.0)*r22*x10669))+((r20*x10671)));
evalcond[1]=((((-1.0)*r12*x10669))+((x10662*x10665))+(((-1.0)*x10667*x10670)));
evalcond[2]=((((-1.0)*r02*x10670))+(((-1.0)*gconst5*r00*x10669))+((x10663*x10668)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10669))+((r00*x10671))+(((-1.0)*x10668*x10670)));
evalcond[4]=((((-1.0)*x10665*x10669))+((sj1*sj2))+(((-1.0)*cj1*x10666))+((x10663*x10667))+(((-1.0)*r12*x10670)));
evalcond[5]=((((-1.0)*gconst5*r20*x10669))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x10670))+((x10663*x10664))+(((-1.0)*sj1*x10666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10674 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10674.valid){
continue;
}
IkReal x10672=((1.0)*(x10674.value));
IkReal x10673=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10672)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10672)));
IkReal gconst4=((1.0)*r21*x10673);
IkReal gconst5=((-1.0)*r20*x10673);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10677 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10677.valid){
continue;
}
IkReal x10675=((1.0)*(x10677.value));
IkReal x10676=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10675)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10675)));
IkReal gconst4=((1.0)*r21*x10676);
IkReal gconst5=((-1.0)*r20*x10676);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10680 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10680.valid){
continue;
}
IkReal x10678=((1.0)*(x10680.value));
IkReal x10679=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10678)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10678)));
IkReal gconst4=((1.0)*r21*x10679);
IkReal gconst5=((-1.0)*r20*x10679);
IkReal x10681=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10685=IKPowWithIntegerCheck(x10681,-1);
if(!x10685.valid){
continue;
}
IkReal x10682=x10685.value;
IkReal x10683=((1.0)*x10682);
IkReal x10684=((((-1.0)*x10683*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10683*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10682)));
j4eval[0]=x10684;
j4eval[1]=r02;
j4eval[2]=x10681;
j4eval[3]=IKsign(x10684);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10686=(gconst5*r00);
IkReal x10687=(gconst4*r01);
CheckValue<IkReal> x10688=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10687*x10687)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10686*x10686)))+(((2.0)*x10686*x10687)))),-1);
if(!x10688.valid){
continue;
}
CheckValue<IkReal> x10689 = IKatan2WithCheck(IkReal(((((-1.0)*x10687))+x10686)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10688.value)))+(x10689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10690=IKcos(j4);
IkReal x10691=IKsin(j4);
IkReal x10692=((1.0)*cj2);
IkReal x10693=((1.0)*x10690);
IkReal x10694=(gconst5*x10690);
IkReal x10695=(gconst5*x10691);
IkReal x10696=((1.0)*gconst4*x10691);
evalcond[0]=(((r02*x10691))+(((-1.0)*gconst4*r01*x10693))+((r00*x10694)));
evalcond[1]=((((-1.0)*r21*x10696))+(((-1.0)*r22*x10693))+((r20*x10695)));
evalcond[2]=(((r10*x10695))+(((-1.0)*r11*x10696))+(((-1.0)*r12*x10693)));
evalcond[3]=((1.0)+(((-1.0)*r01*x10696))+(((-1.0)*r02*x10693))+((r00*x10695)));
evalcond[4]=(((r10*x10694))+((sj1*sj2))+(((-1.0)*cj1*x10692))+((r12*x10691))+(((-1.0)*gconst4*r11*x10693)));
evalcond[5]=((((-1.0)*gconst4*r21*x10693))+(((-1.0)*cj1*sj2))+((r22*x10691))+(((-1.0)*sj1*x10692))+((r20*x10694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10697=((1.0)*gconst4);
CheckValue<IkReal> x10698=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10697))+(((-1.0)*gconst5*r11)))),-1);
if(!x10698.valid){
continue;
}
CheckValue<IkReal> x10699 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10697))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10698.value)))+(x10699.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10700=IKcos(j4);
IkReal x10701=IKsin(j4);
IkReal x10702=((1.0)*cj2);
IkReal x10703=((1.0)*x10700);
IkReal x10704=(gconst5*x10700);
IkReal x10705=(gconst5*x10701);
IkReal x10706=((1.0)*gconst4*x10701);
evalcond[0]=(((r00*x10704))+(((-1.0)*gconst4*r01*x10703))+((r02*x10701)));
evalcond[1]=((((-1.0)*r22*x10703))+((r20*x10705))+(((-1.0)*r21*x10706)));
evalcond[2]=((((-1.0)*r12*x10703))+((r10*x10705))+(((-1.0)*r11*x10706)));
evalcond[3]=((1.0)+((r00*x10705))+(((-1.0)*r02*x10703))+(((-1.0)*r01*x10706)));
evalcond[4]=(((sj1*sj2))+((r12*x10701))+((r10*x10704))+(((-1.0)*gconst4*r11*x10703))+(((-1.0)*cj1*x10702)));
evalcond[5]=((((-1.0)*gconst4*r21*x10703))+(((-1.0)*sj1*x10702))+(((-1.0)*cj1*sj2))+((r22*x10701))+((r20*x10704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10707 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10707.valid){
continue;
}
CheckValue<IkReal> x10708=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10707.value)+(((1.5707963267949)*(x10708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10709=IKcos(j4);
IkReal x10710=IKsin(j4);
IkReal x10711=((1.0)*cj2);
IkReal x10712=((1.0)*x10709);
IkReal x10713=(gconst5*x10709);
IkReal x10714=(gconst5*x10710);
IkReal x10715=((1.0)*gconst4*x10710);
evalcond[0]=(((r00*x10713))+(((-1.0)*gconst4*r01*x10712))+((r02*x10710)));
evalcond[1]=((((-1.0)*r21*x10715))+((r20*x10714))+(((-1.0)*r22*x10712)));
evalcond[2]=((((-1.0)*r12*x10712))+(((-1.0)*r11*x10715))+((r10*x10714)));
evalcond[3]=((1.0)+(((-1.0)*r01*x10715))+((r00*x10714))+(((-1.0)*r02*x10712)));
evalcond[4]=((((-1.0)*cj1*x10711))+((r12*x10710))+(((-1.0)*gconst4*r11*x10712))+((sj1*sj2))+((r10*x10713)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r20*x10713))+(((-1.0)*sj1*x10711))+((r22*x10710))+(((-1.0)*gconst4*r21*x10712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10716=gconst4*gconst4;
IkReal x10717=gconst5*gconst5;
IkReal x10718=(cj3*r20);
IkReal x10719=(r00*sj3);
IkReal x10720=(r01*sj3);
IkReal x10721=(gconst4*gconst5);
IkReal x10722=(r21*x10716);
IkReal x10723=((1.0)*r01*x10721);
CheckValue<IkReal> x10724=IKPowWithIntegerCheck(IKsign((((cj3*r01*x10722))+(((-1.0)*x10718*x10723))+((cj3*r02*r22))+((r00*x10717*x10718))+(((-1.0)*cj3*r00*r21*x10721)))),-1);
if(!x10724.valid){
continue;
}
CheckValue<IkReal> x10725 = IKatan2WithCheck(IkReal((((gconst5*r22*x10720))+((gconst4*r22*x10719)))),IkReal(((((-1.0)*r21*x10720*x10721))+((r20*x10717*x10720))+((r20*x10719*x10721))+(((-1.0)*x10719*x10722)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10724.value)))+(x10725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10726=IKsin(j4);
IkReal x10727=IKcos(j4);
IkReal x10728=(sj1*sj2);
IkReal x10729=(gconst5*sj3);
IkReal x10730=((1.0)*r21);
IkReal x10731=(cj3*gconst5);
IkReal x10732=((1.0)*cj1);
IkReal x10733=(gconst4*r11);
IkReal x10734=(cj2*sj1);
IkReal x10735=(cj3*gconst4);
IkReal x10736=(gconst4*sj3);
IkReal x10737=(cj2*x10732);
IkReal x10738=((1.0)*x10727);
IkReal x10739=((1.0)*x10726);
IkReal x10740=(gconst5*x10726);
IkReal x10741=(x10727*x10736);
evalcond[0]=((((-1.0)*r22*x10738))+((r20*x10740))+(((-1.0)*gconst4*x10726*x10730)));
evalcond[1]=((((-1.0)*x10733*x10739))+((r10*x10740))+(((-1.0)*r12*x10738)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10738))+(((-1.0)*gconst4*r01*x10739))+((r00*x10740)));
evalcond[3]=((((-1.0)*cj3*r02*x10739))+((r01*x10727*x10735))+((r01*x10729))+((r00*x10736))+(((-1.0)*r00*x10731*x10738)));
evalcond[4]=((((-1.0)*r02*sj3*x10739))+(((-1.0)*r00*x10729*x10738))+(((-1.0)*r01*x10731))+(((-1.0)*r00*x10735))+((r01*x10741)));
evalcond[5]=((((-1.0)*r10*x10731*x10738))+((r10*x10736))+((cj3*x10727*x10733))+(((-1.0)*x10737))+x10728+(((-1.0)*cj3*r12*x10739))+((r11*x10729)));
evalcond[6]=(((r21*x10727*x10735))+((r21*x10729))+((r20*x10736))+(((-1.0)*x10734))+(((-1.0)*sj2*x10732))+(((-1.0)*cj3*r22*x10739))+(((-1.0)*r20*x10731*x10738)));
evalcond[7]=((((-1.0)*r10*x10729*x10738))+(((-1.0)*r12*sj3*x10739))+((cj1*sj2))+((sj3*x10727*x10733))+(((-1.0)*r11*x10731))+x10734+(((-1.0)*r10*x10735)));
evalcond[8]=((((-1.0)*r22*sj3*x10739))+(((-1.0)*x10730*x10731))+(((-1.0)*r20*x10729*x10738))+(((-1.0)*x10737))+(((-1.0)*r20*x10735))+x10728+((r21*x10741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10742=((1.0)*gconst4);
CheckValue<IkReal> x10743=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10742))+(((-1.0)*gconst5*r11)))),-1);
if(!x10743.valid){
continue;
}
CheckValue<IkReal> x10744 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10742))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10743.value)))+(x10744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10745=IKsin(j4);
IkReal x10746=IKcos(j4);
IkReal x10747=(sj1*sj2);
IkReal x10748=(gconst5*sj3);
IkReal x10749=((1.0)*r21);
IkReal x10750=(cj3*gconst5);
IkReal x10751=((1.0)*cj1);
IkReal x10752=(gconst4*r11);
IkReal x10753=(cj2*sj1);
IkReal x10754=(cj3*gconst4);
IkReal x10755=(gconst4*sj3);
IkReal x10756=(cj2*x10751);
IkReal x10757=((1.0)*x10746);
IkReal x10758=((1.0)*x10745);
IkReal x10759=(gconst5*x10745);
IkReal x10760=(x10746*x10755);
evalcond[0]=((((-1.0)*gconst4*x10745*x10749))+((r20*x10759))+(((-1.0)*r22*x10757)));
evalcond[1]=(((r10*x10759))+(((-1.0)*x10752*x10758))+(((-1.0)*r12*x10757)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10757))+(((-1.0)*gconst4*r01*x10758))+((r00*x10759)));
evalcond[3]=(((r01*x10746*x10754))+(((-1.0)*cj3*r02*x10758))+(((-1.0)*r00*x10750*x10757))+((r01*x10748))+((r00*x10755)));
evalcond[4]=((((-1.0)*r02*sj3*x10758))+(((-1.0)*r00*x10748*x10757))+(((-1.0)*r01*x10750))+(((-1.0)*r00*x10754))+((r01*x10760)));
evalcond[5]=(((cj3*x10746*x10752))+((r10*x10755))+(((-1.0)*cj3*r12*x10758))+(((-1.0)*r10*x10750*x10757))+(((-1.0)*x10756))+((r11*x10748))+x10747);
evalcond[6]=(((r21*x10746*x10754))+(((-1.0)*cj3*r22*x10758))+((r20*x10755))+(((-1.0)*r20*x10750*x10757))+((r21*x10748))+(((-1.0)*sj2*x10751))+(((-1.0)*x10753)));
evalcond[7]=((((-1.0)*r10*x10754))+((sj3*x10746*x10752))+(((-1.0)*r11*x10750))+((cj1*sj2))+(((-1.0)*r10*x10748*x10757))+x10753+(((-1.0)*r12*sj3*x10758)));
evalcond[8]=((((-1.0)*r20*x10748*x10757))+((r21*x10760))+(((-1.0)*x10756))+(((-1.0)*r20*x10754))+(((-1.0)*r22*sj3*x10758))+(((-1.0)*x10749*x10750))+x10747);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10761 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10761.valid){
continue;
}
CheckValue<IkReal> x10762=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10761.value)+(((1.5707963267949)*(x10762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10763=IKsin(j4);
IkReal x10764=IKcos(j4);
IkReal x10765=(sj1*sj2);
IkReal x10766=(gconst5*sj3);
IkReal x10767=((1.0)*r21);
IkReal x10768=(cj3*gconst5);
IkReal x10769=((1.0)*cj1);
IkReal x10770=(gconst4*r11);
IkReal x10771=(cj2*sj1);
IkReal x10772=(cj3*gconst4);
IkReal x10773=(gconst4*sj3);
IkReal x10774=(cj2*x10769);
IkReal x10775=((1.0)*x10764);
IkReal x10776=((1.0)*x10763);
IkReal x10777=(gconst5*x10763);
IkReal x10778=(x10764*x10773);
evalcond[0]=(((r20*x10777))+(((-1.0)*gconst4*x10763*x10767))+(((-1.0)*r22*x10775)));
evalcond[1]=((((-1.0)*r12*x10775))+(((-1.0)*x10770*x10776))+((r10*x10777)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10775))+((r00*x10777))+(((-1.0)*gconst4*r01*x10776)));
evalcond[3]=(((r01*x10764*x10772))+((r01*x10766))+(((-1.0)*r00*x10768*x10775))+((r00*x10773))+(((-1.0)*cj3*r02*x10776)));
evalcond[4]=((((-1.0)*r01*x10768))+(((-1.0)*r00*x10772))+(((-1.0)*r00*x10766*x10775))+(((-1.0)*r02*sj3*x10776))+((r01*x10778)));
evalcond[5]=((((-1.0)*r10*x10768*x10775))+((cj3*x10764*x10770))+(((-1.0)*cj3*r12*x10776))+((r11*x10766))+(((-1.0)*x10774))+x10765+((r10*x10773)));
evalcond[6]=((((-1.0)*cj3*r22*x10776))+((r20*x10773))+(((-1.0)*r20*x10768*x10775))+(((-1.0)*x10771))+(((-1.0)*sj2*x10769))+((r21*x10766))+((r21*x10764*x10772)));
evalcond[7]=((((-1.0)*r11*x10768))+(((-1.0)*r10*x10772))+((cj1*sj2))+((sj3*x10764*x10770))+(((-1.0)*r10*x10766*x10775))+x10771+(((-1.0)*r12*sj3*x10776)));
evalcond[8]=((((-1.0)*x10774))+(((-1.0)*r20*x10766*x10775))+(((-1.0)*x10767*x10768))+((r21*x10778))+x10765+(((-1.0)*r20*x10772))+(((-1.0)*r22*sj3*x10776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10781 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10781.valid){
continue;
}
IkReal x10779=((1.0)*(x10781.value));
IkReal x10780=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10779)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10779)));
IkReal gconst4=((1.0)*r21*x10780);
IkReal gconst5=((-1.0)*r20*x10780);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10784 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10784.valid){
continue;
}
IkReal x10782=((1.0)*(x10784.value));
IkReal x10783=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10782)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10782)));
IkReal gconst4=((1.0)*r21*x10783);
IkReal gconst5=((-1.0)*r20*x10783);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10787 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10787.valid){
continue;
}
IkReal x10785=((1.0)*(x10787.value));
IkReal x10786=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10785)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10785)));
IkReal gconst4=((1.0)*r21*x10786);
IkReal gconst5=((-1.0)*r20*x10786);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10790 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10790.valid){
continue;
}
IkReal x10788=((1.0)*(x10790.value));
IkReal x10789=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10788)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10788)));
IkReal gconst4=((1.0)*r21*x10789);
IkReal gconst5=((-1.0)*r20*x10789);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10793 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10793.valid){
continue;
}
IkReal x10791=((1.0)*(x10793.value));
IkReal x10792=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10791)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10791)));
IkReal gconst4=((1.0)*r21*x10792);
IkReal gconst5=((-1.0)*r20*x10792);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10796 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10796.valid){
continue;
}
IkReal x10794=((1.0)*(x10796.value));
IkReal x10795=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10794)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10794)));
IkReal gconst4=((1.0)*r21*x10795);
IkReal gconst5=((-1.0)*r20*x10795);
IkReal x10797=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10801=IKPowWithIntegerCheck(x10797,-1);
if(!x10801.valid){
continue;
}
IkReal x10798=x10801.value;
IkReal x10799=((1.0)*x10798);
IkReal x10800=((((-1.0)*x10799*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10799*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10798)));
j4eval[0]=x10800;
j4eval[1]=r02;
j4eval[2]=x10797;
j4eval[3]=IKsign(x10800);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10802=(gconst4*r01);
IkReal x10803=(gconst5*r00);
CheckValue<IkReal> x10804=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10802*x10802)))+(((-1.0)*(r02*r02)))+(((2.0)*x10802*x10803))+(((-1.0)*(x10803*x10803))))),-1);
if(!x10804.valid){
continue;
}
CheckValue<IkReal> x10805 = IKatan2WithCheck(IkReal(((((-1.0)*x10803))+x10802)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10804.value)))+(x10805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10806=IKsin(j4);
IkReal x10807=IKcos(j4);
IkReal x10808=(gconst4*r21);
IkReal x10809=(gconst5*r10);
IkReal x10810=((1.0)*cj2);
IkReal x10811=(gconst4*r11);
IkReal x10812=(gconst4*r01);
IkReal x10813=((1.0)*x10807);
IkReal x10814=((1.0)*x10806);
IkReal x10815=(gconst5*x10806);
evalcond[0]=((((-1.0)*x10808*x10814))+((r20*x10815))+(((-1.0)*r22*x10813)));
evalcond[1]=((((-1.0)*x10811*x10814))+(((-1.0)*r12*x10813))+((x10806*x10809)));
evalcond[2]=((((-1.0)*r02*x10814))+((x10807*x10812))+(((-1.0)*gconst5*r00*x10813)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10813))+(((-1.0)*x10812*x10814))+((r00*x10815)));
evalcond[4]=((((-1.0)*cj1*x10810))+(((-1.0)*gconst5*r20*x10813))+((sj1*sj2))+((x10807*x10808))+(((-1.0)*r22*x10814)));
evalcond[5]=(((x10807*x10811))+(((-1.0)*x10809*x10813))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x10814))+(((-1.0)*sj1*x10810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10816=((1.0)*gconst4);
CheckValue<IkReal> x10817 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x10816))+((gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10817.valid){
continue;
}
CheckValue<IkReal> x10818=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10816)))),-1);
if(!x10818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10817.value)+(((1.5707963267949)*(x10818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10819=IKsin(j4);
IkReal x10820=IKcos(j4);
IkReal x10821=(gconst4*r21);
IkReal x10822=(gconst5*r10);
IkReal x10823=((1.0)*cj2);
IkReal x10824=(gconst4*r11);
IkReal x10825=(gconst4*r01);
IkReal x10826=((1.0)*x10820);
IkReal x10827=((1.0)*x10819);
IkReal x10828=(gconst5*x10819);
evalcond[0]=((((-1.0)*x10821*x10827))+((r20*x10828))+(((-1.0)*r22*x10826)));
evalcond[1]=((((-1.0)*r12*x10826))+(((-1.0)*x10824*x10827))+((x10819*x10822)));
evalcond[2]=((((-1.0)*r02*x10827))+(((-1.0)*gconst5*r00*x10826))+((x10820*x10825)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10826))+(((-1.0)*x10825*x10827))+((r00*x10828)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*gconst5*r20*x10826))+((x10820*x10821))+(((-1.0)*r22*x10827))+(((-1.0)*cj1*x10823)));
evalcond[5]=((((-1.0)*x10822*x10826))+(((-1.0)*r12*x10827))+(((-1.0)*cj1*sj2))+((x10820*x10824))+(((-1.0)*sj1*x10823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10829=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10829.valid){
continue;
}
CheckValue<IkReal> x10830 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10829.value)))+(x10830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10831=IKsin(j4);
IkReal x10832=IKcos(j4);
IkReal x10833=(gconst4*r21);
IkReal x10834=(gconst5*r10);
IkReal x10835=((1.0)*cj2);
IkReal x10836=(gconst4*r11);
IkReal x10837=(gconst4*r01);
IkReal x10838=((1.0)*x10832);
IkReal x10839=((1.0)*x10831);
IkReal x10840=(gconst5*x10831);
evalcond[0]=(((r20*x10840))+(((-1.0)*x10833*x10839))+(((-1.0)*r22*x10838)));
evalcond[1]=((((-1.0)*x10836*x10839))+((x10831*x10834))+(((-1.0)*r12*x10838)));
evalcond[2]=(((x10832*x10837))+(((-1.0)*gconst5*r00*x10838))+(((-1.0)*r02*x10839)));
evalcond[3]=((-1.0)+(((-1.0)*x10837*x10839))+((r00*x10840))+(((-1.0)*r02*x10838)));
evalcond[4]=(((x10832*x10833))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10838))+(((-1.0)*cj1*x10835))+(((-1.0)*r22*x10839)));
evalcond[5]=(((x10832*x10836))+(((-1.0)*x10834*x10838))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x10839))+(((-1.0)*sj1*x10835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10843 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10843.valid){
continue;
}
IkReal x10841=((1.0)*(x10843.value));
IkReal x10842=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10841)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10841)));
IkReal gconst4=((1.0)*r21*x10842);
IkReal gconst5=((-1.0)*r20*x10842);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10846 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10846.valid){
continue;
}
IkReal x10844=((1.0)*(x10846.value));
IkReal x10845=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10844)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10844)));
IkReal gconst4=((1.0)*r21*x10845);
IkReal gconst5=((-1.0)*r20*x10845);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10849 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10849.valid){
continue;
}
IkReal x10847=((1.0)*(x10849.value));
IkReal x10848=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10847)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10847)));
IkReal gconst4=((1.0)*r21*x10848);
IkReal gconst5=((-1.0)*r20*x10848);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10850=(gconst5*r00);
IkReal x10851=(gconst4*r01);
CheckValue<IkReal> x10852=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10850*x10851))+(x10850*x10850)+(x10851*x10851)+(r02*r02))),-1);
if(!x10852.valid){
continue;
}
CheckValue<IkReal> x10853 = IKatan2WithCheck(IkReal(((((-1.0)*x10851))+x10850)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10852.value)))+(x10853.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10854=IKcos(j4);
IkReal x10855=IKsin(j4);
IkReal x10856=((1.0)*cj2);
IkReal x10857=((1.0)*x10854);
IkReal x10858=(gconst5*x10854);
IkReal x10859=(gconst5*x10855);
IkReal x10860=((1.0)*gconst4*x10855);
evalcond[0]=((((-1.0)*gconst4*r01*x10857))+((r00*x10858))+((r02*x10855)));
evalcond[1]=(((r20*x10859))+(((-1.0)*r21*x10860))+(((-1.0)*r22*x10857)));
evalcond[2]=((((-1.0)*r11*x10860))+(((-1.0)*r12*x10857))+((r10*x10859)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x10860))+(((-1.0)*r02*x10857))+((r00*x10859)));
evalcond[4]=((((-1.0)*gconst4*r21*x10857))+((r20*x10858))+((sj1*sj2))+((r22*x10855))+(((-1.0)*cj1*x10856)));
evalcond[5]=(((r12*x10855))+(((-1.0)*cj1*sj2))+((r10*x10858))+(((-1.0)*sj1*x10856))+(((-1.0)*gconst4*r11*x10857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10861=((1.0)*gconst4);
CheckValue<IkReal> x10862 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x10861))+((gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10862.valid){
continue;
}
CheckValue<IkReal> x10863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10861))+(((-1.0)*gconst5*r21)))),-1);
if(!x10863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10862.value)+(((1.5707963267949)*(x10863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10864=IKcos(j4);
IkReal x10865=IKsin(j4);
IkReal x10866=((1.0)*cj2);
IkReal x10867=((1.0)*x10864);
IkReal x10868=(gconst5*x10864);
IkReal x10869=(gconst5*x10865);
IkReal x10870=((1.0)*gconst4*x10865);
evalcond[0]=((((-1.0)*gconst4*r01*x10867))+((r00*x10868))+((r02*x10865)));
evalcond[1]=((((-1.0)*r22*x10867))+(((-1.0)*r21*x10870))+((r20*x10869)));
evalcond[2]=((((-1.0)*r12*x10867))+(((-1.0)*r11*x10870))+((r10*x10869)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x10870))+((r00*x10869))+(((-1.0)*r02*x10867)));
evalcond[4]=(((sj1*sj2))+((r20*x10868))+((r22*x10865))+(((-1.0)*cj1*x10866))+(((-1.0)*gconst4*r21*x10867)));
evalcond[5]=(((r12*x10865))+((r10*x10868))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10866))+(((-1.0)*gconst4*r11*x10867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10871=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10871.valid){
continue;
}
CheckValue<IkReal> x10872 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10871.value)))+(x10872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10873=IKcos(j4);
IkReal x10874=IKsin(j4);
IkReal x10875=((1.0)*cj2);
IkReal x10876=((1.0)*x10873);
IkReal x10877=(gconst5*x10873);
IkReal x10878=(gconst5*x10874);
IkReal x10879=((1.0)*gconst4*x10874);
evalcond[0]=(((r02*x10874))+(((-1.0)*gconst4*r01*x10876))+((r00*x10877)));
evalcond[1]=((((-1.0)*r22*x10876))+(((-1.0)*r21*x10879))+((r20*x10878)));
evalcond[2]=((((-1.0)*r11*x10879))+(((-1.0)*r12*x10876))+((r10*x10878)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x10879))+(((-1.0)*r02*x10876))+((r00*x10878)));
evalcond[4]=(((sj1*sj2))+((r20*x10877))+(((-1.0)*cj1*x10875))+(((-1.0)*gconst4*r21*x10876))+((r22*x10874)));
evalcond[5]=(((r12*x10874))+((r10*x10877))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r11*x10876))+(((-1.0)*sj1*x10875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10882 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10882.valid){
continue;
}
IkReal x10880=((1.0)*(x10882.value));
IkReal x10881=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10880)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10880)));
IkReal gconst4=((1.0)*r21*x10881);
IkReal gconst5=((-1.0)*r20*x10881);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10885 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10885.valid){
continue;
}
IkReal x10883=((1.0)*(x10885.value));
IkReal x10884=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10883)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10883)));
IkReal gconst4=((1.0)*r21*x10884);
IkReal gconst5=((-1.0)*r20*x10884);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10888 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10888.valid){
continue;
}
IkReal x10886=((1.0)*(x10888.value));
IkReal x10887=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10886)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10886)));
IkReal gconst4=((1.0)*r21*x10887);
IkReal gconst5=((-1.0)*r20*x10887);
IkReal x10889=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10893=IKPowWithIntegerCheck(x10889,-1);
if(!x10893.valid){
continue;
}
IkReal x10890=x10893.value;
IkReal x10891=((1.0)*x10890);
IkReal x10892=((((-1.0)*(r02*r02)))+(((-1.0)*x10891*(r01*r01)*(r21*r21)))+(((-1.0)*x10891*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10890)));
j4eval[0]=x10892;
j4eval[1]=r02;
j4eval[2]=x10889;
j4eval[3]=IKsign(x10892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10894=(gconst4*r01);
IkReal x10895=(gconst5*r00);
CheckValue<IkReal> x10896 = IKatan2WithCheck(IkReal(((((-1.0)*x10895))+x10894)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10896.valid){
continue;
}
CheckValue<IkReal> x10897=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10894*x10894)))+(((-1.0)*(r02*r02)))+(((2.0)*x10894*x10895))+(((-1.0)*(x10895*x10895))))),-1);
if(!x10897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10896.value)+(((1.5707963267949)*(x10897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10898=IKsin(j4);
IkReal x10899=IKcos(j4);
IkReal x10900=(gconst4*r21);
IkReal x10901=(gconst5*r10);
IkReal x10902=((1.0)*sj1);
IkReal x10903=(gconst4*r11);
IkReal x10904=(gconst4*r01);
IkReal x10905=((1.0)*x10899);
IkReal x10906=((1.0)*x10898);
IkReal x10907=(gconst5*x10898);
evalcond[0]=((((-1.0)*x10900*x10906))+(((-1.0)*r22*x10905))+((r20*x10907)));
evalcond[1]=((((-1.0)*x10903*x10906))+(((-1.0)*r12*x10905))+((x10898*x10901)));
evalcond[2]=((((-1.0)*gconst5*r00*x10905))+((x10899*x10904))+(((-1.0)*r02*x10906)));
evalcond[3]=((-1.0)+((r00*x10907))+(((-1.0)*x10904*x10906))+(((-1.0)*r02*x10905)));
evalcond[4]=((((-1.0)*x10901*x10905))+(((-1.0)*sj2*x10902))+(((-1.0)*r12*x10906))+((cj1*cj2))+((x10899*x10903)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x10906))+(((-1.0)*gconst5*r20*x10905))+(((-1.0)*cj2*x10902))+((x10899*x10900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10908=((1.0)*gconst4);
CheckValue<IkReal> x10909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10908))+(((-1.0)*gconst5*r21)))),-1);
if(!x10909.valid){
continue;
}
CheckValue<IkReal> x10910 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10909.value)))+(x10910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10911=IKsin(j4);
IkReal x10912=IKcos(j4);
IkReal x10913=(gconst4*r21);
IkReal x10914=(gconst5*r10);
IkReal x10915=((1.0)*sj1);
IkReal x10916=(gconst4*r11);
IkReal x10917=(gconst4*r01);
IkReal x10918=((1.0)*x10912);
IkReal x10919=((1.0)*x10911);
IkReal x10920=(gconst5*x10911);
evalcond[0]=((((-1.0)*r22*x10918))+((r20*x10920))+(((-1.0)*x10913*x10919)));
evalcond[1]=((((-1.0)*r12*x10918))+((x10911*x10914))+(((-1.0)*x10916*x10919)));
evalcond[2]=((((-1.0)*r02*x10919))+((x10912*x10917))+(((-1.0)*gconst5*r00*x10918)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10918))+(((-1.0)*x10917*x10919))+((r00*x10920)));
evalcond[4]=((((-1.0)*sj2*x10915))+(((-1.0)*r12*x10919))+(((-1.0)*x10914*x10918))+((x10912*x10916))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x10919))+(((-1.0)*cj1*sj2))+((x10912*x10913))+(((-1.0)*gconst5*r20*x10918))+(((-1.0)*cj2*x10915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10921=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10921.valid){
continue;
}
CheckValue<IkReal> x10922 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10921.value)))+(x10922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10923=IKsin(j4);
IkReal x10924=IKcos(j4);
IkReal x10925=(gconst4*r21);
IkReal x10926=(gconst5*r10);
IkReal x10927=((1.0)*sj1);
IkReal x10928=(gconst4*r11);
IkReal x10929=(gconst4*r01);
IkReal x10930=((1.0)*x10924);
IkReal x10931=((1.0)*x10923);
IkReal x10932=(gconst5*x10923);
evalcond[0]=((((-1.0)*x10925*x10931))+(((-1.0)*r22*x10930))+((r20*x10932)));
evalcond[1]=((((-1.0)*r12*x10930))+(((-1.0)*x10928*x10931))+((x10923*x10926)));
evalcond[2]=(((x10924*x10929))+(((-1.0)*r02*x10931))+(((-1.0)*gconst5*r00*x10930)));
evalcond[3]=((-1.0)+(((-1.0)*x10929*x10931))+(((-1.0)*r02*x10930))+((r00*x10932)));
evalcond[4]=((((-1.0)*sj2*x10927))+(((-1.0)*r12*x10931))+(((-1.0)*x10926*x10930))+((x10924*x10928))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x10931))+((x10924*x10925))+(((-1.0)*gconst5*r20*x10930))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x10927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10935 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10935.valid){
continue;
}
IkReal x10933=((1.0)*(x10935.value));
IkReal x10934=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10933)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10933)));
IkReal gconst4=((1.0)*r21*x10934);
IkReal gconst5=((-1.0)*r20*x10934);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10938 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10938.valid){
continue;
}
IkReal x10936=((1.0)*(x10938.value));
IkReal x10937=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10936)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10936)));
IkReal gconst4=((1.0)*r21*x10937);
IkReal gconst5=((-1.0)*r20*x10937);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10941 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10941.valid){
continue;
}
IkReal x10939=((1.0)*(x10941.value));
IkReal x10940=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10939)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10939)));
IkReal gconst4=((1.0)*r21*x10940);
IkReal gconst5=((-1.0)*r20*x10940);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10942=(gconst5*r00);
IkReal x10943=(gconst4*r01);
CheckValue<IkReal> x10944=IKPowWithIntegerCheck(IKsign(((x10942*x10942)+(x10943*x10943)+(((-2.0)*x10942*x10943))+(r02*r02))),-1);
if(!x10944.valid){
continue;
}
CheckValue<IkReal> x10945 = IKatan2WithCheck(IkReal(((((-1.0)*x10943))+x10942)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10944.value)))+(x10945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10946=IKcos(j4);
IkReal x10947=IKsin(j4);
IkReal x10948=((1.0)*sj1);
IkReal x10949=((1.0)*x10946);
IkReal x10950=(gconst5*x10946);
IkReal x10951=(gconst5*x10947);
IkReal x10952=((1.0)*gconst4*x10947);
evalcond[0]=(((r00*x10950))+(((-1.0)*gconst4*r01*x10949))+((r02*x10947)));
evalcond[1]=((((-1.0)*r21*x10952))+(((-1.0)*r22*x10949))+((r20*x10951)));
evalcond[2]=((((-1.0)*r12*x10949))+((r10*x10951))+(((-1.0)*r11*x10952)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x10952))+((r00*x10951))+(((-1.0)*r02*x10949)));
evalcond[4]=((((-1.0)*gconst4*r11*x10949))+((r12*x10947))+(((-1.0)*sj2*x10948))+((r10*x10950))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst4*r21*x10949))+(((-1.0)*cj1*sj2))+((r20*x10950))+((r22*x10947))+(((-1.0)*cj2*x10948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10953=((1.0)*gconst4);
CheckValue<IkReal> x10954 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10954.valid){
continue;
}
CheckValue<IkReal> x10955=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10953))+(((-1.0)*gconst5*r21)))),-1);
if(!x10955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10954.value)+(((1.5707963267949)*(x10955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10956=IKcos(j4);
IkReal x10957=IKsin(j4);
IkReal x10958=((1.0)*sj1);
IkReal x10959=((1.0)*x10956);
IkReal x10960=(gconst5*x10956);
IkReal x10961=(gconst5*x10957);
IkReal x10962=((1.0)*gconst4*x10957);
evalcond[0]=(((r02*x10957))+((r00*x10960))+(((-1.0)*gconst4*r01*x10959)));
evalcond[1]=((((-1.0)*r21*x10962))+((r20*x10961))+(((-1.0)*r22*x10959)));
evalcond[2]=(((r10*x10961))+(((-1.0)*r12*x10959))+(((-1.0)*r11*x10962)));
evalcond[3]=((-1.0)+((r00*x10961))+(((-1.0)*r02*x10959))+(((-1.0)*r01*x10962)));
evalcond[4]=((((-1.0)*gconst4*r11*x10959))+(((-1.0)*sj2*x10958))+((r10*x10960))+((cj1*cj2))+((r12*x10957)));
evalcond[5]=((((-1.0)*gconst4*r21*x10959))+(((-1.0)*cj2*x10958))+((r22*x10957))+(((-1.0)*cj1*sj2))+((r20*x10960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10963=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10963.valid){
continue;
}
CheckValue<IkReal> x10964 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10963.value)))+(x10964.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10965=IKcos(j4);
IkReal x10966=IKsin(j4);
IkReal x10967=((1.0)*sj1);
IkReal x10968=((1.0)*x10965);
IkReal x10969=(gconst5*x10965);
IkReal x10970=(gconst5*x10966);
IkReal x10971=((1.0)*gconst4*x10966);
evalcond[0]=(((r02*x10966))+((r00*x10969))+(((-1.0)*gconst4*r01*x10968)));
evalcond[1]=((((-1.0)*r21*x10971))+(((-1.0)*r22*x10968))+((r20*x10970)));
evalcond[2]=(((r10*x10970))+(((-1.0)*r11*x10971))+(((-1.0)*r12*x10968)));
evalcond[3]=((-1.0)+((r00*x10970))+(((-1.0)*r02*x10968))+(((-1.0)*r01*x10971)));
evalcond[4]=((((-1.0)*gconst4*r11*x10968))+((r10*x10969))+((cj1*cj2))+(((-1.0)*sj2*x10967))+((r12*x10966)));
evalcond[5]=((((-1.0)*gconst4*r21*x10968))+((r22*x10966))+(((-1.0)*cj1*sj2))+((r20*x10969))+(((-1.0)*cj2*x10967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x10974 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10974.valid){
continue;
}
IkReal x10972=((1.0)*(x10974.value));
IkReal x10973=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10972)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10973);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10972)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10973;
IkReal x10975=((1.0)*r01*r21);
IkReal x10976=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10975))+(((-1.0)*x10976)));
j4eval[1]=(((sj3*x10976))+((sj3*x10975)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10979 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10979.valid){
continue;
}
IkReal x10977=((1.0)*(x10979.value));
IkReal x10978=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10977)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10978);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10977)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10978;
IkReal x10980=((1.0)*r01*r21);
IkReal x10981=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10980))+(((-1.0)*x10981)));
j4eval[1]=(((cj3*x10980))+((cj3*x10981)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10984 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10984.valid){
continue;
}
IkReal x10982=((1.0)*(x10984.value));
IkReal x10983=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10982)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10983);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10982)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10983;
IkReal x10985=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((r00*r20*x10985))+((r01*r21*x10985)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10986=((1.0)*gconst5);
CheckValue<IkReal> x10987=IKPowWithIntegerCheck(cj3,-1);
if(!x10987.valid){
continue;
}
CheckValue<IkReal> x10988=IKPowWithIntegerCheck(r12,-1);
if(!x10988.valid){
continue;
}
CheckValue<IkReal> x10989=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x10986))+((cj3*gconst4*r01))),-1);
if(!x10989.valid){
continue;
}
if( IKabs(((x10987.value)*(x10988.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10989.value)*(((((-1.0)*r01*sj3*x10986))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10987.value)*(x10988.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x10989.value)*(((((-1.0)*r01*sj3*x10986))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10987.value)*(x10988.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x10989.value)*(((((-1.0)*r01*sj3*x10986))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10990=IKsin(j4);
IkReal x10991=IKcos(j4);
IkReal x10992=((1.0)*sj3);
IkReal x10993=((1.0)*r21);
IkReal x10994=(cj3*gconst5);
IkReal x10995=(gconst5*r20);
IkReal x10996=(sj1*sj2);
IkReal x10997=((1.0)*cj2);
IkReal x10998=(gconst5*r00);
IkReal x10999=(gconst5*sj3);
IkReal x11000=(gconst4*r00);
IkReal x11001=((1.0)*cj3);
IkReal x11002=((1.0)*r01);
IkReal x11003=(gconst4*r20);
IkReal x11004=((1.0)*cj1*sj2);
IkReal x11005=(sj1*x10997);
IkReal x11006=(r12*x10990);
IkReal x11007=(gconst4*x10990);
IkReal x11008=((1.0)*x10991);
IkReal x11009=(gconst4*sj3*x10991);
IkReal x11010=(cj3*gconst4*x10991);
IkReal x11011=(x11005+x11004);
evalcond[0]=((-1.0)*r12*x10991);
evalcond[1]=((((-1.0)*x10993*x11007))+((x10990*x10995)));
evalcond[2]=((-1.0)+(((-1.0)*x11002*x11007))+((x10990*x10998)));
evalcond[3]=((((-1.0)*x10996))+(((-1.0)*x11001*x11006))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x10992*x11006))+(((-1.0)*x11011)));
evalcond[5]=(((r01*x10999))+(((-1.0)*r00*x10994*x11008))+((r01*x11010))+((sj3*x11000)));
evalcond[6]=((((-1.0)*x10991*x10992*x10998))+(((-1.0)*x10994*x11002))+((r01*x11009))+(((-1.0)*x11000*x11001)));
evalcond[7]=(((r21*x10999))+(((-1.0)*x11011))+(((-1.0)*r20*x10994*x11008))+((r21*x11010))+((sj3*x11003)));
evalcond[8]=((((-1.0)*x10991*x10992*x10995))+(((-1.0)*x10993*x10994))+((r21*x11009))+(((-1.0)*x11001*x11003))+(((-1.0)*cj1*x10997))+x10996);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11012=((1.0)*gconst5);
IkReal x11013=(gconst4*r01);
CheckValue<IkReal> x11014=IKPowWithIntegerCheck((((gconst5*r00))+(((-1.0)*x11013))),-1);
if(!x11014.valid){
continue;
}
CheckValue<IkReal> x11015=IKPowWithIntegerCheck((((cj3*x11013))+(((-1.0)*cj3*r00*x11012))),-1);
if(!x11015.valid){
continue;
}
if( IKabs(x11014.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11015.value)*(((((-1.0)*r01*sj3*x11012))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x11014.value)+IKsqr(((x11015.value)*(((((-1.0)*r01*sj3*x11012))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x11014.value, ((x11015.value)*(((((-1.0)*r01*sj3*x11012))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11016=IKsin(j4);
IkReal x11017=IKcos(j4);
IkReal x11018=((1.0)*sj3);
IkReal x11019=((1.0)*r21);
IkReal x11020=(cj3*gconst5);
IkReal x11021=(gconst5*r20);
IkReal x11022=(sj1*sj2);
IkReal x11023=((1.0)*cj2);
IkReal x11024=(gconst5*r00);
IkReal x11025=(gconst5*sj3);
IkReal x11026=(gconst4*r00);
IkReal x11027=((1.0)*cj3);
IkReal x11028=((1.0)*r01);
IkReal x11029=(gconst4*r20);
IkReal x11030=((1.0)*cj1*sj2);
IkReal x11031=(sj1*x11023);
IkReal x11032=(r12*x11016);
IkReal x11033=(gconst4*x11016);
IkReal x11034=((1.0)*x11017);
IkReal x11035=(gconst4*sj3*x11017);
IkReal x11036=(cj3*gconst4*x11017);
IkReal x11037=(x11030+x11031);
evalcond[0]=((-1.0)*r12*x11017);
evalcond[1]=(((x11016*x11021))+(((-1.0)*x11019*x11033)));
evalcond[2]=((-1.0)+(((-1.0)*x11028*x11033))+((x11016*x11024)));
evalcond[3]=((((-1.0)*x11022))+((cj1*cj2))+(((-1.0)*x11027*x11032)));
evalcond[4]=((((-1.0)*x11018*x11032))+(((-1.0)*x11037)));
evalcond[5]=(((r01*x11025))+((r01*x11036))+((sj3*x11026))+(((-1.0)*r00*x11020*x11034)));
evalcond[6]=(((r01*x11035))+(((-1.0)*x11017*x11018*x11024))+(((-1.0)*x11026*x11027))+(((-1.0)*x11020*x11028)));
evalcond[7]=(((r21*x11025))+((r21*x11036))+((sj3*x11029))+(((-1.0)*r20*x11020*x11034))+(((-1.0)*x11037)));
evalcond[8]=(((r21*x11035))+x11022+(((-1.0)*x11017*x11018*x11021))+(((-1.0)*x11019*x11020))+(((-1.0)*x11027*x11029))+(((-1.0)*cj1*x11023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11038=(gconst5*r00);
IkReal x11039=(gconst4*r01);
CheckValue<IkReal> x11040=IKPowWithIntegerCheck(((((-1.0)*x11039))+x11038),-1);
if(!x11040.valid){
continue;
}
CheckValue<IkReal> x11041=IKPowWithIntegerCheck((((sj3*x11039))+(((-1.0)*sj3*x11038))),-1);
if(!x11041.valid){
continue;
}
if( IKabs(x11040.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11041.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x11040.value)+IKsqr(((x11041.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x11040.value, ((x11041.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11042=IKsin(j4);
IkReal x11043=IKcos(j4);
IkReal x11044=((1.0)*sj3);
IkReal x11045=((1.0)*r21);
IkReal x11046=(cj3*gconst5);
IkReal x11047=(gconst5*r20);
IkReal x11048=(sj1*sj2);
IkReal x11049=((1.0)*cj2);
IkReal x11050=(gconst5*r00);
IkReal x11051=(gconst5*sj3);
IkReal x11052=(gconst4*r00);
IkReal x11053=((1.0)*cj3);
IkReal x11054=((1.0)*r01);
IkReal x11055=(gconst4*r20);
IkReal x11056=((1.0)*cj1*sj2);
IkReal x11057=(sj1*x11049);
IkReal x11058=(r12*x11042);
IkReal x11059=(gconst4*x11042);
IkReal x11060=((1.0)*x11043);
IkReal x11061=(gconst4*sj3*x11043);
IkReal x11062=(cj3*gconst4*x11043);
IkReal x11063=(x11056+x11057);
evalcond[0]=((-1.0)*r12*x11043);
evalcond[1]=((((-1.0)*x11045*x11059))+((x11042*x11047)));
evalcond[2]=((-1.0)+(((-1.0)*x11054*x11059))+((x11042*x11050)));
evalcond[3]=((((-1.0)*x11048))+(((-1.0)*x11053*x11058))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x11063))+(((-1.0)*x11044*x11058)));
evalcond[5]=(((sj3*x11052))+((r01*x11051))+((r01*x11062))+(((-1.0)*r00*x11046*x11060)));
evalcond[6]=((((-1.0)*x11052*x11053))+(((-1.0)*x11046*x11054))+((r01*x11061))+(((-1.0)*x11043*x11044*x11050)));
evalcond[7]=((((-1.0)*x11063))+((sj3*x11055))+(((-1.0)*r20*x11046*x11060))+((r21*x11062))+((r21*x11051)));
evalcond[8]=((((-1.0)*x11045*x11046))+x11048+(((-1.0)*x11043*x11044*x11047))+((r21*x11061))+(((-1.0)*x11053*x11055))+(((-1.0)*cj1*x11049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11064=gconst4*gconst4;
IkReal x11065=gconst5*gconst5;
IkReal x11066=(cj3*r20);
IkReal x11067=(r00*sj3);
IkReal x11068=(r01*sj3);
IkReal x11069=(gconst4*gconst5);
IkReal x11070=(r21*x11064);
IkReal x11071=((1.0)*r01*x11069);
CheckValue<IkReal> x11072=IKPowWithIntegerCheck(IKsign((((cj3*r01*x11070))+((r00*x11065*x11066))+(((-1.0)*x11066*x11071))+((cj3*r02*r22))+(((-1.0)*cj3*r00*r21*x11069)))),-1);
if(!x11072.valid){
continue;
}
CheckValue<IkReal> x11073 = IKatan2WithCheck(IkReal((((gconst4*r22*x11067))+((gconst5*r22*x11068)))),IkReal((((r20*x11065*x11068))+((r20*x11067*x11069))+(((-1.0)*r21*x11068*x11069))+(((-1.0)*x11067*x11070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11072.value)))+(x11073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11074=IKsin(j4);
IkReal x11075=IKcos(j4);
IkReal x11076=(gconst5*sj3);
IkReal x11077=((1.0)*r21);
IkReal x11078=(cj3*gconst5);
IkReal x11079=((1.0)*sj2);
IkReal x11080=((1.0)*r11);
IkReal x11081=((1.0)*cj2);
IkReal x11082=((1.0)*cj3);
IkReal x11083=(gconst4*r10);
IkReal x11084=(gconst4*r00);
IkReal x11085=((1.0)*r01);
IkReal x11086=((1.0)*sj3);
IkReal x11087=(gconst4*r20);
IkReal x11088=(cj1*x11079);
IkReal x11089=(sj1*x11081);
IkReal x11090=((1.0)*x11075);
IkReal x11091=(gconst4*x11074);
IkReal x11092=(r22*x11074);
IkReal x11093=(gconst5*x11074);
IkReal x11094=(r02*x11074);
IkReal x11095=(r12*x11074);
IkReal x11096=(gconst4*sj3*x11075);
IkReal x11097=(cj3*gconst4*x11075);
IkReal x11098=(x11089+x11088);
evalcond[0]=((((-1.0)*r22*x11090))+((r20*x11093))+(((-1.0)*x11077*x11091)));
evalcond[1]=((((-1.0)*r12*x11090))+(((-1.0)*x11080*x11091))+((r10*x11093)));
evalcond[2]=((-1.0)+(((-1.0)*x11085*x11091))+((r00*x11093))+(((-1.0)*r02*x11090)));
evalcond[3]=((((-1.0)*r00*x11078*x11090))+((r01*x11097))+((sj3*x11084))+((r01*x11076))+(((-1.0)*x11082*x11094)));
evalcond[4]=((((-1.0)*x11086*x11094))+(((-1.0)*x11082*x11084))+(((-1.0)*x11078*x11085))+(((-1.0)*r00*x11076*x11090))+((r01*x11096)));
evalcond[5]=(((r11*x11097))+((r11*x11076))+((sj3*x11083))+((cj1*cj2))+(((-1.0)*r10*x11078*x11090))+(((-1.0)*x11082*x11095))+(((-1.0)*sj1*x11079)));
evalcond[6]=(((r21*x11076))+(((-1.0)*x11098))+(((-1.0)*r20*x11078*x11090))+((sj3*x11087))+(((-1.0)*x11082*x11092))+((r21*x11097)));
evalcond[7]=((((-1.0)*x11086*x11092))+(((-1.0)*cj1*x11081))+(((-1.0)*x11082*x11087))+((sj1*sj2))+(((-1.0)*x11077*x11078))+(((-1.0)*r20*x11076*x11090))+((r21*x11096)));
evalcond[8]=((((-1.0)*x11086*x11095))+(((-1.0)*x11098))+(((-1.0)*x11082*x11083))+(((-1.0)*x11078*x11080))+((r11*x11096))+(((-1.0)*r10*x11076*x11090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11099=((1.0)*gconst4);
CheckValue<IkReal> x11100 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x11099))+((gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11100.valid){
continue;
}
CheckValue<IkReal> x11101=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11099))+(((-1.0)*gconst5*r21)))),-1);
if(!x11101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11100.value)+(((1.5707963267949)*(x11101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11102=IKsin(j4);
IkReal x11103=IKcos(j4);
IkReal x11104=(gconst5*sj3);
IkReal x11105=((1.0)*r21);
IkReal x11106=(cj3*gconst5);
IkReal x11107=((1.0)*sj2);
IkReal x11108=((1.0)*r11);
IkReal x11109=((1.0)*cj2);
IkReal x11110=((1.0)*cj3);
IkReal x11111=(gconst4*r10);
IkReal x11112=(gconst4*r00);
IkReal x11113=((1.0)*r01);
IkReal x11114=((1.0)*sj3);
IkReal x11115=(gconst4*r20);
IkReal x11116=(cj1*x11107);
IkReal x11117=(sj1*x11109);
IkReal x11118=((1.0)*x11103);
IkReal x11119=(gconst4*x11102);
IkReal x11120=(r22*x11102);
IkReal x11121=(gconst5*x11102);
IkReal x11122=(r02*x11102);
IkReal x11123=(r12*x11102);
IkReal x11124=(gconst4*sj3*x11103);
IkReal x11125=(cj3*gconst4*x11103);
IkReal x11126=(x11117+x11116);
evalcond[0]=((((-1.0)*x11105*x11119))+(((-1.0)*r22*x11118))+((r20*x11121)));
evalcond[1]=((((-1.0)*x11108*x11119))+((r10*x11121))+(((-1.0)*r12*x11118)));
evalcond[2]=((-1.0)+(((-1.0)*x11113*x11119))+(((-1.0)*r02*x11118))+((r00*x11121)));
evalcond[3]=((((-1.0)*x11110*x11122))+(((-1.0)*r00*x11106*x11118))+((sj3*x11112))+((r01*x11125))+((r01*x11104)));
evalcond[4]=((((-1.0)*x11110*x11112))+(((-1.0)*r00*x11104*x11118))+(((-1.0)*x11114*x11122))+((r01*x11124))+(((-1.0)*x11106*x11113)));
evalcond[5]=((((-1.0)*x11110*x11123))+((sj3*x11111))+((r11*x11125))+(((-1.0)*r10*x11106*x11118))+((r11*x11104))+((cj1*cj2))+(((-1.0)*sj1*x11107)));
evalcond[6]=((((-1.0)*x11126))+((r21*x11125))+(((-1.0)*x11110*x11120))+((sj3*x11115))+((r21*x11104))+(((-1.0)*r20*x11106*x11118)));
evalcond[7]=(((r21*x11124))+(((-1.0)*cj1*x11109))+(((-1.0)*x11105*x11106))+((sj1*sj2))+(((-1.0)*x11110*x11115))+(((-1.0)*x11114*x11120))+(((-1.0)*r20*x11104*x11118)));
evalcond[8]=((((-1.0)*x11126))+(((-1.0)*x11110*x11111))+((r11*x11124))+(((-1.0)*x11114*x11123))+(((-1.0)*r10*x11104*x11118))+(((-1.0)*x11106*x11108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11127=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11127.valid){
continue;
}
CheckValue<IkReal> x11128 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11127.value)))+(x11128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11129=IKsin(j4);
IkReal x11130=IKcos(j4);
IkReal x11131=(gconst5*sj3);
IkReal x11132=((1.0)*r21);
IkReal x11133=(cj3*gconst5);
IkReal x11134=((1.0)*sj2);
IkReal x11135=((1.0)*r11);
IkReal x11136=((1.0)*cj2);
IkReal x11137=((1.0)*cj3);
IkReal x11138=(gconst4*r10);
IkReal x11139=(gconst4*r00);
IkReal x11140=((1.0)*r01);
IkReal x11141=((1.0)*sj3);
IkReal x11142=(gconst4*r20);
IkReal x11143=(cj1*x11134);
IkReal x11144=(sj1*x11136);
IkReal x11145=((1.0)*x11130);
IkReal x11146=(gconst4*x11129);
IkReal x11147=(r22*x11129);
IkReal x11148=(gconst5*x11129);
IkReal x11149=(r02*x11129);
IkReal x11150=(r12*x11129);
IkReal x11151=(gconst4*sj3*x11130);
IkReal x11152=(cj3*gconst4*x11130);
IkReal x11153=(x11144+x11143);
evalcond[0]=((((-1.0)*r22*x11145))+(((-1.0)*x11132*x11146))+((r20*x11148)));
evalcond[1]=((((-1.0)*x11135*x11146))+((r10*x11148))+(((-1.0)*r12*x11145)));
evalcond[2]=((-1.0)+(((-1.0)*x11140*x11146))+((r00*x11148))+(((-1.0)*r02*x11145)));
evalcond[3]=(((r01*x11152))+((sj3*x11139))+(((-1.0)*r00*x11133*x11145))+((r01*x11131))+(((-1.0)*x11137*x11149)));
evalcond[4]=(((r01*x11151))+(((-1.0)*r00*x11131*x11145))+(((-1.0)*x11141*x11149))+(((-1.0)*x11133*x11140))+(((-1.0)*x11137*x11139)));
evalcond[5]=((((-1.0)*r10*x11133*x11145))+((r11*x11152))+((sj3*x11138))+(((-1.0)*sj1*x11134))+((r11*x11131))+((cj1*cj2))+(((-1.0)*x11137*x11150)));
evalcond[6]=((((-1.0)*r20*x11133*x11145))+((r21*x11152))+((r21*x11131))+((sj3*x11142))+(((-1.0)*x11137*x11147))+(((-1.0)*x11153)));
evalcond[7]=((((-1.0)*cj1*x11136))+((r21*x11151))+(((-1.0)*x11132*x11133))+((sj1*sj2))+(((-1.0)*x11141*x11147))+(((-1.0)*r20*x11131*x11145))+(((-1.0)*x11137*x11142)));
evalcond[8]=((((-1.0)*x11133*x11135))+((r11*x11151))+(((-1.0)*x11141*x11150))+(((-1.0)*r10*x11131*x11145))+(((-1.0)*x11153))+(((-1.0)*x11137*x11138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11156 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11156.valid){
continue;
}
IkReal x11154=((1.0)*(x11156.value));
IkReal x11155=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11154)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11154)));
IkReal gconst4=((1.0)*r21*x11155);
IkReal gconst5=((-1.0)*r20*x11155);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11159 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11159.valid){
continue;
}
IkReal x11157=((1.0)*(x11159.value));
IkReal x11158=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11157)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11157)));
IkReal gconst4=((1.0)*r21*x11158);
IkReal gconst5=((-1.0)*r20*x11158);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11162 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11162.valid){
continue;
}
IkReal x11160=((1.0)*(x11162.value));
IkReal x11161=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11160)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11160)));
IkReal gconst4=((1.0)*r21*x11161);
IkReal gconst5=((-1.0)*r20*x11161);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11165 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11165.valid){
continue;
}
IkReal x11163=((1.0)*(x11165.value));
IkReal x11164=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11163)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11163)));
IkReal gconst4=((1.0)*r21*x11164);
IkReal gconst5=((-1.0)*r20*x11164);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11168 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11168.valid){
continue;
}
IkReal x11166=((1.0)*(x11168.value));
IkReal x11167=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11166)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11166)));
IkReal gconst4=((1.0)*r21*x11167);
IkReal gconst5=((-1.0)*r20*x11167);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11171 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11171.valid){
continue;
}
IkReal x11169=((1.0)*(x11171.value));
IkReal x11170=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11169)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11169)));
IkReal gconst4=((1.0)*r21*x11170);
IkReal gconst5=((-1.0)*r20*x11170);
IkReal x11172=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11176=IKPowWithIntegerCheck(x11172,-1);
if(!x11176.valid){
continue;
}
IkReal x11173=x11176.value;
IkReal x11174=((1.0)*x11173);
IkReal x11175=((((-1.0)*(r12*r12)))+(((-1.0)*x11174*(r10*r10)*(r20*r20)))+(((-1.0)*x11174*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x11173)));
j4eval[0]=x11175;
j4eval[1]=r12;
j4eval[2]=x11172;
j4eval[3]=IKsign(x11175);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11177=(gconst5*r10);
IkReal x11178=(gconst4*r11);
CheckValue<IkReal> x11179 = IKatan2WithCheck(IkReal(((((-1.0)*x11177))+x11178)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11179.valid){
continue;
}
CheckValue<IkReal> x11180=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11177*x11177)))+(((2.0)*x11177*x11178))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11178*x11178))))),-1);
if(!x11180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11179.value)+(((1.5707963267949)*(x11180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11181=IKsin(j4);
IkReal x11182=IKcos(j4);
IkReal x11183=(gconst4*r21);
IkReal x11184=(gconst5*r10);
IkReal x11185=(gconst4*r11);
IkReal x11186=(gconst4*r01);
IkReal x11187=((1.0)*x11182);
IkReal x11188=((1.0)*x11181);
IkReal x11189=(gconst5*x11181);
evalcond[0]=(((r20*x11189))+(((-1.0)*x11183*x11188))+(((-1.0)*r22*x11187)));
evalcond[1]=((((-1.0)*r02*x11187))+(((-1.0)*x11186*x11188))+((r00*x11189)));
evalcond[2]=((((-1.0)*r12*x11188))+(((-1.0)*x11184*x11187))+((x11182*x11185)));
evalcond[3]=((-1.0)+(((-1.0)*x11185*x11188))+(((-1.0)*r12*x11187))+((x11181*x11184)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x11188))+((cj1*sj2))+((x11182*x11186))+(((-1.0)*gconst5*r00*x11187)));
evalcond[5]=((((-1.0)*r22*x11188))+((x11182*x11183))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x11187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11190=((1.0)*gconst4);
CheckValue<IkReal> x11191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11190))+(((-1.0)*gconst5*r01)))),-1);
if(!x11191.valid){
continue;
}
CheckValue<IkReal> x11192 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11190))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11191.value)))+(x11192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11193=IKsin(j4);
IkReal x11194=IKcos(j4);
IkReal x11195=(gconst4*r21);
IkReal x11196=(gconst5*r10);
IkReal x11197=(gconst4*r11);
IkReal x11198=(gconst4*r01);
IkReal x11199=((1.0)*x11194);
IkReal x11200=((1.0)*x11193);
IkReal x11201=(gconst5*x11193);
evalcond[0]=((((-1.0)*x11195*x11200))+(((-1.0)*r22*x11199))+((r20*x11201)));
evalcond[1]=((((-1.0)*r02*x11199))+((r00*x11201))+(((-1.0)*x11198*x11200)));
evalcond[2]=((((-1.0)*x11196*x11199))+((x11194*x11197))+(((-1.0)*r12*x11200)));
evalcond[3]=((-1.0)+(((-1.0)*x11197*x11200))+(((-1.0)*r12*x11199))+((x11193*x11196)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11194*x11198))+(((-1.0)*gconst5*r00*x11199))+(((-1.0)*r02*x11200)));
evalcond[5]=((((-1.0)*r22*x11200))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11194*x11195))+(((-1.0)*gconst5*r20*x11199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11202 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11202.valid){
continue;
}
CheckValue<IkReal> x11203=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11202.value)+(((1.5707963267949)*(x11203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11204=IKsin(j4);
IkReal x11205=IKcos(j4);
IkReal x11206=(gconst4*r21);
IkReal x11207=(gconst5*r10);
IkReal x11208=(gconst4*r11);
IkReal x11209=(gconst4*r01);
IkReal x11210=((1.0)*x11205);
IkReal x11211=((1.0)*x11204);
IkReal x11212=(gconst5*x11204);
evalcond[0]=(((r20*x11212))+(((-1.0)*r22*x11210))+(((-1.0)*x11206*x11211)));
evalcond[1]=((((-1.0)*x11209*x11211))+((r00*x11212))+(((-1.0)*r02*x11210)));
evalcond[2]=(((x11205*x11208))+(((-1.0)*r12*x11211))+(((-1.0)*x11207*x11210)));
evalcond[3]=((-1.0)+((x11204*x11207))+(((-1.0)*r12*x11210))+(((-1.0)*x11208*x11211)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst5*r00*x11210))+((cj1*sj2))+((x11205*x11209))+(((-1.0)*r02*x11211)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x11210))+((x11205*x11206))+(((-1.0)*r22*x11211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11215 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11215.valid){
continue;
}
IkReal x11213=((1.0)*(x11215.value));
IkReal x11214=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11213)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11213)));
IkReal gconst4=((1.0)*r21*x11214);
IkReal gconst5=((-1.0)*r20*x11214);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11218 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11218.valid){
continue;
}
IkReal x11216=((1.0)*(x11218.value));
IkReal x11217=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11216)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11216)));
IkReal gconst4=((1.0)*r21*x11217);
IkReal gconst5=((-1.0)*r20*x11217);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11221 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11221.valid){
continue;
}
IkReal x11219=((1.0)*(x11221.value));
IkReal x11220=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11219)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11219)));
IkReal gconst4=((1.0)*r21*x11220);
IkReal gconst5=((-1.0)*r20*x11220);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11222=(gconst5*r10);
IkReal x11223=(gconst4*r11);
CheckValue<IkReal> x11224=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x11222*x11223))+(x11222*x11222)+(x11223*x11223))),-1);
if(!x11224.valid){
continue;
}
CheckValue<IkReal> x11225 = IKatan2WithCheck(IkReal((x11222+(((-1.0)*x11223)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11224.value)))+(x11225.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11226=IKcos(j4);
IkReal x11227=IKsin(j4);
IkReal x11228=((1.0)*x11226);
IkReal x11229=(gconst5*x11227);
IkReal x11230=(gconst5*x11226);
IkReal x11231=((1.0)*gconst4*x11227);
evalcond[0]=(((r12*x11227))+(((-1.0)*gconst4*r11*x11228))+((r10*x11230)));
evalcond[1]=(((r20*x11229))+(((-1.0)*r21*x11231))+(((-1.0)*r22*x11228)));
evalcond[2]=((((-1.0)*r01*x11231))+((r00*x11229))+(((-1.0)*r02*x11228)));
evalcond[3]=((-1.0)+((r10*x11229))+(((-1.0)*r11*x11231))+(((-1.0)*r12*x11228)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x11227))+(((-1.0)*gconst4*r01*x11228))+((r00*x11230)));
evalcond[5]=(((r22*x11227))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11230))+(((-1.0)*gconst4*r21*x11228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11232=((1.0)*gconst4);
CheckValue<IkReal> x11233 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11232))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11233.valid){
continue;
}
CheckValue<IkReal> x11234=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11232))+(((-1.0)*gconst5*r01)))),-1);
if(!x11234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11233.value)+(((1.5707963267949)*(x11234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11235=IKcos(j4);
IkReal x11236=IKsin(j4);
IkReal x11237=((1.0)*x11235);
IkReal x11238=(gconst5*x11236);
IkReal x11239=(gconst5*x11235);
IkReal x11240=((1.0)*gconst4*x11236);
evalcond[0]=(((r12*x11236))+(((-1.0)*gconst4*r11*x11237))+((r10*x11239)));
evalcond[1]=(((r20*x11238))+(((-1.0)*r21*x11240))+(((-1.0)*r22*x11237)));
evalcond[2]=((((-1.0)*r02*x11237))+(((-1.0)*r01*x11240))+((r00*x11238)));
evalcond[3]=((-1.0)+((r10*x11238))+(((-1.0)*r11*x11240))+(((-1.0)*r12*x11237)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x11236))+((r00*x11239))+(((-1.0)*gconst4*r01*x11237)));
evalcond[5]=(((r22*x11236))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11239))+(((-1.0)*gconst4*r21*x11237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11241 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11241.valid){
continue;
}
CheckValue<IkReal> x11242=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11241.value)+(((1.5707963267949)*(x11242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11243=IKcos(j4);
IkReal x11244=IKsin(j4);
IkReal x11245=((1.0)*x11243);
IkReal x11246=(gconst5*x11244);
IkReal x11247=(gconst5*x11243);
IkReal x11248=((1.0)*gconst4*x11244);
evalcond[0]=(((r12*x11244))+(((-1.0)*gconst4*r11*x11245))+((r10*x11247)));
evalcond[1]=(((r20*x11246))+(((-1.0)*r21*x11248))+(((-1.0)*r22*x11245)));
evalcond[2]=((((-1.0)*r02*x11245))+(((-1.0)*r01*x11248))+((r00*x11246)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x11248))+((r10*x11246))+(((-1.0)*r12*x11245)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x11244))+((r00*x11247))+(((-1.0)*gconst4*r01*x11245)));
evalcond[5]=(((r22*x11244))+((r20*x11247))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11251 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11251.valid){
continue;
}
IkReal x11249=((1.0)*(x11251.value));
IkReal x11250=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11249)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11249)));
IkReal gconst4=((1.0)*r21*x11250);
IkReal gconst5=((-1.0)*r20*x11250);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11254 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11254.valid){
continue;
}
IkReal x11252=((1.0)*(x11254.value));
IkReal x11253=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11252)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11252)));
IkReal gconst4=((1.0)*r21*x11253);
IkReal gconst5=((-1.0)*r20*x11253);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11257 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11257.valid){
continue;
}
IkReal x11255=((1.0)*(x11257.value));
IkReal x11256=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11255)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11255)));
IkReal gconst4=((1.0)*r21*x11256);
IkReal gconst5=((-1.0)*r20*x11256);
IkReal x11258=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11262=IKPowWithIntegerCheck(x11258,-1);
if(!x11262.valid){
continue;
}
IkReal x11259=x11262.value;
IkReal x11260=((1.0)*x11259);
IkReal x11261=((((-2.0)*r10*r11*r20*r21*x11259))+(((-1.0)*x11260*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x11260*(r11*r11)*(r21*r21))));
j4eval[0]=x11261;
j4eval[1]=r12;
j4eval[2]=x11258;
j4eval[3]=IKsign(x11261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11263=(gconst5*r10);
IkReal x11264=(gconst4*r11);
CheckValue<IkReal> x11265=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11263*x11263)))+(((-1.0)*(r12*r12)))+(((2.0)*x11263*x11264))+(((-1.0)*(x11264*x11264))))),-1);
if(!x11265.valid){
continue;
}
CheckValue<IkReal> x11266 = IKatan2WithCheck(IkReal(((((-1.0)*x11263))+x11264)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11265.value)))+(x11266.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11267=IKsin(j4);
IkReal x11268=IKcos(j4);
IkReal x11269=(gconst4*r21);
IkReal x11270=(gconst5*r10);
IkReal x11271=((1.0)*cj2);
IkReal x11272=(gconst4*r11);
IkReal x11273=(gconst4*r01);
IkReal x11274=((1.0)*x11268);
IkReal x11275=((1.0)*x11267);
IkReal x11276=(gconst5*x11267);
evalcond[0]=((((-1.0)*r22*x11274))+(((-1.0)*x11269*x11275))+((r20*x11276)));
evalcond[1]=(((r00*x11276))+(((-1.0)*r02*x11274))+(((-1.0)*x11273*x11275)));
evalcond[2]=((((-1.0)*r12*x11275))+((x11268*x11272))+(((-1.0)*x11270*x11274)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x11274))+((x11267*x11270))+(((-1.0)*x11272*x11275)));
evalcond[4]=((((-1.0)*gconst5*r00*x11274))+(((-1.0)*r02*x11275))+((sj1*sj2))+((x11268*x11273))+(((-1.0)*cj1*x11271)));
evalcond[5]=((((-1.0)*gconst5*r20*x11274))+((x11268*x11269))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11271))+(((-1.0)*r22*x11275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11277=((1.0)*gconst4);
CheckValue<IkReal> x11278=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11277))+(((-1.0)*gconst5*r01)))),-1);
if(!x11278.valid){
continue;
}
CheckValue<IkReal> x11279 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11277))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11278.value)))+(x11279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11280=IKsin(j4);
IkReal x11281=IKcos(j4);
IkReal x11282=(gconst4*r21);
IkReal x11283=(gconst5*r10);
IkReal x11284=((1.0)*cj2);
IkReal x11285=(gconst4*r11);
IkReal x11286=(gconst4*r01);
IkReal x11287=((1.0)*x11281);
IkReal x11288=((1.0)*x11280);
IkReal x11289=(gconst5*x11280);
evalcond[0]=((((-1.0)*x11282*x11288))+(((-1.0)*r22*x11287))+((r20*x11289)));
evalcond[1]=((((-1.0)*r02*x11287))+(((-1.0)*x11286*x11288))+((r00*x11289)));
evalcond[2]=((((-1.0)*r12*x11288))+(((-1.0)*x11283*x11287))+((x11281*x11285)));
evalcond[3]=((-1.0)+((x11280*x11283))+(((-1.0)*r12*x11287))+(((-1.0)*x11285*x11288)));
evalcond[4]=((((-1.0)*r02*x11288))+(((-1.0)*cj1*x11284))+((sj1*sj2))+(((-1.0)*gconst5*r00*x11287))+((x11281*x11286)));
evalcond[5]=((((-1.0)*gconst5*r20*x11287))+(((-1.0)*r22*x11288))+(((-1.0)*cj1*sj2))+((x11281*x11282))+(((-1.0)*sj1*x11284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11290 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11290.valid){
continue;
}
CheckValue<IkReal> x11291=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11290.value)+(((1.5707963267949)*(x11291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11292=IKsin(j4);
IkReal x11293=IKcos(j4);
IkReal x11294=(gconst4*r21);
IkReal x11295=(gconst5*r10);
IkReal x11296=((1.0)*cj2);
IkReal x11297=(gconst4*r11);
IkReal x11298=(gconst4*r01);
IkReal x11299=((1.0)*x11293);
IkReal x11300=((1.0)*x11292);
IkReal x11301=(gconst5*x11292);
evalcond[0]=(((r20*x11301))+(((-1.0)*r22*x11299))+(((-1.0)*x11294*x11300)));
evalcond[1]=((((-1.0)*x11298*x11300))+(((-1.0)*r02*x11299))+((r00*x11301)));
evalcond[2]=((((-1.0)*x11295*x11299))+(((-1.0)*r12*x11300))+((x11293*x11297)));
evalcond[3]=((-1.0)+(((-1.0)*x11297*x11300))+((x11292*x11295))+(((-1.0)*r12*x11299)));
evalcond[4]=((((-1.0)*cj1*x11296))+((sj1*sj2))+(((-1.0)*r02*x11300))+(((-1.0)*gconst5*r00*x11299))+((x11293*x11298)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x11300))+(((-1.0)*sj1*x11296))+((x11293*x11294))+(((-1.0)*gconst5*r20*x11299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11304 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11304.valid){
continue;
}
IkReal x11302=((1.0)*(x11304.value));
IkReal x11303=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11302)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11302)));
IkReal gconst4=((1.0)*r21*x11303);
IkReal gconst5=((-1.0)*r20*x11303);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11307 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11307.valid){
continue;
}
IkReal x11305=((1.0)*(x11307.value));
IkReal x11306=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11305)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11305)));
IkReal gconst4=((1.0)*r21*x11306);
IkReal gconst5=((-1.0)*r20*x11306);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11310 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11310.valid){
continue;
}
IkReal x11308=((1.0)*(x11310.value));
IkReal x11309=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11308)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11308)));
IkReal gconst4=((1.0)*r21*x11309);
IkReal gconst5=((-1.0)*r20*x11309);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11311=(gconst5*r10);
IkReal x11312=(gconst4*r11);
CheckValue<IkReal> x11313=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x11311*x11312))+(x11311*x11311)+(x11312*x11312))),-1);
if(!x11313.valid){
continue;
}
CheckValue<IkReal> x11314 = IKatan2WithCheck(IkReal((x11311+(((-1.0)*x11312)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11313.value)))+(x11314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11315=IKcos(j4);
IkReal x11316=IKsin(j4);
IkReal x11317=((1.0)*cj2);
IkReal x11318=((1.0)*x11315);
IkReal x11319=(gconst5*x11316);
IkReal x11320=(gconst5*x11315);
IkReal x11321=((1.0)*gconst4*x11316);
evalcond[0]=(((r10*x11320))+(((-1.0)*gconst4*r11*x11318))+((r12*x11316)));
evalcond[1]=((((-1.0)*r22*x11318))+(((-1.0)*r21*x11321))+((r20*x11319)));
evalcond[2]=((((-1.0)*r02*x11318))+(((-1.0)*r01*x11321))+((r00*x11319)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x11318))+(((-1.0)*r11*x11321))+((r10*x11319)));
evalcond[4]=((((-1.0)*gconst4*r01*x11318))+((r02*x11316))+((sj1*sj2))+(((-1.0)*cj1*x11317))+((r00*x11320)));
evalcond[5]=(((r22*x11316))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r21*x11318))+((r20*x11320))+(((-1.0)*sj1*x11317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11322=((1.0)*gconst4);
CheckValue<IkReal> x11323 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11322))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11323.valid){
continue;
}
CheckValue<IkReal> x11324=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11322))+(((-1.0)*gconst5*r01)))),-1);
if(!x11324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11323.value)+(((1.5707963267949)*(x11324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11325=IKcos(j4);
IkReal x11326=IKsin(j4);
IkReal x11327=((1.0)*cj2);
IkReal x11328=((1.0)*x11325);
IkReal x11329=(gconst5*x11326);
IkReal x11330=(gconst5*x11325);
IkReal x11331=((1.0)*gconst4*x11326);
evalcond[0]=(((r10*x11330))+(((-1.0)*gconst4*r11*x11328))+((r12*x11326)));
evalcond[1]=((((-1.0)*r21*x11331))+(((-1.0)*r22*x11328))+((r20*x11329)));
evalcond[2]=((((-1.0)*r02*x11328))+(((-1.0)*r01*x11331))+((r00*x11329)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x11328))+((r10*x11329))+(((-1.0)*r11*x11331)));
evalcond[4]=((((-1.0)*gconst4*r01*x11328))+((sj1*sj2))+((r02*x11326))+(((-1.0)*cj1*x11327))+((r00*x11330)));
evalcond[5]=(((r22*x11326))+((r20*x11330))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r21*x11328))+(((-1.0)*sj1*x11327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11332 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11332.valid){
continue;
}
CheckValue<IkReal> x11333=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11332.value)+(((1.5707963267949)*(x11333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11334=IKcos(j4);
IkReal x11335=IKsin(j4);
IkReal x11336=((1.0)*cj2);
IkReal x11337=((1.0)*x11334);
IkReal x11338=(gconst5*x11335);
IkReal x11339=(gconst5*x11334);
IkReal x11340=((1.0)*gconst4*x11335);
evalcond[0]=(((r12*x11335))+((r10*x11339))+(((-1.0)*gconst4*r11*x11337)));
evalcond[1]=((((-1.0)*r21*x11340))+(((-1.0)*r22*x11337))+((r20*x11338)));
evalcond[2]=((((-1.0)*r01*x11340))+((r00*x11338))+(((-1.0)*r02*x11337)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x11340))+(((-1.0)*r12*x11337))+((r10*x11338)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x11336))+((r00*x11339))+(((-1.0)*gconst4*r01*x11337))+((r02*x11335)));
evalcond[5]=(((r20*x11339))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11336))+(((-1.0)*gconst4*r21*x11337))+((r22*x11335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)+r12);
op[1]=((((-2.0)*gconst4*r11))+(((2.0)*gconst5*r10)));
op[2]=((-1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11341=gconst5*gconst5;
IkReal x11342=gconst4*gconst4;
IkReal x11343=(cj3*r10);
IkReal x11344=(r11*sj3);
IkReal x11345=(r10*sj3);
IkReal x11346=(cj3*r11);
IkReal x11347=(r21*x11342);
IkReal x11348=(gconst4*gconst5*r20);
IkReal x11349=(r20*x11341);
IkReal x11350=((1.0)*gconst4*gconst5*r21);
CheckValue<IkReal> x11351 = IKatan2WithCheck(IkReal((((gconst4*r22*x11345))+((gconst5*r22*x11344)))),IkReal(((((-1.0)*x11345*x11347))+(((-1.0)*x11344*x11350))+((x11345*x11348))+((x11344*x11349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11351.valid){
continue;
}
CheckValue<IkReal> x11352=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x11343*x11350))+(((-1.0)*x11346*x11348))+((x11343*x11349))+((x11346*x11347)))),-1);
if(!x11352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11351.value)+(((1.5707963267949)*(x11352.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11353=IKsin(j4);
IkReal x11354=IKcos(j4);
IkReal x11355=(sj1*sj2);
IkReal x11356=(cj3*gconst5);
IkReal x11357=((1.0)*cj1);
IkReal x11358=(gconst5*sj3);
IkReal x11359=(gconst4*r21);
IkReal x11360=(gconst4*r11);
IkReal x11361=(gconst4*r01);
IkReal x11362=(cj2*sj1);
IkReal x11363=(gconst4*r10);
IkReal x11364=((1.0)*cj3);
IkReal x11365=(gconst4*r00);
IkReal x11366=(gconst4*r20);
IkReal x11367=(cj2*x11357);
IkReal x11368=((1.0)*x11354);
IkReal x11369=((1.0)*x11353);
IkReal x11370=(sj3*x11354);
IkReal x11371=(gconst5*x11353);
IkReal x11372=(cj3*x11354);
evalcond[0]=(((r20*x11371))+(((-1.0)*r22*x11368))+(((-1.0)*x11359*x11369)));
evalcond[1]=(((r00*x11371))+(((-1.0)*r02*x11368))+(((-1.0)*x11361*x11369)));
evalcond[2]=((-1.0)+((r10*x11371))+(((-1.0)*x11360*x11369))+(((-1.0)*r12*x11368)));
evalcond[3]=(((r11*x11358))+(((-1.0)*r12*x11353*x11364))+(((-1.0)*r10*x11356*x11368))+((x11360*x11372))+((sj3*x11363)));
evalcond[4]=((((-1.0)*x11363*x11364))+(((-1.0)*r12*sj3*x11369))+(((-1.0)*r10*x11358*x11368))+((x11360*x11370))+(((-1.0)*r11*x11356)));
evalcond[5]=((((-1.0)*x11367))+(((-1.0)*r02*x11353*x11364))+((x11361*x11372))+x11355+(((-1.0)*r00*x11356*x11368))+((r01*x11358))+((sj3*x11365)));
evalcond[6]=((((-1.0)*x11362))+(((-1.0)*r20*x11356*x11368))+((x11359*x11372))+((r21*x11358))+(((-1.0)*r22*x11353*x11364))+(((-1.0)*sj2*x11357))+((sj3*x11366)));
evalcond[7]=((((-1.0)*r02*sj3*x11369))+((x11361*x11370))+((cj1*sj2))+x11362+(((-1.0)*r01*x11356))+(((-1.0)*r00*x11358*x11368))+(((-1.0)*x11364*x11365)));
evalcond[8]=((((-1.0)*x11367))+(((-1.0)*r22*sj3*x11369))+x11355+((x11359*x11370))+(((-1.0)*r21*x11356))+(((-1.0)*r20*x11358*x11368))+(((-1.0)*x11364*x11366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11373=((1.0)*gconst4);
CheckValue<IkReal> x11374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11373))+(((-1.0)*gconst5*r01)))),-1);
if(!x11374.valid){
continue;
}
CheckValue<IkReal> x11375 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11373))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11374.value)))+(x11375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11376=IKsin(j4);
IkReal x11377=IKcos(j4);
IkReal x11378=(sj1*sj2);
IkReal x11379=(cj3*gconst5);
IkReal x11380=((1.0)*cj1);
IkReal x11381=(gconst5*sj3);
IkReal x11382=(gconst4*r21);
IkReal x11383=(gconst4*r11);
IkReal x11384=(gconst4*r01);
IkReal x11385=(cj2*sj1);
IkReal x11386=(gconst4*r10);
IkReal x11387=((1.0)*cj3);
IkReal x11388=(gconst4*r00);
IkReal x11389=(gconst4*r20);
IkReal x11390=(cj2*x11380);
IkReal x11391=((1.0)*x11377);
IkReal x11392=((1.0)*x11376);
IkReal x11393=(sj3*x11377);
IkReal x11394=(gconst5*x11376);
IkReal x11395=(cj3*x11377);
evalcond[0]=((((-1.0)*x11382*x11392))+((r20*x11394))+(((-1.0)*r22*x11391)));
evalcond[1]=(((r00*x11394))+(((-1.0)*x11384*x11392))+(((-1.0)*r02*x11391)));
evalcond[2]=((-1.0)+(((-1.0)*x11383*x11392))+((r10*x11394))+(((-1.0)*r12*x11391)));
evalcond[3]=(((r11*x11381))+((x11383*x11395))+((sj3*x11386))+(((-1.0)*r12*x11376*x11387))+(((-1.0)*r10*x11379*x11391)));
evalcond[4]=((((-1.0)*r11*x11379))+((x11383*x11393))+(((-1.0)*r12*sj3*x11392))+(((-1.0)*x11386*x11387))+(((-1.0)*r10*x11381*x11391)));
evalcond[5]=(((sj3*x11388))+(((-1.0)*r00*x11379*x11391))+(((-1.0)*x11390))+x11378+(((-1.0)*r02*x11376*x11387))+((r01*x11381))+((x11384*x11395)));
evalcond[6]=((((-1.0)*r20*x11379*x11391))+(((-1.0)*r22*x11376*x11387))+((x11382*x11395))+((sj3*x11389))+(((-1.0)*sj2*x11380))+((r21*x11381))+(((-1.0)*x11385)));
evalcond[7]=(((cj1*sj2))+x11385+(((-1.0)*r00*x11381*x11391))+((x11384*x11393))+(((-1.0)*r02*sj3*x11392))+(((-1.0)*x11387*x11388))+(((-1.0)*r01*x11379)));
evalcond[8]=(((x11382*x11393))+(((-1.0)*r21*x11379))+(((-1.0)*x11390))+x11378+(((-1.0)*r22*sj3*x11392))+(((-1.0)*r20*x11381*x11391))+(((-1.0)*x11387*x11389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11396 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11396.valid){
continue;
}
CheckValue<IkReal> x11397=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11396.value)+(((1.5707963267949)*(x11397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11398=IKsin(j4);
IkReal x11399=IKcos(j4);
IkReal x11400=(sj1*sj2);
IkReal x11401=(cj3*gconst5);
IkReal x11402=((1.0)*cj1);
IkReal x11403=(gconst5*sj3);
IkReal x11404=(gconst4*r21);
IkReal x11405=(gconst4*r11);
IkReal x11406=(gconst4*r01);
IkReal x11407=(cj2*sj1);
IkReal x11408=(gconst4*r10);
IkReal x11409=((1.0)*cj3);
IkReal x11410=(gconst4*r00);
IkReal x11411=(gconst4*r20);
IkReal x11412=(cj2*x11402);
IkReal x11413=((1.0)*x11399);
IkReal x11414=((1.0)*x11398);
IkReal x11415=(sj3*x11399);
IkReal x11416=(gconst5*x11398);
IkReal x11417=(cj3*x11399);
evalcond[0]=((((-1.0)*x11404*x11414))+((r20*x11416))+(((-1.0)*r22*x11413)));
evalcond[1]=(((r00*x11416))+(((-1.0)*x11406*x11414))+(((-1.0)*r02*x11413)));
evalcond[2]=((-1.0)+((r10*x11416))+(((-1.0)*r12*x11413))+(((-1.0)*x11405*x11414)));
evalcond[3]=((((-1.0)*r12*x11398*x11409))+((sj3*x11408))+((r11*x11403))+((x11405*x11417))+(((-1.0)*r10*x11401*x11413)));
evalcond[4]=((((-1.0)*x11408*x11409))+(((-1.0)*r12*sj3*x11414))+((x11405*x11415))+(((-1.0)*r10*x11403*x11413))+(((-1.0)*r11*x11401)));
evalcond[5]=((((-1.0)*r02*x11398*x11409))+x11400+(((-1.0)*x11412))+(((-1.0)*r00*x11401*x11413))+((sj3*x11410))+((r01*x11403))+((x11406*x11417)));
evalcond[6]=(((r21*x11403))+((x11404*x11417))+(((-1.0)*r20*x11401*x11413))+(((-1.0)*sj2*x11402))+(((-1.0)*r22*x11398*x11409))+(((-1.0)*x11407))+((sj3*x11411)));
evalcond[7]=((((-1.0)*r02*sj3*x11414))+(((-1.0)*r01*x11401))+x11407+((cj1*sj2))+(((-1.0)*r00*x11403*x11413))+(((-1.0)*x11409*x11410))+((x11406*x11415)));
evalcond[8]=((((-1.0)*r22*sj3*x11414))+x11400+((x11404*x11415))+(((-1.0)*r21*x11401))+(((-1.0)*x11412))+(((-1.0)*r20*x11403*x11413))+(((-1.0)*x11409*x11411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11420 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11420.valid){
continue;
}
IkReal x11418=((1.0)*(x11420.value));
IkReal x11419=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11418)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11418)));
IkReal gconst4=((1.0)*r21*x11419);
IkReal gconst5=((-1.0)*r20*x11419);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11423 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11423.valid){
continue;
}
IkReal x11421=((1.0)*(x11423.value));
IkReal x11422=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11421)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11421)));
IkReal gconst4=((1.0)*r21*x11422);
IkReal gconst5=((-1.0)*r20*x11422);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11426 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11426.valid){
continue;
}
IkReal x11424=((1.0)*(x11426.value));
IkReal x11425=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11424)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11424)));
IkReal gconst4=((1.0)*r21*x11425);
IkReal gconst5=((-1.0)*r20*x11425);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11429 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11429.valid){
continue;
}
IkReal x11427=((1.0)*(x11429.value));
IkReal x11428=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11427)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11427)));
IkReal gconst4=((1.0)*r21*x11428);
IkReal gconst5=((-1.0)*r20*x11428);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11432 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11432.valid){
continue;
}
IkReal x11430=((1.0)*(x11432.value));
IkReal x11431=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11430)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11430)));
IkReal gconst4=((1.0)*r21*x11431);
IkReal gconst5=((-1.0)*r20*x11431);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11435 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11435.valid){
continue;
}
IkReal x11433=((1.0)*(x11435.value));
IkReal x11434=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11433)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11433)));
IkReal gconst4=((1.0)*r21*x11434);
IkReal gconst5=((-1.0)*r20*x11434);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11436=(gconst5*r10);
IkReal x11437=(gconst4*r11);
CheckValue<IkReal> x11438=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11437*x11437)+(x11436*x11436)+(((-2.0)*x11436*x11437)))),-1);
if(!x11438.valid){
continue;
}
CheckValue<IkReal> x11439 = IKatan2WithCheck(IkReal((x11437+(((-1.0)*x11436)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11438.value)))+(x11439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11440=IKsin(j4);
IkReal x11441=IKcos(j4);
IkReal x11442=(gconst4*r21);
IkReal x11443=(gconst5*r10);
IkReal x11444=((1.0)*cj2);
IkReal x11445=(gconst4*r11);
IkReal x11446=(gconst4*r01);
IkReal x11447=((1.0)*x11441);
IkReal x11448=((1.0)*x11440);
IkReal x11449=(gconst5*x11440);
evalcond[0]=((((-1.0)*r22*x11447))+((r20*x11449))+(((-1.0)*x11442*x11448)));
evalcond[1]=(((r00*x11449))+(((-1.0)*x11446*x11448))+(((-1.0)*r02*x11447)));
evalcond[2]=(((x11441*x11445))+(((-1.0)*r12*x11448))+(((-1.0)*x11443*x11447)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11447))+(((-1.0)*x11445*x11448))+((x11440*x11443)));
evalcond[4]=(((x11441*x11442))+(((-1.0)*cj1*x11444))+((sj1*sj2))+(((-1.0)*gconst5*r20*x11447))+(((-1.0)*r22*x11448)));
evalcond[5]=((((-1.0)*gconst5*r00*x11447))+((x11441*x11446))+(((-1.0)*sj1*x11444))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x11448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11450=((1.0)*gconst4);
CheckValue<IkReal> x11451 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x11450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11451.valid){
continue;
}
CheckValue<IkReal> x11452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11450))+(((-1.0)*gconst5*r21)))),-1);
if(!x11452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11451.value)+(((1.5707963267949)*(x11452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11453=IKsin(j4);
IkReal x11454=IKcos(j4);
IkReal x11455=(gconst4*r21);
IkReal x11456=(gconst5*r10);
IkReal x11457=((1.0)*cj2);
IkReal x11458=(gconst4*r11);
IkReal x11459=(gconst4*r01);
IkReal x11460=((1.0)*x11454);
IkReal x11461=((1.0)*x11453);
IkReal x11462=(gconst5*x11453);
evalcond[0]=((((-1.0)*x11455*x11461))+(((-1.0)*r22*x11460))+((r20*x11462)));
evalcond[1]=((((-1.0)*r02*x11460))+(((-1.0)*x11459*x11461))+((r00*x11462)));
evalcond[2]=((((-1.0)*r12*x11461))+((x11454*x11458))+(((-1.0)*x11456*x11460)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11460))+(((-1.0)*x11458*x11461))+((x11453*x11456)));
evalcond[4]=(((sj1*sj2))+((x11454*x11455))+(((-1.0)*gconst5*r20*x11460))+(((-1.0)*r22*x11461))+(((-1.0)*cj1*x11457)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x11454*x11459))+(((-1.0)*r02*x11461))+(((-1.0)*gconst5*r00*x11460))+(((-1.0)*sj1*x11457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11463 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11463.valid){
continue;
}
CheckValue<IkReal> x11464=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11463.value)+(((1.5707963267949)*(x11464.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11465=IKsin(j4);
IkReal x11466=IKcos(j4);
IkReal x11467=(gconst4*r21);
IkReal x11468=(gconst5*r10);
IkReal x11469=((1.0)*cj2);
IkReal x11470=(gconst4*r11);
IkReal x11471=(gconst4*r01);
IkReal x11472=((1.0)*x11466);
IkReal x11473=((1.0)*x11465);
IkReal x11474=(gconst5*x11465);
evalcond[0]=((((-1.0)*r22*x11472))+((r20*x11474))+(((-1.0)*x11467*x11473)));
evalcond[1]=(((r00*x11474))+(((-1.0)*x11471*x11473))+(((-1.0)*r02*x11472)));
evalcond[2]=((((-1.0)*r12*x11473))+((x11466*x11470))+(((-1.0)*x11468*x11472)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11472))+((x11465*x11468))+(((-1.0)*x11470*x11473)));
evalcond[4]=(((x11466*x11467))+(((-1.0)*cj1*x11469))+((sj1*sj2))+(((-1.0)*gconst5*r20*x11472))+(((-1.0)*r22*x11473)));
evalcond[5]=((((-1.0)*gconst5*r00*x11472))+((x11466*x11471))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11469))+(((-1.0)*r02*x11473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11477 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11477.valid){
continue;
}
IkReal x11475=((1.0)*(x11477.value));
IkReal x11476=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11475)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11475)));
IkReal gconst4=((1.0)*r21*x11476);
IkReal gconst5=((-1.0)*r20*x11476);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11480 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11480.valid){
continue;
}
IkReal x11478=((1.0)*(x11480.value));
IkReal x11479=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11478)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11478)));
IkReal gconst4=((1.0)*r21*x11479);
IkReal gconst5=((-1.0)*r20*x11479);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11483 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11483.valid){
continue;
}
IkReal x11481=((1.0)*(x11483.value));
IkReal x11482=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11481)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11481)));
IkReal gconst4=((1.0)*r21*x11482);
IkReal gconst5=((-1.0)*r20*x11482);
IkReal x11484=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11488=IKPowWithIntegerCheck(x11484,-1);
if(!x11488.valid){
continue;
}
IkReal x11485=x11488.value;
IkReal x11486=((1.0)*x11485);
IkReal x11487=((((-1.0)*x11486*(r11*r11)*(r21*r21)))+(((-1.0)*x11486*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x11485)));
j4eval[0]=x11487;
j4eval[1]=r12;
j4eval[2]=x11484;
j4eval[3]=IKsign(x11487);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11489=(gconst5*r10);
IkReal x11490=(gconst4*r11);
CheckValue<IkReal> x11491 = IKatan2WithCheck(IkReal((x11489+(((-1.0)*x11490)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11491.valid){
continue;
}
CheckValue<IkReal> x11492=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11489*x11489)))+(((2.0)*x11489*x11490))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11490*x11490))))),-1);
if(!x11492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11491.value)+(((1.5707963267949)*(x11492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11493=IKcos(j4);
IkReal x11494=IKsin(j4);
IkReal x11495=((1.0)*cj2);
IkReal x11496=((1.0)*x11493);
IkReal x11497=(gconst5*x11494);
IkReal x11498=(gconst5*x11493);
IkReal x11499=((1.0)*gconst4*x11494);
evalcond[0]=((((-1.0)*gconst4*r11*x11496))+((r10*x11498))+((r12*x11494)));
evalcond[1]=(((r20*x11497))+(((-1.0)*r22*x11496))+(((-1.0)*r21*x11499)));
evalcond[2]=(((r00*x11497))+(((-1.0)*r02*x11496))+(((-1.0)*r01*x11499)));
evalcond[3]=((1.0)+((r10*x11497))+(((-1.0)*r11*x11499))+(((-1.0)*r12*x11496)));
evalcond[4]=(((r22*x11494))+((r20*x11498))+((sj1*sj2))+(((-1.0)*cj1*x11495))+(((-1.0)*gconst4*r21*x11496)));
evalcond[5]=(((r00*x11498))+(((-1.0)*sj1*x11495))+(((-1.0)*cj1*sj2))+((r02*x11494))+(((-1.0)*gconst4*r01*x11496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11500=((1.0)*gconst4);
CheckValue<IkReal> x11501=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x11500)))),-1);
if(!x11501.valid){
continue;
}
CheckValue<IkReal> x11502 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x11500)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11501.value)))+(x11502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11503=IKcos(j4);
IkReal x11504=IKsin(j4);
IkReal x11505=((1.0)*cj2);
IkReal x11506=((1.0)*x11503);
IkReal x11507=(gconst5*x11504);
IkReal x11508=(gconst5*x11503);
IkReal x11509=((1.0)*gconst4*x11504);
evalcond[0]=(((r12*x11504))+((r10*x11508))+(((-1.0)*gconst4*r11*x11506)));
evalcond[1]=((((-1.0)*r22*x11506))+((r20*x11507))+(((-1.0)*r21*x11509)));
evalcond[2]=((((-1.0)*r02*x11506))+((r00*x11507))+(((-1.0)*r01*x11509)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11506))+(((-1.0)*r11*x11509))+((r10*x11507)));
evalcond[4]=((((-1.0)*gconst4*r21*x11506))+((sj1*sj2))+((r20*x11508))+(((-1.0)*cj1*x11505))+((r22*x11504)));
evalcond[5]=((((-1.0)*sj1*x11505))+(((-1.0)*cj1*sj2))+((r00*x11508))+(((-1.0)*gconst4*r01*x11506))+((r02*x11504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11510 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11510.valid){
continue;
}
CheckValue<IkReal> x11511=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11510.value)+(((1.5707963267949)*(x11511.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11512=IKcos(j4);
IkReal x11513=IKsin(j4);
IkReal x11514=((1.0)*cj2);
IkReal x11515=((1.0)*x11512);
IkReal x11516=(gconst5*x11513);
IkReal x11517=(gconst5*x11512);
IkReal x11518=((1.0)*gconst4*x11513);
evalcond[0]=((((-1.0)*gconst4*r11*x11515))+((r12*x11513))+((r10*x11517)));
evalcond[1]=(((r20*x11516))+(((-1.0)*r22*x11515))+(((-1.0)*r21*x11518)));
evalcond[2]=((((-1.0)*r01*x11518))+(((-1.0)*r02*x11515))+((r00*x11516)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11515))+(((-1.0)*r11*x11518))+((r10*x11516)));
evalcond[4]=(((r20*x11517))+((sj1*sj2))+(((-1.0)*cj1*x11514))+((r22*x11513))+(((-1.0)*gconst4*r21*x11515)));
evalcond[5]=((((-1.0)*gconst4*r01*x11515))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11514))+((r02*x11513))+((r00*x11517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11521 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11521.valid){
continue;
}
IkReal x11519=((1.0)*(x11521.value));
IkReal x11520=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11519)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11519)));
IkReal gconst4=((1.0)*r21*x11520);
IkReal gconst5=((-1.0)*r20*x11520);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11524 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11524.valid){
continue;
}
IkReal x11522=((1.0)*(x11524.value));
IkReal x11523=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11522)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11522)));
IkReal gconst4=((1.0)*r21*x11523);
IkReal gconst5=((-1.0)*r20*x11523);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11527 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11527.valid){
continue;
}
IkReal x11525=((1.0)*(x11527.value));
IkReal x11526=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11525)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11525)));
IkReal gconst4=((1.0)*r21*x11526);
IkReal gconst5=((-1.0)*r20*x11526);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11528=(gconst5*r10);
IkReal x11529=(gconst4*r11);
CheckValue<IkReal> x11530=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11529*x11529)+(((-2.0)*x11528*x11529))+(x11528*x11528))),-1);
if(!x11530.valid){
continue;
}
CheckValue<IkReal> x11531 = IKatan2WithCheck(IkReal((x11529+(((-1.0)*x11528)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11530.value)))+(x11531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11532=IKsin(j4);
IkReal x11533=IKcos(j4);
IkReal x11534=(gconst4*r21);
IkReal x11535=(gconst5*r10);
IkReal x11536=((1.0)*sj1);
IkReal x11537=(gconst4*r11);
IkReal x11538=(gconst4*r01);
IkReal x11539=((1.0)*x11533);
IkReal x11540=((1.0)*x11532);
IkReal x11541=(gconst5*x11532);
evalcond[0]=((((-1.0)*x11534*x11540))+((r20*x11541))+(((-1.0)*r22*x11539)));
evalcond[1]=(((r00*x11541))+(((-1.0)*x11538*x11540))+(((-1.0)*r02*x11539)));
evalcond[2]=((((-1.0)*x11535*x11539))+((x11533*x11537))+(((-1.0)*r12*x11540)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11539))+(((-1.0)*x11537*x11540))+((x11532*x11535)));
evalcond[4]=((((-1.0)*sj2*x11536))+(((-1.0)*gconst5*r00*x11539))+((x11533*x11538))+(((-1.0)*r02*x11540))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst5*r20*x11539))+(((-1.0)*cj2*x11536))+(((-1.0)*cj1*sj2))+((x11533*x11534))+(((-1.0)*r22*x11540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11542=((1.0)*gconst4);
CheckValue<IkReal> x11543 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x11542))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11543.valid){
continue;
}
CheckValue<IkReal> x11544=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11542))+(((-1.0)*gconst5*r21)))),-1);
if(!x11544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11543.value)+(((1.5707963267949)*(x11544.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11545=IKsin(j4);
IkReal x11546=IKcos(j4);
IkReal x11547=(gconst4*r21);
IkReal x11548=(gconst5*r10);
IkReal x11549=((1.0)*sj1);
IkReal x11550=(gconst4*r11);
IkReal x11551=(gconst4*r01);
IkReal x11552=((1.0)*x11546);
IkReal x11553=((1.0)*x11545);
IkReal x11554=(gconst5*x11545);
evalcond[0]=((((-1.0)*x11547*x11553))+(((-1.0)*r22*x11552))+((r20*x11554)));
evalcond[1]=((((-1.0)*r02*x11552))+(((-1.0)*x11551*x11553))+((r00*x11554)));
evalcond[2]=(((x11546*x11550))+(((-1.0)*x11548*x11552))+(((-1.0)*r12*x11553)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11552))+(((-1.0)*x11550*x11553))+((x11545*x11548)));
evalcond[4]=(((x11546*x11551))+(((-1.0)*r02*x11553))+(((-1.0)*gconst5*r00*x11552))+(((-1.0)*sj2*x11549))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst5*r20*x11552))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x11553))+((x11546*x11547))+(((-1.0)*cj2*x11549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11555 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11555.valid){
continue;
}
CheckValue<IkReal> x11556=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11555.value)+(((1.5707963267949)*(x11556.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11557=IKsin(j4);
IkReal x11558=IKcos(j4);
IkReal x11559=(gconst4*r21);
IkReal x11560=(gconst5*r10);
IkReal x11561=((1.0)*sj1);
IkReal x11562=(gconst4*r11);
IkReal x11563=(gconst4*r01);
IkReal x11564=((1.0)*x11558);
IkReal x11565=((1.0)*x11557);
IkReal x11566=(gconst5*x11557);
evalcond[0]=(((r20*x11566))+(((-1.0)*x11559*x11565))+(((-1.0)*r22*x11564)));
evalcond[1]=(((r00*x11566))+(((-1.0)*r02*x11564))+(((-1.0)*x11563*x11565)));
evalcond[2]=((((-1.0)*r12*x11565))+(((-1.0)*x11560*x11564))+((x11558*x11562)));
evalcond[3]=((1.0)+(((-1.0)*x11562*x11565))+(((-1.0)*r12*x11564))+((x11557*x11560)));
evalcond[4]=((((-1.0)*sj2*x11561))+((cj1*cj2))+(((-1.0)*gconst5*r00*x11564))+(((-1.0)*r02*x11565))+((x11558*x11563)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst5*r20*x11564))+((x11558*x11559))+(((-1.0)*cj2*x11561))+(((-1.0)*r22*x11565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11569 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11569.valid){
continue;
}
IkReal x11567=((1.0)*(x11569.value));
IkReal x11568=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11567)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11567)));
IkReal gconst4=((1.0)*r21*x11568);
IkReal gconst5=((-1.0)*r20*x11568);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11572 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11572.valid){
continue;
}
IkReal x11570=((1.0)*(x11572.value));
IkReal x11571=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11570)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11570)));
IkReal gconst4=((1.0)*r21*x11571);
IkReal gconst5=((-1.0)*r20*x11571);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11575 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11575.valid){
continue;
}
IkReal x11573=((1.0)*(x11575.value));
IkReal x11574=x10497;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11573)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11573)));
IkReal gconst4=((1.0)*r21*x11574);
IkReal gconst5=((-1.0)*r20*x11574);
IkReal x11576=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11580=IKPowWithIntegerCheck(x11576,-1);
if(!x11580.valid){
continue;
}
IkReal x11577=x11580.value;
IkReal x11578=((1.0)*x11577);
IkReal x11579=((((-2.0)*r10*r11*r20*r21*x11577))+(((-1.0)*x11578*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x11578*(r11*r11)*(r21*r21))));
j4eval[0]=x11579;
j4eval[1]=r12;
j4eval[2]=x11576;
j4eval[3]=IKsign(x11579);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11581=(gconst5*r10);
IkReal x11582=(gconst4*r11);
CheckValue<IkReal> x11583 = IKatan2WithCheck(IkReal((x11581+(((-1.0)*x11582)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11583.valid){
continue;
}
CheckValue<IkReal> x11584=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11582*x11582)))+(((2.0)*x11581*x11582))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11581*x11581))))),-1);
if(!x11584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11583.value)+(((1.5707963267949)*(x11584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11585=IKcos(j4);
IkReal x11586=IKsin(j4);
IkReal x11587=((1.0)*sj1);
IkReal x11588=((1.0)*x11585);
IkReal x11589=(gconst5*x11586);
IkReal x11590=(gconst5*x11585);
IkReal x11591=((1.0)*gconst4*x11586);
evalcond[0]=((((-1.0)*gconst4*r11*x11588))+((r10*x11590))+((r12*x11586)));
evalcond[1]=(((r20*x11589))+(((-1.0)*r21*x11591))+(((-1.0)*r22*x11588)));
evalcond[2]=((((-1.0)*r01*x11591))+(((-1.0)*r02*x11588))+((r00*x11589)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11588))+(((-1.0)*r11*x11591))+((r10*x11589)));
evalcond[4]=(((r00*x11590))+(((-1.0)*gconst4*r01*x11588))+((r02*x11586))+((cj1*cj2))+(((-1.0)*sj2*x11587)));
evalcond[5]=(((r20*x11590))+(((-1.0)*cj1*sj2))+((r22*x11586))+(((-1.0)*gconst4*r21*x11588))+(((-1.0)*cj2*x11587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11592=((1.0)*gconst4);
CheckValue<IkReal> x11593=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11592))+(((-1.0)*gconst5*r21)))),-1);
if(!x11593.valid){
continue;
}
CheckValue<IkReal> x11594 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x11592))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11593.value)))+(x11594.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11595=IKcos(j4);
IkReal x11596=IKsin(j4);
IkReal x11597=((1.0)*sj1);
IkReal x11598=((1.0)*x11595);
IkReal x11599=(gconst5*x11596);
IkReal x11600=(gconst5*x11595);
IkReal x11601=((1.0)*gconst4*x11596);
evalcond[0]=(((r10*x11600))+(((-1.0)*gconst4*r11*x11598))+((r12*x11596)));
evalcond[1]=((((-1.0)*r21*x11601))+((r20*x11599))+(((-1.0)*r22*x11598)));
evalcond[2]=((((-1.0)*r01*x11601))+((r00*x11599))+(((-1.0)*r02*x11598)));
evalcond[3]=((1.0)+(((-1.0)*r11*x11601))+((r10*x11599))+(((-1.0)*r12*x11598)));
evalcond[4]=((((-1.0)*gconst4*r01*x11598))+((r00*x11600))+((r02*x11596))+(((-1.0)*sj2*x11597))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst4*r21*x11598))+(((-1.0)*cj2*x11597))+(((-1.0)*cj1*sj2))+((r22*x11596))+((r20*x11600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11602 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11602.valid){
continue;
}
CheckValue<IkReal> x11603=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11602.value)+(((1.5707963267949)*(x11603.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11604=IKcos(j4);
IkReal x11605=IKsin(j4);
IkReal x11606=((1.0)*sj1);
IkReal x11607=((1.0)*x11604);
IkReal x11608=(gconst5*x11605);
IkReal x11609=(gconst5*x11604);
IkReal x11610=((1.0)*gconst4*x11605);
evalcond[0]=((((-1.0)*gconst4*r11*x11607))+((r10*x11609))+((r12*x11605)));
evalcond[1]=((((-1.0)*r22*x11607))+(((-1.0)*r21*x11610))+((r20*x11608)));
evalcond[2]=((((-1.0)*r02*x11607))+((r00*x11608))+(((-1.0)*r01*x11610)));
evalcond[3]=((1.0)+(((-1.0)*r11*x11610))+(((-1.0)*r12*x11607))+((r10*x11608)));
evalcond[4]=((((-1.0)*sj2*x11606))+(((-1.0)*gconst4*r01*x11607))+((r00*x11609))+((r02*x11605))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst4*r21*x11607))+((r22*x11605))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11606))+((r20*x11609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x11613 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11613.valid){
continue;
}
IkReal x11611=((1.0)*(x11613.value));
IkReal x11612=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11611)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11612);
rxp1_1=(px*r21);
rxp1_2=(r11*x11612);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11611)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x11614=((1.0)*r11*r21);
IkReal x11615=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x11615))+(((-1.0)*x11614)));
j4eval[1]=(((sj3*x11615))+((sj3*x11614)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11618 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11618.valid){
continue;
}
IkReal x11616=((1.0)*(x11618.value));
IkReal x11617=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11616)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11617);
rxp1_1=(px*r21);
rxp1_2=(r11*x11617);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11616)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x11619=((1.0)*cj3);
IkReal x11620=(r10*r20);
IkReal x11621=(r11*r21);
j4eval[0]=((((-1.0)*x11621))+(((-1.0)*x11620)));
j4eval[1]=(((x11619*x11621))+((x11619*x11620)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11624 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11624.valid){
continue;
}
IkReal x11622=((1.0)*(x11624.value));
IkReal x11623=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11622)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11623);
rxp1_1=(px*r21);
rxp1_2=(r11*x11623);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11622)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x11625=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r11*r21*x11625))+((r10*r20*x11625)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11626=((1.0)*r10);
CheckValue<IkReal> x11627=IKPowWithIntegerCheck(cj3,-1);
if(!x11627.valid){
continue;
}
CheckValue<IkReal> x11628=IKPowWithIntegerCheck(r02,-1);
if(!x11628.valid){
continue;
}
CheckValue<IkReal> x11629=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x11626))),-1);
if(!x11629.valid){
continue;
}
if( IKabs(((x11627.value)*(x11628.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11629.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x11626)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11627.value)*(x11628.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x11629.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x11626))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11627.value)*(x11628.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x11629.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x11626))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11630=IKsin(j4);
IkReal x11631=IKcos(j4);
IkReal x11632=(gconst5*sj3);
IkReal x11633=((1.0)*r21);
IkReal x11634=(cj3*gconst5);
IkReal x11635=(sj1*sj2);
IkReal x11636=((1.0)*r11);
IkReal x11637=((1.0)*cj2);
IkReal x11638=(cj3*gconst4);
IkReal x11639=(gconst4*sj3);
IkReal x11640=((1.0)*cj1*sj2);
IkReal x11641=(sj1*x11637);
IkReal x11642=((1.0)*x11631);
IkReal x11643=(gconst4*x11630);
IkReal x11644=(gconst5*x11630);
IkReal x11645=(x11631*x11639);
IkReal x11646=((1.0)*r02*x11630);
IkReal x11647=(x11641+x11640);
evalcond[0]=((-1.0)*r02*x11631);
evalcond[1]=((((-1.0)*x11633*x11643))+((r20*x11644)));
evalcond[2]=((1.0)+((r10*x11644))+(((-1.0)*x11636*x11643)));
evalcond[3]=((((-1.0)*x11635))+((cj1*cj2))+(((-1.0)*cj3*x11646)));
evalcond[4]=((((-1.0)*sj3*x11646))+(((-1.0)*x11647)));
evalcond[5]=(((r11*x11632))+((r10*x11639))+((r11*x11631*x11638))+(((-1.0)*r10*x11634*x11642)));
evalcond[6]=(((r11*x11645))+(((-1.0)*r10*x11632*x11642))+(((-1.0)*x11634*x11636))+(((-1.0)*r10*x11638)));
evalcond[7]=(((r21*x11631*x11638))+(((-1.0)*r20*x11634*x11642))+((r21*x11632))+((r20*x11639))+(((-1.0)*x11647)));
evalcond[8]=(x11635+(((-1.0)*r20*x11638))+((r21*x11645))+(((-1.0)*r20*x11632*x11642))+(((-1.0)*x11633*x11634))+(((-1.0)*cj1*x11637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11648=(gconst5*r10);
IkReal x11649=((1.0)*sj3);
IkReal x11650=(gconst4*r11);
CheckValue<IkReal> x11651=IKPowWithIntegerCheck((x11648+(((-1.0)*x11650))),-1);
if(!x11651.valid){
continue;
}
CheckValue<IkReal> x11652=IKPowWithIntegerCheck(((((-1.0)*cj3*x11648))+((cj3*x11650))),-1);
if(!x11652.valid){
continue;
}
if( IKabs(((-1.0)*(x11651.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11652.value)*(((((-1.0)*gconst4*r10*x11649))+(((-1.0)*gconst5*r11*x11649)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11651.value)))+IKsqr(((x11652.value)*(((((-1.0)*gconst4*r10*x11649))+(((-1.0)*gconst5*r11*x11649))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11651.value)), ((x11652.value)*(((((-1.0)*gconst4*r10*x11649))+(((-1.0)*gconst5*r11*x11649))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11653=IKsin(j4);
IkReal x11654=IKcos(j4);
IkReal x11655=(gconst5*sj3);
IkReal x11656=((1.0)*r21);
IkReal x11657=(cj3*gconst5);
IkReal x11658=(sj1*sj2);
IkReal x11659=((1.0)*r11);
IkReal x11660=((1.0)*cj2);
IkReal x11661=(cj3*gconst4);
IkReal x11662=(gconst4*sj3);
IkReal x11663=((1.0)*cj1*sj2);
IkReal x11664=(sj1*x11660);
IkReal x11665=((1.0)*x11654);
IkReal x11666=(gconst4*x11653);
IkReal x11667=(gconst5*x11653);
IkReal x11668=(x11654*x11662);
IkReal x11669=((1.0)*r02*x11653);
IkReal x11670=(x11664+x11663);
evalcond[0]=((-1.0)*r02*x11654);
evalcond[1]=(((r20*x11667))+(((-1.0)*x11656*x11666)));
evalcond[2]=((1.0)+(((-1.0)*x11659*x11666))+((r10*x11667)));
evalcond[3]=((((-1.0)*x11658))+(((-1.0)*cj3*x11669))+((cj1*cj2)));
evalcond[4]=((((-1.0)*sj3*x11669))+(((-1.0)*x11670)));
evalcond[5]=(((r11*x11654*x11661))+((r11*x11655))+(((-1.0)*r10*x11657*x11665))+((r10*x11662)));
evalcond[6]=((((-1.0)*x11657*x11659))+(((-1.0)*r10*x11661))+(((-1.0)*r10*x11655*x11665))+((r11*x11668)));
evalcond[7]=((((-1.0)*r20*x11657*x11665))+((r20*x11662))+((r21*x11655))+((r21*x11654*x11661))+(((-1.0)*x11670)));
evalcond[8]=(((r21*x11668))+x11658+(((-1.0)*r20*x11655*x11665))+(((-1.0)*x11656*x11657))+(((-1.0)*cj1*x11660))+(((-1.0)*r20*x11661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11671=(gconst5*r10);
IkReal x11672=(gconst4*r11);
CheckValue<IkReal> x11673=IKPowWithIntegerCheck((x11671+(((-1.0)*x11672))),-1);
if(!x11673.valid){
continue;
}
CheckValue<IkReal> x11674=IKPowWithIntegerCheck(((((-1.0)*sj3*x11671))+((sj3*x11672))),-1);
if(!x11674.valid){
continue;
}
if( IKabs(((-1.0)*(x11673.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11674.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11673.value)))+IKsqr(((x11674.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11673.value)), ((x11674.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11675=IKsin(j4);
IkReal x11676=IKcos(j4);
IkReal x11677=(gconst5*sj3);
IkReal x11678=((1.0)*r21);
IkReal x11679=(cj3*gconst5);
IkReal x11680=(sj1*sj2);
IkReal x11681=((1.0)*r11);
IkReal x11682=((1.0)*cj2);
IkReal x11683=(cj3*gconst4);
IkReal x11684=(gconst4*sj3);
IkReal x11685=((1.0)*cj1*sj2);
IkReal x11686=(sj1*x11682);
IkReal x11687=((1.0)*x11676);
IkReal x11688=(gconst4*x11675);
IkReal x11689=(gconst5*x11675);
IkReal x11690=(x11676*x11684);
IkReal x11691=((1.0)*r02*x11675);
IkReal x11692=(x11686+x11685);
evalcond[0]=((-1.0)*r02*x11676);
evalcond[1]=((((-1.0)*x11678*x11688))+((r20*x11689)));
evalcond[2]=((1.0)+(((-1.0)*x11681*x11688))+((r10*x11689)));
evalcond[3]=((((-1.0)*x11680))+(((-1.0)*cj3*x11691))+((cj1*cj2)));
evalcond[4]=((((-1.0)*sj3*x11691))+(((-1.0)*x11692)));
evalcond[5]=(((r11*x11676*x11683))+(((-1.0)*r10*x11679*x11687))+((r10*x11684))+((r11*x11677)));
evalcond[6]=((((-1.0)*r10*x11677*x11687))+((r11*x11690))+(((-1.0)*r10*x11683))+(((-1.0)*x11679*x11681)));
evalcond[7]=(((r21*x11676*x11683))+((r21*x11677))+(((-1.0)*x11692))+((r20*x11684))+(((-1.0)*r20*x11679*x11687)));
evalcond[8]=((((-1.0)*x11678*x11679))+x11680+(((-1.0)*cj1*x11682))+(((-1.0)*r20*x11683))+(((-1.0)*r20*x11677*x11687))+((r21*x11690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11693=gconst5*gconst5;
IkReal x11694=gconst4*gconst4;
IkReal x11695=(cj3*r10);
IkReal x11696=(r11*sj3);
IkReal x11697=(r10*sj3);
IkReal x11698=(cj3*r11);
IkReal x11699=(r21*x11694);
IkReal x11700=(gconst4*gconst5*r20);
IkReal x11701=(r20*x11693);
IkReal x11702=((1.0)*gconst4*gconst5*r21);
CheckValue<IkReal> x11703=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x11698*x11700))+((x11698*x11699))+(((-1.0)*x11695*x11702))+((x11695*x11701)))),-1);
if(!x11703.valid){
continue;
}
CheckValue<IkReal> x11704 = IKatan2WithCheck(IkReal((((gconst5*r22*x11696))+((gconst4*r22*x11697)))),IkReal((((x11697*x11700))+((x11696*x11701))+(((-1.0)*x11697*x11699))+(((-1.0)*x11696*x11702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11703.value)))+(x11704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11705=IKsin(j4);
IkReal x11706=IKcos(j4);
IkReal x11707=((1.0)*sj2);
IkReal x11708=(gconst5*sj3);
IkReal x11709=(gconst4*r21);
IkReal x11710=(cj3*r10);
IkReal x11711=(gconst4*r11);
IkReal x11712=((1.0)*cj2);
IkReal x11713=((1.0)*gconst4);
IkReal x11714=(cj3*r00);
IkReal x11715=(gconst4*r01);
IkReal x11716=(gconst4*sj3);
IkReal x11717=(cj3*r20);
IkReal x11718=(cj1*x11707);
IkReal x11719=(sj1*x11712);
IkReal x11720=((1.0)*x11706);
IkReal x11721=((1.0)*x11705);
IkReal x11722=(sj3*x11706);
IkReal x11723=(gconst5*x11705);
IkReal x11724=(cj3*x11706);
IkReal x11725=((1.0)*cj3*gconst5);
IkReal x11726=(x11719+x11718);
evalcond[0]=((((-1.0)*x11709*x11721))+(((-1.0)*r22*x11720))+((r20*x11723)));
evalcond[1]=(((r00*x11723))+(((-1.0)*r01*x11705*x11713))+(((-1.0)*r02*x11720)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11720))+((r10*x11723))+(((-1.0)*x11711*x11721)));
evalcond[3]=((((-1.0)*gconst5*x11710*x11720))+((r10*x11716))+(((-1.0)*cj3*r12*x11721))+((x11711*x11724))+((r11*x11708)));
evalcond[4]=((((-1.0)*r12*sj3*x11721))+(((-1.0)*r10*x11708*x11720))+(((-1.0)*r11*x11725))+(((-1.0)*x11710*x11713))+((x11711*x11722)));
evalcond[5]=((((-1.0)*cj3*r02*x11721))+(((-1.0)*gconst5*x11714*x11720))+((r00*x11716))+((r01*x11708))+((cj1*cj2))+(((-1.0)*sj1*x11707))+((x11715*x11724)));
evalcond[6]=(((x11709*x11724))+(((-1.0)*x11726))+(((-1.0)*gconst5*x11717*x11720))+((r21*x11708))+((r20*x11716))+(((-1.0)*cj3*r22*x11721)));
evalcond[7]=(((x11709*x11722))+(((-1.0)*r21*x11725))+((sj1*sj2))+(((-1.0)*x11713*x11717))+(((-1.0)*cj1*x11712))+(((-1.0)*r22*sj3*x11721))+(((-1.0)*r20*x11708*x11720)));
evalcond[8]=((((-1.0)*r00*x11708*x11720))+(((-1.0)*x11726))+(((-1.0)*r02*sj3*x11721))+(((-1.0)*r01*x11725))+(((-1.0)*x11713*x11714))+((x11715*x11722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11727=((1.0)*gconst4);
CheckValue<IkReal> x11728=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11727))+(((-1.0)*gconst5*r21)))),-1);
if(!x11728.valid){
continue;
}
CheckValue<IkReal> x11729 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x11727))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11728.value)))+(x11729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11730=IKsin(j4);
IkReal x11731=IKcos(j4);
IkReal x11732=((1.0)*sj2);
IkReal x11733=(gconst5*sj3);
IkReal x11734=(gconst4*r21);
IkReal x11735=(cj3*r10);
IkReal x11736=(gconst4*r11);
IkReal x11737=((1.0)*cj2);
IkReal x11738=((1.0)*gconst4);
IkReal x11739=(cj3*r00);
IkReal x11740=(gconst4*r01);
IkReal x11741=(gconst4*sj3);
IkReal x11742=(cj3*r20);
IkReal x11743=(cj1*x11732);
IkReal x11744=(sj1*x11737);
IkReal x11745=((1.0)*x11731);
IkReal x11746=((1.0)*x11730);
IkReal x11747=(sj3*x11731);
IkReal x11748=(gconst5*x11730);
IkReal x11749=(cj3*x11731);
IkReal x11750=((1.0)*cj3*gconst5);
IkReal x11751=(x11743+x11744);
evalcond[0]=((((-1.0)*r22*x11745))+((r20*x11748))+(((-1.0)*x11734*x11746)));
evalcond[1]=(((r00*x11748))+(((-1.0)*r02*x11745))+(((-1.0)*r01*x11730*x11738)));
evalcond[2]=((1.0)+((r10*x11748))+(((-1.0)*r12*x11745))+(((-1.0)*x11736*x11746)));
evalcond[3]=(((r11*x11733))+((x11736*x11749))+(((-1.0)*gconst5*x11735*x11745))+((r10*x11741))+(((-1.0)*cj3*r12*x11746)));
evalcond[4]=((((-1.0)*r11*x11750))+((x11736*x11747))+(((-1.0)*r10*x11733*x11745))+(((-1.0)*x11735*x11738))+(((-1.0)*r12*sj3*x11746)));
evalcond[5]=((((-1.0)*gconst5*x11739*x11745))+((r01*x11733))+((r00*x11741))+(((-1.0)*cj3*r02*x11746))+(((-1.0)*sj1*x11732))+((cj1*cj2))+((x11740*x11749)));
evalcond[6]=(((x11734*x11749))+(((-1.0)*gconst5*x11742*x11745))+((r20*x11741))+((r21*x11733))+(((-1.0)*x11751))+(((-1.0)*cj3*r22*x11746)));
evalcond[7]=((((-1.0)*x11738*x11742))+((x11734*x11747))+(((-1.0)*r20*x11733*x11745))+((sj1*sj2))+(((-1.0)*cj1*x11737))+(((-1.0)*r22*sj3*x11746))+(((-1.0)*r21*x11750)));
evalcond[8]=((((-1.0)*x11738*x11739))+(((-1.0)*r02*sj3*x11746))+(((-1.0)*r00*x11733*x11745))+(((-1.0)*x11751))+((x11740*x11747))+(((-1.0)*r01*x11750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11752 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11752.valid){
continue;
}
CheckValue<IkReal> x11753=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11752.value)+(((1.5707963267949)*(x11753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11754=IKsin(j4);
IkReal x11755=IKcos(j4);
IkReal x11756=((1.0)*sj2);
IkReal x11757=(gconst5*sj3);
IkReal x11758=(gconst4*r21);
IkReal x11759=(cj3*r10);
IkReal x11760=(gconst4*r11);
IkReal x11761=((1.0)*cj2);
IkReal x11762=((1.0)*gconst4);
IkReal x11763=(cj3*r00);
IkReal x11764=(gconst4*r01);
IkReal x11765=(gconst4*sj3);
IkReal x11766=(cj3*r20);
IkReal x11767=(cj1*x11756);
IkReal x11768=(sj1*x11761);
IkReal x11769=((1.0)*x11755);
IkReal x11770=((1.0)*x11754);
IkReal x11771=(sj3*x11755);
IkReal x11772=(gconst5*x11754);
IkReal x11773=(cj3*x11755);
IkReal x11774=((1.0)*cj3*gconst5);
IkReal x11775=(x11768+x11767);
evalcond[0]=(((r20*x11772))+(((-1.0)*r22*x11769))+(((-1.0)*x11758*x11770)));
evalcond[1]=((((-1.0)*r01*x11754*x11762))+(((-1.0)*r02*x11769))+((r00*x11772)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11769))+(((-1.0)*x11760*x11770))+((r10*x11772)));
evalcond[3]=((((-1.0)*gconst5*x11759*x11769))+((r11*x11757))+((r10*x11765))+(((-1.0)*cj3*r12*x11770))+((x11760*x11773)));
evalcond[4]=((((-1.0)*r10*x11757*x11769))+(((-1.0)*r11*x11774))+(((-1.0)*r12*sj3*x11770))+((x11760*x11771))+(((-1.0)*x11759*x11762)));
evalcond[5]=((((-1.0)*sj1*x11756))+(((-1.0)*gconst5*x11763*x11769))+(((-1.0)*cj3*r02*x11770))+((cj1*cj2))+((x11764*x11773))+((r00*x11765))+((r01*x11757)));
evalcond[6]=(((x11758*x11773))+((r20*x11765))+(((-1.0)*gconst5*x11766*x11769))+(((-1.0)*x11775))+((r21*x11757))+(((-1.0)*cj3*r22*x11770)));
evalcond[7]=(((x11758*x11771))+(((-1.0)*r20*x11757*x11769))+(((-1.0)*cj1*x11761))+((sj1*sj2))+(((-1.0)*r22*sj3*x11770))+(((-1.0)*r21*x11774))+(((-1.0)*x11762*x11766)));
evalcond[8]=((((-1.0)*r02*sj3*x11770))+(((-1.0)*r01*x11774))+(((-1.0)*r00*x11757*x11769))+((x11764*x11771))+(((-1.0)*x11762*x11763))+(((-1.0)*x11775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x11778 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11778.valid){
continue;
}
IkReal x11776=((1.0)*(x11778.value));
IkReal x11777=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11776)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11777);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11776)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11777;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11781 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11781.valid){
continue;
}
IkReal x11779=((1.0)*(x11781.value));
IkReal x11780=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11779)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11780);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11779)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11780;
IkReal x11782=((1.0)*cj3);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=(x11782+((x11782*(r21*r21)))+(((-1.0)*x11782*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11785 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11785.valid){
continue;
}
IkReal x11783=((1.0)*(x11785.value));
IkReal x11784=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11783)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11784);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11783)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11784;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11788 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11788.valid){
continue;
}
IkReal x11786=((1.0)*(x11788.value));
IkReal x11787=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11786)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11787);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11786)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11787;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11791 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11791.valid){
continue;
}
IkReal x11789=((1.0)*(x11791.value));
IkReal x11790=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11789)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11790);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11789)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11790;
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11794 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11794.valid){
continue;
}
IkReal x11792=((1.0)*(x11794.value));
IkReal x11793=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11792)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11793);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11792)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11793;
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11797=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11797.valid){
continue;
}
IkReal x11795=x11797.value;
IkReal x11796=(cj0*x11795);
cj4array[0]=(((cj1*cj2*x11796))+(((-1.0)*sj1*sj2*x11796)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11798=IKsin(j4);
IkReal x11799=IKcos(j4);
IkReal x11800=(gconst4*r21);
IkReal x11801=(gconst5*x11798);
IkReal x11802=((1.0)*x11798);
IkReal x11803=((1.0)*x11799);
evalcond[0]=((-1.0)*r12*x11798);
evalcond[1]=((((-1.0)*r12*x11803))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x11801))+(((-1.0)*x11800*x11802)));
evalcond[3]=(((r00*x11801))+(((-1.0)*gconst4*r01*x11802)));
evalcond[4]=(((x11799*x11800))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst5*r20*x11803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11805=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11805.valid){
continue;
}
IkReal x11804=x11805.value;
cj4array[0]=(((cj1*sj2*x11804))+((cj2*sj1*x11804)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11806=IKsin(j4);
IkReal x11807=IKcos(j4);
IkReal x11808=((1.0)*cj0);
IkReal x11809=(gconst5*x11806);
IkReal x11810=((1.0)*x11807);
IkReal x11811=((1.0)*gconst4*x11806);
evalcond[0]=((-1.0)*r12*x11806);
evalcond[1]=((((-1.0)*r12*x11810))+(((-1.0)*x11808)));
evalcond[2]=((((-1.0)*r21*x11811))+((r20*x11809)));
evalcond[3]=(((r00*x11809))+(((-1.0)*r01*x11811)));
evalcond[4]=((((-1.0)*gconst5*r00*x11810))+((gconst4*r01*x11807))+(((-1.0)*cj1*cj2*x11808))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11812=IKPowWithIntegerCheck(r12,-1);
if(!x11812.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11812.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11813=IKsin(j4);
IkReal x11814=IKcos(j4);
IkReal x11815=((1.0)*cj1);
IkReal x11816=(gconst4*r21);
IkReal x11817=(gconst4*r01);
IkReal x11818=(gconst5*x11813);
IkReal x11819=((1.0)*x11813);
IkReal x11820=((1.0)*gconst5*x11814);
evalcond[0]=((-1.0)*r12*x11813);
evalcond[1]=((((-1.0)*x11816*x11819))+((r20*x11818)));
evalcond[2]=((((-1.0)*x11817*x11819))+((r00*x11818)));
evalcond[3]=(((x11814*x11816))+(((-1.0)*r20*x11820))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x11815)));
evalcond[4]=(((x11814*x11817))+(((-1.0)*r00*x11820))+((cj0*sj1*sj2))+(((-1.0)*cj0*cj2*x11815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11823 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11823.valid){
continue;
}
IkReal x11821=((1.0)*(x11823.value));
IkReal x11822=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11821)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11822);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11821)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11822;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11826 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11826.valid){
continue;
}
IkReal x11824=((1.0)*(x11826.value));
IkReal x11825=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11824)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11825);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11824)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11825;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11829 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11829.valid){
continue;
}
IkReal x11827=((1.0)*(x11829.value));
IkReal x11828=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11827)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11828);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11827)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11828;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11832=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11832.valid){
continue;
}
IkReal x11830=x11832.value;
IkReal x11831=(cj0*x11830);
cj4array[0]=(((cj1*cj2*x11831))+(((-1.0)*sj1*sj2*x11831)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11833=IKsin(j4);
IkReal x11834=IKcos(j4);
IkReal x11835=(gconst5*r20);
IkReal x11836=((1.0)*gconst4*r21);
evalcond[0]=(r12*x11833);
evalcond[1]=((((-1.0)*r12*x11834))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x11833*x11836))+((x11833*x11835)));
evalcond[3]=(((gconst5*r00*x11833))+(((-1.0)*gconst4*r01*x11833)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x11834*x11836))+((x11834*x11835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11838=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11838.valid){
continue;
}
IkReal x11837=x11838.value;
cj4array[0]=(((cj1*sj2*x11837))+((cj2*sj1*x11837)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11839=IKsin(j4);
IkReal x11840=IKcos(j4);
IkReal x11841=((1.0)*cj0);
IkReal x11842=((1.0)*gconst4);
IkReal x11843=(gconst5*x11839);
evalcond[0]=(r12*x11839);
evalcond[1]=((((-1.0)*x11841))+(((-1.0)*r12*x11840)));
evalcond[2]=(((r20*x11843))+(((-1.0)*r21*x11839*x11842)));
evalcond[3]=((((-1.0)*r01*x11839*x11842))+((r00*x11843)));
evalcond[4]=((((-1.0)*cj1*cj2*x11841))+((cj0*sj1*sj2))+((gconst5*r00*x11840))+(((-1.0)*r01*x11840*x11842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11844=IKPowWithIntegerCheck(r12,-1);
if(!x11844.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11844.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11845=IKsin(j4);
IkReal x11846=IKcos(j4);
IkReal x11847=(gconst5*r20);
IkReal x11848=((1.0)*cj1);
IkReal x11849=((1.0)*gconst4);
IkReal x11850=(gconst5*r00);
evalcond[0]=(r12*x11845);
evalcond[1]=((((-1.0)*r21*x11845*x11849))+((x11845*x11847)));
evalcond[2]=((((-1.0)*r01*x11845*x11849))+((x11845*x11850)));
evalcond[3]=((((-1.0)*sj2*x11848))+(((-1.0)*cj2*sj1))+((x11846*x11847))+(((-1.0)*r21*x11846*x11849)));
evalcond[4]=((((-1.0)*r01*x11846*x11849))+(((-1.0)*cj0*cj2*x11848))+((x11846*x11850))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11853 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11853.valid){
continue;
}
IkReal x11851=((1.0)*(x11853.value));
IkReal x11852=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11851)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11852);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11851)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11852;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11856 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11856.valid){
continue;
}
IkReal x11854=((1.0)*(x11856.value));
IkReal x11855=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11854)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11855);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11854)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11855;
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11859 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11859.valid){
continue;
}
IkReal x11857=((1.0)*(x11859.value));
IkReal x11858=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11857)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11858);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11857)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11858;
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11862=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11862.valid){
continue;
}
IkReal x11860=x11862.value;
IkReal x11861=((1.0)*cj0*x11860);
cj4array[0]=((((-1.0)*cj1*sj2*x11861))+(((-1.0)*cj2*sj1*x11861)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11863=IKsin(j4);
IkReal x11864=IKcos(j4);
IkReal x11865=(gconst4*r21);
IkReal x11866=(gconst5*x11863);
IkReal x11867=((1.0)*x11863);
IkReal x11868=((1.0)*x11864);
evalcond[0]=((-1.0)*r12*x11863);
evalcond[1]=((((-1.0)*r12*x11868))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x11866))+(((-1.0)*x11865*x11867)));
evalcond[3]=(((r00*x11866))+(((-1.0)*gconst4*r01*x11867)));
evalcond[4]=((((-1.0)*gconst5*r20*x11868))+((x11864*x11865))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11870=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11870.valid){
continue;
}
IkReal x11869=x11870.value;
cj4array[0]=(((cj1*cj2*x11869))+(((-1.0)*sj1*sj2*x11869)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11871=IKsin(j4);
IkReal x11872=IKcos(j4);
IkReal x11873=(gconst5*x11871);
IkReal x11874=((1.0)*x11872);
IkReal x11875=((1.0)*gconst4*x11871);
evalcond[0]=((-1.0)*r12*x11871);
evalcond[1]=((((-1.0)*r12*x11874))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x11875))+((r20*x11873)));
evalcond[3]=(((r00*x11873))+(((-1.0)*r01*x11875)));
evalcond[4]=((((-1.0)*gconst5*r00*x11874))+((cj0*cj2*sj1))+((gconst4*r01*x11872))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11876=IKPowWithIntegerCheck(r12,-1);
if(!x11876.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11876.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11877=IKsin(j4);
IkReal x11878=IKcos(j4);
IkReal x11879=(gconst4*r21);
IkReal x11880=(gconst4*r01);
IkReal x11881=(gconst5*x11877);
IkReal x11882=((1.0)*x11877);
IkReal x11883=((1.0)*gconst5*x11878);
evalcond[0]=((-1.0)*r12*x11877);
evalcond[1]=((((-1.0)*x11879*x11882))+((r20*x11881)));
evalcond[2]=(((r00*x11881))+(((-1.0)*x11880*x11882)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11878*x11879))+(((-1.0)*r20*x11883)));
evalcond[4]=((((-1.0)*r00*x11883))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((x11878*x11880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11886 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11886.valid){
continue;
}
IkReal x11884=((1.0)*(x11886.value));
IkReal x11885=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11884)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11885);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11884)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11885;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11889 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11889.valid){
continue;
}
IkReal x11887=((1.0)*(x11889.value));
IkReal x11888=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11887)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11888);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11887)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11888;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11892 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11892.valid){
continue;
}
IkReal x11890=((1.0)*(x11892.value));
IkReal x11891=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11890)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11891);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11890)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11891;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11895=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11895.valid){
continue;
}
IkReal x11893=x11895.value;
IkReal x11894=((1.0)*cj0*x11893);
cj4array[0]=((((-1.0)*cj2*sj1*x11894))+(((-1.0)*cj1*sj2*x11894)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11896=IKsin(j4);
IkReal x11897=IKcos(j4);
IkReal x11898=(gconst5*r20);
IkReal x11899=((1.0)*gconst4*r21);
evalcond[0]=(r12*x11896);
evalcond[1]=((((-1.0)*r12*x11897))+(((-1.0)*cj0)));
evalcond[2]=(((x11896*x11898))+(((-1.0)*x11896*x11899)));
evalcond[3]=(((gconst5*r00*x11896))+(((-1.0)*gconst4*r01*x11896)));
evalcond[4]=(((x11897*x11898))+(((-1.0)*x11897*x11899))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11901=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11901.valid){
continue;
}
IkReal x11900=x11901.value;
cj4array[0]=(((cj1*cj2*x11900))+(((-1.0)*sj1*sj2*x11900)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11902=IKsin(j4);
IkReal x11903=IKcos(j4);
IkReal x11904=((1.0)*gconst4);
IkReal x11905=(gconst5*x11902);
evalcond[0]=(r12*x11902);
evalcond[1]=((((-1.0)*r12*x11903))+(((-1.0)*cj0)));
evalcond[2]=(((r20*x11905))+(((-1.0)*r21*x11902*x11904)));
evalcond[3]=(((r00*x11905))+(((-1.0)*r01*x11902*x11904)));
evalcond[4]=(((gconst5*r00*x11903))+((cj0*cj2*sj1))+(((-1.0)*r01*x11903*x11904))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11906=IKPowWithIntegerCheck(r12,-1);
if(!x11906.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11906.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11907=IKsin(j4);
IkReal x11908=IKcos(j4);
IkReal x11909=(gconst5*r20);
IkReal x11910=((1.0)*gconst4);
IkReal x11911=(gconst5*r00);
evalcond[0]=(r12*x11907);
evalcond[1]=(((x11907*x11909))+(((-1.0)*r21*x11907*x11910)));
evalcond[2]=(((x11907*x11911))+(((-1.0)*r01*x11907*x11910)));
evalcond[3]=(((x11908*x11909))+(((-1.0)*r21*x11908*x11910))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((x11908*x11911))+(((-1.0)*r01*x11908*x11910))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11913=IKPowWithIntegerCheck(r12,-1);
if(!x11913.valid){
continue;
}
IkReal x11912=x11913.value;
CheckValue<IkReal> x11914=IKPowWithIntegerCheck(sj3,-1);
if(!x11914.valid){
continue;
}
if( IKabs((x11912*(x11914.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11912)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11912*(x11914.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x11912))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11912*(x11914.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x11912));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11915=IKsin(j4);
IkReal x11916=IKcos(j4);
IkReal x11917=((1.0)*sj3);
IkReal x11918=((1.0)*r21);
IkReal x11919=(cj3*gconst5);
IkReal x11920=(cj0*sj2);
IkReal x11921=(gconst5*r20);
IkReal x11922=(cj2*sj0);
IkReal x11923=(sj1*sj2);
IkReal x11924=((1.0)*cj1);
IkReal x11925=(cj3*gconst4);
IkReal x11926=((1.0)*r20);
IkReal x11927=((1.0)*r01);
IkReal x11928=(cj0*cj2);
IkReal x11929=(gconst5*r00);
IkReal x11930=(gconst5*sj3);
IkReal x11931=(gconst4*sj3);
IkReal x11932=(r12*x11915);
IkReal x11933=(gconst4*x11915);
IkReal x11934=((1.0)*x11916);
IkReal x11935=(x11916*x11931);
evalcond[0]=((((-1.0)*r12*x11934))+(((-1.0)*cj0)));
evalcond[1]=(((x11915*x11921))+(((-1.0)*x11918*x11933)));
evalcond[2]=(((x11915*x11929))+sj0+(((-1.0)*x11927*x11933)));
evalcond[3]=(((cj1*sj0*sj2))+((sj1*x11922))+(((-1.0)*x11917*x11932)));
evalcond[4]=((((-1.0)*cj3*x11932))+((sj0*x11923))+(((-1.0)*x11922*x11924)));
evalcond[5]=((((-1.0)*sj2*x11924))+((r21*x11930))+(((-1.0)*cj2*sj1))+((r20*x11931))+((r21*x11916*x11925))+(((-1.0)*x11916*x11919*x11926)));
evalcond[6]=(x11923+((r21*x11935))+(((-1.0)*x11925*x11926))+(((-1.0)*x11916*x11917*x11921))+(((-1.0)*x11918*x11919))+(((-1.0)*cj2*x11924)));
evalcond[7]=(((r01*x11916*x11925))+(((-1.0)*x11924*x11928))+((sj1*x11920))+((r00*x11931))+(((-1.0)*r00*x11919*x11934))+((r01*x11930)));
evalcond[8]=((((-1.0)*r00*x11925))+(((-1.0)*x11916*x11917*x11929))+((cj1*x11920))+(((-1.0)*x11919*x11927))+((sj1*x11928))+((r01*x11935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11936=((1.0)*gconst5);
IkReal x11937=((1.0)*gconst4);
CheckValue<IkReal> x11938=IKPowWithIntegerCheck((((gconst5*r00))+(((-1.0)*r01*x11937))),-1);
if(!x11938.valid){
continue;
}
CheckValue<IkReal> x11939=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11936))+((cj3*gconst4*r21))),-1);
if(!x11939.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11938.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11939.value)*(((((-1.0)*r21*sj3*x11936))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*sj3*x11937)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11938.value)))+IKsqr(((x11939.value)*(((((-1.0)*r21*sj3*x11936))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*sj3*x11937))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11938.value)), ((x11939.value)*(((((-1.0)*r21*sj3*x11936))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*sj3*x11937))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11940=IKsin(j4);
IkReal x11941=IKcos(j4);
IkReal x11942=((1.0)*sj3);
IkReal x11943=((1.0)*r21);
IkReal x11944=(cj3*gconst5);
IkReal x11945=(cj0*sj2);
IkReal x11946=(gconst5*r20);
IkReal x11947=(cj2*sj0);
IkReal x11948=(sj1*sj2);
IkReal x11949=((1.0)*cj1);
IkReal x11950=(cj3*gconst4);
IkReal x11951=((1.0)*r20);
IkReal x11952=((1.0)*r01);
IkReal x11953=(cj0*cj2);
IkReal x11954=(gconst5*r00);
IkReal x11955=(gconst5*sj3);
IkReal x11956=(gconst4*sj3);
IkReal x11957=(r12*x11940);
IkReal x11958=(gconst4*x11940);
IkReal x11959=((1.0)*x11941);
IkReal x11960=(x11941*x11956);
evalcond[0]=((((-1.0)*r12*x11959))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x11943*x11958))+((x11940*x11946)));
evalcond[2]=(sj0+((x11940*x11954))+(((-1.0)*x11952*x11958)));
evalcond[3]=(((sj1*x11947))+(((-1.0)*x11942*x11957))+((cj1*sj0*sj2)));
evalcond[4]=(((sj0*x11948))+(((-1.0)*cj3*x11957))+(((-1.0)*x11947*x11949)));
evalcond[5]=(((r21*x11941*x11950))+(((-1.0)*sj2*x11949))+((r20*x11956))+(((-1.0)*x11941*x11944*x11951))+(((-1.0)*cj2*sj1))+((r21*x11955)));
evalcond[6]=(x11948+(((-1.0)*x11941*x11942*x11946))+(((-1.0)*x11943*x11944))+(((-1.0)*x11950*x11951))+(((-1.0)*cj2*x11949))+((r21*x11960)));
evalcond[7]=(((sj1*x11945))+((r01*x11941*x11950))+(((-1.0)*x11949*x11953))+((r01*x11955))+((r00*x11956))+(((-1.0)*r00*x11944*x11959)));
evalcond[8]=(((cj1*x11945))+((sj1*x11953))+((r01*x11960))+(((-1.0)*x11944*x11952))+(((-1.0)*r00*x11950))+(((-1.0)*x11941*x11942*x11954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11961=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11961.valid){
continue;
}
CheckValue<IkReal> x11962=IKPowWithIntegerCheck(r12,-1);
if(!x11962.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11961.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11962.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11961.value)))+IKsqr(((-1.0)*cj0*(x11962.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11961.value)), ((-1.0)*cj0*(x11962.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11963=IKsin(j4);
IkReal x11964=IKcos(j4);
IkReal x11965=((1.0)*sj3);
IkReal x11966=((1.0)*r21);
IkReal x11967=(cj3*gconst5);
IkReal x11968=(cj0*sj2);
IkReal x11969=(gconst5*r20);
IkReal x11970=(cj2*sj0);
IkReal x11971=(sj1*sj2);
IkReal x11972=((1.0)*cj1);
IkReal x11973=(cj3*gconst4);
IkReal x11974=((1.0)*r20);
IkReal x11975=((1.0)*r01);
IkReal x11976=(cj0*cj2);
IkReal x11977=(gconst5*r00);
IkReal x11978=(gconst5*sj3);
IkReal x11979=(gconst4*sj3);
IkReal x11980=(r12*x11963);
IkReal x11981=(gconst4*x11963);
IkReal x11982=((1.0)*x11964);
IkReal x11983=(x11964*x11979);
evalcond[0]=((((-1.0)*r12*x11982))+(((-1.0)*cj0)));
evalcond[1]=(((x11963*x11969))+(((-1.0)*x11966*x11981)));
evalcond[2]=(sj0+((x11963*x11977))+(((-1.0)*x11975*x11981)));
evalcond[3]=(((cj1*sj0*sj2))+(((-1.0)*x11965*x11980))+((sj1*x11970)));
evalcond[4]=((((-1.0)*x11970*x11972))+((sj0*x11971))+(((-1.0)*cj3*x11980)));
evalcond[5]=((((-1.0)*sj2*x11972))+(((-1.0)*cj2*sj1))+((r21*x11964*x11973))+((r20*x11979))+(((-1.0)*x11964*x11967*x11974))+((r21*x11978)));
evalcond[6]=(x11971+((r21*x11983))+(((-1.0)*x11966*x11967))+(((-1.0)*x11964*x11965*x11969))+(((-1.0)*cj2*x11972))+(((-1.0)*x11973*x11974)));
evalcond[7]=(((r00*x11979))+((r01*x11978))+((r01*x11964*x11973))+((sj1*x11968))+(((-1.0)*x11972*x11976))+(((-1.0)*r00*x11967*x11982)));
evalcond[8]=((((-1.0)*r00*x11973))+(((-1.0)*x11967*x11975))+(((-1.0)*x11964*x11965*x11977))+((sj1*x11976))+((cj1*x11968))+((r01*x11983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11984=((1.0)*gconst4);
CheckValue<IkReal> x11985 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x11984))+(((-1.0)*cj0*r01*x11984))+((cj0*gconst5*r00))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11985.valid){
continue;
}
CheckValue<IkReal> x11986=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11985.value)+(((1.5707963267949)*(x11986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11987=IKsin(j4);
IkReal x11988=IKcos(j4);
IkReal x11989=(gconst5*sj3);
IkReal x11990=((1.0)*r21);
IkReal x11991=(cj3*gconst5);
IkReal x11992=(cj0*sj2);
IkReal x11993=(cj2*sj0);
IkReal x11994=(sj1*sj2);
IkReal x11995=((1.0)*cj1);
IkReal x11996=((1.0)*r11);
IkReal x11997=((1.0)*cj3);
IkReal x11998=(gconst4*r20);
IkReal x11999=(cj0*cj2);
IkReal x12000=(gconst4*sj3);
IkReal x12001=((1.0)*r01);
IkReal x12002=((1.0)*sj3);
IkReal x12003=((1.0)*x11988);
IkReal x12004=(gconst4*x11987);
IkReal x12005=(r22*x11987);
IkReal x12006=(gconst5*x11987);
IkReal x12007=(r02*x11987);
IkReal x12008=(r12*x11987);
IkReal x12009=(x11988*x12000);
IkReal x12010=(cj3*gconst4*x11988);
evalcond[0]=(((r20*x12006))+(((-1.0)*x11990*x12004))+(((-1.0)*r22*x12003)));
evalcond[1]=((((-1.0)*x12001*x12004))+sj0+((r00*x12006))+(((-1.0)*r02*x12003)));
evalcond[2]=((((-1.0)*r12*x12003))+((r10*x12006))+(((-1.0)*x11996*x12004))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x11989))+((r21*x12010))+(((-1.0)*r20*x11991*x12003))+(((-1.0)*cj2*sj1))+((sj3*x11998))+(((-1.0)*sj2*x11995))+(((-1.0)*x11997*x12005)));
evalcond[4]=(x11994+(((-1.0)*x11990*x11991))+(((-1.0)*cj2*x11995))+(((-1.0)*r20*x11989*x12003))+(((-1.0)*x12002*x12005))+((r21*x12009))+(((-1.0)*x11997*x11998)));
evalcond[5]=(((sj1*x11992))+((r00*x12000))+(((-1.0)*x11995*x11999))+((r01*x11989))+((r01*x12010))+(((-1.0)*x11997*x12007))+(((-1.0)*r00*x11991*x12003)));
evalcond[6]=(((sj0*x11994))+(((-1.0)*x11993*x11995))+((r11*x12010))+((r11*x11989))+(((-1.0)*x11997*x12008))+((r10*x12000))+(((-1.0)*r10*x11991*x12003)));
evalcond[7]=(((sj1*x11999))+(((-1.0)*x11991*x12001))+((cj1*x11992))+(((-1.0)*gconst4*r00*x11997))+((r01*x12009))+(((-1.0)*r00*x11989*x12003))+(((-1.0)*x12002*x12007)));
evalcond[8]=(((sj1*x11993))+((cj1*sj0*sj2))+(((-1.0)*x11991*x11996))+(((-1.0)*x12002*x12008))+(((-1.0)*gconst4*r10*x11997))+(((-1.0)*r10*x11989*x12003))+((r11*x12009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12011=((1.0)*gconst4);
CheckValue<IkReal> x12012 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x12011))+((cj0*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12012.valid){
continue;
}
CheckValue<IkReal> x12013=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r01))+(((-1.0)*r00*x12011)))),-1);
if(!x12013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12012.value)+(((1.5707963267949)*(x12013.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12014=IKsin(j4);
IkReal x12015=IKcos(j4);
IkReal x12016=(gconst5*sj3);
IkReal x12017=((1.0)*r21);
IkReal x12018=(cj3*gconst5);
IkReal x12019=(cj0*sj2);
IkReal x12020=(cj2*sj0);
IkReal x12021=(sj1*sj2);
IkReal x12022=((1.0)*cj1);
IkReal x12023=((1.0)*r11);
IkReal x12024=((1.0)*cj3);
IkReal x12025=(gconst4*r20);
IkReal x12026=(cj0*cj2);
IkReal x12027=(gconst4*sj3);
IkReal x12028=((1.0)*r01);
IkReal x12029=((1.0)*sj3);
IkReal x12030=((1.0)*x12015);
IkReal x12031=(gconst4*x12014);
IkReal x12032=(r22*x12014);
IkReal x12033=(gconst5*x12014);
IkReal x12034=(r02*x12014);
IkReal x12035=(r12*x12014);
IkReal x12036=(x12015*x12027);
IkReal x12037=(cj3*gconst4*x12015);
evalcond[0]=(((r20*x12033))+(((-1.0)*r22*x12030))+(((-1.0)*x12017*x12031)));
evalcond[1]=(sj0+(((-1.0)*x12028*x12031))+((r00*x12033))+(((-1.0)*r02*x12030)));
evalcond[2]=((((-1.0)*x12023*x12031))+(((-1.0)*r12*x12030))+((r10*x12033))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x12016))+(((-1.0)*cj2*sj1))+(((-1.0)*x12024*x12032))+(((-1.0)*sj2*x12022))+(((-1.0)*r20*x12018*x12030))+((r21*x12037))+((sj3*x12025)));
evalcond[4]=((((-1.0)*x12029*x12032))+(((-1.0)*r20*x12016*x12030))+(((-1.0)*cj2*x12022))+(((-1.0)*x12024*x12025))+(((-1.0)*x12017*x12018))+x12021+((r21*x12036)));
evalcond[5]=(((r01*x12037))+((r00*x12027))+(((-1.0)*x12024*x12034))+(((-1.0)*r00*x12018*x12030))+((r01*x12016))+(((-1.0)*x12022*x12026))+((sj1*x12019)));
evalcond[6]=((((-1.0)*r10*x12018*x12030))+((r11*x12016))+(((-1.0)*x12024*x12035))+(((-1.0)*x12020*x12022))+((sj0*x12021))+((r11*x12037))+((r10*x12027)));
evalcond[7]=((((-1.0)*x12029*x12034))+(((-1.0)*gconst4*r00*x12024))+((r01*x12036))+((sj1*x12026))+((cj1*x12019))+(((-1.0)*r00*x12016*x12030))+(((-1.0)*x12018*x12028)));
evalcond[8]=((((-1.0)*x12029*x12035))+(((-1.0)*r10*x12016*x12030))+(((-1.0)*gconst4*r10*x12024))+((cj1*sj0*sj2))+((sj1*x12020))+((r11*x12036))+(((-1.0)*x12018*x12023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12038=((1.0)*gconst4);
CheckValue<IkReal> x12039=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r11))+(((-1.0)*r10*x12038)))),-1);
if(!x12039.valid){
continue;
}
CheckValue<IkReal> x12040 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst5*r20*sj0))+(((-1.0)*r21*sj0*x12038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12039.value)))+(x12040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12041=IKsin(j4);
IkReal x12042=IKcos(j4);
IkReal x12043=(gconst5*sj3);
IkReal x12044=((1.0)*r21);
IkReal x12045=(cj3*gconst5);
IkReal x12046=(cj0*sj2);
IkReal x12047=(cj2*sj0);
IkReal x12048=(sj1*sj2);
IkReal x12049=((1.0)*cj1);
IkReal x12050=((1.0)*r11);
IkReal x12051=((1.0)*cj3);
IkReal x12052=(gconst4*r20);
IkReal x12053=(cj0*cj2);
IkReal x12054=(gconst4*sj3);
IkReal x12055=((1.0)*r01);
IkReal x12056=((1.0)*sj3);
IkReal x12057=((1.0)*x12042);
IkReal x12058=(gconst4*x12041);
IkReal x12059=(r22*x12041);
IkReal x12060=(gconst5*x12041);
IkReal x12061=(r02*x12041);
IkReal x12062=(r12*x12041);
IkReal x12063=(x12042*x12054);
IkReal x12064=(cj3*gconst4*x12042);
evalcond[0]=((((-1.0)*x12044*x12058))+((r20*x12060))+(((-1.0)*r22*x12057)));
evalcond[1]=(((r00*x12060))+sj0+(((-1.0)*x12055*x12058))+(((-1.0)*r02*x12057)));
evalcond[2]=(((r10*x12060))+(((-1.0)*r12*x12057))+(((-1.0)*x12050*x12058))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x12064))+(((-1.0)*cj2*sj1))+((r21*x12043))+(((-1.0)*sj2*x12049))+(((-1.0)*r20*x12045*x12057))+((sj3*x12052))+(((-1.0)*x12051*x12059)));
evalcond[4]=(((r21*x12063))+(((-1.0)*cj2*x12049))+x12048+(((-1.0)*x12056*x12059))+(((-1.0)*r20*x12043*x12057))+(((-1.0)*x12044*x12045))+(((-1.0)*x12051*x12052)));
evalcond[5]=((((-1.0)*r00*x12045*x12057))+(((-1.0)*x12049*x12053))+((r01*x12064))+((sj1*x12046))+((r00*x12054))+(((-1.0)*x12051*x12061))+((r01*x12043)));
evalcond[6]=(((r10*x12054))+((sj0*x12048))+(((-1.0)*x12047*x12049))+(((-1.0)*x12051*x12062))+((r11*x12043))+(((-1.0)*r10*x12045*x12057))+((r11*x12064)));
evalcond[7]=((((-1.0)*x12045*x12055))+((r01*x12063))+((cj1*x12046))+((sj1*x12053))+(((-1.0)*x12056*x12061))+(((-1.0)*gconst4*r00*x12051))+(((-1.0)*r00*x12043*x12057)));
evalcond[8]=((((-1.0)*x12045*x12050))+(((-1.0)*gconst4*r10*x12051))+((sj1*x12047))+((cj1*sj0*sj2))+(((-1.0)*r10*x12043*x12057))+(((-1.0)*x12056*x12062))+((r11*x12063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12065=((-1.0)*r00);
IkReal x12067 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12067)==0){
continue;
}
IkReal x12066=pow(x12067,-0.5);
CheckValue<IkReal> x12068 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12065),IKFAST_ATAN2_MAGTHRESH);
if(!x12068.valid){
continue;
}
IkReal gconst6=((-1.0)*(x12068.value));
IkReal gconst7=(r01*x12066);
IkReal gconst8=(x12065*x12066);
CheckValue<IkReal> x12069 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12069.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12069.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12070=((-1.0)*r00);
IkReal x12071=x12066;
CheckValue<IkReal> x12073 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12070),IKFAST_ATAN2_MAGTHRESH);
if(!x12073.valid){
continue;
}
IkReal x12072=((-1.0)*(x12073.value));
sj5=gconst7;
cj5=gconst8;
j5=x12072;
IkReal gconst6=x12072;
IkReal gconst7=(r01*x12071);
IkReal gconst8=(x12070*x12071);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12074=((1.0)*gconst7);
CheckValue<IkReal> x12075 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*r11*sj0*x12074))+(((-1.0)*cj0*r01*x12074))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12075.valid){
continue;
}
CheckValue<IkReal> x12076=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x12076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12075.value)+(((1.5707963267949)*(x12076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12077=IKsin(j4);
IkReal x12078=IKcos(j4);
IkReal x12079=(gconst7*sj3);
IkReal x12080=(cj0*cj1);
IkReal x12081=((1.0)*cj2);
IkReal x12082=(cj3*gconst7);
IkReal x12083=(cj2*sj1);
IkReal x12084=(sj1*sj2);
IkReal x12085=(gconst8*sj3);
IkReal x12086=(cj3*gconst8);
IkReal x12087=(cj1*sj2);
IkReal x12088=((1.0)*x12078);
IkReal x12089=(gconst8*x12077);
IkReal x12090=(r01*x12078);
IkReal x12091=(r11*x12078);
IkReal x12092=((1.0)*x12077);
IkReal x12093=(r21*x12078);
evalcond[0]=(((r20*x12089))+(((-1.0)*gconst7*r21*x12092))+(((-1.0)*r22*x12088)));
evalcond[1]=(sj0+((r00*x12089))+(((-1.0)*gconst7*r01*x12092))+(((-1.0)*r02*x12088)));
evalcond[2]=((((-1.0)*r12*x12088))+(((-1.0)*gconst7*r11*x12092))+((r10*x12089))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x12087))+(((-1.0)*cj3*r22*x12092))+((r21*x12085))+((r20*x12079))+((x12082*x12093))+(((-1.0)*r20*x12086*x12088))+(((-1.0)*sj1*x12081)));
evalcond[4]=((((-1.0)*r21*x12086))+x12084+(((-1.0)*r20*x12085*x12088))+((x12079*x12093))+(((-1.0)*cj1*x12081))+(((-1.0)*r20*x12082))+(((-1.0)*r22*sj3*x12092)));
evalcond[5]=(((r01*x12085))+(((-1.0)*x12080*x12081))+(((-1.0)*r00*x12086*x12088))+(((-1.0)*cj3*r02*x12092))+((x12082*x12090))+((cj0*x12084))+((r00*x12079)));
evalcond[6]=((((-1.0)*cj1*sj0*x12081))+(((-1.0)*cj3*r12*x12092))+(((-1.0)*r10*x12086*x12088))+((r10*x12079))+((sj0*x12084))+((x12082*x12091))+((r11*x12085)));
evalcond[7]=((((-1.0)*r00*x12085*x12088))+(((-1.0)*r02*sj3*x12092))+(((-1.0)*r00*x12082))+(((-1.0)*r01*x12086))+((x12079*x12090))+((cj0*x12083))+((sj2*x12080)));
evalcond[8]=((((-1.0)*r10*x12082))+(((-1.0)*r10*x12085*x12088))+(((-1.0)*r12*sj3*x12092))+(((-1.0)*r11*x12086))+((sj0*x12087))+((sj0*x12083))+((x12079*x12091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12094=((1.0)*gconst7);
CheckValue<IkReal> x12095 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x12094))+((gconst8*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12095.valid){
continue;
}
CheckValue<IkReal> x12096=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12094))+(((-1.0)*gconst8*r11)))),-1);
if(!x12096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12095.value)+(((1.5707963267949)*(x12096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12097=IKsin(j4);
IkReal x12098=IKcos(j4);
IkReal x12099=(gconst7*sj3);
IkReal x12100=(cj0*cj1);
IkReal x12101=((1.0)*cj2);
IkReal x12102=(cj3*gconst7);
IkReal x12103=(cj2*sj1);
IkReal x12104=(sj1*sj2);
IkReal x12105=(gconst8*sj3);
IkReal x12106=(cj3*gconst8);
IkReal x12107=(cj1*sj2);
IkReal x12108=((1.0)*x12098);
IkReal x12109=(gconst8*x12097);
IkReal x12110=(r01*x12098);
IkReal x12111=(r11*x12098);
IkReal x12112=((1.0)*x12097);
IkReal x12113=(r21*x12098);
evalcond[0]=((((-1.0)*gconst7*r21*x12112))+(((-1.0)*r22*x12108))+((r20*x12109)));
evalcond[1]=(sj0+(((-1.0)*gconst7*r01*x12112))+((r00*x12109))+(((-1.0)*r02*x12108)));
evalcond[2]=(((r10*x12109))+(((-1.0)*r12*x12108))+(((-1.0)*gconst7*r11*x12112))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r20*x12106*x12108))+(((-1.0)*sj1*x12101))+((r20*x12099))+((x12102*x12113))+(((-1.0)*cj3*r22*x12112))+((r21*x12105))+(((-1.0)*x12107)));
evalcond[4]=((((-1.0)*r22*sj3*x12112))+((x12099*x12113))+x12104+(((-1.0)*cj1*x12101))+(((-1.0)*r20*x12102))+(((-1.0)*r20*x12105*x12108))+(((-1.0)*r21*x12106)));
evalcond[5]=(((r00*x12099))+(((-1.0)*x12100*x12101))+((cj0*x12104))+((r01*x12105))+((x12102*x12110))+(((-1.0)*r00*x12106*x12108))+(((-1.0)*cj3*r02*x12112)));
evalcond[6]=(((sj0*x12104))+(((-1.0)*r10*x12106*x12108))+(((-1.0)*cj3*r12*x12112))+((x12102*x12111))+((r10*x12099))+(((-1.0)*cj1*sj0*x12101))+((r11*x12105)));
evalcond[7]=((((-1.0)*r00*x12102))+(((-1.0)*r01*x12106))+((cj0*x12103))+((x12099*x12110))+((sj2*x12100))+(((-1.0)*r00*x12105*x12108))+(((-1.0)*r02*sj3*x12112)));
evalcond[8]=((((-1.0)*r10*x12105*x12108))+(((-1.0)*r10*x12102))+((sj0*x12107))+((sj0*x12103))+((x12099*x12111))+(((-1.0)*r11*x12106))+(((-1.0)*r12*sj3*x12112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12114=((-1.0)*r01);
IkReal x12116 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12116)==0){
continue;
}
IkReal x12115=pow(x12116,-0.5);
CheckValue<IkReal> x12117 = IKatan2WithCheck(IkReal(x12114),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12117.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x12117.value))));
IkReal gconst10=(x12114*x12115);
IkReal gconst11=((1.0)*r00*x12115);
CheckValue<IkReal> x12118 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12118.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12118.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12119=((-1.0)*r01);
CheckValue<IkReal> x12122 = IKatan2WithCheck(IkReal(x12119),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12122.valid){
continue;
}
IkReal x12120=((1.0)*(x12122.value));
IkReal x12121=x12115;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12120)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12120)));
IkReal gconst10=(x12119*x12121);
IkReal gconst11=((1.0)*r00*x12121);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x12123=((-1.0)*r01);
CheckValue<IkReal> x12126 = IKatan2WithCheck(IkReal(x12123),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12126.valid){
continue;
}
IkReal x12124=((1.0)*(x12126.value));
IkReal x12125=x12115;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12124)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12124)));
IkReal gconst10=(x12123*x12125);
IkReal gconst11=((1.0)*r00*x12125);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12127=((-1.0)*r01);
CheckValue<IkReal> x12130 = IKatan2WithCheck(IkReal(x12127),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12130.valid){
continue;
}
IkReal x12128=((1.0)*(x12130.value));
IkReal x12129=x12115;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12128)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12128)));
IkReal gconst10=(x12127*x12129);
IkReal gconst11=((1.0)*r00*x12129);
IkReal x12131=r02*r02;
IkReal x12132=(r12*sj0);
IkReal x12133=x12115;
IkReal x12134=(cj0*x12133);
j4eval[0]=((IKabs((((x12131*x12134))+((r02*x12132*x12133))+(((-1.0)*x12134)))))+(IKabs((x12132+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12135=((-1.0)*r01);
CheckValue<IkReal> x12138 = IKatan2WithCheck(IkReal(x12135),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12138.valid){
continue;
}
IkReal x12136=((1.0)*(x12138.value));
IkReal x12137=x12115;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12136)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12136)));
IkReal gconst10=(x12135*x12137);
IkReal gconst11=((1.0)*r00*x12137);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12139=((-1.0)*r01);
CheckValue<IkReal> x12142 = IKatan2WithCheck(IkReal(x12139),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12142.valid){
continue;
}
IkReal x12140=((1.0)*(x12142.value));
IkReal x12141=x12115;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12140)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12140)));
IkReal gconst10=(x12139*x12141);
IkReal gconst11=((1.0)*r00*x12141);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12143=gconst11*gconst11;
IkReal x12144=gconst10*gconst10;
IkReal x12145=(cj3*r10);
IkReal x12146=(cj3*r11);
IkReal x12147=(r10*sj3);
IkReal x12148=(gconst11*r11*sj3);
IkReal x12149=((1.0)*gconst10*r21);
IkReal x12150=(r21*x12144);
IkReal x12151=(r20*x12143);
IkReal x12152=(gconst10*gconst11*r20);
CheckValue<IkReal> x12153 = IKatan2WithCheck(IkReal((((r22*x12148))+((gconst10*r22*x12147)))),IkReal((((r11*sj3*x12151))+(((-1.0)*x12147*x12150))+((x12147*x12152))+(((-1.0)*x12148*x12149)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12153.valid){
continue;
}
CheckValue<IkReal> x12154=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*gconst11*x12145*x12149))+((x12146*x12150))+(((-1.0)*x12146*x12152))+((x12145*x12151)))),-1);
if(!x12154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12153.value)+(((1.5707963267949)*(x12154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12155=IKsin(j4);
IkReal x12156=IKcos(j4);
IkReal x12157=(sj1*sj2);
IkReal x12158=(cj3*r10);
IkReal x12159=(r21*sj3);
IkReal x12160=((1.0)*gconst10);
IkReal x12161=(cj3*gconst11);
IkReal x12162=(r01*sj3);
IkReal x12163=((1.0)*cj1);
IkReal x12164=(gconst11*sj3);
IkReal x12165=(gconst10*sj3);
IkReal x12166=(cj2*sj1);
IkReal x12167=(cj2*x12163);
IkReal x12168=((1.0)*x12156);
IkReal x12169=((1.0)*x12155);
IkReal x12170=(gconst10*x12156);
IkReal x12171=(gconst11*x12155);
evalcond[0]=((((-1.0)*r22*x12168))+((r20*x12171))+(((-1.0)*r21*x12155*x12160)));
evalcond[1]=((((-1.0)*r01*x12155*x12160))+((r00*x12171))+(((-1.0)*r02*x12168)));
evalcond[2]=((-1.0)+((r10*x12171))+(((-1.0)*r11*x12155*x12160))+(((-1.0)*r12*x12168)));
evalcond[3]=(((cj3*r11*x12170))+((r10*x12165))+(((-1.0)*gconst11*x12158*x12168))+(((-1.0)*cj3*r12*x12169))+((r11*x12164)));
evalcond[4]=((((-1.0)*r12*sj3*x12169))+(((-1.0)*r10*x12164*x12168))+(((-1.0)*r11*x12161))+((r11*x12156*x12165))+(((-1.0)*x12158*x12160)));
evalcond[5]=((((-1.0)*r00*x12161*x12168))+x12157+(((-1.0)*x12167))+((r00*x12165))+((gconst11*x12162))+((cj3*r01*x12170))+(((-1.0)*cj3*r02*x12169)));
evalcond[6]=((((-1.0)*x12166))+(((-1.0)*sj2*x12163))+((r20*x12165))+(((-1.0)*cj3*r22*x12169))+((gconst11*x12159))+(((-1.0)*r20*x12161*x12168))+((cj3*r21*x12170)));
evalcond[7]=((((-1.0)*r01*x12161))+(((-1.0)*r00*x12164*x12168))+((cj1*sj2))+x12166+((x12162*x12170))+(((-1.0)*r02*sj3*x12169))+(((-1.0)*cj3*r00*x12160)));
evalcond[8]=((((-1.0)*cj3*r20*x12160))+((x12159*x12170))+x12157+(((-1.0)*r22*sj3*x12169))+(((-1.0)*x12167))+(((-1.0)*r20*x12164*x12168))+(((-1.0)*r21*x12161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12172=((1.0)*gconst10);
CheckValue<IkReal> x12173=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12172))+(((-1.0)*gconst11*r01)))),-1);
if(!x12173.valid){
continue;
}
CheckValue<IkReal> x12174 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst11*r20))+(((-1.0)*r21*x12172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12173.value)))+(x12174.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12175=IKsin(j4);
IkReal x12176=IKcos(j4);
IkReal x12177=(sj1*sj2);
IkReal x12178=(cj3*r10);
IkReal x12179=(r21*sj3);
IkReal x12180=((1.0)*gconst10);
IkReal x12181=(cj3*gconst11);
IkReal x12182=(r01*sj3);
IkReal x12183=((1.0)*cj1);
IkReal x12184=(gconst11*sj3);
IkReal x12185=(gconst10*sj3);
IkReal x12186=(cj2*sj1);
IkReal x12187=(cj2*x12183);
IkReal x12188=((1.0)*x12176);
IkReal x12189=((1.0)*x12175);
IkReal x12190=(gconst10*x12176);
IkReal x12191=(gconst11*x12175);
evalcond[0]=((((-1.0)*r21*x12175*x12180))+((r20*x12191))+(((-1.0)*r22*x12188)));
evalcond[1]=((((-1.0)*r02*x12188))+(((-1.0)*r01*x12175*x12180))+((r00*x12191)));
evalcond[2]=((-1.0)+(((-1.0)*r11*x12175*x12180))+((r10*x12191))+(((-1.0)*r12*x12188)));
evalcond[3]=(((r11*x12184))+((cj3*r11*x12190))+((r10*x12185))+(((-1.0)*cj3*r12*x12189))+(((-1.0)*gconst11*x12178*x12188)));
evalcond[4]=((((-1.0)*r11*x12181))+((r11*x12176*x12185))+(((-1.0)*r12*sj3*x12189))+(((-1.0)*r10*x12184*x12188))+(((-1.0)*x12178*x12180)));
evalcond[5]=(((cj3*r01*x12190))+(((-1.0)*x12187))+x12177+(((-1.0)*r00*x12181*x12188))+(((-1.0)*cj3*r02*x12189))+((r00*x12185))+((gconst11*x12182)));
evalcond[6]=(((cj3*r21*x12190))+(((-1.0)*cj3*r22*x12189))+(((-1.0)*r20*x12181*x12188))+(((-1.0)*x12186))+((gconst11*x12179))+(((-1.0)*sj2*x12183))+((r20*x12185)));
evalcond[7]=((((-1.0)*cj3*r00*x12180))+(((-1.0)*r02*sj3*x12189))+((cj1*sj2))+((x12182*x12190))+x12186+(((-1.0)*r01*x12181))+(((-1.0)*r00*x12184*x12188)));
evalcond[8]=((((-1.0)*x12187))+x12177+(((-1.0)*r21*x12181))+(((-1.0)*cj3*r20*x12180))+((x12179*x12190))+(((-1.0)*r20*x12184*x12188))+(((-1.0)*r22*sj3*x12189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12192 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst10*r01))+((gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12192.valid){
continue;
}
CheckValue<IkReal> x12193=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12192.value)+(((1.5707963267949)*(x12193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12194=IKsin(j4);
IkReal x12195=IKcos(j4);
IkReal x12196=(sj1*sj2);
IkReal x12197=(cj3*r10);
IkReal x12198=(r21*sj3);
IkReal x12199=((1.0)*gconst10);
IkReal x12200=(cj3*gconst11);
IkReal x12201=(r01*sj3);
IkReal x12202=((1.0)*cj1);
IkReal x12203=(gconst11*sj3);
IkReal x12204=(gconst10*sj3);
IkReal x12205=(cj2*sj1);
IkReal x12206=(cj2*x12202);
IkReal x12207=((1.0)*x12195);
IkReal x12208=((1.0)*x12194);
IkReal x12209=(gconst10*x12195);
IkReal x12210=(gconst11*x12194);
evalcond[0]=((((-1.0)*r21*x12194*x12199))+(((-1.0)*r22*x12207))+((r20*x12210)));
evalcond[1]=((((-1.0)*r02*x12207))+((r00*x12210))+(((-1.0)*r01*x12194*x12199)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x12207))+(((-1.0)*r11*x12194*x12199))+((r10*x12210)));
evalcond[3]=((((-1.0)*cj3*r12*x12208))+((cj3*r11*x12209))+(((-1.0)*gconst11*x12197*x12207))+((r10*x12204))+((r11*x12203)));
evalcond[4]=((((-1.0)*x12197*x12199))+(((-1.0)*r11*x12200))+(((-1.0)*r12*sj3*x12208))+((r11*x12195*x12204))+(((-1.0)*r10*x12203*x12207)));
evalcond[5]=(((gconst11*x12201))+(((-1.0)*r00*x12200*x12207))+x12196+(((-1.0)*cj3*r02*x12208))+((r00*x12204))+(((-1.0)*x12206))+((cj3*r01*x12209)));
evalcond[6]=(((gconst11*x12198))+(((-1.0)*x12205))+(((-1.0)*sj2*x12202))+((cj3*r21*x12209))+(((-1.0)*cj3*r22*x12208))+(((-1.0)*r20*x12200*x12207))+((r20*x12204)));
evalcond[7]=(((x12201*x12209))+(((-1.0)*cj3*r00*x12199))+((cj1*sj2))+(((-1.0)*r00*x12203*x12207))+x12205+(((-1.0)*r01*x12200))+(((-1.0)*r02*sj3*x12208)));
evalcond[8]=((((-1.0)*r22*sj3*x12208))+(((-1.0)*r21*x12200))+x12196+(((-1.0)*cj3*r20*x12199))+(((-1.0)*r20*x12203*x12207))+(((-1.0)*x12206))+((x12198*x12209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x12211=((-1.0)*r01);
CheckValue<IkReal> x12214 = IKatan2WithCheck(IkReal(x12211),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12214.valid){
continue;
}
IkReal x12212=((1.0)*(x12214.value));
IkReal x12213=x12115;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12212)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12212)));
IkReal gconst10=(x12211*x12213);
IkReal gconst11=((1.0)*r00*x12213);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12215=((-1.0)*r01);
CheckValue<IkReal> x12218 = IKatan2WithCheck(IkReal(x12215),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12218.valid){
continue;
}
IkReal x12216=((1.0)*(x12218.value));
IkReal x12217=x12115;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12216)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12216)));
IkReal gconst10=(x12215*x12217);
IkReal gconst11=((1.0)*r00*x12217);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12219=gconst11*gconst11;
IkReal x12220=gconst10*gconst10;
IkReal x12221=(cj3*r10);
IkReal x12222=(cj3*r11);
IkReal x12223=(r10*sj3);
IkReal x12224=(gconst11*r11*sj3);
IkReal x12225=((1.0)*gconst10*r21);
IkReal x12226=(r21*x12220);
IkReal x12227=(r20*x12219);
IkReal x12228=(gconst10*gconst11*r20);
CheckValue<IkReal> x12229 = IKatan2WithCheck(IkReal((((r22*x12224))+((gconst10*r22*x12223)))),IkReal((((x12223*x12228))+(((-1.0)*x12224*x12225))+(((-1.0)*x12223*x12226))+((r11*sj3*x12227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12229.valid){
continue;
}
CheckValue<IkReal> x12230=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x12222*x12228))+(((-1.0)*gconst11*x12221*x12225))+((x12222*x12226))+((x12221*x12227)))),-1);
if(!x12230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12229.value)+(((1.5707963267949)*(x12230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12231=IKsin(j4);
IkReal x12232=IKcos(j4);
IkReal x12233=(cj3*r10);
IkReal x12234=(r21*sj3);
IkReal x12235=((1.0)*gconst10);
IkReal x12236=(cj3*gconst11);
IkReal x12237=(r01*sj3);
IkReal x12238=((1.0)*sj2);
IkReal x12239=(r20*sj3);
IkReal x12240=(r11*sj3);
IkReal x12241=((1.0)*cj2);
IkReal x12242=(gconst10*sj3);
IkReal x12243=(gconst11*sj3);
IkReal x12244=(cj1*x12238);
IkReal x12245=(sj1*x12241);
IkReal x12246=((1.0)*x12232);
IkReal x12247=((1.0)*x12231);
IkReal x12248=(gconst10*x12232);
IkReal x12249=(gconst11*x12231);
IkReal x12250=(x12244+x12245);
evalcond[0]=(((r20*x12249))+(((-1.0)*r21*x12231*x12235))+(((-1.0)*r22*x12246)));
evalcond[1]=(((r00*x12249))+(((-1.0)*r01*x12231*x12235))+(((-1.0)*r02*x12246)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12246))+(((-1.0)*r11*x12231*x12235))+((r10*x12249)));
evalcond[3]=(((cj3*r11*x12248))+((r10*x12242))+(((-1.0)*gconst11*x12233*x12246))+(((-1.0)*cj3*r12*x12247))+((gconst11*x12240)));
evalcond[4]=((((-1.0)*r10*x12243*x12246))+(((-1.0)*r11*x12236))+((x12240*x12248))+(((-1.0)*x12233*x12235))+(((-1.0)*r12*sj3*x12247)));
evalcond[5]=(((cj3*r01*x12248))+(((-1.0)*cj3*r02*x12247))+(((-1.0)*r00*x12236*x12246))+((gconst11*x12237))+(((-1.0)*sj1*x12238))+((r00*x12242))+((cj1*cj2)));
evalcond[6]=(((cj3*r21*x12248))+(((-1.0)*r20*x12236*x12246))+((gconst10*x12239))+((gconst11*x12234))+(((-1.0)*cj3*r22*x12247))+(((-1.0)*x12250)));
evalcond[7]=((((-1.0)*cj1*x12241))+(((-1.0)*r21*x12236))+(((-1.0)*r22*sj3*x12247))+((sj1*sj2))+(((-1.0)*cj3*r20*x12235))+(((-1.0)*gconst11*x12239*x12246))+((x12234*x12248)));
evalcond[8]=((((-1.0)*r02*sj3*x12247))+(((-1.0)*r01*x12236))+(((-1.0)*r00*x12243*x12246))+(((-1.0)*cj3*r00*x12235))+((x12237*x12248))+(((-1.0)*x12250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12251=((1.0)*gconst10);
CheckValue<IkReal> x12252 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x12251))+((gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12252.valid){
continue;
}
CheckValue<IkReal> x12253=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12251))+(((-1.0)*gconst11*r21)))),-1);
if(!x12253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12252.value)+(((1.5707963267949)*(x12253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12254=IKsin(j4);
IkReal x12255=IKcos(j4);
IkReal x12256=(cj3*r10);
IkReal x12257=(r21*sj3);
IkReal x12258=((1.0)*gconst10);
IkReal x12259=(cj3*gconst11);
IkReal x12260=(r01*sj3);
IkReal x12261=((1.0)*sj2);
IkReal x12262=(r20*sj3);
IkReal x12263=(r11*sj3);
IkReal x12264=((1.0)*cj2);
IkReal x12265=(gconst10*sj3);
IkReal x12266=(gconst11*sj3);
IkReal x12267=(cj1*x12261);
IkReal x12268=(sj1*x12264);
IkReal x12269=((1.0)*x12255);
IkReal x12270=((1.0)*x12254);
IkReal x12271=(gconst10*x12255);
IkReal x12272=(gconst11*x12254);
IkReal x12273=(x12268+x12267);
evalcond[0]=(((r20*x12272))+(((-1.0)*r21*x12254*x12258))+(((-1.0)*r22*x12269)));
evalcond[1]=((((-1.0)*r02*x12269))+((r00*x12272))+(((-1.0)*r01*x12254*x12258)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12269))+(((-1.0)*r11*x12254*x12258))+((r10*x12272)));
evalcond[3]=(((r10*x12265))+((gconst11*x12263))+(((-1.0)*gconst11*x12256*x12269))+((cj3*r11*x12271))+(((-1.0)*cj3*r12*x12270)));
evalcond[4]=((((-1.0)*x12256*x12258))+(((-1.0)*r12*sj3*x12270))+(((-1.0)*r11*x12259))+((x12263*x12271))+(((-1.0)*r10*x12266*x12269)));
evalcond[5]=((((-1.0)*cj3*r02*x12270))+(((-1.0)*r00*x12259*x12269))+((r00*x12265))+((gconst11*x12260))+((cj3*r01*x12271))+((cj1*cj2))+(((-1.0)*sj1*x12261)));
evalcond[6]=(((gconst10*x12262))+(((-1.0)*r20*x12259*x12269))+(((-1.0)*x12273))+((cj3*r21*x12271))+(((-1.0)*cj3*r22*x12270))+((gconst11*x12257)));
evalcond[7]=((((-1.0)*r21*x12259))+((sj1*sj2))+(((-1.0)*gconst11*x12262*x12269))+(((-1.0)*cj3*r20*x12258))+(((-1.0)*r22*sj3*x12270))+((x12257*x12271))+(((-1.0)*cj1*x12264)));
evalcond[8]=((((-1.0)*r00*x12266*x12269))+(((-1.0)*x12273))+(((-1.0)*r02*sj3*x12270))+(((-1.0)*cj3*r00*x12258))+(((-1.0)*r01*x12259))+((x12260*x12271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12274=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x12274.valid){
continue;
}
CheckValue<IkReal> x12275 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst11*r20))+(((-1.0)*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12274.value)))+(x12275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12276=IKsin(j4);
IkReal x12277=IKcos(j4);
IkReal x12278=(cj3*r10);
IkReal x12279=(r21*sj3);
IkReal x12280=((1.0)*gconst10);
IkReal x12281=(cj3*gconst11);
IkReal x12282=(r01*sj3);
IkReal x12283=((1.0)*sj2);
IkReal x12284=(r20*sj3);
IkReal x12285=(r11*sj3);
IkReal x12286=((1.0)*cj2);
IkReal x12287=(gconst10*sj3);
IkReal x12288=(gconst11*sj3);
IkReal x12289=(cj1*x12283);
IkReal x12290=(sj1*x12286);
IkReal x12291=((1.0)*x12277);
IkReal x12292=((1.0)*x12276);
IkReal x12293=(gconst10*x12277);
IkReal x12294=(gconst11*x12276);
IkReal x12295=(x12290+x12289);
evalcond[0]=(((r20*x12294))+(((-1.0)*r22*x12291))+(((-1.0)*r21*x12276*x12280)));
evalcond[1]=((((-1.0)*r01*x12276*x12280))+((r00*x12294))+(((-1.0)*r02*x12291)));
evalcond[2]=((1.0)+((r10*x12294))+(((-1.0)*r11*x12276*x12280))+(((-1.0)*r12*x12291)));
evalcond[3]=((((-1.0)*gconst11*x12278*x12291))+((cj3*r11*x12293))+((gconst11*x12285))+(((-1.0)*cj3*r12*x12292))+((r10*x12287)));
evalcond[4]=((((-1.0)*x12278*x12280))+(((-1.0)*r10*x12288*x12291))+((x12285*x12293))+(((-1.0)*r11*x12281))+(((-1.0)*r12*sj3*x12292)));
evalcond[5]=(((gconst11*x12282))+(((-1.0)*cj3*r02*x12292))+(((-1.0)*sj1*x12283))+((cj3*r01*x12293))+((r00*x12287))+((cj1*cj2))+(((-1.0)*r00*x12281*x12291)));
evalcond[6]=(((gconst11*x12279))+(((-1.0)*cj3*r22*x12292))+(((-1.0)*r20*x12281*x12291))+(((-1.0)*x12295))+((gconst10*x12284))+((cj3*r21*x12293)));
evalcond[7]=((((-1.0)*r22*sj3*x12292))+(((-1.0)*cj1*x12286))+((sj1*sj2))+(((-1.0)*gconst11*x12284*x12291))+(((-1.0)*cj3*r20*x12280))+((x12279*x12293))+(((-1.0)*r21*x12281)));
evalcond[8]=((((-1.0)*r02*sj3*x12292))+(((-1.0)*r00*x12288*x12291))+(((-1.0)*x12295))+((x12282*x12293))+(((-1.0)*cj3*r00*x12280))+(((-1.0)*r01*x12281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12296=((-1.0)*r01);
IkReal x12297=((-1.0)*py);
CheckValue<IkReal> x12299 = IKatan2WithCheck(IkReal(x12296),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12299.valid){
continue;
}
IkReal x12298=((1.0)*(x12299.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12298)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12297);
rxp0_2=(py*r00);
rxp1_0=(r21*x12297);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12298)));
IkReal gconst10=x12296;
IkReal gconst11=((1.0)*r00);
j4eval[0]=1.0;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12300=((-1.0)*r01);
IkReal x12301=((-1.0)*py);
CheckValue<IkReal> x12303 = IKatan2WithCheck(IkReal(x12300),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12303.valid){
continue;
}
IkReal x12302=((1.0)*(x12303.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12302)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12301);
rxp0_2=(py*r00);
rxp1_0=(r21*x12301);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12302)));
IkReal gconst10=x12300;
IkReal gconst11=((1.0)*r00);
IkReal x12304=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=((((-1.0)*r00*r20*x12304))+(((-1.0)*r01*r21*x12304)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12305=((-1.0)*r01);
IkReal x12306=((-1.0)*py);
CheckValue<IkReal> x12308 = IKatan2WithCheck(IkReal(x12305),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12308.valid){
continue;
}
IkReal x12307=((1.0)*(x12308.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12307)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12306);
rxp0_2=(py*r00);
rxp1_0=(r21*x12306);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12307)));
IkReal gconst10=x12305;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12309=((-1.0)*r01);
IkReal x12310=((-1.0)*py);
CheckValue<IkReal> x12312 = IKatan2WithCheck(IkReal(x12309),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12312.valid){
continue;
}
IkReal x12311=((1.0)*(x12312.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12311)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12310);
rxp0_2=(py*r00);
rxp1_0=(r21*x12310);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12311)));
IkReal gconst10=x12309;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12313=((-1.0)*r01);
IkReal x12314=((-1.0)*py);
CheckValue<IkReal> x12316 = IKatan2WithCheck(IkReal(x12313),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12316.valid){
continue;
}
IkReal x12315=((1.0)*(x12316.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12315)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12314);
rxp0_2=(py*r00);
rxp1_0=(r21*x12314);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12315)));
IkReal gconst10=x12313;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12317=((-1.0)*r01);
IkReal x12318=((-1.0)*py);
CheckValue<IkReal> x12320 = IKatan2WithCheck(IkReal(x12317),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12320.valid){
continue;
}
IkReal x12319=((1.0)*(x12320.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12319)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12318);
rxp0_2=(py*r00);
rxp1_0=(r21*x12318);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12319)));
IkReal gconst10=x12317;
IkReal gconst11=((1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12323=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x12323.valid){
continue;
}
IkReal x12321=x12323.value;
IkReal x12322=(cj0*x12321);
cj4array[0]=((((-1.0)*sj1*sj2*x12322))+((cj1*cj2*x12322)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12324=IKsin(j4);
IkReal x12325=IKcos(j4);
IkReal x12326=(gconst10*r21);
IkReal x12327=(gconst11*r20);
IkReal x12328=((1.0)*x12325);
IkReal x12329=((1.0)*x12324);
evalcond[0]=((-1.0)*r12*x12324);
evalcond[1]=((((-1.0)*r12*x12328))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x12326*x12329))+((x12324*x12327)));
evalcond[3]=(((gconst11*r00*x12324))+(((-1.0)*gconst10*r01*x12329)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*x12327*x12328))+(((-1.0)*cj1*sj2))+((x12325*x12326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12331=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12331.valid){
continue;
}
IkReal x12330=x12331.value;
cj4array[0]=(((cj1*sj2*x12330))+((cj2*sj1*x12330)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12332=IKsin(j4);
IkReal x12333=IKcos(j4);
IkReal x12334=(gconst10*r01);
IkReal x12335=((1.0)*cj0);
IkReal x12336=(gconst11*x12332);
IkReal x12337=((1.0)*x12333);
IkReal x12338=((1.0)*x12332);
evalcond[0]=((-1.0)*r12*x12332);
evalcond[1]=((((-1.0)*x12335))+(((-1.0)*r12*x12337)));
evalcond[2]=(((r20*x12336))+(((-1.0)*gconst10*r21*x12338)));
evalcond[3]=((((-1.0)*x12334*x12338))+((r00*x12336)));
evalcond[4]=(((x12333*x12334))+(((-1.0)*gconst11*r00*x12337))+(((-1.0)*cj1*cj2*x12335))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12339=IKPowWithIntegerCheck(r12,-1);
if(!x12339.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12339.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12340=IKsin(j4);
IkReal x12341=IKcos(j4);
IkReal x12342=((1.0)*cj2);
IkReal x12343=(gconst11*r20);
IkReal x12344=(gconst11*r00);
IkReal x12345=(gconst10*x12341);
IkReal x12346=((1.0)*x12341);
IkReal x12347=((1.0)*gconst10*x12340);
evalcond[0]=((-1.0)*r12*x12340);
evalcond[1]=(((x12340*x12343))+(((-1.0)*r21*x12347)));
evalcond[2]=(((x12340*x12344))+(((-1.0)*r01*x12347)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*x12343*x12346))+(((-1.0)*sj1*x12342))+((r21*x12345)));
evalcond[4]=((((-1.0)*x12344*x12346))+(((-1.0)*cj0*cj1*x12342))+((r01*x12345))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12348=((-1.0)*r01);
IkReal x12349=((-1.0)*py);
CheckValue<IkReal> x12351 = IKatan2WithCheck(IkReal(x12348),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12351.valid){
continue;
}
IkReal x12350=((1.0)*(x12351.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12350)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12349);
rxp0_2=(py*r00);
rxp1_0=(r21*x12349);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12350)));
IkReal gconst10=x12348;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12352=((-1.0)*r01);
IkReal x12353=((-1.0)*py);
CheckValue<IkReal> x12355 = IKatan2WithCheck(IkReal(x12352),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12355.valid){
continue;
}
IkReal x12354=((1.0)*(x12355.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12354)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12353);
rxp0_2=(py*r00);
rxp1_0=(r21*x12353);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12354)));
IkReal gconst10=x12352;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12356=((-1.0)*r01);
IkReal x12357=((-1.0)*py);
CheckValue<IkReal> x12359 = IKatan2WithCheck(IkReal(x12356),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12359.valid){
continue;
}
IkReal x12358=((1.0)*(x12359.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12358)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12357);
rxp0_2=(py*r00);
rxp1_0=(r21*x12357);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12358)));
IkReal gconst10=x12356;
IkReal gconst11=((1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12362=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x12362.valid){
continue;
}
IkReal x12360=x12362.value;
IkReal x12361=(cj0*x12360);
cj4array[0]=((((-1.0)*sj1*sj2*x12361))+((cj1*cj2*x12361)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12363=IKsin(j4);
IkReal x12364=IKcos(j4);
IkReal x12365=(gconst11*r20);
IkReal x12366=((1.0)*x12364);
IkReal x12367=((1.0)*gconst10*x12363);
evalcond[0]=(r12*x12363);
evalcond[1]=((((-1.0)*r12*x12366))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x12367))+((x12363*x12365)));
evalcond[3]=((((-1.0)*r01*x12367))+((gconst11*r00*x12363)));
evalcond[4]=((((-1.0)*gconst10*r21*x12366))+((x12364*x12365))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12369=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12369.valid){
continue;
}
IkReal x12368=x12369.value;
cj4array[0]=(((cj2*sj1*x12368))+((cj1*sj2*x12368)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12370=IKsin(j4);
IkReal x12371=IKcos(j4);
IkReal x12372=((1.0)*cj0);
IkReal x12373=((1.0)*gconst10*r01);
IkReal x12374=(gconst11*x12370);
evalcond[0]=(r12*x12370);
evalcond[1]=((((-1.0)*x12372))+(((-1.0)*r12*x12371)));
evalcond[2]=((((-1.0)*gconst10*r21*x12370))+((r20*x12374)));
evalcond[3]=((((-1.0)*x12370*x12373))+((r00*x12374)));
evalcond[4]=((((-1.0)*cj1*cj2*x12372))+(((-1.0)*x12371*x12373))+((cj0*sj1*sj2))+((gconst11*r00*x12371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12375=IKPowWithIntegerCheck(r12,-1);
if(!x12375.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12375.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12376=IKsin(j4);
IkReal x12377=IKcos(j4);
IkReal x12378=((1.0)*cj2);
IkReal x12379=(gconst11*r20);
IkReal x12380=(gconst11*r00);
IkReal x12381=((1.0)*gconst10*r01);
IkReal x12382=((1.0)*gconst10*r21);
evalcond[0]=(r12*x12376);
evalcond[1]=((((-1.0)*x12376*x12382))+((x12376*x12379)));
evalcond[2]=(((x12376*x12380))+(((-1.0)*x12376*x12381)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12378))+((x12377*x12379))+(((-1.0)*x12377*x12382)));
evalcond[4]=((((-1.0)*cj0*cj1*x12378))+((x12377*x12380))+(((-1.0)*x12377*x12381))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12383=((-1.0)*r01);
IkReal x12384=((-1.0)*py);
CheckValue<IkReal> x12386 = IKatan2WithCheck(IkReal(x12383),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12386.valid){
continue;
}
IkReal x12385=((1.0)*(x12386.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12385)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12384);
rxp0_2=(py*r00);
rxp1_0=(r21*x12384);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12385)));
IkReal gconst10=x12383;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12387=((-1.0)*r01);
IkReal x12388=((-1.0)*py);
CheckValue<IkReal> x12390 = IKatan2WithCheck(IkReal(x12387),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12390.valid){
continue;
}
IkReal x12389=((1.0)*(x12390.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12389)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12388);
rxp0_2=(py*r00);
rxp1_0=(r21*x12388);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12389)));
IkReal gconst10=x12387;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12391=((-1.0)*r01);
IkReal x12392=((-1.0)*py);
CheckValue<IkReal> x12394 = IKatan2WithCheck(IkReal(x12391),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12394.valid){
continue;
}
IkReal x12393=((1.0)*(x12394.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12393)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12392);
rxp0_2=(py*r00);
rxp1_0=(r21*x12392);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12393)));
IkReal gconst10=x12391;
IkReal gconst11=((1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12397=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x12397.valid){
continue;
}
IkReal x12395=x12397.value;
IkReal x12396=((1.0)*cj0*x12395);
cj4array[0]=((((-1.0)*cj1*sj2*x12396))+(((-1.0)*cj2*sj1*x12396)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12398=IKsin(j4);
IkReal x12399=IKcos(j4);
IkReal x12400=(gconst10*r21);
IkReal x12401=(gconst11*r20);
IkReal x12402=((1.0)*x12399);
IkReal x12403=((1.0)*x12398);
evalcond[0]=((-1.0)*r12*x12398);
evalcond[1]=((((-1.0)*r12*x12402))+(((-1.0)*cj0)));
evalcond[2]=(((x12398*x12401))+(((-1.0)*x12400*x12403)));
evalcond[3]=((((-1.0)*gconst10*r01*x12403))+((gconst11*r00*x12398)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12399*x12400))+(((-1.0)*x12401*x12402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12405=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12405.valid){
continue;
}
IkReal x12404=x12405.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12404))+((cj1*cj2*x12404)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12406=IKsin(j4);
IkReal x12407=IKcos(j4);
IkReal x12408=(gconst10*r01);
IkReal x12409=(gconst11*x12406);
IkReal x12410=((1.0)*x12407);
IkReal x12411=((1.0)*x12406);
evalcond[0]=((-1.0)*r12*x12406);
evalcond[1]=((((-1.0)*r12*x12410))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst10*r21*x12411))+((r20*x12409)));
evalcond[3]=((((-1.0)*x12408*x12411))+((r00*x12409)));
evalcond[4]=(((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*gconst11*r00*x12410))+((x12407*x12408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12412=IKPowWithIntegerCheck(r12,-1);
if(!x12412.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12412.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12413=IKsin(j4);
IkReal x12414=IKcos(j4);
IkReal x12415=(gconst11*r20);
IkReal x12416=(gconst11*r00);
IkReal x12417=(gconst10*x12414);
IkReal x12418=((1.0)*x12414);
IkReal x12419=((1.0)*gconst10*x12413);
evalcond[0]=((-1.0)*r12*x12413);
evalcond[1]=((((-1.0)*r21*x12419))+((x12413*x12415)));
evalcond[2]=((((-1.0)*r01*x12419))+((x12413*x12416)));
evalcond[3]=(((r21*x12417))+(((-1.0)*x12415*x12418))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x12416*x12418))+((r01*x12417))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12420=((-1.0)*r01);
IkReal x12421=((-1.0)*py);
CheckValue<IkReal> x12423 = IKatan2WithCheck(IkReal(x12420),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12423.valid){
continue;
}
IkReal x12422=((1.0)*(x12423.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12422)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12421);
rxp0_2=(py*r00);
rxp1_0=(r21*x12421);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12422)));
IkReal gconst10=x12420;
IkReal gconst11=((1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12424=((-1.0)*r01);
IkReal x12425=((-1.0)*py);
CheckValue<IkReal> x12427 = IKatan2WithCheck(IkReal(x12424),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12427.valid){
continue;
}
IkReal x12426=((1.0)*(x12427.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12426)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12425);
rxp0_2=(py*r00);
rxp1_0=(r21*x12425);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12426)));
IkReal gconst10=x12424;
IkReal gconst11=((1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12428=((-1.0)*r01);
IkReal x12429=((-1.0)*py);
CheckValue<IkReal> x12431 = IKatan2WithCheck(IkReal(x12428),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12431.valid){
continue;
}
IkReal x12430=((1.0)*(x12431.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12430)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12429);
rxp0_2=(py*r00);
rxp1_0=(r21*x12429);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12430)));
IkReal gconst10=x12428;
IkReal gconst11=((1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12434=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x12434.valid){
continue;
}
IkReal x12432=x12434.value;
IkReal x12433=((1.0)*cj0*x12432);
cj4array[0]=((((-1.0)*cj1*sj2*x12433))+(((-1.0)*cj2*sj1*x12433)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12435=IKsin(j4);
IkReal x12436=IKcos(j4);
IkReal x12437=(gconst11*r20);
IkReal x12438=((1.0)*x12436);
IkReal x12439=((1.0)*gconst10*x12435);
evalcond[0]=(r12*x12435);
evalcond[1]=((((-1.0)*r12*x12438))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x12439))+((x12435*x12437)));
evalcond[3]=((((-1.0)*r01*x12439))+((gconst11*r00*x12435)));
evalcond[4]=(((x12436*x12437))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12441=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12441.valid){
continue;
}
IkReal x12440=x12441.value;
cj4array[0]=(((cj1*cj2*x12440))+(((-1.0)*sj1*sj2*x12440)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12442=IKsin(j4);
IkReal x12443=IKcos(j4);
IkReal x12444=((1.0)*gconst10*r01);
IkReal x12445=(gconst11*x12442);
evalcond[0]=(r12*x12442);
evalcond[1]=((((-1.0)*r12*x12443))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst10*r21*x12442))+((r20*x12445)));
evalcond[3]=(((r00*x12445))+(((-1.0)*x12442*x12444)));
evalcond[4]=(((gconst11*r00*x12443))+(((-1.0)*x12443*x12444))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12446=IKPowWithIntegerCheck(r12,-1);
if(!x12446.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x12446.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12447=IKsin(j4);
IkReal x12448=IKcos(j4);
IkReal x12449=(gconst11*r20);
IkReal x12450=(gconst11*r00);
IkReal x12451=((1.0)*gconst10*r01);
IkReal x12452=((1.0)*gconst10*r21);
evalcond[0]=(r12*x12447);
evalcond[1]=(((x12447*x12449))+(((-1.0)*x12447*x12452)));
evalcond[2]=(((x12447*x12450))+(((-1.0)*x12447*x12451)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12448*x12449))+(((-1.0)*x12448*x12452)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*x12448*x12451))+((cj0*cj1*sj2))+((x12448*x12450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12454=IKPowWithIntegerCheck(r12,-1);
if(!x12454.valid){
continue;
}
IkReal x12453=x12454.value;
CheckValue<IkReal> x12455=IKPowWithIntegerCheck(sj3,-1);
if(!x12455.valid){
continue;
}
if( IKabs((x12453*(x12455.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x12453)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12453*(x12455.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x12453))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12453*(x12455.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x12453));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12456=IKsin(j4);
IkReal x12457=IKcos(j4);
IkReal x12458=((1.0)*sj3);
IkReal x12459=(cj0*cj1);
IkReal x12460=((1.0)*cj2);
IkReal x12461=(cj2*sj1);
IkReal x12462=(sj1*sj2);
IkReal x12463=(gconst11*sj3);
IkReal x12464=(cj3*r01);
IkReal x12465=((1.0)*gconst11);
IkReal x12466=(gconst10*sj3);
IkReal x12467=(cj1*sj2);
IkReal x12468=(cj3*r21);
IkReal x12469=((1.0)*cj3);
IkReal x12470=(r12*x12456);
IkReal x12471=(gconst11*x12457);
IkReal x12472=(gconst10*x12457);
IkReal x12473=(gconst11*x12456);
IkReal x12474=(x12457*x12466);
IkReal x12475=((1.0)*gconst10*x12456);
evalcond[0]=((((-1.0)*r12*x12457))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*r21*x12475))+((r20*x12473)));
evalcond[2]=(sj0+((r00*x12473))+(((-1.0)*r01*x12475)));
evalcond[3]=((((-1.0)*x12458*x12470))+((sj0*x12461))+((sj0*x12467)));
evalcond[4]=((((-1.0)*cj1*sj0*x12460))+((sj0*x12462))+(((-1.0)*x12469*x12470)));
evalcond[5]=(((r20*x12466))+(((-1.0)*x12467))+((x12468*x12472))+((r21*x12463))+(((-1.0)*sj1*x12460))+(((-1.0)*cj3*r20*x12457*x12465)));
evalcond[6]=((((-1.0)*x12465*x12468))+(((-1.0)*gconst10*r20*x12469))+(((-1.0)*r20*x12458*x12471))+x12462+(((-1.0)*cj1*x12460))+((r21*x12474)));
evalcond[7]=(((x12464*x12472))+(((-1.0)*cj3*r00*x12457*x12465))+((r01*x12463))+((r00*x12466))+((cj0*x12462))+(((-1.0)*x12459*x12460)));
evalcond[8]=((((-1.0)*gconst10*r00*x12469))+(((-1.0)*x12464*x12465))+(((-1.0)*r00*x12458*x12471))+((r01*x12474))+((sj2*x12459))+((cj0*x12461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12476=((1.0)*r20);
CheckValue<IkReal> x12477=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x12477.valid){
continue;
}
CheckValue<IkReal> x12478=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12476))+((cj3*gconst10*r21))),-1);
if(!x12478.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x12477.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12478.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst10*sj3*x12476))+(((-1.0)*gconst11*r21*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x12477.value)))+IKsqr(((x12478.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst10*sj3*x12476))+(((-1.0)*gconst11*r21*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x12477.value)), ((x12478.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst10*sj3*x12476))+(((-1.0)*gconst11*r21*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12479=IKsin(j4);
IkReal x12480=IKcos(j4);
IkReal x12481=((1.0)*sj3);
IkReal x12482=(cj0*cj1);
IkReal x12483=((1.0)*cj2);
IkReal x12484=(cj2*sj1);
IkReal x12485=(sj1*sj2);
IkReal x12486=(gconst11*sj3);
IkReal x12487=(cj3*r01);
IkReal x12488=((1.0)*gconst11);
IkReal x12489=(gconst10*sj3);
IkReal x12490=(cj1*sj2);
IkReal x12491=(cj3*r21);
IkReal x12492=((1.0)*cj3);
IkReal x12493=(r12*x12479);
IkReal x12494=(gconst11*x12480);
IkReal x12495=(gconst10*x12480);
IkReal x12496=(gconst11*x12479);
IkReal x12497=(x12480*x12489);
IkReal x12498=((1.0)*gconst10*x12479);
evalcond[0]=((((-1.0)*r12*x12480))+(((-1.0)*cj0)));
evalcond[1]=(((r20*x12496))+(((-1.0)*r21*x12498)));
evalcond[2]=(((r00*x12496))+(((-1.0)*r01*x12498))+sj0);
evalcond[3]=(((sj0*x12490))+((sj0*x12484))+(((-1.0)*x12481*x12493)));
evalcond[4]=((((-1.0)*cj1*sj0*x12483))+((sj0*x12485))+(((-1.0)*x12492*x12493)));
evalcond[5]=((((-1.0)*cj3*r20*x12480*x12488))+((x12491*x12495))+((r20*x12489))+(((-1.0)*sj1*x12483))+((r21*x12486))+(((-1.0)*x12490)));
evalcond[6]=(((r21*x12497))+(((-1.0)*cj1*x12483))+(((-1.0)*x12488*x12491))+(((-1.0)*gconst10*r20*x12492))+x12485+(((-1.0)*r20*x12481*x12494)));
evalcond[7]=((((-1.0)*x12482*x12483))+((cj0*x12485))+((x12487*x12495))+((r00*x12489))+((r01*x12486))+(((-1.0)*cj3*r00*x12480*x12488)));
evalcond[8]=((((-1.0)*x12487*x12488))+((r01*x12497))+((cj0*x12484))+(((-1.0)*gconst10*r00*x12492))+(((-1.0)*r00*x12481*x12494))+((sj2*x12482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12499=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x12499.valid){
continue;
}
CheckValue<IkReal> x12500=IKPowWithIntegerCheck(r12,-1);
if(!x12500.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x12499.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x12500.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x12499.value)))+IKsqr(((-1.0)*cj0*(x12500.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x12499.value)), ((-1.0)*cj0*(x12500.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12501=IKsin(j4);
IkReal x12502=IKcos(j4);
IkReal x12503=((1.0)*sj3);
IkReal x12504=(cj0*cj1);
IkReal x12505=((1.0)*cj2);
IkReal x12506=(cj2*sj1);
IkReal x12507=(sj1*sj2);
IkReal x12508=(gconst11*sj3);
IkReal x12509=(cj3*r01);
IkReal x12510=((1.0)*gconst11);
IkReal x12511=(gconst10*sj3);
IkReal x12512=(cj1*sj2);
IkReal x12513=(cj3*r21);
IkReal x12514=((1.0)*cj3);
IkReal x12515=(r12*x12501);
IkReal x12516=(gconst11*x12502);
IkReal x12517=(gconst10*x12502);
IkReal x12518=(gconst11*x12501);
IkReal x12519=(x12502*x12511);
IkReal x12520=((1.0)*gconst10*x12501);
evalcond[0]=((((-1.0)*r12*x12502))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*r21*x12520))+((r20*x12518)));
evalcond[2]=(sj0+((r00*x12518))+(((-1.0)*r01*x12520)));
evalcond[3]=(((sj0*x12506))+((sj0*x12512))+(((-1.0)*x12503*x12515)));
evalcond[4]=((((-1.0)*x12514*x12515))+((sj0*x12507))+(((-1.0)*cj1*sj0*x12505)));
evalcond[5]=(((r20*x12511))+(((-1.0)*x12512))+((r21*x12508))+(((-1.0)*cj3*r20*x12502*x12510))+(((-1.0)*sj1*x12505))+((x12513*x12517)));
evalcond[6]=((((-1.0)*gconst10*r20*x12514))+(((-1.0)*r20*x12503*x12516))+((r21*x12519))+(((-1.0)*cj1*x12505))+x12507+(((-1.0)*x12510*x12513)));
evalcond[7]=(((x12509*x12517))+((r01*x12508))+((r00*x12511))+(((-1.0)*cj3*r00*x12502*x12510))+(((-1.0)*x12504*x12505))+((cj0*x12507)));
evalcond[8]=((((-1.0)*r00*x12503*x12516))+((sj2*x12504))+(((-1.0)*gconst10*r00*x12514))+((r01*x12519))+(((-1.0)*x12509*x12510))+((cj0*x12506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12521=((-1.0)*r01);
CheckValue<IkReal> x12524 = IKatan2WithCheck(IkReal(x12521),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12524.valid){
continue;
}
IkReal x12522=((1.0)*(x12524.value));
IkReal x12523=x12115;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12522)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12522)));
IkReal gconst10=(x12521*x12523);
IkReal gconst11=((1.0)*r00*x12523);
IkReal x12525=r02*r02;
IkReal x12526=(r12*sj0);
IkReal x12527=x12115;
IkReal x12528=(cj0*x12527);
j4eval[0]=((IKabs((((x12525*x12528))+(((-1.0)*x12528))+((r02*x12526*x12527)))))+(IKabs((x12526+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12529=((1.0)*sj3);
IkReal x12530=(gconst11*r20);
IkReal x12531=(gconst10*r21);
IkReal x12532=(cj1*cj2);
IkReal x12533=((1.0)*sj1*sj2);
IkReal x12534=(cj3*gconst10*r20);
IkReal x12535=(cj3*gconst11*r21);
CheckValue<IkReal> x12536=IKPowWithIntegerCheck((((gconst11*r00*sj3*x12531))+(((-1.0)*gconst10*r01*x12529*x12531))+((gconst10*r01*sj3*x12530))+(((-1.0)*gconst11*r00*x12529*x12530))),-1);
if(!x12536.valid){
continue;
}
CheckValue<IkReal> x12537=IKPowWithIntegerCheck((((sj3*x12531))+(((-1.0)*x12529*x12530))),-1);
if(!x12537.valid){
continue;
}
if( IKabs(((x12536.value)*(((((-1.0)*r02*x12533))+((sj0*sj3*x12530))+((r02*x12534))+((r02*x12535))+((r02*x12532))+(((-1.0)*sj0*x12529*x12531)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12537.value)*((x12534+x12535+x12532+(((-1.0)*x12533)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12536.value)*(((((-1.0)*r02*x12533))+((sj0*sj3*x12530))+((r02*x12534))+((r02*x12535))+((r02*x12532))+(((-1.0)*sj0*x12529*x12531))))))+IKsqr(((x12537.value)*((x12534+x12535+x12532+(((-1.0)*x12533))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12536.value)*(((((-1.0)*r02*x12533))+((sj0*sj3*x12530))+((r02*x12534))+((r02*x12535))+((r02*x12532))+(((-1.0)*sj0*x12529*x12531))))), ((x12537.value)*((x12534+x12535+x12532+(((-1.0)*x12533))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12538=IKsin(j4);
IkReal x12539=IKcos(j4);
IkReal x12540=((1.0)*sj3);
IkReal x12541=(cj0*cj1);
IkReal x12542=((1.0)*cj2);
IkReal x12543=((1.0)*r10);
IkReal x12544=(gconst10*r01);
IkReal x12545=(cj3*gconst10);
IkReal x12546=(gconst10*r21);
IkReal x12547=(cj1*sj2);
IkReal x12548=(sj1*sj2);
IkReal x12549=(gconst11*r10);
IkReal x12550=(gconst11*sj3);
IkReal x12551=(gconst10*r11);
IkReal x12552=(gconst10*sj3);
IkReal x12553=(cj2*sj1);
IkReal x12554=((1.0)*cj3);
IkReal x12555=(gconst11*r00);
IkReal x12556=((1.0)*r20);
IkReal x12557=(r12*x12538);
IkReal x12558=(cj3*x12539);
IkReal x12559=(sj3*x12539);
IkReal x12560=(gconst11*x12539);
IkReal x12561=(gconst11*x12554);
IkReal x12562=((1.0)*x12539);
IkReal x12563=(r02*x12538);
IkReal x12564=((1.0)*x12538);
evalcond[0]=(((gconst11*r20*x12538))+(((-1.0)*x12546*x12564)));
evalcond[1]=(sj0+(((-1.0)*r02*x12562))+((x12538*x12555))+(((-1.0)*x12544*x12564)));
evalcond[2]=((((-1.0)*r12*x12562))+(((-1.0)*x12551*x12564))+((x12538*x12549))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x12547))+((r20*x12552))+(((-1.0)*sj1*x12542))+((r21*x12550))+((r21*x12539*x12545))+(((-1.0)*r20*x12554*x12560)));
evalcond[4]=((((-1.0)*x12545*x12556))+(((-1.0)*r20*x12540*x12560))+((x12546*x12559))+(((-1.0)*cj1*x12542))+x12548+(((-1.0)*r21*x12561)));
evalcond[5]=(((r01*x12550))+((r00*x12552))+(((-1.0)*x12541*x12542))+((cj0*x12548))+((x12544*x12558))+(((-1.0)*x12539*x12554*x12555))+(((-1.0)*x12554*x12563)));
evalcond[6]=((((-1.0)*x12554*x12557))+((r10*x12552))+((sj0*x12548))+((r11*x12550))+((r11*x12539*x12545))+(((-1.0)*gconst11*x12543*x12558))+(((-1.0)*cj1*sj0*x12542)));
evalcond[7]=((((-1.0)*r01*x12561))+(((-1.0)*x12539*x12540*x12555))+(((-1.0)*x12540*x12563))+((cj0*x12553))+((x12544*x12559))+(((-1.0)*r00*x12545))+((sj2*x12541)));
evalcond[8]=((((-1.0)*r11*x12561))+((x12551*x12559))+(((-1.0)*x12539*x12540*x12549))+((sj0*x12553))+((sj0*x12547))+(((-1.0)*x12540*x12557))+(((-1.0)*x12543*x12545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12565=((1.0)*gconst10);
CheckValue<IkReal> x12566 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x12565))+(((-1.0)*cj0*r01*x12565))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12566.valid){
continue;
}
CheckValue<IkReal> x12567=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12566.value)+(((1.5707963267949)*(x12567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12568=IKsin(j4);
IkReal x12569=IKcos(j4);
IkReal x12570=((1.0)*sj3);
IkReal x12571=(cj0*cj1);
IkReal x12572=((1.0)*cj2);
IkReal x12573=((1.0)*r10);
IkReal x12574=(gconst10*r01);
IkReal x12575=(cj3*gconst10);
IkReal x12576=(gconst10*r21);
IkReal x12577=(cj1*sj2);
IkReal x12578=(sj1*sj2);
IkReal x12579=(gconst11*r10);
IkReal x12580=(gconst11*sj3);
IkReal x12581=(gconst10*r11);
IkReal x12582=(gconst10*sj3);
IkReal x12583=(cj2*sj1);
IkReal x12584=((1.0)*cj3);
IkReal x12585=(gconst11*r00);
IkReal x12586=((1.0)*r20);
IkReal x12587=(r12*x12568);
IkReal x12588=(cj3*x12569);
IkReal x12589=(sj3*x12569);
IkReal x12590=(gconst11*x12569);
IkReal x12591=(gconst11*x12584);
IkReal x12592=((1.0)*x12569);
IkReal x12593=(r02*x12568);
IkReal x12594=((1.0)*x12568);
evalcond[0]=((((-1.0)*x12576*x12594))+((gconst11*r20*x12568)));
evalcond[1]=(sj0+(((-1.0)*x12574*x12594))+(((-1.0)*r02*x12592))+((x12568*x12585)));
evalcond[2]=((((-1.0)*r12*x12592))+((x12568*x12579))+(((-1.0)*x12581*x12594))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x12582))+((r21*x12569*x12575))+(((-1.0)*sj1*x12572))+(((-1.0)*r20*x12584*x12590))+((r21*x12580))+(((-1.0)*x12577)));
evalcond[4]=(((x12576*x12589))+(((-1.0)*r20*x12570*x12590))+(((-1.0)*x12575*x12586))+(((-1.0)*r21*x12591))+x12578+(((-1.0)*cj1*x12572)));
evalcond[5]=(((cj0*x12578))+((r00*x12582))+((r01*x12580))+((x12574*x12588))+(((-1.0)*x12571*x12572))+(((-1.0)*x12584*x12593))+(((-1.0)*x12569*x12584*x12585)));
evalcond[6]=(((r11*x12569*x12575))+(((-1.0)*cj1*sj0*x12572))+(((-1.0)*x12584*x12587))+(((-1.0)*gconst11*x12573*x12588))+((r11*x12580))+((r10*x12582))+((sj0*x12578)));
evalcond[7]=((((-1.0)*r01*x12591))+((cj0*x12583))+(((-1.0)*x12570*x12593))+(((-1.0)*r00*x12575))+((x12574*x12589))+((sj2*x12571))+(((-1.0)*x12569*x12570*x12585)));
evalcond[8]=((((-1.0)*x12570*x12587))+((sj0*x12583))+(((-1.0)*r11*x12591))+(((-1.0)*x12573*x12575))+(((-1.0)*x12569*x12570*x12579))+((x12581*x12589))+((sj0*x12577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12595=((1.0)*gconst10);
CheckValue<IkReal> x12596 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x12595))+(((-1.0)*cj0*r01*x12595))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12596.valid){
continue;
}
CheckValue<IkReal> x12597=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12596.value)+(((1.5707963267949)*(x12597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12598=IKsin(j4);
IkReal x12599=IKcos(j4);
IkReal x12600=(cj0*cj1);
IkReal x12601=((1.0)*cj2);
IkReal x12602=(cj3*r10);
IkReal x12603=(cj3*r01);
IkReal x12604=((1.0)*gconst10);
IkReal x12605=(r21*sj3);
IkReal x12606=(cj1*sj2);
IkReal x12607=(cj0*sj1);
IkReal x12608=(r01*sj3);
IkReal x12609=(gconst11*sj3);
IkReal x12610=((1.0)*gconst11);
IkReal x12611=(cj3*r11);
IkReal x12612=(gconst10*sj3);
IkReal x12613=(sj0*sj1);
IkReal x12614=(cj3*r21);
IkReal x12615=(cj3*gconst11);
IkReal x12616=((1.0)*x12599);
IkReal x12617=((1.0)*x12598);
IkReal x12618=(gconst10*x12599);
IkReal x12619=(gconst11*x12598);
evalcond[0]=((((-1.0)*r22*x12616))+(((-1.0)*r21*x12598*x12604))+((r20*x12619)));
evalcond[1]=(sj0+(((-1.0)*r02*x12616))+(((-1.0)*r01*x12598*x12604))+((r00*x12619)));
evalcond[2]=((((-1.0)*r12*x12616))+(((-1.0)*r11*x12598*x12604))+(((-1.0)*cj0))+((r10*x12619)));
evalcond[3]=((((-1.0)*x12606))+(((-1.0)*sj1*x12601))+((x12614*x12618))+((gconst11*x12605))+((r20*x12612))+(((-1.0)*cj3*r22*x12617))+(((-1.0)*cj3*r20*x12599*x12610)));
evalcond[4]=((((-1.0)*r22*sj3*x12617))+(((-1.0)*cj1*x12601))+((sj1*sj2))+(((-1.0)*cj3*r20*x12604))+(((-1.0)*x12610*x12614))+((x12605*x12618))+(((-1.0)*r20*x12609*x12616)));
evalcond[5]=((((-1.0)*cj3*r00*x12599*x12610))+(((-1.0)*cj3*r02*x12617))+(((-1.0)*x12600*x12601))+((x12603*x12618))+((gconst11*x12608))+((r00*x12612))+((sj2*x12607)));
evalcond[6]=((((-1.0)*cj3*r12*x12617))+((r11*x12609))+((x12611*x12618))+((sj2*x12613))+(((-1.0)*cj1*sj0*x12601))+(((-1.0)*x12599*x12602*x12610))+((r10*x12612)));
evalcond[7]=((((-1.0)*x12603*x12610))+((x12608*x12618))+(((-1.0)*r02*sj3*x12617))+(((-1.0)*r00*x12609*x12616))+((cj2*x12607))+(((-1.0)*cj3*r00*x12604))+((sj2*x12600)));
evalcond[8]=(((r11*x12599*x12612))+((cj2*x12613))+(((-1.0)*x12610*x12611))+(((-1.0)*r10*x12609*x12616))+(((-1.0)*r12*sj3*x12617))+((sj0*x12606))+(((-1.0)*x12602*x12604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12620=((1.0)*gconst10);
CheckValue<IkReal> x12621 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x12620))+((cj0*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12621.valid){
continue;
}
CheckValue<IkReal> x12622=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r01))+(((-1.0)*r00*x12620)))),-1);
if(!x12622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12621.value)+(((1.5707963267949)*(x12622.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12623=IKsin(j4);
IkReal x12624=IKcos(j4);
IkReal x12625=(cj0*cj1);
IkReal x12626=((1.0)*cj2);
IkReal x12627=(cj3*r10);
IkReal x12628=(cj3*r01);
IkReal x12629=((1.0)*gconst10);
IkReal x12630=(r21*sj3);
IkReal x12631=(cj1*sj2);
IkReal x12632=(cj0*sj1);
IkReal x12633=(r01*sj3);
IkReal x12634=(gconst11*sj3);
IkReal x12635=((1.0)*gconst11);
IkReal x12636=(cj3*r11);
IkReal x12637=(gconst10*sj3);
IkReal x12638=(sj0*sj1);
IkReal x12639=(cj3*r21);
IkReal x12640=(cj3*gconst11);
IkReal x12641=((1.0)*x12624);
IkReal x12642=((1.0)*x12623);
IkReal x12643=(gconst10*x12624);
IkReal x12644=(gconst11*x12623);
evalcond[0]=((((-1.0)*r22*x12641))+((r20*x12644))+(((-1.0)*r21*x12623*x12629)));
evalcond[1]=((((-1.0)*r02*x12641))+sj0+(((-1.0)*r01*x12623*x12629))+((r00*x12644)));
evalcond[2]=((((-1.0)*r11*x12623*x12629))+((r10*x12644))+(((-1.0)*r12*x12641))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj3*r22*x12642))+(((-1.0)*x12631))+((r20*x12637))+((x12639*x12643))+(((-1.0)*cj3*r20*x12624*x12635))+(((-1.0)*sj1*x12626))+((gconst11*x12630)));
evalcond[4]=(((x12630*x12643))+((sj1*sj2))+(((-1.0)*r20*x12634*x12641))+(((-1.0)*cj3*r20*x12629))+(((-1.0)*r22*sj3*x12642))+(((-1.0)*x12635*x12639))+(((-1.0)*cj1*x12626)));
evalcond[5]=(((x12628*x12643))+(((-1.0)*x12625*x12626))+((sj2*x12632))+(((-1.0)*cj3*r00*x12624*x12635))+((r00*x12637))+(((-1.0)*cj3*r02*x12642))+((gconst11*x12633)));
evalcond[6]=(((r11*x12634))+(((-1.0)*x12624*x12627*x12635))+((sj2*x12638))+(((-1.0)*cj3*r12*x12642))+((x12636*x12643))+((r10*x12637))+(((-1.0)*cj1*sj0*x12626)));
evalcond[7]=((((-1.0)*r00*x12634*x12641))+((x12633*x12643))+(((-1.0)*x12628*x12635))+((sj2*x12625))+((cj2*x12632))+(((-1.0)*cj3*r00*x12629))+(((-1.0)*r02*sj3*x12642)));
evalcond[8]=((((-1.0)*r12*sj3*x12642))+((sj0*x12631))+((cj2*x12638))+(((-1.0)*x12627*x12629))+((r11*x12624*x12637))+(((-1.0)*r10*x12634*x12641))+(((-1.0)*x12635*x12636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12645=((1.0)*gconst10);
CheckValue<IkReal> x12646 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst11*r20*sj0))+(((-1.0)*r21*sj0*x12645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12646.valid){
continue;
}
CheckValue<IkReal> x12647=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r11))+(((-1.0)*r10*x12645)))),-1);
if(!x12647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12646.value)+(((1.5707963267949)*(x12647.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12648=IKsin(j4);
IkReal x12649=IKcos(j4);
IkReal x12650=(cj0*cj1);
IkReal x12651=((1.0)*cj2);
IkReal x12652=(cj3*r10);
IkReal x12653=(cj3*r01);
IkReal x12654=((1.0)*gconst10);
IkReal x12655=(r21*sj3);
IkReal x12656=(cj1*sj2);
IkReal x12657=(cj0*sj1);
IkReal x12658=(r01*sj3);
IkReal x12659=(gconst11*sj3);
IkReal x12660=((1.0)*gconst11);
IkReal x12661=(cj3*r11);
IkReal x12662=(gconst10*sj3);
IkReal x12663=(sj0*sj1);
IkReal x12664=(cj3*r21);
IkReal x12665=(cj3*gconst11);
IkReal x12666=((1.0)*x12649);
IkReal x12667=((1.0)*x12648);
IkReal x12668=(gconst10*x12649);
IkReal x12669=(gconst11*x12648);
evalcond[0]=((((-1.0)*r22*x12666))+(((-1.0)*r21*x12648*x12654))+((r20*x12669)));
evalcond[1]=(sj0+(((-1.0)*r02*x12666))+(((-1.0)*r01*x12648*x12654))+((r00*x12669)));
evalcond[2]=(((r10*x12669))+(((-1.0)*r11*x12648*x12654))+(((-1.0)*r12*x12666))+(((-1.0)*cj0)));
evalcond[3]=(((x12664*x12668))+(((-1.0)*cj3*r20*x12649*x12660))+((gconst11*x12655))+(((-1.0)*sj1*x12651))+(((-1.0)*x12656))+((r20*x12662))+(((-1.0)*cj3*r22*x12667)));
evalcond[4]=((((-1.0)*cj3*r20*x12654))+((x12655*x12668))+(((-1.0)*cj1*x12651))+(((-1.0)*r22*sj3*x12667))+((sj1*sj2))+(((-1.0)*x12660*x12664))+(((-1.0)*r20*x12659*x12666)));
evalcond[5]=((((-1.0)*cj3*r00*x12649*x12660))+((gconst11*x12658))+(((-1.0)*x12650*x12651))+(((-1.0)*cj3*r02*x12667))+((sj2*x12657))+((r00*x12662))+((x12653*x12668)));
evalcond[6]=(((r10*x12662))+((r11*x12659))+((x12661*x12668))+(((-1.0)*cj1*sj0*x12651))+(((-1.0)*cj3*r12*x12667))+(((-1.0)*x12649*x12652*x12660))+((sj2*x12663)));
evalcond[7]=(((cj2*x12657))+(((-1.0)*r02*sj3*x12667))+((x12658*x12668))+(((-1.0)*r00*x12659*x12666))+(((-1.0)*cj3*r00*x12654))+(((-1.0)*x12653*x12660))+((sj2*x12650)));
evalcond[8]=((((-1.0)*x12652*x12654))+(((-1.0)*r10*x12659*x12666))+((cj2*x12663))+((sj0*x12656))+(((-1.0)*x12660*x12661))+(((-1.0)*r12*sj3*x12667))+((r11*x12649*x12662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12670=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12670;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x12670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12671=((1.0)*sj5);
IkReal x12672=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12671)));
j4eval[0]=x12672;
j4eval[1]=IKsign(x12672);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x12671)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12673=cj5*cj5;
IkReal x12674=(cj3*r00);
IkReal x12675=(cj3*r01);
IkReal x12676=((1.0)*cj5*sj5);
IkReal x12677=((((-1.0)*r20*x12675*x12676))+((r21*x12675))+((r20*x12673*x12674))+(((-1.0)*r21*x12673*x12675))+(((-1.0)*r21*x12674*x12676))+((cj3*r02*r22)));
j4eval[0]=x12677;
j4eval[1]=IKsign(x12677);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12678=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12678;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x12678);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12679=((1.0)*sj5);
IkReal x12680=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12679)));
j4eval[0]=x12680;
j4eval[1]=IKsign(x12680);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x12679)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12681=cj5*cj5;
IkReal x12682=r01*r01;
IkReal x12683=(cj5*r00);
IkReal x12684=(r01*sj5);
IkReal x12685=((((-2.0)*x12683*x12684))+((x12681*(r00*r00)))+(((-1.0)*x12681*x12682))+x12682+(r02*r02));
j4eval[0]=x12685;
j4eval[1]=((IKabs(r02))+(IKabs((x12684+(((-1.0)*x12683))))));
j4eval[2]=IKsign(x12685);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12686=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12686);
rxp0_2=(py*r00);
rxp1_0=(r21*x12686);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12687=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12687);
rxp0_2=(py*r00);
rxp1_0=(r21*x12687);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12688=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12688.valid){
continue;
}
CheckValue<IkReal> x12689=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12689.valid){
continue;
}
if( IKabs(((-1.0)*(x12688.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12689.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12688.value)))+IKsqr(((x12689.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12688.value)), ((x12689.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12690=IKsin(j4);
IkReal x12691=IKcos(j4);
IkReal x12692=(r01*sj5);
IkReal x12693=(r21*sj5);
IkReal x12694=((1.0)*x12690);
IkReal x12695=(cj5*x12690);
IkReal x12696=((1.0)*cj5*x12691);
evalcond[0]=((-1.0)*r12*x12691);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r12*x12694))+((cj1*sj2)));
evalcond[2]=((((-1.0)*x12693*x12694))+((r20*x12695)));
evalcond[3]=((((-1.0)*r00*x12696))+((x12691*x12692)));
evalcond[4]=((1.0)+((r00*x12695))+(((-1.0)*x12692*x12694)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12691*x12693))+(((-1.0)*r20*x12696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12697=IKPowWithIntegerCheck(r12,-1);
if(!x12697.valid){
continue;
}
CheckValue<IkReal> x12698=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12698.valid){
continue;
}
if( IKabs(((x12697.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12698.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12697.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12698.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12697.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12698.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12699=IKsin(j4);
IkReal x12700=IKcos(j4);
IkReal x12701=(r01*sj5);
IkReal x12702=(r21*sj5);
IkReal x12703=((1.0)*x12699);
IkReal x12704=(cj5*x12699);
IkReal x12705=((1.0)*cj5*x12700);
evalcond[0]=((-1.0)*r12*x12700);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12703)));
evalcond[2]=((((-1.0)*x12702*x12703))+((r20*x12704)));
evalcond[3]=(((x12700*x12701))+(((-1.0)*r00*x12705)));
evalcond[4]=((1.0)+(((-1.0)*x12701*x12703))+((r00*x12704)));
evalcond[5]=(((x12700*x12702))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x12705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12706=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12706);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12706);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12707=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12707);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12707);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12708=((1.0)*cj2);
CheckValue<IkReal> x12709=IKPowWithIntegerCheck(r22,-1);
if(!x12709.valid){
continue;
}
CheckValue<IkReal> x12710=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12710.valid){
continue;
}
if( IKabs(((x12709.value)*((((sj1*sj2))+(((-1.0)*cj1*x12708)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12710.value)*(((((-1.0)*sj1*x12708))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12709.value)*((((sj1*sj2))+(((-1.0)*cj1*x12708))))))+IKsqr(((x12710.value)*(((((-1.0)*sj1*x12708))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12709.value)*((((sj1*sj2))+(((-1.0)*cj1*x12708))))), ((x12710.value)*(((((-1.0)*sj1*x12708))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12711=IKsin(j4);
IkReal x12712=IKcos(j4);
IkReal x12713=(sj5*x12712);
IkReal x12714=(cj5*x12711);
IkReal x12715=((1.0)*sj5*x12711);
IkReal x12716=((1.0)*cj5*x12712);
evalcond[0]=((-1.0)*r22*x12712);
evalcond[1]=(((r10*x12714))+(((-1.0)*r11*x12715)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12711)));
evalcond[3]=((((-1.0)*r00*x12716))+((r01*x12713)));
evalcond[4]=((1.0)+((r00*x12714))+(((-1.0)*r01*x12715)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r10*x12716))+((cj1*sj2))+((r11*x12713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12717=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12717.valid){
continue;
}
CheckValue<IkReal> x12718=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12718.valid){
continue;
}
if( IKabs(((-1.0)*(x12717.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12718.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12717.value)))+IKsqr(((x12718.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12717.value)), ((x12718.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12719=IKsin(j4);
IkReal x12720=IKcos(j4);
IkReal x12721=(sj5*x12720);
IkReal x12722=(cj5*x12719);
IkReal x12723=((1.0)*sj5*x12719);
IkReal x12724=((1.0)*cj5*x12720);
evalcond[0]=((-1.0)*r22*x12720);
evalcond[1]=(((r10*x12722))+(((-1.0)*r11*x12723)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12719)));
evalcond[3]=((((-1.0)*r00*x12724))+((r01*x12721)));
evalcond[4]=((1.0)+(((-1.0)*r01*x12723))+((r00*x12722)));
evalcond[5]=(((cj2*sj1))+((r11*x12721))+((cj1*sj2))+(((-1.0)*r10*x12724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12725=cj5*cj5;
IkReal x12726=r01*r01;
IkReal x12727=(r01*sj5);
IkReal x12728=(cj5*r00);
CheckValue<IkReal> x12729=IKPowWithIntegerCheck(IKsign((((x12725*(r00*r00)))+(((-1.0)*x12725*x12726))+x12726+(((-2.0)*x12727*x12728))+(r02*r02))),-1);
if(!x12729.valid){
continue;
}
CheckValue<IkReal> x12730 = IKatan2WithCheck(IkReal(((((-1.0)*x12728))+x12727)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12729.value)))+(x12730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12731=IKsin(j4);
IkReal x12732=IKcos(j4);
IkReal x12733=(cj5*r00);
IkReal x12734=(cj5*r20);
IkReal x12735=(cj5*r10);
IkReal x12736=((1.0)*x12732);
IkReal x12737=(sj5*x12732);
IkReal x12738=((1.0)*x12731);
IkReal x12739=(sj5*x12738);
evalcond[0]=((((-1.0)*r22*x12736))+((x12731*x12734))+(((-1.0)*r21*x12739)));
evalcond[1]=(((x12731*x12735))+(((-1.0)*r12*x12736))+(((-1.0)*r11*x12739)));
evalcond[2]=((((-1.0)*r02*x12738))+((r01*x12737))+(((-1.0)*x12733*x12736)));
evalcond[3]=((1.0)+(((-1.0)*r01*x12739))+(((-1.0)*r02*x12736))+((x12731*x12733)));
evalcond[4]=(((cj2*sj1))+((r11*x12737))+((cj1*sj2))+(((-1.0)*x12735*x12736))+(((-1.0)*r12*x12738)));
evalcond[5]=(((r21*x12737))+(((-1.0)*r22*x12738))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12734*x12736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12740=((1.0)*sj5);
CheckValue<IkReal> x12741 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x12740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12741.valid){
continue;
}
CheckValue<IkReal> x12742=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12740)))),-1);
if(!x12742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12741.value)+(((1.5707963267949)*(x12742.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12743=IKsin(j4);
IkReal x12744=IKcos(j4);
IkReal x12745=(cj5*r00);
IkReal x12746=(cj5*r20);
IkReal x12747=(cj5*r10);
IkReal x12748=((1.0)*x12744);
IkReal x12749=(sj5*x12744);
IkReal x12750=((1.0)*x12743);
IkReal x12751=(sj5*x12750);
evalcond[0]=(((x12743*x12746))+(((-1.0)*r22*x12748))+(((-1.0)*r21*x12751)));
evalcond[1]=(((x12743*x12747))+(((-1.0)*r12*x12748))+(((-1.0)*r11*x12751)));
evalcond[2]=((((-1.0)*r02*x12750))+(((-1.0)*x12745*x12748))+((r01*x12749)));
evalcond[3]=((1.0)+((x12743*x12745))+(((-1.0)*r02*x12748))+(((-1.0)*r01*x12751)));
evalcond[4]=(((cj2*sj1))+((r11*x12749))+((cj1*sj2))+(((-1.0)*r12*x12750))+(((-1.0)*x12747*x12748)));
evalcond[5]=((((-1.0)*r22*x12750))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12746*x12748))+((r21*x12749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12752 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12752.valid){
continue;
}
CheckValue<IkReal> x12753=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12752.value)+(((1.5707963267949)*(x12753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12754=IKsin(j4);
IkReal x12755=IKcos(j4);
IkReal x12756=(cj5*r00);
IkReal x12757=(cj5*r20);
IkReal x12758=(cj5*r10);
IkReal x12759=((1.0)*x12755);
IkReal x12760=(sj5*x12755);
IkReal x12761=((1.0)*x12754);
IkReal x12762=(sj5*x12761);
evalcond[0]=(((x12754*x12757))+(((-1.0)*r21*x12762))+(((-1.0)*r22*x12759)));
evalcond[1]=(((x12754*x12758))+(((-1.0)*r11*x12762))+(((-1.0)*r12*x12759)));
evalcond[2]=((((-1.0)*r02*x12761))+(((-1.0)*x12756*x12759))+((r01*x12760)));
evalcond[3]=((1.0)+(((-1.0)*r01*x12762))+((x12754*x12756))+(((-1.0)*r02*x12759)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x12761))+((cj1*sj2))+(((-1.0)*x12758*x12759))+((r11*x12760)));
evalcond[5]=(((r21*x12760))+(((-1.0)*r22*x12761))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12757*x12759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12763=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12763;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x12763);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12764=((1.0)*sj5);
IkReal x12765=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12764)));
j4eval[0]=x12765;
j4eval[1]=IKsign(x12765);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x12764)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12766=(cj1*sj2);
IkReal x12767=(cj5*r00);
IkReal x12768=((1.0)*r02);
IkReal x12769=(cj2*sj1);
IkReal x12770=((1.0)*r01*sj5);
IkReal x12771=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12771;
j4eval[1]=((IKabs(((((-1.0)*x12766*x12768))+(((-1.0)*x12768*x12769)))))+(IKabs((((x12767*x12769))+(((-1.0)*x12769*x12770))+(((-1.0)*x12766*x12770))+((x12766*x12767))))));
j4eval[2]=IKsign(x12771);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12772=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12772);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12772);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12773=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12773);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12773);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12774=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x12774))+((cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x12774)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12775=((1.0)*sj5);
CheckValue<IkReal> x12776=IKPowWithIntegerCheck(((((-1.0)*r01*x12775))+((cj5*r00))),-1);
if(!x12776.valid){
continue;
}
CheckValue<IkReal> x12777=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x12775))),-1);
if(!x12777.valid){
continue;
}
if( IKabs(((-1.0)*(x12776.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12777.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12776.value)))+IKsqr(((x12777.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12776.value)), ((x12777.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12778=IKsin(j4);
IkReal x12779=IKcos(j4);
IkReal x12780=(cj5*r00);
IkReal x12781=(cj5*r10);
IkReal x12782=((1.0)*sj5*x12778);
IkReal x12783=((1.0)*sj5*x12779);
evalcond[0]=((-1.0)*r22*x12779);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12778)));
evalcond[2]=(((x12778*x12781))+(((-1.0)*r11*x12782)));
evalcond[3]=((((-1.0)*r01*x12783))+((x12779*x12780)));
evalcond[4]=((1.0)+((x12778*x12780))+(((-1.0)*r01*x12782)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x12783))+((x12779*x12781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12784=((1.0)*sj1);
CheckValue<IkReal> x12785=IKPowWithIntegerCheck(r22,-1);
if(!x12785.valid){
continue;
}
CheckValue<IkReal> x12786=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12786.valid){
continue;
}
if( IKabs(((x12785.value)*((((cj1*cj2))+(((-1.0)*sj2*x12784)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12786.value)*(((((-1.0)*cj2*x12784))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12785.value)*((((cj1*cj2))+(((-1.0)*sj2*x12784))))))+IKsqr(((x12786.value)*(((((-1.0)*cj2*x12784))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12785.value)*((((cj1*cj2))+(((-1.0)*sj2*x12784))))), ((x12786.value)*(((((-1.0)*cj2*x12784))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12787=IKsin(j4);
IkReal x12788=IKcos(j4);
IkReal x12789=(cj5*r00);
IkReal x12790=(cj5*r10);
IkReal x12791=((1.0)*sj5*x12787);
IkReal x12792=((1.0)*sj5*x12788);
evalcond[0]=((-1.0)*r22*x12788);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12787)));
evalcond[2]=((((-1.0)*r11*x12791))+((x12787*x12790)));
evalcond[3]=(((x12788*x12789))+(((-1.0)*r01*x12792)));
evalcond[4]=((1.0)+((x12787*x12789))+(((-1.0)*r01*x12791)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x12792))+((x12788*x12790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12793=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12793;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x12793);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12794=((1.0)*sj5);
IkReal x12795=((((-1.0)*r00*x12794))+(((-1.0)*cj5*r01)));
j4eval[0]=x12795;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x12794))))));
j4eval[2]=IKsign(x12795);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12796=cj5*cj5;
IkReal x12797=r01*r01;
IkReal x12798=(r01*sj5);
IkReal x12799=(cj5*r00);
IkReal x12800=((((-1.0)*x12796*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x12797))+((x12796*x12797))+(((2.0)*x12798*x12799)));
j4eval[0]=x12800;
j4eval[1]=IKsign(x12800);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12798))+x12799))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12801=cj5*cj5;
IkReal x12802=r01*r01;
IkReal x12803=(r01*sj5);
IkReal x12804=(cj5*r00);
CheckValue<IkReal> x12805 = IKatan2WithCheck(IkReal((x12804+(((-1.0)*x12803)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12805.valid){
continue;
}
CheckValue<IkReal> x12806=IKPowWithIntegerCheck(IKsign((((x12801*x12802))+(((-1.0)*(r02*r02)))+(((2.0)*x12803*x12804))+(((-1.0)*x12802))+(((-1.0)*x12801*(r00*r00))))),-1);
if(!x12806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12805.value)+(((1.5707963267949)*(x12806.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12807=IKcos(j4);
IkReal x12808=IKsin(j4);
IkReal x12809=(r11*sj5);
IkReal x12810=(cj5*r20);
IkReal x12811=(r21*sj5);
IkReal x12812=(r01*sj5);
IkReal x12813=((1.0)*x12807);
IkReal x12814=((1.0)*x12808);
IkReal x12815=(cj5*x12808);
IkReal x12816=(cj5*x12807);
evalcond[0]=(((r02*x12808))+(((-1.0)*x12812*x12813))+((r00*x12816)));
evalcond[1]=((((-1.0)*x12809*x12813))+((r12*x12808))+((r10*x12816)));
evalcond[2]=((((-1.0)*x12811*x12814))+((x12808*x12810))+(((-1.0)*r22*x12813)));
evalcond[3]=((((-1.0)*x12809*x12814))+(((-1.0)*r12*x12813))+((r10*x12815)));
evalcond[4]=((-1.0)+((x12807*x12810))+(((-1.0)*x12811*x12813))+((r22*x12808)));
evalcond[5]=((1.0)+(((-1.0)*x12812*x12814))+(((-1.0)*r02*x12813))+((r00*x12815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12817=((1.0)*sj5);
CheckValue<IkReal> x12818 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x12817)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12818.valid){
continue;
}
CheckValue<IkReal> x12819=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12817))+(((-1.0)*cj5*r01)))),-1);
if(!x12819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12818.value)+(((1.5707963267949)*(x12819.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12820=IKcos(j4);
IkReal x12821=IKsin(j4);
IkReal x12822=(r11*sj5);
IkReal x12823=(cj5*r20);
IkReal x12824=(r21*sj5);
IkReal x12825=(r01*sj5);
IkReal x12826=((1.0)*x12820);
IkReal x12827=((1.0)*x12821);
IkReal x12828=(cj5*x12821);
IkReal x12829=(cj5*x12820);
evalcond[0]=((((-1.0)*x12825*x12826))+((r00*x12829))+((r02*x12821)));
evalcond[1]=(((r10*x12829))+(((-1.0)*x12822*x12826))+((r12*x12821)));
evalcond[2]=((((-1.0)*x12824*x12827))+(((-1.0)*r22*x12826))+((x12821*x12823)));
evalcond[3]=(((r10*x12828))+(((-1.0)*x12822*x12827))+(((-1.0)*r12*x12826)));
evalcond[4]=((-1.0)+(((-1.0)*x12824*x12826))+((r22*x12821))+((x12820*x12823)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12826))+(((-1.0)*x12825*x12827))+((r00*x12828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12830 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12830.valid){
continue;
}
CheckValue<IkReal> x12831=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12830.value)+(((1.5707963267949)*(x12831.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12832=IKcos(j4);
IkReal x12833=IKsin(j4);
IkReal x12834=(r11*sj5);
IkReal x12835=(cj5*r20);
IkReal x12836=(r21*sj5);
IkReal x12837=(r01*sj5);
IkReal x12838=((1.0)*x12832);
IkReal x12839=((1.0)*x12833);
IkReal x12840=(cj5*x12833);
IkReal x12841=(cj5*x12832);
evalcond[0]=((((-1.0)*x12837*x12838))+((r00*x12841))+((r02*x12833)));
evalcond[1]=(((r12*x12833))+((r10*x12841))+(((-1.0)*x12834*x12838)));
evalcond[2]=((((-1.0)*x12836*x12839))+(((-1.0)*r22*x12838))+((x12833*x12835)));
evalcond[3]=(((r10*x12840))+(((-1.0)*r12*x12838))+(((-1.0)*x12834*x12839)));
evalcond[4]=((-1.0)+((r22*x12833))+(((-1.0)*x12836*x12838))+((x12832*x12835)));
evalcond[5]=((1.0)+(((-1.0)*x12837*x12839))+((r00*x12840))+(((-1.0)*r02*x12838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12842=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12842;
j4eval[1]=IKsign(x12842);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12843=((1.0)*sj5);
IkReal x12844=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12843)));
j4eval[0]=x12844;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x12843))+((cj5*r00))))));
j4eval[2]=IKsign(x12844);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12845=cj5*cj5;
IkReal x12846=r01*r01;
IkReal x12847=(r01*sj5);
IkReal x12848=(cj5*r00);
IkReal x12849=((((-1.0)*x12845*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x12846))+(((2.0)*x12847*x12848))+((x12845*x12846)));
j4eval[0]=x12849;
j4eval[1]=IKsign(x12849);
j4eval[2]=((IKabs(r02))+(IKabs((x12848+(((-1.0)*x12847))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12850=cj5*cj5;
IkReal x12851=r01*r01;
IkReal x12852=(r01*sj5);
IkReal x12853=(cj5*r00);
CheckValue<IkReal> x12854=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x12850*(r00*r00)))+(((-1.0)*x12851))+(((2.0)*x12852*x12853))+((x12850*x12851)))),-1);
if(!x12854.valid){
continue;
}
CheckValue<IkReal> x12855 = IKatan2WithCheck(IkReal((x12853+(((-1.0)*x12852)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12854.value)))+(x12855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12856=IKcos(j4);
IkReal x12857=IKsin(j4);
IkReal x12858=(r11*sj5);
IkReal x12859=(cj5*r20);
IkReal x12860=(r21*sj5);
IkReal x12861=(r01*sj5);
IkReal x12862=((1.0)*x12856);
IkReal x12863=((1.0)*x12857);
IkReal x12864=(cj5*x12857);
IkReal x12865=(cj5*x12856);
evalcond[0]=((((-1.0)*x12861*x12862))+((r02*x12857))+((r00*x12865)));
evalcond[1]=((((-1.0)*x12858*x12862))+((r12*x12857))+((r10*x12865)));
evalcond[2]=(((x12857*x12859))+(((-1.0)*x12860*x12863))+(((-1.0)*r22*x12862)));
evalcond[3]=((((-1.0)*x12858*x12863))+(((-1.0)*r12*x12862))+((r10*x12864)));
evalcond[4]=((1.0)+((r22*x12857))+((x12856*x12859))+(((-1.0)*x12860*x12862)));
evalcond[5]=((1.0)+(((-1.0)*x12861*x12863))+(((-1.0)*r02*x12862))+((r00*x12864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12866=((1.0)*sj5);
CheckValue<IkReal> x12867 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12866))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12867.valid){
continue;
}
CheckValue<IkReal> x12868=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12866)))),-1);
if(!x12868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12867.value)+(((1.5707963267949)*(x12868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12869=IKcos(j4);
IkReal x12870=IKsin(j4);
IkReal x12871=(r11*sj5);
IkReal x12872=(cj5*r20);
IkReal x12873=(r21*sj5);
IkReal x12874=(r01*sj5);
IkReal x12875=((1.0)*x12869);
IkReal x12876=((1.0)*x12870);
IkReal x12877=(cj5*x12870);
IkReal x12878=(cj5*x12869);
evalcond[0]=(((r00*x12878))+((r02*x12870))+(((-1.0)*x12874*x12875)));
evalcond[1]=((((-1.0)*x12871*x12875))+((r10*x12878))+((r12*x12870)));
evalcond[2]=((((-1.0)*r22*x12875))+((x12870*x12872))+(((-1.0)*x12873*x12876)));
evalcond[3]=((((-1.0)*x12871*x12876))+(((-1.0)*r12*x12875))+((r10*x12877)));
evalcond[4]=((1.0)+((r22*x12870))+((x12869*x12872))+(((-1.0)*x12873*x12875)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12875))+((r00*x12877))+(((-1.0)*x12874*x12876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12879 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12879.valid){
continue;
}
CheckValue<IkReal> x12880=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12879.value)+(((1.5707963267949)*(x12880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12881=IKcos(j4);
IkReal x12882=IKsin(j4);
IkReal x12883=(r11*sj5);
IkReal x12884=(cj5*r20);
IkReal x12885=(r21*sj5);
IkReal x12886=(r01*sj5);
IkReal x12887=((1.0)*x12881);
IkReal x12888=((1.0)*x12882);
IkReal x12889=(cj5*x12882);
IkReal x12890=(cj5*x12881);
evalcond[0]=((((-1.0)*x12886*x12887))+((r00*x12890))+((r02*x12882)));
evalcond[1]=((((-1.0)*x12883*x12887))+((r10*x12890))+((r12*x12882)));
evalcond[2]=((((-1.0)*r22*x12887))+(((-1.0)*x12885*x12888))+((x12882*x12884)));
evalcond[3]=((((-1.0)*r12*x12887))+(((-1.0)*x12883*x12888))+((r10*x12889)));
evalcond[4]=((1.0)+(((-1.0)*x12885*x12887))+((r22*x12882))+((x12881*x12884)));
evalcond[5]=((1.0)+(((-1.0)*x12886*x12888))+(((-1.0)*r02*x12887))+((r00*x12889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12891=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12891;
j4eval[1]=IKsign(x12891);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12892=((1.0)*sj5);
IkReal x12893=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12892)));
j4eval[0]=x12893;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x12892))+((cj5*r00))))));
j4eval[2]=IKsign(x12893);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12894=cj5*cj5;
IkReal x12895=r01*r01;
IkReal x12896=(r01*sj5);
IkReal x12897=(cj5*r00);
IkReal x12898=((((-1.0)*x12895))+(((-1.0)*(r02*r02)))+((x12894*x12895))+(((-1.0)*x12894*(r00*r00)))+(((2.0)*x12896*x12897)));
j4eval[0]=x12898;
j4eval[1]=IKsign(x12898);
j4eval[2]=((IKabs(((((-1.0)*x12896))+x12897)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12899=cj5*cj5;
IkReal x12900=r01*r01;
IkReal x12901=(r01*sj5);
IkReal x12902=(cj5*r00);
CheckValue<IkReal> x12903 = IKatan2WithCheck(IkReal((x12902+(((-1.0)*x12901)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12903.valid){
continue;
}
CheckValue<IkReal> x12904=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12900))+(((-1.0)*(r02*r02)))+((x12899*x12900))+(((2.0)*x12901*x12902))+(((-1.0)*x12899*(r00*r00))))),-1);
if(!x12904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12903.value)+(((1.5707963267949)*(x12904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12905=IKcos(j4);
IkReal x12906=IKsin(j4);
IkReal x12907=(r11*sj5);
IkReal x12908=(cj5*r20);
IkReal x12909=(r21*sj5);
IkReal x12910=(r01*sj5);
IkReal x12911=((1.0)*x12905);
IkReal x12912=((1.0)*x12906);
IkReal x12913=(cj5*x12906);
IkReal x12914=(cj5*x12905);
evalcond[0]=((((-1.0)*x12910*x12911))+((r00*x12914))+((r02*x12906)));
evalcond[1]=(((r12*x12906))+(((-1.0)*x12907*x12911))+((r10*x12914)));
evalcond[2]=((((-1.0)*x12909*x12912))+(((-1.0)*r22*x12911))+((x12906*x12908)));
evalcond[3]=((((-1.0)*x12907*x12912))+(((-1.0)*r12*x12911))+((r10*x12913)));
evalcond[4]=((1.0)+(((-1.0)*x12909*x12911))+((x12905*x12908))+((r22*x12906)));
evalcond[5]=((1.0)+(((-1.0)*x12910*x12912))+((r00*x12913))+(((-1.0)*r02*x12911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12915=((1.0)*sj5);
CheckValue<IkReal> x12916 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12915))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12916.valid){
continue;
}
CheckValue<IkReal> x12917=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12915)))),-1);
if(!x12917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12916.value)+(((1.5707963267949)*(x12917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12918=IKcos(j4);
IkReal x12919=IKsin(j4);
IkReal x12920=(r11*sj5);
IkReal x12921=(cj5*r20);
IkReal x12922=(r21*sj5);
IkReal x12923=(r01*sj5);
IkReal x12924=((1.0)*x12918);
IkReal x12925=((1.0)*x12919);
IkReal x12926=(cj5*x12919);
IkReal x12927=(cj5*x12918);
evalcond[0]=(((r02*x12919))+((r00*x12927))+(((-1.0)*x12923*x12924)));
evalcond[1]=(((r10*x12927))+((r12*x12919))+(((-1.0)*x12920*x12924)));
evalcond[2]=(((x12919*x12921))+(((-1.0)*x12922*x12925))+(((-1.0)*r22*x12924)));
evalcond[3]=((((-1.0)*r12*x12924))+((r10*x12926))+(((-1.0)*x12920*x12925)));
evalcond[4]=((1.0)+((x12918*x12921))+(((-1.0)*x12922*x12924))+((r22*x12919)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12924))+((r00*x12926))+(((-1.0)*x12923*x12925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12928 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12928.valid){
continue;
}
CheckValue<IkReal> x12929=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12928.value)+(((1.5707963267949)*(x12929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12930=IKcos(j4);
IkReal x12931=IKsin(j4);
IkReal x12932=(r11*sj5);
IkReal x12933=(cj5*r20);
IkReal x12934=(r21*sj5);
IkReal x12935=(r01*sj5);
IkReal x12936=((1.0)*x12930);
IkReal x12937=((1.0)*x12931);
IkReal x12938=(cj5*x12931);
IkReal x12939=(cj5*x12930);
evalcond[0]=(((r02*x12931))+(((-1.0)*x12935*x12936))+((r00*x12939)));
evalcond[1]=(((r12*x12931))+((r10*x12939))+(((-1.0)*x12932*x12936)));
evalcond[2]=(((x12931*x12933))+(((-1.0)*r22*x12936))+(((-1.0)*x12934*x12937)));
evalcond[3]=((((-1.0)*r12*x12936))+((r10*x12938))+(((-1.0)*x12932*x12937)));
evalcond[4]=((1.0)+((x12930*x12933))+((r22*x12931))+(((-1.0)*x12934*x12936)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12936))+(((-1.0)*x12935*x12937))+((r00*x12938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12940=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12940;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x12940);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12941=((1.0)*sj5);
IkReal x12942=((((-1.0)*r00*x12941))+(((-1.0)*cj5*r01)));
j4eval[0]=x12942;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r11*x12941))+((cj5*r10))))));
j4eval[2]=IKsign(x12942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12943=cj5*cj5;
IkReal x12944=r01*r01;
IkReal x12945=(r01*sj5);
IkReal x12946=(cj5*r00);
IkReal x12947=((((-1.0)*x12943*(r00*r00)))+((x12943*x12944))+(((-1.0)*(r02*r02)))+(((2.0)*x12945*x12946))+(((-1.0)*x12944)));
j4eval[0]=x12947;
j4eval[1]=IKsign(x12947);
j4eval[2]=((IKabs((x12946+(((-1.0)*x12945)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12948=cj5*cj5;
IkReal x12949=r01*r01;
IkReal x12950=(r01*sj5);
IkReal x12951=(cj5*r00);
CheckValue<IkReal> x12952=IKPowWithIntegerCheck(IKsign(((((2.0)*x12950*x12951))+(((-1.0)*x12948*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x12949))+((x12948*x12949)))),-1);
if(!x12952.valid){
continue;
}
CheckValue<IkReal> x12953 = IKatan2WithCheck(IkReal((x12951+(((-1.0)*x12950)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12952.value)))+(x12953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12954=IKcos(j4);
IkReal x12955=IKsin(j4);
IkReal x12956=(r11*sj5);
IkReal x12957=(cj5*r20);
IkReal x12958=(r21*sj5);
IkReal x12959=(r01*sj5);
IkReal x12960=((1.0)*x12954);
IkReal x12961=((1.0)*x12955);
IkReal x12962=(cj5*x12955);
IkReal x12963=(cj5*x12954);
evalcond[0]=(((r00*x12963))+(((-1.0)*x12959*x12960))+((r02*x12955)));
evalcond[1]=(((r12*x12955))+(((-1.0)*x12956*x12960))+((r10*x12963)));
evalcond[2]=((((-1.0)*x12958*x12961))+((x12955*x12957))+(((-1.0)*r22*x12960)));
evalcond[3]=((((-1.0)*r12*x12960))+(((-1.0)*x12956*x12961))+((r10*x12962)));
evalcond[4]=((-1.0)+(((-1.0)*x12958*x12960))+((r22*x12955))+((x12954*x12957)));
evalcond[5]=((1.0)+((r00*x12962))+(((-1.0)*x12959*x12961))+(((-1.0)*r02*x12960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12964=((1.0)*sj5);
CheckValue<IkReal> x12965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12964))+(((-1.0)*cj5*r01)))),-1);
if(!x12965.valid){
continue;
}
CheckValue<IkReal> x12966 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x12964)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12965.value)))+(x12966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12967=IKcos(j4);
IkReal x12968=IKsin(j4);
IkReal x12969=(r11*sj5);
IkReal x12970=(cj5*r20);
IkReal x12971=(r21*sj5);
IkReal x12972=(r01*sj5);
IkReal x12973=((1.0)*x12967);
IkReal x12974=((1.0)*x12968);
IkReal x12975=(cj5*x12968);
IkReal x12976=(cj5*x12967);
evalcond[0]=(((r00*x12976))+((r02*x12968))+(((-1.0)*x12972*x12973)));
evalcond[1]=(((r12*x12968))+(((-1.0)*x12969*x12973))+((r10*x12976)));
evalcond[2]=((((-1.0)*r22*x12973))+(((-1.0)*x12971*x12974))+((x12968*x12970)));
evalcond[3]=((((-1.0)*r12*x12973))+(((-1.0)*x12969*x12974))+((r10*x12975)));
evalcond[4]=((-1.0)+((x12967*x12970))+(((-1.0)*x12971*x12973))+((r22*x12968)));
evalcond[5]=((1.0)+((r00*x12975))+(((-1.0)*r02*x12973))+(((-1.0)*x12972*x12974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12977 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12977.valid){
continue;
}
CheckValue<IkReal> x12978=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12977.value)+(((1.5707963267949)*(x12978.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12979=IKcos(j4);
IkReal x12980=IKsin(j4);
IkReal x12981=(r11*sj5);
IkReal x12982=(cj5*r20);
IkReal x12983=(r21*sj5);
IkReal x12984=(r01*sj5);
IkReal x12985=((1.0)*x12979);
IkReal x12986=((1.0)*x12980);
IkReal x12987=(cj5*x12980);
IkReal x12988=(cj5*x12979);
evalcond[0]=(((r00*x12988))+(((-1.0)*x12984*x12985))+((r02*x12980)));
evalcond[1]=(((r10*x12988))+((r12*x12980))+(((-1.0)*x12981*x12985)));
evalcond[2]=((((-1.0)*x12983*x12986))+(((-1.0)*r22*x12985))+((x12980*x12982)));
evalcond[3]=(((r10*x12987))+(((-1.0)*r12*x12985))+(((-1.0)*x12981*x12986)));
evalcond[4]=((-1.0)+(((-1.0)*x12983*x12985))+((r22*x12980))+((x12979*x12982)));
evalcond[5]=((1.0)+((r00*x12987))+(((-1.0)*r02*x12985))+(((-1.0)*x12984*x12986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12989=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12989;
j4eval[1]=IKsign(x12989);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12990=((1.0)*sj5);
IkReal x12991=((((-1.0)*r10*x12990))+(((-1.0)*cj5*r11)));
j4eval[0]=x12991;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x12990))+((cj5*r00))))));
j4eval[2]=IKsign(x12991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12992=cj5*cj5;
IkReal x12993=r01*r01;
IkReal x12994=(r01*sj5);
IkReal x12995=(cj5*r00);
IkReal x12996=((((-1.0)*x12992*(r00*r00)))+(((-1.0)*(r02*r02)))+((x12992*x12993))+(((2.0)*x12994*x12995))+(((-1.0)*x12993)));
j4eval[0]=x12996;
j4eval[1]=IKsign(x12996);
j4eval[2]=((IKabs(r02))+(IKabs((x12995+(((-1.0)*x12994))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12997=cj5*cj5;
IkReal x12998=r01*r01;
IkReal x12999=(r01*sj5);
IkReal x13000=(cj5*r00);
CheckValue<IkReal> x13001=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x12999*x13000))+((x12997*x12998))+(((-1.0)*x12997*(r00*r00)))+(((-1.0)*x12998)))),-1);
if(!x13001.valid){
continue;
}
CheckValue<IkReal> x13002 = IKatan2WithCheck(IkReal((x13000+(((-1.0)*x12999)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13001.value)))+(x13002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13003=IKcos(j4);
IkReal x13004=IKsin(j4);
IkReal x13005=(r11*sj5);
IkReal x13006=(cj5*r20);
IkReal x13007=(r21*sj5);
IkReal x13008=(r01*sj5);
IkReal x13009=((1.0)*x13003);
IkReal x13010=((1.0)*x13004);
IkReal x13011=(cj5*x13004);
IkReal x13012=(cj5*x13003);
evalcond[0]=(((r00*x13012))+(((-1.0)*x13008*x13009))+((r02*x13004)));
evalcond[1]=((((-1.0)*x13005*x13009))+((r12*x13004))+((r10*x13012)));
evalcond[2]=((((-1.0)*r22*x13009))+((x13004*x13006))+(((-1.0)*x13007*x13010)));
evalcond[3]=((((-1.0)*x13005*x13010))+(((-1.0)*r12*x13009))+((r10*x13011)));
evalcond[4]=((1.0)+((x13003*x13006))+((r22*x13004))+(((-1.0)*x13007*x13009)));
evalcond[5]=((1.0)+((r00*x13011))+(((-1.0)*x13008*x13010))+(((-1.0)*r02*x13009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13013=((1.0)*sj5);
CheckValue<IkReal> x13014=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13013)))),-1);
if(!x13014.valid){
continue;
}
CheckValue<IkReal> x13015 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x13013))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13014.value)))+(x13015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13016=IKcos(j4);
IkReal x13017=IKsin(j4);
IkReal x13018=(r11*sj5);
IkReal x13019=(cj5*r20);
IkReal x13020=(r21*sj5);
IkReal x13021=(r01*sj5);
IkReal x13022=((1.0)*x13016);
IkReal x13023=((1.0)*x13017);
IkReal x13024=(cj5*x13017);
IkReal x13025=(cj5*x13016);
evalcond[0]=((((-1.0)*x13021*x13022))+((r00*x13025))+((r02*x13017)));
evalcond[1]=((((-1.0)*x13018*x13022))+((r12*x13017))+((r10*x13025)));
evalcond[2]=(((x13017*x13019))+(((-1.0)*r22*x13022))+(((-1.0)*x13020*x13023)));
evalcond[3]=((((-1.0)*x13018*x13023))+(((-1.0)*r12*x13022))+((r10*x13024)));
evalcond[4]=((1.0)+((x13016*x13019))+((r22*x13017))+(((-1.0)*x13020*x13022)));
evalcond[5]=((1.0)+(((-1.0)*x13021*x13023))+((r00*x13024))+(((-1.0)*r02*x13022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13026 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13026.valid){
continue;
}
CheckValue<IkReal> x13027=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13026.value)+(((1.5707963267949)*(x13027.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13028=IKcos(j4);
IkReal x13029=IKsin(j4);
IkReal x13030=(r11*sj5);
IkReal x13031=(cj5*r20);
IkReal x13032=(r21*sj5);
IkReal x13033=(r01*sj5);
IkReal x13034=((1.0)*x13028);
IkReal x13035=((1.0)*x13029);
IkReal x13036=(cj5*x13029);
IkReal x13037=(cj5*x13028);
evalcond[0]=((((-1.0)*x13033*x13034))+((r02*x13029))+((r00*x13037)));
evalcond[1]=((((-1.0)*x13030*x13034))+((r10*x13037))+((r12*x13029)));
evalcond[2]=(((x13029*x13031))+(((-1.0)*x13032*x13035))+(((-1.0)*r22*x13034)));
evalcond[3]=((((-1.0)*x13030*x13035))+(((-1.0)*r12*x13034))+((r10*x13036)));
evalcond[4]=((1.0)+((x13028*x13031))+(((-1.0)*x13032*x13034))+((r22*x13029)));
evalcond[5]=((1.0)+(((-1.0)*x13033*x13035))+(((-1.0)*r02*x13034))+((r00*x13036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13038=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13038;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x13038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13039=((1.0)*sj5);
IkReal x13040=((((-1.0)*r00*x13039))+(((-1.0)*cj5*r01)));
j4eval[0]=x13040;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x13039)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13041=cj5*cj5;
IkReal x13042=r01*r01;
IkReal x13043=(r01*sj5);
IkReal x13044=(cj5*r00);
IkReal x13045=((((-1.0)*x13042))+(((-1.0)*x13041*(r00*r00)))+((x13041*x13042))+(((-1.0)*(r02*r02)))+(((2.0)*x13043*x13044)));
j4eval[0]=x13045;
j4eval[1]=IKsign(x13045);
j4eval[2]=((IKabs(((((-1.0)*x13043))+x13044)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13046=cj5*cj5;
IkReal x13047=r01*r01;
IkReal x13048=(r01*sj5);
IkReal x13049=(cj5*r00);
CheckValue<IkReal> x13050=IKPowWithIntegerCheck(IKsign(((((2.0)*x13048*x13049))+(((-1.0)*x13047))+(((-1.0)*(r02*r02)))+((x13046*x13047))+(((-1.0)*x13046*(r00*r00))))),-1);
if(!x13050.valid){
continue;
}
CheckValue<IkReal> x13051 = IKatan2WithCheck(IkReal(((((-1.0)*x13048))+x13049)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13050.value)))+(x13051.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13052=IKcos(j4);
IkReal x13053=IKsin(j4);
IkReal x13054=(r11*sj5);
IkReal x13055=(cj5*r20);
IkReal x13056=(r21*sj5);
IkReal x13057=(r01*sj5);
IkReal x13058=((1.0)*x13052);
IkReal x13059=((1.0)*x13053);
IkReal x13060=(cj5*x13053);
IkReal x13061=(cj5*x13052);
evalcond[0]=((((-1.0)*x13057*x13058))+((r02*x13053))+((r00*x13061)));
evalcond[1]=(((r12*x13053))+(((-1.0)*x13054*x13058))+((r10*x13061)));
evalcond[2]=((((-1.0)*r22*x13058))+(((-1.0)*x13056*x13059))+((x13053*x13055)));
evalcond[3]=((((-1.0)*x13054*x13059))+(((-1.0)*r12*x13058))+((r10*x13060)));
evalcond[4]=((-1.0)+((r22*x13053))+(((-1.0)*x13056*x13058))+((x13052*x13055)));
evalcond[5]=((1.0)+(((-1.0)*x13057*x13059))+(((-1.0)*r02*x13058))+((r00*x13060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13062=((1.0)*sj5);
CheckValue<IkReal> x13063=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x13062))+(((-1.0)*cj5*r01)))),-1);
if(!x13063.valid){
continue;
}
CheckValue<IkReal> x13064 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x13062)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13063.value)))+(x13064.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13065=IKcos(j4);
IkReal x13066=IKsin(j4);
IkReal x13067=(r11*sj5);
IkReal x13068=(cj5*r20);
IkReal x13069=(r21*sj5);
IkReal x13070=(r01*sj5);
IkReal x13071=((1.0)*x13065);
IkReal x13072=((1.0)*x13066);
IkReal x13073=(cj5*x13066);
IkReal x13074=(cj5*x13065);
evalcond[0]=(((r02*x13066))+((r00*x13074))+(((-1.0)*x13070*x13071)));
evalcond[1]=(((r12*x13066))+(((-1.0)*x13067*x13071))+((r10*x13074)));
evalcond[2]=(((x13066*x13068))+(((-1.0)*x13069*x13072))+(((-1.0)*r22*x13071)));
evalcond[3]=((((-1.0)*r12*x13071))+(((-1.0)*x13067*x13072))+((r10*x13073)));
evalcond[4]=((-1.0)+(((-1.0)*x13069*x13071))+((x13065*x13068))+((r22*x13066)));
evalcond[5]=((1.0)+(((-1.0)*r02*x13071))+((r00*x13073))+(((-1.0)*x13070*x13072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13075 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13075.valid){
continue;
}
CheckValue<IkReal> x13076=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13075.value)+(((1.5707963267949)*(x13076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13077=IKcos(j4);
IkReal x13078=IKsin(j4);
IkReal x13079=(r11*sj5);
IkReal x13080=(cj5*r20);
IkReal x13081=(r21*sj5);
IkReal x13082=(r01*sj5);
IkReal x13083=((1.0)*x13077);
IkReal x13084=((1.0)*x13078);
IkReal x13085=(cj5*x13078);
IkReal x13086=(cj5*x13077);
evalcond[0]=((((-1.0)*x13082*x13083))+((r02*x13078))+((r00*x13086)));
evalcond[1]=(((r12*x13078))+(((-1.0)*x13079*x13083))+((r10*x13086)));
evalcond[2]=(((x13078*x13080))+(((-1.0)*x13081*x13084))+(((-1.0)*r22*x13083)));
evalcond[3]=((((-1.0)*x13079*x13084))+((r10*x13085))+(((-1.0)*r12*x13083)));
evalcond[4]=((-1.0)+(((-1.0)*x13081*x13083))+((x13077*x13080))+((r22*x13078)));
evalcond[5]=((1.0)+(((-1.0)*r02*x13083))+(((-1.0)*x13082*x13084))+((r00*x13085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x13087=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13087;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x13087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x13088=((1.0)*sj5);
IkReal x13089=((((-1.0)*r00*x13088))+(((-1.0)*cj5*r01)));
j4eval[0]=x13089;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x13088)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x13090=cj5*cj5;
IkReal x13091=r01*r01;
IkReal x13092=(r01*sj5);
IkReal x13093=(cj5*r00);
IkReal x13094=((((-1.0)*(r02*r02)))+(((-1.0)*x13090*(r00*r00)))+((x13090*x13091))+(((2.0)*x13092*x13093))+(((-1.0)*x13091)));
j4eval[0]=x13094;
j4eval[1]=IKsign(x13094);
j4eval[2]=((IKabs(r02))+(IKabs((x13093+(((-1.0)*x13092))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13095=cj5*cj5;
IkReal x13096=r01*r01;
IkReal x13097=(r01*sj5);
IkReal x13098=(cj5*r00);
CheckValue<IkReal> x13099 = IKatan2WithCheck(IkReal((x13098+(((-1.0)*x13097)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13099.valid){
continue;
}
CheckValue<IkReal> x13100=IKPowWithIntegerCheck(IKsign(((((2.0)*x13097*x13098))+(((-1.0)*(r02*r02)))+((x13095*x13096))+(((-1.0)*x13095*(r00*r00)))+(((-1.0)*x13096)))),-1);
if(!x13100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13099.value)+(((1.5707963267949)*(x13100.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13101=IKcos(j4);
IkReal x13102=IKsin(j4);
IkReal x13103=(r11*sj5);
IkReal x13104=(cj5*r20);
IkReal x13105=(r21*sj5);
IkReal x13106=(r01*sj5);
IkReal x13107=((1.0)*x13101);
IkReal x13108=((1.0)*x13102);
IkReal x13109=(cj5*x13102);
IkReal x13110=(cj5*x13101);
evalcond[0]=((((-1.0)*x13106*x13107))+((r02*x13102))+((r00*x13110)));
evalcond[1]=((((-1.0)*x13103*x13107))+((r10*x13110))+((r12*x13102)));
evalcond[2]=(((x13102*x13104))+(((-1.0)*x13105*x13108))+(((-1.0)*r22*x13107)));
evalcond[3]=((((-1.0)*x13103*x13108))+(((-1.0)*r12*x13107))+((r10*x13109)));
evalcond[4]=((-1.0)+((x13101*x13104))+((r22*x13102))+(((-1.0)*x13105*x13107)));
evalcond[5]=((1.0)+((r00*x13109))+(((-1.0)*x13106*x13108))+(((-1.0)*r02*x13107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13111=((1.0)*sj5);
CheckValue<IkReal> x13112=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x13111))+(((-1.0)*cj5*r01)))),-1);
if(!x13112.valid){
continue;
}
CheckValue<IkReal> x13113 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x13111)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13112.value)))+(x13113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13114=IKcos(j4);
IkReal x13115=IKsin(j4);
IkReal x13116=(r11*sj5);
IkReal x13117=(cj5*r20);
IkReal x13118=(r21*sj5);
IkReal x13119=(r01*sj5);
IkReal x13120=((1.0)*x13114);
IkReal x13121=((1.0)*x13115);
IkReal x13122=(cj5*x13115);
IkReal x13123=(cj5*x13114);
evalcond[0]=(((r02*x13115))+((r00*x13123))+(((-1.0)*x13119*x13120)));
evalcond[1]=(((r12*x13115))+((r10*x13123))+(((-1.0)*x13116*x13120)));
evalcond[2]=((((-1.0)*x13118*x13121))+((x13115*x13117))+(((-1.0)*r22*x13120)));
evalcond[3]=(((r10*x13122))+(((-1.0)*x13116*x13121))+(((-1.0)*r12*x13120)));
evalcond[4]=((-1.0)+((r22*x13115))+(((-1.0)*x13118*x13120))+((x13114*x13117)));
evalcond[5]=((1.0)+(((-1.0)*r02*x13120))+((r00*x13122))+(((-1.0)*x13119*x13121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13124 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13124.valid){
continue;
}
CheckValue<IkReal> x13125=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13124.value)+(((1.5707963267949)*(x13125.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13126=IKcos(j4);
IkReal x13127=IKsin(j4);
IkReal x13128=(r11*sj5);
IkReal x13129=(cj5*r20);
IkReal x13130=(r21*sj5);
IkReal x13131=(r01*sj5);
IkReal x13132=((1.0)*x13126);
IkReal x13133=((1.0)*x13127);
IkReal x13134=(cj5*x13127);
IkReal x13135=(cj5*x13126);
evalcond[0]=(((r00*x13135))+((r02*x13127))+(((-1.0)*x13131*x13132)));
evalcond[1]=(((r10*x13135))+((r12*x13127))+(((-1.0)*x13128*x13132)));
evalcond[2]=((((-1.0)*r22*x13132))+((x13127*x13129))+(((-1.0)*x13130*x13133)));
evalcond[3]=(((r10*x13134))+(((-1.0)*r12*x13132))+(((-1.0)*x13128*x13133)));
evalcond[4]=((-1.0)+((r22*x13127))+((x13126*x13129))+(((-1.0)*x13130*x13132)));
evalcond[5]=((1.0)+((r00*x13134))+(((-1.0)*x13131*x13133))+(((-1.0)*r02*x13132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13136=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13136;
j4eval[1]=IKsign(x13136);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13137=((1.0)*sj5);
IkReal x13138=((((-1.0)*cj5*r11))+(((-1.0)*r10*x13137)));
j4eval[0]=x13138;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x13137))+((cj5*r00))))));
j4eval[2]=IKsign(x13138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13139=cj5*cj5;
IkReal x13140=r01*r01;
IkReal x13141=(r01*sj5);
IkReal x13142=(cj5*r00);
IkReal x13143=((((-1.0)*(r02*r02)))+((x13139*x13140))+(((-1.0)*x13139*(r00*r00)))+(((2.0)*x13141*x13142))+(((-1.0)*x13140)));
j4eval[0]=x13143;
j4eval[1]=IKsign(x13143);
j4eval[2]=((IKabs((x13142+(((-1.0)*x13141)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13144=cj5*cj5;
IkReal x13145=r01*r01;
IkReal x13146=(r01*sj5);
IkReal x13147=(cj5*r00);
CheckValue<IkReal> x13148=IKPowWithIntegerCheck(IKsign((((x13144*x13145))+(((-1.0)*(r02*r02)))+(((2.0)*x13146*x13147))+(((-1.0)*x13145))+(((-1.0)*x13144*(r00*r00))))),-1);
if(!x13148.valid){
continue;
}
CheckValue<IkReal> x13149 = IKatan2WithCheck(IkReal((x13147+(((-1.0)*x13146)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13148.value)))+(x13149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13150=IKcos(j4);
IkReal x13151=IKsin(j4);
IkReal x13152=(r11*sj5);
IkReal x13153=(cj5*r20);
IkReal x13154=(r21*sj5);
IkReal x13155=(r01*sj5);
IkReal x13156=((1.0)*x13150);
IkReal x13157=((1.0)*x13151);
IkReal x13158=(cj5*x13151);
IkReal x13159=(cj5*x13150);
evalcond[0]=(((r02*x13151))+(((-1.0)*x13155*x13156))+((r00*x13159)));
evalcond[1]=((((-1.0)*x13152*x13156))+((r12*x13151))+((r10*x13159)));
evalcond[2]=(((x13151*x13153))+(((-1.0)*r22*x13156))+(((-1.0)*x13154*x13157)));
evalcond[3]=((((-1.0)*r12*x13156))+(((-1.0)*x13152*x13157))+((r10*x13158)));
evalcond[4]=((1.0)+((x13150*x13153))+(((-1.0)*x13154*x13156))+((r22*x13151)));
evalcond[5]=((1.0)+(((-1.0)*r02*x13156))+(((-1.0)*x13155*x13157))+((r00*x13158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13160=((1.0)*sj5);
CheckValue<IkReal> x13161 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x13160))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13161.valid){
continue;
}
CheckValue<IkReal> x13162=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13160)))),-1);
if(!x13162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13161.value)+(((1.5707963267949)*(x13162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13163=IKcos(j4);
IkReal x13164=IKsin(j4);
IkReal x13165=(r11*sj5);
IkReal x13166=(cj5*r20);
IkReal x13167=(r21*sj5);
IkReal x13168=(r01*sj5);
IkReal x13169=((1.0)*x13163);
IkReal x13170=((1.0)*x13164);
IkReal x13171=(cj5*x13164);
IkReal x13172=(cj5*x13163);
evalcond[0]=(((r00*x13172))+(((-1.0)*x13168*x13169))+((r02*x13164)));
evalcond[1]=((((-1.0)*x13165*x13169))+((r12*x13164))+((r10*x13172)));
evalcond[2]=((((-1.0)*x13167*x13170))+(((-1.0)*r22*x13169))+((x13164*x13166)));
evalcond[3]=((((-1.0)*r12*x13169))+(((-1.0)*x13165*x13170))+((r10*x13171)));
evalcond[4]=((1.0)+((r22*x13164))+(((-1.0)*x13167*x13169))+((x13163*x13166)));
evalcond[5]=((1.0)+((r00*x13171))+(((-1.0)*r02*x13169))+(((-1.0)*x13168*x13170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13173 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13173.valid){
continue;
}
CheckValue<IkReal> x13174=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13173.value)+(((1.5707963267949)*(x13174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13175=IKcos(j4);
IkReal x13176=IKsin(j4);
IkReal x13177=(r11*sj5);
IkReal x13178=(cj5*r20);
IkReal x13179=(r21*sj5);
IkReal x13180=(r01*sj5);
IkReal x13181=((1.0)*x13175);
IkReal x13182=((1.0)*x13176);
IkReal x13183=(cj5*x13176);
IkReal x13184=(cj5*x13175);
evalcond[0]=(((r02*x13176))+((r00*x13184))+(((-1.0)*x13180*x13181)));
evalcond[1]=(((r10*x13184))+(((-1.0)*x13177*x13181))+((r12*x13176)));
evalcond[2]=((((-1.0)*x13179*x13182))+(((-1.0)*r22*x13181))+((x13176*x13178)));
evalcond[3]=((((-1.0)*r12*x13181))+((r10*x13183))+(((-1.0)*x13177*x13182)));
evalcond[4]=((1.0)+(((-1.0)*x13179*x13181))+((x13175*x13178))+((r22*x13176)));
evalcond[5]=((1.0)+(((-1.0)*r02*x13181))+((r00*x13183))+(((-1.0)*x13180*x13182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13185=(cj1*sj2);
IkReal x13186=(cj5*r00);
IkReal x13187=((1.0)*r02);
IkReal x13188=(cj2*sj1);
IkReal x13189=((1.0)*r01*sj5);
CheckValue<IkReal> x13190=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13190.valid){
continue;
}
CheckValue<IkReal> x13191 = IKatan2WithCheck(IkReal(((((-1.0)*x13188*x13189))+((x13186*x13188))+(((-1.0)*x13185*x13189))+((x13185*x13186)))),IkReal(((((-1.0)*x13185*x13187))+(((-1.0)*x13187*x13188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13190.value)))+(x13191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13192=IKcos(j4);
IkReal x13193=IKsin(j4);
IkReal x13194=((1.0)*x13192);
IkReal x13195=(cj5*x13192);
IkReal x13196=(cj5*x13193);
IkReal x13197=((1.0)*sj5*x13193);
evalcond[0]=(((r02*x13193))+(((-1.0)*r01*sj5*x13194))+((r00*x13195)));
evalcond[1]=((((-1.0)*r22*x13194))+(((-1.0)*r21*x13197))+((r20*x13196)));
evalcond[2]=((((-1.0)*r12*x13194))+(((-1.0)*r11*x13197))+((r10*x13196)));
evalcond[3]=((1.0)+(((-1.0)*r02*x13194))+((r00*x13196))+(((-1.0)*r01*x13197)));
evalcond[4]=(((cj2*sj1))+((r12*x13193))+((r10*x13195))+((cj1*sj2))+(((-1.0)*r11*sj5*x13194)));
evalcond[5]=((((-1.0)*r21*sj5*x13194))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x13195))+((r22*x13193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13198=((1.0)*sj5);
CheckValue<IkReal> x13199 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x13198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13199.valid){
continue;
}
CheckValue<IkReal> x13200=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13198)))),-1);
if(!x13200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13199.value)+(((1.5707963267949)*(x13200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13201=IKcos(j4);
IkReal x13202=IKsin(j4);
IkReal x13203=((1.0)*x13201);
IkReal x13204=(cj5*x13201);
IkReal x13205=(cj5*x13202);
IkReal x13206=((1.0)*sj5*x13202);
evalcond[0]=(((r00*x13204))+((r02*x13202))+(((-1.0)*r01*sj5*x13203)));
evalcond[1]=((((-1.0)*r21*x13206))+(((-1.0)*r22*x13203))+((r20*x13205)));
evalcond[2]=(((r10*x13205))+(((-1.0)*r11*x13206))+(((-1.0)*r12*x13203)));
evalcond[3]=((1.0)+((r00*x13205))+(((-1.0)*r01*x13206))+(((-1.0)*r02*x13203)));
evalcond[4]=(((cj2*sj1))+((r10*x13204))+((cj1*sj2))+((r12*x13202))+(((-1.0)*r11*sj5*x13203)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13202))+(((-1.0)*r21*sj5*x13203))+((r20*x13204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13207 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13207.valid){
continue;
}
CheckValue<IkReal> x13208=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13207.value)+(((1.5707963267949)*(x13208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13209=IKcos(j4);
IkReal x13210=IKsin(j4);
IkReal x13211=((1.0)*x13209);
IkReal x13212=(cj5*x13209);
IkReal x13213=(cj5*x13210);
IkReal x13214=((1.0)*sj5*x13210);
evalcond[0]=(((r00*x13212))+(((-1.0)*r01*sj5*x13211))+((r02*x13210)));
evalcond[1]=(((r20*x13213))+(((-1.0)*r22*x13211))+(((-1.0)*r21*x13214)));
evalcond[2]=(((r10*x13213))+(((-1.0)*r12*x13211))+(((-1.0)*r11*x13214)));
evalcond[3]=((1.0)+((r00*x13213))+(((-1.0)*r02*x13211))+(((-1.0)*r01*x13214)));
evalcond[4]=(((cj2*sj1))+((r12*x13210))+((r10*x13212))+((cj1*sj2))+(((-1.0)*r11*sj5*x13211)));
evalcond[5]=((((-1.0)*r21*sj5*x13211))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x13212))+((r22*x13210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13215=((-1.0)*r10);
IkReal x13217 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13217)==0){
continue;
}
IkReal x13216=pow(x13217,-0.5);
CheckValue<IkReal> x13218 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13215),IKFAST_ATAN2_MAGTHRESH);
if(!x13218.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13218.value));
IkReal gconst19=(r11*x13216);
IkReal gconst20=(x13215*x13216);
CheckValue<IkReal> x13219 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13219.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13219.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13220=((-1.0)*r10);
IkReal x13221=x13216;
CheckValue<IkReal> x13223 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13220),IKFAST_ATAN2_MAGTHRESH);
if(!x13223.valid){
continue;
}
IkReal x13222=((-1.0)*(x13223.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13222;
IkReal gconst18=x13222;
IkReal gconst19=(r11*x13221);
IkReal gconst20=(x13220*x13221);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13224=((-1.0)*r10);
IkReal x13225=x13216;
CheckValue<IkReal> x13227 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13224),IKFAST_ATAN2_MAGTHRESH);
if(!x13227.valid){
continue;
}
IkReal x13226=((-1.0)*(x13227.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13226;
IkReal gconst18=x13226;
IkReal gconst19=(r11*x13225);
IkReal gconst20=(x13224*x13225);
CheckValue<IkReal> x13235=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x13235.valid){
continue;
}
IkReal x13228=x13235.value;
IkReal x13229=(cj3*x13228);
IkReal x13230=(r00*x13229);
IkReal x13231=(r21*x13229);
IkReal x13232=(r20*x13229);
IkReal x13233=(r01*x13229);
IkReal x13234=(r10*r11*x13229);
j4eval[0]=IKsign((((r01*r10*r11*x13232))+((r10*r11*r21*x13230))+((r20*x13230*(r10*r10)))+((r01*x13231*(r11*r11)))+((cj3*r02*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13236=((-1.0)*r10);
IkReal x13237=x13216;
CheckValue<IkReal> x13239 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13236),IKFAST_ATAN2_MAGTHRESH);
if(!x13239.valid){
continue;
}
IkReal x13238=((-1.0)*(x13239.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13238;
IkReal gconst18=x13238;
IkReal gconst19=(r11*x13237);
IkReal gconst20=(x13236*x13237);
CheckValue<IkReal> x13247=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x13247.valid){
continue;
}
IkReal x13240=x13247.value;
IkReal x13241=(sj3*x13240);
IkReal x13242=(r20*x13241);
IkReal x13243=(r00*x13241);
IkReal x13244=(r01*x13241);
IkReal x13245=(r21*x13241);
IkReal x13246=(r10*r11*x13241);
j4eval[0]=IKsign((((r01*r10*r11*x13242))+((r00*x13242*(r10*r10)))+((r21*x13244*(r11*r11)))+((r10*r11*r21*x13243))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13248=((-1.0)*r10);
IkReal x13249=x13216;
CheckValue<IkReal> x13251 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13248),IKFAST_ATAN2_MAGTHRESH);
if(!x13251.valid){
continue;
}
IkReal x13250=((-1.0)*(x13251.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13250;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x13250;
IkReal gconst19=(r11*x13249);
IkReal gconst20=(x13248*x13249);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13252=((-1.0)*r10);
IkReal x13253=x13216;
CheckValue<IkReal> x13255 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13252),IKFAST_ATAN2_MAGTHRESH);
if(!x13255.valid){
continue;
}
IkReal x13254=((-1.0)*(x13255.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13254;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x13254;
IkReal gconst19=(r11*x13253);
IkReal gconst20=(x13252*x13253);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13256=((-1.0)*r10);
IkReal x13257=x13216;
CheckValue<IkReal> x13259 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13256),IKFAST_ATAN2_MAGTHRESH);
if(!x13259.valid){
continue;
}
IkReal x13258=((-1.0)*(x13259.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13258;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x13258;
IkReal gconst19=(r11*x13257);
IkReal gconst20=(x13256*x13257);
IkReal x13260=r12*r12;
IkReal x13261=(r02*sj1*sj2);
CheckValue<IkReal> x13266=IKPowWithIntegerCheck(((-1.0)+x13260),-1);
if(!x13266.valid){
continue;
}
IkReal x13262=x13266.value;
IkReal x13263=((1.0)*cj1*cj2*r02);
if((((1.0)+(((-1.0)*x13260)))) < -0.00001)
continue;
IkReal x13264=IKsqrt(((1.0)+(((-1.0)*x13260))));
IkReal x13265=(r12*x13262*x13264);
j4eval[0]=((IKabs(((((-1.0)*x13263))+x13261)))+(IKabs(((((-1.0)*x13263*x13265))+((x13261*x13265))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13267=(gconst19*r01);
IkReal x13268=(sj1*sj2);
IkReal x13269=(gconst20*r00);
IkReal x13270=((1.0)*cj1*cj2);
CheckValue<IkReal> x13271 = IKatan2WithCheck(IkReal(((((-1.0)*x13268*x13269))+(((-1.0)*x13267*x13270))+((cj1*cj2*x13269))+((x13267*x13268)))),IkReal((((r02*x13268))+(((-1.0)*r02*x13270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13271.valid){
continue;
}
CheckValue<IkReal> x13272=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13271.value)+(((1.5707963267949)*(x13272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13273=IKsin(j4);
IkReal x13274=IKcos(j4);
IkReal x13275=(gconst20*r20);
IkReal x13276=(gconst20*r00);
IkReal x13277=((1.0)*cj2);
IkReal x13278=(gconst20*r10);
IkReal x13279=((1.0)*x13274);
IkReal x13280=(gconst19*x13274);
IkReal x13281=((1.0)*x13273);
evalcond[0]=((((-1.0)*gconst19*r21*x13281))+((x13273*x13275))+(((-1.0)*r22*x13279)));
evalcond[1]=(((x13273*x13278))+(((-1.0)*r12*x13279))+(((-1.0)*gconst19*r11*x13281)));
evalcond[2]=((((-1.0)*r02*x13281))+(((-1.0)*x13276*x13279))+((r01*x13280)));
evalcond[3]=((1.0)+((x13273*x13276))+(((-1.0)*r02*x13279))+(((-1.0)*gconst19*r01*x13281)));
evalcond[4]=((((-1.0)*x13278*x13279))+((r11*x13280))+(((-1.0)*cj1*x13277))+((sj1*sj2))+(((-1.0)*r12*x13281)));
evalcond[5]=((((-1.0)*r22*x13281))+(((-1.0)*x13275*x13279))+(((-1.0)*sj1*x13277))+(((-1.0)*cj1*sj2))+((r21*x13280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13282=(gconst19*r01);
IkReal x13283=(gconst20*r00);
CheckValue<IkReal> x13284 = IKatan2WithCheck(IkReal(((((-1.0)*x13283))+x13282)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13284.valid){
continue;
}
CheckValue<IkReal> x13285=IKPowWithIntegerCheck(IKsign(((((-2.0)*x13282*x13283))+(x13282*x13282)+(r02*r02)+(x13283*x13283))),-1);
if(!x13285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13284.value)+(((1.5707963267949)*(x13285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13286=IKsin(j4);
IkReal x13287=IKcos(j4);
IkReal x13288=(gconst20*r20);
IkReal x13289=(gconst20*r00);
IkReal x13290=((1.0)*cj2);
IkReal x13291=(gconst20*r10);
IkReal x13292=((1.0)*x13287);
IkReal x13293=(gconst19*x13287);
IkReal x13294=((1.0)*x13286);
evalcond[0]=((((-1.0)*gconst19*r21*x13294))+((x13286*x13288))+(((-1.0)*r22*x13292)));
evalcond[1]=((((-1.0)*gconst19*r11*x13294))+((x13286*x13291))+(((-1.0)*r12*x13292)));
evalcond[2]=((((-1.0)*r02*x13294))+(((-1.0)*x13289*x13292))+((r01*x13293)));
evalcond[3]=((1.0)+(((-1.0)*gconst19*r01*x13294))+((x13286*x13289))+(((-1.0)*r02*x13292)));
evalcond[4]=(((r11*x13293))+(((-1.0)*cj1*x13290))+((sj1*sj2))+(((-1.0)*r12*x13294))+(((-1.0)*x13291*x13292)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x13294))+(((-1.0)*x13288*x13292))+(((-1.0)*sj1*x13290))+((r21*x13293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13295 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13295.valid){
continue;
}
CheckValue<IkReal> x13296=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13295.value)+(((1.5707963267949)*(x13296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13297=IKsin(j4);
IkReal x13298=IKcos(j4);
IkReal x13299=(gconst20*r20);
IkReal x13300=(gconst20*r00);
IkReal x13301=((1.0)*cj2);
IkReal x13302=(gconst20*r10);
IkReal x13303=((1.0)*x13298);
IkReal x13304=(gconst19*x13298);
IkReal x13305=((1.0)*x13297);
evalcond[0]=((((-1.0)*gconst19*r21*x13305))+((x13297*x13299))+(((-1.0)*r22*x13303)));
evalcond[1]=((((-1.0)*gconst19*r11*x13305))+(((-1.0)*r12*x13303))+((x13297*x13302)));
evalcond[2]=((((-1.0)*x13300*x13303))+((r01*x13304))+(((-1.0)*r02*x13305)));
evalcond[3]=((1.0)+(((-1.0)*gconst19*r01*x13305))+(((-1.0)*r02*x13303))+((x13297*x13300)));
evalcond[4]=((((-1.0)*x13302*x13303))+(((-1.0)*cj1*x13301))+((sj1*sj2))+(((-1.0)*r12*x13305))+((r11*x13304)));
evalcond[5]=((((-1.0)*sj1*x13301))+((r21*x13304))+(((-1.0)*cj1*sj2))+(((-1.0)*x13299*x13303))+(((-1.0)*r22*x13305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13306=((-1.0)*r10);
IkReal x13307=x13216;
CheckValue<IkReal> x13309 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13306),IKFAST_ATAN2_MAGTHRESH);
if(!x13309.valid){
continue;
}
IkReal x13308=((-1.0)*(x13309.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13308;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x13308;
IkReal gconst19=(r11*x13307);
IkReal gconst20=(x13306*x13307);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13310=((-1.0)*r10);
IkReal x13311=x13216;
CheckValue<IkReal> x13313 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13310),IKFAST_ATAN2_MAGTHRESH);
if(!x13313.valid){
continue;
}
IkReal x13312=((-1.0)*(x13313.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13312;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x13312;
IkReal gconst19=(r11*x13311);
IkReal gconst20=(x13310*x13311);
IkReal x13314=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x13318=IKPowWithIntegerCheck(x13314,-1);
if(!x13318.valid){
continue;
}
IkReal x13315=x13318.value;
IkReal x13316=((1.0)*x13315);
IkReal x13317=((((-1.0)*(r02*r02)))+(((-1.0)*x13316*(r01*r01)*(r11*r11)))+(((-1.0)*x13316*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x13315)));
j4eval[0]=x13317;
j4eval[1]=r02;
j4eval[2]=x13314;
j4eval[3]=IKsign(x13317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13319=((-1.0)*r10);
IkReal x13320=x13216;
CheckValue<IkReal> x13322 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13319),IKFAST_ATAN2_MAGTHRESH);
if(!x13322.valid){
continue;
}
IkReal x13321=((-1.0)*(x13322.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13321;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x13321;
IkReal gconst19=(r11*x13320);
IkReal gconst20=(x13319*x13320);
IkReal x13323=r12*r12;
IkReal x13324=(cj1*cj2*r02);
CheckValue<IkReal> x13329=IKPowWithIntegerCheck(((-1.0)+x13323),-1);
if(!x13329.valid){
continue;
}
IkReal x13325=x13329.value;
IkReal x13326=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x13323)))) < -0.00001)
continue;
IkReal x13327=IKsqrt(((1.0)+(((-1.0)*x13323))));
IkReal x13328=(r12*x13325*x13327);
j4eval[0]=((IKabs(((((-1.0)*x13326*x13328))+((x13324*x13328)))))+(IKabs(((((-1.0)*x13326))+x13324))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13330=(sj1*sj2);
IkReal x13331=(cj1*cj2);
IkReal x13332=(gconst19*r01);
IkReal x13333=(gconst20*r00);
CheckValue<IkReal> x13334 = IKatan2WithCheck(IkReal(((((-1.0)*x13331*x13333))+((x13331*x13332))+(((-1.0)*x13330*x13332))+((x13330*x13333)))),IkReal((((r02*x13331))+(((-1.0)*r02*x13330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13334.valid){
continue;
}
CheckValue<IkReal> x13335=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13334.value)+(((1.5707963267949)*(x13335.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13336=IKcos(j4);
IkReal x13337=IKsin(j4);
IkReal x13338=(gconst20*r00);
IkReal x13339=((1.0)*cj2);
IkReal x13340=(gconst19*r21);
IkReal x13341=(gconst20*r20);
IkReal x13342=(gconst19*r01);
IkReal x13343=(gconst20*r10);
IkReal x13344=(gconst19*r11);
IkReal x13345=((1.0)*x13336);
IkReal x13346=((1.0)*x13337);
evalcond[0]=(((x13336*x13338))+((r02*x13337))+(((-1.0)*x13342*x13345)));
evalcond[1]=((((-1.0)*x13340*x13346))+((x13337*x13341))+(((-1.0)*r22*x13345)));
evalcond[2]=(((x13337*x13343))+(((-1.0)*r12*x13345))+(((-1.0)*x13344*x13346)));
evalcond[3]=((1.0)+((x13337*x13338))+(((-1.0)*r02*x13345))+(((-1.0)*x13342*x13346)));
evalcond[4]=(((sj1*sj2))+((x13336*x13343))+(((-1.0)*cj1*x13339))+(((-1.0)*x13344*x13345))+((r12*x13337)));
evalcond[5]=(((r22*x13337))+(((-1.0)*sj1*x13339))+(((-1.0)*x13340*x13345))+(((-1.0)*cj1*sj2))+((x13336*x13341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13347=(gconst20*r00);
IkReal x13348=(gconst19*r01);
CheckValue<IkReal> x13349 = IKatan2WithCheck(IkReal(((((-1.0)*x13348))+x13347)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13349.valid){
continue;
}
CheckValue<IkReal> x13350=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x13347*x13347)))+(((-1.0)*(x13348*x13348)))+(((2.0)*x13347*x13348)))),-1);
if(!x13350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13349.value)+(((1.5707963267949)*(x13350.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13351=IKcos(j4);
IkReal x13352=IKsin(j4);
IkReal x13353=(gconst20*r00);
IkReal x13354=((1.0)*cj2);
IkReal x13355=(gconst19*r21);
IkReal x13356=(gconst20*r20);
IkReal x13357=(gconst19*r01);
IkReal x13358=(gconst20*r10);
IkReal x13359=(gconst19*r11);
IkReal x13360=((1.0)*x13351);
IkReal x13361=((1.0)*x13352);
evalcond[0]=(((r02*x13352))+(((-1.0)*x13357*x13360))+((x13351*x13353)));
evalcond[1]=((((-1.0)*x13355*x13361))+((x13352*x13356))+(((-1.0)*r22*x13360)));
evalcond[2]=((((-1.0)*r12*x13360))+((x13352*x13358))+(((-1.0)*x13359*x13361)));
evalcond[3]=((1.0)+((x13352*x13353))+(((-1.0)*r02*x13360))+(((-1.0)*x13357*x13361)));
evalcond[4]=(((sj1*sj2))+((x13351*x13358))+(((-1.0)*cj1*x13354))+((r12*x13352))+(((-1.0)*x13359*x13360)));
evalcond[5]=(((r22*x13352))+(((-1.0)*x13355*x13360))+(((-1.0)*cj1*sj2))+((x13351*x13356))+(((-1.0)*sj1*x13354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13362 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13362.valid){
continue;
}
CheckValue<IkReal> x13363=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13362.value)+(((1.5707963267949)*(x13363.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13364=IKcos(j4);
IkReal x13365=IKsin(j4);
IkReal x13366=(gconst20*r00);
IkReal x13367=((1.0)*cj2);
IkReal x13368=(gconst19*r21);
IkReal x13369=(gconst20*r20);
IkReal x13370=(gconst19*r01);
IkReal x13371=(gconst20*r10);
IkReal x13372=(gconst19*r11);
IkReal x13373=((1.0)*x13364);
IkReal x13374=((1.0)*x13365);
evalcond[0]=((((-1.0)*x13370*x13373))+((x13364*x13366))+((r02*x13365)));
evalcond[1]=((((-1.0)*r22*x13373))+((x13365*x13369))+(((-1.0)*x13368*x13374)));
evalcond[2]=((((-1.0)*x13372*x13374))+((x13365*x13371))+(((-1.0)*r12*x13373)));
evalcond[3]=((1.0)+(((-1.0)*x13370*x13374))+((x13365*x13366))+(((-1.0)*r02*x13373)));
evalcond[4]=(((r12*x13365))+(((-1.0)*x13372*x13373))+((sj1*sj2))+(((-1.0)*cj1*x13367))+((x13364*x13371)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x13368*x13373))+((x13364*x13369))+((r22*x13365))+(((-1.0)*sj1*x13367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13375=((-1.0)*r10);
IkReal x13376=x13216;
CheckValue<IkReal> x13378 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13375),IKFAST_ATAN2_MAGTHRESH);
if(!x13378.valid){
continue;
}
IkReal x13377=((-1.0)*(x13378.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13377;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x13377;
IkReal gconst19=(r11*x13376);
IkReal gconst20=(x13375*x13376);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13379=((-1.0)*r10);
IkReal x13380=x13216;
CheckValue<IkReal> x13382 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13379),IKFAST_ATAN2_MAGTHRESH);
if(!x13382.valid){
continue;
}
IkReal x13381=((-1.0)*(x13382.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13381;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x13381;
IkReal gconst19=(r11*x13380);
IkReal gconst20=(x13379*x13380);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13383=((-1.0)*r10);
IkReal x13384=x13216;
CheckValue<IkReal> x13386 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13383),IKFAST_ATAN2_MAGTHRESH);
if(!x13386.valid){
continue;
}
IkReal x13385=((-1.0)*(x13386.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13385;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x13385;
IkReal gconst19=(r11*x13384);
IkReal gconst20=(x13383*x13384);
IkReal x13387=(cj1*r02*sj2);
IkReal x13388=(cj2*r02*sj1);
IkReal x13389=x13216;
IkReal x13390=(r12*x13389);
j4eval[0]=((IKabs((x13387+x13388)))+(IKabs((((x13388*x13390))+((x13387*x13390))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13391=(cj2*sj1);
IkReal x13392=(gconst19*r01);
IkReal x13393=(cj1*sj2);
IkReal x13394=((1.0)*gconst20*r00);
CheckValue<IkReal> x13395 = IKatan2WithCheck(IkReal((((x13391*x13392))+((x13392*x13393))+(((-1.0)*x13391*x13394))+(((-1.0)*x13393*x13394)))),IkReal((((r02*x13393))+((r02*x13391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13395.valid){
continue;
}
CheckValue<IkReal> x13396=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13395.value)+(((1.5707963267949)*(x13396.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13397=IKsin(j4);
IkReal x13398=IKcos(j4);
IkReal x13399=(gconst20*r20);
IkReal x13400=(gconst20*r00);
IkReal x13401=(gconst20*r10);
IkReal x13402=((1.0)*x13398);
IkReal x13403=(gconst19*x13398);
IkReal x13404=((1.0)*x13397);
evalcond[0]=((((-1.0)*gconst19*r21*x13404))+(((-1.0)*r22*x13402))+((x13397*x13399)));
evalcond[1]=(((x13397*x13401))+(((-1.0)*r12*x13402))+(((-1.0)*gconst19*r11*x13404)));
evalcond[2]=((((-1.0)*r02*x13404))+((r01*x13403))+(((-1.0)*x13400*x13402)));
evalcond[3]=((1.0)+(((-1.0)*r02*x13402))+((x13397*x13400))+(((-1.0)*gconst19*r01*x13404)));
evalcond[4]=(((cj2*sj1))+((r11*x13403))+((cj1*sj2))+(((-1.0)*x13401*x13402))+(((-1.0)*r12*x13404)));
evalcond[5]=(((r21*x13403))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13399*x13402))+(((-1.0)*r22*x13404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13405=(gconst19*r01);
IkReal x13406=(gconst20*r00);
CheckValue<IkReal> x13407=IKPowWithIntegerCheck(IKsign(((x13405*x13405)+(x13406*x13406)+(((-2.0)*x13405*x13406))+(r02*r02))),-1);
if(!x13407.valid){
continue;
}
CheckValue<IkReal> x13408 = IKatan2WithCheck(IkReal((x13405+(((-1.0)*x13406)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13407.value)))+(x13408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13409=IKsin(j4);
IkReal x13410=IKcos(j4);
IkReal x13411=(gconst20*r20);
IkReal x13412=(gconst20*r00);
IkReal x13413=(gconst20*r10);
IkReal x13414=((1.0)*x13410);
IkReal x13415=(gconst19*x13410);
IkReal x13416=((1.0)*x13409);
evalcond[0]=(((x13409*x13411))+(((-1.0)*r22*x13414))+(((-1.0)*gconst19*r21*x13416)));
evalcond[1]=(((x13409*x13413))+(((-1.0)*gconst19*r11*x13416))+(((-1.0)*r12*x13414)));
evalcond[2]=((((-1.0)*r02*x13416))+(((-1.0)*x13412*x13414))+((r01*x13415)));
evalcond[3]=((1.0)+((x13409*x13412))+(((-1.0)*gconst19*r01*x13416))+(((-1.0)*r02*x13414)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x13416))+(((-1.0)*x13413*x13414))+((cj1*sj2))+((r11*x13415)));
evalcond[5]=((((-1.0)*r22*x13416))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13411*x13414))+((r21*x13415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13417 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13417.valid){
continue;
}
CheckValue<IkReal> x13418=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13417.value)+(((1.5707963267949)*(x13418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13419=IKsin(j4);
IkReal x13420=IKcos(j4);
IkReal x13421=(gconst20*r20);
IkReal x13422=(gconst20*r00);
IkReal x13423=(gconst20*r10);
IkReal x13424=((1.0)*x13420);
IkReal x13425=(gconst19*x13420);
IkReal x13426=((1.0)*x13419);
evalcond[0]=(((x13419*x13421))+(((-1.0)*r22*x13424))+(((-1.0)*gconst19*r21*x13426)));
evalcond[1]=(((x13419*x13423))+(((-1.0)*gconst19*r11*x13426))+(((-1.0)*r12*x13424)));
evalcond[2]=((((-1.0)*x13422*x13424))+(((-1.0)*r02*x13426))+((r01*x13425)));
evalcond[3]=((1.0)+((x13419*x13422))+(((-1.0)*gconst19*r01*x13426))+(((-1.0)*r02*x13424)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13423*x13424))+((cj1*sj2))+(((-1.0)*r12*x13426))+((r11*x13425)));
evalcond[5]=((((-1.0)*x13421*x13424))+(((-1.0)*r22*x13426))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x13425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13427=((-1.0)*r10);
IkReal x13428=x13216;
CheckValue<IkReal> x13430 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13427),IKFAST_ATAN2_MAGTHRESH);
if(!x13430.valid){
continue;
}
IkReal x13429=((-1.0)*(x13430.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13429;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x13429;
IkReal gconst19=(r11*x13428);
IkReal gconst20=(x13427*x13428);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13431=((-1.0)*r10);
IkReal x13432=x13216;
CheckValue<IkReal> x13434 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13431),IKFAST_ATAN2_MAGTHRESH);
if(!x13434.valid){
continue;
}
IkReal x13433=((-1.0)*(x13434.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13433;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x13433;
IkReal gconst19=(r11*x13432);
IkReal gconst20=(x13431*x13432);
IkReal x13435=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x13439=IKPowWithIntegerCheck(x13435,-1);
if(!x13439.valid){
continue;
}
IkReal x13436=x13439.value;
IkReal x13437=((1.0)*x13436);
IkReal x13438=((((-1.0)*x13437*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x13436))+(((-1.0)*x13437*(r00*r00)*(r10*r10))));
j4eval[0]=x13438;
j4eval[1]=r02;
j4eval[2]=x13435;
j4eval[3]=IKsign(x13438);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13440=((-1.0)*r10);
IkReal x13441=x13216;
CheckValue<IkReal> x13443 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13440),IKFAST_ATAN2_MAGTHRESH);
if(!x13443.valid){
continue;
}
IkReal x13442=((-1.0)*(x13443.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13442;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x13442;
IkReal gconst19=(r11*x13441);
IkReal gconst20=(x13440*x13441);
IkReal x13444=r12*r12;
IkReal x13445=((1.0)*r02);
IkReal x13446=(cj1*sj2);
IkReal x13447=(cj2*sj1);
CheckValue<IkReal> x13451=IKPowWithIntegerCheck(((-1.0)+x13444),-1);
if(!x13451.valid){
continue;
}
IkReal x13448=x13451.value;
if((((1.0)+(((-1.0)*x13444)))) < -0.00001)
continue;
IkReal x13449=IKsqrt(((1.0)+(((-1.0)*x13444))));
IkReal x13450=(r12*x13448*x13449);
j4eval[0]=((IKabs(((((-1.0)*x13445*x13447))+(((-1.0)*x13445*x13446)))))+(IKabs(((((-1.0)*x13445*x13447*x13450))+(((-1.0)*x13445*x13446*x13450))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13452=(gconst19*r01);
IkReal x13453=(cj2*sj1);
IkReal x13454=(gconst20*r00);
IkReal x13455=((1.0)*cj1*sj2);
CheckValue<IkReal> x13456 = IKatan2WithCheck(IkReal(((((-1.0)*x13452*x13453))+(((-1.0)*x13452*x13455))+((cj1*sj2*x13454))+((x13453*x13454)))),IkReal(((((-1.0)*r02*x13453))+(((-1.0)*r02*x13455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13456.valid){
continue;
}
CheckValue<IkReal> x13457=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13456.value)+(((1.5707963267949)*(x13457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13458=IKcos(j4);
IkReal x13459=IKsin(j4);
IkReal x13460=(gconst20*r00);
IkReal x13461=(gconst19*r21);
IkReal x13462=(gconst20*r20);
IkReal x13463=(gconst19*r01);
IkReal x13464=(gconst20*r10);
IkReal x13465=(gconst19*r11);
IkReal x13466=((1.0)*x13458);
IkReal x13467=((1.0)*x13459);
evalcond[0]=((((-1.0)*x13463*x13466))+((x13458*x13460))+((r02*x13459)));
evalcond[1]=((((-1.0)*r22*x13466))+(((-1.0)*x13461*x13467))+((x13459*x13462)));
evalcond[2]=((((-1.0)*x13465*x13467))+((x13459*x13464))+(((-1.0)*r12*x13466)));
evalcond[3]=((1.0)+(((-1.0)*x13463*x13467))+((x13459*x13460))+(((-1.0)*r02*x13466)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13465*x13466))+((r12*x13459))+((cj1*sj2))+((x13458*x13464)));
evalcond[5]=((((-1.0)*x13461*x13466))+((x13458*x13462))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13468=(gconst20*r00);
IkReal x13469=(gconst19*r01);
CheckValue<IkReal> x13470=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13468*x13468)))+(((-1.0)*(r02*r02)))+(((2.0)*x13468*x13469))+(((-1.0)*(x13469*x13469))))),-1);
if(!x13470.valid){
continue;
}
CheckValue<IkReal> x13471 = IKatan2WithCheck(IkReal((x13468+(((-1.0)*x13469)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13470.value)))+(x13471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13472=IKcos(j4);
IkReal x13473=IKsin(j4);
IkReal x13474=(gconst20*r00);
IkReal x13475=(gconst19*r21);
IkReal x13476=(gconst20*r20);
IkReal x13477=(gconst19*r01);
IkReal x13478=(gconst20*r10);
IkReal x13479=(gconst19*r11);
IkReal x13480=((1.0)*x13472);
IkReal x13481=((1.0)*x13473);
evalcond[0]=((((-1.0)*x13477*x13480))+((x13472*x13474))+((r02*x13473)));
evalcond[1]=((((-1.0)*r22*x13480))+(((-1.0)*x13475*x13481))+((x13473*x13476)));
evalcond[2]=((((-1.0)*r12*x13480))+(((-1.0)*x13479*x13481))+((x13473*x13478)));
evalcond[3]=((1.0)+(((-1.0)*x13477*x13481))+(((-1.0)*r02*x13480))+((x13473*x13474)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13472*x13478))+(((-1.0)*x13479*x13480))+((r12*x13473)));
evalcond[5]=(((x13472*x13476))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13473))+(((-1.0)*x13475*x13480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13482 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13482.valid){
continue;
}
CheckValue<IkReal> x13483=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13482.value)+(((1.5707963267949)*(x13483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13484=IKcos(j4);
IkReal x13485=IKsin(j4);
IkReal x13486=(gconst20*r00);
IkReal x13487=(gconst19*r21);
IkReal x13488=(gconst20*r20);
IkReal x13489=(gconst19*r01);
IkReal x13490=(gconst20*r10);
IkReal x13491=(gconst19*r11);
IkReal x13492=((1.0)*x13484);
IkReal x13493=((1.0)*x13485);
evalcond[0]=((((-1.0)*x13489*x13492))+((r02*x13485))+((x13484*x13486)));
evalcond[1]=((((-1.0)*r22*x13492))+((x13485*x13488))+(((-1.0)*x13487*x13493)));
evalcond[2]=((((-1.0)*r12*x13492))+(((-1.0)*x13491*x13493))+((x13485*x13490)));
evalcond[3]=((1.0)+(((-1.0)*x13489*x13493))+(((-1.0)*r02*x13492))+((x13485*x13486)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13491*x13492))+((cj1*sj2))+((x13484*x13490))+((r12*x13485)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13484*x13488))+(((-1.0)*x13487*x13492))+((r22*x13485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13494=((-1.0)*r10);
IkReal x13495=((-1.0)*pz);
CheckValue<IkReal> x13497 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13494),IKFAST_ATAN2_MAGTHRESH);
if(!x13497.valid){
continue;
}
IkReal x13496=((-1.0)*(x13497.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13496;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13495);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13495);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x13496;
IkReal gconst19=r11;
IkReal gconst20=x13494;
IkReal x13498=(r00*r10);
IkReal x13499=(r01*r11);
j4eval[0]=((((-1.0)*x13498))+(((-1.0)*x13499)));
j4eval[1]=(((sj3*x13499))+((sj3*x13498)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13500=((-1.0)*r10);
IkReal x13501=((-1.0)*pz);
CheckValue<IkReal> x13503 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13500),IKFAST_ATAN2_MAGTHRESH);
if(!x13503.valid){
continue;
}
IkReal x13502=((-1.0)*(x13503.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13502;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13501);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13501);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x13502;
IkReal gconst19=r11;
IkReal gconst20=x13500;
IkReal x13504=(r00*r10);
IkReal x13505=(r01*r11);
j4eval[0]=((((-1.0)*x13504))+(((-1.0)*x13505)));
j4eval[1]=(((cj3*x13505))+((cj3*x13504)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13506=((-1.0)*r10);
IkReal x13507=((-1.0)*pz);
CheckValue<IkReal> x13509 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x13506),IKFAST_ATAN2_MAGTHRESH);
if(!x13509.valid){
continue;
}
IkReal x13508=((-1.0)*(x13509.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x13508;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13507);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13507);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x13508;
IkReal gconst19=r11;
IkReal gconst20=x13506;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r01*r11))+((cj3*r00*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13510=((1.0)*r00);
CheckValue<IkReal> x13511=IKPowWithIntegerCheck(r22,-1);
if(!x13511.valid){
continue;
}
CheckValue<IkReal> x13512=IKPowWithIntegerCheck(sj3,-1);
if(!x13512.valid){
continue;
}
CheckValue<IkReal> x13513=IKPowWithIntegerCheck((((cj3*gconst19*r01))+(((-1.0)*cj3*gconst20*x13510))),-1);
if(!x13513.valid){
continue;
}
if( IKabs(((x13511.value)*(x13512.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13513.value)*(((((-1.0)*gconst19*sj3*x13510))+(((-1.0)*gconst20*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13511.value)*(x13512.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13513.value)*(((((-1.0)*gconst19*sj3*x13510))+(((-1.0)*gconst20*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13511.value)*(x13512.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13513.value)*(((((-1.0)*gconst19*sj3*x13510))+(((-1.0)*gconst20*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13514=IKsin(j4);
IkReal x13515=IKcos(j4);
IkReal x13516=(sj1*sj2);
IkReal x13517=(gconst20*r00);
IkReal x13518=(cj3*gconst19);
IkReal x13519=(gconst19*sj3);
IkReal x13520=((1.0)*cj1);
IkReal x13521=((1.0)*cj3);
IkReal x13522=(gconst20*r11);
IkReal x13523=(gconst20*sj3);
IkReal x13524=(cj2*sj1);
IkReal x13525=(gconst20*r10);
IkReal x13526=(cj2*x13520);
IkReal x13527=(r22*x13514);
IkReal x13528=((1.0)*x13515);
IkReal x13529=(x13515*x13519);
IkReal x13530=((1.0)*gconst19*x13514);
evalcond[0]=((-1.0)*r22*x13515);
evalcond[1]=((((-1.0)*r11*x13530))+((x13514*x13525)));
evalcond[2]=((1.0)+(((-1.0)*r01*x13530))+((x13514*x13517)));
evalcond[3]=(x13516+(((-1.0)*sj3*x13527))+(((-1.0)*x13526)));
evalcond[4]=((((-1.0)*sj2*x13520))+(((-1.0)*x13524))+(((-1.0)*x13521*x13527)));
evalcond[5]=(((r01*x13515*x13518))+((r01*x13523))+(((-1.0)*x13515*x13517*x13521))+((r00*x13519)));
evalcond[6]=(((r01*x13529))+(((-1.0)*sj3*x13517*x13528))+(((-1.0)*r00*x13518))+(((-1.0)*gconst20*r01*x13521)));
evalcond[7]=(x13516+((r11*x13515*x13518))+(((-1.0)*x13515*x13521*x13525))+(((-1.0)*x13526))+((sj3*x13522))+((r10*x13519)));
evalcond[8]=(x13524+((cj1*sj2))+(((-1.0)*x13521*x13522))+(((-1.0)*r10*x13518))+((r11*x13529))+(((-1.0)*r10*x13523*x13528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13531=((1.0)*r00);
IkReal x13532=(gconst19*r01);
CheckValue<IkReal> x13533=IKPowWithIntegerCheck((((gconst20*r00))+(((-1.0)*x13532))),-1);
if(!x13533.valid){
continue;
}
CheckValue<IkReal> x13534=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst20*x13531))+((cj3*x13532))),-1);
if(!x13534.valid){
continue;
}
if( IKabs(((-1.0)*(x13533.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13534.value)*(((((-1.0)*gconst19*sj3*x13531))+(((-1.0)*gconst20*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13533.value)))+IKsqr(((x13534.value)*(((((-1.0)*gconst19*sj3*x13531))+(((-1.0)*gconst20*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13533.value)), ((x13534.value)*(((((-1.0)*gconst19*sj3*x13531))+(((-1.0)*gconst20*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13535=IKsin(j4);
IkReal x13536=IKcos(j4);
IkReal x13537=(sj1*sj2);
IkReal x13538=(gconst20*r00);
IkReal x13539=(cj3*gconst19);
IkReal x13540=(gconst19*sj3);
IkReal x13541=((1.0)*cj1);
IkReal x13542=((1.0)*cj3);
IkReal x13543=(gconst20*r11);
IkReal x13544=(gconst20*sj3);
IkReal x13545=(cj2*sj1);
IkReal x13546=(gconst20*r10);
IkReal x13547=(cj2*x13541);
IkReal x13548=(r22*x13535);
IkReal x13549=((1.0)*x13536);
IkReal x13550=(x13536*x13540);
IkReal x13551=((1.0)*gconst19*x13535);
evalcond[0]=((-1.0)*r22*x13536);
evalcond[1]=((((-1.0)*r11*x13551))+((x13535*x13546)));
evalcond[2]=((1.0)+(((-1.0)*r01*x13551))+((x13535*x13538)));
evalcond[3]=(x13537+(((-1.0)*x13547))+(((-1.0)*sj3*x13548)));
evalcond[4]=((((-1.0)*sj2*x13541))+(((-1.0)*x13542*x13548))+(((-1.0)*x13545)));
evalcond[5]=(((r01*x13544))+((r00*x13540))+((r01*x13536*x13539))+(((-1.0)*x13536*x13538*x13542)));
evalcond[6]=(((r01*x13550))+(((-1.0)*gconst20*r01*x13542))+(((-1.0)*sj3*x13538*x13549))+(((-1.0)*r00*x13539)));
evalcond[7]=(x13537+((r11*x13536*x13539))+(((-1.0)*x13547))+((r10*x13540))+((sj3*x13543))+(((-1.0)*x13536*x13542*x13546)));
evalcond[8]=((((-1.0)*r10*x13544*x13549))+x13545+((r11*x13550))+((cj1*sj2))+(((-1.0)*r10*x13539))+(((-1.0)*x13542*x13543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13552=(gconst20*r00);
IkReal x13553=(gconst19*r01);
CheckValue<IkReal> x13554=IKPowWithIntegerCheck((x13552+(((-1.0)*x13553))),-1);
if(!x13554.valid){
continue;
}
CheckValue<IkReal> x13555=IKPowWithIntegerCheck((((sj3*x13553))+(((-1.0)*sj3*x13552))),-1);
if(!x13555.valid){
continue;
}
if( IKabs(((-1.0)*(x13554.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13555.value)*((((cj3*gconst19*r00))+((cj3*gconst20*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13554.value)))+IKsqr(((x13555.value)*((((cj3*gconst19*r00))+((cj3*gconst20*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13554.value)), ((x13555.value)*((((cj3*gconst19*r00))+((cj3*gconst20*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13556=IKsin(j4);
IkReal x13557=IKcos(j4);
IkReal x13558=(sj1*sj2);
IkReal x13559=(gconst20*r00);
IkReal x13560=(cj3*gconst19);
IkReal x13561=(gconst19*sj3);
IkReal x13562=((1.0)*cj1);
IkReal x13563=((1.0)*cj3);
IkReal x13564=(gconst20*r11);
IkReal x13565=(gconst20*sj3);
IkReal x13566=(cj2*sj1);
IkReal x13567=(gconst20*r10);
IkReal x13568=(cj2*x13562);
IkReal x13569=(r22*x13556);
IkReal x13570=((1.0)*x13557);
IkReal x13571=(x13557*x13561);
IkReal x13572=((1.0)*gconst19*x13556);
evalcond[0]=((-1.0)*r22*x13557);
evalcond[1]=((((-1.0)*r11*x13572))+((x13556*x13567)));
evalcond[2]=((1.0)+((x13556*x13559))+(((-1.0)*r01*x13572)));
evalcond[3]=(x13558+(((-1.0)*sj3*x13569))+(((-1.0)*x13568)));
evalcond[4]=((((-1.0)*sj2*x13562))+(((-1.0)*x13563*x13569))+(((-1.0)*x13566)));
evalcond[5]=(((r00*x13561))+((r01*x13565))+(((-1.0)*x13557*x13559*x13563))+((r01*x13557*x13560)));
evalcond[6]=((((-1.0)*r00*x13560))+(((-1.0)*gconst20*r01*x13563))+(((-1.0)*sj3*x13559*x13570))+((r01*x13571)));
evalcond[7]=(((r11*x13557*x13560))+x13558+((sj3*x13564))+((r10*x13561))+(((-1.0)*x13557*x13563*x13567))+(((-1.0)*x13568)));
evalcond[8]=(x13566+(((-1.0)*x13563*x13564))+((cj1*sj2))+(((-1.0)*r10*x13560))+((r11*x13571))+(((-1.0)*r10*x13565*x13570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13573=gconst19*gconst19;
IkReal x13574=gconst20*gconst20;
IkReal x13575=(r20*sj3);
IkReal x13576=(cj3*r21);
IkReal x13577=(gconst19*r00);
IkReal x13578=((1.0)*gconst20);
IkReal x13579=(cj3*r20);
IkReal x13580=(r21*sj3);
IkReal x13581=(gconst19*gconst20*r01);
IkReal x13582=((1.0)*cj3*r22);
CheckValue<IkReal> x13583=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13577*x13578*x13580))+(((-1.0)*gconst19*r01*x13575*x13578))+((r01*x13573*x13580))+((r00*x13574*x13575))+((r02*r22*sj3)))),-1);
if(!x13583.valid){
continue;
}
CheckValue<IkReal> x13584 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*r01*r22*x13578))+(((-1.0)*x13577*x13582)))),IkReal((((r00*x13573*x13576))+(((-1.0)*x13577*x13578*x13579))+((x13576*x13581))+(((-1.0)*r01*x13574*x13579)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13583.value)))+(x13584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13585=IKsin(j4);
IkReal x13586=IKcos(j4);
IkReal x13587=(sj1*sj2);
IkReal x13588=(gconst20*sj3);
IkReal x13589=(cj3*gconst19);
IkReal x13590=(gconst19*sj3);
IkReal x13591=((1.0)*cj1);
IkReal x13592=(cj2*sj1);
IkReal x13593=(cj3*gconst20);
IkReal x13594=(cj2*x13591);
IkReal x13595=((1.0)*x13586);
IkReal x13596=((1.0)*x13585);
IkReal x13597=(gconst20*x13585);
IkReal x13598=((1.0)*x13593);
IkReal x13599=(x13586*x13590);
evalcond[0]=((((-1.0)*gconst19*r21*x13596))+((r20*x13597))+(((-1.0)*r22*x13595)));
evalcond[1]=(((r10*x13597))+(((-1.0)*gconst19*r11*x13596))+(((-1.0)*r12*x13595)));
evalcond[2]=((1.0)+((r00*x13597))+(((-1.0)*gconst19*r01*x13596))+(((-1.0)*r02*x13595)));
evalcond[3]=(((r00*x13590))+((r01*x13588))+(((-1.0)*cj3*r02*x13596))+(((-1.0)*r00*x13593*x13595))+((r01*x13586*x13589)));
evalcond[4]=(((r01*x13599))+(((-1.0)*r01*x13598))+(((-1.0)*r00*x13588*x13595))+(((-1.0)*r00*x13589))+(((-1.0)*r02*sj3*x13596)));
evalcond[5]=(x13587+((r10*x13590))+(((-1.0)*r10*x13593*x13595))+((r11*x13586*x13589))+(((-1.0)*cj3*r12*x13596))+(((-1.0)*x13594))+((r11*x13588)));
evalcond[6]=(((r21*x13586*x13589))+(((-1.0)*r20*x13593*x13595))+(((-1.0)*x13592))+(((-1.0)*sj2*x13591))+((r21*x13588))+(((-1.0)*cj3*r22*x13596))+((r20*x13590)));
evalcond[7]=(x13592+((r11*x13599))+((cj1*sj2))+(((-1.0)*r10*x13588*x13595))+(((-1.0)*r11*x13598))+(((-1.0)*r10*x13589))+(((-1.0)*r12*sj3*x13596)));
evalcond[8]=(x13587+((r21*x13599))+(((-1.0)*r20*x13589))+(((-1.0)*r22*sj3*x13596))+(((-1.0)*r20*x13588*x13595))+(((-1.0)*x13594))+(((-1.0)*r21*x13598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13600=gconst20*gconst20;
IkReal x13601=gconst19*gconst19;
IkReal x13602=(cj3*r21);
IkReal x13603=((1.0)*r00);
IkReal x13604=(gconst19*gconst20);
IkReal x13605=(r21*sj3);
IkReal x13606=(r00*r20);
IkReal x13607=(r01*r20);
IkReal x13608=(r22*sj3);
CheckValue<IkReal> x13609=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*x13604*x13607))+((r01*x13601*x13602))+(((-1.0)*x13602*x13603*x13604))+((cj3*x13600*x13606))+((cj3*r02*r22)))),-1);
if(!x13609.valid){
continue;
}
CheckValue<IkReal> x13610 = IKatan2WithCheck(IkReal((((gconst19*r00*x13608))+((gconst20*r01*x13608)))),IkReal(((((-1.0)*r01*x13604*x13605))+((sj3*x13604*x13606))+((sj3*x13600*x13607))+(((-1.0)*x13601*x13603*x13605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13609.value)))+(x13610.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13611=IKsin(j4);
IkReal x13612=IKcos(j4);
IkReal x13613=(sj1*sj2);
IkReal x13614=(gconst20*sj3);
IkReal x13615=(cj3*gconst19);
IkReal x13616=(gconst19*sj3);
IkReal x13617=((1.0)*cj1);
IkReal x13618=(cj2*sj1);
IkReal x13619=(cj3*gconst20);
IkReal x13620=(cj2*x13617);
IkReal x13621=((1.0)*x13612);
IkReal x13622=((1.0)*x13611);
IkReal x13623=(gconst20*x13611);
IkReal x13624=((1.0)*x13619);
IkReal x13625=(x13612*x13616);
evalcond[0]=((((-1.0)*gconst19*r21*x13622))+(((-1.0)*r22*x13621))+((r20*x13623)));
evalcond[1]=(((r10*x13623))+(((-1.0)*gconst19*r11*x13622))+(((-1.0)*r12*x13621)));
evalcond[2]=((1.0)+(((-1.0)*gconst19*r01*x13622))+((r00*x13623))+(((-1.0)*r02*x13621)));
evalcond[3]=((((-1.0)*r00*x13619*x13621))+((r01*x13614))+((r00*x13616))+(((-1.0)*cj3*r02*x13622))+((r01*x13612*x13615)));
evalcond[4]=((((-1.0)*r01*x13624))+(((-1.0)*r02*sj3*x13622))+(((-1.0)*r00*x13615))+((r01*x13625))+(((-1.0)*r00*x13614*x13621)));
evalcond[5]=((((-1.0)*cj3*r12*x13622))+x13613+((r11*x13614))+((r11*x13612*x13615))+((r10*x13616))+(((-1.0)*x13620))+(((-1.0)*r10*x13619*x13621)));
evalcond[6]=((((-1.0)*sj2*x13617))+((r21*x13614))+((r21*x13612*x13615))+(((-1.0)*r20*x13619*x13621))+((r20*x13616))+(((-1.0)*x13618))+(((-1.0)*cj3*r22*x13622)));
evalcond[7]=((((-1.0)*r10*x13614*x13621))+x13618+((r11*x13625))+(((-1.0)*r12*sj3*x13622))+((cj1*sj2))+(((-1.0)*r11*x13624))+(((-1.0)*r10*x13615)));
evalcond[8]=((((-1.0)*r20*x13615))+x13613+(((-1.0)*r22*sj3*x13622))+((r21*x13625))+(((-1.0)*x13620))+(((-1.0)*r21*x13624))+(((-1.0)*r20*x13614*x13621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13626 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst19*r11))+((gconst20*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13626.valid){
continue;
}
CheckValue<IkReal> x13627=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13626.value)+(((1.5707963267949)*(x13627.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13628=IKsin(j4);
IkReal x13629=IKcos(j4);
IkReal x13630=(sj1*sj2);
IkReal x13631=(gconst20*sj3);
IkReal x13632=(cj3*gconst19);
IkReal x13633=(gconst19*sj3);
IkReal x13634=((1.0)*cj1);
IkReal x13635=(cj2*sj1);
IkReal x13636=(cj3*gconst20);
IkReal x13637=(cj2*x13634);
IkReal x13638=((1.0)*x13629);
IkReal x13639=((1.0)*x13628);
IkReal x13640=(gconst20*x13628);
IkReal x13641=((1.0)*x13636);
IkReal x13642=(x13629*x13633);
evalcond[0]=((((-1.0)*gconst19*r21*x13639))+((r20*x13640))+(((-1.0)*r22*x13638)));
evalcond[1]=((((-1.0)*r12*x13638))+((r10*x13640))+(((-1.0)*gconst19*r11*x13639)));
evalcond[2]=((1.0)+(((-1.0)*r02*x13638))+(((-1.0)*gconst19*r01*x13639))+((r00*x13640)));
evalcond[3]=((((-1.0)*r00*x13636*x13638))+((r01*x13629*x13632))+(((-1.0)*cj3*r02*x13639))+((r00*x13633))+((r01*x13631)));
evalcond[4]=((((-1.0)*r00*x13631*x13638))+(((-1.0)*r00*x13632))+(((-1.0)*r02*sj3*x13639))+((r01*x13642))+(((-1.0)*r01*x13641)));
evalcond[5]=(((r11*x13631))+((r10*x13633))+x13630+(((-1.0)*cj3*r12*x13639))+((r11*x13629*x13632))+(((-1.0)*x13637))+(((-1.0)*r10*x13636*x13638)));
evalcond[6]=((((-1.0)*x13635))+(((-1.0)*cj3*r22*x13639))+((r21*x13629*x13632))+(((-1.0)*sj2*x13634))+((r21*x13631))+((r20*x13633))+(((-1.0)*r20*x13636*x13638)));
evalcond[7]=(x13635+(((-1.0)*r10*x13631*x13638))+((cj1*sj2))+(((-1.0)*r11*x13641))+(((-1.0)*r10*x13632))+((r11*x13642))+(((-1.0)*r12*sj3*x13639)));
evalcond[8]=(x13630+(((-1.0)*r20*x13631*x13638))+(((-1.0)*r22*sj3*x13639))+(((-1.0)*r20*x13632))+(((-1.0)*x13637))+(((-1.0)*r21*x13641))+((r21*x13642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13643=((-1.0)*r11);
IkReal x13645 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13645)==0){
continue;
}
IkReal x13644=pow(x13645,-0.5);
CheckValue<IkReal> x13646 = IKatan2WithCheck(IkReal(x13643),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13646.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13646.value))));
IkReal gconst22=(x13643*x13644);
IkReal gconst23=((1.0)*r10*x13644);
CheckValue<IkReal> x13647 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13647.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13647.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13648=((-1.0)*r11);
CheckValue<IkReal> x13651 = IKatan2WithCheck(IkReal(x13648),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x13651.valid){
continue;
}
IkReal x13649=((1.0)*(x13651.value));
IkReal x13650=x13644;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13649)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13649)));
IkReal gconst22=(x13648*x13650);
IkReal gconst23=((1.0)*r10*x13650);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13652=gconst23*gconst23;
IkReal x13653=gconst22*gconst22;
IkReal x13654=(r01*sj3);
IkReal x13655=(cj3*r00);
IkReal x13656=(cj3*r01);
IkReal x13657=(r00*sj3);
IkReal x13658=((1.0)*gconst22*gconst23);
IkReal x13659=(r20*x13652);
IkReal x13660=(r21*x13653);
CheckValue<IkReal> x13661 = IKatan2WithCheck(IkReal((((gconst23*r22*x13654))+((gconst22*r22*x13657)))),IkReal((((gconst22*gconst23*r20*x13657))+(((-1.0)*x13657*x13660))+((x13654*x13659))+(((-1.0)*r21*x13654*x13658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13661.valid){
continue;
}
CheckValue<IkReal> x13662=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13656*x13658))+((x13655*x13659))+((x13656*x13660))+((cj3*r02*r22))+(((-1.0)*r21*x13655*x13658)))),-1);
if(!x13662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13661.value)+(((1.5707963267949)*(x13662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13663=IKsin(j4);
IkReal x13664=IKcos(j4);
IkReal x13665=(sj1*sj2);
IkReal x13666=(gconst23*sj3);
IkReal x13667=(gconst22*r21);
IkReal x13668=(gconst22*sj3);
IkReal x13669=(gconst22*r01);
IkReal x13670=((1.0)*cj2);
IkReal x13671=((1.0)*cj3);
IkReal x13672=(cj1*sj2);
IkReal x13673=(cj3*gconst23);
IkReal x13674=(gconst22*r11);
IkReal x13675=(cj1*x13670);
IkReal x13676=((1.0)*x13664);
IkReal x13677=((1.0)*x13663);
IkReal x13678=(gconst23*x13663);
IkReal x13679=(cj3*x13664);
evalcond[0]=((((-1.0)*x13667*x13677))+((r20*x13678))+(((-1.0)*r22*x13676)));
evalcond[1]=((((-1.0)*x13674*x13677))+(((-1.0)*r12*x13676))+((r10*x13678)));
evalcond[2]=((1.0)+(((-1.0)*x13669*x13677))+((r00*x13678))+(((-1.0)*r02*x13676)));
evalcond[3]=((((-1.0)*gconst23*r00*x13664*x13671))+((x13669*x13679))+((r00*x13668))+((r01*x13666))+(((-1.0)*r02*x13663*x13671)));
evalcond[4]=((((-1.0)*gconst22*r00*x13671))+(((-1.0)*r00*x13666*x13676))+(((-1.0)*gconst23*r01*x13671))+(((-1.0)*r02*sj3*x13677))+((r01*x13664*x13668)));
evalcond[5]=((((-1.0)*gconst23*r10*x13664*x13671))+x13665+(((-1.0)*x13675))+((r11*x13666))+((r10*x13668))+((x13674*x13679))+(((-1.0)*r12*x13663*x13671)));
evalcond[6]=((((-1.0)*sj1*x13670))+(((-1.0)*gconst23*r20*x13664*x13671))+((x13667*x13679))+((r20*x13668))+(((-1.0)*x13672))+((r21*x13666))+(((-1.0)*r22*x13663*x13671)));
evalcond[7]=(((cj2*sj1))+x13672+((r11*x13664*x13668))+(((-1.0)*r10*x13666*x13676))+(((-1.0)*gconst23*r11*x13671))+(((-1.0)*gconst22*r10*x13671))+(((-1.0)*r12*sj3*x13677)));
evalcond[8]=(x13665+((sj3*x13664*x13667))+(((-1.0)*x13675))+(((-1.0)*r20*x13666*x13676))+(((-1.0)*gconst22*r20*x13671))+(((-1.0)*gconst23*r21*x13671))+(((-1.0)*r22*sj3*x13677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13680 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst22*r11))+((gconst23*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13680.valid){
continue;
}
CheckValue<IkReal> x13681=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13680.value)+(((1.5707963267949)*(x13681.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13682=IKsin(j4);
IkReal x13683=IKcos(j4);
IkReal x13684=(sj1*sj2);
IkReal x13685=(gconst23*sj3);
IkReal x13686=(gconst22*r21);
IkReal x13687=(gconst22*sj3);
IkReal x13688=(gconst22*r01);
IkReal x13689=((1.0)*cj2);
IkReal x13690=((1.0)*cj3);
IkReal x13691=(cj1*sj2);
IkReal x13692=(cj3*gconst23);
IkReal x13693=(gconst22*r11);
IkReal x13694=(cj1*x13689);
IkReal x13695=((1.0)*x13683);
IkReal x13696=((1.0)*x13682);
IkReal x13697=(gconst23*x13682);
IkReal x13698=(cj3*x13683);
evalcond[0]=(((r20*x13697))+(((-1.0)*r22*x13695))+(((-1.0)*x13686*x13696)));
evalcond[1]=(((r10*x13697))+(((-1.0)*x13693*x13696))+(((-1.0)*r12*x13695)));
evalcond[2]=((1.0)+((r00*x13697))+(((-1.0)*r02*x13695))+(((-1.0)*x13688*x13696)));
evalcond[3]=((((-1.0)*gconst23*r00*x13683*x13690))+(((-1.0)*r02*x13682*x13690))+((r00*x13687))+((x13688*x13698))+((r01*x13685)));
evalcond[4]=((((-1.0)*gconst22*r00*x13690))+(((-1.0)*r00*x13685*x13695))+(((-1.0)*r02*sj3*x13696))+((r01*x13683*x13687))+(((-1.0)*gconst23*r01*x13690)));
evalcond[5]=(x13684+(((-1.0)*x13694))+((r11*x13685))+((r10*x13687))+(((-1.0)*gconst23*r10*x13683*x13690))+(((-1.0)*r12*x13682*x13690))+((x13693*x13698)));
evalcond[6]=((((-1.0)*sj1*x13689))+(((-1.0)*r22*x13682*x13690))+(((-1.0)*gconst23*r20*x13683*x13690))+((x13686*x13698))+((r20*x13687))+((r21*x13685))+(((-1.0)*x13691)));
evalcond[7]=(((cj2*sj1))+x13691+(((-1.0)*r10*x13685*x13695))+((r11*x13683*x13687))+(((-1.0)*r12*sj3*x13696))+(((-1.0)*gconst22*r10*x13690))+(((-1.0)*gconst23*r11*x13690)));
evalcond[8]=((((-1.0)*r22*sj3*x13696))+x13684+(((-1.0)*x13694))+(((-1.0)*r20*x13685*x13695))+(((-1.0)*gconst22*r20*x13690))+(((-1.0)*gconst23*r21*x13690))+((sj3*x13683*x13686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13699=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13699);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13699);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13700=(cj5*r00);
IkReal x13701=(r01*sj5);
j4eval[0]=(x13700+(((-1.0)*x13701)));
j4eval[1]=(((sj3*x13701))+(((-1.0)*sj3*x13700)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13702=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13702);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13702);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13703=(cj5*r00);
IkReal x13704=(r01*sj5);
j4eval[0]=(x13703+(((-1.0)*x13704)));
j4eval[1]=(((cj3*x13704))+(((-1.0)*cj3*x13703)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13705=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13705);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13705);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13706=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13706);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13706);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13707=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13707);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13707);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13708=((1.0)*sj1);
CheckValue<IkReal> x13709=IKPowWithIntegerCheck(r22,-1);
if(!x13709.valid){
continue;
}
CheckValue<IkReal> x13710=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13710.valid){
continue;
}
if( IKabs(((x13709.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13708)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13710.value)*(((((-1.0)*sj2*x13708))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13709.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13708))))))+IKsqr(((x13710.value)*(((((-1.0)*sj2*x13708))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13709.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13708))))), ((x13710.value)*(((((-1.0)*sj2*x13708))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13711=IKsin(j4);
IkReal x13712=IKcos(j4);
IkReal x13713=(cj5*r00);
IkReal x13714=((1.0)*cj1);
IkReal x13715=(cj5*r10);
IkReal x13716=((1.0)*x13712);
IkReal x13717=(sj5*x13712);
IkReal x13718=((1.0)*sj5*x13711);
evalcond[0]=((-1.0)*r22*x13712);
evalcond[1]=((((-1.0)*r11*x13718))+((x13711*x13715)));
evalcond[2]=((((-1.0)*x13713*x13716))+((r01*x13717)));
evalcond[3]=((1.0)+(((-1.0)*r01*x13718))+((x13711*x13713)));
evalcond[4]=((((-1.0)*sj2*x13714))+(((-1.0)*r22*x13711))+(((-1.0)*cj2*sj1)));
evalcond[5]=((((-1.0)*cj2*x13714))+((sj1*sj2))+(((-1.0)*x13715*x13716))+((r11*x13717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13719=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13719.valid){
continue;
}
CheckValue<IkReal> x13720=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13720.valid){
continue;
}
if( IKabs(((-1.0)*(x13719.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13720.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13719.value)))+IKsqr(((x13720.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13719.value)), ((x13720.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13721=IKsin(j4);
IkReal x13722=IKcos(j4);
IkReal x13723=(cj5*r00);
IkReal x13724=((1.0)*cj1);
IkReal x13725=(cj5*r10);
IkReal x13726=((1.0)*x13722);
IkReal x13727=(sj5*x13722);
IkReal x13728=((1.0)*sj5*x13721);
evalcond[0]=((-1.0)*r22*x13722);
evalcond[1]=((((-1.0)*r11*x13728))+((x13721*x13725)));
evalcond[2]=(((r01*x13727))+(((-1.0)*x13723*x13726)));
evalcond[3]=((1.0)+(((-1.0)*r01*x13728))+((x13721*x13723)));
evalcond[4]=((((-1.0)*sj2*x13724))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x13721)));
evalcond[5]=((((-1.0)*cj2*x13724))+(((-1.0)*x13725*x13726))+((r11*x13727))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13729=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13729);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13729);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13730=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13730);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13730);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13731=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x13731))+((cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x13731)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13732=((1.0)*sj5);
CheckValue<IkReal> x13733=IKPowWithIntegerCheck(((((-1.0)*r01*x13732))+((cj5*r00))),-1);
if(!x13733.valid){
continue;
}
CheckValue<IkReal> x13734=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x13732))),-1);
if(!x13734.valid){
continue;
}
if( IKabs(((-1.0)*(x13733.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13734.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13733.value)))+IKsqr(((x13734.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13733.value)), ((x13734.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13735=IKsin(j4);
IkReal x13736=IKcos(j4);
IkReal x13737=((1.0)*sj5);
IkReal x13738=(cj5*r00);
IkReal x13739=((1.0)*cj2);
IkReal x13740=(cj5*r10);
evalcond[0]=((-1.0)*r22*x13736);
evalcond[1]=(((x13735*x13740))+(((-1.0)*r11*x13735*x13737)));
evalcond[2]=((((-1.0)*sj1*x13739))+((r22*x13735))+(((-1.0)*cj1*sj2)));
evalcond[3]=(((x13736*x13738))+(((-1.0)*r01*x13736*x13737)));
evalcond[4]=((1.0)+((x13735*x13738))+(((-1.0)*r01*x13735*x13737)));
evalcond[5]=(((x13736*x13740))+(((-1.0)*r11*x13736*x13737))+((sj1*sj2))+(((-1.0)*cj1*x13739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13741=IKPowWithIntegerCheck(r22,-1);
if(!x13741.valid){
continue;
}
CheckValue<IkReal> x13742=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x13742.valid){
continue;
}
if( IKabs(((x13741.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13742.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13741.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13742.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13741.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13742.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13743=IKsin(j4);
IkReal x13744=IKcos(j4);
IkReal x13745=((1.0)*sj5);
IkReal x13746=(cj5*r00);
IkReal x13747=((1.0)*cj2);
IkReal x13748=(cj5*r10);
evalcond[0]=((-1.0)*r22*x13744);
evalcond[1]=((((-1.0)*r11*x13743*x13745))+((x13743*x13748)));
evalcond[2]=((((-1.0)*cj1*sj2))+((r22*x13743))+(((-1.0)*sj1*x13747)));
evalcond[3]=(((x13744*x13746))+(((-1.0)*r01*x13744*x13745)));
evalcond[4]=((1.0)+(((-1.0)*r01*x13743*x13745))+((x13743*x13746)));
evalcond[5]=(((x13744*x13748))+(((-1.0)*cj1*x13747))+((sj1*sj2))+(((-1.0)*r11*x13744*x13745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13749=((1.0)*r00);
CheckValue<IkReal> x13750=IKPowWithIntegerCheck(r22,-1);
if(!x13750.valid){
continue;
}
CheckValue<IkReal> x13751=IKPowWithIntegerCheck(sj3,-1);
if(!x13751.valid){
continue;
}
CheckValue<IkReal> x13752=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x13749))),-1);
if(!x13752.valid){
continue;
}
if( IKabs(((x13750.value)*(x13751.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13752.value)*(((((-1.0)*sj3*sj5*x13749))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13750.value)*(x13751.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13752.value)*(((((-1.0)*sj3*sj5*x13749))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13750.value)*(x13751.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13752.value)*(((((-1.0)*sj3*sj5*x13749))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13753=IKsin(j4);
IkReal x13754=IKcos(j4);
IkReal x13755=(sj1*sj2);
IkReal x13756=(cj5*sj3);
IkReal x13757=((1.0)*r11);
IkReal x13758=(cj3*cj5);
IkReal x13759=((1.0)*r10);
IkReal x13760=(cj3*sj5);
IkReal x13761=((1.0)*cj1);
IkReal x13762=((1.0)*r01);
IkReal x13763=(sj3*sj5);
IkReal x13764=(cj2*sj1);
IkReal x13765=((1.0)*r00);
IkReal x13766=(cj2*x13761);
IkReal x13767=(sj5*x13753);
IkReal x13768=(r11*x13754);
IkReal x13769=(cj5*x13753);
IkReal x13770=(r01*x13754);
IkReal x13771=((1.0)*r22*x13753);
evalcond[0]=((-1.0)*r22*x13754);
evalcond[1]=((((-1.0)*x13757*x13767))+((r10*x13769)));
evalcond[2]=((1.0)+((r00*x13769))+(((-1.0)*x13762*x13767)));
evalcond[3]=(x13755+(((-1.0)*sj3*x13771))+(((-1.0)*x13766)));
evalcond[4]=((((-1.0)*x13764))+(((-1.0)*sj2*x13761))+(((-1.0)*cj3*x13771)));
evalcond[5]=(((x13760*x13770))+((r00*x13763))+(((-1.0)*x13754*x13758*x13765))+((r01*x13756)));
evalcond[6]=((((-1.0)*x13758*x13762))+((x13763*x13770))+(((-1.0)*x13754*x13756*x13765))+(((-1.0)*x13760*x13765)));
evalcond[7]=(((r11*x13756))+((x13760*x13768))+x13755+((r10*x13763))+(((-1.0)*x13754*x13758*x13759))+(((-1.0)*x13766)));
evalcond[8]=(x13764+(((-1.0)*x13759*x13760))+((cj1*sj2))+(((-1.0)*x13757*x13758))+(((-1.0)*x13754*x13756*x13759))+((x13763*x13768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13772=((1.0)*sj5);
IkReal x13773=(cj5*r00);
CheckValue<IkReal> x13774=IKPowWithIntegerCheck(((((-1.0)*r01*x13772))+x13773),-1);
if(!x13774.valid){
continue;
}
CheckValue<IkReal> x13775=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*x13773))),-1);
if(!x13775.valid){
continue;
}
if( IKabs(((-1.0)*(x13774.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13775.value)*(((((-1.0)*r00*sj3*x13772))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13774.value)))+IKsqr(((x13775.value)*(((((-1.0)*r00*sj3*x13772))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13774.value)), ((x13775.value)*(((((-1.0)*r00*sj3*x13772))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13776=IKsin(j4);
IkReal x13777=IKcos(j4);
IkReal x13778=(sj1*sj2);
IkReal x13779=(cj5*sj3);
IkReal x13780=((1.0)*r11);
IkReal x13781=(cj3*cj5);
IkReal x13782=((1.0)*r10);
IkReal x13783=(cj3*sj5);
IkReal x13784=((1.0)*cj1);
IkReal x13785=((1.0)*r01);
IkReal x13786=(sj3*sj5);
IkReal x13787=(cj2*sj1);
IkReal x13788=((1.0)*r00);
IkReal x13789=(cj2*x13784);
IkReal x13790=(sj5*x13776);
IkReal x13791=(r11*x13777);
IkReal x13792=(cj5*x13776);
IkReal x13793=(r01*x13777);
IkReal x13794=((1.0)*r22*x13776);
evalcond[0]=((-1.0)*r22*x13777);
evalcond[1]=((((-1.0)*x13780*x13790))+((r10*x13792)));
evalcond[2]=((1.0)+((r00*x13792))+(((-1.0)*x13785*x13790)));
evalcond[3]=(x13778+(((-1.0)*sj3*x13794))+(((-1.0)*x13789)));
evalcond[4]=((((-1.0)*cj3*x13794))+(((-1.0)*sj2*x13784))+(((-1.0)*x13787)));
evalcond[5]=(((r00*x13786))+((x13783*x13793))+((r01*x13779))+(((-1.0)*x13777*x13781*x13788)));
evalcond[6]=((((-1.0)*x13783*x13788))+(((-1.0)*x13781*x13785))+(((-1.0)*x13777*x13779*x13788))+((x13786*x13793)));
evalcond[7]=(((r11*x13779))+x13778+((x13783*x13791))+(((-1.0)*x13789))+(((-1.0)*x13777*x13781*x13782))+((r10*x13786)));
evalcond[8]=(x13787+((cj1*sj2))+(((-1.0)*x13782*x13783))+(((-1.0)*x13777*x13779*x13782))+((x13786*x13791))+(((-1.0)*x13780*x13781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13795=(r01*sj5);
IkReal x13796=(cj5*r00);
CheckValue<IkReal> x13797=IKPowWithIntegerCheck((x13796+(((-1.0)*x13795))),-1);
if(!x13797.valid){
continue;
}
CheckValue<IkReal> x13798=IKPowWithIntegerCheck(((((-1.0)*sj3*x13796))+((sj3*x13795))),-1);
if(!x13798.valid){
continue;
}
if( IKabs(((-1.0)*(x13797.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13798.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13797.value)))+IKsqr(((x13798.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13797.value)), ((x13798.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13799=IKsin(j4);
IkReal x13800=IKcos(j4);
IkReal x13801=(sj1*sj2);
IkReal x13802=(cj5*sj3);
IkReal x13803=((1.0)*r11);
IkReal x13804=(cj3*cj5);
IkReal x13805=((1.0)*r10);
IkReal x13806=(cj3*sj5);
IkReal x13807=((1.0)*cj1);
IkReal x13808=((1.0)*r01);
IkReal x13809=(sj3*sj5);
IkReal x13810=(cj2*sj1);
IkReal x13811=((1.0)*r00);
IkReal x13812=(cj2*x13807);
IkReal x13813=(sj5*x13799);
IkReal x13814=(r11*x13800);
IkReal x13815=(cj5*x13799);
IkReal x13816=(r01*x13800);
IkReal x13817=((1.0)*r22*x13799);
evalcond[0]=((-1.0)*r22*x13800);
evalcond[1]=(((r10*x13815))+(((-1.0)*x13803*x13813)));
evalcond[2]=((1.0)+(((-1.0)*x13808*x13813))+((r00*x13815)));
evalcond[3]=((((-1.0)*x13812))+x13801+(((-1.0)*sj3*x13817)));
evalcond[4]=((((-1.0)*x13810))+(((-1.0)*cj3*x13817))+(((-1.0)*sj2*x13807)));
evalcond[5]=(((r01*x13802))+((r00*x13809))+(((-1.0)*x13800*x13804*x13811))+((x13806*x13816)));
evalcond[6]=((((-1.0)*x13800*x13802*x13811))+(((-1.0)*x13804*x13808))+(((-1.0)*x13806*x13811))+((x13809*x13816)));
evalcond[7]=((((-1.0)*x13800*x13804*x13805))+(((-1.0)*x13812))+((r11*x13802))+x13801+((x13806*x13814))+((r10*x13809)));
evalcond[8]=((((-1.0)*x13805*x13806))+x13810+((cj1*sj2))+(((-1.0)*x13800*x13802*x13805))+(((-1.0)*x13803*x13804))+((x13809*x13814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13818=cj5*cj5;
IkReal x13819=(cj3*r00);
IkReal x13820=(r01*sj3);
IkReal x13821=(r00*sj3);
IkReal x13822=(cj3*r01);
IkReal x13823=(cj5*r20*sj5);
IkReal x13824=(r21*x13818);
IkReal x13825=(r20*x13818);
IkReal x13826=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x13827 = IKatan2WithCheck(IkReal((((r22*sj5*x13821))+((cj5*r22*x13820)))),IkReal((((x13820*x13825))+((x13821*x13824))+((x13821*x13823))+(((-1.0)*x13820*x13826))+(((-1.0)*r21*x13821)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13827.valid){
continue;
}
CheckValue<IkReal> x13828=IKPowWithIntegerCheck(IKsign((((r21*x13822))+(((-1.0)*x13822*x13823))+(((-1.0)*x13822*x13824))+((x13819*x13825))+((cj3*r02*r22))+(((-1.0)*x13819*x13826)))),-1);
if(!x13828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13827.value)+(((1.5707963267949)*(x13828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13829=IKsin(j4);
IkReal x13830=IKcos(j4);
IkReal x13831=(sj1*sj2);
IkReal x13832=(r11*sj5);
IkReal x13833=(cj5*sj3);
IkReal x13834=((1.0)*cj1);
IkReal x13835=(r21*sj5);
IkReal x13836=(r01*sj5);
IkReal x13837=(sj3*sj5);
IkReal x13838=(cj2*sj1);
IkReal x13839=(cj3*cj5);
IkReal x13840=(cj2*x13834);
IkReal x13841=((1.0)*x13830);
IkReal x13842=((1.0)*x13829);
IkReal x13843=(cj3*x13830);
IkReal x13844=((1.0)*x13839);
IkReal x13845=((1.0)*cj3*sj5);
IkReal x13846=(cj5*x13829);
IkReal x13847=(sj3*x13830);
evalcond[0]=((((-1.0)*x13835*x13842))+(((-1.0)*r22*x13841))+((r20*x13846)));
evalcond[1]=((((-1.0)*r12*x13841))+(((-1.0)*x13832*x13842))+((r10*x13846)));
evalcond[2]=((1.0)+(((-1.0)*r02*x13841))+(((-1.0)*x13836*x13842))+((r00*x13846)));
evalcond[3]=(((r01*x13833))+(((-1.0)*cj3*r02*x13842))+((x13836*x13843))+(((-1.0)*r00*x13839*x13841))+((r00*x13837)));
evalcond[4]=((((-1.0)*r00*x13833*x13841))+((x13836*x13847))+(((-1.0)*r02*sj3*x13842))+(((-1.0)*r01*x13844))+(((-1.0)*r00*x13845)));
evalcond[5]=((((-1.0)*x13840))+x13831+(((-1.0)*r10*x13839*x13841))+(((-1.0)*cj3*r12*x13842))+((r11*x13833))+((r10*x13837))+((x13832*x13843)));
evalcond[6]=((((-1.0)*r20*x13839*x13841))+(((-1.0)*cj3*r22*x13842))+(((-1.0)*sj2*x13834))+((r21*x13833))+((x13835*x13843))+((r20*x13837))+(((-1.0)*x13838)));
evalcond[7]=(x13838+(((-1.0)*r11*x13844))+((cj1*sj2))+(((-1.0)*r12*sj3*x13842))+(((-1.0)*r10*x13845))+(((-1.0)*r10*x13833*x13841))+((x13832*x13847)));
evalcond[8]=((((-1.0)*x13840))+x13831+(((-1.0)*r22*sj3*x13842))+(((-1.0)*r21*x13844))+(((-1.0)*r20*x13845))+(((-1.0)*r20*x13833*x13841))+((x13835*x13847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13848=((1.0)*sj5);
CheckValue<IkReal> x13849=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13848)))),-1);
if(!x13849.valid){
continue;
}
CheckValue<IkReal> x13850 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x13848)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13849.value)))+(x13850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13851=IKsin(j4);
IkReal x13852=IKcos(j4);
IkReal x13853=(sj1*sj2);
IkReal x13854=(r11*sj5);
IkReal x13855=(cj5*sj3);
IkReal x13856=((1.0)*cj1);
IkReal x13857=(r21*sj5);
IkReal x13858=(r01*sj5);
IkReal x13859=(sj3*sj5);
IkReal x13860=(cj2*sj1);
IkReal x13861=(cj3*cj5);
IkReal x13862=(cj2*x13856);
IkReal x13863=((1.0)*x13852);
IkReal x13864=((1.0)*x13851);
IkReal x13865=(cj3*x13852);
IkReal x13866=((1.0)*x13861);
IkReal x13867=((1.0)*cj3*sj5);
IkReal x13868=(cj5*x13851);
IkReal x13869=(sj3*x13852);
evalcond[0]=((((-1.0)*r22*x13863))+(((-1.0)*x13857*x13864))+((r20*x13868)));
evalcond[1]=((((-1.0)*r12*x13863))+(((-1.0)*x13854*x13864))+((r10*x13868)));
evalcond[2]=((1.0)+((r00*x13868))+(((-1.0)*x13858*x13864))+(((-1.0)*r02*x13863)));
evalcond[3]=(((r00*x13859))+((r01*x13855))+(((-1.0)*r00*x13861*x13863))+((x13858*x13865))+(((-1.0)*cj3*r02*x13864)));
evalcond[4]=((((-1.0)*r00*x13867))+(((-1.0)*r00*x13855*x13863))+((x13858*x13869))+(((-1.0)*r02*sj3*x13864))+(((-1.0)*r01*x13866)));
evalcond[5]=(x13853+((r11*x13855))+((x13854*x13865))+(((-1.0)*cj3*r12*x13864))+(((-1.0)*r10*x13861*x13863))+((r10*x13859))+(((-1.0)*x13862)));
evalcond[6]=((((-1.0)*cj3*r22*x13864))+(((-1.0)*x13860))+(((-1.0)*sj2*x13856))+((r21*x13855))+((x13857*x13865))+((r20*x13859))+(((-1.0)*r20*x13861*x13863)));
evalcond[7]=((((-1.0)*r11*x13866))+x13860+((cj1*sj2))+((x13854*x13869))+(((-1.0)*r12*sj3*x13864))+(((-1.0)*r10*x13867))+(((-1.0)*r10*x13855*x13863)));
evalcond[8]=(x13853+((x13857*x13869))+(((-1.0)*r20*x13855*x13863))+(((-1.0)*r22*sj3*x13864))+(((-1.0)*r21*x13866))+(((-1.0)*r20*x13867))+(((-1.0)*x13862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13870 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13870.valid){
continue;
}
CheckValue<IkReal> x13871=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13870.value)+(((1.5707963267949)*(x13871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13872=IKsin(j4);
IkReal x13873=IKcos(j4);
IkReal x13874=(sj1*sj2);
IkReal x13875=(r11*sj5);
IkReal x13876=(cj5*sj3);
IkReal x13877=((1.0)*cj1);
IkReal x13878=(r21*sj5);
IkReal x13879=(r01*sj5);
IkReal x13880=(sj3*sj5);
IkReal x13881=(cj2*sj1);
IkReal x13882=(cj3*cj5);
IkReal x13883=(cj2*x13877);
IkReal x13884=((1.0)*x13873);
IkReal x13885=((1.0)*x13872);
IkReal x13886=(cj3*x13873);
IkReal x13887=((1.0)*x13882);
IkReal x13888=((1.0)*cj3*sj5);
IkReal x13889=(cj5*x13872);
IkReal x13890=(sj3*x13873);
evalcond[0]=((((-1.0)*x13878*x13885))+((r20*x13889))+(((-1.0)*r22*x13884)));
evalcond[1]=(((r10*x13889))+(((-1.0)*x13875*x13885))+(((-1.0)*r12*x13884)));
evalcond[2]=((1.0)+(((-1.0)*x13879*x13885))+(((-1.0)*r02*x13884))+((r00*x13889)));
evalcond[3]=(((r01*x13876))+((x13879*x13886))+((r00*x13880))+(((-1.0)*cj3*r02*x13885))+(((-1.0)*r00*x13882*x13884)));
evalcond[4]=((((-1.0)*r00*x13876*x13884))+(((-1.0)*r00*x13888))+(((-1.0)*r01*x13887))+((x13879*x13890))+(((-1.0)*r02*sj3*x13885)));
evalcond[5]=(x13874+((r10*x13880))+((r11*x13876))+(((-1.0)*cj3*r12*x13885))+(((-1.0)*r10*x13882*x13884))+(((-1.0)*x13883))+((x13875*x13886)));
evalcond[6]=(((r21*x13876))+((x13878*x13886))+((r20*x13880))+(((-1.0)*sj2*x13877))+(((-1.0)*cj3*r22*x13885))+(((-1.0)*r20*x13882*x13884))+(((-1.0)*x13881)));
evalcond[7]=((((-1.0)*r11*x13887))+x13881+((cj1*sj2))+(((-1.0)*r10*x13888))+(((-1.0)*r10*x13876*x13884))+(((-1.0)*r12*sj3*x13885))+((x13875*x13890)));
evalcond[8]=((((-1.0)*r22*sj3*x13885))+x13874+((x13878*x13890))+(((-1.0)*r20*x13888))+(((-1.0)*r21*x13887))+(((-1.0)*r20*x13876*x13884))+(((-1.0)*x13883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x13891=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13891;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x13891);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x13892=((1.0)*sj5);
IkReal x13893=((((-1.0)*r20*x13892))+(((-1.0)*cj5*r21)));
j4eval[0]=x13893;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x13892))))));
j4eval[2]=IKsign(x13893);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x13894=cj5*cj5;
IkReal x13895=(cj3*r00);
IkReal x13896=(cj3*r01);
IkReal x13897=((1.0)*cj5*sj5);
IkReal x13898=((((-1.0)*r20*x13896*x13897))+(((-1.0)*r21*x13894*x13896))+((r21*x13896))+((cj3*r02*r22))+(((-1.0)*r21*x13895*x13897))+((r20*x13894*x13895)));
j4eval[0]=x13898;
j4eval[1]=IKsign(x13898);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13899=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13899;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x13899);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13900=((1.0)*sj5);
IkReal x13901=((((-1.0)*cj5*r21))+(((-1.0)*r20*x13900)));
j4eval[0]=x13901;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x13900)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13901);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13902=cj5*cj5;
IkReal x13903=r01*r01;
IkReal x13904=(r01*sj5);
IkReal x13905=(cj5*r00);
IkReal x13906=((((-1.0)*(r02*r02)))+(((-1.0)*x13903))+(((2.0)*x13904*x13905))+((x13902*x13903))+(((-1.0)*x13902*(r00*r00))));
j4eval[0]=x13906;
j4eval[1]=IKsign(x13906);
j4eval[2]=((IKabs(r02))+(IKabs((x13904+(((-1.0)*x13905))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13907=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13907);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13907);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13908=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13908);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13908);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13909=IKPowWithIntegerCheck(r22,-1);
if(!x13909.valid){
continue;
}
CheckValue<IkReal> x13910=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13910.valid){
continue;
}
if( IKabs(((x13909.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13910.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13909.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13910.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13909.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13910.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13911=IKsin(j4);
IkReal x13912=IKcos(j4);
IkReal x13913=((1.0)*cj1);
IkReal x13914=(sj5*x13912);
IkReal x13915=(cj5*x13911);
IkReal x13916=((1.0)*sj5*x13911);
IkReal x13917=((1.0)*cj5*x13912);
evalcond[0]=((-1.0)*r22*x13912);
evalcond[1]=(((r10*x13915))+(((-1.0)*r11*x13916)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x13911))+(((-1.0)*cj2*x13913)));
evalcond[3]=((((-1.0)*r00*x13917))+((r01*x13914)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x13916))+((r00*x13915)));
evalcond[5]=((((-1.0)*r10*x13917))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x13913))+((r11*x13914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13918=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13918.valid){
continue;
}
CheckValue<IkReal> x13919=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13919.valid){
continue;
}
if( IKabs(x13918.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13919.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13918.value)+IKsqr(((x13919.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13918.value, ((x13919.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13920=IKsin(j4);
IkReal x13921=IKcos(j4);
IkReal x13922=((1.0)*cj1);
IkReal x13923=(sj5*x13921);
IkReal x13924=(cj5*x13920);
IkReal x13925=((1.0)*sj5*x13920);
IkReal x13926=((1.0)*cj5*x13921);
evalcond[0]=((-1.0)*r22*x13921);
evalcond[1]=(((r10*x13924))+(((-1.0)*r11*x13925)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x13920))+(((-1.0)*cj2*x13922)));
evalcond[3]=(((r01*x13923))+(((-1.0)*r00*x13926)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x13925))+((r00*x13924)));
evalcond[5]=((((-1.0)*sj2*x13922))+(((-1.0)*cj2*sj1))+(((-1.0)*r10*x13926))+((r11*x13923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13927=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13927);
rxp0_2=(py*r00);
rxp1_0=(r21*x13927);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13928=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13928);
rxp0_2=(py*r00);
rxp1_0=(r21*x13928);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13929=((1.0)*sj1);
CheckValue<IkReal> x13930=IKPowWithIntegerCheck(r12,-1);
if(!x13930.valid){
continue;
}
CheckValue<IkReal> x13931=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x13931.valid){
continue;
}
if( IKabs(((x13930.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13929)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13931.value)*(((((-1.0)*sj2*x13929))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13930.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13929))))))+IKsqr(((x13931.value)*(((((-1.0)*sj2*x13929))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13930.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13929))))), ((x13931.value)*(((((-1.0)*sj2*x13929))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13932=IKsin(j4);
IkReal x13933=IKcos(j4);
IkReal x13934=(r01*sj5);
IkReal x13935=((1.0)*cj1);
IkReal x13936=(r21*sj5);
IkReal x13937=((1.0)*x13932);
IkReal x13938=(cj5*x13932);
IkReal x13939=((1.0)*cj5*x13933);
evalcond[0]=((-1.0)*r12*x13933);
evalcond[1]=(((r20*x13938))+(((-1.0)*x13936*x13937)));
evalcond[2]=(((x13933*x13934))+(((-1.0)*r00*x13939)));
evalcond[3]=((-1.0)+(((-1.0)*x13934*x13937))+((r00*x13938)));
evalcond[4]=((((-1.0)*sj2*x13935))+(((-1.0)*r12*x13937))+(((-1.0)*cj2*sj1)));
evalcond[5]=((((-1.0)*r20*x13939))+((x13933*x13936))+((sj1*sj2))+(((-1.0)*cj2*x13935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13940=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13940.valid){
continue;
}
CheckValue<IkReal> x13941=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x13941.valid){
continue;
}
if( IKabs(x13940.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13941.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13940.value)+IKsqr(((x13941.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13940.value, ((x13941.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13942=IKsin(j4);
IkReal x13943=IKcos(j4);
IkReal x13944=(r01*sj5);
IkReal x13945=((1.0)*cj1);
IkReal x13946=(r21*sj5);
IkReal x13947=((1.0)*x13942);
IkReal x13948=(cj5*x13942);
IkReal x13949=((1.0)*cj5*x13943);
evalcond[0]=((-1.0)*r12*x13943);
evalcond[1]=(((r20*x13948))+(((-1.0)*x13946*x13947)));
evalcond[2]=(((x13943*x13944))+(((-1.0)*r00*x13949)));
evalcond[3]=((-1.0)+(((-1.0)*x13944*x13947))+((r00*x13948)));
evalcond[4]=((((-1.0)*r12*x13947))+(((-1.0)*sj2*x13945))+(((-1.0)*cj2*sj1)));
evalcond[5]=(((x13943*x13946))+((sj1*sj2))+(((-1.0)*r20*x13949))+(((-1.0)*cj2*x13945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13950=cj5*cj5;
IkReal x13951=r01*r01;
IkReal x13952=(r01*sj5);
IkReal x13953=(cj5*r00);
CheckValue<IkReal> x13954=IKPowWithIntegerCheck(IKsign(((((2.0)*x13952*x13953))+(((-1.0)*(r02*r02)))+((x13950*x13951))+(((-1.0)*x13950*(r00*r00)))+(((-1.0)*x13951)))),-1);
if(!x13954.valid){
continue;
}
CheckValue<IkReal> x13955 = IKatan2WithCheck(IkReal((x13952+(((-1.0)*x13953)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13954.value)))+(x13955.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13956=IKsin(j4);
IkReal x13957=IKcos(j4);
IkReal x13958=(cj5*r00);
IkReal x13959=((1.0)*cj1);
IkReal x13960=(cj5*r20);
IkReal x13961=(cj5*r10);
IkReal x13962=((1.0)*x13957);
IkReal x13963=(sj5*x13957);
IkReal x13964=((1.0)*x13956);
IkReal x13965=(sj5*x13964);
evalcond[0]=((((-1.0)*r21*x13965))+(((-1.0)*r22*x13962))+((x13956*x13960)));
evalcond[1]=((((-1.0)*r11*x13965))+(((-1.0)*r12*x13962))+((x13956*x13961)));
evalcond[2]=((((-1.0)*r02*x13964))+((r01*x13963))+(((-1.0)*x13958*x13962)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13962))+((x13956*x13958))+(((-1.0)*r01*x13965)));
evalcond[4]=((((-1.0)*cj2*x13959))+(((-1.0)*r22*x13964))+((sj1*sj2))+(((-1.0)*x13960*x13962))+((r21*x13963)));
evalcond[5]=((((-1.0)*r12*x13964))+(((-1.0)*cj2*sj1))+((r11*x13963))+(((-1.0)*sj2*x13959))+(((-1.0)*x13961*x13962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13966=((1.0)*sj5);
CheckValue<IkReal> x13967=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13966))+(((-1.0)*cj5*r21)))),-1);
if(!x13967.valid){
continue;
}
CheckValue<IkReal> x13968 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x13966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13967.value)))+(x13968.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13969=IKsin(j4);
IkReal x13970=IKcos(j4);
IkReal x13971=(cj5*r00);
IkReal x13972=((1.0)*cj1);
IkReal x13973=(cj5*r20);
IkReal x13974=(cj5*r10);
IkReal x13975=((1.0)*x13970);
IkReal x13976=(sj5*x13970);
IkReal x13977=((1.0)*x13969);
IkReal x13978=(sj5*x13977);
evalcond[0]=((((-1.0)*r21*x13978))+(((-1.0)*r22*x13975))+((x13969*x13973)));
evalcond[1]=((((-1.0)*r12*x13975))+(((-1.0)*r11*x13978))+((x13969*x13974)));
evalcond[2]=((((-1.0)*x13971*x13975))+(((-1.0)*r02*x13977))+((r01*x13976)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13975))+((x13969*x13971))+(((-1.0)*r01*x13978)));
evalcond[4]=((((-1.0)*x13973*x13975))+(((-1.0)*r22*x13977))+((sj1*sj2))+(((-1.0)*cj2*x13972))+((r21*x13976)));
evalcond[5]=((((-1.0)*sj2*x13972))+(((-1.0)*r12*x13977))+(((-1.0)*cj2*sj1))+((r11*x13976))+(((-1.0)*x13974*x13975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13979=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13979.valid){
continue;
}
CheckValue<IkReal> x13980 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13979.value)))+(x13980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13981=IKsin(j4);
IkReal x13982=IKcos(j4);
IkReal x13983=(cj5*r00);
IkReal x13984=((1.0)*cj1);
IkReal x13985=(cj5*r20);
IkReal x13986=(cj5*r10);
IkReal x13987=((1.0)*x13982);
IkReal x13988=(sj5*x13982);
IkReal x13989=((1.0)*x13981);
IkReal x13990=(sj5*x13989);
evalcond[0]=((((-1.0)*r21*x13990))+((x13981*x13985))+(((-1.0)*r22*x13987)));
evalcond[1]=((((-1.0)*r11*x13990))+((x13981*x13986))+(((-1.0)*r12*x13987)));
evalcond[2]=(((r01*x13988))+(((-1.0)*r02*x13989))+(((-1.0)*x13983*x13987)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13987))+(((-1.0)*r01*x13990))+((x13981*x13983)));
evalcond[4]=((((-1.0)*x13985*x13987))+(((-1.0)*cj2*x13984))+((r21*x13988))+((sj1*sj2))+(((-1.0)*r22*x13989)));
evalcond[5]=(((r11*x13988))+(((-1.0)*cj2*sj1))+(((-1.0)*x13986*x13987))+(((-1.0)*r12*x13989))+(((-1.0)*sj2*x13984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13991=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13991;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x13991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13992=((1.0)*sj5);
IkReal x13993=((((-1.0)*r20*x13992))+(((-1.0)*cj5*r21)));
j4eval[0]=x13993;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x13992))))));
j4eval[2]=IKsign(x13993);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13994=cj5*cj5;
IkReal x13995=r01*r01;
IkReal x13996=(cj5*r00);
IkReal x13997=(r01*sj5);
IkReal x13998=(((x13994*(r00*r00)))+(((-2.0)*x13996*x13997))+x13995+(((-1.0)*x13994*x13995))+(r02*r02));
j4eval[0]=x13998;
j4eval[1]=((IKabs(r02))+(IKabs((x13996+(((-1.0)*x13997))))));
j4eval[2]=IKsign(x13998);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13999=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13999);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13999);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14000=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x14000))+((cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x14000)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14001=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14001);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14001);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14002=IKPowWithIntegerCheck(r22,-1);
if(!x14002.valid){
continue;
}
CheckValue<IkReal> x14003=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x14003.valid){
continue;
}
if( IKabs(((x14002.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14003.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14002.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14003.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14002.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14003.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14004=IKsin(j4);
IkReal x14005=IKcos(j4);
IkReal x14006=((1.0)*sj5);
IkReal x14007=(cj5*r00);
IkReal x14008=(cj5*r10);
IkReal x14009=((1.0)*cj1);
evalcond[0]=((-1.0)*r22*x14005);
evalcond[1]=((((-1.0)*cj2*x14009))+((sj1*sj2))+((r22*x14004)));
evalcond[2]=((((-1.0)*r11*x14004*x14006))+((x14004*x14008)));
evalcond[3]=((((-1.0)*r01*x14005*x14006))+((x14005*x14007)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x14004*x14006))+((x14004*x14007)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x14009))+((x14005*x14008))+(((-1.0)*r11*x14005*x14006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14010=((1.0)*sj5);
CheckValue<IkReal> x14011=IKPowWithIntegerCheck(((((-1.0)*r01*x14010))+((cj5*r00))),-1);
if(!x14011.valid){
continue;
}
CheckValue<IkReal> x14012=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x14010))),-1);
if(!x14012.valid){
continue;
}
if( IKabs(x14011.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14012.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14011.value)+IKsqr(((x14012.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14011.value, ((x14012.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14013=IKsin(j4);
IkReal x14014=IKcos(j4);
IkReal x14015=((1.0)*sj5);
IkReal x14016=(cj5*r00);
IkReal x14017=(cj5*r10);
IkReal x14018=((1.0)*cj1);
evalcond[0]=((-1.0)*r22*x14014);
evalcond[1]=((((-1.0)*cj2*x14018))+((r22*x14013))+((sj1*sj2)));
evalcond[2]=(((x14013*x14017))+(((-1.0)*r11*x14013*x14015)));
evalcond[3]=(((x14014*x14016))+(((-1.0)*r01*x14014*x14015)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x14013*x14015))+((x14013*x14016)));
evalcond[5]=((((-1.0)*sj2*x14018))+(((-1.0)*cj2*sj1))+((x14014*x14017))+(((-1.0)*r11*x14014*x14015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14019=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14019);
rxp0_2=(py*r00);
rxp1_0=(r21*x14019);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14020=((1.0)*sj5);
j4eval[0]=((((-1.0)*r01*x14020))+((cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*x14020)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14021=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14021);
rxp0_2=(py*r00);
rxp1_0=(r21*x14021);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14022=IKPowWithIntegerCheck(r12,-1);
if(!x14022.valid){
continue;
}
CheckValue<IkReal> x14023=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14023.valid){
continue;
}
if( IKabs(((x14022.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14023.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14022.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x14023.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14022.value)*((((cj2*sj1))+((cj1*sj2))))), ((x14023.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14024=IKsin(j4);
IkReal x14025=IKcos(j4);
IkReal x14026=((1.0)*cj1);
IkReal x14027=(cj5*x14025);
IkReal x14028=((1.0)*r01*sj5);
IkReal x14029=(cj5*x14024);
IkReal x14030=((1.0)*r21*sj5);
evalcond[0]=((-1.0)*r12*x14025);
evalcond[1]=(((r20*x14029))+(((-1.0)*x14024*x14030)));
evalcond[2]=(((r00*x14027))+(((-1.0)*x14025*x14028)));
evalcond[3]=((((-1.0)*cj2*sj1))+((r12*x14024))+(((-1.0)*sj2*x14026)));
evalcond[4]=((-1.0)+((r00*x14029))+(((-1.0)*x14024*x14028)));
evalcond[5]=(((r20*x14027))+((sj1*sj2))+(((-1.0)*x14025*x14030))+(((-1.0)*cj2*x14026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14031=((1.0)*sj5);
CheckValue<IkReal> x14032=IKPowWithIntegerCheck(((((-1.0)*r01*x14031))+((cj5*r00))),-1);
if(!x14032.valid){
continue;
}
CheckValue<IkReal> x14033=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*x14031))),-1);
if(!x14033.valid){
continue;
}
if( IKabs(x14032.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14033.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14032.value)+IKsqr(((x14033.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14032.value, ((x14033.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14034=IKsin(j4);
IkReal x14035=IKcos(j4);
IkReal x14036=((1.0)*cj1);
IkReal x14037=(cj5*x14035);
IkReal x14038=((1.0)*r01*sj5);
IkReal x14039=(cj5*x14034);
IkReal x14040=((1.0)*r21*sj5);
evalcond[0]=((-1.0)*r12*x14035);
evalcond[1]=(((r20*x14039))+(((-1.0)*x14034*x14040)));
evalcond[2]=(((r00*x14037))+(((-1.0)*x14035*x14038)));
evalcond[3]=((((-1.0)*cj2*sj1))+((r12*x14034))+(((-1.0)*sj2*x14036)));
evalcond[4]=((-1.0)+((r00*x14039))+(((-1.0)*x14034*x14038)));
evalcond[5]=((((-1.0)*cj2*x14036))+(((-1.0)*x14035*x14040))+((r20*x14037))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14041=cj5*cj5;
IkReal x14042=r01*r01;
IkReal x14043=(r01*sj5);
IkReal x14044=(cj5*r00);
CheckValue<IkReal> x14045 = IKatan2WithCheck(IkReal(((((-1.0)*x14043))+x14044)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14045.valid){
continue;
}
CheckValue<IkReal> x14046=IKPowWithIntegerCheck(IKsign((((x14041*(r00*r00)))+(((-1.0)*x14041*x14042))+(r02*r02)+x14042+(((-2.0)*x14043*x14044)))),-1);
if(!x14046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14045.value)+(((1.5707963267949)*(x14046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14047=IKcos(j4);
IkReal x14048=IKsin(j4);
IkReal x14049=((1.0)*cj1);
IkReal x14050=((1.0)*x14047);
IkReal x14051=(cj5*x14047);
IkReal x14052=(cj5*x14048);
IkReal x14053=((1.0)*sj5*x14048);
evalcond[0]=(((r00*x14051))+(((-1.0)*r01*sj5*x14050))+((r02*x14048)));
evalcond[1]=(((r20*x14052))+(((-1.0)*r21*x14053))+(((-1.0)*r22*x14050)));
evalcond[2]=((((-1.0)*r12*x14050))+((r10*x14052))+(((-1.0)*r11*x14053)));
evalcond[3]=((-1.0)+((r00*x14052))+(((-1.0)*r02*x14050))+(((-1.0)*r01*x14053)));
evalcond[4]=((((-1.0)*cj2*x14049))+((r22*x14048))+((r20*x14051))+(((-1.0)*r21*sj5*x14050))+((sj1*sj2)));
evalcond[5]=((((-1.0)*r11*sj5*x14050))+((r10*x14051))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x14049))+((r12*x14048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14054=((1.0)*sj5);
CheckValue<IkReal> x14055=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14054))+(((-1.0)*cj5*r21)))),-1);
if(!x14055.valid){
continue;
}
CheckValue<IkReal> x14056 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x14054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14055.value)))+(x14056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14057=IKcos(j4);
IkReal x14058=IKsin(j4);
IkReal x14059=((1.0)*cj1);
IkReal x14060=((1.0)*x14057);
IkReal x14061=(cj5*x14057);
IkReal x14062=(cj5*x14058);
IkReal x14063=((1.0)*sj5*x14058);
evalcond[0]=((((-1.0)*r01*sj5*x14060))+((r02*x14058))+((r00*x14061)));
evalcond[1]=((((-1.0)*r22*x14060))+((r20*x14062))+(((-1.0)*r21*x14063)));
evalcond[2]=((((-1.0)*r11*x14063))+(((-1.0)*r12*x14060))+((r10*x14062)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x14063))+((r00*x14062))+(((-1.0)*r02*x14060)));
evalcond[4]=(((sj1*sj2))+((r20*x14061))+((r22*x14058))+(((-1.0)*r21*sj5*x14060))+(((-1.0)*cj2*x14059)));
evalcond[5]=(((r12*x14058))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x14060))+(((-1.0)*sj2*x14059))+((r10*x14061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14064=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14064.valid){
continue;
}
CheckValue<IkReal> x14065 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14064.value)))+(x14065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14066=IKcos(j4);
IkReal x14067=IKsin(j4);
IkReal x14068=((1.0)*cj1);
IkReal x14069=((1.0)*x14066);
IkReal x14070=(cj5*x14066);
IkReal x14071=(cj5*x14067);
IkReal x14072=((1.0)*sj5*x14067);
evalcond[0]=(((r02*x14067))+(((-1.0)*r01*sj5*x14069))+((r00*x14070)));
evalcond[1]=((((-1.0)*r22*x14069))+((r20*x14071))+(((-1.0)*r21*x14072)));
evalcond[2]=((((-1.0)*r12*x14069))+(((-1.0)*r11*x14072))+((r10*x14071)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x14072))+((r00*x14071))+(((-1.0)*r02*x14069)));
evalcond[4]=(((r22*x14067))+((sj1*sj2))+(((-1.0)*cj2*x14068))+((r20*x14070))+(((-1.0)*r21*sj5*x14069)));
evalcond[5]=((((-1.0)*sj2*x14068))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x14069))+((r10*x14070))+((r12*x14067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14073=((-1.0)*r20);
IkReal x14075 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14075)==0){
continue;
}
IkReal x14074=pow(x14075,-0.5);
CheckValue<IkReal> x14076 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14073),IKFAST_ATAN2_MAGTHRESH);
if(!x14076.valid){
continue;
}
IkReal gconst30=((-1.0)*(x14076.value));
IkReal gconst31=(r21*x14074);
IkReal gconst32=(x14073*x14074);
CheckValue<IkReal> x14077 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14077.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14077.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14078=((-1.0)*r20);
IkReal x14079=x14074;
CheckValue<IkReal> x14081 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14078),IKFAST_ATAN2_MAGTHRESH);
if(!x14081.valid){
continue;
}
IkReal x14080=((-1.0)*(x14081.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14080;
IkReal gconst30=x14080;
IkReal gconst31=(r21*x14079);
IkReal gconst32=(x14078*x14079);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14082=((-1.0)*r20);
IkReal x14083=x14074;
CheckValue<IkReal> x14085 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14082),IKFAST_ATAN2_MAGTHRESH);
if(!x14085.valid){
continue;
}
IkReal x14084=((-1.0)*(x14085.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14084;
IkReal gconst30=x14084;
IkReal gconst31=(r21*x14083);
IkReal gconst32=(x14082*x14083);
CheckValue<IkReal> x14093=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14093.valid){
continue;
}
IkReal x14086=x14093.value;
IkReal x14087=(cj3*x14086);
IkReal x14088=(r11*x14087);
IkReal x14089=(r01*x14087);
IkReal x14090=(r00*x14087);
IkReal x14091=(r10*x14087);
IkReal x14092=(r20*r21*x14087);
j4eval[0]=IKsign((((r01*x14088*(r21*r21)))+((cj3*r02*r12))+((r10*r20*r21*x14089))+((r10*x14090*(r20*r20)))+((r00*r20*r21*x14088))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14094=((-1.0)*r20);
IkReal x14095=x14074;
CheckValue<IkReal> x14097 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14094),IKFAST_ATAN2_MAGTHRESH);
if(!x14097.valid){
continue;
}
IkReal x14096=((-1.0)*(x14097.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14096;
IkReal gconst30=x14096;
IkReal gconst31=(r21*x14095);
IkReal gconst32=(x14094*x14095);
CheckValue<IkReal> x14105=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14105.valid){
continue;
}
IkReal x14098=x14105.value;
IkReal x14099=(sj3*x14098);
IkReal x14100=(r11*x14099);
IkReal x14101=(r00*x14099);
IkReal x14102=(r01*x14099);
IkReal x14103=(r10*x14099);
IkReal x14104=(r20*r21*x14099);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x14100*(r21*r21)))+((r10*r20*r21*x14102))+((r10*x14101*(r20*r20)))+((r00*r20*r21*x14100))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14106=((-1.0)*r20);
IkReal x14107=x14074;
CheckValue<IkReal> x14109 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14106),IKFAST_ATAN2_MAGTHRESH);
if(!x14109.valid){
continue;
}
IkReal x14108=((-1.0)*(x14109.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14108;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst30=x14108;
IkReal gconst31=(r21*x14107);
IkReal gconst32=(x14106*x14107);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x14110=((-1.0)*r20);
IkReal x14111=x14074;
CheckValue<IkReal> x14113 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14110),IKFAST_ATAN2_MAGTHRESH);
if(!x14113.valid){
continue;
}
IkReal x14112=((-1.0)*(x14113.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14112;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst30=x14112;
IkReal gconst31=(r21*x14111);
IkReal gconst32=(x14110*x14111);
IkReal x14114=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x14118=IKPowWithIntegerCheck(x14114,-1);
if(!x14118.valid){
continue;
}
IkReal x14115=x14118.value;
IkReal x14116=((1.0)*x14115);
IkReal x14117=((((-2.0)*r00*r01*r20*r21*x14115))+(((-1.0)*(r02*r02)))+(((-1.0)*x14116*(r00*r00)*(r20*r20)))+(((-1.0)*x14116*(r01*r01)*(r21*r21))));
j4eval[0]=x14117;
j4eval[1]=IKsign(x14117);
j4eval[2]=r02;
j4eval[3]=x14114;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14119=((-1.0)*r20);
IkReal x14120=x14074;
CheckValue<IkReal> x14122 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14119),IKFAST_ATAN2_MAGTHRESH);
if(!x14122.valid){
continue;
}
IkReal x14121=((-1.0)*(x14122.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14121;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst30=x14121;
IkReal gconst31=(r21*x14120);
IkReal gconst32=(x14119*x14120);
IkReal x14123=r22*r22;
IkReal x14124=(cj1*cj2*r12);
IkReal x14125=(r12*sj1*sj2);
CheckValue<IkReal> x14129=IKPowWithIntegerCheck(((-1.0)+x14123),-1);
if(!x14129.valid){
continue;
}
IkReal x14126=x14129.value;
if((((1.0)+(((-1.0)*x14123)))) < -0.00001)
continue;
IkReal x14127=IKsqrt(((1.0)+(((-1.0)*x14123))));
IkReal x14128=(r22*x14126*x14127);
j4eval[0]=((IKabs(((((-1.0)*x14125))+x14124)))+(IKabs((((x14125*x14128))+(((-1.0)*x14124*x14128))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14130=(gconst32*r10);
IkReal x14131=(cj1*cj2);
IkReal x14132=(gconst31*r11);
IkReal x14133=((1.0)*sj1*sj2);
CheckValue<IkReal> x14134=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x14130*x14130)+(((-2.0)*x14130*x14132))+(x14132*x14132))),-1);
if(!x14134.valid){
continue;
}
CheckValue<IkReal> x14135 = IKatan2WithCheck(IkReal((((r12*x14131))+(((-1.0)*r12*x14133)))),IkReal(((((-1.0)*x14131*x14132))+((sj1*sj2*x14132))+((x14130*x14131))+(((-1.0)*x14130*x14133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14134.value)))+(x14135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14136=IKsin(j4);
IkReal x14137=IKcos(j4);
IkReal x14138=(gconst32*r20);
IkReal x14139=((1.0)*sj1);
IkReal x14140=((1.0)*x14137);
IkReal x14141=(gconst31*x14137);
IkReal x14142=(gconst32*x14136);
IkReal x14143=((1.0)*x14136);
IkReal x14144=(gconst31*x14143);
evalcond[0]=(((x14136*x14138))+(((-1.0)*r22*x14140))+(((-1.0)*r21*x14144)));
evalcond[1]=(((r10*x14142))+(((-1.0)*r11*x14144))+(((-1.0)*r12*x14140)));
evalcond[2]=(((r01*x14141))+(((-1.0)*gconst32*r00*x14140))+(((-1.0)*r02*x14143)));
evalcond[3]=((-1.0)+((r00*x14142))+(((-1.0)*r02*x14140))+(((-1.0)*r01*x14144)));
evalcond[4]=((((-1.0)*gconst32*r10*x14140))+(((-1.0)*r12*x14143))+((cj1*cj2))+((r11*x14141))+(((-1.0)*sj2*x14139)));
evalcond[5]=((((-1.0)*r22*x14143))+(((-1.0)*cj1*sj2))+((r21*x14141))+(((-1.0)*x14138*x14140))+(((-1.0)*cj2*x14139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14145=(gconst32*r00);
IkReal x14146=(gconst31*r01);
CheckValue<IkReal> x14147=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x14146*x14146)))+(((-1.0)*(r02*r02)))+(((2.0)*x14145*x14146))+(((-1.0)*(x14145*x14145))))),-1);
if(!x14147.valid){
continue;
}
CheckValue<IkReal> x14148 = IKatan2WithCheck(IkReal((x14146+(((-1.0)*x14145)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14147.value)))+(x14148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14149=IKsin(j4);
IkReal x14150=IKcos(j4);
IkReal x14151=(gconst32*r20);
IkReal x14152=((1.0)*sj1);
IkReal x14153=((1.0)*x14150);
IkReal x14154=(gconst31*x14150);
IkReal x14155=(gconst32*x14149);
IkReal x14156=((1.0)*x14149);
IkReal x14157=(gconst31*x14156);
evalcond[0]=((((-1.0)*r22*x14153))+((x14149*x14151))+(((-1.0)*r21*x14157)));
evalcond[1]=(((r10*x14155))+(((-1.0)*r12*x14153))+(((-1.0)*r11*x14157)));
evalcond[2]=((((-1.0)*r02*x14156))+((r01*x14154))+(((-1.0)*gconst32*r00*x14153)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14153))+(((-1.0)*r01*x14157))+((r00*x14155)));
evalcond[4]=((((-1.0)*gconst32*r10*x14153))+((r11*x14154))+(((-1.0)*r12*x14156))+(((-1.0)*sj2*x14152))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x14151*x14153))+(((-1.0)*r22*x14156))+(((-1.0)*cj1*sj2))+((r21*x14154))+(((-1.0)*cj2*x14152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14158=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x14158.valid){
continue;
}
CheckValue<IkReal> x14159 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14158.value)))+(x14159.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14160=IKsin(j4);
IkReal x14161=IKcos(j4);
IkReal x14162=(gconst32*r20);
IkReal x14163=((1.0)*sj1);
IkReal x14164=((1.0)*x14161);
IkReal x14165=(gconst31*x14161);
IkReal x14166=(gconst32*x14160);
IkReal x14167=((1.0)*x14160);
IkReal x14168=(gconst31*x14167);
evalcond[0]=(((x14160*x14162))+(((-1.0)*r22*x14164))+(((-1.0)*r21*x14168)));
evalcond[1]=(((r10*x14166))+(((-1.0)*r12*x14164))+(((-1.0)*r11*x14168)));
evalcond[2]=((((-1.0)*r02*x14167))+((r01*x14165))+(((-1.0)*gconst32*r00*x14164)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x14168))+(((-1.0)*r02*x14164))+((r00*x14166)));
evalcond[4]=((((-1.0)*gconst32*r10*x14164))+(((-1.0)*r12*x14167))+((r11*x14165))+(((-1.0)*sj2*x14163))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x14167))+(((-1.0)*x14162*x14164))+(((-1.0)*cj1*sj2))+((r21*x14165))+(((-1.0)*cj2*x14163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14169=((-1.0)*r20);
IkReal x14170=x14074;
CheckValue<IkReal> x14172 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14169),IKFAST_ATAN2_MAGTHRESH);
if(!x14172.valid){
continue;
}
IkReal x14171=((-1.0)*(x14172.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14171;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst30=x14171;
IkReal gconst31=(r21*x14170);
IkReal gconst32=(x14169*x14170);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14173=((-1.0)*r20);
IkReal x14174=x14074;
CheckValue<IkReal> x14176 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14173),IKFAST_ATAN2_MAGTHRESH);
if(!x14176.valid){
continue;
}
IkReal x14175=((-1.0)*(x14176.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14175;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst30=x14175;
IkReal gconst31=(r21*x14174);
IkReal gconst32=(x14173*x14174);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14177=((-1.0)*r20);
IkReal x14178=x14074;
CheckValue<IkReal> x14180 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14177),IKFAST_ATAN2_MAGTHRESH);
if(!x14180.valid){
continue;
}
IkReal x14179=((-1.0)*(x14180.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14179;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst30=x14179;
IkReal gconst31=(r21*x14178);
IkReal gconst32=(x14177*x14178);
IkReal x14181=r22*r22;
IkReal x14182=(cj1*r02*sj2);
IkReal x14183=(cj2*r02*sj1);
CheckValue<IkReal> x14187=IKPowWithIntegerCheck(((-1.0)+x14181),-1);
if(!x14187.valid){
continue;
}
IkReal x14184=x14187.value;
if((((1.0)+(((-1.0)*x14181)))) < -0.00001)
continue;
IkReal x14185=IKsqrt(((1.0)+(((-1.0)*x14181))));
IkReal x14186=(r22*x14184*x14185);
j4eval[0]=((IKabs((x14183+x14182)))+(IKabs((((x14182*x14186))+((x14183*x14186))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14188=((1.0)*gconst32);
IkReal x14189=(gconst31*r01);
IkReal x14190=(cj1*sj2);
IkReal x14191=(cj2*sj1);
CheckValue<IkReal> x14192 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x14188*x14190))+(((-1.0)*r00*x14188*x14191))+((x14189*x14191))+((x14189*x14190)))),IkReal((((r02*x14190))+((r02*x14191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14192.valid){
continue;
}
CheckValue<IkReal> x14193=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*r10))+(((-1.0)*r11*x14188)))),-1);
if(!x14193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14192.value)+(((1.5707963267949)*(x14193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14194=IKcos(j4);
IkReal x14195=IKsin(j4);
IkReal x14196=(gconst31*r21);
IkReal x14197=((1.0)*sj1);
IkReal x14198=(gconst31*r01);
IkReal x14199=(gconst31*r11);
IkReal x14200=((1.0)*x14194);
IkReal x14201=((1.0)*x14195);
IkReal x14202=(gconst32*x14195);
IkReal x14203=(gconst32*x14194);
evalcond[0]=((((-1.0)*x14198*x14200))+((r02*x14195))+((r00*x14203)));
evalcond[1]=((((-1.0)*x14196*x14201))+((r20*x14202))+(((-1.0)*r22*x14200)));
evalcond[2]=((((-1.0)*x14199*x14201))+((r10*x14202))+(((-1.0)*r12*x14200)));
evalcond[3]=((-1.0)+(((-1.0)*x14198*x14201))+((r00*x14202))+(((-1.0)*r02*x14200)));
evalcond[4]=((((-1.0)*x14199*x14200))+((r10*x14203))+((r12*x14195))+(((-1.0)*sj2*x14197))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x14196*x14200))+((r20*x14203))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x14197))+((r22*x14195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14204=(gconst32*r00);
IkReal x14205=(gconst31*r01);
CheckValue<IkReal> x14206=IKPowWithIntegerCheck(IKsign(((x14205*x14205)+(x14204*x14204)+(r02*r02)+(((-2.0)*x14204*x14205)))),-1);
if(!x14206.valid){
continue;
}
CheckValue<IkReal> x14207 = IKatan2WithCheck(IkReal(((((-1.0)*x14205))+x14204)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14206.value)))+(x14207.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14208=IKcos(j4);
IkReal x14209=IKsin(j4);
IkReal x14210=(gconst31*r21);
IkReal x14211=((1.0)*sj1);
IkReal x14212=(gconst31*r01);
IkReal x14213=(gconst31*r11);
IkReal x14214=((1.0)*x14208);
IkReal x14215=((1.0)*x14209);
IkReal x14216=(gconst32*x14209);
IkReal x14217=(gconst32*x14208);
evalcond[0]=(((r02*x14209))+(((-1.0)*x14212*x14214))+((r00*x14217)));
evalcond[1]=((((-1.0)*x14210*x14215))+(((-1.0)*r22*x14214))+((r20*x14216)));
evalcond[2]=((((-1.0)*r12*x14214))+(((-1.0)*x14213*x14215))+((r10*x14216)));
evalcond[3]=((-1.0)+(((-1.0)*x14212*x14215))+(((-1.0)*r02*x14214))+((r00*x14216)));
evalcond[4]=((((-1.0)*x14213*x14214))+((r10*x14217))+((cj1*cj2))+((r12*x14209))+(((-1.0)*sj2*x14211)));
evalcond[5]=((((-1.0)*x14210*x14214))+(((-1.0)*cj1*sj2))+((r22*x14209))+((r20*x14217))+(((-1.0)*cj2*x14211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14218=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x14218.valid){
continue;
}
CheckValue<IkReal> x14219 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14218.value)))+(x14219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14220=IKcos(j4);
IkReal x14221=IKsin(j4);
IkReal x14222=(gconst31*r21);
IkReal x14223=((1.0)*sj1);
IkReal x14224=(gconst31*r01);
IkReal x14225=(gconst31*r11);
IkReal x14226=((1.0)*x14220);
IkReal x14227=((1.0)*x14221);
IkReal x14228=(gconst32*x14221);
IkReal x14229=(gconst32*x14220);
evalcond[0]=(((r02*x14221))+(((-1.0)*x14224*x14226))+((r00*x14229)));
evalcond[1]=(((r20*x14228))+(((-1.0)*x14222*x14227))+(((-1.0)*r22*x14226)));
evalcond[2]=((((-1.0)*r12*x14226))+((r10*x14228))+(((-1.0)*x14225*x14227)));
evalcond[3]=((-1.0)+(((-1.0)*x14224*x14227))+((r00*x14228))+(((-1.0)*r02*x14226)));
evalcond[4]=(((r10*x14229))+((cj1*cj2))+(((-1.0)*x14225*x14226))+((r12*x14221))+(((-1.0)*sj2*x14223)));
evalcond[5]=(((r20*x14229))+(((-1.0)*cj1*sj2))+(((-1.0)*x14222*x14226))+((r22*x14221))+(((-1.0)*cj2*x14223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14230=((-1.0)*r20);
IkReal x14231=x14074;
CheckValue<IkReal> x14233 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14230),IKFAST_ATAN2_MAGTHRESH);
if(!x14233.valid){
continue;
}
IkReal x14232=((-1.0)*(x14233.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14232;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst30=x14232;
IkReal gconst31=(r21*x14231);
IkReal gconst32=(x14230*x14231);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x14234=((-1.0)*r20);
IkReal x14235=x14074;
CheckValue<IkReal> x14237 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14234),IKFAST_ATAN2_MAGTHRESH);
if(!x14237.valid){
continue;
}
IkReal x14236=((-1.0)*(x14237.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14236;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst30=x14236;
IkReal gconst31=(r21*x14235);
IkReal gconst32=(x14234*x14235);
IkReal x14238=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x14242=IKPowWithIntegerCheck(x14238,-1);
if(!x14242.valid){
continue;
}
IkReal x14239=x14242.value;
IkReal x14240=((1.0)*x14239);
IkReal x14241=((((-1.0)*x14240*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x14240*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x14239)));
j4eval[0]=x14241;
j4eval[1]=IKsign(x14241);
j4eval[2]=r02;
j4eval[3]=x14238;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14243=((-1.0)*r20);
IkReal x14244=x14074;
CheckValue<IkReal> x14246 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14243),IKFAST_ATAN2_MAGTHRESH);
if(!x14246.valid){
continue;
}
IkReal x14245=((-1.0)*(x14246.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14245;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst30=x14245;
IkReal gconst31=(r21*x14244);
IkReal gconst32=(x14243*x14244);
IkReal x14247=r22*r22;
IkReal x14248=(r02*sj1*sj2);
CheckValue<IkReal> x14253=IKPowWithIntegerCheck(((-1.0)+x14247),-1);
if(!x14253.valid){
continue;
}
IkReal x14249=x14253.value;
IkReal x14250=((1.0)*cj1*cj2*r02);
if((((1.0)+(((-1.0)*x14247)))) < -0.00001)
continue;
IkReal x14251=IKsqrt(((1.0)+(((-1.0)*x14247))));
IkReal x14252=(r22*x14249*x14251);
j4eval[0]=((IKabs(((((-1.0)*x14250))+x14248)))+(IKabs(((((-1.0)*x14250*x14252))+((x14248*x14252))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14254=((1.0)*gconst32);
IkReal x14255=(sj1*sj2);
IkReal x14256=((1.0)*gconst31);
IkReal x14257=(cj1*cj2);
CheckValue<IkReal> x14258 = IKatan2WithCheck(IkReal((((gconst32*r00*x14257))+(((-1.0)*r00*x14254*x14255))+((gconst31*r01*x14255))+(((-1.0)*r01*x14256*x14257)))),IkReal(((((-1.0)*r02*x14257))+((r02*x14255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14258.valid){
continue;
}
CheckValue<IkReal> x14259=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x14256))+(((-1.0)*r11*x14254)))),-1);
if(!x14259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14258.value)+(((1.5707963267949)*(x14259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14260=IKsin(j4);
IkReal x14261=IKcos(j4);
IkReal x14262=(gconst32*r20);
IkReal x14263=((1.0)*cj2);
IkReal x14264=((1.0)*x14261);
IkReal x14265=(gconst31*x14261);
IkReal x14266=(gconst32*x14260);
IkReal x14267=((1.0)*x14260);
IkReal x14268=(gconst31*x14267);
evalcond[0]=((((-1.0)*r22*x14264))+((x14260*x14262))+(((-1.0)*r21*x14268)));
evalcond[1]=((((-1.0)*r11*x14268))+(((-1.0)*r12*x14264))+((r10*x14266)));
evalcond[2]=((((-1.0)*r02*x14267))+(((-1.0)*gconst32*r00*x14264))+((r01*x14265)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14264))+((r00*x14266))+(((-1.0)*r01*x14268)));
evalcond[4]=((((-1.0)*x14262*x14264))+((r21*x14265))+(((-1.0)*r22*x14267))+((sj1*sj2))+(((-1.0)*cj1*x14263)));
evalcond[5]=((((-1.0)*sj1*x14263))+(((-1.0)*cj1*sj2))+((r11*x14265))+(((-1.0)*r12*x14267))+(((-1.0)*gconst32*r10*x14264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14269=(gconst32*r00);
IkReal x14270=(gconst31*r01);
CheckValue<IkReal> x14271=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x14269*x14269)))+(((-1.0)*(x14270*x14270)))+(((2.0)*x14269*x14270)))),-1);
if(!x14271.valid){
continue;
}
CheckValue<IkReal> x14272 = IKatan2WithCheck(IkReal(((((-1.0)*x14269))+x14270)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14271.value)))+(x14272.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14273=IKsin(j4);
IkReal x14274=IKcos(j4);
IkReal x14275=(gconst32*r20);
IkReal x14276=((1.0)*cj2);
IkReal x14277=((1.0)*x14274);
IkReal x14278=(gconst31*x14274);
IkReal x14279=(gconst32*x14273);
IkReal x14280=((1.0)*x14273);
IkReal x14281=(gconst31*x14280);
evalcond[0]=(((x14273*x14275))+(((-1.0)*r22*x14277))+(((-1.0)*r21*x14281)));
evalcond[1]=((((-1.0)*r12*x14277))+(((-1.0)*r11*x14281))+((r10*x14279)));
evalcond[2]=(((r01*x14278))+(((-1.0)*gconst32*r00*x14277))+(((-1.0)*r02*x14280)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14277))+(((-1.0)*r01*x14281))+((r00*x14279)));
evalcond[4]=((((-1.0)*r22*x14280))+(((-1.0)*x14275*x14277))+((r21*x14278))+((sj1*sj2))+(((-1.0)*cj1*x14276)));
evalcond[5]=((((-1.0)*sj1*x14276))+(((-1.0)*cj1*sj2))+((r11*x14278))+(((-1.0)*r12*x14280))+(((-1.0)*gconst32*r10*x14277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14282=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x14282.valid){
continue;
}
CheckValue<IkReal> x14283 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14282.value)))+(x14283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14284=IKsin(j4);
IkReal x14285=IKcos(j4);
IkReal x14286=(gconst32*r20);
IkReal x14287=((1.0)*cj2);
IkReal x14288=((1.0)*x14285);
IkReal x14289=(gconst31*x14285);
IkReal x14290=(gconst32*x14284);
IkReal x14291=((1.0)*x14284);
IkReal x14292=(gconst31*x14291);
evalcond[0]=((((-1.0)*r22*x14288))+((x14284*x14286))+(((-1.0)*r21*x14292)));
evalcond[1]=(((r10*x14290))+(((-1.0)*r11*x14292))+(((-1.0)*r12*x14288)));
evalcond[2]=((((-1.0)*gconst32*r00*x14288))+((r01*x14289))+(((-1.0)*r02*x14291)));
evalcond[3]=((-1.0)+((r00*x14290))+(((-1.0)*r02*x14288))+(((-1.0)*r01*x14292)));
evalcond[4]=((((-1.0)*r22*x14291))+((r21*x14289))+((sj1*sj2))+(((-1.0)*x14286*x14288))+(((-1.0)*cj1*x14287)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r12*x14291))+((r11*x14289))+(((-1.0)*sj1*x14287))+(((-1.0)*gconst32*r10*x14288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14293=((-1.0)*r20);
IkReal x14294=x14074;
CheckValue<IkReal> x14296 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14293),IKFAST_ATAN2_MAGTHRESH);
if(!x14296.valid){
continue;
}
IkReal x14295=((-1.0)*(x14296.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14295;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst30=x14295;
IkReal gconst31=(r21*x14294);
IkReal gconst32=(x14293*x14294);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14297=((-1.0)*r20);
IkReal x14298=x14074;
CheckValue<IkReal> x14300 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14297),IKFAST_ATAN2_MAGTHRESH);
if(!x14300.valid){
continue;
}
IkReal x14299=((-1.0)*(x14300.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14299;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst30=x14299;
IkReal gconst31=(r21*x14298);
IkReal gconst32=(x14297*x14298);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14301=((-1.0)*r20);
IkReal x14302=x14074;
CheckValue<IkReal> x14304 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14301),IKFAST_ATAN2_MAGTHRESH);
if(!x14304.valid){
continue;
}
IkReal x14303=((-1.0)*(x14304.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14303;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst30=x14303;
IkReal gconst31=(r21*x14302);
IkReal gconst32=(x14301*x14302);
IkReal x14305=r22*r22;
IkReal x14306=(cj1*cj2*r02);
CheckValue<IkReal> x14311=IKPowWithIntegerCheck(((-1.0)+x14305),-1);
if(!x14311.valid){
continue;
}
IkReal x14307=x14311.value;
IkReal x14308=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x14305)))) < -0.00001)
continue;
IkReal x14309=IKsqrt(((1.0)+(((-1.0)*x14305))));
IkReal x14310=(r22*x14307*x14309);
j4eval[0]=((IKabs((x14306+(((-1.0)*x14308)))))+(IKabs(((((-1.0)*x14308*x14310))+((x14306*x14310))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14312=((1.0)*gconst32);
IkReal x14313=(gconst31*r01);
IkReal x14314=(cj1*cj2);
IkReal x14315=((1.0)*sj1*sj2);
CheckValue<IkReal> x14316 = IKatan2WithCheck(IkReal(((((-1.0)*x14313*x14315))+((gconst32*r00*sj1*sj2))+(((-1.0)*r00*x14312*x14314))+((x14313*x14314)))),IkReal((((r02*x14314))+(((-1.0)*r02*x14315)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14316.valid){
continue;
}
CheckValue<IkReal> x14317=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*r10))+(((-1.0)*r11*x14312)))),-1);
if(!x14317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14316.value)+(((1.5707963267949)*(x14317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14318=IKcos(j4);
IkReal x14319=IKsin(j4);
IkReal x14320=(gconst31*r21);
IkReal x14321=((1.0)*cj2);
IkReal x14322=(gconst31*r01);
IkReal x14323=(gconst31*r11);
IkReal x14324=((1.0)*x14318);
IkReal x14325=((1.0)*x14319);
IkReal x14326=(gconst32*x14319);
IkReal x14327=(gconst32*x14318);
evalcond[0]=(((r00*x14327))+((r02*x14319))+(((-1.0)*x14322*x14324)));
evalcond[1]=((((-1.0)*x14320*x14325))+((r20*x14326))+(((-1.0)*r22*x14324)));
evalcond[2]=(((r10*x14326))+(((-1.0)*x14323*x14325))+(((-1.0)*r12*x14324)));
evalcond[3]=((-1.0)+((r00*x14326))+(((-1.0)*x14322*x14325))+(((-1.0)*r02*x14324)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x14320*x14324))+((r20*x14327))+(((-1.0)*cj1*x14321))+((r22*x14319)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r10*x14327))+(((-1.0)*sj1*x14321))+(((-1.0)*x14323*x14324))+((r12*x14319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14328=(gconst32*r00);
IkReal x14329=(gconst31*r01);
CheckValue<IkReal> x14330 = IKatan2WithCheck(IkReal((x14328+(((-1.0)*x14329)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14330.valid){
continue;
}
CheckValue<IkReal> x14331=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14328*x14329))+(x14328*x14328)+(x14329*x14329)+(r02*r02))),-1);
if(!x14331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14330.value)+(((1.5707963267949)*(x14331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14332=IKcos(j4);
IkReal x14333=IKsin(j4);
IkReal x14334=(gconst31*r21);
IkReal x14335=((1.0)*cj2);
IkReal x14336=(gconst31*r01);
IkReal x14337=(gconst31*r11);
IkReal x14338=((1.0)*x14332);
IkReal x14339=((1.0)*x14333);
IkReal x14340=(gconst32*x14333);
IkReal x14341=(gconst32*x14332);
evalcond[0]=(((r02*x14333))+((r00*x14341))+(((-1.0)*x14336*x14338)));
evalcond[1]=((((-1.0)*r22*x14338))+(((-1.0)*x14334*x14339))+((r20*x14340)));
evalcond[2]=((((-1.0)*r12*x14338))+((r10*x14340))+(((-1.0)*x14337*x14339)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14338))+((r00*x14340))+(((-1.0)*x14336*x14339)));
evalcond[4]=((((-1.0)*cj1*x14335))+(((-1.0)*x14334*x14338))+((sj1*sj2))+((r22*x14333))+((r20*x14341)));
evalcond[5]=((((-1.0)*sj1*x14335))+(((-1.0)*cj1*sj2))+((r12*x14333))+((r10*x14341))+(((-1.0)*x14337*x14338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14342=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x14342.valid){
continue;
}
CheckValue<IkReal> x14343 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14342.value)))+(x14343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14344=IKcos(j4);
IkReal x14345=IKsin(j4);
IkReal x14346=(gconst31*r21);
IkReal x14347=((1.0)*cj2);
IkReal x14348=(gconst31*r01);
IkReal x14349=(gconst31*r11);
IkReal x14350=((1.0)*x14344);
IkReal x14351=((1.0)*x14345);
IkReal x14352=(gconst32*x14345);
IkReal x14353=(gconst32*x14344);
evalcond[0]=((((-1.0)*x14348*x14350))+((r00*x14353))+((r02*x14345)));
evalcond[1]=(((r20*x14352))+(((-1.0)*x14346*x14351))+(((-1.0)*r22*x14350)));
evalcond[2]=((((-1.0)*r12*x14350))+((r10*x14352))+(((-1.0)*x14349*x14351)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14350))+(((-1.0)*x14348*x14351))+((r00*x14352)));
evalcond[4]=(((r20*x14353))+(((-1.0)*x14346*x14350))+((r22*x14345))+((sj1*sj2))+(((-1.0)*cj1*x14347)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r10*x14353))+(((-1.0)*x14349*x14350))+((r12*x14345))+(((-1.0)*sj1*x14347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14354=((-1.0)*r20);
IkReal x14355=((-1.0)*r21);
CheckValue<IkReal> x14357 = IKatan2WithCheck(IkReal(x14355),IkReal(x14354),IKFAST_ATAN2_MAGTHRESH);
if(!x14357.valid){
continue;
}
IkReal x14356=((-1.0)*(x14357.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14356;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x14354);
rxp0_2=(py*r00);
rxp1_0=(py*x14355);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst30=x14356;
IkReal gconst31=r21;
IkReal gconst32=x14354;
IkReal x14358=(r01*r21);
IkReal x14359=(r00*r20);
j4eval[0]=((((-1.0)*x14358))+(((-1.0)*x14359)));
j4eval[1]=(((sj3*x14359))+((sj3*x14358)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14360=((-1.0)*r20);
IkReal x14361=((-1.0)*r21);
CheckValue<IkReal> x14363 = IKatan2WithCheck(IkReal(x14361),IkReal(x14360),IKFAST_ATAN2_MAGTHRESH);
if(!x14363.valid){
continue;
}
IkReal x14362=((-1.0)*(x14363.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14362;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x14360);
rxp0_2=(py*r00);
rxp1_0=(py*x14361);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst30=x14362;
IkReal gconst31=r21;
IkReal gconst32=x14360;
IkReal x14364=(r01*r21);
IkReal x14365=(r00*r20);
j4eval[0]=((((-1.0)*x14364))+(((-1.0)*x14365)));
j4eval[1]=(((cj3*x14365))+((cj3*x14364)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14366=((-1.0)*r20);
IkReal x14367=((-1.0)*r21);
CheckValue<IkReal> x14369 = IKatan2WithCheck(IkReal(x14367),IkReal(x14366),IKFAST_ATAN2_MAGTHRESH);
if(!x14369.valid){
continue;
}
IkReal x14368=((-1.0)*(x14369.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x14368;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x14366);
rxp0_2=(py*r00);
rxp1_0=(py*x14367);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst30=x14368;
IkReal gconst31=r21;
IkReal gconst32=x14366;
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*r21))+((cj3*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14370=((1.0)*r00);
CheckValue<IkReal> x14371=IKPowWithIntegerCheck(cj3,-1);
if(!x14371.valid){
continue;
}
CheckValue<IkReal> x14372=IKPowWithIntegerCheck(r12,-1);
if(!x14372.valid){
continue;
}
CheckValue<IkReal> x14373=IKPowWithIntegerCheck((((cj3*gconst31*r01))+(((-1.0)*cj3*gconst32*x14370))),-1);
if(!x14373.valid){
continue;
}
if( IKabs(((x14371.value)*(x14372.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14373.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*gconst31*sj3*x14370)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14371.value)*(x14372.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14373.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*gconst31*sj3*x14370))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14371.value)*(x14372.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14373.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*gconst31*sj3*x14370))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14374=IKsin(j4);
IkReal x14375=IKcos(j4);
IkReal x14376=(r21*sj3);
IkReal x14377=((1.0)*sj3);
IkReal x14378=(gconst31*sj3);
IkReal x14379=(sj1*sj2);
IkReal x14380=((1.0)*gconst31);
IkReal x14381=((1.0)*cj2);
IkReal x14382=(r01*sj3);
IkReal x14383=((1.0)*cj1*sj2);
IkReal x14384=(sj1*x14381);
IkReal x14385=(r12*x14374);
IkReal x14386=((1.0)*cj3*gconst32);
IkReal x14387=(gconst31*x14375);
IkReal x14388=(gconst32*x14375);
IkReal x14389=(gconst32*x14374);
IkReal x14390=(x14383+x14384);
evalcond[0]=((-1.0)*r12*x14375);
evalcond[1]=(((r20*x14389))+(((-1.0)*r21*x14374*x14380)));
evalcond[2]=((-1.0)+((r00*x14389))+(((-1.0)*r01*x14374*x14380)));
evalcond[3]=((((-1.0)*x14379))+((cj1*cj2))+(((-1.0)*cj3*x14385)));
evalcond[4]=((((-1.0)*x14377*x14385))+(((-1.0)*x14390)));
evalcond[5]=(((r00*x14378))+((cj3*r01*x14387))+(((-1.0)*r00*x14375*x14386))+((gconst32*x14382)));
evalcond[6]=(((r01*x14375*x14378))+(((-1.0)*r00*x14377*x14388))+(((-1.0)*r01*x14386))+(((-1.0)*cj3*r00*x14380)));
evalcond[7]=(((cj3*r21*x14387))+(((-1.0)*r20*x14375*x14386))+((gconst32*x14376))+((r20*x14378))+(((-1.0)*x14390)));
evalcond[8]=(((x14376*x14387))+(((-1.0)*r21*x14386))+(((-1.0)*cj3*r20*x14380))+(((-1.0)*r20*x14377*x14388))+(((-1.0)*cj1*x14381))+x14379);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14391=(gconst32*r00);
IkReal x14392=((1.0)*gconst31);
CheckValue<IkReal> x14393=IKPowWithIntegerCheck(((((-1.0)*r01*x14392))+x14391),-1);
if(!x14393.valid){
continue;
}
CheckValue<IkReal> x14394=IKPowWithIntegerCheck(((((-1.0)*cj3*x14391))+((cj3*gconst31*r01))),-1);
if(!x14394.valid){
continue;
}
if( IKabs(x14393.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14394.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*r00*sj3*x14392)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14393.value)+IKsqr(((x14394.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*r00*sj3*x14392))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14393.value, ((x14394.value)*(((((-1.0)*gconst32*r01*sj3))+(((-1.0)*r00*sj3*x14392))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14395=IKsin(j4);
IkReal x14396=IKcos(j4);
IkReal x14397=(r21*sj3);
IkReal x14398=((1.0)*sj3);
IkReal x14399=(gconst31*sj3);
IkReal x14400=(sj1*sj2);
IkReal x14401=((1.0)*gconst31);
IkReal x14402=((1.0)*cj2);
IkReal x14403=(r01*sj3);
IkReal x14404=((1.0)*cj1*sj2);
IkReal x14405=(sj1*x14402);
IkReal x14406=(r12*x14395);
IkReal x14407=((1.0)*cj3*gconst32);
IkReal x14408=(gconst31*x14396);
IkReal x14409=(gconst32*x14396);
IkReal x14410=(gconst32*x14395);
IkReal x14411=(x14404+x14405);
evalcond[0]=((-1.0)*r12*x14396);
evalcond[1]=((((-1.0)*r21*x14395*x14401))+((r20*x14410)));
evalcond[2]=((-1.0)+((r00*x14410))+(((-1.0)*r01*x14395*x14401)));
evalcond[3]=((((-1.0)*x14400))+(((-1.0)*cj3*x14406))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x14411))+(((-1.0)*x14398*x14406)));
evalcond[5]=(((cj3*r01*x14408))+((gconst32*x14403))+((r00*x14399))+(((-1.0)*r00*x14396*x14407)));
evalcond[6]=(((r01*x14396*x14399))+(((-1.0)*cj3*r00*x14401))+(((-1.0)*r01*x14407))+(((-1.0)*r00*x14398*x14409)));
evalcond[7]=((((-1.0)*x14411))+(((-1.0)*r20*x14396*x14407))+((gconst32*x14397))+((cj3*r21*x14408))+((r20*x14399)));
evalcond[8]=((((-1.0)*cj1*x14402))+(((-1.0)*r20*x14398*x14409))+x14400+(((-1.0)*cj3*r20*x14401))+(((-1.0)*r21*x14407))+((x14397*x14408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14412=(gconst32*r00);
IkReal x14413=(gconst31*r01);
CheckValue<IkReal> x14414=IKPowWithIntegerCheck(((((-1.0)*x14413))+x14412),-1);
if(!x14414.valid){
continue;
}
CheckValue<IkReal> x14415=IKPowWithIntegerCheck((((sj3*x14413))+(((-1.0)*sj3*x14412))),-1);
if(!x14415.valid){
continue;
}
if( IKabs(x14414.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14415.value)*((((cj3*gconst31*r00))+((cj3*gconst32*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14414.value)+IKsqr(((x14415.value)*((((cj3*gconst31*r00))+((cj3*gconst32*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14414.value, ((x14415.value)*((((cj3*gconst31*r00))+((cj3*gconst32*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14416=IKsin(j4);
IkReal x14417=IKcos(j4);
IkReal x14418=(r21*sj3);
IkReal x14419=((1.0)*sj3);
IkReal x14420=(gconst31*sj3);
IkReal x14421=(sj1*sj2);
IkReal x14422=((1.0)*gconst31);
IkReal x14423=((1.0)*cj2);
IkReal x14424=(r01*sj3);
IkReal x14425=((1.0)*cj1*sj2);
IkReal x14426=(sj1*x14423);
IkReal x14427=(r12*x14416);
IkReal x14428=((1.0)*cj3*gconst32);
IkReal x14429=(gconst31*x14417);
IkReal x14430=(gconst32*x14417);
IkReal x14431=(gconst32*x14416);
IkReal x14432=(x14425+x14426);
evalcond[0]=((-1.0)*r12*x14417);
evalcond[1]=(((r20*x14431))+(((-1.0)*r21*x14416*x14422)));
evalcond[2]=((-1.0)+((r00*x14431))+(((-1.0)*r01*x14416*x14422)));
evalcond[3]=((((-1.0)*cj3*x14427))+(((-1.0)*x14421))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x14432))+(((-1.0)*x14419*x14427)));
evalcond[5]=(((cj3*r01*x14429))+((r00*x14420))+((gconst32*x14424))+(((-1.0)*r00*x14417*x14428)));
evalcond[6]=((((-1.0)*cj3*r00*x14422))+((r01*x14417*x14420))+(((-1.0)*r00*x14419*x14430))+(((-1.0)*r01*x14428)));
evalcond[7]=((((-1.0)*x14432))+((gconst32*x14418))+(((-1.0)*r20*x14417*x14428))+((r20*x14420))+((cj3*r21*x14429)));
evalcond[8]=(((x14418*x14429))+(((-1.0)*cj1*x14423))+x14421+(((-1.0)*r20*x14419*x14430))+(((-1.0)*r21*x14428))+(((-1.0)*cj3*r20*x14422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14433=gconst32*gconst32;
IkReal x14434=gconst31*gconst31;
IkReal x14435=(gconst31*r00);
IkReal x14436=(gconst32*r01);
IkReal x14437=((1.0)*cj3);
IkReal x14438=(cj3*r11);
IkReal x14439=((1.0)*sj3);
IkReal x14440=(r12*x14437);
IkReal x14441=(r10*x14433);
CheckValue<IkReal> x14442=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*r11*sj3*x14434))+(((-1.0)*gconst32*r11*x14435*x14439))+(((-1.0)*gconst31*r10*x14436*x14439))+((r00*sj3*x14441)))),-1);
if(!x14442.valid){
continue;
}
CheckValue<IkReal> x14443 = IKatan2WithCheck(IkReal(((((-1.0)*x14436*x14440))+(((-1.0)*x14435*x14440)))),IkReal((((r00*x14434*x14438))+((gconst31*x14436*x14438))+(((-1.0)*gconst32*r10*x14435*x14437))+(((-1.0)*r01*x14437*x14441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14442.value)))+(x14443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14444=IKsin(j4);
IkReal x14445=IKcos(j4);
IkReal x14446=(r21*sj3);
IkReal x14447=(cj3*gconst32);
IkReal x14448=((1.0)*r01);
IkReal x14449=(gconst32*sj3);
IkReal x14450=(gconst31*sj3);
IkReal x14451=(sj1*sj2);
IkReal x14452=((1.0)*cj2);
IkReal x14453=((1.0)*cj1*sj2);
IkReal x14454=(sj1*x14452);
IkReal x14455=((1.0)*x14445);
IkReal x14456=(gconst31*x14445);
IkReal x14457=((1.0)*x14444);
IkReal x14458=((1.0)*cj3*gconst31);
IkReal x14459=(gconst32*x14444);
IkReal x14460=(x14454+x14453);
evalcond[0]=(((r20*x14459))+(((-1.0)*gconst31*r21*x14457))+(((-1.0)*r22*x14455)));
evalcond[1]=(((r10*x14459))+(((-1.0)*gconst31*r11*x14457))+(((-1.0)*r12*x14455)));
evalcond[2]=((-1.0)+((r00*x14459))+(((-1.0)*gconst31*x14444*x14448))+(((-1.0)*r02*x14455)));
evalcond[3]=((((-1.0)*cj3*r02*x14457))+((r00*x14450))+((r01*x14449))+(((-1.0)*r00*x14447*x14455))+((cj3*r01*x14456)));
evalcond[4]=(((r01*x14445*x14450))+(((-1.0)*r00*x14449*x14455))+(((-1.0)*r00*x14458))+(((-1.0)*r02*sj3*x14457))+(((-1.0)*x14447*x14448)));
evalcond[5]=((((-1.0)*r10*x14447*x14455))+((r10*x14450))+((r11*x14449))+(((-1.0)*x14451))+(((-1.0)*cj3*r12*x14457))+((cj1*cj2))+((cj3*r11*x14456)));
evalcond[6]=(((cj3*r21*x14456))+((r20*x14450))+(((-1.0)*r20*x14447*x14455))+((gconst32*x14446))+(((-1.0)*x14460))+(((-1.0)*cj3*r22*x14457)));
evalcond[7]=((((-1.0)*r21*x14447))+(((-1.0)*cj1*x14452))+(((-1.0)*r22*sj3*x14457))+((x14446*x14456))+x14451+(((-1.0)*r20*x14458))+(((-1.0)*r20*x14449*x14455)));
evalcond[8]=((((-1.0)*r12*sj3*x14457))+(((-1.0)*x14460))+(((-1.0)*r10*x14449*x14455))+(((-1.0)*r11*x14447))+(((-1.0)*r10*x14458))+((r11*x14445*x14450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14461=gconst31*gconst31;
IkReal x14462=gconst32*gconst32;
IkReal x14463=((1.0)*r11);
IkReal x14464=(r00*sj3);
IkReal x14465=(gconst31*gconst32);
IkReal x14466=(cj3*r01);
IkReal x14467=(cj3*r00);
IkReal x14468=(gconst32*r01*sj3);
IkReal x14469=(r10*x14462);
CheckValue<IkReal> x14470=IKPowWithIntegerCheck(IKsign((((r11*x14461*x14466))+((cj3*r02*r12))+(((-1.0)*x14463*x14465*x14467))+(((-1.0)*r10*x14465*x14466))+((x14467*x14469)))),-1);
if(!x14470.valid){
continue;
}
CheckValue<IkReal> x14471 = IKatan2WithCheck(IkReal((((gconst31*r12*x14464))+((r12*x14468)))),IkReal(((((-1.0)*r01*sj3*x14463*x14465))+((r10*x14464*x14465))+((r01*sj3*x14469))+(((-1.0)*x14461*x14463*x14464)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14470.value)))+(x14471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14472=IKsin(j4);
IkReal x14473=IKcos(j4);
IkReal x14474=(r21*sj3);
IkReal x14475=(cj3*gconst32);
IkReal x14476=((1.0)*r01);
IkReal x14477=(gconst32*sj3);
IkReal x14478=(gconst31*sj3);
IkReal x14479=(sj1*sj2);
IkReal x14480=((1.0)*cj2);
IkReal x14481=((1.0)*cj1*sj2);
IkReal x14482=(sj1*x14480);
IkReal x14483=((1.0)*x14473);
IkReal x14484=(gconst31*x14473);
IkReal x14485=((1.0)*x14472);
IkReal x14486=((1.0)*cj3*gconst31);
IkReal x14487=(gconst32*x14472);
IkReal x14488=(x14482+x14481);
evalcond[0]=((((-1.0)*gconst31*r21*x14485))+(((-1.0)*r22*x14483))+((r20*x14487)));
evalcond[1]=(((r10*x14487))+(((-1.0)*gconst31*r11*x14485))+(((-1.0)*r12*x14483)));
evalcond[2]=((-1.0)+(((-1.0)*gconst31*x14472*x14476))+(((-1.0)*r02*x14483))+((r00*x14487)));
evalcond[3]=(((r00*x14478))+((cj3*r01*x14484))+((r01*x14477))+(((-1.0)*r00*x14475*x14483))+(((-1.0)*cj3*r02*x14485)));
evalcond[4]=((((-1.0)*r00*x14477*x14483))+(((-1.0)*r02*sj3*x14485))+((r01*x14473*x14478))+(((-1.0)*r00*x14486))+(((-1.0)*x14475*x14476)));
evalcond[5]=(((r10*x14478))+(((-1.0)*r10*x14475*x14483))+(((-1.0)*x14479))+(((-1.0)*cj3*r12*x14485))+((r11*x14477))+((cj3*r11*x14484))+((cj1*cj2)));
evalcond[6]=(((gconst32*x14474))+((r20*x14478))+((cj3*r21*x14484))+(((-1.0)*x14488))+(((-1.0)*r20*x14475*x14483))+(((-1.0)*cj3*r22*x14485)));
evalcond[7]=((((-1.0)*r20*x14486))+(((-1.0)*cj1*x14480))+(((-1.0)*r22*sj3*x14485))+(((-1.0)*r20*x14477*x14483))+((x14474*x14484))+x14479+(((-1.0)*r21*x14475)));
evalcond[8]=((((-1.0)*r11*x14475))+(((-1.0)*r10*x14477*x14483))+(((-1.0)*r10*x14486))+(((-1.0)*r12*sj3*x14485))+((r11*x14473*x14478))+(((-1.0)*x14488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14489=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x14489.valid){
continue;
}
CheckValue<IkReal> x14490 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst32*r20))+(((-1.0)*gconst31*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14489.value)))+(x14490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14491=IKsin(j4);
IkReal x14492=IKcos(j4);
IkReal x14493=(r21*sj3);
IkReal x14494=(cj3*gconst32);
IkReal x14495=((1.0)*r01);
IkReal x14496=(gconst32*sj3);
IkReal x14497=(gconst31*sj3);
IkReal x14498=(sj1*sj2);
IkReal x14499=((1.0)*cj2);
IkReal x14500=((1.0)*cj1*sj2);
IkReal x14501=(sj1*x14499);
IkReal x14502=((1.0)*x14492);
IkReal x14503=(gconst31*x14492);
IkReal x14504=((1.0)*x14491);
IkReal x14505=((1.0)*cj3*gconst31);
IkReal x14506=(gconst32*x14491);
IkReal x14507=(x14501+x14500);
evalcond[0]=(((r20*x14506))+(((-1.0)*r22*x14502))+(((-1.0)*gconst31*r21*x14504)));
evalcond[1]=((((-1.0)*gconst31*r11*x14504))+(((-1.0)*r12*x14502))+((r10*x14506)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14502))+(((-1.0)*gconst31*x14491*x14495))+((r00*x14506)));
evalcond[3]=((((-1.0)*r00*x14494*x14502))+((r00*x14497))+((r01*x14496))+(((-1.0)*cj3*r02*x14504))+((cj3*r01*x14503)));
evalcond[4]=((((-1.0)*x14494*x14495))+(((-1.0)*r00*x14505))+(((-1.0)*r00*x14496*x14502))+(((-1.0)*r02*sj3*x14504))+((r01*x14492*x14497)));
evalcond[5]=((((-1.0)*x14498))+((r10*x14497))+((r11*x14496))+((cj3*r11*x14503))+(((-1.0)*cj3*r12*x14504))+((cj1*cj2))+(((-1.0)*r10*x14494*x14502)));
evalcond[6]=(((gconst32*x14493))+(((-1.0)*x14507))+(((-1.0)*cj3*r22*x14504))+(((-1.0)*r20*x14494*x14502))+((cj3*r21*x14503))+((r20*x14497)));
evalcond[7]=((((-1.0)*r20*x14496*x14502))+((x14493*x14503))+(((-1.0)*r21*x14494))+(((-1.0)*r20*x14505))+x14498+(((-1.0)*cj1*x14499))+(((-1.0)*r22*sj3*x14504)));
evalcond[8]=((((-1.0)*r11*x14494))+((r11*x14492*x14497))+(((-1.0)*x14507))+(((-1.0)*r10*x14505))+(((-1.0)*r10*x14496*x14502))+(((-1.0)*r12*sj3*x14504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14508=((-1.0)*r21);
IkReal x14510 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14510)==0){
continue;
}
IkReal x14509=pow(x14510,-0.5);
CheckValue<IkReal> x14511 = IKatan2WithCheck(IkReal(x14508),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14511.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x14511.value))));
IkReal gconst34=(x14508*x14509);
IkReal gconst35=((1.0)*r20*x14509);
CheckValue<IkReal> x14512 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14512.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14512.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14513=((-1.0)*r21);
CheckValue<IkReal> x14516 = IKatan2WithCheck(IkReal(x14513),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14516.valid){
continue;
}
IkReal x14514=((1.0)*(x14516.value));
IkReal x14515=x14509;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x14514)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x14514)));
IkReal gconst34=(x14513*x14515);
IkReal gconst35=((1.0)*r20*x14515);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x14517=((-1.0)*r21);
CheckValue<IkReal> x14520 = IKatan2WithCheck(IkReal(x14517),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14520.valid){
continue;
}
IkReal x14518=((1.0)*(x14520.value));
IkReal x14519=x14509;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x14518)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x14518)));
IkReal gconst34=(x14517*x14519);
IkReal gconst35=((1.0)*r20*x14519);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14521=((-1.0)*r21);
CheckValue<IkReal> x14524 = IKatan2WithCheck(IkReal(x14521),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14524.valid){
continue;
}
IkReal x14522=((1.0)*(x14524.value));
IkReal x14523=x14509;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x14522)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x14522)));
IkReal gconst34=(x14521*x14523);
IkReal gconst35=((1.0)*r20*x14523);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14525=gconst35*gconst35;
IkReal x14526=gconst34*gconst34;
IkReal x14527=(r20*sj3);
IkReal x14528=((1.0)*r21);
IkReal x14529=(gconst34*sj3);
IkReal x14530=(gconst35*r01);
IkReal x14531=(cj3*r20);
IkReal x14532=(gconst34*gconst35*r00);
CheckValue<IkReal> x14533=IKPowWithIntegerCheck(IKsign((((r00*x14525*x14531))+(((-1.0)*gconst34*x14530*x14531))+((cj3*r01*r21*x14526))+((cj3*r02*r22))+(((-1.0)*cj3*x14528*x14532)))),-1);
if(!x14533.valid){
continue;
}
CheckValue<IkReal> x14534 = IKatan2WithCheck(IkReal((((r00*r22*x14529))+((r22*sj3*x14530)))),IkReal(((((-1.0)*x14528*x14529*x14530))+((r01*x14525*x14527))+(((-1.0)*r00*sj3*x14526*x14528))+((x14527*x14532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14533.value)))+(x14534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14535=IKsin(j4);
IkReal x14536=IKcos(j4);
IkReal x14537=(r21*sj3);
IkReal x14538=(gconst35*r20);
IkReal x14539=(gconst35*r00);
IkReal x14540=(sj1*sj2);
IkReal x14541=(cj3*r11);
IkReal x14542=((1.0)*cj2);
IkReal x14543=(cj3*r21);
IkReal x14544=((1.0)*gconst35);
IkReal x14545=(gconst35*r10);
IkReal x14546=(r01*sj3);
IkReal x14547=(cj3*r01);
IkReal x14548=(gconst34*r00);
IkReal x14549=((1.0)*cj3);
IkReal x14550=(r11*sj3);
IkReal x14551=(gconst34*r20);
IkReal x14552=(gconst34*r10);
IkReal x14553=((1.0)*cj1*sj2);
IkReal x14554=(sj1*x14542);
IkReal x14555=((1.0)*x14536);
IkReal x14556=((1.0)*x14535);
IkReal x14557=(gconst34*x14536);
IkReal x14558=(x14553+x14554);
evalcond[0]=((((-1.0)*gconst34*r21*x14556))+(((-1.0)*r22*x14555))+((x14535*x14538)));
evalcond[1]=((((-1.0)*gconst34*r11*x14556))+(((-1.0)*r12*x14555))+((x14535*x14545)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14555))+((x14535*x14539))+(((-1.0)*gconst34*r01*x14556)));
evalcond[3]=(((gconst35*x14546))+(((-1.0)*x14536*x14539*x14549))+((sj3*x14548))+(((-1.0)*r02*x14535*x14549))+((x14547*x14557)));
evalcond[4]=((((-1.0)*sj3*x14539*x14555))+(((-1.0)*x14548*x14549))+(((-1.0)*r02*sj3*x14556))+(((-1.0)*x14544*x14547))+((x14546*x14557)));
evalcond[5]=(((sj3*x14552))+(((-1.0)*r12*x14535*x14549))+(((-1.0)*x14540))+((x14541*x14557))+((cj1*cj2))+(((-1.0)*cj3*r10*x14536*x14544))+((gconst35*x14550)));
evalcond[6]=(((sj3*x14551))+((x14543*x14557))+((gconst35*x14537))+(((-1.0)*x14536*x14538*x14549))+(((-1.0)*x14558))+(((-1.0)*r22*x14535*x14549)));
evalcond[7]=((((-1.0)*sj3*x14538*x14555))+(((-1.0)*r22*sj3*x14556))+((x14537*x14557))+(((-1.0)*cj1*x14542))+(((-1.0)*x14543*x14544))+x14540+(((-1.0)*x14549*x14551)));
evalcond[8]=((((-1.0)*x14558))+(((-1.0)*x14541*x14544))+((x14550*x14557))+(((-1.0)*x14549*x14552))+(((-1.0)*r12*sj3*x14556))+(((-1.0)*r10*sj3*x14536*x14544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14559=((1.0)*gconst34);
CheckValue<IkReal> x14560=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r21))+(((-1.0)*r20*x14559)))),-1);
if(!x14560.valid){
continue;
}
CheckValue<IkReal> x14561 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst35*r10))+(((-1.0)*r11*x14559)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14560.value)))+(x14561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14562=IKsin(j4);
IkReal x14563=IKcos(j4);
IkReal x14564=(r21*sj3);
IkReal x14565=(gconst35*r20);
IkReal x14566=(gconst35*r00);
IkReal x14567=(sj1*sj2);
IkReal x14568=(cj3*r11);
IkReal x14569=((1.0)*cj2);
IkReal x14570=(cj3*r21);
IkReal x14571=((1.0)*gconst35);
IkReal x14572=(gconst35*r10);
IkReal x14573=(r01*sj3);
IkReal x14574=(cj3*r01);
IkReal x14575=(gconst34*r00);
IkReal x14576=((1.0)*cj3);
IkReal x14577=(r11*sj3);
IkReal x14578=(gconst34*r20);
IkReal x14579=(gconst34*r10);
IkReal x14580=((1.0)*cj1*sj2);
IkReal x14581=(sj1*x14569);
IkReal x14582=((1.0)*x14563);
IkReal x14583=((1.0)*x14562);
IkReal x14584=(gconst34*x14563);
IkReal x14585=(x14581+x14580);
evalcond[0]=(((x14562*x14565))+(((-1.0)*r22*x14582))+(((-1.0)*gconst34*r21*x14583)));
evalcond[1]=((((-1.0)*r12*x14582))+((x14562*x14572))+(((-1.0)*gconst34*r11*x14583)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14582))+(((-1.0)*gconst34*r01*x14583))+((x14562*x14566)));
evalcond[3]=(((x14574*x14584))+(((-1.0)*r02*x14562*x14576))+((gconst35*x14573))+(((-1.0)*x14563*x14566*x14576))+((sj3*x14575)));
evalcond[4]=((((-1.0)*x14571*x14574))+(((-1.0)*sj3*x14566*x14582))+((x14573*x14584))+(((-1.0)*r02*sj3*x14583))+(((-1.0)*x14575*x14576)));
evalcond[5]=(((x14568*x14584))+(((-1.0)*cj3*r10*x14563*x14571))+(((-1.0)*r12*x14562*x14576))+(((-1.0)*x14567))+((cj1*cj2))+((gconst35*x14577))+((sj3*x14579)));
evalcond[6]=((((-1.0)*r22*x14562*x14576))+((x14570*x14584))+(((-1.0)*x14585))+((gconst35*x14564))+(((-1.0)*x14563*x14565*x14576))+((sj3*x14578)));
evalcond[7]=((((-1.0)*cj1*x14569))+(((-1.0)*x14570*x14571))+(((-1.0)*x14576*x14578))+((x14564*x14584))+x14567+(((-1.0)*sj3*x14565*x14582))+(((-1.0)*r22*sj3*x14583)));
evalcond[8]=((((-1.0)*x14585))+(((-1.0)*x14576*x14579))+(((-1.0)*r10*sj3*x14563*x14571))+(((-1.0)*x14568*x14571))+(((-1.0)*r12*sj3*x14583))+((x14577*x14584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14586=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+((gconst34*r10)))),-1);
if(!x14586.valid){
continue;
}
CheckValue<IkReal> x14587 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst34*r21))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14586.value)))+(x14587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14588=IKsin(j4);
IkReal x14589=IKcos(j4);
IkReal x14590=(r21*sj3);
IkReal x14591=(gconst35*r20);
IkReal x14592=(gconst35*r00);
IkReal x14593=(sj1*sj2);
IkReal x14594=(cj3*r11);
IkReal x14595=((1.0)*cj2);
IkReal x14596=(cj3*r21);
IkReal x14597=((1.0)*gconst35);
IkReal x14598=(gconst35*r10);
IkReal x14599=(r01*sj3);
IkReal x14600=(cj3*r01);
IkReal x14601=(gconst34*r00);
IkReal x14602=((1.0)*cj3);
IkReal x14603=(r11*sj3);
IkReal x14604=(gconst34*r20);
IkReal x14605=(gconst34*r10);
IkReal x14606=((1.0)*cj1*sj2);
IkReal x14607=(sj1*x14595);
IkReal x14608=((1.0)*x14589);
IkReal x14609=((1.0)*x14588);
IkReal x14610=(gconst34*x14589);
IkReal x14611=(x14606+x14607);
evalcond[0]=((((-1.0)*gconst34*r21*x14609))+(((-1.0)*r22*x14608))+((x14588*x14591)));
evalcond[1]=((((-1.0)*gconst34*r11*x14609))+(((-1.0)*r12*x14608))+((x14588*x14598)));
evalcond[2]=((-1.0)+(((-1.0)*gconst34*r01*x14609))+(((-1.0)*r02*x14608))+((x14588*x14592)));
evalcond[3]=((((-1.0)*r02*x14588*x14602))+((x14600*x14610))+((gconst35*x14599))+((sj3*x14601))+(((-1.0)*x14589*x14592*x14602)));
evalcond[4]=((((-1.0)*sj3*x14592*x14608))+((x14599*x14610))+(((-1.0)*r02*sj3*x14609))+(((-1.0)*x14601*x14602))+(((-1.0)*x14597*x14600)));
evalcond[5]=((((-1.0)*cj3*r10*x14589*x14597))+((x14594*x14610))+(((-1.0)*x14593))+(((-1.0)*r12*x14588*x14602))+((cj1*cj2))+((sj3*x14605))+((gconst35*x14603)));
evalcond[6]=((((-1.0)*x14589*x14591*x14602))+((x14596*x14610))+((gconst35*x14590))+(((-1.0)*r22*x14588*x14602))+((sj3*x14604))+(((-1.0)*x14611)));
evalcond[7]=(((x14590*x14610))+(((-1.0)*cj1*x14595))+(((-1.0)*r22*sj3*x14609))+(((-1.0)*sj3*x14591*x14608))+(((-1.0)*x14596*x14597))+x14593+(((-1.0)*x14602*x14604)));
evalcond[8]=((((-1.0)*r10*sj3*x14589*x14597))+(((-1.0)*x14594*x14597))+((x14603*x14610))+(((-1.0)*r12*sj3*x14609))+(((-1.0)*x14602*x14605))+(((-1.0)*x14611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14613 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14613)==0){
continue;
}
IkReal x14612=pow(x14613,-0.5);
CheckValue<IkReal> x14614 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14614.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14614.value));
IkReal gconst37=((-1.0)*r11*x14612);
IkReal gconst38=(r10*x14612);
CheckValue<IkReal> x14615 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14615.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14615.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14618 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14618.valid){
continue;
}
IkReal x14616=((-1.0)*(x14618.value));
IkReal x14617=x14612;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x14616;
IkReal gconst36=x14616;
IkReal gconst37=((-1.0)*r11*x14617);
IkReal gconst38=(r10*x14617);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14621 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14621.valid){
continue;
}
IkReal x14619=((-1.0)*(x14621.value));
IkReal x14620=x14612;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x14619;
IkReal gconst36=x14619;
IkReal gconst37=((-1.0)*r11*x14620);
IkReal gconst38=(r10*x14620);
CheckValue<IkReal> x14629=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14629.valid){
continue;
}
IkReal x14622=x14629.value;
IkReal x14623=(cj3*x14622);
IkReal x14624=(r00*x14623);
IkReal x14625=(r21*x14623);
IkReal x14626=(r20*x14623);
IkReal x14627=(r01*x14623);
IkReal x14628=(r10*r11*x14623);
j4eval[0]=IKsign((((r01*r10*r11*x14626))+((cj3*r02*r22))+((r10*r11*r21*x14624))+((r01*x14625*(r11*r11)))+((r20*x14624*(r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14632 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14632.valid){
continue;
}
IkReal x14630=((-1.0)*(x14632.value));
IkReal x14631=x14612;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x14630;
IkReal gconst36=x14630;
IkReal gconst37=((-1.0)*r11*x14631);
IkReal gconst38=(r10*x14631);
CheckValue<IkReal> x14640=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14640.valid){
continue;
}
IkReal x14633=x14640.value;
IkReal x14634=(sj3*x14633);
IkReal x14635=(r20*x14634);
IkReal x14636=(r00*x14634);
IkReal x14637=(r01*x14634);
IkReal x14638=(r21*x14634);
IkReal x14639=(r10*r11*x14634);
j4eval[0]=IKsign((((r01*r10*r11*x14635))+((r00*x14635*(r10*r10)))+((r10*r11*r21*x14636))+((r21*x14637*(r11*r11)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14641=gconst37*gconst37;
IkReal x14642=gconst38*gconst38;
IkReal x14643=(cj3*r00);
IkReal x14644=(r01*sj3);
IkReal x14645=((1.0)*gconst37);
IkReal x14646=(gconst38*r20);
IkReal x14647=(r00*sj3);
IkReal x14648=(gconst38*r21);
IkReal x14649=((1.0)*cj3*r01);
IkReal x14650=(r21*x14641);
IkReal x14651=(r20*x14642);
CheckValue<IkReal> x14652 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x14643*x14645))+(((-1.0)*gconst38*r22*x14649)))),IkReal((((cj3*gconst37*r01*x14648))+((x14643*x14650))+(((-1.0)*x14649*x14651))+(((-1.0)*x14643*x14645*x14646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14652.valid){
continue;
}
CheckValue<IkReal> x14653=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14644*x14645*x14646))+(((-1.0)*x14645*x14647*x14648))+((x14644*x14650))+((x14647*x14651))+((r02*r22*sj3)))),-1);
if(!x14653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14652.value)+(((1.5707963267949)*(x14653.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14654=IKsin(j4);
IkReal x14655=IKcos(j4);
IkReal x14656=(gconst37*r21);
IkReal x14657=(gconst38*sj3);
IkReal x14658=(gconst38*r20);
IkReal x14659=((1.0)*sj1);
IkReal x14660=(gconst37*r01);
IkReal x14661=((1.0)*cj1);
IkReal x14662=(cj3*gconst38);
IkReal x14663=(gconst37*r00);
IkReal x14664=((1.0)*cj3);
IkReal x14665=(gconst37*sj3);
IkReal x14666=(gconst37*r11);
IkReal x14667=(sj2*x14661);
IkReal x14668=(cj2*x14659);
IkReal x14669=((1.0)*x14655);
IkReal x14670=((1.0)*x14654);
IkReal x14671=(gconst38*x14654);
IkReal x14672=(sj3*x14655);
IkReal x14673=(cj3*gconst37*x14655);
IkReal x14674=(x14668+x14667);
evalcond[0]=(((x14654*x14658))+(((-1.0)*x14656*x14670))+(((-1.0)*r22*x14669)));
evalcond[1]=(((r10*x14671))+(((-1.0)*x14666*x14670))+(((-1.0)*r12*x14669)));
evalcond[2]=((-1.0)+(((-1.0)*x14660*x14670))+((r00*x14671))+(((-1.0)*r02*x14669)));
evalcond[3]=(((r01*x14657))+((cj3*x14655*x14660))+((sj3*x14663))+(((-1.0)*r02*x14654*x14664))+(((-1.0)*r00*x14662*x14669)));
evalcond[4]=(((x14660*x14672))+(((-1.0)*r00*x14657*x14669))+(((-1.0)*x14663*x14664))+(((-1.0)*r01*x14662))+(((-1.0)*r02*sj3*x14670)));
evalcond[5]=(((r10*x14665))+(((-1.0)*r12*x14654*x14664))+((cj3*x14655*x14666))+((cj1*cj2))+(((-1.0)*r10*x14662*x14669))+(((-1.0)*sj2*x14659))+((r11*x14657)));
evalcond[6]=((((-1.0)*x14674))+(((-1.0)*x14655*x14658*x14664))+((r21*x14657))+(((-1.0)*r22*x14654*x14664))+((cj3*x14655*x14656))+((r20*x14665)));
evalcond[7]=((((-1.0)*r22*sj3*x14670))+(((-1.0)*r21*x14662))+(((-1.0)*cj2*x14661))+(((-1.0)*r20*x14657*x14669))+((sj1*sj2))+((x14656*x14672))+(((-1.0)*gconst37*r20*x14664)));
evalcond[8]=((((-1.0)*x14674))+(((-1.0)*r12*sj3*x14670))+(((-1.0)*gconst37*r10*x14664))+(((-1.0)*r10*x14657*x14669))+(((-1.0)*r11*x14662))+((r11*x14655*x14665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14675=gconst38*gconst38;
IkReal x14676=gconst37*gconst37;
IkReal x14677=(r01*r20);
IkReal x14678=(gconst37*gconst38);
IkReal x14679=((1.0)*cj3);
IkReal x14680=(r00*sj3);
IkReal x14681=(r01*sj3);
IkReal x14682=(r21*x14676);
CheckValue<IkReal> x14683=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r21*x14678*x14679))+((cj3*r01*x14682))+((cj3*r00*r20*x14675))+((cj3*r02*r22))+(((-1.0)*x14677*x14678*x14679)))),-1);
if(!x14683.valid){
continue;
}
CheckValue<IkReal> x14684 = IKatan2WithCheck(IkReal((((gconst38*r22*x14681))+((gconst37*r22*x14680)))),IkReal((((sj3*x14675*x14677))+(((-1.0)*x14680*x14682))+((r20*x14678*x14680))+(((-1.0)*r21*x14678*x14681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14683.value)))+(x14684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14685=IKsin(j4);
IkReal x14686=IKcos(j4);
IkReal x14687=(gconst37*r21);
IkReal x14688=(gconst38*sj3);
IkReal x14689=(gconst38*r20);
IkReal x14690=((1.0)*sj1);
IkReal x14691=(gconst37*r01);
IkReal x14692=((1.0)*cj1);
IkReal x14693=(cj3*gconst38);
IkReal x14694=(gconst37*r00);
IkReal x14695=((1.0)*cj3);
IkReal x14696=(gconst37*sj3);
IkReal x14697=(gconst37*r11);
IkReal x14698=(sj2*x14692);
IkReal x14699=(cj2*x14690);
IkReal x14700=((1.0)*x14686);
IkReal x14701=((1.0)*x14685);
IkReal x14702=(gconst38*x14685);
IkReal x14703=(sj3*x14686);
IkReal x14704=(cj3*gconst37*x14686);
IkReal x14705=(x14699+x14698);
evalcond[0]=((((-1.0)*x14687*x14701))+((x14685*x14689))+(((-1.0)*r22*x14700)));
evalcond[1]=((((-1.0)*r12*x14700))+(((-1.0)*x14697*x14701))+((r10*x14702)));
evalcond[2]=((-1.0)+((r00*x14702))+(((-1.0)*x14691*x14701))+(((-1.0)*r02*x14700)));
evalcond[3]=(((r01*x14688))+((cj3*x14686*x14691))+((sj3*x14694))+(((-1.0)*r00*x14693*x14700))+(((-1.0)*r02*x14685*x14695)));
evalcond[4]=((((-1.0)*x14694*x14695))+(((-1.0)*r02*sj3*x14701))+((x14691*x14703))+(((-1.0)*r00*x14688*x14700))+(((-1.0)*r01*x14693)));
evalcond[5]=(((cj3*x14686*x14697))+((r11*x14688))+(((-1.0)*sj2*x14690))+(((-1.0)*r12*x14685*x14695))+((cj1*cj2))+((r10*x14696))+(((-1.0)*r10*x14693*x14700)));
evalcond[6]=((((-1.0)*r22*x14685*x14695))+(((-1.0)*x14705))+((cj3*x14686*x14687))+((r20*x14696))+(((-1.0)*x14686*x14689*x14695))+((r21*x14688)));
evalcond[7]=(((sj1*sj2))+(((-1.0)*r22*sj3*x14701))+(((-1.0)*r20*x14688*x14700))+(((-1.0)*cj2*x14692))+(((-1.0)*r21*x14693))+((x14687*x14703))+(((-1.0)*gconst37*r20*x14695)));
evalcond[8]=((((-1.0)*x14705))+(((-1.0)*r12*sj3*x14701))+(((-1.0)*r11*x14693))+(((-1.0)*r10*x14688*x14700))+((r11*x14686*x14696))+(((-1.0)*gconst37*r10*x14695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14706=((1.0)*gconst37);
CheckValue<IkReal> x14707 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x14706))+((gconst38*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14707.valid){
continue;
}
CheckValue<IkReal> x14708=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14706))+(((-1.0)*gconst38*r21)))),-1);
if(!x14708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14707.value)+(((1.5707963267949)*(x14708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14709=IKsin(j4);
IkReal x14710=IKcos(j4);
IkReal x14711=(gconst37*r21);
IkReal x14712=(gconst38*sj3);
IkReal x14713=(gconst38*r20);
IkReal x14714=((1.0)*sj1);
IkReal x14715=(gconst37*r01);
IkReal x14716=((1.0)*cj1);
IkReal x14717=(cj3*gconst38);
IkReal x14718=(gconst37*r00);
IkReal x14719=((1.0)*cj3);
IkReal x14720=(gconst37*sj3);
IkReal x14721=(gconst37*r11);
IkReal x14722=(sj2*x14716);
IkReal x14723=(cj2*x14714);
IkReal x14724=((1.0)*x14710);
IkReal x14725=((1.0)*x14709);
IkReal x14726=(gconst38*x14709);
IkReal x14727=(sj3*x14710);
IkReal x14728=(cj3*gconst37*x14710);
IkReal x14729=(x14723+x14722);
evalcond[0]=((((-1.0)*x14711*x14725))+((x14709*x14713))+(((-1.0)*r22*x14724)));
evalcond[1]=((((-1.0)*r12*x14724))+(((-1.0)*x14721*x14725))+((r10*x14726)));
evalcond[2]=((-1.0)+((r00*x14726))+(((-1.0)*x14715*x14725))+(((-1.0)*r02*x14724)));
evalcond[3]=((((-1.0)*r02*x14709*x14719))+((sj3*x14718))+((r01*x14712))+((cj3*x14710*x14715))+(((-1.0)*r00*x14717*x14724)));
evalcond[4]=(((x14715*x14727))+(((-1.0)*r00*x14712*x14724))+(((-1.0)*r02*sj3*x14725))+(((-1.0)*x14718*x14719))+(((-1.0)*r01*x14717)));
evalcond[5]=(((r11*x14712))+((cj3*x14710*x14721))+(((-1.0)*r10*x14717*x14724))+((cj1*cj2))+(((-1.0)*r12*x14709*x14719))+(((-1.0)*sj2*x14714))+((r10*x14720)));
evalcond[6]=((((-1.0)*r22*x14709*x14719))+((r21*x14712))+((r20*x14720))+(((-1.0)*x14710*x14713*x14719))+(((-1.0)*x14729))+((cj3*x14710*x14711)));
evalcond[7]=((((-1.0)*gconst37*r20*x14719))+((x14711*x14727))+(((-1.0)*r22*sj3*x14725))+((sj1*sj2))+(((-1.0)*r20*x14712*x14724))+(((-1.0)*r21*x14717))+(((-1.0)*cj2*x14716)));
evalcond[8]=((((-1.0)*gconst37*r10*x14719))+(((-1.0)*r11*x14717))+(((-1.0)*r12*sj3*x14725))+(((-1.0)*x14729))+(((-1.0)*r10*x14712*x14724))+((r11*x14710*x14720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14731 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14731)==0){
continue;
}
IkReal x14730=pow(x14731,-0.5);
CheckValue<IkReal> x14732 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14732.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14732.value))));
IkReal gconst40=((1.0)*r11*x14730);
IkReal gconst41=((-1.0)*r10*x14730);
CheckValue<IkReal> x14733 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14733.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14733.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14736 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14736.valid){
continue;
}
IkReal x14734=((1.0)*(x14736.value));
IkReal x14735=x14730;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14734)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14734)));
IkReal gconst40=((1.0)*r11*x14735);
IkReal gconst41=((-1.0)*r10*x14735);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14737=gconst41*gconst41;
IkReal x14738=gconst40*gconst40;
IkReal x14739=(r01*r21);
IkReal x14740=(gconst41*sj3);
IkReal x14741=((1.0)*gconst40);
IkReal x14742=(gconst40*r00);
IkReal x14743=(r00*r21);
IkReal x14744=(cj3*gconst41);
IkReal x14745=(r20*x14737);
CheckValue<IkReal> x14746=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14741*x14743*x14744))+(((-1.0)*r01*r20*x14741*x14744))+((cj3*r00*x14745))+((cj3*x14738*x14739))+((cj3*r02*r22)))),-1);
if(!x14746.valid){
continue;
}
CheckValue<IkReal> x14747 = IKatan2WithCheck(IkReal((((r22*sj3*x14742))+((r01*r22*x14740)))),IkReal((((r01*sj3*x14745))+((r20*x14740*x14742))+(((-1.0)*sj3*x14738*x14743))+(((-1.0)*x14739*x14740*x14741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14746.value)))+(x14747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14748=IKsin(j4);
IkReal x14749=IKcos(j4);
IkReal x14750=(gconst40*r01);
IkReal x14751=(cj3*gconst41);
IkReal x14752=(gconst40*sj3);
IkReal x14753=(sj1*sj2);
IkReal x14754=(gconst41*sj3);
IkReal x14755=((1.0)*cj1);
IkReal x14756=(gconst40*r11);
IkReal x14757=(gconst40*r21);
IkReal x14758=(sj2*x14755);
IkReal x14759=((1.0)*cj2*sj1);
IkReal x14760=((1.0)*x14749);
IkReal x14761=((1.0)*x14748);
IkReal x14762=(cj3*x14749);
IkReal x14763=(gconst41*x14748);
IkReal x14764=((1.0)*cj3*gconst40);
IkReal x14765=(x14758+x14759);
evalcond[0]=((((-1.0)*x14757*x14761))+((r20*x14763))+(((-1.0)*r22*x14760)));
evalcond[1]=(((r10*x14763))+(((-1.0)*x14756*x14761))+(((-1.0)*r12*x14760)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14760))+((r00*x14763))+(((-1.0)*x14750*x14761)));
evalcond[3]=(((x14750*x14762))+(((-1.0)*cj3*r02*x14761))+(((-1.0)*r00*x14751*x14760))+((r01*x14754))+((r00*x14752)));
evalcond[4]=((((-1.0)*r01*x14751))+(((-1.0)*r00*x14764))+((sj3*x14749*x14750))+(((-1.0)*r02*sj3*x14761))+(((-1.0)*r00*x14754*x14760)));
evalcond[5]=((((-1.0)*r10*x14751*x14760))+(((-1.0)*cj3*r12*x14761))+((cj1*cj2))+((r10*x14752))+((r11*x14754))+((x14756*x14762))+(((-1.0)*x14753)));
evalcond[6]=(((r20*x14752))+(((-1.0)*cj3*r22*x14761))+(((-1.0)*r20*x14751*x14760))+((r21*x14754))+(((-1.0)*x14765))+((x14757*x14762)));
evalcond[7]=(((r21*x14749*x14752))+(((-1.0)*r20*x14754*x14760))+(((-1.0)*r20*x14764))+(((-1.0)*cj2*x14755))+(((-1.0)*r22*sj3*x14761))+x14753+(((-1.0)*r21*x14751)));
evalcond[8]=((((-1.0)*r10*x14764))+(((-1.0)*r12*sj3*x14761))+((r11*x14749*x14752))+(((-1.0)*r10*x14754*x14760))+(((-1.0)*x14765))+(((-1.0)*r11*x14751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14766=((1.0)*gconst40);
CheckValue<IkReal> x14767 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x14766))+((gconst41*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14767.valid){
continue;
}
CheckValue<IkReal> x14768=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14766))+(((-1.0)*gconst41*r21)))),-1);
if(!x14768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14767.value)+(((1.5707963267949)*(x14768.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14769=IKsin(j4);
IkReal x14770=IKcos(j4);
IkReal x14771=(gconst40*r01);
IkReal x14772=(cj3*gconst41);
IkReal x14773=(gconst40*sj3);
IkReal x14774=(sj1*sj2);
IkReal x14775=(gconst41*sj3);
IkReal x14776=((1.0)*cj1);
IkReal x14777=(gconst40*r11);
IkReal x14778=(gconst40*r21);
IkReal x14779=(sj2*x14776);
IkReal x14780=((1.0)*cj2*sj1);
IkReal x14781=((1.0)*x14770);
IkReal x14782=((1.0)*x14769);
IkReal x14783=(cj3*x14770);
IkReal x14784=(gconst41*x14769);
IkReal x14785=((1.0)*cj3*gconst40);
IkReal x14786=(x14780+x14779);
evalcond[0]=((((-1.0)*x14778*x14782))+((r20*x14784))+(((-1.0)*r22*x14781)));
evalcond[1]=(((r10*x14784))+(((-1.0)*x14777*x14782))+(((-1.0)*r12*x14781)));
evalcond[2]=((-1.0)+((r00*x14784))+(((-1.0)*x14771*x14782))+(((-1.0)*r02*x14781)));
evalcond[3]=(((r00*x14773))+((r01*x14775))+(((-1.0)*cj3*r02*x14782))+(((-1.0)*r00*x14772*x14781))+((x14771*x14783)));
evalcond[4]=((((-1.0)*r02*sj3*x14782))+((sj3*x14770*x14771))+(((-1.0)*r01*x14772))+(((-1.0)*r00*x14775*x14781))+(((-1.0)*r00*x14785)));
evalcond[5]=(((r11*x14775))+((r10*x14773))+(((-1.0)*cj3*r12*x14782))+(((-1.0)*x14774))+((cj1*cj2))+((x14777*x14783))+(((-1.0)*r10*x14772*x14781)));
evalcond[6]=(((x14778*x14783))+((r21*x14775))+(((-1.0)*r20*x14772*x14781))+((r20*x14773))+(((-1.0)*cj3*r22*x14782))+(((-1.0)*x14786)));
evalcond[7]=((((-1.0)*cj2*x14776))+(((-1.0)*r21*x14772))+(((-1.0)*r20*x14785))+((r21*x14770*x14773))+(((-1.0)*r22*sj3*x14782))+x14774+(((-1.0)*r20*x14775*x14781)));
evalcond[8]=((((-1.0)*r10*x14775*x14781))+((r11*x14770*x14773))+(((-1.0)*r10*x14785))+(((-1.0)*r11*x14772))+(((-1.0)*r12*sj3*x14782))+(((-1.0)*x14786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14787=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14787);
rxp0_2=(py*r00);
rxp1_0=(r21*x14787);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14788=(cj5*r00);
IkReal x14789=(r01*sj5);
j4eval[0]=((((-1.0)*x14789))+x14788);
j4eval[1]=((((-1.0)*sj3*x14788))+((sj3*x14789)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14790=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14790);
rxp0_2=(py*r00);
rxp1_0=(r21*x14790);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14791=(cj5*r00);
IkReal x14792=(r01*sj5);
j4eval[0]=((((-1.0)*x14792))+x14791);
j4eval[1]=(((cj3*x14792))+(((-1.0)*cj3*x14791)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14793=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14793);
rxp0_2=(py*r00);
rxp1_0=(r21*x14793);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14794=((1.0)*r00);
CheckValue<IkReal> x14795=IKPowWithIntegerCheck(cj3,-1);
if(!x14795.valid){
continue;
}
CheckValue<IkReal> x14796=IKPowWithIntegerCheck(r12,-1);
if(!x14796.valid){
continue;
}
CheckValue<IkReal> x14797=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14794))),-1);
if(!x14797.valid){
continue;
}
if( IKabs(((x14795.value)*(x14796.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14797.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14794)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14795.value)*(x14796.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14797.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14794))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14795.value)*(x14796.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14797.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14794))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14798=IKsin(j4);
IkReal x14799=IKcos(j4);
IkReal x14800=((1.0)*cj3);
IkReal x14801=(cj5*r21);
IkReal x14802=(sj1*sj2);
IkReal x14803=(cj5*r01);
IkReal x14804=(r20*sj5);
IkReal x14805=((1.0)*cj1);
IkReal x14806=(r01*sj5);
IkReal x14807=(r00*sj5);
IkReal x14808=((1.0)*sj3);
IkReal x14809=(sj2*x14805);
IkReal x14810=((1.0)*cj2*sj1);
IkReal x14811=((1.0)*x14798);
IkReal x14812=(cj5*x14799);
IkReal x14813=(cj5*x14798);
IkReal x14814=(r21*sj5*x14799);
IkReal x14815=(x14810+x14809);
evalcond[0]=((-1.0)*r12*x14799);
evalcond[1]=((((-1.0)*r21*sj5*x14811))+((r20*x14813)));
evalcond[2]=((-1.0)+(((-1.0)*x14806*x14811))+((r00*x14813)));
evalcond[3]=((((-1.0)*r12*x14798*x14800))+((cj1*cj2))+(((-1.0)*x14802)));
evalcond[4]=((((-1.0)*r12*x14798*x14808))+(((-1.0)*x14815)));
evalcond[5]=(((sj3*x14803))+((sj3*x14807))+((cj3*x14799*x14806))+(((-1.0)*r00*x14800*x14812)));
evalcond[6]=((((-1.0)*r00*x14808*x14812))+(((-1.0)*x14800*x14803))+(((-1.0)*x14800*x14807))+((sj3*x14799*x14806)));
evalcond[7]=(((sj3*x14801))+((sj3*x14804))+(((-1.0)*r20*x14800*x14812))+(((-1.0)*x14815))+((cj3*x14814)));
evalcond[8]=(((sj3*x14814))+(((-1.0)*r20*x14808*x14812))+x14802+(((-1.0)*x14800*x14804))+(((-1.0)*x14800*x14801))+(((-1.0)*cj2*x14805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14816=((1.0)*sj5);
IkReal x14817=(cj5*r00);
CheckValue<IkReal> x14818=IKPowWithIntegerCheck((x14817+(((-1.0)*r01*x14816))),-1);
if(!x14818.valid){
continue;
}
CheckValue<IkReal> x14819=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*x14817))),-1);
if(!x14819.valid){
continue;
}
if( IKabs(x14818.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14819.value)*(((((-1.0)*r00*sj3*x14816))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14818.value)+IKsqr(((x14819.value)*(((((-1.0)*r00*sj3*x14816))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14818.value, ((x14819.value)*(((((-1.0)*r00*sj3*x14816))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14820=IKsin(j4);
IkReal x14821=IKcos(j4);
IkReal x14822=((1.0)*cj3);
IkReal x14823=(cj5*r21);
IkReal x14824=(sj1*sj2);
IkReal x14825=(cj5*r01);
IkReal x14826=(r20*sj5);
IkReal x14827=((1.0)*cj1);
IkReal x14828=(r01*sj5);
IkReal x14829=(r00*sj5);
IkReal x14830=((1.0)*sj3);
IkReal x14831=(sj2*x14827);
IkReal x14832=((1.0)*cj2*sj1);
IkReal x14833=((1.0)*x14820);
IkReal x14834=(cj5*x14821);
IkReal x14835=(cj5*x14820);
IkReal x14836=(r21*sj5*x14821);
IkReal x14837=(x14832+x14831);
evalcond[0]=((-1.0)*r12*x14821);
evalcond[1]=(((r20*x14835))+(((-1.0)*r21*sj5*x14833)));
evalcond[2]=((-1.0)+(((-1.0)*x14828*x14833))+((r00*x14835)));
evalcond[3]=((((-1.0)*x14824))+((cj1*cj2))+(((-1.0)*r12*x14820*x14822)));
evalcond[4]=((((-1.0)*r12*x14820*x14830))+(((-1.0)*x14837)));
evalcond[5]=(((sj3*x14829))+((sj3*x14825))+(((-1.0)*r00*x14822*x14834))+((cj3*x14821*x14828)));
evalcond[6]=((((-1.0)*x14822*x14825))+(((-1.0)*x14822*x14829))+(((-1.0)*r00*x14830*x14834))+((sj3*x14821*x14828)));
evalcond[7]=(((sj3*x14826))+((sj3*x14823))+(((-1.0)*r20*x14822*x14834))+((cj3*x14836))+(((-1.0)*x14837)));
evalcond[8]=(x14824+(((-1.0)*x14822*x14823))+(((-1.0)*x14822*x14826))+(((-1.0)*r20*x14830*x14834))+(((-1.0)*cj2*x14827))+((sj3*x14836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14838=(r01*sj5);
IkReal x14839=(cj5*r00);
CheckValue<IkReal> x14840=IKPowWithIntegerCheck(((((-1.0)*x14838))+x14839),-1);
if(!x14840.valid){
continue;
}
CheckValue<IkReal> x14841=IKPowWithIntegerCheck(((((-1.0)*sj3*x14839))+((sj3*x14838))),-1);
if(!x14841.valid){
continue;
}
if( IKabs(x14840.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14841.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14840.value)+IKsqr(((x14841.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14840.value, ((x14841.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14842=IKsin(j4);
IkReal x14843=IKcos(j4);
IkReal x14844=((1.0)*cj3);
IkReal x14845=(cj5*r21);
IkReal x14846=(sj1*sj2);
IkReal x14847=(cj5*r01);
IkReal x14848=(r20*sj5);
IkReal x14849=((1.0)*cj1);
IkReal x14850=(r01*sj5);
IkReal x14851=(r00*sj5);
IkReal x14852=((1.0)*sj3);
IkReal x14853=(sj2*x14849);
IkReal x14854=((1.0)*cj2*sj1);
IkReal x14855=((1.0)*x14842);
IkReal x14856=(cj5*x14843);
IkReal x14857=(cj5*x14842);
IkReal x14858=(r21*sj5*x14843);
IkReal x14859=(x14853+x14854);
evalcond[0]=((-1.0)*r12*x14843);
evalcond[1]=(((r20*x14857))+(((-1.0)*r21*sj5*x14855)));
evalcond[2]=((-1.0)+((r00*x14857))+(((-1.0)*x14850*x14855)));
evalcond[3]=((((-1.0)*x14846))+((cj1*cj2))+(((-1.0)*r12*x14842*x14844)));
evalcond[4]=((((-1.0)*x14859))+(((-1.0)*r12*x14842*x14852)));
evalcond[5]=((((-1.0)*r00*x14844*x14856))+((sj3*x14851))+((sj3*x14847))+((cj3*x14843*x14850)));
evalcond[6]=((((-1.0)*x14844*x14851))+(((-1.0)*x14844*x14847))+(((-1.0)*r00*x14852*x14856))+((sj3*x14843*x14850)));
evalcond[7]=(((sj3*x14845))+((sj3*x14848))+(((-1.0)*r20*x14844*x14856))+((cj3*x14858))+(((-1.0)*x14859)));
evalcond[8]=((((-1.0)*cj2*x14849))+x14846+(((-1.0)*r20*x14852*x14856))+((sj3*x14858))+(((-1.0)*x14844*x14848))+(((-1.0)*x14844*x14845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14860=cj5*cj5;
IkReal x14861=(cj3*r00);
IkReal x14862=(r01*sj3);
IkReal x14863=(r00*sj3);
IkReal x14864=(cj3*r01);
IkReal x14865=(cj5*r20*sj5);
IkReal x14866=(r21*x14860);
IkReal x14867=(r20*x14860);
IkReal x14868=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x14869=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14864*x14866))+(((-1.0)*x14864*x14865))+(((-1.0)*x14861*x14868))+((cj3*r02*r22))+((r21*x14864))+((x14861*x14867)))),-1);
if(!x14869.valid){
continue;
}
CheckValue<IkReal> x14870 = IKatan2WithCheck(IkReal((((r22*sj5*x14863))+((cj5*r22*x14862)))),IkReal(((((-1.0)*x14862*x14868))+((x14863*x14866))+((x14863*x14865))+((x14862*x14867))+(((-1.0)*r21*x14863)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14869.value)))+(x14870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14871=IKsin(j4);
IkReal x14872=IKcos(j4);
IkReal x14873=(r11*sj5);
IkReal x14874=(cj5*sj3);
IkReal x14875=(sj1*sj2);
IkReal x14876=(r21*sj5);
IkReal x14877=((1.0)*cj1);
IkReal x14878=(sj3*sj5);
IkReal x14879=(cj3*cj5);
IkReal x14880=(r01*sj5);
IkReal x14881=(sj2*x14877);
IkReal x14882=((1.0)*cj2*sj1);
IkReal x14883=((1.0)*x14872);
IkReal x14884=((1.0)*x14871);
IkReal x14885=(cj3*x14872);
IkReal x14886=((1.0)*x14879);
IkReal x14887=((1.0)*cj3*sj5);
IkReal x14888=(cj5*x14871);
IkReal x14889=(sj3*x14872);
IkReal x14890=(x14882+x14881);
evalcond[0]=((((-1.0)*r22*x14883))+((r20*x14888))+(((-1.0)*x14876*x14884)));
evalcond[1]=((((-1.0)*x14873*x14884))+((r10*x14888))+(((-1.0)*r12*x14883)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14883))+((r00*x14888))+(((-1.0)*x14880*x14884)));
evalcond[3]=(((r00*x14878))+((r01*x14874))+((x14880*x14885))+(((-1.0)*cj3*r02*x14884))+(((-1.0)*r00*x14879*x14883)));
evalcond[4]=(((r01*x14872*x14878))+(((-1.0)*r00*x14887))+(((-1.0)*r01*x14886))+(((-1.0)*r00*x14874*x14883))+(((-1.0)*r02*sj3*x14884)));
evalcond[5]=(((r11*x14874))+(((-1.0)*r10*x14879*x14883))+((r10*x14878))+((x14873*x14885))+(((-1.0)*cj3*r12*x14884))+((cj1*cj2))+(((-1.0)*x14875)));
evalcond[6]=((((-1.0)*r20*x14879*x14883))+((r21*x14874))+((x14876*x14885))+((r20*x14878))+(((-1.0)*x14890))+(((-1.0)*cj3*r22*x14884)));
evalcond[7]=((((-1.0)*r22*sj3*x14884))+x14875+(((-1.0)*r20*x14887))+(((-1.0)*r21*x14886))+((x14876*x14889))+(((-1.0)*cj2*x14877))+(((-1.0)*r20*x14874*x14883)));
evalcond[8]=((((-1.0)*r10*x14887))+((x14873*x14889))+(((-1.0)*r12*sj3*x14884))+(((-1.0)*r11*x14886))+(((-1.0)*x14890))+(((-1.0)*r10*x14874*x14883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14891=((1.0)*sj5);
CheckValue<IkReal> x14892 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x14891)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14892.valid){
continue;
}
CheckValue<IkReal> x14893=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14891))+(((-1.0)*cj5*r21)))),-1);
if(!x14893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14892.value)+(((1.5707963267949)*(x14893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14894=IKsin(j4);
IkReal x14895=IKcos(j4);
IkReal x14896=(r11*sj5);
IkReal x14897=(cj5*sj3);
IkReal x14898=(sj1*sj2);
IkReal x14899=(r21*sj5);
IkReal x14900=((1.0)*cj1);
IkReal x14901=(sj3*sj5);
IkReal x14902=(cj3*cj5);
IkReal x14903=(r01*sj5);
IkReal x14904=(sj2*x14900);
IkReal x14905=((1.0)*cj2*sj1);
IkReal x14906=((1.0)*x14895);
IkReal x14907=((1.0)*x14894);
IkReal x14908=(cj3*x14895);
IkReal x14909=((1.0)*x14902);
IkReal x14910=((1.0)*cj3*sj5);
IkReal x14911=(cj5*x14894);
IkReal x14912=(sj3*x14895);
IkReal x14913=(x14905+x14904);
evalcond[0]=((((-1.0)*r22*x14906))+(((-1.0)*x14899*x14907))+((r20*x14911)));
evalcond[1]=(((r10*x14911))+(((-1.0)*r12*x14906))+(((-1.0)*x14896*x14907)));
evalcond[2]=((-1.0)+((r00*x14911))+(((-1.0)*x14903*x14907))+(((-1.0)*r02*x14906)));
evalcond[3]=(((r00*x14901))+(((-1.0)*r00*x14902*x14906))+(((-1.0)*cj3*r02*x14907))+((r01*x14897))+((x14903*x14908)));
evalcond[4]=((((-1.0)*r00*x14897*x14906))+(((-1.0)*r02*sj3*x14907))+(((-1.0)*r01*x14909))+(((-1.0)*r00*x14910))+((r01*x14895*x14901)));
evalcond[5]=(((r11*x14897))+(((-1.0)*r10*x14902*x14906))+(((-1.0)*cj3*r12*x14907))+((cj1*cj2))+(((-1.0)*x14898))+((r10*x14901))+((x14896*x14908)));
evalcond[6]=((((-1.0)*r20*x14902*x14906))+(((-1.0)*x14913))+((r21*x14897))+((x14899*x14908))+(((-1.0)*cj3*r22*x14907))+((r20*x14901)));
evalcond[7]=(x14898+(((-1.0)*r20*x14897*x14906))+((x14899*x14912))+(((-1.0)*r22*sj3*x14907))+(((-1.0)*cj2*x14900))+(((-1.0)*r20*x14910))+(((-1.0)*r21*x14909)));
evalcond[8]=((((-1.0)*r10*x14910))+(((-1.0)*x14913))+(((-1.0)*r11*x14909))+(((-1.0)*r10*x14897*x14906))+((x14896*x14912))+(((-1.0)*r12*sj3*x14907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14914=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14914.valid){
continue;
}
CheckValue<IkReal> x14915 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14914.value)))+(x14915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14916=IKsin(j4);
IkReal x14917=IKcos(j4);
IkReal x14918=(r11*sj5);
IkReal x14919=(cj5*sj3);
IkReal x14920=(sj1*sj2);
IkReal x14921=(r21*sj5);
IkReal x14922=((1.0)*cj1);
IkReal x14923=(sj3*sj5);
IkReal x14924=(cj3*cj5);
IkReal x14925=(r01*sj5);
IkReal x14926=(sj2*x14922);
IkReal x14927=((1.0)*cj2*sj1);
IkReal x14928=((1.0)*x14917);
IkReal x14929=((1.0)*x14916);
IkReal x14930=(cj3*x14917);
IkReal x14931=((1.0)*x14924);
IkReal x14932=((1.0)*cj3*sj5);
IkReal x14933=(cj5*x14916);
IkReal x14934=(sj3*x14917);
IkReal x14935=(x14927+x14926);
evalcond[0]=((((-1.0)*r22*x14928))+(((-1.0)*x14921*x14929))+((r20*x14933)));
evalcond[1]=((((-1.0)*x14918*x14929))+((r10*x14933))+(((-1.0)*r12*x14928)));
evalcond[2]=((-1.0)+((r00*x14933))+(((-1.0)*r02*x14928))+(((-1.0)*x14925*x14929)));
evalcond[3]=((((-1.0)*r00*x14924*x14928))+((r01*x14919))+(((-1.0)*cj3*r02*x14929))+((r00*x14923))+((x14925*x14930)));
evalcond[4]=(((r01*x14917*x14923))+(((-1.0)*r00*x14919*x14928))+(((-1.0)*r02*sj3*x14929))+(((-1.0)*r01*x14931))+(((-1.0)*r00*x14932)));
evalcond[5]=((((-1.0)*x14920))+((x14918*x14930))+((r11*x14919))+((r10*x14923))+(((-1.0)*cj3*r12*x14929))+(((-1.0)*r10*x14924*x14928))+((cj1*cj2)));
evalcond[6]=(((r21*x14919))+((x14921*x14930))+(((-1.0)*r20*x14924*x14928))+(((-1.0)*x14935))+(((-1.0)*cj3*r22*x14929))+((r20*x14923)));
evalcond[7]=(((x14921*x14934))+x14920+(((-1.0)*cj2*x14922))+(((-1.0)*r22*sj3*x14929))+(((-1.0)*r21*x14931))+(((-1.0)*r20*x14919*x14928))+(((-1.0)*r20*x14932)));
evalcond[8]=(((x14918*x14934))+(((-1.0)*r12*sj3*x14929))+(((-1.0)*r10*x14932))+(((-1.0)*r11*x14931))+(((-1.0)*x14935))+(((-1.0)*r10*x14919*x14928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14936=((-1.0)*r10);
IkReal x14938 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14938)==0){
continue;
}
IkReal x14937=pow(x14938,-0.5);
CheckValue<IkReal> x14939 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x14936),IKFAST_ATAN2_MAGTHRESH);
if(!x14939.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14939.value));
IkReal gconst13=(r11*x14937);
IkReal gconst14=(x14936*x14937);
CheckValue<IkReal> x14940 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14940.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14940.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14941=((-1.0)*r10);
IkReal x14942=x14937;
CheckValue<IkReal> x14944 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x14941),IKFAST_ATAN2_MAGTHRESH);
if(!x14944.valid){
continue;
}
IkReal x14943=((-1.0)*(x14944.value));
sj5=gconst13;
cj5=gconst14;
j5=x14943;
IkReal gconst12=x14943;
IkReal gconst13=(r11*x14942);
IkReal gconst14=(x14941*x14942);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14945=((1.0)*gconst13);
CheckValue<IkReal> x14946=IKPowWithIntegerCheck(IKsign((((gconst14*r21))+((gconst13*r20)))),-1);
if(!x14946.valid){
continue;
}
CheckValue<IkReal> x14947 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*r11*sj0*x14945))+(((-1.0)*cj0*r01*x14945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14946.value)))+(x14947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14948=IKsin(j4);
IkReal x14949=IKcos(j4);
IkReal x14950=((1.0)*r22);
IkReal x14951=((1.0)*cj3);
IkReal x14952=(gconst13*r20);
IkReal x14953=(gconst13*sj3);
IkReal x14954=(gconst13*r11);
IkReal x14955=(sj1*sj2);
IkReal x14956=(gconst14*r21);
IkReal x14957=(gconst14*r20);
IkReal x14958=(cj2*sj1);
IkReal x14959=(cj1*sj2);
IkReal x14960=(gconst14*sj3);
IkReal x14961=(gconst14*r10);
IkReal x14962=(gconst14*r00);
IkReal x14963=((1.0)*x14948);
IkReal x14964=((1.0)*cj1*cj2);
IkReal x14965=((1.0)*x14949);
IkReal x14966=(cj3*gconst13*x14949);
evalcond[0]=((((-1.0)*gconst13*r21*x14963))+((x14948*x14957))+(((-1.0)*x14949*x14950)));
evalcond[1]=((((-1.0)*r02*x14965))+sj0+(((-1.0)*gconst13*r01*x14963))+((x14948*x14962)));
evalcond[2]=((((-1.0)*x14954*x14963))+(((-1.0)*r12*x14965))+(((-1.0)*cj0))+((x14948*x14961)));
evalcond[3]=((((-1.0)*x14949*x14951*x14957))+((sj3*x14956))+((sj3*x14952))+(((-1.0)*x14958))+(((-1.0)*x14959))+((r21*x14966))+(((-1.0)*cj3*x14948*x14950)));
evalcond[4]=(x14955+(((-1.0)*sj3*x14948*x14950))+(((-1.0)*x14964))+(((-1.0)*x14951*x14956))+(((-1.0)*x14951*x14952))+(((-1.0)*sj3*x14957*x14965))+((r21*x14949*x14953)));
evalcond[5]=(((r01*x14960))+((r01*x14966))+(((-1.0)*r02*x14948*x14951))+((cj0*x14955))+((r00*x14953))+(((-1.0)*cj0*x14964))+(((-1.0)*x14949*x14951*x14962)));
evalcond[6]=((((-1.0)*sj0*x14964))+((r10*x14953))+((r11*x14960))+((sj0*x14955))+((cj3*x14949*x14954))+(((-1.0)*x14949*x14951*x14961))+(((-1.0)*r12*x14948*x14951)));
evalcond[7]=(((cj0*x14959))+((cj0*x14958))+(((-1.0)*r00*x14960*x14965))+(((-1.0)*r02*sj3*x14963))+(((-1.0)*gconst14*r01*x14951))+(((-1.0)*gconst13*r00*x14951))+((r01*x14949*x14953)));
evalcond[8]=(((sj0*x14959))+((sj0*x14958))+((r11*x14949*x14953))+(((-1.0)*gconst14*r11*x14951))+(((-1.0)*r10*x14960*x14965))+(((-1.0)*r12*sj3*x14963))+(((-1.0)*gconst13*r10*x14951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14967=((1.0)*gconst13);
CheckValue<IkReal> x14968 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst14*r20))+(((-1.0)*cj0*r21*x14967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14968.valid){
continue;
}
CheckValue<IkReal> x14969=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14967))+(((-1.0)*gconst14*r01)))),-1);
if(!x14969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14968.value)+(((1.5707963267949)*(x14969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14970=IKsin(j4);
IkReal x14971=IKcos(j4);
IkReal x14972=((1.0)*r22);
IkReal x14973=((1.0)*cj3);
IkReal x14974=(gconst13*r20);
IkReal x14975=(gconst13*sj3);
IkReal x14976=(gconst13*r11);
IkReal x14977=(sj1*sj2);
IkReal x14978=(gconst14*r21);
IkReal x14979=(gconst14*r20);
IkReal x14980=(cj2*sj1);
IkReal x14981=(cj1*sj2);
IkReal x14982=(gconst14*sj3);
IkReal x14983=(gconst14*r10);
IkReal x14984=(gconst14*r00);
IkReal x14985=((1.0)*x14970);
IkReal x14986=((1.0)*cj1*cj2);
IkReal x14987=((1.0)*x14971);
IkReal x14988=(cj3*gconst13*x14971);
evalcond[0]=((((-1.0)*x14971*x14972))+(((-1.0)*gconst13*r21*x14985))+((x14970*x14979)));
evalcond[1]=(sj0+((x14970*x14984))+(((-1.0)*gconst13*r01*x14985))+(((-1.0)*r02*x14987)));
evalcond[2]=(((x14970*x14983))+(((-1.0)*x14976*x14985))+(((-1.0)*r12*x14987))+(((-1.0)*cj0)));
evalcond[3]=(((sj3*x14978))+((sj3*x14974))+(((-1.0)*x14971*x14973*x14979))+((r21*x14988))+(((-1.0)*cj3*x14970*x14972))+(((-1.0)*x14980))+(((-1.0)*x14981)));
evalcond[4]=(x14977+(((-1.0)*sj3*x14970*x14972))+((r21*x14971*x14975))+(((-1.0)*x14986))+(((-1.0)*sj3*x14979*x14987))+(((-1.0)*x14973*x14974))+(((-1.0)*x14973*x14978)));
evalcond[5]=((((-1.0)*x14971*x14973*x14984))+(((-1.0)*r02*x14970*x14973))+(((-1.0)*cj0*x14986))+((r01*x14982))+((r01*x14988))+((cj0*x14977))+((r00*x14975)));
evalcond[6]=((((-1.0)*x14971*x14973*x14983))+(((-1.0)*r12*x14970*x14973))+((sj0*x14977))+((cj3*x14971*x14976))+((r11*x14982))+((r10*x14975))+(((-1.0)*sj0*x14986)));
evalcond[7]=((((-1.0)*gconst13*r00*x14973))+(((-1.0)*gconst14*r01*x14973))+(((-1.0)*r00*x14982*x14987))+((r01*x14971*x14975))+((cj0*x14981))+((cj0*x14980))+(((-1.0)*r02*sj3*x14985)));
evalcond[8]=((((-1.0)*r10*x14982*x14987))+(((-1.0)*gconst14*r11*x14973))+((r11*x14971*x14975))+((sj0*x14981))+((sj0*x14980))+(((-1.0)*r12*sj3*x14985))+(((-1.0)*gconst13*r10*x14973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14989=((-1.0)*r11);
IkReal x14991 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14991)==0){
continue;
}
IkReal x14990=pow(x14991,-0.5);
CheckValue<IkReal> x14992 = IKatan2WithCheck(IkReal(x14989),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14992.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14992.value))));
IkReal gconst16=(x14989*x14990);
IkReal gconst17=((1.0)*r10*x14990);
CheckValue<IkReal> x14993 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14993.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14993.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14994=((-1.0)*r11);
CheckValue<IkReal> x14997 = IKatan2WithCheck(IkReal(x14994),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14997.valid){
continue;
}
IkReal x14995=((1.0)*(x14997.value));
IkReal x14996=x14990;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14995)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14995)));
IkReal gconst16=(x14994*x14996);
IkReal gconst17=((1.0)*r10*x14996);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14998=((-1.0)*r11);
CheckValue<IkReal> x15001 = IKatan2WithCheck(IkReal(x14998),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15001.valid){
continue;
}
IkReal x14999=((1.0)*(x15001.value));
IkReal x15000=x14990;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14999)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14999)));
IkReal gconst16=(x14998*x15000);
IkReal gconst17=((1.0)*r10*x15000);
IkReal x15002=r12*r12;
IkReal x15003=(cj0*r02);
IkReal x15004=x14990;
IkReal x15005=(sj0*x15004);
j4eval[0]=((IKabs(((((-1.0)*x15005))+((x15002*x15005))+((r12*x15003*x15004)))))+(IKabs((x15003+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15006=((-1.0)*r11);
CheckValue<IkReal> x15009 = IKatan2WithCheck(IkReal(x15006),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15009.valid){
continue;
}
IkReal x15007=((1.0)*(x15009.value));
IkReal x15008=x14990;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15007)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15007)));
IkReal gconst16=(x15006*x15008);
IkReal gconst17=((1.0)*r10*x15008);
CheckValue<IkReal> x15013=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15013.valid){
continue;
}
IkReal x15010=x15013.value;
IkReal x15011=(cj3*x15010);
IkReal x15012=((1.0)*x15011);
j4eval[0]=IKsign(((((2.0)*r10*r11*r20*r21*x15011))+((cj3*(r22*r22)))+((x15012*(r10*r10)*(r20*r20)))+((x15012*(r11*r11)*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x15014=((-1.0)*r11);
CheckValue<IkReal> x15017 = IKatan2WithCheck(IkReal(x15014),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15017.valid){
continue;
}
IkReal x15015=((1.0)*(x15017.value));
IkReal x15016=x14990;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15015)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15015)));
IkReal gconst16=(x15014*x15016);
IkReal gconst17=((1.0)*r10*x15016);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15018=((-1.0)*r11);
CheckValue<IkReal> x15021 = IKatan2WithCheck(IkReal(x15018),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15021.valid){
continue;
}
IkReal x15019=((1.0)*(x15021.value));
IkReal x15020=x14990;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15019)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15019)));
IkReal gconst16=(x15018*x15020);
IkReal gconst17=((1.0)*r10*x15020);
IkReal x15022=r12*r12;
IkReal x15023=(cj0*r02);
IkReal x15024=x14990;
IkReal x15025=(sj0*x15024);
j4eval[0]=((IKabs((x15023+((r12*sj0)))))+(IKabs(((((-1.0)*x15025))+((r12*x15023*x15024))+((x15022*x15025))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15026=((-1.0)*r11);
CheckValue<IkReal> x15029 = IKatan2WithCheck(IkReal(x15026),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15029.valid){
continue;
}
IkReal x15027=((1.0)*(x15029.value));
IkReal x15028=x14990;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15027)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15027)));
IkReal gconst16=(x15026*x15028);
IkReal gconst17=((1.0)*r10*x15028);
IkReal x15030=r12*r12;
IkReal x15031=(sj1*sj2);
IkReal x15032=((1.0)*cj1*cj2);
CheckValue<IkReal> x15036=IKPowWithIntegerCheck(((-1.0)+x15030),-1);
if(!x15036.valid){
continue;
}
IkReal x15033=x15036.value;
if((((1.0)+(((-1.0)*x15030)))) < -0.00001)
continue;
IkReal x15034=IKsqrt(((1.0)+(((-1.0)*x15030))));
IkReal x15035=(r12*r22*x15033*x15034);
j4eval[0]=((IKabs(((((-1.0)*x15032*x15035))+((x15031*x15035)))))+(IKabs(((((-1.0)*r22*x15032))+((r22*x15031))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15037=(sj1*sj2);
IkReal x15038=(gconst16*r21);
IkReal x15039=(gconst17*r20);
IkReal x15040=(cj1*cj2);
CheckValue<IkReal> x15041 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15040))+((r22*x15037)))),IkReal((((x15038*x15040))+(((-1.0)*x15039*x15040))+((x15037*x15039))+(((-1.0)*x15037*x15038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15041.valid){
continue;
}
CheckValue<IkReal> x15042=IKPowWithIntegerCheck(IKsign(((((-2.0)*x15038*x15039))+(r22*r22)+(x15038*x15038)+(x15039*x15039))),-1);
if(!x15042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15041.value)+(((1.5707963267949)*(x15042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15043=IKsin(j4);
IkReal x15044=IKcos(j4);
IkReal x15045=(cj2*sj1);
IkReal x15046=(cj1*sj2);
IkReal x15047=((1.0)*x15044);
IkReal x15048=(gconst17*x15043);
IkReal x15049=(gconst16*x15044);
IkReal x15050=((1.0)*x15043);
IkReal x15051=(gconst16*x15050);
evalcond[0]=((((-1.0)*r22*x15047))+((r20*x15048))+(((-1.0)*r21*x15051)));
evalcond[1]=(sj0+((r00*x15048))+(((-1.0)*r01*x15051))+(((-1.0)*r02*x15047)));
evalcond[2]=((((-1.0)*r11*x15051))+((r10*x15048))+(((-1.0)*r12*x15047))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst17*r20*x15047))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15050))+((r21*x15049)));
evalcond[4]=((((-1.0)*gconst17*r00*x15047))+((cj0*x15046))+((cj0*x15045))+(((-1.0)*r02*x15050))+((r01*x15049)));
evalcond[5]=(((r11*x15049))+(((-1.0)*r12*x15050))+(((-1.0)*gconst17*r10*x15047))+((sj0*x15045))+((sj0*x15046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15052=((1.0)*gconst16);
CheckValue<IkReal> x15053 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x15052))+(((-1.0)*cj0*r01*x15052))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15053.valid){
continue;
}
CheckValue<IkReal> x15054=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x15054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15053.value)+(((1.5707963267949)*(x15054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15055=IKsin(j4);
IkReal x15056=IKcos(j4);
IkReal x15057=(cj2*sj1);
IkReal x15058=(cj1*sj2);
IkReal x15059=((1.0)*x15056);
IkReal x15060=(gconst17*x15055);
IkReal x15061=(gconst16*x15056);
IkReal x15062=((1.0)*x15055);
IkReal x15063=(gconst16*x15062);
evalcond[0]=(((r20*x15060))+(((-1.0)*r22*x15059))+(((-1.0)*r21*x15063)));
evalcond[1]=(sj0+(((-1.0)*r01*x15063))+(((-1.0)*r02*x15059))+((r00*x15060)));
evalcond[2]=((((-1.0)*r12*x15059))+(((-1.0)*r11*x15063))+((r10*x15060))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x15061))+(((-1.0)*r22*x15062))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst17*r20*x15059)));
evalcond[4]=(((r01*x15061))+(((-1.0)*r02*x15062))+(((-1.0)*gconst17*r00*x15059))+((cj0*x15058))+((cj0*x15057)));
evalcond[5]=((((-1.0)*gconst17*r10*x15059))+((sj0*x15058))+((sj0*x15057))+((r11*x15061))+(((-1.0)*r12*x15062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15064=((1.0)*gconst16);
CheckValue<IkReal> x15065=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r01))+(((-1.0)*r00*x15064)))),-1);
if(!x15065.valid){
continue;
}
CheckValue<IkReal> x15066 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x15064))+((cj0*gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15065.value)))+(x15066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15067=IKsin(j4);
IkReal x15068=IKcos(j4);
IkReal x15069=(cj2*sj1);
IkReal x15070=(cj1*sj2);
IkReal x15071=((1.0)*x15068);
IkReal x15072=(gconst17*x15067);
IkReal x15073=(gconst16*x15068);
IkReal x15074=((1.0)*x15067);
IkReal x15075=(gconst16*x15074);
evalcond[0]=((((-1.0)*r22*x15071))+((r20*x15072))+(((-1.0)*r21*x15075)));
evalcond[1]=(sj0+((r00*x15072))+(((-1.0)*r02*x15071))+(((-1.0)*r01*x15075)));
evalcond[2]=((((-1.0)*r11*x15075))+(((-1.0)*r12*x15071))+((r10*x15072))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst17*r20*x15071))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15074))+((r21*x15073)));
evalcond[4]=((((-1.0)*gconst17*r00*x15071))+((r01*x15073))+(((-1.0)*r02*x15074))+((cj0*x15069))+((cj0*x15070)));
evalcond[5]=((((-1.0)*r12*x15074))+((r11*x15073))+((sj0*x15070))+(((-1.0)*gconst17*r10*x15071))+((sj0*x15069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x15076=((-1.0)*r11);
CheckValue<IkReal> x15079 = IKatan2WithCheck(IkReal(x15076),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15079.valid){
continue;
}
IkReal x15077=((1.0)*(x15079.value));
IkReal x15078=x14990;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15077)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15077)));
IkReal gconst16=(x15076*x15078);
IkReal gconst17=((1.0)*r10*x15078);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15080=((-1.0)*r11);
CheckValue<IkReal> x15083 = IKatan2WithCheck(IkReal(x15080),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15083.valid){
continue;
}
IkReal x15081=((1.0)*(x15083.value));
IkReal x15082=x14990;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15081)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15081)));
IkReal gconst16=(x15080*x15082);
IkReal gconst17=((1.0)*r10*x15082);
IkReal x15084=r12*r12;
IkReal x15085=(cj0*r02);
IkReal x15086=x14990;
IkReal x15087=(sj0*x15086);
j4eval[0]=((IKabs((((r12*x15085*x15086))+((x15084*x15087))+(((-1.0)*x15087)))))+(IKabs((x15085+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15088=((-1.0)*r11);
CheckValue<IkReal> x15091 = IKatan2WithCheck(IkReal(x15088),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15091.valid){
continue;
}
IkReal x15089=((1.0)*(x15091.value));
IkReal x15090=x14990;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15089)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15089)));
IkReal gconst16=(x15088*x15090);
IkReal gconst17=((1.0)*r10*x15090);
IkReal x15092=r12*r12;
IkReal x15093=(sj1*sj2);
IkReal x15094=((1.0)+(((-1.0)*x15092)));
IkReal x15095=((1.0)*cj1*cj2);
CheckValue<IkReal> x15102=IKPowWithIntegerCheck(x15094,-1);
if(!x15102.valid){
continue;
}
IkReal x15096=x15102.value;
CheckValue<IkReal> x15103=IKPowWithIntegerCheck(((-1.0)+x15092),-1);
if(!x15103.valid){
continue;
}
IkReal x15097=x15103.value;
IkReal x15098=((1.0)*x15096);
if((x15094) < -0.00001)
continue;
IkReal x15099=IKsqrt(x15094);
IkReal x15100=(r12*r22*x15097*x15099);
IkReal x15101=((((-1.0)*x15098*(r11*r11)*(r21*r21)))+(((-1.0)*x15098*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x15096))+(((-1.0)*(r22*r22))));
j4eval[0]=x15101;
j4eval[1]=IKsign(x15101);
j4eval[2]=((IKabs((((x15093*x15100))+(((-1.0)*x15095*x15100)))))+(IKabs(((((-1.0)*r22*x15095))+((r22*x15093))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15104=(sj1*sj2);
IkReal x15105=(gconst16*r21);
IkReal x15106=(gconst17*r20);
IkReal x15107=(cj1*cj2);
CheckValue<IkReal> x15108=IKPowWithIntegerCheck(IKsign(((((2.0)*x15105*x15106))+(((-1.0)*(r22*r22)))+(((-1.0)*(x15106*x15106)))+(((-1.0)*(x15105*x15105))))),-1);
if(!x15108.valid){
continue;
}
CheckValue<IkReal> x15109 = IKatan2WithCheck(IkReal((((r22*x15104))+(((-1.0)*r22*x15107)))),IkReal(((((-1.0)*x15106*x15107))+(((-1.0)*x15104*x15105))+((x15105*x15107))+((x15104*x15106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15108.value)))+(x15109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15110=IKsin(j4);
IkReal x15111=IKcos(j4);
IkReal x15112=(gconst16*r11);
IkReal x15113=(cj2*sj1);
IkReal x15114=(gconst16*r21);
IkReal x15115=(gconst16*r01);
IkReal x15116=(gconst17*r00);
IkReal x15117=(cj1*sj2);
IkReal x15118=((1.0)*x15111);
IkReal x15119=((1.0)*x15110);
IkReal x15120=(gconst17*x15111);
IkReal x15121=(gconst17*x15110);
evalcond[0]=(((r20*x15121))+(((-1.0)*x15114*x15119))+(((-1.0)*r22*x15118)));
evalcond[1]=(sj0+((x15110*x15116))+(((-1.0)*r02*x15118))+(((-1.0)*x15115*x15119)));
evalcond[2]=((((-1.0)*x15112*x15119))+(((-1.0)*r12*x15118))+((r10*x15121))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x15120))+(((-1.0)*x15114*x15118))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15110)));
evalcond[4]=(((x15111*x15116))+(((-1.0)*x15115*x15118))+((cj0*x15117))+((cj0*x15113))+((r02*x15110)));
evalcond[5]=(((sj0*x15117))+((sj0*x15113))+((r12*x15110))+(((-1.0)*x15112*x15118))+((r10*x15120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15122=((1.0)*gconst16);
CheckValue<IkReal> x15123 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x15122))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*cj0*r01*x15122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15123.valid){
continue;
}
CheckValue<IkReal> x15124=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x15124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15123.value)+(((1.5707963267949)*(x15124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15125=IKsin(j4);
IkReal x15126=IKcos(j4);
IkReal x15127=(gconst16*r11);
IkReal x15128=(cj2*sj1);
IkReal x15129=(gconst16*r21);
IkReal x15130=(gconst16*r01);
IkReal x15131=(gconst17*r00);
IkReal x15132=(cj1*sj2);
IkReal x15133=((1.0)*x15126);
IkReal x15134=((1.0)*x15125);
IkReal x15135=(gconst17*x15126);
IkReal x15136=(gconst17*x15125);
evalcond[0]=(((r20*x15136))+(((-1.0)*x15129*x15134))+(((-1.0)*r22*x15133)));
evalcond[1]=((((-1.0)*r02*x15133))+sj0+((x15125*x15131))+(((-1.0)*x15130*x15134)));
evalcond[2]=((((-1.0)*x15127*x15134))+(((-1.0)*r12*x15133))+((r10*x15136))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x15135))+(((-1.0)*x15129*x15133))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15125)));
evalcond[4]=(((x15126*x15131))+((cj0*x15128))+((cj0*x15132))+((r02*x15125))+(((-1.0)*x15130*x15133)));
evalcond[5]=((((-1.0)*x15127*x15133))+((sj0*x15128))+((sj0*x15132))+((r12*x15125))+((r10*x15135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15137=((1.0)*gconst16);
CheckValue<IkReal> x15138 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x15137))+((cj0*gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15138.valid){
continue;
}
CheckValue<IkReal> x15139=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r01))+(((-1.0)*r00*x15137)))),-1);
if(!x15139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15138.value)+(((1.5707963267949)*(x15139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15140=IKsin(j4);
IkReal x15141=IKcos(j4);
IkReal x15142=(gconst16*r11);
IkReal x15143=(cj2*sj1);
IkReal x15144=(gconst16*r21);
IkReal x15145=(gconst16*r01);
IkReal x15146=(gconst17*r00);
IkReal x15147=(cj1*sj2);
IkReal x15148=((1.0)*x15141);
IkReal x15149=((1.0)*x15140);
IkReal x15150=(gconst17*x15141);
IkReal x15151=(gconst17*x15140);
evalcond[0]=((((-1.0)*x15144*x15149))+(((-1.0)*r22*x15148))+((r20*x15151)));
evalcond[1]=(sj0+(((-1.0)*r02*x15148))+(((-1.0)*x15145*x15149))+((x15140*x15146)));
evalcond[2]=((((-1.0)*x15142*x15149))+((r10*x15151))+(((-1.0)*cj0))+(((-1.0)*r12*x15148)));
evalcond[3]=(((r22*x15140))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15144*x15148))+((r20*x15150)));
evalcond[4]=(((r02*x15140))+(((-1.0)*x15145*x15148))+((cj0*x15143))+((cj0*x15147))+((x15141*x15146)));
evalcond[5]=(((r12*x15140))+(((-1.0)*x15142*x15148))+((r10*x15150))+((sj0*x15143))+((sj0*x15147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15152=((-1.0)*r11);
CheckValue<IkReal> x15155 = IKatan2WithCheck(IkReal(x15152),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15155.valid){
continue;
}
IkReal x15153=((1.0)*(x15155.value));
IkReal x15154=x14990;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15153)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15153)));
IkReal gconst16=(x15152*x15154);
IkReal gconst17=((1.0)*r10*x15154);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15156=gconst17*gconst17;
IkReal x15157=gconst16*gconst16;
IkReal x15158=(cj3*r01);
IkReal x15159=(r01*sj3);
IkReal x15160=(cj3*r00);
IkReal x15161=(r00*sj3);
IkReal x15162=(gconst16*gconst17);
IkReal x15163=((1.0)*r21);
IkReal x15164=(r21*x15157);
IkReal x15165=(r20*x15156);
CheckValue<IkReal> x15166=IKPowWithIntegerCheck(IKsign((((x15158*x15164))+(((-1.0)*r20*x15158*x15162))+((cj3*r02*r22))+(((-1.0)*x15160*x15162*x15163))+((x15160*x15165)))),-1);
if(!x15166.valid){
continue;
}
CheckValue<IkReal> x15167 = IKatan2WithCheck(IkReal((((gconst17*r22*x15159))+((gconst16*r22*x15161)))),IkReal((((x15159*x15165))+((r20*x15161*x15162))+(((-1.0)*x15159*x15162*x15163))+(((-1.0)*x15157*x15161*x15163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15166.value)))+(x15167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15168=IKsin(j4);
IkReal x15169=IKcos(j4);
IkReal x15170=(cj3*gconst17);
IkReal x15171=((1.0)*sj2);
IkReal x15172=((1.0)*r21);
IkReal x15173=(gconst16*r11);
IkReal x15174=(gconst16*r01);
IkReal x15175=(r20*sj3);
IkReal x15176=(gconst17*sj3);
IkReal x15177=((1.0)*cj2);
IkReal x15178=(gconst16*r00);
IkReal x15179=((1.0)*cj3);
IkReal x15180=(gconst16*r10);
IkReal x15181=(cj1*x15171);
IkReal x15182=(sj1*x15177);
IkReal x15183=((1.0)*x15169);
IkReal x15184=((1.0)*x15168);
IkReal x15185=(gconst17*x15168);
IkReal x15186=(cj3*x15169);
IkReal x15187=(sj3*x15169);
IkReal x15188=(gconst16*r21*x15169);
IkReal x15189=(x15181+x15182);
evalcond[0]=((((-1.0)*gconst16*x15168*x15172))+((r20*x15185))+(((-1.0)*r22*x15183)));
evalcond[1]=((((-1.0)*x15173*x15184))+(((-1.0)*r12*x15183))+((r10*x15185)));
evalcond[2]=((-1.0)+(((-1.0)*x15174*x15184))+(((-1.0)*r02*x15183))+((r00*x15185)));
evalcond[3]=((((-1.0)*r00*x15170*x15183))+(((-1.0)*r02*x15168*x15179))+((x15174*x15186))+((sj3*x15178))+((r01*x15176)));
evalcond[4]=((((-1.0)*x15178*x15179))+(((-1.0)*r00*x15176*x15183))+(((-1.0)*r02*sj3*x15184))+((x15174*x15187))+(((-1.0)*r01*x15170)));
evalcond[5]=((((-1.0)*r10*x15170*x15183))+((r11*x15176))+(((-1.0)*sj1*x15171))+((sj3*x15180))+((x15173*x15186))+(((-1.0)*r12*x15168*x15179))+((cj1*cj2)));
evalcond[6]=(((gconst16*r21*x15186))+(((-1.0)*r22*x15168*x15179))+(((-1.0)*x15189))+((r21*x15176))+((gconst16*x15175))+(((-1.0)*r20*x15170*x15183)));
evalcond[7]=(((gconst16*r21*x15187))+(((-1.0)*x15170*x15172))+((sj1*sj2))+(((-1.0)*cj1*x15177))+(((-1.0)*gconst16*r20*x15179))+(((-1.0)*gconst17*x15175*x15183))+(((-1.0)*r22*sj3*x15184)));
evalcond[8]=((((-1.0)*r10*x15176*x15183))+(((-1.0)*r12*sj3*x15184))+(((-1.0)*x15189))+((x15173*x15187))+(((-1.0)*r11*x15170))+(((-1.0)*x15179*x15180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15190=((1.0)*gconst16);
CheckValue<IkReal> x15191 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x15190))+((gconst17*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15191.valid){
continue;
}
CheckValue<IkReal> x15192=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r21))+(((-1.0)*r20*x15190)))),-1);
if(!x15192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15191.value)+(((1.5707963267949)*(x15192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15193=IKsin(j4);
IkReal x15194=IKcos(j4);
IkReal x15195=(cj3*gconst17);
IkReal x15196=((1.0)*sj2);
IkReal x15197=((1.0)*r21);
IkReal x15198=(gconst16*r11);
IkReal x15199=(gconst16*r01);
IkReal x15200=(r20*sj3);
IkReal x15201=(gconst17*sj3);
IkReal x15202=((1.0)*cj2);
IkReal x15203=(gconst16*r00);
IkReal x15204=((1.0)*cj3);
IkReal x15205=(gconst16*r10);
IkReal x15206=(cj1*x15196);
IkReal x15207=(sj1*x15202);
IkReal x15208=((1.0)*x15194);
IkReal x15209=((1.0)*x15193);
IkReal x15210=(gconst17*x15193);
IkReal x15211=(cj3*x15194);
IkReal x15212=(sj3*x15194);
IkReal x15213=(gconst16*r21*x15194);
IkReal x15214=(x15207+x15206);
evalcond[0]=((((-1.0)*gconst16*x15193*x15197))+((r20*x15210))+(((-1.0)*r22*x15208)));
evalcond[1]=(((r10*x15210))+(((-1.0)*x15198*x15209))+(((-1.0)*r12*x15208)));
evalcond[2]=((-1.0)+(((-1.0)*x15199*x15209))+((r00*x15210))+(((-1.0)*r02*x15208)));
evalcond[3]=((((-1.0)*r00*x15195*x15208))+((sj3*x15203))+((x15199*x15211))+((r01*x15201))+(((-1.0)*r02*x15193*x15204)));
evalcond[4]=((((-1.0)*r00*x15201*x15208))+(((-1.0)*r02*sj3*x15209))+((x15199*x15212))+(((-1.0)*x15203*x15204))+(((-1.0)*r01*x15195)));
evalcond[5]=(((sj3*x15205))+((r11*x15201))+(((-1.0)*r12*x15193*x15204))+(((-1.0)*sj1*x15196))+((cj1*cj2))+((x15198*x15211))+(((-1.0)*r10*x15195*x15208)));
evalcond[6]=((((-1.0)*r20*x15195*x15208))+((gconst16*r21*x15211))+((gconst16*x15200))+((r21*x15201))+(((-1.0)*x15214))+(((-1.0)*r22*x15193*x15204)));
evalcond[7]=((((-1.0)*x15195*x15197))+(((-1.0)*gconst16*r20*x15204))+((gconst16*r21*x15212))+(((-1.0)*gconst17*x15200*x15208))+(((-1.0)*cj1*x15202))+((sj1*sj2))+(((-1.0)*r22*sj3*x15209)));
evalcond[8]=((((-1.0)*r11*x15195))+(((-1.0)*x15214))+(((-1.0)*x15204*x15205))+(((-1.0)*r10*x15201*x15208))+((x15198*x15212))+(((-1.0)*r12*sj3*x15209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15215=((-1.0)*r11);
IkReal x15216=((-1.0)*r10);
CheckValue<IkReal> x15218 = IKatan2WithCheck(IkReal(x15215),IkReal(x15216),IKFAST_ATAN2_MAGTHRESH);
if(!x15218.valid){
continue;
}
IkReal x15217=((1.0)*(x15218.value));
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15217)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15216);
rxp1_1=(px*r21);
rxp1_2=(px*x15215);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15217)));
IkReal gconst16=x15215;
IkReal gconst17=((1.0)*r10);
j4eval[0]=1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15219=((-1.0)*r11);
IkReal x15220=((-1.0)*r10);
CheckValue<IkReal> x15222 = IKatan2WithCheck(IkReal(x15219),IkReal(x15220),IKFAST_ATAN2_MAGTHRESH);
if(!x15222.valid){
continue;
}
IkReal x15221=((1.0)*(x15222.value));
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15221)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15220);
rxp1_1=(px*r21);
rxp1_2=(px*x15219);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15221)));
IkReal gconst16=x15219;
IkReal gconst17=((1.0)*r10);
IkReal x15223=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=((((-1.0)*r10*r20*x15223))+(((-1.0)*r11*r21*x15223)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15224=((-1.0)*r11);
IkReal x15225=((-1.0)*r10);
CheckValue<IkReal> x15227 = IKatan2WithCheck(IkReal(x15224),IkReal(x15225),IKFAST_ATAN2_MAGTHRESH);
if(!x15227.valid){
continue;
}
IkReal x15226=((1.0)*(x15227.value));
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15226)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15225);
rxp1_1=(px*r21);
rxp1_2=(px*x15224);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15226)));
IkReal gconst16=x15224;
IkReal gconst17=((1.0)*r10);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15229=IKPowWithIntegerCheck(r02,-1);
if(!x15229.valid){
continue;
}
IkReal x15228=x15229.value;
CheckValue<IkReal> x15230=IKPowWithIntegerCheck(sj3,-1);
if(!x15230.valid){
continue;
}
if( IKabs((x15228*(x15230.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x15228)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15228*(x15230.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr((sj0*x15228))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15228*(x15230.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), (sj0*x15228));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15231=IKsin(j4);
IkReal x15232=IKcos(j4);
IkReal x15233=((1.0)*cj1);
IkReal x15234=(cj3*r21);
IkReal x15235=((1.0)*gconst17);
IkReal x15236=(cj0*cj2);
IkReal x15237=(sj1*sj2);
IkReal x15238=(r21*sj3);
IkReal x15239=(cj2*sj0);
IkReal x15240=(r20*sj3);
IkReal x15241=(r11*sj3);
IkReal x15242=(cj3*r11);
IkReal x15243=(cj1*sj2);
IkReal x15244=(cj3*r20);
IkReal x15245=((1.0)*gconst16);
IkReal x15246=(gconst16*x15232);
IkReal x15247=((1.0)*x15231);
IkReal x15248=(r10*x15232);
IkReal x15249=(gconst17*x15231);
evalcond[0]=(sj0+(((-1.0)*r02*x15232)));
evalcond[1]=((((-1.0)*r21*x15231*x15245))+((r20*x15249)));
evalcond[2]=(((cj0*x15243))+(((-1.0)*r02*sj3*x15247))+((sj1*x15236)));
evalcond[3]=((((-1.0)*r11*x15231*x15245))+((r10*x15249))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*cj3*r02*x15247))+(((-1.0)*x15233*x15236))+((cj0*x15237)));
evalcond[5]=((((-1.0)*sj2*x15233))+((x15234*x15246))+(((-1.0)*cj2*sj1))+((gconst17*x15238))+((gconst16*x15240))+(((-1.0)*x15232*x15235*x15244)));
evalcond[6]=((((-1.0)*cj2*x15233))+x15237+(((-1.0)*x15244*x15245))+(((-1.0)*x15234*x15235))+(((-1.0)*x15232*x15235*x15240))+((x15238*x15246)));
evalcond[7]=((((-1.0)*x15233*x15239))+((gconst17*x15241))+((x15242*x15246))+((sj0*x15237))+(((-1.0)*cj3*x15235*x15248))+((gconst16*r10*sj3)));
evalcond[8]=((((-1.0)*x15235*x15242))+((x15241*x15246))+(((-1.0)*cj3*r10*x15245))+((sj1*x15239))+(((-1.0)*sj3*x15235*x15248))+((sj0*x15243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15250=((1.0)*gconst17);
IkReal x15251=((1.0)*gconst16);
CheckValue<IkReal> x15252=IKPowWithIntegerCheck(((((-1.0)*r11*x15251))+((gconst17*r10))),-1);
if(!x15252.valid){
continue;
}
CheckValue<IkReal> x15253=IKPowWithIntegerCheck((((cj3*gconst16*r21))+(((-1.0)*cj3*r20*x15250))),-1);
if(!x15253.valid){
continue;
}
if( IKabs((cj0*(x15252.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15253.value)*((((cj2*sj1))+(((-1.0)*r20*sj3*x15251))+((cj1*sj2))+(((-1.0)*r21*sj3*x15250)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x15252.value)))+IKsqr(((x15253.value)*((((cj2*sj1))+(((-1.0)*r20*sj3*x15251))+((cj1*sj2))+(((-1.0)*r21*sj3*x15250))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x15252.value)), ((x15253.value)*((((cj2*sj1))+(((-1.0)*r20*sj3*x15251))+((cj1*sj2))+(((-1.0)*r21*sj3*x15250))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15254=IKsin(j4);
IkReal x15255=IKcos(j4);
IkReal x15256=((1.0)*cj1);
IkReal x15257=(cj3*r21);
IkReal x15258=((1.0)*gconst17);
IkReal x15259=(cj0*cj2);
IkReal x15260=(sj1*sj2);
IkReal x15261=(r21*sj3);
IkReal x15262=(cj2*sj0);
IkReal x15263=(r20*sj3);
IkReal x15264=(r11*sj3);
IkReal x15265=(cj3*r11);
IkReal x15266=(cj1*sj2);
IkReal x15267=(cj3*r20);
IkReal x15268=((1.0)*gconst16);
IkReal x15269=(gconst16*x15255);
IkReal x15270=((1.0)*x15254);
IkReal x15271=(r10*x15255);
IkReal x15272=(gconst17*x15254);
evalcond[0]=(sj0+(((-1.0)*r02*x15255)));
evalcond[1]=(((r20*x15272))+(((-1.0)*r21*x15254*x15268)));
evalcond[2]=(((cj0*x15266))+(((-1.0)*r02*sj3*x15270))+((sj1*x15259)));
evalcond[3]=((((-1.0)*r11*x15254*x15268))+((r10*x15272))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*cj3*r02*x15270))+((cj0*x15260))+(((-1.0)*x15256*x15259)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x15257*x15269))+(((-1.0)*x15255*x15258*x15267))+((gconst17*x15261))+((gconst16*x15263))+(((-1.0)*sj2*x15256)));
evalcond[6]=((((-1.0)*x15267*x15268))+(((-1.0)*x15257*x15258))+x15260+((x15261*x15269))+(((-1.0)*x15255*x15258*x15263))+(((-1.0)*cj2*x15256)));
evalcond[7]=(((x15265*x15269))+((sj0*x15260))+(((-1.0)*x15256*x15262))+(((-1.0)*cj3*x15258*x15271))+((gconst17*x15264))+((gconst16*r10*sj3)));
evalcond[8]=(((x15264*x15269))+((sj0*x15266))+((sj1*x15262))+(((-1.0)*cj3*r10*x15268))+(((-1.0)*x15258*x15265))+(((-1.0)*sj3*x15258*x15271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15273=IKPowWithIntegerCheck(((((-1.0)*gconst16*r11))+((gconst17*r10))),-1);
if(!x15273.valid){
continue;
}
CheckValue<IkReal> x15274=IKPowWithIntegerCheck(r02,-1);
if(!x15274.valid){
continue;
}
if( IKabs((cj0*(x15273.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*(x15274.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x15273.value)))+IKsqr((sj0*(x15274.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x15273.value)), (sj0*(x15274.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15275=IKsin(j4);
IkReal x15276=IKcos(j4);
IkReal x15277=((1.0)*cj1);
IkReal x15278=(cj3*r21);
IkReal x15279=((1.0)*gconst17);
IkReal x15280=(cj0*cj2);
IkReal x15281=(sj1*sj2);
IkReal x15282=(r21*sj3);
IkReal x15283=(cj2*sj0);
IkReal x15284=(r20*sj3);
IkReal x15285=(r11*sj3);
IkReal x15286=(cj3*r11);
IkReal x15287=(cj1*sj2);
IkReal x15288=(cj3*r20);
IkReal x15289=((1.0)*gconst16);
IkReal x15290=(gconst16*x15276);
IkReal x15291=((1.0)*x15275);
IkReal x15292=(r10*x15276);
IkReal x15293=(gconst17*x15275);
evalcond[0]=(sj0+(((-1.0)*r02*x15276)));
evalcond[1]=(((r20*x15293))+(((-1.0)*r21*x15275*x15289)));
evalcond[2]=(((cj0*x15287))+(((-1.0)*r02*sj3*x15291))+((sj1*x15280)));
evalcond[3]=(((r10*x15293))+(((-1.0)*r11*x15275*x15289))+(((-1.0)*cj0)));
evalcond[4]=(((cj0*x15281))+(((-1.0)*x15277*x15280))+(((-1.0)*cj3*r02*x15291)));
evalcond[5]=((((-1.0)*sj2*x15277))+((gconst17*x15282))+(((-1.0)*cj2*sj1))+(((-1.0)*x15276*x15279*x15288))+((gconst16*x15284))+((x15278*x15290)));
evalcond[6]=((((-1.0)*x15278*x15279))+(((-1.0)*x15288*x15289))+(((-1.0)*x15276*x15279*x15284))+x15281+(((-1.0)*cj2*x15277))+((x15282*x15290)));
evalcond[7]=((((-1.0)*cj3*x15279*x15292))+((gconst17*x15285))+((sj0*x15281))+(((-1.0)*x15277*x15283))+((x15286*x15290))+((gconst16*r10*sj3)));
evalcond[8]=(((sj0*x15287))+((sj1*x15283))+((x15285*x15290))+(((-1.0)*x15279*x15286))+(((-1.0)*cj3*r10*x15289))+(((-1.0)*sj3*x15279*x15292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15294=((-1.0)*r11);
CheckValue<IkReal> x15297 = IKatan2WithCheck(IkReal(x15294),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15297.valid){
continue;
}
IkReal x15295=((1.0)*(x15297.value));
IkReal x15296=x14990;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15295)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15295)));
IkReal gconst16=(x15294*x15296);
IkReal gconst17=((1.0)*r10*x15296);
IkReal x15298=r12*r12;
IkReal x15299=(cj0*r02);
IkReal x15300=x14990;
IkReal x15301=(sj0*x15300);
j4eval[0]=((IKabs((((r12*x15299*x15300))+(((-1.0)*x15301))+((x15298*x15301)))))+(IKabs((x15299+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15302=(cj1*cj2);
IkReal x15303=(sj0*sj3);
IkReal x15304=(gconst16*r21);
IkReal x15305=(cj3*r02);
IkReal x15306=(gconst16*r20);
IkReal x15307=(gconst17*r20);
IkReal x15308=(gconst17*sj3);
IkReal x15309=(gconst17*r21);
IkReal x15310=((1.0)*sj3);
IkReal x15311=((1.0)*sj1*sj2);
CheckValue<IkReal> x15312=IKPowWithIntegerCheck(((((-1.0)*r00*x15307*x15308))+(((-1.0)*gconst16*r01*x15304*x15310))+((r00*x15304*x15308))+((r01*x15306*x15308))),-1);
if(!x15312.valid){
continue;
}
CheckValue<IkReal> x15313=IKPowWithIntegerCheck(((((-1.0)*x15307*x15310))+((sj3*x15304))),-1);
if(!x15313.valid){
continue;
}
if( IKabs(((x15312.value)*((((r02*x15302))+((x15305*x15306))+((x15305*x15309))+(((-1.0)*x15303*x15304))+(((-1.0)*r02*x15311))+((x15303*x15307)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15313.value)*(((((-1.0)*x15311))+x15302+((cj3*x15306))+((cj3*x15309)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15312.value)*((((r02*x15302))+((x15305*x15306))+((x15305*x15309))+(((-1.0)*x15303*x15304))+(((-1.0)*r02*x15311))+((x15303*x15307))))))+IKsqr(((x15313.value)*(((((-1.0)*x15311))+x15302+((cj3*x15306))+((cj3*x15309))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15312.value)*((((r02*x15302))+((x15305*x15306))+((x15305*x15309))+(((-1.0)*x15303*x15304))+(((-1.0)*r02*x15311))+((x15303*x15307))))), ((x15313.value)*(((((-1.0)*x15311))+x15302+((cj3*x15306))+((cj3*x15309))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15314=IKsin(j4);
IkReal x15315=IKcos(j4);
IkReal x15316=((1.0)*cj1);
IkReal x15317=(gconst17*sj3);
IkReal x15318=(sj1*sj2);
IkReal x15319=(cj2*sj1);
IkReal x15320=(cj1*sj2);
IkReal x15321=(gconst16*sj3);
IkReal x15322=((1.0)*cj3*gconst17);
IkReal x15323=(r00*x15315);
IkReal x15324=((1.0)*x15315);
IkReal x15325=(gconst17*x15314);
IkReal x15326=(r11*x15315);
IkReal x15327=((1.0)*cj3*gconst16);
IkReal x15328=(gconst16*r21*x15315);
IkReal x15329=((1.0)*gconst16*x15314);
IkReal x15330=(gconst16*r01*x15315);
IkReal x15331=((1.0)*cj3*x15314);
IkReal x15332=((1.0)*sj3*x15314);
evalcond[0]=((((-1.0)*r21*x15329))+((r20*x15325)));
evalcond[1]=(sj0+((r00*x15325))+(((-1.0)*r02*x15324))+(((-1.0)*r01*x15329)));
evalcond[2]=((((-1.0)*r12*x15324))+(((-1.0)*r11*x15329))+((r10*x15325))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x15319))+(((-1.0)*r20*x15315*x15322))+(((-1.0)*sj2*x15316))+((r21*x15317))+((cj3*x15328))+((r20*x15321)));
evalcond[4]=((((-1.0)*r20*x15317*x15324))+(((-1.0)*r20*x15327))+(((-1.0)*cj2*x15316))+(((-1.0)*r21*x15322))+x15318+((r21*x15315*x15321)));
evalcond[5]=((((-1.0)*x15322*x15323))+((cj3*x15330))+(((-1.0)*cj0*cj2*x15316))+((r00*x15321))+((r01*x15317))+((cj0*x15318))+(((-1.0)*r02*x15331)));
evalcond[6]=((((-1.0)*r10*x15315*x15322))+((r11*x15317))+(((-1.0)*cj2*sj0*x15316))+((cj3*gconst16*x15326))+((r10*x15321))+(((-1.0)*r12*x15331))+((sj0*x15318)));
evalcond[7]=(((cj0*x15319))+((cj0*x15320))+((r01*x15315*x15321))+(((-1.0)*x15317*x15323))+(((-1.0)*r02*x15332))+(((-1.0)*r00*x15327))+(((-1.0)*r01*x15322)));
evalcond[8]=((((-1.0)*r11*x15322))+(((-1.0)*r12*x15332))+((sj0*x15319))+(((-1.0)*r10*x15317*x15324))+((sj0*x15320))+((x15321*x15326))+(((-1.0)*r10*x15327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15333=((1.0)*gconst16);
CheckValue<IkReal> x15334 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x15333))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*cj0*r01*x15333)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15334.valid){
continue;
}
CheckValue<IkReal> x15335=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x15335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15334.value)+(((1.5707963267949)*(x15335.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15336=IKsin(j4);
IkReal x15337=IKcos(j4);
IkReal x15338=((1.0)*cj1);
IkReal x15339=(gconst17*sj3);
IkReal x15340=(sj1*sj2);
IkReal x15341=(cj2*sj1);
IkReal x15342=(cj1*sj2);
IkReal x15343=(gconst16*sj3);
IkReal x15344=((1.0)*cj3*gconst17);
IkReal x15345=(r00*x15337);
IkReal x15346=((1.0)*x15337);
IkReal x15347=(gconst17*x15336);
IkReal x15348=(r11*x15337);
IkReal x15349=((1.0)*cj3*gconst16);
IkReal x15350=(gconst16*r21*x15337);
IkReal x15351=((1.0)*gconst16*x15336);
IkReal x15352=(gconst16*r01*x15337);
IkReal x15353=((1.0)*cj3*x15336);
IkReal x15354=((1.0)*sj3*x15336);
evalcond[0]=(((r20*x15347))+(((-1.0)*r21*x15351)));
evalcond[1]=(((r00*x15347))+sj0+(((-1.0)*r02*x15346))+(((-1.0)*r01*x15351)));
evalcond[2]=((((-1.0)*r12*x15346))+(((-1.0)*r11*x15351))+((r10*x15347))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r20*x15337*x15344))+((cj3*x15350))+((r21*x15339))+((r20*x15343))+(((-1.0)*sj2*x15338))+(((-1.0)*x15341)));
evalcond[4]=((((-1.0)*r21*x15344))+(((-1.0)*r20*x15339*x15346))+(((-1.0)*cj2*x15338))+((r21*x15337*x15343))+x15340+(((-1.0)*r20*x15349)));
evalcond[5]=(((r00*x15343))+((cj0*x15340))+((r01*x15339))+(((-1.0)*r02*x15353))+((cj3*x15352))+(((-1.0)*x15344*x15345))+(((-1.0)*cj0*cj2*x15338)));
evalcond[6]=(((sj0*x15340))+(((-1.0)*cj2*sj0*x15338))+((r11*x15339))+((r10*x15343))+(((-1.0)*r12*x15353))+(((-1.0)*r10*x15337*x15344))+((cj3*gconst16*x15348)));
evalcond[7]=((((-1.0)*x15339*x15345))+(((-1.0)*r01*x15344))+((cj0*x15342))+((cj0*x15341))+((r01*x15337*x15343))+(((-1.0)*r02*x15354))+(((-1.0)*r00*x15349)));
evalcond[8]=(((sj0*x15342))+((sj0*x15341))+(((-1.0)*r11*x15344))+(((-1.0)*r10*x15349))+(((-1.0)*r12*x15354))+(((-1.0)*r10*x15339*x15346))+((x15343*x15348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15355=gconst16*gconst16;
IkReal x15356=r21*r21;
IkReal x15357=gconst17*gconst17;
IkReal x15358=r20*r20;
IkReal x15359=(cj1*sj2);
IkReal x15360=(gconst16*r21);
IkReal x15361=((1.0)*r22);
IkReal x15362=(r20*sj3);
IkReal x15363=(gconst17*r20);
IkReal x15364=(cj2*sj1);
IkReal x15365=(gconst17*sj3);
CheckValue<IkReal> x15366=IKPowWithIntegerCheck(IKsign((((cj3*x15355*x15356))+((cj3*(r22*r22)))+((cj3*x15357*x15358))+(((-2.0)*cj3*x15360*x15363)))),-1);
if(!x15366.valid){
continue;
}
CheckValue<IkReal> x15367 = IKatan2WithCheck(IkReal((((gconst16*r22*x15362))+((r21*r22*x15365))+(((-1.0)*x15361*x15364))+(((-1.0)*x15359*x15361)))),IkReal(((((-1.0)*gconst16*x15356*x15365))+((r21*x15357*x15362))+((gconst16*x15358*x15365))+(((-1.0)*r21*x15355*x15362))+((x15360*x15364))+(((-1.0)*x15359*x15363))+((x15359*x15360))+(((-1.0)*x15363*x15364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15366.value)))+(x15367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15368=IKsin(j4);
IkReal x15369=IKcos(j4);
IkReal x15370=(cj3*gconst17);
IkReal x15371=((1.0)*cj1);
IkReal x15372=((1.0)*r21);
IkReal x15373=(gconst17*sj3);
IkReal x15374=(sj1*sj2);
IkReal x15375=(cj2*sj1);
IkReal x15376=(cj1*sj2);
IkReal x15377=(gconst16*sj3);
IkReal x15378=((1.0)*x15369);
IkReal x15379=(gconst17*x15368);
IkReal x15380=(r11*x15369);
IkReal x15381=((1.0)*cj3*gconst16);
IkReal x15382=(gconst16*r21*x15369);
IkReal x15383=((1.0)*gconst16*x15368);
IkReal x15384=((1.0)*cj3*x15368);
IkReal x15385=(gconst16*r01*x15369);
IkReal x15386=((1.0)*sj3*x15368);
evalcond[0]=(((r20*x15379))+(((-1.0)*gconst16*x15368*x15372))+(((-1.0)*r22*x15378)));
evalcond[1]=(sj0+((r00*x15379))+(((-1.0)*r01*x15383))+(((-1.0)*r02*x15378)));
evalcond[2]=((((-1.0)*r11*x15383))+((r10*x15379))+(((-1.0)*r12*x15378))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x15377))+(((-1.0)*x15375))+((r21*x15373))+((cj3*x15382))+(((-1.0)*r22*x15384))+(((-1.0)*r20*x15370*x15378))+(((-1.0)*sj2*x15371)));
evalcond[4]=((((-1.0)*r20*x15381))+(((-1.0)*x15370*x15372))+(((-1.0)*cj2*x15371))+x15374+((r21*x15369*x15377))+(((-1.0)*r22*x15386))+(((-1.0)*r20*x15373*x15378)));
evalcond[5]=((((-1.0)*cj0*cj2*x15371))+((r00*x15377))+((r01*x15373))+((cj0*x15374))+((cj3*x15385))+(((-1.0)*r02*x15384))+(((-1.0)*r00*x15370*x15378)));
evalcond[6]=((((-1.0)*r10*x15370*x15378))+(((-1.0)*cj2*sj0*x15371))+(((-1.0)*r12*x15384))+((sj0*x15374))+((r10*x15377))+((cj3*gconst16*x15380))+((r11*x15373)));
evalcond[7]=((((-1.0)*r01*x15370))+((cj0*x15376))+((cj0*x15375))+(((-1.0)*r02*x15386))+(((-1.0)*r00*x15373*x15378))+(((-1.0)*r00*x15381))+((r01*x15369*x15377)));
evalcond[8]=((((-1.0)*r11*x15370))+((x15377*x15380))+(((-1.0)*r10*x15381))+(((-1.0)*r12*x15386))+((sj0*x15376))+((sj0*x15375))+(((-1.0)*r10*x15373*x15378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15387=((1.0)*gconst16);
CheckValue<IkReal> x15388 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x15387))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*r11*sj0*x15387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15388.valid){
continue;
}
CheckValue<IkReal> x15389=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x15389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15388.value)+(((1.5707963267949)*(x15389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15390=IKsin(j4);
IkReal x15391=IKcos(j4);
IkReal x15392=(cj3*gconst17);
IkReal x15393=((1.0)*cj1);
IkReal x15394=((1.0)*r21);
IkReal x15395=(gconst17*sj3);
IkReal x15396=(sj1*sj2);
IkReal x15397=(cj2*sj1);
IkReal x15398=(cj1*sj2);
IkReal x15399=(gconst16*sj3);
IkReal x15400=((1.0)*x15391);
IkReal x15401=(gconst17*x15390);
IkReal x15402=(r11*x15391);
IkReal x15403=((1.0)*cj3*gconst16);
IkReal x15404=(gconst16*r21*x15391);
IkReal x15405=((1.0)*gconst16*x15390);
IkReal x15406=((1.0)*cj3*x15390);
IkReal x15407=(gconst16*r01*x15391);
IkReal x15408=((1.0)*sj3*x15390);
evalcond[0]=((((-1.0)*r22*x15400))+((r20*x15401))+(((-1.0)*gconst16*x15390*x15394)));
evalcond[1]=(sj0+(((-1.0)*r01*x15405))+((r00*x15401))+(((-1.0)*r02*x15400)));
evalcond[2]=((((-1.0)*r12*x15400))+(((-1.0)*r11*x15405))+((r10*x15401))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*sj2*x15393))+(((-1.0)*r20*x15392*x15400))+((r21*x15395))+((r20*x15399))+(((-1.0)*r22*x15406))+(((-1.0)*x15397))+((cj3*x15404)));
evalcond[4]=((((-1.0)*r20*x15403))+(((-1.0)*x15392*x15394))+(((-1.0)*r20*x15395*x15400))+x15396+(((-1.0)*r22*x15408))+((r21*x15391*x15399))+(((-1.0)*cj2*x15393)));
evalcond[5]=((((-1.0)*r00*x15392*x15400))+(((-1.0)*cj0*cj2*x15393))+((r01*x15395))+((cj0*x15396))+(((-1.0)*r02*x15406))+((r00*x15399))+((cj3*x15407)));
evalcond[6]=(((cj3*gconst16*x15402))+(((-1.0)*cj2*sj0*x15393))+((r10*x15399))+((sj0*x15396))+(((-1.0)*r12*x15406))+(((-1.0)*r10*x15392*x15400))+((r11*x15395)));
evalcond[7]=((((-1.0)*r00*x15403))+(((-1.0)*r00*x15395*x15400))+((r01*x15391*x15399))+(((-1.0)*r01*x15392))+((cj0*x15397))+((cj0*x15398))+(((-1.0)*r02*x15408)));
evalcond[8]=(((sj0*x15398))+((sj0*x15397))+(((-1.0)*r12*x15408))+((x15399*x15402))+(((-1.0)*r10*x15403))+(((-1.0)*r10*x15395*x15400))+(((-1.0)*r11*x15392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15409=((1.0)*gconst16);
CheckValue<IkReal> x15410=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r01))+(((-1.0)*r00*x15409)))),-1);
if(!x15410.valid){
continue;
}
CheckValue<IkReal> x15411 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x15409))+((cj0*gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15410.value)))+(x15411.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15412=IKsin(j4);
IkReal x15413=IKcos(j4);
IkReal x15414=(cj3*gconst17);
IkReal x15415=((1.0)*cj1);
IkReal x15416=((1.0)*r21);
IkReal x15417=(gconst17*sj3);
IkReal x15418=(sj1*sj2);
IkReal x15419=(cj2*sj1);
IkReal x15420=(cj1*sj2);
IkReal x15421=(gconst16*sj3);
IkReal x15422=((1.0)*x15413);
IkReal x15423=(gconst17*x15412);
IkReal x15424=(r11*x15413);
IkReal x15425=((1.0)*cj3*gconst16);
IkReal x15426=(gconst16*r21*x15413);
IkReal x15427=((1.0)*gconst16*x15412);
IkReal x15428=((1.0)*cj3*x15412);
IkReal x15429=(gconst16*r01*x15413);
IkReal x15430=((1.0)*sj3*x15412);
evalcond[0]=(((r20*x15423))+(((-1.0)*r22*x15422))+(((-1.0)*gconst16*x15412*x15416)));
evalcond[1]=(sj0+(((-1.0)*r02*x15422))+(((-1.0)*r01*x15427))+((r00*x15423)));
evalcond[2]=(((r10*x15423))+(((-1.0)*r12*x15422))+(((-1.0)*r11*x15427))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x15421))+(((-1.0)*r20*x15414*x15422))+(((-1.0)*x15419))+(((-1.0)*r22*x15428))+((cj3*x15426))+(((-1.0)*sj2*x15415))+((r21*x15417)));
evalcond[4]=((((-1.0)*r20*x15417*x15422))+(((-1.0)*r22*x15430))+(((-1.0)*cj2*x15415))+x15418+(((-1.0)*r20*x15425))+(((-1.0)*x15414*x15416))+((r21*x15413*x15421)));
evalcond[5]=((((-1.0)*r00*x15414*x15422))+(((-1.0)*r02*x15428))+((r01*x15417))+((cj3*x15429))+(((-1.0)*cj0*cj2*x15415))+((r00*x15421))+((cj0*x15418)));
evalcond[6]=(((r11*x15417))+((r10*x15421))+(((-1.0)*r12*x15428))+(((-1.0)*r10*x15414*x15422))+((cj3*gconst16*x15424))+(((-1.0)*cj2*sj0*x15415))+((sj0*x15418)));
evalcond[7]=((((-1.0)*r01*x15414))+((cj0*x15420))+(((-1.0)*r02*x15430))+(((-1.0)*r00*x15425))+((r01*x15413*x15421))+((cj0*x15419))+(((-1.0)*r00*x15417*x15422)));
evalcond[8]=((((-1.0)*r12*x15430))+(((-1.0)*r11*x15414))+(((-1.0)*r10*x15417*x15422))+((sj0*x15420))+((x15421*x15424))+(((-1.0)*r10*x15425))+((sj0*x15419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x15431=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x15431;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x15431);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x15432=((1.0)*sj5);
IkReal x15433=((((-1.0)*r00*x15432))+(((-1.0)*cj5*r01)));
j4eval[0]=x15433;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x15432))))));
j4eval[2]=IKsign(x15433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x15434=cj5*cj5;
IkReal x15435=(cj3*r11*r21);
IkReal x15436=((1.0)*cj3*cj5*sj5);
IkReal x15437=(((cj3*r12*r22))+((cj3*r10*r20*x15434))+(((-1.0)*r11*r20*x15436))+x15435+(((-1.0)*r10*r21*x15436))+(((-1.0)*x15434*x15435)));
j4eval[0]=x15437;
j4eval[1]=IKsign(x15437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15438=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x15438;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x15438);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15439=((1.0)*sj5);
IkReal x15440=((((-1.0)*r00*x15439))+(((-1.0)*cj5*r01)));
j4eval[0]=x15440;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x15439)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15440);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15441=cj5*cj5;
IkReal x15442=r11*r11;
IkReal x15443=(cj5*r10);
IkReal x15444=(r11*sj5);
IkReal x15445=((((2.0)*x15443*x15444))+(((-1.0)*x15441*(r10*r10)))+(((-1.0)*(r12*r12)))+((x15441*x15442))+(((-1.0)*x15442)));
j4eval[0]=x15445;
j4eval[1]=((IKabs(r12))+(IKabs((x15444+(((-1.0)*x15443))))));
j4eval[2]=IKsign(x15445);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15446=cj5*cj5;
IkReal x15447=r11*r11;
IkReal x15448=(cj5*r10);
IkReal x15449=(r11*sj5);
CheckValue<IkReal> x15450 = IKatan2WithCheck(IkReal((x15449+(((-1.0)*x15448)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x15450.valid){
continue;
}
CheckValue<IkReal> x15451=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15446*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x15448*x15449))+((x15446*x15447))+(((-1.0)*x15447)))),-1);
if(!x15451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15450.value)+(((1.5707963267949)*(x15451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15452=IKsin(j4);
IkReal x15453=IKcos(j4);
IkReal x15454=(cj5*r00);
IkReal x15455=((1.0)*x15453);
IkReal x15456=(sj5*x15453);
IkReal x15457=(cj5*x15452);
IkReal x15458=((1.0)*x15452);
IkReal x15459=(sj5*x15458);
evalcond[0]=(((r20*x15457))+(((-1.0)*r22*x15455))+(((-1.0)*r21*x15459)));
evalcond[1]=((((-1.0)*r01*x15459))+(((-1.0)*r02*x15455))+((x15452*x15454)));
evalcond[2]=((((-1.0)*r12*x15458))+((r11*x15456))+(((-1.0)*cj5*r10*x15455)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x15459))+(((-1.0)*r12*x15455))+((r10*x15457)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x15454*x15455))+((r01*x15456))+((cj1*sj2))+(((-1.0)*r02*x15458)));
evalcond[5]=((((-1.0)*r22*x15458))+(((-1.0)*cj5*r20*x15455))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x15456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15460=((1.0)*sj5);
CheckValue<IkReal> x15461 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x15460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15461.valid){
continue;
}
CheckValue<IkReal> x15462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15460))+(((-1.0)*cj5*r01)))),-1);
if(!x15462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15461.value)+(((1.5707963267949)*(x15462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15463=IKsin(j4);
IkReal x15464=IKcos(j4);
IkReal x15465=(cj5*r00);
IkReal x15466=((1.0)*x15464);
IkReal x15467=(sj5*x15464);
IkReal x15468=(cj5*x15463);
IkReal x15469=((1.0)*x15463);
IkReal x15470=(sj5*x15469);
evalcond[0]=((((-1.0)*r22*x15466))+(((-1.0)*r21*x15470))+((r20*x15468)));
evalcond[1]=(((x15463*x15465))+(((-1.0)*r01*x15470))+(((-1.0)*r02*x15466)));
evalcond[2]=((((-1.0)*cj5*r10*x15466))+((r11*x15467))+(((-1.0)*r12*x15469)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x15470))+((r10*x15468))+(((-1.0)*r12*x15466)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x15467))+(((-1.0)*x15465*x15466))+(((-1.0)*r02*x15469)));
evalcond[5]=((((-1.0)*r22*x15469))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x15467))+(((-1.0)*cj5*r20*x15466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15471=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15471.valid){
continue;
}
CheckValue<IkReal> x15472 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15471.value)))+(x15472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15473=IKsin(j4);
IkReal x15474=IKcos(j4);
IkReal x15475=(cj5*r00);
IkReal x15476=((1.0)*x15474);
IkReal x15477=(sj5*x15474);
IkReal x15478=(cj5*x15473);
IkReal x15479=((1.0)*x15473);
IkReal x15480=(sj5*x15479);
evalcond[0]=((((-1.0)*r22*x15476))+((r20*x15478))+(((-1.0)*r21*x15480)));
evalcond[1]=(((x15473*x15475))+(((-1.0)*r01*x15480))+(((-1.0)*r02*x15476)));
evalcond[2]=((((-1.0)*cj5*r10*x15476))+((r11*x15477))+(((-1.0)*r12*x15479)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x15476))+((r10*x15478))+(((-1.0)*r11*x15480)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x15475*x15476))+((r01*x15477))+(((-1.0)*r02*x15479)));
evalcond[5]=((((-1.0)*r22*x15479))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x15477))+(((-1.0)*cj5*r20*x15476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15481=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x15481;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x15481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15482=((1.0)*sj5);
IkReal x15483=((((-1.0)*r00*x15482))+(((-1.0)*cj5*r01)));
j4eval[0]=x15483;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x15482)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15484=cj5*cj5;
IkReal x15485=r11*r11;
IkReal x15486=(r11*sj5);
IkReal x15487=(cj5*r10);
IkReal x15488=((r12*r12)+((x15484*(r10*r10)))+x15485+(((-1.0)*x15484*x15485))+(((-2.0)*x15486*x15487)));
j4eval[0]=x15488;
j4eval[1]=IKsign(x15488);
j4eval[2]=((IKabs((x15487+(((-1.0)*x15486)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15489=cj5*cj5;
IkReal x15490=r11*r11;
IkReal x15491=(cj5*r10);
IkReal x15492=(r11*sj5);
CheckValue<IkReal> x15493=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x15489*(r10*r10)))+(((-2.0)*x15491*x15492))+(((-1.0)*x15489*x15490))+x15490)),-1);
if(!x15493.valid){
continue;
}
CheckValue<IkReal> x15494 = IKatan2WithCheck(IkReal((x15491+(((-1.0)*x15492)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x15494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15493.value)))+(x15494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15495=IKcos(j4);
IkReal x15496=IKsin(j4);
IkReal x15497=(cj5*r10);
IkReal x15498=((1.0)*x15495);
IkReal x15499=(cj5*x15496);
IkReal x15500=(cj5*x15495);
IkReal x15501=((1.0)*sj5*x15496);
evalcond[0]=(((r12*x15496))+(((-1.0)*r11*sj5*x15498))+((x15495*x15497)));
evalcond[1]=(((r20*x15499))+(((-1.0)*r21*x15501))+(((-1.0)*r22*x15498)));
evalcond[2]=(((r00*x15499))+(((-1.0)*r01*x15501))+(((-1.0)*r02*x15498)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x15498))+((x15496*x15497))+(((-1.0)*r11*x15501)));
evalcond[4]=(((cj2*sj1))+((r00*x15500))+((cj1*sj2))+((r02*x15496))+(((-1.0)*r01*sj5*x15498)));
evalcond[5]=((((-1.0)*r21*sj5*x15498))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15496))+((r20*x15500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15502=((1.0)*sj5);
CheckValue<IkReal> x15503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15502))+(((-1.0)*cj5*r01)))),-1);
if(!x15503.valid){
continue;
}
CheckValue<IkReal> x15504 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x15502)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15503.value)))+(x15504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15505=IKcos(j4);
IkReal x15506=IKsin(j4);
IkReal x15507=(cj5*r10);
IkReal x15508=((1.0)*x15505);
IkReal x15509=(cj5*x15506);
IkReal x15510=(cj5*x15505);
IkReal x15511=((1.0)*sj5*x15506);
evalcond[0]=(((x15505*x15507))+((r12*x15506))+(((-1.0)*r11*sj5*x15508)));
evalcond[1]=((((-1.0)*r22*x15508))+(((-1.0)*r21*x15511))+((r20*x15509)));
evalcond[2]=(((r00*x15509))+(((-1.0)*r01*x15511))+(((-1.0)*r02*x15508)));
evalcond[3]=((-1.0)+((x15506*x15507))+(((-1.0)*r11*x15511))+(((-1.0)*r12*x15508)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*sj5*x15508))+((cj1*sj2))+((r02*x15506))+((r00*x15510)));
evalcond[5]=(((r22*x15506))+(((-1.0)*r21*sj5*x15508))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15512=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15512.valid){
continue;
}
CheckValue<IkReal> x15513 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15512.value)))+(x15513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15514=IKcos(j4);
IkReal x15515=IKsin(j4);
IkReal x15516=(cj5*r10);
IkReal x15517=((1.0)*x15514);
IkReal x15518=(cj5*x15515);
IkReal x15519=(cj5*x15514);
IkReal x15520=((1.0)*sj5*x15515);
evalcond[0]=(((r12*x15515))+(((-1.0)*r11*sj5*x15517))+((x15514*x15516)));
evalcond[1]=((((-1.0)*r21*x15520))+(((-1.0)*r22*x15517))+((r20*x15518)));
evalcond[2]=((((-1.0)*r02*x15517))+(((-1.0)*r01*x15520))+((r00*x15518)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x15520))+((x15515*x15516))+(((-1.0)*r12*x15517)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x15515))+(((-1.0)*r01*sj5*x15517))+((r00*x15519)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15519))+(((-1.0)*r21*sj5*x15517))+((r22*x15515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15521=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15521);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15521);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15522=(cj5*r10);
IkReal x15523=(r11*sj5);
j4eval[0]=((((-1.0)*x15523))+x15522);
j4eval[1]=((((-1.0)*sj3*x15522))+((sj3*x15523)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15524=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15524);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15524);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15525=(r11*sj5);
IkReal x15526=(cj5*r10);
j4eval[0]=((((-1.0)*x15525))+x15526);
j4eval[1]=((((-1.0)*cj3*x15526))+((cj3*x15525)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15527=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15527);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15527);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15528=((1.0)*sj3);
CheckValue<IkReal> x15529=IKPowWithIntegerCheck(r22,-1);
if(!x15529.valid){
continue;
}
CheckValue<IkReal> x15530=IKPowWithIntegerCheck(sj3,-1);
if(!x15530.valid){
continue;
}
CheckValue<IkReal> x15531=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10))),-1);
if(!x15531.valid){
continue;
}
if( IKabs(((x15529.value)*(x15530.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15531.value)*(((((-1.0)*r10*sj5*x15528))+(((-1.0)*cj5*r11*x15528)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15529.value)*(x15530.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15531.value)*(((((-1.0)*r10*sj5*x15528))+(((-1.0)*cj5*r11*x15528))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15529.value)*(x15530.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15531.value)*(((((-1.0)*r10*sj5*x15528))+(((-1.0)*cj5*r11*x15528))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15532=IKsin(j4);
IkReal x15533=IKcos(j4);
IkReal x15534=(sj1*sj2);
IkReal x15535=(r11*sj5);
IkReal x15536=(r00*sj5);
IkReal x15537=(cj5*r01);
IkReal x15538=((1.0)*cj3);
IkReal x15539=(r10*sj5);
IkReal x15540=((1.0)*cj1);
IkReal x15541=(cj5*r11);
IkReal x15542=((1.0)*cj5);
IkReal x15543=(cj2*sj1);
IkReal x15544=(r01*sj5);
IkReal x15545=(cj2*x15540);
IkReal x15546=(cj3*x15533);
IkReal x15547=((1.0)*x15532);
IkReal x15548=(sj3*x15533);
IkReal x15549=(cj5*x15532);
evalcond[0]=((-1.0)*r22*x15533);
evalcond[1]=((((-1.0)*x15544*x15547))+((r00*x15549)));
evalcond[2]=((-1.0)+((r10*x15549))+(((-1.0)*x15535*x15547)));
evalcond[3]=((((-1.0)*x15545))+(((-1.0)*r22*sj3*x15547))+x15534);
evalcond[4]=((((-1.0)*r22*x15532*x15538))+(((-1.0)*sj2*x15540))+(((-1.0)*x15543)));
evalcond[5]=(((sj3*x15541))+((sj3*x15539))+(((-1.0)*cj5*r10*x15533*x15538))+((x15535*x15546)));
evalcond[6]=((((-1.0)*r10*x15542*x15548))+(((-1.0)*x15538*x15539))+(((-1.0)*x15538*x15541))+((x15535*x15548)));
evalcond[7]=(((sj3*x15536))+((sj3*x15537))+(((-1.0)*x15545))+(((-1.0)*cj5*r00*x15533*x15538))+x15534+((x15544*x15546)));
evalcond[8]=(((cj1*sj2))+(((-1.0)*r00*x15542*x15548))+x15543+((x15544*x15548))+(((-1.0)*x15537*x15538))+(((-1.0)*x15536*x15538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15550=(cj5*r10);
IkReal x15551=((1.0)*sj3);
IkReal x15552=(r11*sj5);
CheckValue<IkReal> x15553=IKPowWithIntegerCheck(((((-1.0)*x15552))+x15550),-1);
if(!x15553.valid){
continue;
}
CheckValue<IkReal> x15554=IKPowWithIntegerCheck((((cj3*x15552))+(((-1.0)*cj3*x15550))),-1);
if(!x15554.valid){
continue;
}
if( IKabs(x15553.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15554.value)*(((((-1.0)*cj5*r11*x15551))+(((-1.0)*r10*sj5*x15551)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15553.value)+IKsqr(((x15554.value)*(((((-1.0)*cj5*r11*x15551))+(((-1.0)*r10*sj5*x15551))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15553.value, ((x15554.value)*(((((-1.0)*cj5*r11*x15551))+(((-1.0)*r10*sj5*x15551))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15555=IKsin(j4);
IkReal x15556=IKcos(j4);
IkReal x15557=(sj1*sj2);
IkReal x15558=(r11*sj5);
IkReal x15559=(r00*sj5);
IkReal x15560=(cj5*r01);
IkReal x15561=((1.0)*cj3);
IkReal x15562=(r10*sj5);
IkReal x15563=((1.0)*cj1);
IkReal x15564=(cj5*r11);
IkReal x15565=((1.0)*cj5);
IkReal x15566=(cj2*sj1);
IkReal x15567=(r01*sj5);
IkReal x15568=(cj2*x15563);
IkReal x15569=(cj3*x15556);
IkReal x15570=((1.0)*x15555);
IkReal x15571=(sj3*x15556);
IkReal x15572=(cj5*x15555);
evalcond[0]=((-1.0)*r22*x15556);
evalcond[1]=((((-1.0)*x15567*x15570))+((r00*x15572)));
evalcond[2]=((-1.0)+(((-1.0)*x15558*x15570))+((r10*x15572)));
evalcond[3]=(x15557+(((-1.0)*x15568))+(((-1.0)*r22*sj3*x15570)));
evalcond[4]=((((-1.0)*r22*x15555*x15561))+(((-1.0)*sj2*x15563))+(((-1.0)*x15566)));
evalcond[5]=(((sj3*x15562))+((sj3*x15564))+(((-1.0)*cj5*r10*x15556*x15561))+((x15558*x15569)));
evalcond[6]=((((-1.0)*r10*x15565*x15571))+((x15558*x15571))+(((-1.0)*x15561*x15562))+(((-1.0)*x15561*x15564)));
evalcond[7]=((((-1.0)*cj5*r00*x15556*x15561))+((x15567*x15569))+((sj3*x15560))+((sj3*x15559))+x15557+(((-1.0)*x15568)));
evalcond[8]=(((cj1*sj2))+((x15567*x15571))+(((-1.0)*x15559*x15561))+x15566+(((-1.0)*r00*x15565*x15571))+(((-1.0)*x15560*x15561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15573=(cj5*r10);
IkReal x15574=(r11*sj5);
CheckValue<IkReal> x15575=IKPowWithIntegerCheck((x15573+(((-1.0)*x15574))),-1);
if(!x15575.valid){
continue;
}
CheckValue<IkReal> x15576=IKPowWithIntegerCheck((((sj3*x15574))+(((-1.0)*sj3*x15573))),-1);
if(!x15576.valid){
continue;
}
if( IKabs(x15575.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15576.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15575.value)+IKsqr(((x15576.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15575.value, ((x15576.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15577=IKsin(j4);
IkReal x15578=IKcos(j4);
IkReal x15579=(sj1*sj2);
IkReal x15580=(r11*sj5);
IkReal x15581=(r00*sj5);
IkReal x15582=(cj5*r01);
IkReal x15583=((1.0)*cj3);
IkReal x15584=(r10*sj5);
IkReal x15585=((1.0)*cj1);
IkReal x15586=(cj5*r11);
IkReal x15587=((1.0)*cj5);
IkReal x15588=(cj2*sj1);
IkReal x15589=(r01*sj5);
IkReal x15590=(cj2*x15585);
IkReal x15591=(cj3*x15578);
IkReal x15592=((1.0)*x15577);
IkReal x15593=(sj3*x15578);
IkReal x15594=(cj5*x15577);
evalcond[0]=((-1.0)*r22*x15578);
evalcond[1]=((((-1.0)*x15589*x15592))+((r00*x15594)));
evalcond[2]=((-1.0)+(((-1.0)*x15580*x15592))+((r10*x15594)));
evalcond[3]=((((-1.0)*r22*sj3*x15592))+(((-1.0)*x15590))+x15579);
evalcond[4]=((((-1.0)*x15588))+(((-1.0)*sj2*x15585))+(((-1.0)*r22*x15577*x15583)));
evalcond[5]=(((x15580*x15591))+((sj3*x15584))+((sj3*x15586))+(((-1.0)*cj5*r10*x15578*x15583)));
evalcond[6]=(((x15580*x15593))+(((-1.0)*r10*x15587*x15593))+(((-1.0)*x15583*x15586))+(((-1.0)*x15583*x15584)));
evalcond[7]=((((-1.0)*cj5*r00*x15578*x15583))+(((-1.0)*x15590))+((sj3*x15582))+((sj3*x15581))+x15579+((x15589*x15591)));
evalcond[8]=((((-1.0)*r00*x15587*x15593))+((cj1*sj2))+(((-1.0)*x15581*x15583))+(((-1.0)*x15582*x15583))+x15588+((x15589*x15593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15595=cj5*cj5;
IkReal x15596=(r11*sj3);
IkReal x15597=(cj3*r10);
IkReal x15598=(cj3*r11);
IkReal x15599=(r10*sj3);
IkReal x15600=(cj5*r20*sj5);
IkReal x15601=(r21*x15595);
IkReal x15602=(r20*x15595);
IkReal x15603=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x15604 = IKatan2WithCheck(IkReal((((r22*sj5*x15599))+((cj5*r22*x15596)))),IkReal((((x15596*x15602))+(((-1.0)*x15596*x15603))+(((-1.0)*r21*x15599))+((x15599*x15600))+((x15599*x15601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15604.valid){
continue;
}
CheckValue<IkReal> x15605=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((r21*x15598))+(((-1.0)*x15598*x15600))+(((-1.0)*x15598*x15601))+((x15597*x15602))+(((-1.0)*x15597*x15603)))),-1);
if(!x15605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15604.value)+(((1.5707963267949)*(x15605.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15606=IKsin(j4);
IkReal x15607=IKcos(j4);
IkReal x15608=(sj1*sj2);
IkReal x15609=((1.0)*r22);
IkReal x15610=(r11*sj5);
IkReal x15611=((1.0)*cj3);
IkReal x15612=(cj5*r21);
IkReal x15613=(r00*sj5);
IkReal x15614=(cj5*r01);
IkReal x15615=(r10*sj5);
IkReal x15616=((1.0)*cj1);
IkReal x15617=(cj5*r10);
IkReal x15618=(r21*sj5);
IkReal x15619=(r01*sj5);
IkReal x15620=(cj2*sj1);
IkReal x15621=(cj5*r00);
IkReal x15622=(cj5*r20);
IkReal x15623=(r20*sj5);
IkReal x15624=(cj5*r11);
IkReal x15625=(cj2*x15616);
IkReal x15626=((1.0)*x15606);
IkReal x15627=(cj3*x15607);
IkReal x15628=((1.0)*x15607);
IkReal x15629=(sj3*x15607);
evalcond[0]=((((-1.0)*x15607*x15609))+((x15606*x15622))+(((-1.0)*x15618*x15626)));
evalcond[1]=((((-1.0)*x15619*x15626))+(((-1.0)*r02*x15628))+((x15606*x15621)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x15628))+((x15606*x15617))+(((-1.0)*x15610*x15626)));
evalcond[3]=((((-1.0)*r12*x15606*x15611))+(((-1.0)*x15607*x15611*x15617))+((x15610*x15627))+((sj3*x15615))+((sj3*x15624)));
evalcond[4]=((((-1.0)*x15611*x15615))+(((-1.0)*x15611*x15624))+(((-1.0)*sj3*x15617*x15628))+((x15610*x15629))+(((-1.0)*r12*sj3*x15626)));
evalcond[5]=((((-1.0)*x15607*x15611*x15621))+((x15619*x15627))+(((-1.0)*x15625))+x15608+((sj3*x15614))+((sj3*x15613))+(((-1.0)*r02*x15606*x15611)));
evalcond[6]=((((-1.0)*x15607*x15611*x15622))+(((-1.0)*cj3*x15606*x15609))+((x15618*x15627))+(((-1.0)*x15620))+((sj3*x15612))+(((-1.0)*sj2*x15616))+((sj3*x15623)));
evalcond[7]=(((cj1*sj2))+(((-1.0)*x15611*x15613))+(((-1.0)*x15611*x15614))+((x15619*x15629))+(((-1.0)*r02*sj3*x15626))+x15620+(((-1.0)*sj3*x15621*x15628)));
evalcond[8]=((((-1.0)*x15611*x15612))+(((-1.0)*sj3*x15622*x15628))+(((-1.0)*x15625))+(((-1.0)*x15611*x15623))+((x15618*x15629))+(((-1.0)*sj3*x15606*x15609))+x15608);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15630=((1.0)*sj5);
CheckValue<IkReal> x15631=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15630))+(((-1.0)*cj5*r01)))),-1);
if(!x15631.valid){
continue;
}
CheckValue<IkReal> x15632 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x15630))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15631.value)))+(x15632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15633=IKsin(j4);
IkReal x15634=IKcos(j4);
IkReal x15635=(sj1*sj2);
IkReal x15636=((1.0)*r22);
IkReal x15637=(r11*sj5);
IkReal x15638=((1.0)*cj3);
IkReal x15639=(cj5*r21);
IkReal x15640=(r00*sj5);
IkReal x15641=(cj5*r01);
IkReal x15642=(r10*sj5);
IkReal x15643=((1.0)*cj1);
IkReal x15644=(cj5*r10);
IkReal x15645=(r21*sj5);
IkReal x15646=(r01*sj5);
IkReal x15647=(cj2*sj1);
IkReal x15648=(cj5*r00);
IkReal x15649=(cj5*r20);
IkReal x15650=(r20*sj5);
IkReal x15651=(cj5*r11);
IkReal x15652=(cj2*x15643);
IkReal x15653=((1.0)*x15633);
IkReal x15654=(cj3*x15634);
IkReal x15655=((1.0)*x15634);
IkReal x15656=(sj3*x15634);
evalcond[0]=((((-1.0)*x15634*x15636))+(((-1.0)*x15645*x15653))+((x15633*x15649)));
evalcond[1]=((((-1.0)*x15646*x15653))+((x15633*x15648))+(((-1.0)*r02*x15655)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x15655))+(((-1.0)*x15637*x15653))+((x15633*x15644)));
evalcond[3]=((((-1.0)*r12*x15633*x15638))+((sj3*x15642))+((x15637*x15654))+(((-1.0)*x15634*x15638*x15644))+((sj3*x15651)));
evalcond[4]=((((-1.0)*x15638*x15642))+(((-1.0)*r12*sj3*x15653))+(((-1.0)*x15638*x15651))+((x15637*x15656))+(((-1.0)*sj3*x15644*x15655)));
evalcond[5]=(((x15646*x15654))+((sj3*x15640))+((sj3*x15641))+x15635+(((-1.0)*x15652))+(((-1.0)*x15634*x15638*x15648))+(((-1.0)*r02*x15633*x15638)));
evalcond[6]=((((-1.0)*cj3*x15633*x15636))+((sj3*x15639))+(((-1.0)*sj2*x15643))+(((-1.0)*x15647))+(((-1.0)*x15634*x15638*x15649))+((x15645*x15654))+((sj3*x15650)));
evalcond[7]=(((x15646*x15656))+(((-1.0)*x15638*x15641))+(((-1.0)*x15638*x15640))+((cj1*sj2))+(((-1.0)*sj3*x15648*x15655))+x15647+(((-1.0)*r02*sj3*x15653)));
evalcond[8]=((((-1.0)*x15638*x15639))+(((-1.0)*x15638*x15650))+(((-1.0)*sj3*x15649*x15655))+x15635+(((-1.0)*x15652))+((x15645*x15656))+(((-1.0)*sj3*x15633*x15636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15657=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15657.valid){
continue;
}
CheckValue<IkReal> x15658 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15657.value)))+(x15658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15659=IKsin(j4);
IkReal x15660=IKcos(j4);
IkReal x15661=(sj1*sj2);
IkReal x15662=((1.0)*r22);
IkReal x15663=(r11*sj5);
IkReal x15664=((1.0)*cj3);
IkReal x15665=(cj5*r21);
IkReal x15666=(r00*sj5);
IkReal x15667=(cj5*r01);
IkReal x15668=(r10*sj5);
IkReal x15669=((1.0)*cj1);
IkReal x15670=(cj5*r10);
IkReal x15671=(r21*sj5);
IkReal x15672=(r01*sj5);
IkReal x15673=(cj2*sj1);
IkReal x15674=(cj5*r00);
IkReal x15675=(cj5*r20);
IkReal x15676=(r20*sj5);
IkReal x15677=(cj5*r11);
IkReal x15678=(cj2*x15669);
IkReal x15679=((1.0)*x15659);
IkReal x15680=(cj3*x15660);
IkReal x15681=((1.0)*x15660);
IkReal x15682=(sj3*x15660);
evalcond[0]=((((-1.0)*x15671*x15679))+((x15659*x15675))+(((-1.0)*x15660*x15662)));
evalcond[1]=((((-1.0)*x15672*x15679))+(((-1.0)*r02*x15681))+((x15659*x15674)));
evalcond[2]=((-1.0)+(((-1.0)*x15663*x15679))+((x15659*x15670))+(((-1.0)*r12*x15681)));
evalcond[3]=(((sj3*x15668))+((sj3*x15677))+((x15663*x15680))+(((-1.0)*x15660*x15664*x15670))+(((-1.0)*r12*x15659*x15664)));
evalcond[4]=((((-1.0)*x15664*x15677))+(((-1.0)*x15664*x15668))+((x15663*x15682))+(((-1.0)*sj3*x15670*x15681))+(((-1.0)*r12*sj3*x15679)));
evalcond[5]=((((-1.0)*x15678))+((sj3*x15666))+((sj3*x15667))+(((-1.0)*x15660*x15664*x15674))+x15661+(((-1.0)*r02*x15659*x15664))+((x15672*x15680)));
evalcond[6]=(((x15671*x15680))+(((-1.0)*sj2*x15669))+((sj3*x15665))+((sj3*x15676))+(((-1.0)*x15660*x15664*x15675))+(((-1.0)*cj3*x15659*x15662))+(((-1.0)*x15673)));
evalcond[7]=(((cj1*sj2))+(((-1.0)*x15664*x15667))+(((-1.0)*x15664*x15666))+(((-1.0)*r02*sj3*x15679))+x15673+(((-1.0)*sj3*x15674*x15681))+((x15672*x15682)));
evalcond[8]=((((-1.0)*sj3*x15659*x15662))+(((-1.0)*x15678))+(((-1.0)*x15664*x15676))+((x15671*x15682))+(((-1.0)*x15664*x15665))+(((-1.0)*sj3*x15675*x15681))+x15661);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x15683=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x15683;
j4eval[1]=IKsign(x15683);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x15684=((1.0)*sj5);
IkReal x15685=((((-1.0)*r20*x15684))+(((-1.0)*cj5*r21)));
j4eval[0]=x15685;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x15684))+((cj5*r00))))));
j4eval[2]=IKsign(x15685);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x15686=cj5*cj5;
IkReal x15687=(cj3*r11*r21);
IkReal x15688=((1.0)*cj3*cj5*sj5);
IkReal x15689=(((cj3*r12*r22))+(((-1.0)*x15686*x15687))+((cj3*r10*r20*x15686))+(((-1.0)*r11*r20*x15688))+x15687+(((-1.0)*r10*r21*x15688)));
j4eval[0]=x15689;
j4eval[1]=IKsign(x15689);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15690=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x15690;
j4eval[1]=IKsign(x15690);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15691=((1.0)*sj5);
IkReal x15692=((((-1.0)*r20*x15691))+(((-1.0)*cj5*r21)));
j4eval[0]=x15692;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x15691))+((cj5*r00))))));
j4eval[2]=IKsign(x15692);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15693=cj5*cj5;
IkReal x15694=r11*r11;
IkReal x15695=(r11*sj5);
IkReal x15696=(cj5*r10);
IkReal x15697=((((-2.0)*x15695*x15696))+(r12*r12)+(((-1.0)*x15693*x15694))+x15694+((x15693*(r10*r10))));
j4eval[0]=x15697;
j4eval[1]=IKsign(x15697);
j4eval[2]=((IKabs(r12))+(IKabs((x15695+(((-1.0)*x15696))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15698=cj5*cj5;
IkReal x15699=r11*r11;
IkReal x15700=(cj5*r10);
IkReal x15701=(r11*sj5);
CheckValue<IkReal> x15702=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x15700*x15701))+((x15698*(r10*r10)))+x15699+(((-1.0)*x15698*x15699)))),-1);
if(!x15702.valid){
continue;
}
CheckValue<IkReal> x15703 = IKatan2WithCheck(IkReal((x15701+(((-1.0)*x15700)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x15703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15702.value)))+(x15703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15704=IKsin(j4);
IkReal x15705=IKcos(j4);
IkReal x15706=(cj5*r00);
IkReal x15707=((1.0)*cj1);
IkReal x15708=((1.0)*x15705);
IkReal x15709=(sj5*x15705);
IkReal x15710=(cj5*x15704);
IkReal x15711=((1.0)*x15704);
IkReal x15712=(sj5*x15711);
evalcond[0]=((((-1.0)*r22*x15708))+((r20*x15710))+(((-1.0)*r21*x15712)));
evalcond[1]=((((-1.0)*r01*x15712))+(((-1.0)*r02*x15708))+((x15704*x15706)));
evalcond[2]=(((r11*x15709))+(((-1.0)*r12*x15711))+(((-1.0)*cj5*r10*x15708)));
evalcond[3]=((1.0)+(((-1.0)*r12*x15708))+(((-1.0)*r11*x15712))+((r10*x15710)));
evalcond[4]=((((-1.0)*cj5*r20*x15708))+((sj1*sj2))+(((-1.0)*r22*x15711))+(((-1.0)*cj2*x15707))+((r21*x15709)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r02*x15711))+((r01*x15709))+(((-1.0)*sj2*x15707))+(((-1.0)*x15706*x15708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15713=((1.0)*sj5);
CheckValue<IkReal> x15714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15713))+(((-1.0)*cj5*r21)))),-1);
if(!x15714.valid){
continue;
}
CheckValue<IkReal> x15715 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x15713))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15714.value)))+(x15715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15716=IKsin(j4);
IkReal x15717=IKcos(j4);
IkReal x15718=(cj5*r00);
IkReal x15719=((1.0)*cj1);
IkReal x15720=((1.0)*x15717);
IkReal x15721=(sj5*x15717);
IkReal x15722=(cj5*x15716);
IkReal x15723=((1.0)*x15716);
IkReal x15724=(sj5*x15723);
evalcond[0]=((((-1.0)*r21*x15724))+((r20*x15722))+(((-1.0)*r22*x15720)));
evalcond[1]=(((x15716*x15718))+(((-1.0)*r02*x15720))+(((-1.0)*r01*x15724)));
evalcond[2]=(((r11*x15721))+(((-1.0)*cj5*r10*x15720))+(((-1.0)*r12*x15723)));
evalcond[3]=((1.0)+(((-1.0)*r11*x15724))+(((-1.0)*r12*x15720))+((r10*x15722)));
evalcond[4]=(((r21*x15721))+((sj1*sj2))+(((-1.0)*cj5*r20*x15720))+(((-1.0)*r22*x15723))+(((-1.0)*cj2*x15719)));
evalcond[5]=((((-1.0)*r02*x15723))+((r01*x15721))+(((-1.0)*sj2*x15719))+(((-1.0)*cj2*sj1))+(((-1.0)*x15718*x15720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15725=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x15725.valid){
continue;
}
CheckValue<IkReal> x15726 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15725.value)))+(x15726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15727=IKsin(j4);
IkReal x15728=IKcos(j4);
IkReal x15729=(cj5*r00);
IkReal x15730=((1.0)*cj1);
IkReal x15731=((1.0)*x15728);
IkReal x15732=(sj5*x15728);
IkReal x15733=(cj5*x15727);
IkReal x15734=((1.0)*x15727);
IkReal x15735=(sj5*x15734);
evalcond[0]=((((-1.0)*r21*x15735))+((r20*x15733))+(((-1.0)*r22*x15731)));
evalcond[1]=((((-1.0)*r02*x15731))+((x15727*x15729))+(((-1.0)*r01*x15735)));
evalcond[2]=(((r11*x15732))+(((-1.0)*cj5*r10*x15731))+(((-1.0)*r12*x15734)));
evalcond[3]=((1.0)+(((-1.0)*r12*x15731))+(((-1.0)*r11*x15735))+((r10*x15733)));
evalcond[4]=(((sj1*sj2))+((r21*x15732))+(((-1.0)*cj5*r20*x15731))+(((-1.0)*r22*x15734))+(((-1.0)*cj2*x15730)));
evalcond[5]=((((-1.0)*r02*x15734))+((r01*x15732))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x15730))+(((-1.0)*x15729*x15731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15736=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x15736;
j4eval[1]=IKsign(x15736);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15737=((1.0)*sj5);
IkReal x15738=((((-1.0)*r20*x15737))+(((-1.0)*cj5*r21)));
j4eval[0]=x15738;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x15737))+((cj5*r00))))));
j4eval[2]=IKsign(x15738);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15739=(sj1*sj2);
IkReal x15740=(cj1*cj2);
IkReal x15741=(r11*sj5);
IkReal x15742=(cj5*r10);
IkReal x15743=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x15743;
j4eval[1]=IKsign(x15743);
j4eval[2]=((IKabs(((((-1.0)*r12*x15739))+((r12*x15740)))))+(IKabs((((x15739*x15742))+((x15740*x15741))+(((-1.0)*x15739*x15741))+(((-1.0)*x15740*x15742))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15744=(sj1*sj2);
IkReal x15745=(cj1*cj2);
IkReal x15746=(cj5*r10);
IkReal x15747=(r11*sj5);
CheckValue<IkReal> x15748=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x15748.valid){
continue;
}
CheckValue<IkReal> x15749 = IKatan2WithCheck(IkReal(((((-1.0)*x15745*x15746))+(((-1.0)*x15744*x15747))+((x15745*x15747))+((x15744*x15746)))),IkReal(((((-1.0)*r12*x15744))+((r12*x15745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15748.value)))+(x15749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15750=IKcos(j4);
IkReal x15751=IKsin(j4);
IkReal x15752=(cj5*r10);
IkReal x15753=((1.0)*cj1);
IkReal x15754=((1.0)*x15750);
IkReal x15755=(cj5*x15751);
IkReal x15756=(cj5*x15750);
IkReal x15757=((1.0)*sj5*x15751);
evalcond[0]=(((x15750*x15752))+((r12*x15751))+(((-1.0)*r11*sj5*x15754)));
evalcond[1]=((((-1.0)*r22*x15754))+((r20*x15755))+(((-1.0)*r21*x15757)));
evalcond[2]=((((-1.0)*r02*x15754))+((r00*x15755))+(((-1.0)*r01*x15757)));
evalcond[3]=((1.0)+(((-1.0)*r11*x15757))+(((-1.0)*r12*x15754))+((x15751*x15752)));
evalcond[4]=(((r22*x15751))+(((-1.0)*cj2*x15753))+((r20*x15756))+((sj1*sj2))+(((-1.0)*r21*sj5*x15754)));
evalcond[5]=(((r02*x15751))+(((-1.0)*r01*sj5*x15754))+(((-1.0)*cj2*sj1))+((r00*x15756))+(((-1.0)*sj2*x15753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15758=((1.0)*sj5);
CheckValue<IkReal> x15759 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x15758))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15759.valid){
continue;
}
CheckValue<IkReal> x15760=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15758))+(((-1.0)*cj5*r21)))),-1);
if(!x15760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15759.value)+(((1.5707963267949)*(x15760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15761=IKcos(j4);
IkReal x15762=IKsin(j4);
IkReal x15763=(cj5*r10);
IkReal x15764=((1.0)*cj1);
IkReal x15765=((1.0)*x15761);
IkReal x15766=(cj5*x15762);
IkReal x15767=(cj5*x15761);
IkReal x15768=((1.0)*sj5*x15762);
evalcond[0]=((((-1.0)*r11*sj5*x15765))+((r12*x15762))+((x15761*x15763)));
evalcond[1]=((((-1.0)*r22*x15765))+(((-1.0)*r21*x15768))+((r20*x15766)));
evalcond[2]=((((-1.0)*r01*x15768))+(((-1.0)*r02*x15765))+((r00*x15766)));
evalcond[3]=((1.0)+((x15762*x15763))+(((-1.0)*r11*x15768))+(((-1.0)*r12*x15765)));
evalcond[4]=(((r22*x15762))+(((-1.0)*cj2*x15764))+((sj1*sj2))+((r20*x15767))+(((-1.0)*r21*sj5*x15765)));
evalcond[5]=(((r02*x15762))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x15765))+((r00*x15767))+(((-1.0)*sj2*x15764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15769=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x15769.valid){
continue;
}
CheckValue<IkReal> x15770 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15769.value)))+(x15770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15771=IKcos(j4);
IkReal x15772=IKsin(j4);
IkReal x15773=(cj5*r10);
IkReal x15774=((1.0)*cj1);
IkReal x15775=((1.0)*x15771);
IkReal x15776=(cj5*x15772);
IkReal x15777=(cj5*x15771);
IkReal x15778=((1.0)*sj5*x15772);
evalcond[0]=((((-1.0)*r11*sj5*x15775))+((x15771*x15773))+((r12*x15772)));
evalcond[1]=((((-1.0)*r22*x15775))+(((-1.0)*r21*x15778))+((r20*x15776)));
evalcond[2]=(((r00*x15776))+(((-1.0)*r01*x15778))+(((-1.0)*r02*x15775)));
evalcond[3]=((1.0)+((x15772*x15773))+(((-1.0)*r12*x15775))+(((-1.0)*r11*x15778)));
evalcond[4]=(((r22*x15772))+((sj1*sj2))+(((-1.0)*cj2*x15774))+((r20*x15777))+(((-1.0)*r21*sj5*x15775)));
evalcond[5]=(((r02*x15772))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*sj5*x15775))+((r00*x15777))+(((-1.0)*sj2*x15774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15779=((-1.0)*r20);
IkReal x15781 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15781)==0){
continue;
}
IkReal x15780=pow(x15781,-0.5);
CheckValue<IkReal> x15782 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15779),IKFAST_ATAN2_MAGTHRESH);
if(!x15782.valid){
continue;
}
IkReal gconst54=((-1.0)*(x15782.value));
IkReal gconst55=(r21*x15780);
IkReal gconst56=(x15779*x15780);
CheckValue<IkReal> x15783 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15783.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15783.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15784=((-1.0)*r20);
IkReal x15785=x15780;
CheckValue<IkReal> x15787 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15784),IKFAST_ATAN2_MAGTHRESH);
if(!x15787.valid){
continue;
}
IkReal x15786=((-1.0)*(x15787.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x15786;
IkReal gconst54=x15786;
IkReal gconst55=(r21*x15785);
IkReal gconst56=(x15784*x15785);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15788=((-1.0)*r20);
IkReal x15789=x15780;
CheckValue<IkReal> x15791 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15788),IKFAST_ATAN2_MAGTHRESH);
if(!x15791.valid){
continue;
}
IkReal x15790=((-1.0)*(x15791.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x15790;
IkReal gconst54=x15790;
IkReal gconst55=(r21*x15789);
IkReal gconst56=(x15788*x15789);
CheckValue<IkReal> x15799=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x15799.valid){
continue;
}
IkReal x15792=x15799.value;
IkReal x15793=(cj3*x15792);
IkReal x15794=(r11*x15793);
IkReal x15795=(r01*x15793);
IkReal x15796=(r00*x15793);
IkReal x15797=(r10*x15793);
IkReal x15798=(r20*r21*x15793);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*x15796*(r20*r20)))+((r10*r20*r21*x15795))+((r01*x15794*(r21*r21)))+((r00*r20*r21*x15794))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15800=((-1.0)*r20);
IkReal x15801=x15780;
CheckValue<IkReal> x15803 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15800),IKFAST_ATAN2_MAGTHRESH);
if(!x15803.valid){
continue;
}
IkReal x15802=((-1.0)*(x15803.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x15802;
IkReal gconst54=x15802;
IkReal gconst55=(r21*x15801);
IkReal gconst56=(x15800*x15801);
CheckValue<IkReal> x15811=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x15811.valid){
continue;
}
IkReal x15804=x15811.value;
IkReal x15805=(sj3*x15804);
IkReal x15806=(r11*x15805);
IkReal x15807=(r00*x15805);
IkReal x15808=(r01*x15805);
IkReal x15809=(r10*x15805);
IkReal x15810=(r20*r21*x15805);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x15806))+((r01*x15806*(r21*r21)))+((r10*r20*r21*x15808))+((r10*x15807*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15812=gconst55*gconst55;
IkReal x15813=gconst56*gconst56;
IkReal x15814=(r11*sj3);
IkReal x15815=((1.0)*r00);
IkReal x15816=(gconst55*gconst56);
IkReal x15817=(cj3*r11);
IkReal x15818=(cj3*r10);
IkReal x15819=((1.0)*r02);
IkReal x15820=(r10*sj3);
IkReal x15821=(r01*x15812);
CheckValue<IkReal> x15822=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15814*x15815*x15816))+((r02*r12*sj3))+((x15814*x15821))+(((-1.0)*r01*x15816*x15820))+((r00*x15813*x15820)))),-1);
if(!x15822.valid){
continue;
}
CheckValue<IkReal> x15823 = IKatan2WithCheck(IkReal(((((-1.0)*gconst55*x15818*x15819))+(((-1.0)*gconst56*x15817*x15819)))),IkReal(((((-1.0)*x15813*x15815*x15817))+((x15818*x15821))+((r01*x15816*x15817))+(((-1.0)*x15815*x15816*x15818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15822.value)))+(x15823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15824=IKsin(j4);
IkReal x15825=IKcos(j4);
IkReal x15826=((1.0)*sj2);
IkReal x15827=(r00*sj3);
IkReal x15828=(r01*sj3);
IkReal x15829=((1.0)*cj3);
IkReal x15830=(gconst56*sj3);
IkReal x15831=((1.0)*cj2);
IkReal x15832=(gconst55*sj3);
IkReal x15833=(cj3*gconst56);
IkReal x15834=(cj1*x15826);
IkReal x15835=(sj1*x15831);
IkReal x15836=((1.0)*x15825);
IkReal x15837=((1.0)*x15824);
IkReal x15838=(gconst55*x15825);
IkReal x15839=(gconst56*x15824);
IkReal x15840=(x15834+x15835);
evalcond[0]=((((-1.0)*gconst55*r21*x15837))+((r20*x15839))+(((-1.0)*r22*x15836)));
evalcond[1]=((((-1.0)*gconst55*r01*x15837))+(((-1.0)*r02*x15836))+((r00*x15839)));
evalcond[2]=((1.0)+((r10*x15839))+(((-1.0)*gconst55*r11*x15837))+(((-1.0)*r12*x15836)));
evalcond[3]=(((r10*x15832))+(((-1.0)*gconst56*r10*x15825*x15829))+((r11*x15830))+(((-1.0)*r12*x15824*x15829))+((cj3*r11*x15838)));
evalcond[4]=(((r11*x15825*x15832))+(((-1.0)*gconst55*r10*x15829))+(((-1.0)*r10*x15830*x15836))+(((-1.0)*r12*sj3*x15837))+(((-1.0)*gconst56*r11*x15829)));
evalcond[5]=(((cj3*r01*x15838))+((gconst55*x15827))+((gconst56*x15828))+(((-1.0)*r02*x15824*x15829))+(((-1.0)*sj1*x15826))+((cj1*cj2))+(((-1.0)*gconst56*r00*x15825*x15829)));
evalcond[6]=((((-1.0)*r22*x15824*x15829))+(((-1.0)*gconst56*r20*x15825*x15829))+((r20*x15832))+(((-1.0)*x15840))+((cj3*r21*x15838))+((r21*x15830)));
evalcond[7]=((((-1.0)*gconst55*r20*x15829))+(((-1.0)*r20*x15830*x15836))+(((-1.0)*gconst56*r21*x15829))+((r21*x15825*x15832))+((sj1*sj2))+(((-1.0)*r22*sj3*x15837))+(((-1.0)*cj1*x15831)));
evalcond[8]=((((-1.0)*r02*sj3*x15837))+(((-1.0)*gconst55*r00*x15829))+((x15828*x15838))+(((-1.0)*x15840))+(((-1.0)*gconst56*x15827*x15836))+(((-1.0)*gconst56*r01*x15829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15841=gconst55*gconst55;
IkReal x15842=gconst56*gconst56;
IkReal x15843=(r11*sj3);
IkReal x15844=(cj3*r01);
IkReal x15845=(gconst55*r10);
IkReal x15846=((1.0)*gconst56);
IkReal x15847=(r00*x15842);
CheckValue<IkReal> x15848=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((cj3*r10*x15847))+(((-1.0)*x15844*x15845*x15846))+((r11*x15841*x15844))+(((-1.0)*cj3*gconst55*r00*r11*x15846)))),-1);
if(!x15848.valid){
continue;
}
CheckValue<IkReal> x15849 = IKatan2WithCheck(IkReal((((r02*sj3*x15845))+((gconst56*r02*x15843)))),IkReal((((x15843*x15847))+(((-1.0)*gconst55*r01*x15843*x15846))+((gconst56*r00*sj3*x15845))+(((-1.0)*r01*r10*sj3*x15841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15848.value)))+(x15849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15850=IKsin(j4);
IkReal x15851=IKcos(j4);
IkReal x15852=((1.0)*sj2);
IkReal x15853=(r00*sj3);
IkReal x15854=(r01*sj3);
IkReal x15855=((1.0)*cj3);
IkReal x15856=(gconst56*sj3);
IkReal x15857=((1.0)*cj2);
IkReal x15858=(gconst55*sj3);
IkReal x15859=(cj3*gconst56);
IkReal x15860=(cj1*x15852);
IkReal x15861=(sj1*x15857);
IkReal x15862=((1.0)*x15851);
IkReal x15863=((1.0)*x15850);
IkReal x15864=(gconst55*x15851);
IkReal x15865=(gconst56*x15850);
IkReal x15866=(x15861+x15860);
evalcond[0]=((((-1.0)*r22*x15862))+(((-1.0)*gconst55*r21*x15863))+((r20*x15865)));
evalcond[1]=((((-1.0)*gconst55*r01*x15863))+(((-1.0)*r02*x15862))+((r00*x15865)));
evalcond[2]=((1.0)+(((-1.0)*gconst55*r11*x15863))+((r10*x15865))+(((-1.0)*r12*x15862)));
evalcond[3]=((((-1.0)*r12*x15850*x15855))+((r10*x15858))+((r11*x15856))+((cj3*r11*x15864))+(((-1.0)*gconst56*r10*x15851*x15855)));
evalcond[4]=((((-1.0)*gconst55*r10*x15855))+((r11*x15851*x15858))+(((-1.0)*r10*x15856*x15862))+(((-1.0)*r12*sj3*x15863))+(((-1.0)*gconst56*r11*x15855)));
evalcond[5]=(((cj3*r01*x15864))+((gconst55*x15853))+(((-1.0)*r02*x15850*x15855))+((gconst56*x15854))+(((-1.0)*gconst56*r00*x15851*x15855))+((cj1*cj2))+(((-1.0)*sj1*x15852)));
evalcond[6]=((((-1.0)*x15866))+((r20*x15858))+(((-1.0)*gconst56*r20*x15851*x15855))+(((-1.0)*r22*x15850*x15855))+((r21*x15856))+((cj3*r21*x15864)));
evalcond[7]=((((-1.0)*gconst55*r20*x15855))+(((-1.0)*r22*sj3*x15863))+(((-1.0)*gconst56*r21*x15855))+(((-1.0)*r20*x15856*x15862))+((sj1*sj2))+((r21*x15851*x15858))+(((-1.0)*cj1*x15857)));
evalcond[8]=((((-1.0)*gconst55*r00*x15855))+(((-1.0)*gconst56*r01*x15855))+(((-1.0)*x15866))+(((-1.0)*r02*sj3*x15863))+((x15854*x15864))+(((-1.0)*gconst56*x15853*x15862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15867=IKPowWithIntegerCheck(IKsign((((gconst56*r01))+((gconst55*r00)))),-1);
if(!x15867.valid){
continue;
}
CheckValue<IkReal> x15868 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst55*r21))+((gconst56*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15867.value)))+(x15868.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15869=IKsin(j4);
IkReal x15870=IKcos(j4);
IkReal x15871=((1.0)*sj2);
IkReal x15872=(r00*sj3);
IkReal x15873=(r01*sj3);
IkReal x15874=((1.0)*cj3);
IkReal x15875=(gconst56*sj3);
IkReal x15876=((1.0)*cj2);
IkReal x15877=(gconst55*sj3);
IkReal x15878=(cj3*gconst56);
IkReal x15879=(cj1*x15871);
IkReal x15880=(sj1*x15876);
IkReal x15881=((1.0)*x15870);
IkReal x15882=((1.0)*x15869);
IkReal x15883=(gconst55*x15870);
IkReal x15884=(gconst56*x15869);
IkReal x15885=(x15880+x15879);
evalcond[0]=(((r20*x15884))+(((-1.0)*r22*x15881))+(((-1.0)*gconst55*r21*x15882)));
evalcond[1]=((((-1.0)*r02*x15881))+((r00*x15884))+(((-1.0)*gconst55*r01*x15882)));
evalcond[2]=((1.0)+((r10*x15884))+(((-1.0)*gconst55*r11*x15882))+(((-1.0)*r12*x15881)));
evalcond[3]=(((r11*x15875))+(((-1.0)*r12*x15869*x15874))+((r10*x15877))+((cj3*r11*x15883))+(((-1.0)*gconst56*r10*x15870*x15874)));
evalcond[4]=((((-1.0)*gconst55*r10*x15874))+((r11*x15870*x15877))+(((-1.0)*r12*sj3*x15882))+(((-1.0)*gconst56*r11*x15874))+(((-1.0)*r10*x15875*x15881)));
evalcond[5]=(((gconst55*x15872))+(((-1.0)*r02*x15869*x15874))+((gconst56*x15873))+((cj1*cj2))+(((-1.0)*gconst56*r00*x15870*x15874))+((cj3*r01*x15883))+(((-1.0)*sj1*x15871)));
evalcond[6]=(((cj3*r21*x15883))+(((-1.0)*r22*x15869*x15874))+((r20*x15877))+((r21*x15875))+(((-1.0)*x15885))+(((-1.0)*gconst56*r20*x15870*x15874)));
evalcond[7]=(((r21*x15870*x15877))+(((-1.0)*gconst55*r20*x15874))+(((-1.0)*r20*x15875*x15881))+((sj1*sj2))+(((-1.0)*cj1*x15876))+(((-1.0)*r22*sj3*x15882))+(((-1.0)*gconst56*r21*x15874)));
evalcond[8]=((((-1.0)*gconst56*r01*x15874))+(((-1.0)*gconst55*r00*x15874))+((x15873*x15883))+(((-1.0)*x15885))+(((-1.0)*gconst56*x15872*x15881))+(((-1.0)*r02*sj3*x15882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15886=((-1.0)*r21);
IkReal x15888 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15888)==0){
continue;
}
IkReal x15887=pow(x15888,-0.5);
CheckValue<IkReal> x15889 = IKatan2WithCheck(IkReal(x15886),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15889.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x15889.value))));
IkReal gconst58=(x15886*x15887);
IkReal gconst59=((1.0)*r20*x15887);
CheckValue<IkReal> x15890 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15890.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15890.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15891=((-1.0)*r21);
CheckValue<IkReal> x15894 = IKatan2WithCheck(IkReal(x15891),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15894.valid){
continue;
}
IkReal x15892=((1.0)*(x15894.value));
IkReal x15893=x15887;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15892)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15892)));
IkReal gconst58=(x15891*x15893);
IkReal gconst59=((1.0)*r20*x15893);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x15895=((-1.0)*r21);
CheckValue<IkReal> x15898 = IKatan2WithCheck(IkReal(x15895),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15898.valid){
continue;
}
IkReal x15896=((1.0)*(x15898.value));
IkReal x15897=x15887;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15896)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15896)));
IkReal gconst58=(x15895*x15897);
IkReal gconst59=((1.0)*r20*x15897);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15899=((-1.0)*r21);
CheckValue<IkReal> x15902 = IKatan2WithCheck(IkReal(x15899),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15902.valid){
continue;
}
IkReal x15900=((1.0)*(x15902.value));
IkReal x15901=x15887;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15900)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15900)));
IkReal gconst58=(x15899*x15901);
IkReal gconst59=((1.0)*r20*x15901);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15903=gconst59*gconst59;
IkReal x15904=gconst58*gconst58;
IkReal x15905=(r11*sj3);
IkReal x15906=(r10*sj3);
IkReal x15907=(cj3*r10);
IkReal x15908=((1.0)*r21);
IkReal x15909=(gconst58*gconst59);
IkReal x15910=(cj3*r11);
IkReal x15911=(r20*x15903);
CheckValue<IkReal> x15912 = IKatan2WithCheck(IkReal((((gconst58*r22*x15906))+((gconst59*r22*x15905)))),IkReal((((x15905*x15911))+(((-1.0)*x15904*x15906*x15908))+(((-1.0)*x15905*x15908*x15909))+((r20*x15906*x15909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15912.valid){
continue;
}
CheckValue<IkReal> x15913=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*r20*x15909*x15910))+((x15907*x15911))+(((-1.0)*x15907*x15908*x15909))+((r21*x15904*x15910)))),-1);
if(!x15913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15912.value)+(((1.5707963267949)*(x15913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15914=IKsin(j4);
IkReal x15915=IKcos(j4);
IkReal x15916=(cj3*gconst59);
IkReal x15917=(gconst58*sj3);
IkReal x15918=(cj3*gconst58);
IkReal x15919=((1.0)*sj1);
IkReal x15920=((1.0)*cj1);
IkReal x15921=(gconst59*sj3);
IkReal x15922=(sj2*x15920);
IkReal x15923=(cj2*x15919);
IkReal x15924=((1.0)*x15915);
IkReal x15925=((1.0)*x15914);
IkReal x15926=(r21*x15915);
IkReal x15927=(r01*x15915);
IkReal x15928=(r11*x15915);
IkReal x15929=(gconst59*x15914);
IkReal x15930=(x15922+x15923);
evalcond[0]=(((r20*x15929))+(((-1.0)*gconst58*r21*x15925))+(((-1.0)*r22*x15924)));
evalcond[1]=(((r00*x15929))+(((-1.0)*r02*x15924))+(((-1.0)*gconst58*r01*x15925)));
evalcond[2]=((1.0)+((r10*x15929))+(((-1.0)*r12*x15924))+(((-1.0)*gconst58*r11*x15925)));
evalcond[3]=((((-1.0)*r10*x15916*x15924))+((r11*x15921))+(((-1.0)*cj3*r12*x15925))+((x15918*x15928))+((r10*x15917)));
evalcond[4]=((((-1.0)*r10*x15918))+(((-1.0)*r10*x15921*x15924))+(((-1.0)*r12*sj3*x15925))+((x15917*x15928))+(((-1.0)*r11*x15916)));
evalcond[5]=(((r00*x15917))+(((-1.0)*cj3*r02*x15925))+((x15918*x15927))+(((-1.0)*r00*x15916*x15924))+((r01*x15921))+(((-1.0)*sj2*x15919))+((cj1*cj2)));
evalcond[6]=((((-1.0)*r20*x15916*x15924))+(((-1.0)*cj3*r22*x15925))+((r21*x15921))+((x15918*x15926))+(((-1.0)*x15930))+((r20*x15917)));
evalcond[7]=((((-1.0)*cj2*x15920))+(((-1.0)*r20*x15918))+((sj1*sj2))+(((-1.0)*r21*x15916))+(((-1.0)*r20*x15921*x15924))+(((-1.0)*r22*sj3*x15925))+((x15917*x15926)));
evalcond[8]=((((-1.0)*r02*sj3*x15925))+(((-1.0)*r00*x15918))+(((-1.0)*x15930))+(((-1.0)*r01*x15916))+((x15917*x15927))+(((-1.0)*r00*x15921*x15924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15931=((1.0)*gconst58);
CheckValue<IkReal> x15932 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x15931))+((gconst59*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15932.valid){
continue;
}
CheckValue<IkReal> x15933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15931))+(((-1.0)*gconst59*r21)))),-1);
if(!x15933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15932.value)+(((1.5707963267949)*(x15933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15934=IKsin(j4);
IkReal x15935=IKcos(j4);
IkReal x15936=(cj3*gconst59);
IkReal x15937=(gconst58*sj3);
IkReal x15938=(cj3*gconst58);
IkReal x15939=((1.0)*sj1);
IkReal x15940=((1.0)*cj1);
IkReal x15941=(gconst59*sj3);
IkReal x15942=(sj2*x15940);
IkReal x15943=(cj2*x15939);
IkReal x15944=((1.0)*x15935);
IkReal x15945=((1.0)*x15934);
IkReal x15946=(r21*x15935);
IkReal x15947=(r01*x15935);
IkReal x15948=(r11*x15935);
IkReal x15949=(gconst59*x15934);
IkReal x15950=(x15942+x15943);
evalcond[0]=((((-1.0)*r22*x15944))+(((-1.0)*gconst58*r21*x15945))+((r20*x15949)));
evalcond[1]=((((-1.0)*r02*x15944))+((r00*x15949))+(((-1.0)*gconst58*r01*x15945)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15944))+(((-1.0)*gconst58*r11*x15945))+((r10*x15949)));
evalcond[3]=((((-1.0)*r10*x15936*x15944))+((r11*x15941))+(((-1.0)*cj3*r12*x15945))+((x15938*x15948))+((r10*x15937)));
evalcond[4]=((((-1.0)*r10*x15938))+((x15937*x15948))+(((-1.0)*r12*sj3*x15945))+(((-1.0)*r10*x15941*x15944))+(((-1.0)*r11*x15936)));
evalcond[5]=(((r01*x15941))+((r00*x15937))+(((-1.0)*sj2*x15939))+((cj1*cj2))+(((-1.0)*cj3*r02*x15945))+((x15938*x15947))+(((-1.0)*r00*x15936*x15944)));
evalcond[6]=((((-1.0)*cj3*r22*x15945))+(((-1.0)*r20*x15936*x15944))+(((-1.0)*x15950))+((r21*x15941))+((r20*x15937))+((x15938*x15946)));
evalcond[7]=((((-1.0)*r22*sj3*x15945))+(((-1.0)*r20*x15938))+((x15937*x15946))+((sj1*sj2))+(((-1.0)*r20*x15941*x15944))+(((-1.0)*r21*x15936))+(((-1.0)*cj2*x15940)));
evalcond[8]=(((x15937*x15947))+(((-1.0)*r00*x15941*x15944))+(((-1.0)*x15950))+(((-1.0)*r01*x15936))+(((-1.0)*r02*sj3*x15945))+(((-1.0)*r00*x15938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15951 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst58*r21))+((gconst59*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15951.valid){
continue;
}
CheckValue<IkReal> x15952=IKPowWithIntegerCheck(IKsign((((gconst58*r00))+((gconst59*r01)))),-1);
if(!x15952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15951.value)+(((1.5707963267949)*(x15952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15953=IKsin(j4);
IkReal x15954=IKcos(j4);
IkReal x15955=(cj3*gconst59);
IkReal x15956=(gconst58*sj3);
IkReal x15957=(cj3*gconst58);
IkReal x15958=((1.0)*sj1);
IkReal x15959=((1.0)*cj1);
IkReal x15960=(gconst59*sj3);
IkReal x15961=(sj2*x15959);
IkReal x15962=(cj2*x15958);
IkReal x15963=((1.0)*x15954);
IkReal x15964=((1.0)*x15953);
IkReal x15965=(r21*x15954);
IkReal x15966=(r01*x15954);
IkReal x15967=(r11*x15954);
IkReal x15968=(gconst59*x15953);
IkReal x15969=(x15962+x15961);
evalcond[0]=((((-1.0)*gconst58*r21*x15964))+((r20*x15968))+(((-1.0)*r22*x15963)));
evalcond[1]=((((-1.0)*r02*x15963))+((r00*x15968))+(((-1.0)*gconst58*r01*x15964)));
evalcond[2]=((1.0)+(((-1.0)*gconst58*r11*x15964))+((r10*x15968))+(((-1.0)*r12*x15963)));
evalcond[3]=(((x15957*x15967))+(((-1.0)*r10*x15955*x15963))+((r10*x15956))+((r11*x15960))+(((-1.0)*cj3*r12*x15964)));
evalcond[4]=((((-1.0)*r10*x15960*x15963))+(((-1.0)*r11*x15955))+(((-1.0)*r10*x15957))+((x15956*x15967))+(((-1.0)*r12*sj3*x15964)));
evalcond[5]=((((-1.0)*r00*x15955*x15963))+((r00*x15956))+((r01*x15960))+(((-1.0)*sj2*x15958))+((x15957*x15966))+(((-1.0)*cj3*r02*x15964))+((cj1*cj2)));
evalcond[6]=((((-1.0)*r20*x15955*x15963))+(((-1.0)*cj3*r22*x15964))+(((-1.0)*x15969))+((x15957*x15965))+((r20*x15956))+((r21*x15960)));
evalcond[7]=((((-1.0)*r22*sj3*x15964))+(((-1.0)*r21*x15955))+((x15956*x15965))+((sj1*sj2))+(((-1.0)*r20*x15960*x15963))+(((-1.0)*cj2*x15959))+(((-1.0)*r20*x15957)));
evalcond[8]=((((-1.0)*r00*x15960*x15963))+(((-1.0)*x15969))+(((-1.0)*r00*x15957))+((x15956*x15966))+(((-1.0)*r01*x15955))+(((-1.0)*r02*sj3*x15964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15971 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x15971)==0){
continue;
}
IkReal x15970=pow(x15971,-0.5);
CheckValue<IkReal> x15972 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15972.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15972.value));
IkReal gconst61=((-1.0)*r01*x15970);
IkReal gconst62=(r00*x15970);
CheckValue<IkReal> x15973 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15973.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15973.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15976 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15976.valid){
continue;
}
IkReal x15974=((-1.0)*(x15976.value));
IkReal x15975=x15970;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x15974;
IkReal gconst60=x15974;
IkReal gconst61=((-1.0)*r01*x15975);
IkReal gconst62=(r00*x15975);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15979 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15979.valid){
continue;
}
IkReal x15977=((-1.0)*(x15979.value));
IkReal x15978=x15970;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x15977;
IkReal gconst60=x15977;
IkReal gconst61=((-1.0)*r01*x15978);
IkReal gconst62=(r00*x15978);
CheckValue<IkReal> x15987=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x15987.valid){
continue;
}
IkReal x15980=x15987.value;
IkReal x15981=(cj3*x15980);
IkReal x15982=(r21*x15981);
IkReal x15983=(r10*x15981);
IkReal x15984=(r11*x15981);
IkReal x15985=(r20*x15981);
IkReal x15986=(r00*r01*x15981);
j4eval[0]=IKsign((((cj3*r12*r22))+((r11*x15982*(r01*r01)))+((r00*r01*r20*x15984))+((r20*x15983*(r00*r00)))+((r00*r01*r10*x15982))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15990 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15990.valid){
continue;
}
IkReal x15988=((-1.0)*(x15990.value));
IkReal x15989=x15970;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x15988;
IkReal gconst60=x15988;
IkReal gconst61=((-1.0)*r01*x15989);
IkReal gconst62=(r00*x15989);
CheckValue<IkReal> x15998=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x15998.valid){
continue;
}
IkReal x15991=x15998.value;
IkReal x15992=(sj3*x15991);
IkReal x15993=(r11*x15992);
IkReal x15994=(r21*x15992);
IkReal x15995=(r20*x15992);
IkReal x15996=(r10*x15992);
IkReal x15997=(r00*r01*x15992);
j4eval[0]=IKsign((((r00*r01*r20*x15993))+((r12*r22*sj3))+((r21*x15993*(r01*r01)))+((r10*x15995*(r00*r00)))+((r00*r01*r10*x15994))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15999=gconst61*gconst61;
IkReal x16000=gconst62*gconst62;
IkReal x16001=((1.0)*gconst62);
IkReal x16002=(r10*r21);
IkReal x16003=(gconst61*sj3);
IkReal x16004=(cj3*r11);
IkReal x16005=(cj3*gconst61*r10);
IkReal x16006=(r20*x16000);
CheckValue<IkReal> x16007=IKPowWithIntegerCheck(IKsign((((r10*sj3*x16006))+(((-1.0)*r11*r20*x16001*x16003))+(((-1.0)*x16001*x16002*x16003))+((r11*r21*sj3*x15999))+((r12*r22*sj3)))),-1);
if(!x16007.valid){
continue;
}
CheckValue<IkReal> x16008 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x16001*x16004))+(((-1.0)*r22*x16005)))),IkReal(((((-1.0)*r20*x16001*x16005))+(((-1.0)*x16004*x16006))+((gconst61*gconst62*r21*x16004))+((cj3*x15999*x16002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16007.value)))+(x16008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16009=IKsin(j4);
IkReal x16010=IKcos(j4);
IkReal x16011=(gconst62*sj3);
IkReal x16012=(gconst61*r11);
IkReal x16013=(gconst61*sj3);
IkReal x16014=((1.0)*cj3);
IkReal x16015=(sj1*sj2);
IkReal x16016=(gconst61*r21);
IkReal x16017=((1.0)*cj1);
IkReal x16018=(gconst61*r01);
IkReal x16019=(cj3*gconst62);
IkReal x16020=(sj2*x16017);
IkReal x16021=((1.0)*cj2*sj1);
IkReal x16022=((1.0)*x16010);
IkReal x16023=((1.0)*x16009);
IkReal x16024=(gconst62*x16009);
IkReal x16025=(cj3*x16010);
IkReal x16026=(x16020+x16021);
evalcond[0]=((((-1.0)*r22*x16022))+(((-1.0)*x16016*x16023))+((r20*x16024)));
evalcond[1]=((((-1.0)*r02*x16022))+(((-1.0)*x16018*x16023))+((r00*x16024)));
evalcond[2]=((1.0)+(((-1.0)*r12*x16022))+(((-1.0)*x16012*x16023))+((r10*x16024)));
evalcond[3]=((((-1.0)*gconst62*r10*x16010*x16014))+((r11*x16011))+((x16012*x16025))+(((-1.0)*r12*x16009*x16014))+((r10*x16013)));
evalcond[4]=((((-1.0)*r12*sj3*x16023))+(((-1.0)*gconst62*r11*x16014))+(((-1.0)*gconst61*r10*x16014))+(((-1.0)*r10*x16011*x16022))+((sj3*x16010*x16012)));
evalcond[5]=((((-1.0)*gconst62*r00*x16010*x16014))+(((-1.0)*r02*x16009*x16014))+((r00*x16013))+((r01*x16011))+(((-1.0)*x16015))+((cj1*cj2))+((x16018*x16025)));
evalcond[6]=((((-1.0)*x16026))+(((-1.0)*gconst62*r20*x16010*x16014))+((x16016*x16025))+((r20*x16013))+((r21*x16011))+(((-1.0)*r22*x16009*x16014)));
evalcond[7]=(((r21*x16010*x16013))+(((-1.0)*r20*x16011*x16022))+(((-1.0)*cj2*x16017))+(((-1.0)*gconst61*r20*x16014))+(((-1.0)*gconst62*r21*x16014))+x16015+(((-1.0)*r22*sj3*x16023)));
evalcond[8]=((((-1.0)*gconst61*r00*x16014))+(((-1.0)*x16026))+(((-1.0)*gconst62*r01*x16014))+(((-1.0)*r00*x16011*x16022))+(((-1.0)*r02*sj3*x16023))+((r01*x16010*x16013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16027=gconst62*gconst62;
IkReal x16028=gconst61*gconst61;
IkReal x16029=(r20*sj3);
IkReal x16030=(gconst61*r10);
IkReal x16031=(r22*sj3);
IkReal x16032=(gconst62*r11);
IkReal x16033=(cj3*r21);
IkReal x16034=(cj3*r20);
IkReal x16035=((1.0)*r21*sj3);
CheckValue<IkReal> x16036=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*gconst62*x16030*x16033))+(((-1.0)*gconst61*x16032*x16034))+((r11*x16028*x16033))+((r10*x16027*x16034)))),-1);
if(!x16036.valid){
continue;
}
CheckValue<IkReal> x16037 = IKatan2WithCheck(IkReal((((x16031*x16032))+((x16030*x16031)))),IkReal(((((-1.0)*r10*x16028*x16035))+((r11*x16027*x16029))+(((-1.0)*gconst61*x16032*x16035))+((gconst62*x16029*x16030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16036.value)))+(x16037.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16038=IKsin(j4);
IkReal x16039=IKcos(j4);
IkReal x16040=(gconst62*sj3);
IkReal x16041=(gconst61*r11);
IkReal x16042=(gconst61*sj3);
IkReal x16043=((1.0)*cj3);
IkReal x16044=(sj1*sj2);
IkReal x16045=(gconst61*r21);
IkReal x16046=((1.0)*cj1);
IkReal x16047=(gconst61*r01);
IkReal x16048=(cj3*gconst62);
IkReal x16049=(sj2*x16046);
IkReal x16050=((1.0)*cj2*sj1);
IkReal x16051=((1.0)*x16039);
IkReal x16052=((1.0)*x16038);
IkReal x16053=(gconst62*x16038);
IkReal x16054=(cj3*x16039);
IkReal x16055=(x16050+x16049);
evalcond[0]=((((-1.0)*r22*x16051))+((r20*x16053))+(((-1.0)*x16045*x16052)));
evalcond[1]=(((r00*x16053))+(((-1.0)*r02*x16051))+(((-1.0)*x16047*x16052)));
evalcond[2]=((1.0)+(((-1.0)*x16041*x16052))+((r10*x16053))+(((-1.0)*r12*x16051)));
evalcond[3]=(((r11*x16040))+(((-1.0)*gconst62*r10*x16039*x16043))+((r10*x16042))+(((-1.0)*r12*x16038*x16043))+((x16041*x16054)));
evalcond[4]=(((sj3*x16039*x16041))+(((-1.0)*r12*sj3*x16052))+(((-1.0)*gconst61*r10*x16043))+(((-1.0)*r10*x16040*x16051))+(((-1.0)*gconst62*r11*x16043)));
evalcond[5]=((((-1.0)*x16044))+((x16047*x16054))+(((-1.0)*r02*x16038*x16043))+((cj1*cj2))+((r01*x16040))+((r00*x16042))+(((-1.0)*gconst62*r00*x16039*x16043)));
evalcond[6]=(((r21*x16040))+(((-1.0)*x16055))+((r20*x16042))+(((-1.0)*r22*x16038*x16043))+(((-1.0)*gconst62*r20*x16039*x16043))+((x16045*x16054)));
evalcond[7]=(((r21*x16039*x16042))+(((-1.0)*r22*sj3*x16052))+(((-1.0)*r20*x16040*x16051))+x16044+(((-1.0)*gconst61*r20*x16043))+(((-1.0)*cj2*x16046))+(((-1.0)*gconst62*r21*x16043)));
evalcond[8]=((((-1.0)*gconst62*r01*x16043))+(((-1.0)*r00*x16040*x16051))+((r01*x16039*x16042))+(((-1.0)*gconst61*r00*x16043))+(((-1.0)*x16055))+(((-1.0)*r02*sj3*x16052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16056=((1.0)*gconst61);
CheckValue<IkReal> x16057 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst62*r00))+(((-1.0)*r01*x16056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16057.valid){
continue;
}
CheckValue<IkReal> x16058=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst62*r21))+(((-1.0)*r20*x16056)))),-1);
if(!x16058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16057.value)+(((1.5707963267949)*(x16058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16059=IKsin(j4);
IkReal x16060=IKcos(j4);
IkReal x16061=(gconst62*sj3);
IkReal x16062=(gconst61*r11);
IkReal x16063=(gconst61*sj3);
IkReal x16064=((1.0)*cj3);
IkReal x16065=(sj1*sj2);
IkReal x16066=(gconst61*r21);
IkReal x16067=((1.0)*cj1);
IkReal x16068=(gconst61*r01);
IkReal x16069=(cj3*gconst62);
IkReal x16070=(sj2*x16067);
IkReal x16071=((1.0)*cj2*sj1);
IkReal x16072=((1.0)*x16060);
IkReal x16073=((1.0)*x16059);
IkReal x16074=(gconst62*x16059);
IkReal x16075=(cj3*x16060);
IkReal x16076=(x16071+x16070);
evalcond[0]=((((-1.0)*r22*x16072))+((r20*x16074))+(((-1.0)*x16066*x16073)));
evalcond[1]=((((-1.0)*x16068*x16073))+((r00*x16074))+(((-1.0)*r02*x16072)));
evalcond[2]=((1.0)+((r10*x16074))+(((-1.0)*x16062*x16073))+(((-1.0)*r12*x16072)));
evalcond[3]=((((-1.0)*r12*x16059*x16064))+((x16062*x16075))+((r10*x16063))+(((-1.0)*gconst62*r10*x16060*x16064))+((r11*x16061)));
evalcond[4]=((((-1.0)*r12*sj3*x16073))+(((-1.0)*gconst62*r11*x16064))+(((-1.0)*gconst61*r10*x16064))+((sj3*x16060*x16062))+(((-1.0)*r10*x16061*x16072)));
evalcond[5]=(((x16068*x16075))+((r00*x16063))+((r01*x16061))+(((-1.0)*gconst62*r00*x16060*x16064))+(((-1.0)*r02*x16059*x16064))+((cj1*cj2))+(((-1.0)*x16065)));
evalcond[6]=(((x16066*x16075))+(((-1.0)*r22*x16059*x16064))+(((-1.0)*x16076))+((r21*x16061))+((r20*x16063))+(((-1.0)*gconst62*r20*x16060*x16064)));
evalcond[7]=((((-1.0)*r22*sj3*x16073))+((r21*x16060*x16063))+(((-1.0)*r20*x16061*x16072))+x16065+(((-1.0)*gconst62*r21*x16064))+(((-1.0)*gconst61*r20*x16064))+(((-1.0)*cj2*x16067)));
evalcond[8]=(((r01*x16060*x16063))+(((-1.0)*gconst61*r00*x16064))+(((-1.0)*x16076))+(((-1.0)*r00*x16061*x16072))+(((-1.0)*r02*sj3*x16073))+(((-1.0)*gconst62*r01*x16064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16078 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x16078)==0){
continue;
}
IkReal x16077=pow(x16078,-0.5);
CheckValue<IkReal> x16079 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16079.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x16079.value))));
IkReal gconst64=((1.0)*r01*x16077);
IkReal gconst65=((-1.0)*r00*x16077);
CheckValue<IkReal> x16080 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16080.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x16080.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x16083 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16083.valid){
continue;
}
IkReal x16081=((1.0)*(x16083.value));
IkReal x16082=x16077;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x16081)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x16081)));
IkReal gconst64=((1.0)*r01*x16082);
IkReal gconst65=((-1.0)*r00*x16082);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x16086 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x16086.valid){
continue;
}
IkReal x16084=((1.0)*(x16086.value));
IkReal x16085=x16077;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x16084)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x16084)));
IkReal gconst64=((1.0)*r01*x16085);
IkReal gconst65=((-1.0)*r00*x16085);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16087=gconst65*gconst65;
IkReal x16088=gconst64*gconst64;
IkReal x16089=(r11*r20);
IkReal x16090=(r22*sj3);
IkReal x16091=(gconst64*r10);
IkReal x16092=(gconst65*r11);
IkReal x16093=((1.0)*sj3);
IkReal x16094=((1.0)*cj3*gconst65);
IkReal x16095=(r21*x16088);
CheckValue<IkReal> x16096=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*gconst64*x16089*x16094))+((cj3*r10*r20*x16087))+(((-1.0)*r21*x16091*x16094))+((cj3*r11*x16095)))),-1);
if(!x16096.valid){
continue;
}
CheckValue<IkReal> x16097 = IKatan2WithCheck(IkReal((((x16090*x16091))+((x16090*x16092)))),IkReal((((sj3*x16087*x16089))+(((-1.0)*gconst64*r21*x16092*x16093))+((gconst65*r20*sj3*x16091))+(((-1.0)*r10*x16093*x16095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16096.value)))+(x16097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16098=IKsin(j4);
IkReal x16099=IKcos(j4);
IkReal x16100=(gconst65*r10);
IkReal x16101=((1.0)*cj3);
IkReal x16102=(gconst65*r21);
IkReal x16103=(sj1*sj2);
IkReal x16104=(gconst64*r00);
IkReal x16105=(gconst65*sj3);
IkReal x16106=((1.0)*cj2);
IkReal x16107=(cj3*gconst65);
IkReal x16108=(gconst64*sj3);
IkReal x16109=((1.0)*cj1*sj2);
IkReal x16110=(sj1*x16106);
IkReal x16111=((1.0)*x16099);
IkReal x16112=((1.0)*x16098);
IkReal x16113=(gconst65*x16098);
IkReal x16114=(cj3*gconst64*x16099);
IkReal x16115=(x16109+x16110);
evalcond[0]=(((r20*x16113))+(((-1.0)*gconst64*r21*x16112))+(((-1.0)*r22*x16111)));
evalcond[1]=(((r00*x16113))+(((-1.0)*r02*x16111))+(((-1.0)*gconst64*r01*x16112)));
evalcond[2]=((1.0)+(((-1.0)*r12*x16111))+((x16098*x16100))+(((-1.0)*gconst64*r11*x16112)));
evalcond[3]=((((-1.0)*r12*x16098*x16101))+(((-1.0)*x16099*x16100*x16101))+((r10*x16108))+((r11*x16105))+((r11*x16114)));
evalcond[4]=((((-1.0)*gconst65*r11*x16101))+((r11*x16099*x16108))+(((-1.0)*gconst64*r10*x16101))+(((-1.0)*sj3*x16100*x16111))+(((-1.0)*r12*sj3*x16112)));
evalcond[5]=(((r01*x16105))+(((-1.0)*gconst65*r00*x16099*x16101))+(((-1.0)*x16103))+(((-1.0)*r02*x16098*x16101))+((cj1*cj2))+((sj3*x16104))+((r01*x16114)));
evalcond[6]=((((-1.0)*gconst65*r20*x16099*x16101))+(((-1.0)*x16115))+((r21*x16114))+(((-1.0)*r22*x16098*x16101))+((r20*x16108))+((sj3*x16102)));
evalcond[7]=((((-1.0)*r22*sj3*x16112))+(((-1.0)*r20*x16105*x16111))+((r21*x16099*x16108))+(((-1.0)*x16101*x16102))+x16103+(((-1.0)*cj1*x16106))+(((-1.0)*gconst64*r20*x16101)));
evalcond[8]=((((-1.0)*x16115))+(((-1.0)*x16101*x16104))+((r01*x16099*x16108))+(((-1.0)*r02*sj3*x16112))+(((-1.0)*gconst65*r01*x16101))+(((-1.0)*r00*x16105*x16111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16116=((1.0)*gconst64);
CheckValue<IkReal> x16117 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst65*r00))+(((-1.0)*r01*x16116)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16117.valid){
continue;
}
CheckValue<IkReal> x16118=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x16116))+(((-1.0)*gconst65*r21)))),-1);
if(!x16118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16117.value)+(((1.5707963267949)*(x16118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16119=IKsin(j4);
IkReal x16120=IKcos(j4);
IkReal x16121=(gconst65*r10);
IkReal x16122=((1.0)*cj3);
IkReal x16123=(gconst65*r21);
IkReal x16124=(sj1*sj2);
IkReal x16125=(gconst64*r00);
IkReal x16126=(gconst65*sj3);
IkReal x16127=((1.0)*cj2);
IkReal x16128=(cj3*gconst65);
IkReal x16129=(gconst64*sj3);
IkReal x16130=((1.0)*cj1*sj2);
IkReal x16131=(sj1*x16127);
IkReal x16132=((1.0)*x16120);
IkReal x16133=((1.0)*x16119);
IkReal x16134=(gconst65*x16119);
IkReal x16135=(cj3*gconst64*x16120);
IkReal x16136=(x16130+x16131);
evalcond[0]=((((-1.0)*r22*x16132))+((r20*x16134))+(((-1.0)*gconst64*r21*x16133)));
evalcond[1]=((((-1.0)*r02*x16132))+(((-1.0)*gconst64*r01*x16133))+((r00*x16134)));
evalcond[2]=((1.0)+(((-1.0)*r12*x16132))+((x16119*x16121))+(((-1.0)*gconst64*r11*x16133)));
evalcond[3]=(((r11*x16126))+(((-1.0)*x16120*x16121*x16122))+((r10*x16129))+(((-1.0)*r12*x16119*x16122))+((r11*x16135)));
evalcond[4]=(((r11*x16120*x16129))+(((-1.0)*sj3*x16121*x16132))+(((-1.0)*gconst65*r11*x16122))+(((-1.0)*r12*sj3*x16133))+(((-1.0)*gconst64*r10*x16122)));
evalcond[5]=((((-1.0)*x16124))+(((-1.0)*r02*x16119*x16122))+(((-1.0)*gconst65*r00*x16120*x16122))+((sj3*x16125))+((r01*x16126))+((cj1*cj2))+((r01*x16135)));
evalcond[6]=((((-1.0)*r22*x16119*x16122))+((r20*x16129))+((sj3*x16123))+((r21*x16135))+(((-1.0)*x16136))+(((-1.0)*gconst65*r20*x16120*x16122)));
evalcond[7]=((((-1.0)*x16122*x16123))+(((-1.0)*r20*x16126*x16132))+x16124+(((-1.0)*cj1*x16127))+(((-1.0)*gconst64*r20*x16122))+(((-1.0)*r22*sj3*x16133))+((r21*x16120*x16129)));
evalcond[8]=((((-1.0)*r02*sj3*x16133))+(((-1.0)*x16122*x16125))+(((-1.0)*r00*x16126*x16132))+(((-1.0)*gconst65*r01*x16122))+((r01*x16120*x16129))+(((-1.0)*x16136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16137=IKPowWithIntegerCheck(IKsign((((gconst64*r00))+((gconst65*r01)))),-1);
if(!x16137.valid){
continue;
}
CheckValue<IkReal> x16138 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst64*r21))+((gconst65*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16137.value)))+(x16138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16139=IKsin(j4);
IkReal x16140=IKcos(j4);
IkReal x16141=(gconst65*r10);
IkReal x16142=((1.0)*cj3);
IkReal x16143=(gconst65*r21);
IkReal x16144=(sj1*sj2);
IkReal x16145=(gconst64*r00);
IkReal x16146=(gconst65*sj3);
IkReal x16147=((1.0)*cj2);
IkReal x16148=(cj3*gconst65);
IkReal x16149=(gconst64*sj3);
IkReal x16150=((1.0)*cj1*sj2);
IkReal x16151=(sj1*x16147);
IkReal x16152=((1.0)*x16140);
IkReal x16153=((1.0)*x16139);
IkReal x16154=(gconst65*x16139);
IkReal x16155=(cj3*gconst64*x16140);
IkReal x16156=(x16150+x16151);
evalcond[0]=((((-1.0)*gconst64*r21*x16153))+((r20*x16154))+(((-1.0)*r22*x16152)));
evalcond[1]=((((-1.0)*r02*x16152))+((r00*x16154))+(((-1.0)*gconst64*r01*x16153)));
evalcond[2]=((1.0)+(((-1.0)*gconst64*r11*x16153))+((x16139*x16141))+(((-1.0)*r12*x16152)));
evalcond[3]=((((-1.0)*x16140*x16141*x16142))+((r11*x16146))+((r11*x16155))+((r10*x16149))+(((-1.0)*r12*x16139*x16142)));
evalcond[4]=((((-1.0)*sj3*x16141*x16152))+(((-1.0)*r12*sj3*x16153))+((r11*x16140*x16149))+(((-1.0)*gconst64*r10*x16142))+(((-1.0)*gconst65*r11*x16142)));
evalcond[5]=((((-1.0)*x16144))+((sj3*x16145))+(((-1.0)*r02*x16139*x16142))+((r01*x16155))+((r01*x16146))+(((-1.0)*gconst65*r00*x16140*x16142))+((cj1*cj2)));
evalcond[6]=(((r21*x16155))+(((-1.0)*r22*x16139*x16142))+((r20*x16149))+((sj3*x16143))+(((-1.0)*gconst65*r20*x16140*x16142))+(((-1.0)*x16156)));
evalcond[7]=((((-1.0)*x16142*x16143))+(((-1.0)*r22*sj3*x16153))+((r21*x16140*x16149))+(((-1.0)*gconst64*r20*x16142))+(((-1.0)*cj1*x16147))+x16144+(((-1.0)*r20*x16146*x16152)));
evalcond[8]=((((-1.0)*x16142*x16145))+(((-1.0)*x16156))+((r01*x16140*x16149))+(((-1.0)*r00*x16146*x16152))+(((-1.0)*r02*sj3*x16153))+(((-1.0)*gconst65*r01*x16142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16157=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16157);
rxp1_1=(px*r21);
rxp1_2=(r11*x16157);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x16158=(cj5*r10);
IkReal x16159=(r11*sj5);
j4eval[0]=((((-1.0)*x16159))+x16158);
j4eval[1]=(((sj3*x16159))+(((-1.0)*sj3*x16158)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16160=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16160);
rxp1_1=(px*r21);
rxp1_2=(r11*x16160);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x16161=(r11*sj5);
IkReal x16162=(cj5*r10);
j4eval[0]=(x16162+(((-1.0)*x16161)));
j4eval[1]=(((cj3*x16161))+(((-1.0)*cj3*x16162)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16163=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16163);
rxp1_1=(px*r21);
rxp1_2=(r11*x16163);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16164=((1.0)*r10);
CheckValue<IkReal> x16165=IKPowWithIntegerCheck(cj3,-1);
if(!x16165.valid){
continue;
}
CheckValue<IkReal> x16166=IKPowWithIntegerCheck(r02,-1);
if(!x16166.valid){
continue;
}
CheckValue<IkReal> x16167=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x16164))+((cj3*r11*sj5))),-1);
if(!x16167.valid){
continue;
}
if( IKabs(((x16165.value)*(x16166.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16167.value)*(((((-1.0)*sj3*sj5*x16164))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16165.value)*(x16166.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x16167.value)*(((((-1.0)*sj3*sj5*x16164))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16165.value)*(x16166.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x16167.value)*(((((-1.0)*sj3*sj5*x16164))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16168=IKsin(j4);
IkReal x16169=IKcos(j4);
IkReal x16170=(r11*sj5);
IkReal x16171=(sj1*sj2);
IkReal x16172=((1.0)*cj3);
IkReal x16173=(r10*sj5);
IkReal x16174=(cj5*r10);
IkReal x16175=(r21*sj5);
IkReal x16176=((1.0)*cj1);
IkReal x16177=(cj5*r11);
IkReal x16178=(cj5*r20);
IkReal x16179=(r20*sj5);
IkReal x16180=(cj5*r21);
IkReal x16181=(sj2*x16176);
IkReal x16182=((1.0)*cj2*sj1);
IkReal x16183=((1.0)*x16168);
IkReal x16184=(cj3*x16169);
IkReal x16185=(sj3*x16169);
IkReal x16186=(x16181+x16182);
evalcond[0]=((-1.0)*r02*x16169);
evalcond[1]=(((x16168*x16178))+(((-1.0)*x16175*x16183)));
evalcond[2]=((1.0)+((x16168*x16174))+(((-1.0)*x16170*x16183)));
evalcond[3]=((((-1.0)*r02*x16168*x16172))+((cj1*cj2))+(((-1.0)*x16171)));
evalcond[4]=((((-1.0)*x16186))+(((-1.0)*r02*sj3*x16183)));
evalcond[5]=(((x16170*x16184))+((sj3*x16173))+((sj3*x16177))+(((-1.0)*x16169*x16172*x16174)));
evalcond[6]=((((-1.0)*x16174*x16185))+((x16170*x16185))+(((-1.0)*x16172*x16173))+(((-1.0)*x16172*x16177)));
evalcond[7]=(((sj3*x16180))+((sj3*x16179))+((x16175*x16184))+(((-1.0)*x16186))+(((-1.0)*x16169*x16172*x16178)));
evalcond[8]=((((-1.0)*x16178*x16185))+x16171+((x16175*x16185))+(((-1.0)*cj2*x16176))+(((-1.0)*x16172*x16180))+(((-1.0)*x16172*x16179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16187=(cj5*r10);
IkReal x16188=((1.0)*sj3);
IkReal x16189=(r11*sj5);
CheckValue<IkReal> x16190=IKPowWithIntegerCheck((x16187+(((-1.0)*x16189))),-1);
if(!x16190.valid){
continue;
}
CheckValue<IkReal> x16191=IKPowWithIntegerCheck((((cj3*x16189))+(((-1.0)*cj3*x16187))),-1);
if(!x16191.valid){
continue;
}
if( IKabs(((-1.0)*(x16190.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16191.value)*(((((-1.0)*r10*sj5*x16188))+(((-1.0)*cj5*r11*x16188)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x16190.value)))+IKsqr(((x16191.value)*(((((-1.0)*r10*sj5*x16188))+(((-1.0)*cj5*r11*x16188))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x16190.value)), ((x16191.value)*(((((-1.0)*r10*sj5*x16188))+(((-1.0)*cj5*r11*x16188))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16192=IKsin(j4);
IkReal x16193=IKcos(j4);
IkReal x16194=(r11*sj5);
IkReal x16195=(sj1*sj2);
IkReal x16196=((1.0)*cj3);
IkReal x16197=(r10*sj5);
IkReal x16198=(cj5*r10);
IkReal x16199=(r21*sj5);
IkReal x16200=((1.0)*cj1);
IkReal x16201=(cj5*r11);
IkReal x16202=(cj5*r20);
IkReal x16203=(r20*sj5);
IkReal x16204=(cj5*r21);
IkReal x16205=(sj2*x16200);
IkReal x16206=((1.0)*cj2*sj1);
IkReal x16207=((1.0)*x16192);
IkReal x16208=(cj3*x16193);
IkReal x16209=(sj3*x16193);
IkReal x16210=(x16206+x16205);
evalcond[0]=((-1.0)*r02*x16193);
evalcond[1]=((((-1.0)*x16199*x16207))+((x16192*x16202)));
evalcond[2]=((1.0)+((x16192*x16198))+(((-1.0)*x16194*x16207)));
evalcond[3]=((((-1.0)*x16195))+(((-1.0)*r02*x16192*x16196))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*sj3*x16207))+(((-1.0)*x16210)));
evalcond[5]=((((-1.0)*x16193*x16196*x16198))+((sj3*x16201))+((x16194*x16208))+((sj3*x16197)));
evalcond[6]=((((-1.0)*x16196*x16201))+(((-1.0)*x16196*x16197))+(((-1.0)*x16198*x16209))+((x16194*x16209)));
evalcond[7]=((((-1.0)*x16210))+((x16199*x16208))+(((-1.0)*x16193*x16196*x16202))+((sj3*x16203))+((sj3*x16204)));
evalcond[8]=((((-1.0)*x16196*x16204))+(((-1.0)*x16196*x16203))+x16195+((x16199*x16209))+(((-1.0)*cj2*x16200))+(((-1.0)*x16202*x16209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16211=(cj5*r10);
IkReal x16212=(r11*sj5);
CheckValue<IkReal> x16213=IKPowWithIntegerCheck(((((-1.0)*x16212))+x16211),-1);
if(!x16213.valid){
continue;
}
CheckValue<IkReal> x16214=IKPowWithIntegerCheck((((sj3*x16212))+(((-1.0)*sj3*x16211))),-1);
if(!x16214.valid){
continue;
}
if( IKabs(((-1.0)*(x16213.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16214.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x16213.value)))+IKsqr(((x16214.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x16213.value)), ((x16214.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16215=IKsin(j4);
IkReal x16216=IKcos(j4);
IkReal x16217=(r11*sj5);
IkReal x16218=(sj1*sj2);
IkReal x16219=((1.0)*cj3);
IkReal x16220=(r10*sj5);
IkReal x16221=(cj5*r10);
IkReal x16222=(r21*sj5);
IkReal x16223=((1.0)*cj1);
IkReal x16224=(cj5*r11);
IkReal x16225=(cj5*r20);
IkReal x16226=(r20*sj5);
IkReal x16227=(cj5*r21);
IkReal x16228=(sj2*x16223);
IkReal x16229=((1.0)*cj2*sj1);
IkReal x16230=((1.0)*x16215);
IkReal x16231=(cj3*x16216);
IkReal x16232=(sj3*x16216);
IkReal x16233=(x16228+x16229);
evalcond[0]=((-1.0)*r02*x16216);
evalcond[1]=((((-1.0)*x16222*x16230))+((x16215*x16225)));
evalcond[2]=((1.0)+(((-1.0)*x16217*x16230))+((x16215*x16221)));
evalcond[3]=((((-1.0)*r02*x16215*x16219))+(((-1.0)*x16218))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*sj3*x16230))+(((-1.0)*x16233)));
evalcond[5]=((((-1.0)*x16216*x16219*x16221))+((sj3*x16220))+((sj3*x16224))+((x16217*x16231)));
evalcond[6]=((((-1.0)*x16219*x16224))+(((-1.0)*x16219*x16220))+(((-1.0)*x16221*x16232))+((x16217*x16232)));
evalcond[7]=((((-1.0)*x16216*x16219*x16225))+((x16222*x16231))+((sj3*x16227))+((sj3*x16226))+(((-1.0)*x16233)));
evalcond[8]=((((-1.0)*x16219*x16227))+(((-1.0)*x16219*x16226))+((x16222*x16232))+x16218+(((-1.0)*cj2*x16223))+(((-1.0)*x16225*x16232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16234=cj5*cj5;
IkReal x16235=(r11*sj3);
IkReal x16236=(cj3*r10);
IkReal x16237=(cj3*r11);
IkReal x16238=(r10*sj3);
IkReal x16239=(cj5*r20*sj5);
IkReal x16240=(r21*x16234);
IkReal x16241=(r20*x16234);
IkReal x16242=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x16243=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x16236*x16241))+(((-1.0)*x16236*x16242))+((r21*x16237))+(((-1.0)*x16237*x16239))+(((-1.0)*x16237*x16240)))),-1);
if(!x16243.valid){
continue;
}
CheckValue<IkReal> x16244 = IKatan2WithCheck(IkReal((((cj5*r22*x16235))+((r22*sj5*x16238)))),IkReal(((((-1.0)*x16235*x16242))+(((-1.0)*r21*x16238))+((x16235*x16241))+((x16238*x16239))+((x16238*x16240)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16243.value)))+(x16244.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16245=IKsin(j4);
IkReal x16246=IKcos(j4);
IkReal x16247=((1.0)*r22);
IkReal x16248=(cj1*cj2);
IkReal x16249=(r11*sj5);
IkReal x16250=((1.0)*cj3);
IkReal x16251=(cj5*r21);
IkReal x16252=(r00*sj5);
IkReal x16253=(sj1*sj2);
IkReal x16254=(cj5*r01);
IkReal x16255=(r10*sj5);
IkReal x16256=(cj5*r10);
IkReal x16257=(r21*sj5);
IkReal x16258=(r01*sj5);
IkReal x16259=(cj5*r00);
IkReal x16260=(cj5*r20);
IkReal x16261=(r20*sj5);
IkReal x16262=(cj5*r11);
IkReal x16263=((1.0)*cj1*sj2);
IkReal x16264=((1.0)*cj2*sj1);
IkReal x16265=((1.0)*x16245);
IkReal x16266=(cj3*x16246);
IkReal x16267=((1.0)*x16246);
IkReal x16268=(sj3*x16246);
IkReal x16269=(x16264+x16263);
evalcond[0]=((((-1.0)*x16246*x16247))+(((-1.0)*x16257*x16265))+((x16245*x16260)));
evalcond[1]=((((-1.0)*r02*x16267))+((x16245*x16259))+(((-1.0)*x16258*x16265)));
evalcond[2]=((1.0)+((x16245*x16256))+(((-1.0)*x16249*x16265))+(((-1.0)*r12*x16267)));
evalcond[3]=((((-1.0)*r12*x16245*x16250))+((x16249*x16266))+((sj3*x16262))+((sj3*x16255))+(((-1.0)*x16246*x16250*x16256)));
evalcond[4]=((((-1.0)*r12*sj3*x16265))+((x16249*x16268))+(((-1.0)*x16250*x16262))+(((-1.0)*x16250*x16255))+(((-1.0)*sj3*x16256*x16267)));
evalcond[5]=(x16248+(((-1.0)*r02*x16245*x16250))+(((-1.0)*x16253))+((sj3*x16254))+((sj3*x16252))+((x16258*x16266))+(((-1.0)*x16246*x16250*x16259)));
evalcond[6]=((((-1.0)*cj3*x16245*x16247))+((x16257*x16266))+((sj3*x16261))+((sj3*x16251))+(((-1.0)*x16246*x16250*x16260))+(((-1.0)*x16269)));
evalcond[7]=((((-1.0)*sj3*x16260*x16267))+x16253+((x16257*x16268))+(((-1.0)*x16250*x16261))+(((-1.0)*sj3*x16245*x16247))+(((-1.0)*x16250*x16251))+(((-1.0)*x16248)));
evalcond[8]=((((-1.0)*r02*sj3*x16265))+(((-1.0)*x16250*x16254))+(((-1.0)*x16250*x16252))+((x16258*x16268))+(((-1.0)*sj3*x16259*x16267))+(((-1.0)*x16269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16270=((1.0)*sj5);
CheckValue<IkReal> x16271 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x16270))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16271.valid){
continue;
}
CheckValue<IkReal> x16272=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x16270))+(((-1.0)*cj5*r21)))),-1);
if(!x16272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16271.value)+(((1.5707963267949)*(x16272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16273=IKsin(j4);
IkReal x16274=IKcos(j4);
IkReal x16275=((1.0)*r22);
IkReal x16276=(cj1*cj2);
IkReal x16277=(r11*sj5);
IkReal x16278=((1.0)*cj3);
IkReal x16279=(cj5*r21);
IkReal x16280=(r00*sj5);
IkReal x16281=(sj1*sj2);
IkReal x16282=(cj5*r01);
IkReal x16283=(r10*sj5);
IkReal x16284=(cj5*r10);
IkReal x16285=(r21*sj5);
IkReal x16286=(r01*sj5);
IkReal x16287=(cj5*r00);
IkReal x16288=(cj5*r20);
IkReal x16289=(r20*sj5);
IkReal x16290=(cj5*r11);
IkReal x16291=((1.0)*cj1*sj2);
IkReal x16292=((1.0)*cj2*sj1);
IkReal x16293=((1.0)*x16273);
IkReal x16294=(cj3*x16274);
IkReal x16295=((1.0)*x16274);
IkReal x16296=(sj3*x16274);
IkReal x16297=(x16291+x16292);
evalcond[0]=((((-1.0)*x16285*x16293))+(((-1.0)*x16274*x16275))+((x16273*x16288)));
evalcond[1]=((((-1.0)*x16286*x16293))+(((-1.0)*r02*x16295))+((x16273*x16287)));
evalcond[2]=((1.0)+(((-1.0)*r12*x16295))+((x16273*x16284))+(((-1.0)*x16277*x16293)));
evalcond[3]=(((sj3*x16290))+((x16277*x16294))+((sj3*x16283))+(((-1.0)*x16274*x16278*x16284))+(((-1.0)*r12*x16273*x16278)));
evalcond[4]=((((-1.0)*x16278*x16283))+((x16277*x16296))+(((-1.0)*sj3*x16284*x16295))+(((-1.0)*x16278*x16290))+(((-1.0)*r12*sj3*x16293)));
evalcond[5]=((((-1.0)*r02*x16273*x16278))+(((-1.0)*x16281))+x16276+((x16286*x16294))+((sj3*x16280))+((sj3*x16282))+(((-1.0)*x16274*x16278*x16287)));
evalcond[6]=(((x16285*x16294))+(((-1.0)*cj3*x16273*x16275))+(((-1.0)*x16297))+((sj3*x16279))+((sj3*x16289))+(((-1.0)*x16274*x16278*x16288)));
evalcond[7]=((((-1.0)*sj3*x16288*x16295))+((x16285*x16296))+(((-1.0)*x16278*x16279))+(((-1.0)*x16278*x16289))+x16281+(((-1.0)*x16276))+(((-1.0)*sj3*x16273*x16275)));
evalcond[8]=((((-1.0)*x16278*x16282))+(((-1.0)*x16278*x16280))+(((-1.0)*sj3*x16287*x16295))+((x16286*x16296))+(((-1.0)*r02*sj3*x16293))+(((-1.0)*x16297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16298=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x16298.valid){
continue;
}
CheckValue<IkReal> x16299 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16298.value)))+(x16299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16300=IKsin(j4);
IkReal x16301=IKcos(j4);
IkReal x16302=((1.0)*r22);
IkReal x16303=(cj1*cj2);
IkReal x16304=(r11*sj5);
IkReal x16305=((1.0)*cj3);
IkReal x16306=(cj5*r21);
IkReal x16307=(r00*sj5);
IkReal x16308=(sj1*sj2);
IkReal x16309=(cj5*r01);
IkReal x16310=(r10*sj5);
IkReal x16311=(cj5*r10);
IkReal x16312=(r21*sj5);
IkReal x16313=(r01*sj5);
IkReal x16314=(cj5*r00);
IkReal x16315=(cj5*r20);
IkReal x16316=(r20*sj5);
IkReal x16317=(cj5*r11);
IkReal x16318=((1.0)*cj1*sj2);
IkReal x16319=((1.0)*cj2*sj1);
IkReal x16320=((1.0)*x16300);
IkReal x16321=(cj3*x16301);
IkReal x16322=((1.0)*x16301);
IkReal x16323=(sj3*x16301);
IkReal x16324=(x16318+x16319);
evalcond[0]=(((x16300*x16315))+(((-1.0)*x16301*x16302))+(((-1.0)*x16312*x16320)));
evalcond[1]=((((-1.0)*x16313*x16320))+((x16300*x16314))+(((-1.0)*r02*x16322)));
evalcond[2]=((1.0)+(((-1.0)*r12*x16322))+((x16300*x16311))+(((-1.0)*x16304*x16320)));
evalcond[3]=((((-1.0)*r12*x16300*x16305))+((x16304*x16321))+(((-1.0)*x16301*x16305*x16311))+((sj3*x16310))+((sj3*x16317)));
evalcond[4]=((((-1.0)*r12*sj3*x16320))+((x16304*x16323))+(((-1.0)*x16305*x16317))+(((-1.0)*x16305*x16310))+(((-1.0)*sj3*x16311*x16322)));
evalcond[5]=(x16303+(((-1.0)*r02*x16300*x16305))+((x16313*x16321))+((sj3*x16309))+((sj3*x16307))+(((-1.0)*x16301*x16305*x16314))+(((-1.0)*x16308)));
evalcond[6]=((((-1.0)*cj3*x16300*x16302))+((x16312*x16321))+(((-1.0)*x16324))+((sj3*x16306))+(((-1.0)*x16301*x16305*x16315))+((sj3*x16316)));
evalcond[7]=((((-1.0)*sj3*x16300*x16302))+x16308+((x16312*x16323))+(((-1.0)*x16305*x16316))+(((-1.0)*sj3*x16315*x16322))+(((-1.0)*x16305*x16306))+(((-1.0)*x16303)));
evalcond[8]=((((-1.0)*r02*sj3*x16320))+(((-1.0)*sj3*x16314*x16322))+(((-1.0)*x16324))+((x16313*x16323))+(((-1.0)*x16305*x16307))+(((-1.0)*x16305*x16309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16325=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16325);
rxp0_2=(py*r00);
rxp1_0=(r21*x16325);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16326=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16326);
rxp0_2=(py*r00);
rxp1_0=(r21*x16326);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16327=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16327);
rxp0_2=(py*r00);
rxp1_0=(r21*x16327);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16328=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16328);
rxp0_2=(py*r00);
rxp1_0=(r21*x16328);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16329=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16329);
rxp0_2=(py*r00);
rxp1_0=(r21*x16329);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16330=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16330);
rxp0_2=(py*r00);
rxp1_0=(r21*x16330);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16333=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x16333.valid){
continue;
}
IkReal x16331=x16333.value;
IkReal x16332=(cj0*x16331);
cj4array[0]=(((cj1*cj2*x16332))+(((-1.0)*sj1*sj2*x16332)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16334=IKsin(j4);
IkReal x16335=IKcos(j4);
IkReal x16336=(cj5*r20);
IkReal x16337=((1.0)*x16335);
IkReal x16338=((1.0)*sj5*x16334);
evalcond[0]=((-1.0)*r12*x16334);
evalcond[1]=((((-1.0)*r12*x16337))+(((-1.0)*cj0)));
evalcond[2]=(((x16334*x16336))+(((-1.0)*r21*x16338)));
evalcond[3]=(((cj5*r00*x16334))+(((-1.0)*r01*x16338)));
evalcond[4]=((((-1.0)*cj2*sj1))+((r21*sj5*x16335))+(((-1.0)*cj1*sj2))+(((-1.0)*x16336*x16337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16340=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x16340.valid){
continue;
}
IkReal x16339=x16340.value;
cj4array[0]=(((cj2*sj1*x16339))+((cj1*sj2*x16339)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16341=IKsin(j4);
IkReal x16342=IKcos(j4);
IkReal x16343=(cj5*r00);
IkReal x16344=(r01*sj5);
IkReal x16345=((1.0)*cj0);
IkReal x16346=((1.0)*x16342);
IkReal x16347=((1.0)*x16341);
evalcond[0]=((-1.0)*r12*x16341);
evalcond[1]=((((-1.0)*x16345))+(((-1.0)*r12*x16346)));
evalcond[2]=(((cj5*r20*x16341))+(((-1.0)*r21*sj5*x16347)));
evalcond[3]=((((-1.0)*x16344*x16347))+((x16341*x16343)));
evalcond[4]=((((-1.0)*x16343*x16346))+(((-1.0)*cj1*cj2*x16345))+((x16342*x16344))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16348=IKPowWithIntegerCheck(r12,-1);
if(!x16348.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16348.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16349=IKsin(j4);
IkReal x16350=IKcos(j4);
IkReal x16351=(r01*sj5);
IkReal x16352=((1.0)*cj1);
IkReal x16353=(r21*sj5);
IkReal x16354=((1.0)*x16349);
IkReal x16355=(cj5*x16349);
IkReal x16356=((1.0)*cj5*x16350);
evalcond[0]=((-1.0)*r12*x16349);
evalcond[1]=((((-1.0)*x16353*x16354))+((r20*x16355)));
evalcond[2]=(((r00*x16355))+(((-1.0)*x16351*x16354)));
evalcond[3]=((((-1.0)*sj2*x16352))+(((-1.0)*cj2*sj1))+((x16350*x16353))+(((-1.0)*r20*x16356)));
evalcond[4]=((((-1.0)*r00*x16356))+((x16350*x16351))+((cj0*sj1*sj2))+(((-1.0)*cj0*cj2*x16352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16357=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16357);
rxp0_2=(py*r00);
rxp1_0=(r21*x16357);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16358=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16358);
rxp0_2=(py*r00);
rxp1_0=(r21*x16358);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16359=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16359);
rxp0_2=(py*r00);
rxp1_0=(r21*x16359);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16362=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x16362.valid){
continue;
}
IkReal x16360=x16362.value;
IkReal x16361=(cj0*x16360);
cj4array[0]=(((cj1*cj2*x16361))+(((-1.0)*sj1*sj2*x16361)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16363=IKsin(j4);
IkReal x16364=IKcos(j4);
IkReal x16365=(cj5*r20);
IkReal x16366=((1.0)*sj5);
evalcond[0]=(r12*x16363);
evalcond[1]=((((-1.0)*r12*x16364))+(((-1.0)*cj0)));
evalcond[2]=(((x16363*x16365))+(((-1.0)*r21*x16363*x16366)));
evalcond[3]=((((-1.0)*r01*x16363*x16366))+((cj5*r00*x16363)));
evalcond[4]=((((-1.0)*r21*x16364*x16366))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x16364*x16365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16368=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x16368.valid){
continue;
}
IkReal x16367=x16368.value;
cj4array[0]=(((cj1*sj2*x16367))+((cj2*sj1*x16367)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16369=IKsin(j4);
IkReal x16370=IKcos(j4);
IkReal x16371=(cj5*r00);
IkReal x16372=((1.0)*cj0);
IkReal x16373=((1.0)*r01*sj5);
evalcond[0]=(r12*x16369);
evalcond[1]=((((-1.0)*x16372))+(((-1.0)*r12*x16370)));
evalcond[2]=((((-1.0)*r21*sj5*x16369))+((cj5*r20*x16369)));
evalcond[3]=((((-1.0)*x16369*x16373))+((x16369*x16371)));
evalcond[4]=((((-1.0)*x16370*x16373))+((x16370*x16371))+(((-1.0)*cj1*cj2*x16372))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16374=IKPowWithIntegerCheck(r12,-1);
if(!x16374.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16374.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16375=IKsin(j4);
IkReal x16376=IKcos(j4);
IkReal x16377=((1.0)*cj1);
IkReal x16378=((1.0)*sj5);
IkReal x16379=(cj5*x16376);
IkReal x16380=(cj5*x16375);
evalcond[0]=(r12*x16375);
evalcond[1]=((((-1.0)*r21*x16375*x16378))+((r20*x16380)));
evalcond[2]=(((r00*x16380))+(((-1.0)*r01*x16375*x16378)));
evalcond[3]=((((-1.0)*sj2*x16377))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x16376*x16378))+((r20*x16379)));
evalcond[4]=(((r00*x16379))+(((-1.0)*cj0*cj2*x16377))+(((-1.0)*r01*x16376*x16378))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16381=((-1.0)*r01);
CheckValue<IkReal> x16382 = IKatan2WithCheck(IkReal(r00),IkReal(x16381),IKFAST_ATAN2_MAGTHRESH);
if(!x16382.valid){
continue;
}
IkReal gconst66=((-1.0)*(x16382.value));
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x16381;
CheckValue<IkReal> x16383 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16383.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x16383.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16384=((-1.0)*r01);
IkReal x16385=((-1.0)*py);
CheckValue<IkReal> x16387 = IKatan2WithCheck(IkReal(r00),IkReal(x16384),IKFAST_ATAN2_MAGTHRESH);
if(!x16387.valid){
continue;
}
IkReal x16386=((-1.0)*(x16387.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16385);
rxp0_2=(py*r00);
rxp1_0=(r21*x16385);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x16386;
IkReal gconst66=x16386;
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x16384;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16388=((-1.0)*r01);
IkReal x16389=((-1.0)*py);
CheckValue<IkReal> x16391 = IKatan2WithCheck(IkReal(r00),IkReal(x16388),IKFAST_ATAN2_MAGTHRESH);
if(!x16391.valid){
continue;
}
IkReal x16390=((-1.0)*(x16391.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16389);
rxp0_2=(py*r00);
rxp1_0=(r21*x16389);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x16390;
IkReal gconst66=x16390;
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x16388;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16392=((-1.0)*r01);
IkReal x16393=((-1.0)*py);
CheckValue<IkReal> x16395 = IKatan2WithCheck(IkReal(r00),IkReal(x16392),IKFAST_ATAN2_MAGTHRESH);
if(!x16395.valid){
continue;
}
IkReal x16394=((-1.0)*(x16395.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16393);
rxp0_2=(py*r00);
rxp1_0=(r21*x16393);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x16394;
IkReal gconst66=x16394;
IkReal gconst67=((-1.0)*r00);
IkReal gconst68=x16392;
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r00*r21*sj3))+((r01*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16396=IKPowWithIntegerCheck(r12,-1);
if(!x16396.valid){
continue;
}
CheckValue<IkReal> x16397=IKPowWithIntegerCheck(sj3,-1);
if(!x16397.valid){
continue;
}
CheckValue<IkReal> x16398=IKPowWithIntegerCheck((((gconst67*r21*sj3))+(((-1.0)*gconst68*r20*sj3))),-1);
if(!x16398.valid){
continue;
}
if( IKabs(((x16396.value)*(x16397.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16398.value)*((((cj3*gconst67*r20))+(((-1.0)*sj1*sj2))+((cj3*gconst68*r21))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16396.value)*(x16397.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((x16398.value)*((((cj3*gconst67*r20))+(((-1.0)*sj1*sj2))+((cj3*gconst68*r21))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16396.value)*(x16397.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((x16398.value)*((((cj3*gconst67*r20))+(((-1.0)*sj1*sj2))+((cj3*gconst68*r21))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16399=IKsin(j4);
IkReal x16400=IKcos(j4);
IkReal x16401=(gconst67*r21);
IkReal x16402=(r01*sj3);
IkReal x16403=(cj2*sj1);
IkReal x16404=(sj1*sj2);
IkReal x16405=(gconst68*r00);
IkReal x16406=(cj1*sj2);
IkReal x16407=((1.0)*gconst68);
IkReal x16408=(gconst67*sj3);
IkReal x16409=(cj3*r01);
IkReal x16410=((1.0)*x16399);
IkReal x16411=((1.0)*cj1*cj2);
IkReal x16412=(gconst67*x16400);
IkReal x16413=(sj3*x16400);
IkReal x16414=((1.0)*cj3*r20);
IkReal x16415=(gconst68*x16400);
IkReal x16416=((1.0)*cj3*r00);
evalcond[0]=((((-1.0)*r12*x16400))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x16401*x16410))+((gconst68*r20*x16399)));
evalcond[2]=(sj0+(((-1.0)*gconst67*r01*x16410))+((x16399*x16405)));
evalcond[3]=(((sj0*x16403))+((sj0*x16406))+(((-1.0)*r12*sj3*x16410)));
evalcond[4]=((((-1.0)*cj3*r12*x16410))+((sj0*x16404))+(((-1.0)*sj0*x16411)));
evalcond[5]=(((r20*x16408))+(((-1.0)*cj3*r20*x16400*x16407))+((cj3*x16400*x16401))+((gconst68*r21*sj3))+(((-1.0)*x16403))+(((-1.0)*x16406)));
evalcond[6]=(x16404+(((-1.0)*r20*x16407*x16413))+((x16401*x16413))+(((-1.0)*gconst67*x16414))+(((-1.0)*x16411))+(((-1.0)*cj3*r21*x16407)));
evalcond[7]=(((x16409*x16412))+((cj0*x16404))+((gconst68*x16402))+(((-1.0)*cj3*x16400*x16405))+((r00*x16408))+(((-1.0)*cj0*x16411)));
evalcond[8]=((((-1.0)*x16407*x16409))+((cj0*x16406))+((cj0*x16403))+((x16402*x16412))+(((-1.0)*gconst67*x16416))+(((-1.0)*x16405*x16413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16418=IKPowWithIntegerCheck(r12,-1);
if(!x16418.valid){
continue;
}
IkReal x16417=x16418.value;
CheckValue<IkReal> x16419=IKPowWithIntegerCheck(cj3,-1);
if(!x16419.valid){
continue;
}
if( IKabs((x16417*(x16419.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16417)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16417*(x16419.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x16417))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16417*(x16419.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x16417));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16420=IKsin(j4);
IkReal x16421=IKcos(j4);
IkReal x16422=(gconst67*r21);
IkReal x16423=(r01*sj3);
IkReal x16424=(cj2*sj1);
IkReal x16425=(sj1*sj2);
IkReal x16426=(gconst68*r00);
IkReal x16427=(cj1*sj2);
IkReal x16428=((1.0)*gconst68);
IkReal x16429=(gconst67*sj3);
IkReal x16430=(cj3*r01);
IkReal x16431=((1.0)*x16420);
IkReal x16432=((1.0)*cj1*cj2);
IkReal x16433=(gconst67*x16421);
IkReal x16434=(sj3*x16421);
IkReal x16435=((1.0)*cj3*r20);
IkReal x16436=(gconst68*x16421);
IkReal x16437=((1.0)*cj3*r00);
evalcond[0]=((((-1.0)*r12*x16421))+(((-1.0)*cj0)));
evalcond[1]=(((gconst68*r20*x16420))+(((-1.0)*x16422*x16431)));
evalcond[2]=(sj0+(((-1.0)*gconst67*r01*x16431))+((x16420*x16426)));
evalcond[3]=(((sj0*x16424))+((sj0*x16427))+(((-1.0)*r12*sj3*x16431)));
evalcond[4]=((((-1.0)*sj0*x16432))+((sj0*x16425))+(((-1.0)*cj3*r12*x16431)));
evalcond[5]=(((gconst68*r21*sj3))+(((-1.0)*cj3*r20*x16421*x16428))+((cj3*x16421*x16422))+(((-1.0)*x16427))+(((-1.0)*x16424))+((r20*x16429)));
evalcond[6]=((((-1.0)*cj3*r21*x16428))+(((-1.0)*x16432))+x16425+(((-1.0)*r20*x16428*x16434))+(((-1.0)*gconst67*x16435))+((x16422*x16434)));
evalcond[7]=((((-1.0)*cj0*x16432))+((r00*x16429))+((x16430*x16433))+((gconst68*x16423))+((cj0*x16425))+(((-1.0)*cj3*x16421*x16426)));
evalcond[8]=((((-1.0)*x16426*x16434))+((cj0*x16424))+((cj0*x16427))+(((-1.0)*gconst67*x16437))+(((-1.0)*x16428*x16430))+((x16423*x16433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16439=IKPowWithIntegerCheck(r12,-1);
if(!x16439.valid){
continue;
}
IkReal x16438=x16439.value;
CheckValue<IkReal> x16440=IKPowWithIntegerCheck(sj3,-1);
if(!x16440.valid){
continue;
}
if( IKabs((x16438*(x16440.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16438)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16438*(x16440.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x16438))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16438*(x16440.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x16438));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16441=IKsin(j4);
IkReal x16442=IKcos(j4);
IkReal x16443=(gconst67*r21);
IkReal x16444=(r01*sj3);
IkReal x16445=(cj2*sj1);
IkReal x16446=(sj1*sj2);
IkReal x16447=(gconst68*r00);
IkReal x16448=(cj1*sj2);
IkReal x16449=((1.0)*gconst68);
IkReal x16450=(gconst67*sj3);
IkReal x16451=(cj3*r01);
IkReal x16452=((1.0)*x16441);
IkReal x16453=((1.0)*cj1*cj2);
IkReal x16454=(gconst67*x16442);
IkReal x16455=(sj3*x16442);
IkReal x16456=((1.0)*cj3*r20);
IkReal x16457=(gconst68*x16442);
IkReal x16458=((1.0)*cj3*r00);
evalcond[0]=((((-1.0)*r12*x16442))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x16443*x16452))+((gconst68*r20*x16441)));
evalcond[2]=(sj0+(((-1.0)*gconst67*r01*x16452))+((x16441*x16447)));
evalcond[3]=(((sj0*x16448))+((sj0*x16445))+(((-1.0)*r12*sj3*x16452)));
evalcond[4]=((((-1.0)*sj0*x16453))+((sj0*x16446))+(((-1.0)*cj3*r12*x16452)));
evalcond[5]=((((-1.0)*cj3*r20*x16442*x16449))+(((-1.0)*x16445))+(((-1.0)*x16448))+((gconst68*r21*sj3))+((cj3*x16442*x16443))+((r20*x16450)));
evalcond[6]=(((x16443*x16455))+(((-1.0)*x16453))+x16446+(((-1.0)*gconst67*x16456))+(((-1.0)*r20*x16449*x16455))+(((-1.0)*cj3*r21*x16449)));
evalcond[7]=(((r00*x16450))+(((-1.0)*cj0*x16453))+((x16451*x16454))+(((-1.0)*cj3*x16442*x16447))+((gconst68*x16444))+((cj0*x16446)));
evalcond[8]=((((-1.0)*x16449*x16451))+((x16444*x16454))+(((-1.0)*gconst67*x16458))+(((-1.0)*x16447*x16455))+((cj0*x16448))+((cj0*x16445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x16459 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16459.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x16459.value))));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
CheckValue<IkReal> x16460 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16460.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x16460.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16461=((-1.0)*py);
CheckValue<IkReal> x16463 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16463.valid){
continue;
}
IkReal x16462=((1.0)*(x16463.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16461);
rxp0_2=(py*r00);
rxp1_0=(r21*x16461);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16462)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16462)));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16464=((-1.0)*py);
CheckValue<IkReal> x16466 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16466.valid){
continue;
}
IkReal x16465=((1.0)*(x16466.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16464);
rxp0_2=(py*r00);
rxp1_0=(r21*x16464);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16465)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16465)));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16467=((-1.0)*py);
CheckValue<IkReal> x16469 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x16469.valid){
continue;
}
IkReal x16468=((1.0)*(x16469.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16467);
rxp0_2=(py*r00);
rxp1_0=(r21*x16467);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16468)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16468)));
IkReal gconst70=((1.0)*r00);
IkReal gconst71=((1.0)*r01);
IkReal x16470=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r01*r20*x16470))+((r00*r21*x16470)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16471=IKPowWithIntegerCheck(r12,-1);
if(!x16471.valid){
continue;
}
CheckValue<IkReal> x16472=IKPowWithIntegerCheck(sj3,-1);
if(!x16472.valid){
continue;
}
CheckValue<IkReal> x16473=IKPowWithIntegerCheck(((((-1.0)*gconst71*r20*sj3))+((gconst70*r21*sj3))),-1);
if(!x16473.valid){
continue;
}
if( IKabs(((x16471.value)*(x16472.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16473.value)*(((((-1.0)*sj1*sj2))+((cj3*gconst70*r20))+((cj1*cj2))+((cj3*gconst71*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16471.value)*(x16472.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((x16473.value)*(((((-1.0)*sj1*sj2))+((cj3*gconst70*r20))+((cj1*cj2))+((cj3*gconst71*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16471.value)*(x16472.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((x16473.value)*(((((-1.0)*sj1*sj2))+((cj3*gconst70*r20))+((cj1*cj2))+((cj3*gconst71*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16474=IKsin(j4);
IkReal x16475=IKcos(j4);
IkReal x16476=(gconst70*r21);
IkReal x16477=(gconst70*r01);
IkReal x16478=(sj1*sj2);
IkReal x16479=((1.0)*cj2);
IkReal x16480=(gconst71*sj3);
IkReal x16481=(cj1*sj2);
IkReal x16482=(gconst70*r00);
IkReal x16483=((1.0)*cj3);
IkReal x16484=(cj2*sj1);
IkReal x16485=(gconst70*r20);
IkReal x16486=((1.0)*x16474);
IkReal x16487=(gconst71*x16483);
IkReal x16488=(r00*x16475);
IkReal x16489=(cj3*x16475);
IkReal x16490=(sj3*x16475);
IkReal x16491=(gconst71*x16474);
evalcond[0]=((((-1.0)*r12*x16475))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x16476*x16486))+((r20*x16491)));
evalcond[2]=(sj0+((r00*x16491))+(((-1.0)*x16477*x16486)));
evalcond[3]=(((sj0*x16484))+((sj0*x16481))+(((-1.0)*r12*sj3*x16486)));
evalcond[4]=((((-1.0)*cj1*sj0*x16479))+((sj0*x16478))+(((-1.0)*r12*x16474*x16483)));
evalcond[5]=(((x16476*x16489))+((sj3*x16485))+((r21*x16480))+(((-1.0)*sj1*x16479))+(((-1.0)*x16481))+(((-1.0)*r20*x16475*x16487)));
evalcond[6]=((((-1.0)*r20*x16475*x16480))+(((-1.0)*r21*x16487))+(((-1.0)*cj1*x16479))+x16478+((x16476*x16490))+(((-1.0)*x16483*x16485)));
evalcond[7]=((((-1.0)*x16487*x16488))+((sj3*x16482))+((x16477*x16489))+(((-1.0)*cj0*cj1*x16479))+((r01*x16480))+((cj0*x16478)));
evalcond[8]=((((-1.0)*x16480*x16488))+((x16477*x16490))+(((-1.0)*r01*x16487))+(((-1.0)*x16482*x16483))+((cj0*x16484))+((cj0*x16481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16493=IKPowWithIntegerCheck(r12,-1);
if(!x16493.valid){
continue;
}
IkReal x16492=x16493.value;
CheckValue<IkReal> x16494=IKPowWithIntegerCheck(cj3,-1);
if(!x16494.valid){
continue;
}
if( IKabs((x16492*(x16494.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16492)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16492*(x16494.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x16492))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16492*(x16494.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x16492));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16495=IKsin(j4);
IkReal x16496=IKcos(j4);
IkReal x16497=(gconst70*r21);
IkReal x16498=(gconst70*r01);
IkReal x16499=(sj1*sj2);
IkReal x16500=((1.0)*cj2);
IkReal x16501=(gconst71*sj3);
IkReal x16502=(cj1*sj2);
IkReal x16503=(gconst70*r00);
IkReal x16504=((1.0)*cj3);
IkReal x16505=(cj2*sj1);
IkReal x16506=(gconst70*r20);
IkReal x16507=((1.0)*x16495);
IkReal x16508=(gconst71*x16504);
IkReal x16509=(r00*x16496);
IkReal x16510=(cj3*x16496);
IkReal x16511=(sj3*x16496);
IkReal x16512=(gconst71*x16495);
evalcond[0]=((((-1.0)*r12*x16496))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x16497*x16507))+((r20*x16512)));
evalcond[2]=(sj0+((r00*x16512))+(((-1.0)*x16498*x16507)));
evalcond[3]=((((-1.0)*r12*sj3*x16507))+((sj0*x16505))+((sj0*x16502)));
evalcond[4]=((((-1.0)*cj1*sj0*x16500))+((sj0*x16499))+(((-1.0)*r12*x16495*x16504)));
evalcond[5]=(((sj3*x16506))+(((-1.0)*sj1*x16500))+((x16497*x16510))+((r21*x16501))+(((-1.0)*r20*x16496*x16508))+(((-1.0)*x16502)));
evalcond[6]=(x16499+(((-1.0)*r21*x16508))+((x16497*x16511))+(((-1.0)*r20*x16496*x16501))+(((-1.0)*cj1*x16500))+(((-1.0)*x16504*x16506)));
evalcond[7]=((((-1.0)*cj0*cj1*x16500))+((sj3*x16503))+((x16498*x16510))+((r01*x16501))+(((-1.0)*x16508*x16509))+((cj0*x16499)));
evalcond[8]=(((x16498*x16511))+(((-1.0)*x16503*x16504))+(((-1.0)*r01*x16508))+((cj0*x16502))+((cj0*x16505))+(((-1.0)*x16501*x16509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16514=IKPowWithIntegerCheck(r12,-1);
if(!x16514.valid){
continue;
}
IkReal x16513=x16514.value;
CheckValue<IkReal> x16515=IKPowWithIntegerCheck(sj3,-1);
if(!x16515.valid){
continue;
}
if( IKabs((x16513*(x16515.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16513)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16513*(x16515.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x16513))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16513*(x16515.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x16513));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16516=IKsin(j4);
IkReal x16517=IKcos(j4);
IkReal x16518=(gconst70*r21);
IkReal x16519=(gconst70*r01);
IkReal x16520=(sj1*sj2);
IkReal x16521=((1.0)*cj2);
IkReal x16522=(gconst71*sj3);
IkReal x16523=(cj1*sj2);
IkReal x16524=(gconst70*r00);
IkReal x16525=((1.0)*cj3);
IkReal x16526=(cj2*sj1);
IkReal x16527=(gconst70*r20);
IkReal x16528=((1.0)*x16516);
IkReal x16529=(gconst71*x16525);
IkReal x16530=(r00*x16517);
IkReal x16531=(cj3*x16517);
IkReal x16532=(sj3*x16517);
IkReal x16533=(gconst71*x16516);
evalcond[0]=((((-1.0)*r12*x16517))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*x16518*x16528))+((r20*x16533)));
evalcond[2]=(sj0+(((-1.0)*x16519*x16528))+((r00*x16533)));
evalcond[3]=(((sj0*x16526))+((sj0*x16523))+(((-1.0)*r12*sj3*x16528)));
evalcond[4]=((((-1.0)*r12*x16516*x16525))+((sj0*x16520))+(((-1.0)*cj1*sj0*x16521)));
evalcond[5]=(((r21*x16522))+(((-1.0)*r20*x16517*x16529))+(((-1.0)*x16523))+((sj3*x16527))+(((-1.0)*sj1*x16521))+((x16518*x16531)));
evalcond[6]=((((-1.0)*r21*x16529))+(((-1.0)*cj1*x16521))+x16520+(((-1.0)*r20*x16517*x16522))+(((-1.0)*x16525*x16527))+((x16518*x16532)));
evalcond[7]=((((-1.0)*x16529*x16530))+(((-1.0)*cj0*cj1*x16521))+((sj3*x16524))+((r01*x16522))+((x16519*x16531))+((cj0*x16520)));
evalcond[8]=((((-1.0)*x16522*x16530))+(((-1.0)*x16524*x16525))+((x16519*x16532))+((cj0*x16523))+((cj0*x16526))+(((-1.0)*r01*x16529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16534=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16534);
rxp0_2=(py*r00);
rxp1_0=(r21*x16534);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16535=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16535);
rxp0_2=(py*r00);
rxp1_0=(r21*x16535);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16536=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16536);
rxp0_2=(py*r00);
rxp1_0=(r21*x16536);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16539=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x16539.valid){
continue;
}
IkReal x16537=x16539.value;
IkReal x16538=((1.0)*cj0*x16537);
cj4array[0]=((((-1.0)*cj2*sj1*x16538))+(((-1.0)*cj1*sj2*x16538)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16540=IKsin(j4);
IkReal x16541=IKcos(j4);
IkReal x16542=(cj5*r20);
IkReal x16543=((1.0)*x16541);
IkReal x16544=((1.0)*sj5*x16540);
evalcond[0]=((-1.0)*r12*x16540);
evalcond[1]=((((-1.0)*r12*x16543))+(((-1.0)*cj0)));
evalcond[2]=(((x16540*x16542))+(((-1.0)*r21*x16544)));
evalcond[3]=(((cj5*r00*x16540))+(((-1.0)*r01*x16544)));
evalcond[4]=(((r21*sj5*x16541))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x16542*x16543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16546=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x16546.valid){
continue;
}
IkReal x16545=x16546.value;
cj4array[0]=(((cj1*cj2*x16545))+(((-1.0)*sj1*sj2*x16545)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16547=IKsin(j4);
IkReal x16548=IKcos(j4);
IkReal x16549=(cj5*r00);
IkReal x16550=(r01*sj5);
IkReal x16551=((1.0)*x16548);
IkReal x16552=((1.0)*x16547);
evalcond[0]=((-1.0)*r12*x16547);
evalcond[1]=((((-1.0)*r12*x16551))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*sj5*x16552))+((cj5*r20*x16547)));
evalcond[3]=((((-1.0)*x16550*x16552))+((x16547*x16549)));
evalcond[4]=((((-1.0)*x16549*x16551))+((x16548*x16550))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16553=IKPowWithIntegerCheck(r12,-1);
if(!x16553.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16553.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16554=IKsin(j4);
IkReal x16555=IKcos(j4);
IkReal x16556=(sj5*x16555);
IkReal x16557=(cj5*x16554);
IkReal x16558=((1.0)*sj5*x16554);
IkReal x16559=((1.0)*cj5*x16555);
evalcond[0]=((-1.0)*r12*x16554);
evalcond[1]=(((r20*x16557))+(((-1.0)*r21*x16558)));
evalcond[2]=(((r00*x16557))+(((-1.0)*r01*x16558)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x16559))+((r21*x16556)));
evalcond[4]=(((cj0*cj2*sj1))+((r01*x16556))+(((-1.0)*r00*x16559))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16560=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16560);
rxp0_2=(py*r00);
rxp1_0=(r21*x16560);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16561=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16561);
rxp0_2=(py*r00);
rxp1_0=(r21*x16561);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16562=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x16562);
rxp0_2=(py*r00);
rxp1_0=(r21*x16562);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16565=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x16565.valid){
continue;
}
IkReal x16563=x16565.value;
IkReal x16564=((1.0)*cj0*x16563);
cj4array[0]=((((-1.0)*cj2*sj1*x16564))+(((-1.0)*cj1*sj2*x16564)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16566=IKsin(j4);
IkReal x16567=IKcos(j4);
IkReal x16568=(cj5*r20);
IkReal x16569=((1.0)*sj5);
evalcond[0]=(r12*x16566);
evalcond[1]=((((-1.0)*r12*x16567))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r21*x16566*x16569))+((x16566*x16568)));
evalcond[3]=(((cj5*r00*x16566))+(((-1.0)*r01*x16566*x16569)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x16567*x16569))+((x16567*x16568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16571=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x16571.valid){
continue;
}
IkReal x16570=x16571.value;
cj4array[0]=((((-1.0)*sj1*sj2*x16570))+((cj1*cj2*x16570)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16572=IKsin(j4);
IkReal x16573=IKcos(j4);
IkReal x16574=(cj5*r00);
IkReal x16575=((1.0)*r01*sj5);
evalcond[0]=(r12*x16572);
evalcond[1]=((((-1.0)*r12*x16573))+(((-1.0)*cj0)));
evalcond[2]=(((cj5*r20*x16572))+(((-1.0)*r21*sj5*x16572)));
evalcond[3]=(((x16572*x16574))+(((-1.0)*x16572*x16575)));
evalcond[4]=(((x16573*x16574))+(((-1.0)*x16573*x16575))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16576=IKPowWithIntegerCheck(r12,-1);
if(!x16576.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x16576.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16577=IKsin(j4);
IkReal x16578=IKcos(j4);
IkReal x16579=(cj5*x16578);
IkReal x16580=((1.0)*r21*sj5);
IkReal x16581=((1.0)*r01*sj5);
IkReal x16582=(cj5*x16577);
evalcond[0]=(r12*x16577);
evalcond[1]=(((r20*x16582))+(((-1.0)*x16577*x16580)));
evalcond[2]=(((r00*x16582))+(((-1.0)*x16577*x16581)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x16578*x16580))+((r20*x16579)));
evalcond[4]=(((r00*x16579))+((cj0*cj2*sj1))+(((-1.0)*x16578*x16581))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16584=IKPowWithIntegerCheck(r12,-1);
if(!x16584.valid){
continue;
}
IkReal x16583=x16584.value;
CheckValue<IkReal> x16585=IKPowWithIntegerCheck(sj3,-1);
if(!x16585.valid){
continue;
}
if( IKabs((x16583*(x16585.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x16583)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16583*(x16585.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x16583))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16583*(x16585.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x16583));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16586=IKsin(j4);
IkReal x16587=IKcos(j4);
IkReal x16588=(cj0*cj1);
IkReal x16589=((1.0)*cj2);
IkReal x16590=(cj2*sj1);
IkReal x16591=((1.0)*cj3);
IkReal x16592=(cj5*r21);
IkReal x16593=(sj1*sj2);
IkReal x16594=(cj5*r01);
IkReal x16595=(r20*sj5);
IkReal x16596=(r01*sj5);
IkReal x16597=(cj1*sj2);
IkReal x16598=(r00*sj5);
IkReal x16599=(cj5*r00);
IkReal x16600=(cj5*r20);
IkReal x16601=((1.0)*x16586);
IkReal x16602=((1.0)*x16587);
IkReal x16603=(r21*sj5*x16587);
evalcond[0]=((((-1.0)*r12*x16602))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*r21*sj5*x16601))+((x16586*x16600)));
evalcond[2]=(sj0+(((-1.0)*x16596*x16601))+((x16586*x16599)));
evalcond[3]=(((sj0*x16597))+((sj0*x16590))+(((-1.0)*r12*sj3*x16601)));
evalcond[4]=(((sj0*x16593))+(((-1.0)*cj1*sj0*x16589))+(((-1.0)*r12*x16586*x16591)));
evalcond[5]=((((-1.0)*x16587*x16591*x16600))+(((-1.0)*x16597))+((sj3*x16595))+((sj3*x16592))+((cj3*x16603))+(((-1.0)*sj1*x16589)));
evalcond[6]=(((sj3*x16603))+x16593+(((-1.0)*x16591*x16595))+(((-1.0)*x16591*x16592))+(((-1.0)*sj3*x16600*x16602))+(((-1.0)*cj1*x16589)));
evalcond[7]=((((-1.0)*x16588*x16589))+((cj3*x16587*x16596))+((cj0*x16593))+((sj3*x16594))+((sj3*x16598))+(((-1.0)*x16587*x16591*x16599)));
evalcond[8]=(((sj3*x16587*x16596))+(((-1.0)*sj3*x16599*x16602))+((sj2*x16588))+((cj0*x16590))+(((-1.0)*x16591*x16594))+(((-1.0)*x16591*x16598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16604=((1.0)*sj5);
IkReal x16605=((1.0)*cj5);
CheckValue<IkReal> x16606=IKPowWithIntegerCheck(((((-1.0)*r01*x16604))+((cj5*r00))),-1);
if(!x16606.valid){
continue;
}
CheckValue<IkReal> x16607=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x16605))),-1);
if(!x16607.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x16606.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16607.value)*((((cj2*sj1))+(((-1.0)*r21*sj3*x16605))+((cj1*sj2))+(((-1.0)*r20*sj3*x16604)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x16606.value)))+IKsqr(((x16607.value)*((((cj2*sj1))+(((-1.0)*r21*sj3*x16605))+((cj1*sj2))+(((-1.0)*r20*sj3*x16604))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x16606.value)), ((x16607.value)*((((cj2*sj1))+(((-1.0)*r21*sj3*x16605))+((cj1*sj2))+(((-1.0)*r20*sj3*x16604))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16608=IKsin(j4);
IkReal x16609=IKcos(j4);
IkReal x16610=(cj0*cj1);
IkReal x16611=((1.0)*cj2);
IkReal x16612=(cj2*sj1);
IkReal x16613=((1.0)*cj3);
IkReal x16614=(cj5*r21);
IkReal x16615=(sj1*sj2);
IkReal x16616=(cj5*r01);
IkReal x16617=(r20*sj5);
IkReal x16618=(r01*sj5);
IkReal x16619=(cj1*sj2);
IkReal x16620=(r00*sj5);
IkReal x16621=(cj5*r00);
IkReal x16622=(cj5*r20);
IkReal x16623=((1.0)*x16608);
IkReal x16624=((1.0)*x16609);
IkReal x16625=(r21*sj5*x16609);
evalcond[0]=((((-1.0)*r12*x16624))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*r21*sj5*x16623))+((x16608*x16622)));
evalcond[2]=(sj0+(((-1.0)*x16618*x16623))+((x16608*x16621)));
evalcond[3]=(((sj0*x16619))+((sj0*x16612))+(((-1.0)*r12*sj3*x16623)));
evalcond[4]=(((sj0*x16615))+(((-1.0)*r12*x16608*x16613))+(((-1.0)*cj1*sj0*x16611)));
evalcond[5]=(((cj3*x16625))+(((-1.0)*x16609*x16613*x16622))+(((-1.0)*sj1*x16611))+((sj3*x16614))+((sj3*x16617))+(((-1.0)*x16619)));
evalcond[6]=((((-1.0)*cj1*x16611))+x16615+(((-1.0)*sj3*x16622*x16624))+(((-1.0)*x16613*x16617))+(((-1.0)*x16613*x16614))+((sj3*x16625)));
evalcond[7]=(((cj0*x16615))+(((-1.0)*x16609*x16613*x16621))+(((-1.0)*x16610*x16611))+((cj3*x16609*x16618))+((sj3*x16620))+((sj3*x16616)));
evalcond[8]=(((cj0*x16612))+(((-1.0)*sj3*x16621*x16624))+((sj3*x16609*x16618))+(((-1.0)*x16613*x16616))+(((-1.0)*x16613*x16620))+((sj2*x16610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16626=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x16626.valid){
continue;
}
CheckValue<IkReal> x16627=IKPowWithIntegerCheck(r12,-1);
if(!x16627.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x16626.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x16627.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x16626.value)))+IKsqr(((-1.0)*cj0*(x16627.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x16626.value)), ((-1.0)*cj0*(x16627.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16628=IKsin(j4);
IkReal x16629=IKcos(j4);
IkReal x16630=(cj0*cj1);
IkReal x16631=((1.0)*cj2);
IkReal x16632=(cj2*sj1);
IkReal x16633=((1.0)*cj3);
IkReal x16634=(cj5*r21);
IkReal x16635=(sj1*sj2);
IkReal x16636=(cj5*r01);
IkReal x16637=(r20*sj5);
IkReal x16638=(r01*sj5);
IkReal x16639=(cj1*sj2);
IkReal x16640=(r00*sj5);
IkReal x16641=(cj5*r00);
IkReal x16642=(cj5*r20);
IkReal x16643=((1.0)*x16628);
IkReal x16644=((1.0)*x16629);
IkReal x16645=(r21*sj5*x16629);
evalcond[0]=((((-1.0)*r12*x16644))+(((-1.0)*cj0)));
evalcond[1]=((((-1.0)*r21*sj5*x16643))+((x16628*x16642)));
evalcond[2]=(sj0+(((-1.0)*x16638*x16643))+((x16628*x16641)));
evalcond[3]=((((-1.0)*r12*sj3*x16643))+((sj0*x16639))+((sj0*x16632)));
evalcond[4]=((((-1.0)*cj1*sj0*x16631))+(((-1.0)*r12*x16628*x16633))+((sj0*x16635)));
evalcond[5]=(((cj3*x16645))+(((-1.0)*sj1*x16631))+((sj3*x16634))+((sj3*x16637))+(((-1.0)*x16639))+(((-1.0)*x16629*x16633*x16642)));
evalcond[6]=(((sj3*x16645))+(((-1.0)*x16633*x16634))+(((-1.0)*x16633*x16637))+(((-1.0)*sj3*x16642*x16644))+x16635+(((-1.0)*cj1*x16631)));
evalcond[7]=(((sj3*x16640))+((cj0*x16635))+(((-1.0)*x16630*x16631))+((sj3*x16636))+((cj3*x16629*x16638))+(((-1.0)*x16629*x16633*x16641)));
evalcond[8]=((((-1.0)*x16633*x16636))+((cj0*x16632))+((sj2*x16630))+(((-1.0)*x16633*x16640))+(((-1.0)*sj3*x16641*x16644))+((sj3*x16629*x16638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16646=((1.0)*sj5);
CheckValue<IkReal> x16647=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x16647.valid){
continue;
}
CheckValue<IkReal> x16648 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x16646))+(((-1.0)*r11*sj0*x16646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16647.value)))+(x16648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16649=IKsin(j4);
IkReal x16650=IKcos(j4);
IkReal x16651=(cj5*sj3);
IkReal x16652=(r11*sj5);
IkReal x16653=(cj2*sj1);
IkReal x16654=(sj1*sj2);
IkReal x16655=(r21*sj5);
IkReal x16656=(r01*sj5);
IkReal x16657=(cj1*sj2);
IkReal x16658=(sj3*sj5);
IkReal x16659=(cj3*cj5);
IkReal x16660=((1.0)*x16650);
IkReal x16661=((1.0)*x16649);
IkReal x16662=(cj3*x16650);
IkReal x16663=((1.0)*cj1*cj2);
IkReal x16664=((1.0)*x16659);
IkReal x16665=((1.0)*cj3*sj5);
IkReal x16666=(cj5*x16649);
IkReal x16667=(sj3*x16650);
evalcond[0]=((((-1.0)*x16655*x16661))+(((-1.0)*r22*x16660))+((r20*x16666)));
evalcond[1]=(sj0+(((-1.0)*x16656*x16661))+(((-1.0)*r02*x16660))+((r00*x16666)));
evalcond[2]=((((-1.0)*x16652*x16661))+(((-1.0)*r12*x16660))+((r10*x16666))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r20*x16659*x16660))+((r20*x16658))+(((-1.0)*cj3*r22*x16661))+((r21*x16651))+(((-1.0)*x16657))+(((-1.0)*x16653))+((x16655*x16662)));
evalcond[4]=((((-1.0)*r20*x16665))+x16654+(((-1.0)*r20*x16651*x16660))+(((-1.0)*r22*sj3*x16661))+((x16655*x16667))+(((-1.0)*x16663))+(((-1.0)*r21*x16664)));
evalcond[5]=(((x16656*x16662))+((cj0*x16654))+((r00*x16658))+((r01*x16651))+(((-1.0)*cj3*r02*x16661))+(((-1.0)*cj0*x16663))+(((-1.0)*r00*x16659*x16660)));
evalcond[6]=((((-1.0)*r10*x16659*x16660))+(((-1.0)*sj0*x16663))+((r11*x16651))+((x16652*x16662))+((r10*x16658))+((sj0*x16654))+(((-1.0)*cj3*r12*x16661)));
evalcond[7]=(((x16656*x16667))+((cj0*x16653))+((cj0*x16657))+(((-1.0)*r02*sj3*x16661))+(((-1.0)*r01*x16664))+(((-1.0)*r00*x16665))+(((-1.0)*r00*x16651*x16660)));
evalcond[8]=((((-1.0)*r10*x16651*x16660))+(((-1.0)*r11*x16664))+((x16652*x16667))+(((-1.0)*r10*x16665))+((sj0*x16657))+((sj0*x16653))+(((-1.0)*r12*sj3*x16661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16668=((1.0)*sj5);
CheckValue<IkReal> x16669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x16668))+(((-1.0)*cj5*r01)))),-1);
if(!x16669.valid){
continue;
}
CheckValue<IkReal> x16670 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x16668))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16669.value)))+(x16670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16671=IKsin(j4);
IkReal x16672=IKcos(j4);
IkReal x16673=(cj5*sj3);
IkReal x16674=(r11*sj5);
IkReal x16675=(cj2*sj1);
IkReal x16676=(sj1*sj2);
IkReal x16677=(r21*sj5);
IkReal x16678=(r01*sj5);
IkReal x16679=(cj1*sj2);
IkReal x16680=(sj3*sj5);
IkReal x16681=(cj3*cj5);
IkReal x16682=((1.0)*x16672);
IkReal x16683=((1.0)*x16671);
IkReal x16684=(cj3*x16672);
IkReal x16685=((1.0)*cj1*cj2);
IkReal x16686=((1.0)*x16681);
IkReal x16687=((1.0)*cj3*sj5);
IkReal x16688=(cj5*x16671);
IkReal x16689=(sj3*x16672);
evalcond[0]=((((-1.0)*r22*x16682))+((r20*x16688))+(((-1.0)*x16677*x16683)));
evalcond[1]=(sj0+((r00*x16688))+(((-1.0)*r02*x16682))+(((-1.0)*x16678*x16683)));
evalcond[2]=((((-1.0)*r12*x16682))+(((-1.0)*x16674*x16683))+((r10*x16688))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj3*r22*x16683))+((x16677*x16684))+(((-1.0)*r20*x16681*x16682))+((r20*x16680))+(((-1.0)*x16679))+(((-1.0)*x16675))+((r21*x16673)));
evalcond[4]=((((-1.0)*r22*sj3*x16683))+x16676+((x16677*x16689))+(((-1.0)*r20*x16687))+(((-1.0)*r21*x16686))+(((-1.0)*r20*x16673*x16682))+(((-1.0)*x16685)));
evalcond[5]=((((-1.0)*cj0*x16685))+(((-1.0)*cj3*r02*x16683))+(((-1.0)*r00*x16681*x16682))+((r00*x16680))+((cj0*x16676))+((x16678*x16684))+((r01*x16673)));
evalcond[6]=(((r11*x16673))+((sj0*x16676))+((x16674*x16684))+(((-1.0)*cj3*r12*x16683))+((r10*x16680))+(((-1.0)*sj0*x16685))+(((-1.0)*r10*x16681*x16682)));
evalcond[7]=(((cj0*x16675))+((cj0*x16679))+(((-1.0)*r00*x16673*x16682))+((x16678*x16689))+(((-1.0)*r02*sj3*x16683))+(((-1.0)*r00*x16687))+(((-1.0)*r01*x16686)));
evalcond[8]=((((-1.0)*r11*x16686))+((sj0*x16675))+((sj0*x16679))+((x16674*x16689))+(((-1.0)*r10*x16687))+(((-1.0)*r12*sj3*x16683))+(((-1.0)*r10*x16673*x16682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16690=((1.0)*sj5);
CheckValue<IkReal> x16691 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x16690)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16691.valid){
continue;
}
CheckValue<IkReal> x16692=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x16690)))),-1);
if(!x16692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16691.value)+(((1.5707963267949)*(x16692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16693=IKsin(j4);
IkReal x16694=IKcos(j4);
IkReal x16695=(cj5*sj3);
IkReal x16696=(r11*sj5);
IkReal x16697=(cj2*sj1);
IkReal x16698=(sj1*sj2);
IkReal x16699=(r21*sj5);
IkReal x16700=(r01*sj5);
IkReal x16701=(cj1*sj2);
IkReal x16702=(sj3*sj5);
IkReal x16703=(cj3*cj5);
IkReal x16704=((1.0)*x16694);
IkReal x16705=((1.0)*x16693);
IkReal x16706=(cj3*x16694);
IkReal x16707=((1.0)*cj1*cj2);
IkReal x16708=((1.0)*x16703);
IkReal x16709=((1.0)*cj3*sj5);
IkReal x16710=(cj5*x16693);
IkReal x16711=(sj3*x16694);
evalcond[0]=((((-1.0)*x16699*x16705))+(((-1.0)*r22*x16704))+((r20*x16710)));
evalcond[1]=(sj0+(((-1.0)*x16700*x16705))+(((-1.0)*r02*x16704))+((r00*x16710)));
evalcond[2]=((((-1.0)*x16696*x16705))+(((-1.0)*r12*x16704))+((r10*x16710))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x16702))+(((-1.0)*x16701))+(((-1.0)*cj3*r22*x16705))+((x16699*x16706))+(((-1.0)*x16697))+((r21*x16695))+(((-1.0)*r20*x16703*x16704)));
evalcond[4]=(x16698+(((-1.0)*r20*x16695*x16704))+((x16699*x16711))+(((-1.0)*r22*sj3*x16705))+(((-1.0)*r20*x16709))+(((-1.0)*r21*x16708))+(((-1.0)*x16707)));
evalcond[5]=(((cj0*x16698))+(((-1.0)*cj3*r02*x16705))+((x16700*x16706))+((r00*x16702))+((r01*x16695))+(((-1.0)*cj0*x16707))+(((-1.0)*r00*x16703*x16704)));
evalcond[6]=((((-1.0)*r10*x16703*x16704))+((r11*x16695))+((x16696*x16706))+(((-1.0)*cj3*r12*x16705))+((r10*x16702))+(((-1.0)*sj0*x16707))+((sj0*x16698)));
evalcond[7]=(((cj0*x16697))+((cj0*x16701))+(((-1.0)*r00*x16709))+(((-1.0)*r01*x16708))+((x16700*x16711))+(((-1.0)*r00*x16695*x16704))+(((-1.0)*r02*sj3*x16705)));
evalcond[8]=((((-1.0)*r12*sj3*x16705))+(((-1.0)*r10*x16709))+((x16696*x16711))+((sj0*x16701))+(((-1.0)*r11*x16708))+(((-1.0)*r10*x16695*x16704))+((sj0*x16697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16712=r21*r21;
IkReal x16713=cj5*cj5;
IkReal x16714=r20*r20;
IkReal x16715=(cj5*r21);
IkReal x16716=(r20*sj5);
IkReal x16717=((1.0)*sj5);
IkReal x16718=(sj1*sj2);
IkReal x16719=(cj3*cj5);
IkReal x16720=(cj1*cj2);
IkReal x16721=(cj5*r20);
IkReal x16722=((1.0)*cj3*r22);
IkReal x16723=(cj3*r20*r21);
IkReal x16724=(sj3*x16712);
CheckValue<IkReal> x16725=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+x16724+(((-2.0)*sj3*x16715*x16716))+((sj3*x16713*x16714))+(((-1.0)*x16713*x16724)))),-1);
if(!x16725.valid){
continue;
}
CheckValue<IkReal> x16726 = IKatan2WithCheck(IkReal(((((-1.0)*x16716*x16722))+(((-1.0)*x16715*x16722))+((r22*x16718))+(((-1.0)*r22*x16720)))),IkReal((x16723+((sj5*x16712*x16719))+((r21*sj5*x16720))+(((-1.0)*r21*x16717*x16718))+((x16718*x16721))+(((-2.0)*x16713*x16723))+(((-1.0)*x16720*x16721))+(((-1.0)*x16714*x16717*x16719)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16725.value)))+(x16726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16727=IKsin(j4);
IkReal x16728=IKcos(j4);
IkReal x16729=((1.0)*r22);
IkReal x16730=((1.0)*cj2);
IkReal x16731=(cj5*sj3);
IkReal x16732=((1.0)*r21);
IkReal x16733=(r20*sj5);
IkReal x16734=(cj3*cj5);
IkReal x16735=(r21*sj5*x16728);
IkReal x16736=((1.0)*r20*x16728);
evalcond[0]=((((-1.0)*x16728*x16729))+((cj5*r20*x16727))+(((-1.0)*sj5*x16727*x16732)));
evalcond[1]=((((-1.0)*cj3*x16727*x16729))+((sj3*x16733))+(((-1.0)*sj1*x16730))+(((-1.0)*cj1*sj2))+(((-1.0)*x16734*x16736))+((r21*x16731))+((cj3*x16735)));
evalcond[2]=(((sj3*x16735))+(((-1.0)*x16732*x16734))+(((-1.0)*x16731*x16736))+(((-1.0)*cj1*x16730))+((sj1*sj2))+(((-1.0)*cj3*x16733))+(((-1.0)*sj3*x16727*x16729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16737=(cj5*sj4);
IkReal x16738=(sj4*sj5);
if( IKabs((((r01*x16738))+(((-1.0)*r00*x16737))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x16738))+((r10*x16737))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x16738))+(((-1.0)*r00*x16737))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x16738))+((r10*x16737))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x16738))+(((-1.0)*r00*x16737))+((cj4*r02))), ((((-1.0)*r11*x16738))+((r10*x16737))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16739=IKcos(j0);
IkReal x16740=IKsin(j0);
IkReal x16741=((1.0)*cj3);
IkReal x16742=(r02*sj4);
IkReal x16743=(cj5*r11);
IkReal x16744=(cj4*cj5);
IkReal x16745=((1.0)*sj3);
IkReal x16746=(cj5*sj4);
IkReal x16747=(r01*sj5);
IkReal x16748=((1.0)*sj4);
IkReal x16749=(cj5*r01);
IkReal x16750=((1.0)*cj4);
IkReal x16751=((1.0)*cj2);
IkReal x16752=(cj4*sj3);
IkReal x16753=(cj3*cj4);
IkReal x16754=(r00*sj5);
IkReal x16755=((0.566)*sj2);
IkReal x16756=(r12*sj4);
IkReal x16757=(r11*sj5);
IkReal x16758=(r10*sj5);
IkReal x16759=((0.566)*cj2);
IkReal x16760=(cj1*x16739);
IkReal x16761=(cj1*x16740);
IkReal x16762=(sj1*x16739);
IkReal x16763=(sj1*x16740);
evalcond[0]=(x16740+((r00*x16746))+(((-1.0)*r02*x16750))+(((-1.0)*x16747*x16748)));
evalcond[1]=((((-1.0)*x16748*x16757))+(((-1.0)*r12*x16750))+((r10*x16746))+(((-1.0)*x16739)));
evalcond[2]=((((0.127)*x16749))+(((-0.607)*x16760))+(((-1.0)*px))+(((-1.0)*x16759*x16760))+(((0.127)*x16754))+((x16755*x16762))+(((0.188)*x16740)));
evalcond[3]=((((-0.188)*x16739))+(((0.127)*x16743))+(((-0.607)*x16761))+(((-1.0)*py))+(((-1.0)*x16759*x16761))+(((0.127)*x16758))+((x16755*x16763)));
evalcond[4]=((((-1.0)*r00*x16741*x16744))+(((-1.0)*x16751*x16760))+(((-1.0)*x16741*x16742))+((sj3*x16754))+((sj2*x16762))+((x16747*x16753))+((sj3*x16749)));
evalcond[5]=((((-1.0)*x16751*x16761))+(((-1.0)*x16741*x16756))+(((-1.0)*r10*x16741*x16744))+((sj3*x16758))+((sj2*x16763))+((sj3*x16743))+((x16753*x16757)));
evalcond[6]=((((-1.0)*x16742*x16745))+(((-1.0)*x16741*x16754))+(((-1.0)*x16741*x16749))+((sj2*x16760))+((x16747*x16752))+(((-1.0)*r00*x16744*x16745))+((cj2*x16762)));
evalcond[7]=((((-1.0)*x16741*x16758))+(((-1.0)*x16741*x16743))+((sj2*x16761))+((x16752*x16757))+(((-1.0)*x16745*x16756))+(((-1.0)*r10*x16744*x16745))+((cj2*x16763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16764=r21*r21;
IkReal x16765=cj5*cj5;
IkReal x16766=r20*r20;
IkReal x16767=(cj2*sj1);
IkReal x16768=(cj1*sj2);
IkReal x16769=((1.0)*r22);
IkReal x16770=(r20*r21);
IkReal x16771=((1.0)*sj3);
IkReal x16772=(cj5*sj5);
IkReal x16773=(r22*sj3);
IkReal x16774=(r21*sj5);
IkReal x16775=((1.0)*cj5*r20);
IkReal x16776=(cj3*x16765);
CheckValue<IkReal> x16777 = IKatan2WithCheck(IkReal(((((-1.0)*x16768*x16769))+((cj5*r21*x16773))+((r20*sj5*x16773))+(((-1.0)*x16767*x16769)))),IkReal((((x16767*x16774))+(((-1.0)*x16764*x16771*x16772))+(((2.0)*sj3*x16765*x16770))+((sj3*x16766*x16772))+(((-1.0)*x16770*x16771))+((x16768*x16774))+(((-1.0)*x16768*x16775))+(((-1.0)*x16767*x16775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16777.valid){
continue;
}
CheckValue<IkReal> x16778=IKPowWithIntegerCheck(IKsign((((cj3*x16764))+((cj3*(r22*r22)))+((x16766*x16776))+(((-2.0)*cj3*x16770*x16772))+(((-1.0)*x16764*x16776)))),-1);
if(!x16778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16777.value)+(((1.5707963267949)*(x16778.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16779=IKsin(j4);
IkReal x16780=IKcos(j4);
IkReal x16781=((1.0)*r22);
IkReal x16782=((1.0)*cj2);
IkReal x16783=(cj5*sj3);
IkReal x16784=((1.0)*r21);
IkReal x16785=(r20*sj5);
IkReal x16786=(cj3*cj5);
IkReal x16787=(r21*sj5*x16780);
IkReal x16788=((1.0)*r20*x16780);
evalcond[0]=(((cj5*r20*x16779))+(((-1.0)*x16780*x16781))+(((-1.0)*sj5*x16779*x16784)));
evalcond[1]=((((-1.0)*x16786*x16788))+((cj3*x16787))+((r21*x16783))+((sj3*x16785))+(((-1.0)*sj1*x16782))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*x16779*x16781)));
evalcond[2]=((((-1.0)*x16784*x16786))+(((-1.0)*sj3*x16779*x16781))+((sj3*x16787))+((sj1*sj2))+(((-1.0)*cj1*x16782))+(((-1.0)*cj3*x16785))+(((-1.0)*x16783*x16788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16789=(cj5*sj4);
IkReal x16790=(sj4*sj5);
if( IKabs((((r01*x16790))+(((-1.0)*r00*x16789))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x16789))+(((-1.0)*r11*x16790))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x16790))+(((-1.0)*r00*x16789))+((cj4*r02))))+IKsqr((((r10*x16789))+(((-1.0)*r11*x16790))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x16790))+(((-1.0)*r00*x16789))+((cj4*r02))), (((r10*x16789))+(((-1.0)*r11*x16790))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16791=IKcos(j0);
IkReal x16792=IKsin(j0);
IkReal x16793=((1.0)*cj3);
IkReal x16794=(r02*sj4);
IkReal x16795=(cj5*r11);
IkReal x16796=(cj4*cj5);
IkReal x16797=((1.0)*sj3);
IkReal x16798=(cj5*sj4);
IkReal x16799=(r01*sj5);
IkReal x16800=((1.0)*sj4);
IkReal x16801=(cj5*r01);
IkReal x16802=((1.0)*cj4);
IkReal x16803=((1.0)*cj2);
IkReal x16804=(cj4*sj3);
IkReal x16805=(cj3*cj4);
IkReal x16806=(r00*sj5);
IkReal x16807=((0.566)*sj2);
IkReal x16808=(r12*sj4);
IkReal x16809=(r11*sj5);
IkReal x16810=(r10*sj5);
IkReal x16811=((0.566)*cj2);
IkReal x16812=(cj1*x16791);
IkReal x16813=(cj1*x16792);
IkReal x16814=(sj1*x16791);
IkReal x16815=(sj1*x16792);
evalcond[0]=(x16792+(((-1.0)*r02*x16802))+(((-1.0)*x16799*x16800))+((r00*x16798)));
evalcond[1]=((((-1.0)*x16791))+((r10*x16798))+(((-1.0)*r12*x16802))+(((-1.0)*x16800*x16809)));
evalcond[2]=((((-1.0)*x16811*x16812))+((x16807*x16814))+(((0.127)*x16801))+(((0.127)*x16806))+(((-1.0)*px))+(((-0.607)*x16812))+(((0.188)*x16792)));
evalcond[3]=((((-1.0)*x16811*x16813))+((x16807*x16815))+(((-0.188)*x16791))+(((-1.0)*py))+(((0.127)*x16810))+(((0.127)*x16795))+(((-0.607)*x16813)));
evalcond[4]=(((sj3*x16806))+((sj3*x16801))+(((-1.0)*x16793*x16794))+(((-1.0)*r00*x16793*x16796))+(((-1.0)*x16803*x16812))+((sj2*x16814))+((x16799*x16805)));
evalcond[5]=(((sj3*x16795))+(((-1.0)*x16803*x16813))+((x16805*x16809))+(((-1.0)*r10*x16793*x16796))+((sj2*x16815))+((sj3*x16810))+(((-1.0)*x16793*x16808)));
evalcond[6]=((((-1.0)*x16794*x16797))+(((-1.0)*r00*x16796*x16797))+((sj2*x16812))+((cj2*x16814))+((x16799*x16804))+(((-1.0)*x16793*x16806))+(((-1.0)*x16793*x16801)));
evalcond[7]=((((-1.0)*x16793*x16795))+(((-1.0)*r10*x16796*x16797))+(((-1.0)*x16793*x16810))+((sj2*x16813))+((cj2*x16815))+((x16804*x16809))+(((-1.0)*x16797*x16808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - S10 (ced7ba73b344a140aff0566d39faf15f)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
